///Module containing a contract's types and functions.
/**

```solidity
library Checkpoints {
    struct Checkpoint208 { uint48 _key; uint208 _value; }
}
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Checkpoints {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /**```solidity
struct Checkpoint208 { uint48 _key; uint208 _value; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Checkpoint208 {
        #[allow(missing_docs)]
        pub _key: alloy::sol_types::private::primitives::aliases::U48,
        #[allow(missing_docs)]
        pub _value: alloy::sol_types::private::primitives::aliases::U208,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<48>,
            alloy::sol_types::sol_data::Uint<208>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U48,
            alloy::sol_types::private::primitives::aliases::U208,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Checkpoint208> for UnderlyingRustTuple<'_> {
            fn from(value: Checkpoint208) -> Self {
                (value._key, value._value)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Checkpoint208 {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    _key: tuple.0,
                    _value: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Checkpoint208 {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Checkpoint208 {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::SolType>::tokenize(&self._key),
                    <alloy::sol_types::sol_data::Uint<
                        208,
                    > as alloy_sol_types::SolType>::tokenize(&self._value),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Checkpoint208 {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Checkpoint208 {
            const NAME: &'static str = "Checkpoint208";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Checkpoint208(uint48 _key,uint208 _value)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self._key)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        208,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self._value)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Checkpoint208 {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust._key)
                    + <alloy::sol_types::sol_data::Uint<
                        208,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust._value,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    48,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust._key,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    208,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust._value,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Checkpoints`](self) contract instance.

See the [wrapper's documentation](`CheckpointsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CheckpointsInstance<T, P, N> {
        CheckpointsInstance::<T, P, N>::new(address, provider)
    }
    /**A [`Checkpoints`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Checkpoints`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CheckpointsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for CheckpointsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CheckpointsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CheckpointsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Checkpoints`](self) contract instance.

See the [wrapper's documentation](`CheckpointsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> CheckpointsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CheckpointsInstance<T, P, N> {
            CheckpointsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CheckpointsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CheckpointsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
///Module containing a contract's types and functions.
/**

```solidity
library IBridgeRateLimiter {
    struct BridgeConfig { uint256 dailyMintLimit; uint256 dailyBurnLimit; uint256 lastMintTimestamp; uint256 lastBurnTimestamp; uint256 currentMintUsed; uint256 currentBurnUsed; bool isActive; }
}
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod IBridgeRateLimiter {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /**```solidity
struct BridgeConfig { uint256 dailyMintLimit; uint256 dailyBurnLimit; uint256 lastMintTimestamp; uint256 lastBurnTimestamp; uint256 currentMintUsed; uint256 currentBurnUsed; bool isActive; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeConfig {
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub lastMintTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub lastBurnTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentMintUsed: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentBurnUsed: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeConfig> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeConfig) -> Self {
                (
                    value.dailyMintLimit,
                    value.dailyBurnLimit,
                    value.lastMintTimestamp,
                    value.lastBurnTimestamp,
                    value.currentMintUsed,
                    value.currentBurnUsed,
                    value.isActive,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeConfig {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    dailyMintLimit: tuple.0,
                    dailyBurnLimit: tuple.1,
                    lastMintTimestamp: tuple.2,
                    lastBurnTimestamp: tuple.3,
                    currentMintUsed: tuple.4,
                    currentBurnUsed: tuple.5,
                    isActive: tuple.6,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for BridgeConfig {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for BridgeConfig {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.lastMintTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.lastBurnTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentMintUsed),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentBurnUsed),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isActive,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for BridgeConfig {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for BridgeConfig {
            const NAME: &'static str = "BridgeConfig";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "BridgeConfig(uint256 dailyMintLimit,uint256 dailyBurnLimit,uint256 lastMintTimestamp,uint256 lastBurnTimestamp,uint256 currentMintUsed,uint256 currentBurnUsed,bool isActive)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.dailyMintLimit,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.dailyBurnLimit,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.lastMintTimestamp,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.lastBurnTimestamp,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currentMintUsed,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currentBurnUsed,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.isActive,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for BridgeConfig {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.dailyMintLimit,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.dailyBurnLimit,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.lastMintTimestamp,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.lastBurnTimestamp,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currentMintUsed,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currentBurnUsed,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.isActive,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.dailyMintLimit,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.dailyBurnLimit,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.lastMintTimestamp,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.lastBurnTimestamp,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currentMintUsed,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currentBurnUsed,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.isActive,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`IBridgeRateLimiter`](self) contract instance.

See the [wrapper's documentation](`IBridgeRateLimiterInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> IBridgeRateLimiterInstance<T, P, N> {
        IBridgeRateLimiterInstance::<T, P, N>::new(address, provider)
    }
    /**A [`IBridgeRateLimiter`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`IBridgeRateLimiter`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct IBridgeRateLimiterInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for IBridgeRateLimiterInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("IBridgeRateLimiterInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > IBridgeRateLimiterInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`IBridgeRateLimiter`](self) contract instance.

See the [wrapper's documentation](`IBridgeRateLimiterInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> IBridgeRateLimiterInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> IBridgeRateLimiterInstance<T, P, N> {
            IBridgeRateLimiterInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > IBridgeRateLimiterInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > IBridgeRateLimiterInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
/**

Generated by the following Solidity interface...
```solidity
library Checkpoints {
    struct Checkpoint208 {
        uint48 _key;
        uint208 _value;
    }
}

library IBridgeRateLimiter {
    struct BridgeConfig {
        uint256 dailyMintLimit;
        uint256 dailyBurnLimit;
        uint256 lastMintTimestamp;
        uint256 lastBurnTimestamp;
        uint256 currentMintUsed;
        uint256 currentBurnUsed;
        bool isActive;
    }
}

interface SyndicateTokenCrosschain {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error BridgeNotActive(address bridge);
    error BurnOnlyDuringLockPeriod();
    error CheckpointUnorderedInsertion();
    error ECDSAInvalidSignature();
    error ECDSAInvalidSignatureLength(uint256 length);
    error ECDSAInvalidSignatureS(bytes32 s);
    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);
    error ERC2612ExpiredSignature(uint256 deadline);
    error ERC2612InvalidSigner(address signer, address owner);
    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);
    error ERC6372InconsistentClock();
    error ExceedsTotalSupply();
    error InsufficientBurnLimit(address bridge, uint256 requested, uint256 available);
    error InsufficientMintLimit(address bridge, uint256 requested, uint256 available);
    error InvalidAccountNonce(address account, uint256 currentNonce);
    error InvalidShortString();
    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
    error StringTooLong(string str);
    error TransfersLocked();
    error UnauthorizedBridge(address bridge);
    error UnlockTimestampInPast();
    error UnlockTimestampTooLate();
    error VotesExpiredSignature(uint256 expiry);
    error ZeroAddress();
    error ZeroAmount();

    event Approval(address indexed owner, address indexed spender, uint256 value);
    event BridgeActiveStatusChanged(address indexed bridge, bool isActive);
    event BridgeAdded(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
    event BridgeLimitsSet(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
    event BridgeRemoved(address indexed bridge);
    event CrosschainBurn(address indexed from, uint256 amount, address indexed bridge);
    event CrosschainMint(address indexed to, uint256 amount, address indexed bridge);
    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);
    event EIP712DomainChanged();
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event TokensBurnedByManager(address indexed from, uint256 amount, address indexed burner);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event UnlockTimestampUpdated(uint256 oldTimestamp, uint256 newTimestamp, address indexed updatedBy);

    constructor(address defaultAdmin, address syndTreasuryAddress);

    function AIRDROP_MANAGER_ROLE() external view returns (bytes32);
    function BRIDGE_MANAGER_ROLE() external view returns (bytes32);
    function CLOCK_MODE() external view returns (string memory);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function EMISSION_MINTER_ROLE() external view returns (bytes32);
    function INITIAL_MINT_SUPPLY() external view returns (uint256);
    function MAX_LOCK_DURATION() external view returns (uint256);
    function TOTAL_SUPPLY() external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function bridgeConfigs(address) external view returns (uint256 dailyMintLimit, uint256 dailyBurnLimit, uint256 lastMintTimestamp, uint256 lastBurnTimestamp, uint256 currentMintUsed, uint256 currentBurnUsed, bool isActive);
    function bridges(uint256) external view returns (address);
    function burnFrom(address from, uint256 amount) external;
    function checkpoints(address account, uint32 pos) external view returns (Checkpoints.Checkpoint208 memory);
    function clock() external view returns (uint48);
    function crosschainBurn(address from, uint256 amount) external;
    function crosschainMint(address to, uint256 amount) external;
    function decimals() external view returns (uint8);
    function delegate(address delegatee) external;
    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;
    function delegates(address account) external view returns (address);
    function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
    function getAllBridges() external view returns (address[] memory allBridges);
    function getAvailableBurnLimit(address bridge) external view returns (uint256 available);
    function getAvailableMintLimit(address bridge) external view returns (uint256 available);
    function getBridgeAtIndex(uint256 index) external view returns (address bridge);
    function getBridgeConfig(address bridge) external view returns (IBridgeRateLimiter.BridgeConfig memory config);
    function getBridgeCount() external view returns (uint256 count);
    function getCurrentTotalSupply() external view returns (uint256);
    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);
    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);
    function getPastVotingPower(address account, uint256 blockNumber) external view returns (uint256);
    function getRemainingEmissions() external view returns (uint256);
    function getRemainingLockTime() external view returns (uint256);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function getVotes(address account) external view returns (uint256);
    function getVotingPower(address account) external view returns (uint256);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function isBridgeAdded(address) external view returns (bool);
    function isBridgeAuthorized(address bridge) external view returns (bool authorized);
    function maxLockTimestamp() external view returns (uint256);
    function mint(address to, uint256 amount) external;
    function name() external view returns (string memory);
    function nonces(address owner) external view returns (uint256);
    function numCheckpoints(address account) external view returns (uint32);
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
    function removeBridge(address bridge) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function setBridgeActive(address bridge, bool isActive) external;
    function setBridgeLimits(address bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit) external;
    function setUnlockTimestamp(uint256 newUnlockTimestamp) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function transfersLocked() external view returns (bool);
    function unlockTimestamp() external view returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "defaultAdmin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "syndTreasuryAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "AIRDROP_MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "BRIDGE_MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CLOCK_MODE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DOMAIN_SEPARATOR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "EMISSION_MINTER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "INITIAL_MINT_SUPPLY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MAX_LOCK_DURATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TOTAL_SUPPLY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeConfigs",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "lastMintTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "lastBurnTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentMintUsed",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentBurnUsed",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "isActive",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridges",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "burnFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "checkpoints",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "pos",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct Checkpoints.Checkpoint208",
        "components": [
          {
            "name": "_key",
            "type": "uint48",
            "internalType": "uint48"
          },
          {
            "name": "_value",
            "type": "uint208",
            "internalType": "uint208"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "clock",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint48",
        "internalType": "uint48"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "crosschainBurn",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "crosschainMint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "decimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "delegate",
    "inputs": [
      {
        "name": "delegatee",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "delegateBySig",
    "inputs": [
      {
        "name": "delegatee",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "expiry",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "v",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "delegates",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "eip712Domain",
    "inputs": [],
    "outputs": [
      {
        "name": "fields",
        "type": "bytes1",
        "internalType": "bytes1"
      },
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "version",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "verifyingContract",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "extensions",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllBridges",
    "inputs": [],
    "outputs": [
      {
        "name": "allBridges",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAvailableBurnLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAvailableMintLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeAtIndex",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeConfig",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "config",
        "type": "tuple",
        "internalType": "struct IBridgeRateLimiter.BridgeConfig",
        "components": [
          {
            "name": "dailyMintLimit",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "dailyBurnLimit",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "lastMintTimestamp",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "lastBurnTimestamp",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "currentMintUsed",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "currentBurnUsed",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "isActive",
            "type": "bool",
            "internalType": "bool"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeCount",
    "inputs": [],
    "outputs": [
      {
        "name": "count",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentTotalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPastTotalSupply",
    "inputs": [
      {
        "name": "timepoint",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPastVotes",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "timepoint",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPastVotingPower",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRemainingEmissions",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRemainingLockTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVotes",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVotingPower",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isBridgeAdded",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isBridgeAuthorized",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "authorized",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxLockTimestamp",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nonces",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "numCheckpoints",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permit",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "v",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeBridge",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeActive",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "isActive",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeLimits",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUnlockTimestamp",
    "inputs": [
      {
        "name": "newUnlockTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transfersLocked",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unlockTimestamp",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeActiveStatusChanged",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "isActive",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeAdded",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeLimitsSet",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeRemoved",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrosschainBurn",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrosschainMint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DelegateChanged",
    "inputs": [
      {
        "name": "delegator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "fromDelegate",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "toDelegate",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DelegateVotesChanged",
    "inputs": [
      {
        "name": "delegate",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "previousVotes",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newVotes",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EIP712DomainChanged",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TokensBurnedByManager",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "burner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UnlockTimestampUpdated",
    "inputs": [
      {
        "name": "oldTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "updatedBy",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeNotActive",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "BurnOnlyDuringLockPeriod",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CheckpointUnorderedInsertion",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureLength",
    "inputs": [
      {
        "name": "length",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureS",
    "inputs": [
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20ExceededSafeSupply",
    "inputs": [
      {
        "name": "increasedSupply",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "cap",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InsufficientAllowance",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "allowance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InsufficientBalance",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidApprover",
    "inputs": [
      {
        "name": "approver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidReceiver",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSender",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSpender",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC2612ExpiredSignature",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC2612InvalidSigner",
    "inputs": [
      {
        "name": "signer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC5805FutureLookup",
    "inputs": [
      {
        "name": "timepoint",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "clock",
        "type": "uint48",
        "internalType": "uint48"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC6372InconsistentClock",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExceedsTotalSupply",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientBurnLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "requested",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InsufficientMintLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "requested",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAccountNonce",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "currentNonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidShortString",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeCastOverflowedUintDowncast",
    "inputs": [
      {
        "name": "bits",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "StringTooLong",
    "inputs": [
      {
        "name": "str",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransfersLocked",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UnauthorizedBridge",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnlockTimestampInPast",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UnlockTimestampTooLate",
    "inputs": []
  },
  {
    "type": "error",
    "name": "VotesExpiredSignature",
    "inputs": [
      {
        "name": "expiry",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAmount",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateTokenCrosschain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610180604052346100845761001b610015610158565b9061019e565b610023610089565b616463611cdc823960805181614337015260a0518161436e015260c051816142fe015260e05181614c7c01526101005181614ca1015261012051816147cc0152610140518161480c0152610160518181816111110152613462015261646390f35b61008f565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100bb90610093565b810190811060018060401b038211176100d357604052565b61009d565b906100eb6100e4610089565b92836100b1565b565b5f80fd5b60018060a01b031690565b610105906100f1565b90565b610111816100fc565b0361011857565b5f80fd5b9050519061012982610108565b565b91906040838203126101535780610147610150925f860161011c565b9360200161011c565b90565b6100ed565b61017661813f8038038061016b816100d8565b92833981019061012b565b9091565b7fcce296b040332a080e6df13515a3ec2869e21cd20f7344af0987ddb938d8bd2190565b6101ab6101b892826101bb565b6101b361017a565b61099a565b50565b906101c5916101c7565b565b906101d191610416565b565b60018060401b0381116101ef576101eb602091610093565b0190565b61009d565b90610206610201836101d3565b6100d8565b918252565b5f7f53796e6469636174650000000000000000000000000000000000000000000000910152565b61023c60096101f4565b906102496020830161020b565b565b610253610232565b90565b5f7f53594e4400000000000000000000000000000000000000000000000000000000910152565b61028760046101f4565b9061029460208301610256565b565b61029e61027d565b90565b90565b90565b6102bb6102b66102c0926102a1565b6102a4565b6100f1565b90565b6102cc906102a7565b90565b5f0190565b90565b90565b6102ee6102e96102f3926102d4565b6102a4565b6102d7565b90565b6103026276a7006102da565b90565b634e487b7160e01b5f52601160045260245ffd5b61032861032e919392936102d7565b926102d7565b820180921161033957565b610305565b61035261034d610357926102a1565b6102a4565b6102d7565b90565b5f1b90565b9061036b5f199161035a565b9181191691161790565b61038961038461038e926102d7565b6102a4565b6102d7565b90565b90565b906103a96103a46103b092610375565b610391565b825461035f565b9055565b90565b6103cb6103c66103d0926102a1565b61035a565b6103b4565b90565b6103dc5f6103b7565b90565b90565b6103f66103f16103fb926103df565b6102a4565b6102d7565b90565b6104136b02e87669c308736a040000006103e2565b90565b9061043861042261024b565b61042a61024b565b610432610296565b916104fe565b8161045361044d6104485f6102c3565b6100fc565b916100fc565b146104e2578061047361046d6104685f6102c3565b6100fc565b916100fc565b146104c6576104b56104c4926104914261048b6102f6565b90610319565b610160526104a86104a15f61033e565b600c610394565b6104b06103d3565b61099a565b506104be6103fe565b90610a68565b565b5f63d92e233d60e01b8152806104de600482016102cf565b0390fd5b5f63d92e233d60e01b8152806104fa600482016102cf565b0390fd5b90610509929161050b565b565b906105169291610518565b565b906105239291610525565b565b906105309291610532565b565b9061053d929161058a565b565b5f7f3100000000000000000000000000000000000000000000000000000000000000910152565b61057060016101f4565b9061057d6020830161053f565b565b610587610566565b90565b9061059e929161059861057f565b906105a0565b565b906105ac9392916105f2565b565b90565b90565b60200190565b5190565b6105d26105cd6105d7926100f1565b6102a4565b6100f1565b90565b6105e3906105be565b90565b6105ef906105da565b90565b610603610653946106389394610687565b6106178161061160066105ae565b90610b15565b6101205261062f8361062960076105ae565b90610b15565b610140526105b1565b61064a610644826105ba565b916105b4565b2060e0526105b1565b61066561065f826105ba565b916105b4565b20610100524660a052610676610c1a565b608052610682306105e6565b60c052565b9061069191610693565b565b9061069d9161069f565b565b906106a9916108f0565b565b634e487b7160e01b5f525f60045260245ffd5b5190565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156106f6575b60208310146106f157565b6106c2565b91607f16916106e6565b5f5260205f2090565b601f602091010490565b1b90565b9190600861073291029161072c5f1984610713565b92610713565b9181191691161790565b919061075261074d61075a93610375565b610391565b908354610717565b9055565b5f90565b6107749161076e61075e565b9161073c565b565b5b818110610782575050565b8061078f5f600193610762565b01610777565b9190601f81116107a5575b505050565b6107b16107d693610700565b9060206107bd84610709565b830193106107de575b6107cf90610709565b0190610776565b5f80806107a0565b91506107cf819290506107c6565b1c90565b90610800905f19906008026107ec565b191690565b8161080f916107f0565b906002021790565b90610821816106be565b9060018060401b0382116108df576108438261083d85546106d6565b85610795565b602090601f831160011461087757918091610866935f9261086b575b5050610805565b90555b565b90915001515f8061085f565b601f1983169161088685610700565b925f5b8181106108c7575091600293918560019694106108ad575b50505002019055610869565b6108bd910151601f8416906107f0565b90555f80806108a1565b91936020600181928787015181550195019201610889565b61009d565b906108ee91610817565b565b906108ff6109069260036108e4565b60046108e4565b565b5f90565b151590565b61091a906103b4565b90565b9061092790610911565b5f5260205260405f2090565b61093c906105da565b90565b9061094990610933565b5f5260205260405f2090565b9061096160ff9161035a565b9181191691161790565b6109749061090c565b90565b90565b9061098f61098a6109969261096b565b610977565b8254610955565b9055565b6109a2610908565b506109b76109b1828490610cb7565b1561090c565b5f14610a40576109df60016109da5f6109d26005869061091d565b01859061093f565b61097a565b906109e8610ce5565b90610a25610a1f610a197f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610911565b92610933565b92610933565b92610a2e610089565b80610a38816102cf565b0390a4600190565b50505f90565b610a4f906100fc565b9052565b9190610a66905f60208501940190610a46565b565b80610a83610a7d610a785f6102c3565b6100fc565b916100fc565b14610a9f57610a9d91610a955f6102c3565b919091610d16565b565b610ac2610aab5f6102c3565b5f91829163ec442f0560e01b835260048301610a53565b0390fd5b5f90565b90565b610ae1610adc610ae692610aca565b6102a4565b6102d7565b90565b90565b610b00610afb610b0592610ae9565b61035a565b6103b4565b90565b610b1260ff610aec565b90565b90610b1e610ac6565b50610b30610b2b836105b1565b6105ba565b610b43610b3d6020610acd565b916102d7565b105f14610b575750610b5490610eb0565b90565b5f610b65610b6b9392610dc0565b016108e4565b610b7b610b76610b08565b610911565b90565b5f90565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b610bb090516103b4565b90565b610bbc906103b4565b9052565b610bc9906102d7565b9052565b90959492610c1894610c07610c1192610bfd608096610bf360a088019c5f890190610bb3565b6020870190610bb3565b6040850190610bb3565b6060830190610bc0565b0190610a46565b565b610c22610b7e565b50610c2b610b82565b610c75610c3860e0610ba6565b91610c66610c47610100610ba6565b46610c51306105e6565b91610c5a610089565b96879560208701610bcd565b602082018103825203826100b1565b610c87610c81826105ba565b916105b4565b2090565b5f1c90565b60ff1690565b610ca2610ca791610c8b565b610c90565b90565b610cb49054610c96565b90565b610cde915f610cd3610cd993610ccb610908565b50600561091d565b0161093f565b610caa565b90565b5f90565b610ced610ce1565b503390565b7f84fe74c71a28b69aa960486ca0e8c1418c86e9ea2cd6b5849b95e2c8f407a67490565b9182610d32610d2c610d275f6102c3565b6100fc565b916100fc565b141580610d9d575b610d4d575b610d4b92919091610fd4565b565b610d55610f5e565b80610d7c575b15610d3f575f6336e278fd60e21b815280610d78600482016102cf565b0390fd5b50610d98610d92610d8b610cf2565b3390610cb7565b1561090c565b610d5b565b5081610db9610db3610dae5f6102c3565b6100fc565b916100fc565b1415610d3a565b90565b90565b610dda610dd5610ddf92610dc3565b6102a4565b6102d7565b90565b60209181520190565b90825f9392825e0152565b610e15610e1e602093610e2393610e0c816106be565b93848093610de2565b95869101610deb565b610093565b0190565b610e3c9160208201915f818403910152610df6565b90565b610e59610e54610e4e836105ba565b926105b4565b610ba6565b9060208110610e67575b5090565b610e79905f1990602003600802610713565b165f610e63565b610e8c610e9191610c8b565b610375565b90565b610ea8610ea3610ead926102d7565b61035a565b6103b4565b90565b610eb8610ac6565b50610ec2816105b1565b90610ecc826105ba565b610edf610ed9601f610dc6565b916102d7565b11610f145750610f0c81610f06610f00610efb610f1195610e3f565b610e80565b916105ba565b17610e94565b610911565b90565b610f3690610f20610089565b91829163305a27a960e01b835260048301610e27565b0390fd5b90565b610f49610f4e91610c8b565b610f3a565b90565b610f5b9054610f3d565b90565b610f66610908565b50610f71600c610f51565b610f83610f7d5f61033e565b916102d7565b141580610f8e575b90565b5042610fab610fa5610fa0600c610f51565b6102d7565b916102d7565b10610f8b565b916020610fd2929493610fcb60408201965f830190610bc0565b0190610bc0565b565b9291610fe2848383916110dd565b83610ffd610ff7610ff25f6102c3565b6100fc565b916100fc565b14611012575b61101092939190916112aa565b565b61101a61124c565b93611023611289565b9480611037611031886102d7565b916102d7565b1161104457509350611003565b85906110605f928392630e58ae9360e11b845260048401610fb1565b0390fd5b9061106e90610933565b5f5260205260405f2090565b6040906110a36110aa949695939661109960608401985f850190610a46565b6020830190610bc0565b0190610bc0565b565b906110b791036102d7565b90565b906110c591016102d7565b90565b91906110db905f60208501940190610bc0565b565b919091806110fb6110f56110f05f6102c3565b6100fc565b916100fc565b145f146111dc5761111f611118836111136002610f51565b610319565b6002610394565b5b8261113b6111356111305f6102c3565b6100fc565b916100fc565b145f146111b05761115f611158836111536002610f51565b6110ac565b6002610394565b5b9190916111ab6111996111937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610933565b93610933565b936111a2610089565b918291826110c8565b0390a3565b6111d7826111d16111c25f8790611064565b916111cc83610f51565b6110ba565b90610394565b611160565b6111ef6111ea5f8390611064565b610f51565b806112026111fc856102d7565b916102d7565b1061122a576112156112259184906110ac565b6112205f8490611064565b610394565b611120565b906112489091925f93849363391434e360e21b85526004850161107a565b0390fd5b61125461075e565b5061125f6002610f51565b90565b60018060d01b031690565b61128161127c61128692611262565b6102a4565b6102d7565b90565b61129161075e565b506112a160018060d01b0361126d565b90565b90565b90565b916113026112fc61130994806112d06112ca6112c55f6102c3565b6100fc565b916100fc565b1461133a575b846112f16112eb6112e65f6102c3565b6100fc565b916100fc565b1461130b575b611532565b92611532565b9091611567565b565b611333600b600261132d6113276113218961141c565b936112a4565b916112a7565b9061146f565b50506112f7565b611362600b600161135c6113566113508961141c565b936112a4565b916112a7565b9061146f565b50506112d6565b5f90565b61137961137f91611262565b91611262565b019060018060d01b03821161139057565b610305565b906113a8916113a2611369565b5061136d565b90565b90565b60ff1690565b6113c86113c36113cd926113ab565b6102a4565b6113ae565b90565b6113d9906113b4565b9052565b9160206113fe9294936113f760408201965f8301906113d0565b0190610bc0565b565b61141461140f611419926102d7565b6102a4565b611262565b90565b611424611369565b508061143e61143860018060d01b0361126d565b916102d7565b1161144f5761144c90611400565b90565b60d061146b5f9283926306dfcc6560e41b8452600484016113dd565b0390fd5b906114a56114ab9392611480611369565b50611489611369565b50809361149e611497611719565b94926117c6565b9091611cac565b9161183b565b91909190565b6114bd6114c391611262565b91611262565b90039060018060d01b0382116114d557565b610305565b906114ed916114e7611369565b506114b1565b90565b906114fa90610933565b5f5260205260405f2090565b60018060a01b031690565b61151d61152291610c8b565b611506565b90565b61152f9054611511565b90565b61154961154e91611541610ce1565b5060096114f0565b611525565b90565b9061155b90610933565b5f5260205260405f2090565b9190918061157d611577856100fc565b916100fc565b1415806116fb575b61158f575b505050565b806115aa6115a461159f5f6102c3565b6100fc565b916100fc565b0361166b575b50816115cc6115c66115c15f6102c3565b6100fc565b916100fc565b036115d8575b8061158a565b61161f611612611619926115ee600a8690611551565b9061160c61160661160060019361141c565b936112a4565b916112a7565b9061146f565b929061126d565b9161126d565b91909161164c7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610933565b92611661611658610089565b92839283610fb1565b0390a25f806115d2565b6116aa6116b06116a3611680600a8590611551565b600261169d6116976116918961141c565b936112a4565b916112a7565b9061146f565b929061126d565b9161126d565b9190916116dd7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610933565b926116f26116e9610089565b92839283610fb1565b0390a25f6115b0565b508161170f6117095f61033e565b916102d7565b11611585565b5f90565b611721611715565b5061172a61186a565b90565b5490565b90565b61174861174361174d92611731565b6102a4565b6102d7565b90565b61175f611765919392936102d7565b926102d7565b820391821161177057565b610305565b90565b60301c90565b60018060d01b031690565b61179561179a91611778565b61177e565b90565b6117a79054611789565b90565b6117be6117b96117c3926102a1565b6102a4565b611262565b90565b6117ce611369565b506117da5f820161172d565b806117ed6117e75f61033e565b916102d7565b145f146118035750506117ff5f6117aa565b5b90565b6118305f9161182b6118258461183696019261181f6001611734565b90611750565b91611775565b61187f565b0161179d565b611800565b9161185f5f6118649461184c611369565b50611855611369565b5001929192611775565b611a84565b91909190565b611872611715565b5061187c43611c45565b90565b5f5260205f200190565b5490565b61189760406100d8565b90565b65ffffffffffff1690565b906118af9061189a565b9052565b906118bd90611262565b9052565b5f5260205f2090565b634e487b7160e01b5f52603260045260245ffd5b6118e781611889565b821015611901576118f96001916118c1565b910201905f90565b6118ca565b611910905161189a565b90565b9061192465ffffffffffff9161035a565b9181191691161790565b61194261193d6119479261189a565b6102a4565b61189a565b90565b90565b9061196261195d6119699261192e565b61194a565b8254611913565b9055565b6119779051611262565b90565b60301b90565b9061199265ffffffffffff199161197a565b9181191691161790565b6119b06119ab6119b592611262565b6102a4565b611262565b90565b90565b906119d06119cb6119d79261199c565b6119b8565b8254611980565b9055565b90611a0560205f611a0b946119fd8282016119f7848801611906565b9061194d565b01920161196d565b906119bb565b565b9190611a1e57611a1c916119db565b565b6106ab565b9081549168010000000000000000831015611a535782611a4b916001611a51950181556118de565b90611a0d565b565b61009d565b65ffffffffffff1690565b611a6f611a7491610c8b565b611a58565b90565b611a819054611a63565b90565b90929192611a90611369565b50611a99611369565b50611aa382611889565b80611ab6611ab05f61033e565b916102d7565b115f14611b8657611adc90611ad68491611ad06001611734565b90611750565b9061187f565b90611ae85f8301611a77565b92611af45f840161179d565b9380611b08611b028561189a565b9161189a565b11611b6a57611b1f611b198461189a565b9161189a565b145f14611b3a575050611b35905f8591016119bb565b5b9190565b611b659250611b6086611b57611b4e61188d565b945f86016118a5565b602084016118b3565b611a23565b611b36565b5f632520601d60e01b815280611b82600482016102cf565b0390fd5b50611bb191611bac85611ba3611b9a61188d565b945f86016118a5565b602084016118b3565b611a23565b611bba5f6117aa565b9190565b611bd2611bcd611bd79261189a565b6102a4565b6102d7565b90565b90565b611bf1611bec611bf692611bda565b6102a4565b6113ae565b90565b611c0290611bdd565b9052565b916020611c27929493611c2060408201965f830190611bf9565b0190610bc0565b565b611c3d611c38611c42926102d7565b6102a4565b61189a565b90565b611c4d611715565b5080611c67611c6165ffffffffffff611bbe565b916102d7565b11611c7857611c7590611c29565b90565b6030611c945f9283926306dfcc6560e41b845260048401611c06565b0390fd5b634e487b7160e01b5f52605160045260245ffd5b91909180600114611ccb57600203611c9857611cc7916114da565b905b565b50611cd591611395565b90611cc956fe60806040526004361015610013575b611d39565b61001d5f356103fc565b806301ffc9a7146103f757806304df017d146103f257806306fdde03146103ed578063095ea7b3146103e857806318160ddd146103e357806318bf5077146103de57806323b872dd146103d9578063248a9ca3146103d45780632b8c49e3146103cf5780632f2ff15d146103ca57806330d3e8eb146103c5578063313ce567146103c05780633644e515146103bb57806336568abe146103b65780633a46b1a8146103b157806340c10f19146103ac578063427ac0ca146103a75780634bdd36ce146103a25780634bf5d7e91461039d5780634f1bfc9e14610398578063587cde1e146103935780635a5db1bb1461038e5780635c19a95c1461038957806363a0daac14610384578063651455341461037f5780636a96e3ed1461037a5780636fcfff451461037557806370a082311461037057806372cbdcc81461036b57806378fb7fd21461036657806379cc6790146103615780637a8cd1561461035c5780637ecebe001461035757806383f1211b146103525780638426adf21461034d578063844c90261461034857806384b0196e146103435780638a5425211461033e5780638d3343d6146103395780638e539e8c14610334578063902d55a51461032f57806391d148541461032a57806391ddadf41461032557806394aa22f21461032057806395d89b411461031b5780639ab24eb0146103165780639b7ef64b14610311578063a217fddf1461030c578063a3c4470514610307578063a9059cbb14610302578063aa082a9d146102fd578063b0ca253e146102f8578063bb4d4436146102f3578063c02ae754146102ee578063c3cda520146102e9578063c4fc45a8146102e4578063c9ab0006146102df578063d505accf146102da578063d547741f146102d5578063dd62ed3e146102d0578063f1127ed8146102cb5763f75e85120361000e57611d04565b611c9f565b611bbb565b611b5a565b611b20565b611a7c565b6119f7565b61191d565b611861565b61182c565b6117f6565b6117c1565b611756565b611721565b611646565b6115d6565b61155f565b61152a565b6114f5565b6114c0565b61145d565b611428565b6113b1565b61137c565b611318565b6112ad565b611168565b611133565b6110da565b6110a5565b611070565b61103c565b611007565b610fd2565b610efe565b610ec9565b610e69565b610ddb565b610da7565b610d3a565b610d05565b610cb2565b610c5b565b610bed565b610bb8565b610b7c565b6109dd565b6109a7565b610973565b61093e565b610909565b6108ac565b610878565b610817565b6107e2565b610746565b6106d8565b6106a3565b61064b565b6105c3565b610516565b610484565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61042581610410565b0361042c57565b5f80fd5b9050359061043d8261041c565b565b9060208282031261045857610455915f01610430565b90565b61040c565b151590565b61046b9061045d565b9052565b9190610482905f60208501940190610462565b565b346104b4576104b061049f61049a36600461043f565b611dd6565b6104a7610402565b9182918261046f565b0390f35b610408565b60018060a01b031690565b6104cd906104b9565b90565b6104d9816104c4565b036104e057565b5f80fd5b905035906104f1826104d0565b565b9060208282031261050c57610509915f016104e4565b90565b61040c565b5f0190565b346105445761052e6105293660046104f3565b6122c5565b610536610402565b8061054081610511565b0390f35b610408565b5f91031261055357565b61040c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6105996105a26020936105a79361059081610558565b9384809361055c565b95869101610565565b610570565b0190565b6105c09160208201915f81840391015261057a565b90565b346105f3576105d3366004610549565b6105ef6105de612429565b6105e6610402565b918291826105ab565b0390f35b610408565b90565b610604816105f8565b0361060b57565b5f80fd5b9050359061061c826105fb565b565b9190604083820312610646578061063a610643925f86016104e4565b9360200161060f565b90565b61040c565b3461067c5761067861066761066136600461061e565b9061243f565b61066f610402565b9182918261046f565b0390f35b610408565b61068a906105f8565b9052565b91906106a1905f60208501940190610681565b565b346106d3576106b3366004610549565b6106cf6106be612461565b6106c6610402565b9182918261068e565b0390f35b610408565b34610707576106f16106eb36600461061e565b90612477565b6106f9610402565b8061070381610511565b0390f35b610408565b90916060828403126107415761073e610727845f85016104e4565b9361073581602086016104e4565b9360400161060f565b90565b61040c565b346107775761077361076261075c36600461070c565b9161254c565b61076a610402565b9182918261046f565b0390f35b610408565b90565b6107888161077c565b0361078f57565b5f80fd5b905035906107a08261077f565b565b906020828203126107bb576107b8915f01610793565b90565b61040c565b6107c99061077c565b9052565b91906107e0905f602085019401906107c0565b565b346108125761080e6107fd6107f83660046107a2565b6125c5565b610805610402565b918291826107cd565b0390f35b610408565b346108465761083061082a36600461061e565b906125e7565b610838610402565b8061084281610511565b0390f35b610408565b91906040838203126108735780610867610870925f8601610793565b936020016104e4565b90565b61040c565b346108a75761089161088b36600461084b565b90612738565b610899610402565b806108a381610511565b0390f35b610408565b346108dc576108d86108c76108c23660046104f3565b612890565b6108cf610402565b9182918261068e565b0390f35b610408565b60ff1690565b6108f0906108e1565b9052565b9190610907905f602085019401906108e7565b565b3461093957610919366004610549565b61093561092461293c565b61092c610402565b918291826108f4565b0390f35b610408565b3461096e5761094e366004610549565b61096a610959612952565b610961610402565b918291826107cd565b0390f35b610408565b346109a25761098c61098636600461084b565b90612966565b610994610402565b8061099e81610511565b0390f35b610408565b346109d8576109d46109c36109bd36600461061e565b906129e3565b6109cb610402565b9182918261068e565b0390f35b610408565b34610a0c576109f66109f036600461061e565b90612b01565b6109fe610402565b80610a0881610511565b0390f35b610408565b90565b610a28610a23610a2d926104b9565b610a11565b6104b9565b90565b610a3990610a14565b90565b610a4590610a30565b90565b90610a5290610a3c565b5f5260205260405f2090565b5f1c90565b90565b610a72610a7791610a5e565b610a63565b90565b610a849054610a66565b90565b60ff1690565b610a99610a9e91610a5e565b610a87565b90565b610aab9054610a8d565b90565b610ab990600d610a48565b610ac45f8201610a7a565b91610ad160018301610a7a565b91610ade60028201610a7a565b91610aeb60038301610a7a565b91610af860048201610a7a565b91610b116006610b0a60058501610a7a565b9301610aa1565b90565b949290979695939160e08601985f8701610b2d91610681565b60208601610b3a91610681565b60408501610b4791610681565b60608401610b5491610681565b60808301610b6191610681565b60a08201610b6e91610681565b60c001610b7a91610462565b565b34610bb357610baf610b97610b923660046104f3565b610aae565b93610ba6979597939193610402565b97889788610b14565b0390f35b610408565b34610be857610bc8366004610549565b610be4610bd3612b0d565b610bdb610402565b9182918261068e565b0390f35b610408565b34610c1d57610bfd366004610549565b610c19610c08612bb7565b610c10610402565b918291826105ab565b0390f35b610408565b90565b610c39610c34610c3e92610c22565b610a11565b6105f8565b90565b610c4d6276a700610c25565b90565b610c58610c41565b90565b34610c8b57610c6b366004610549565b610c87610c76610c50565b610c7e610402565b9182918261068e565b0390f35b610408565b610c99906104c4565b9052565b9190610cb0905f60208501940190610c90565b565b34610ce257610cde610ccd610cc83660046104f3565b612c44565b610cd5610402565b91829182610c9d565b0390f35b610408565b90602082820312610d0057610cfd915f0161060f565b90565b61040c565b34610d3557610d31610d20610d1b366004610ce7565b612d0b565b610d28610402565b91829182610c9d565b0390f35b610408565b34610d6857610d52610d4d3660046104f3565b612d50565b610d5a610402565b80610d6481610511565b0390f35b610408565b9091606082840312610da257610d9f610d88845f85016104e4565b93610d96816020860161060f565b9360400161060f565b90565b61040c565b34610dd657610dc0610dba366004610d6d565b9161309b565b610dc8610402565b80610dd281610511565b0390f35b610408565b34610e0b57610deb366004610549565b610e07610df66130a8565b610dfe610402565b9182918261068e565b0390f35b610408565b90610e1a90610a3c565b5f5260205260405f2090565b1c90565b610e3a906008610e3f9302610e26565b610a87565b90565b90610e4d9154610e2a565b90565b610e6690610e61600f915f92610e10565b610e42565b90565b34610e9957610e95610e84610e7f3660046104f3565b610e50565b610e8c610402565b9182918261046f565b0390f35b610408565b63ffffffff1690565b610eb090610e9e565b9052565b9190610ec7905f60208501940190610ea7565b565b34610ef957610ef5610ee4610edf3660046104f3565b6130c2565b610eec610402565b91829182610eb4565b0390f35b610408565b34610f2e57610f2a610f19610f143660046104f3565b6130ed565b610f21610402565b9182918261068e565b0390f35b610408565b5190565b60209181520190565b60200190565b610f4f906104c4565b9052565b90610f6081602093610f46565b0190565b60200190565b90610f87610f81610f7a84610f33565b8093610f37565b92610f40565b905f5b818110610f975750505090565b909192610fb0610faa6001928651610f53565b94610f64565b9101919091610f8a565b610fcf9160208201915f818403910152610f6a565b90565b3461100257610fe2366004610549565b610ffe610fed6131be565b610ff5610402565b91829182610fba565b0390f35b610408565b346110375761103361102261101d3660046104f3565b6131d4565b61102a610402565b9182918261046f565b0390f35b610408565b3461106b5761105561104f36600461061e565b90613339565b61105d610402565b8061106781610511565b0390f35b610408565b346110a057611080366004610549565b61109c61108b613345565b611093610402565b9182918261068e565b0390f35b610408565b346110d5576110d16110c06110bb3660046104f3565b6133bd565b6110c8610402565b9182918261068e565b0390f35b610408565b3461110a576110ea366004610549565b6111066110f56133d2565b6110fd610402565b9182918261046f565b0390f35b610408565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461116357611143366004610549565b61115f61114e61110f565b611156610402565b9182918261068e565b0390f35b610408565b346111965761118061117b366004610ce7565b613525565b611188610402565b8061119281610511565b0390f35b610408565b60ff60f81b1690565b6111ad9061119b565b9052565b5190565b60209181520190565b60200190565b6111cd906105f8565b9052565b906111de816020936111c4565b0190565b60200190565b906112056111ff6111f8846111b1565b80936111b5565b926111be565b905f5b8181106112155750505090565b90919261122e61122860019286516111d1565b946111e2565b9101919091611208565b9395919461128961127e61129d95611270611293956112aa9c9a61126360e08c01925f8d01906111a4565b8a820360208c015261057a565b9088820360408a015261057a565b976060870190610681565b6080850190610c90565b60a08301906107c0565b60c08184039101526111e8565b90565b346112e4576112bd366004610549565b6112e06112c86135ad565b936112d7979597939193610402565b97889788611238565b0390f35b610408565b7f84fe74c71a28b69aa960486ca0e8c1418c86e9ea2cd6b5849b95e2c8f407a67490565b6113156112e9565b90565b3461134857611328366004610549565b61134461133361130d565b61133b610402565b918291826107cd565b0390f35b610408565b7f9b12e0c5707e494915e58b0564f18aaad9b74ac69bfc815a1edadc8e4bd032eb90565b61137961134d565b90565b346113ac5761138c366004610549565b6113a8611397611371565b61139f610402565b918291826107cd565b0390f35b610408565b346113e1576113dd6113cc6113c7366004610ce7565b613637565b6113d4610402565b9182918261068e565b0390f35b610408565b90565b6113fd6113f8611402926113e6565b610a11565b6105f8565b90565b61141a6b033b2e3c9fd0803ce80000006113e9565b90565b611425611405565b90565b3461145857611438366004610549565b61145461144361141d565b61144b610402565b9182918261068e565b0390f35b610408565b3461148e5761148a61147961147336600461084b565b90613668565b611481610402565b9182918261046f565b0390f35b610408565b65ffffffffffff1690565b6114a790611493565b9052565b91906114be905f6020850194019061149e565b565b346114f0576114d0366004610549565b6114ec6114db613696565b6114e3610402565b918291826114ab565b0390f35b610408565b346115255761152161151061150b3660046104f3565b6136aa565b611518610402565b9182918261068e565b0390f35b610408565b3461155a5761153a366004610549565b611556611545613731565b61154d610402565b918291826105ab565b0390f35b610408565b3461158f5761158b61157a6115753660046104f3565b613747565b611582610402565b9182918261068e565b0390f35b610408565b90565b6115ab6115a66115b092611594565b610a11565b6105f8565b90565b6115c86b02e87669c308736a04000000611597565b90565b6115d36115b3565b90565b34611606576115e6366004610549565b6116026115f16115cb565b6115f9610402565b9182918261068e565b0390f35b610408565b90565b5f1b90565b61162761162261162c9261160b565b61160e565b61077c565b90565b6116385f611613565b90565b61164361162f565b90565b3461167657611656366004610549565b61167261166161163b565b611669610402565b918291826107cd565b0390f35b610408565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6116a58161168f565b8210156116bf576116b7600191611693565b910201905f90565b61167b565b60018060a01b031690565b6116df9060086116e49302610e26565b6116c4565b90565b906116f291546116cf565b90565b600e6117008161168f565b82101561171d5761171a916117149161169c565b906116e7565b90565b5f80fd5b346117515761174d61173c611737366004610ce7565b6116f5565b611744610402565b91829182610c9d565b0390f35b610408565b346117875761178361177261176c36600461061e565b90613776565b61177a610402565b9182918261046f565b0390f35b610408565b61179c9060086117a19302610e26565b610a63565b90565b906117af915461178c565b90565b6117be600c5f906117a4565b90565b346117f1576117d1366004610549565b6117ed6117dc6117b2565b6117e4610402565b9182918261068e565b0390f35b610408565b346118275761182361181261180c36600461061e565b90613798565b61181a610402565b9182918261068e565b0390f35b610408565b3461185c576118586118476118423660046104f3565b6137ae565b61184f610402565b9182918261068e565b0390f35b610408565b3461189157611871366004610549565b61188d61187c6137c3565b611884610402565b9182918261068e565b0390f35b610408565b61189f816108e1565b036118a657565b5f80fd5b905035906118b782611896565b565b909160c082840312611918576118d1835f84016104e4565b926118df816020850161060f565b926118ed826040830161060f565b926119156118fe84606085016118aa565b9361190c8160808601610793565b9360a001610793565b90565b61040c565b346119525761193c6119303660046118b9565b94939093929192613843565b611944610402565b8061194e81610511565b0390f35b610408565b6119609061045d565b9052565b9060c0806119e09361197c5f8201515f8601906111c4565b61198e602082015160208601906111c4565b6119a0604082015160408601906111c4565b6119b2606082015160608601906111c4565b6119c4608082015160808601906111c4565b6119d660a082015160a08601906111c4565b0151910190611957565b565b91906119f5905f60e08501940190611964565b565b34611a2757611a23611a12611a0d3660046104f3565b61396a565b611a1a610402565b918291826119e2565b0390f35b610408565b611a358161045d565b03611a3c57565b5f80fd5b90503590611a4d82611a2c565b565b9190604083820312611a775780611a6b611a74925f86016104e4565b93602001611a40565b90565b61040c565b34611aab57611a95611a8f366004611a4f565b90613a7d565b611a9d610402565b80611aa781610511565b0390f35b610408565b60e081830312611b1b57611ac6825f83016104e4565b92611ad483602084016104e4565b92611ae2816040850161060f565b92611af0826060830161060f565b92611b18611b0184608085016118aa565b93611b0f8160a08601610793565b9360c001610793565b90565b61040c565b34611b5557611b3f611b33366004611ab0565b95949094939193613b2b565b611b47610402565b80611b5181610511565b0390f35b610408565b34611b8957611b73611b6d36600461084b565b90613c49565b611b7b610402565b80611b8581610511565b0390f35b610408565b9190604083820312611bb65780611baa611bb3925f86016104e4565b936020016104e4565b90565b61040c565b34611bec57611be8611bd7611bd1366004611b8e565b90613c6b565b611bdf610402565b9182918261068e565b0390f35b610408565b611bfa81610e9e565b03611c0157565b5f80fd5b90503590611c1282611bf1565b565b9190604083820312611c3c5780611c30611c39925f86016104e4565b93602001611c05565b90565b61040c565b611c4a90611493565b9052565b60018060d01b031690565b611c6290611c4e565b9052565b90602080611c8893611c7e5f8201515f860190611c41565b0151910190611c59565b565b9190611c9d905f60408501940190611c66565b565b34611cd057611ccc611cbb611cb5366004611c14565b90613cd9565b611cc3610402565b91829182611c8a565b0390f35b610408565b7fcce296b040332a080e6df13515a3ec2869e21cd20f7344af0987ddb938d8bd2190565b611d01611cd5565b90565b34611d3457611d14366004610549565b611d30611d1f611cf9565b611d27610402565b918291826107cd565b0390f35b610408565b5f80fd5b5f90565b634e487b7160e01b5f52601160045260245ffd5b611d61611d6791611c4e565b91611c4e565b019060018060d01b038211611d7857565b611d41565b90611d9091611d8a611d3d565b50611d55565b90565b611d9f611da591611c4e565b91611c4e565b90039060018060d01b038211611db757565b611d41565b90611dcf91611dc9611d3d565b50611d93565b90565b5f90565b611dde611dd2565b5080611df9611df3630cccc66560e21b610410565b91610410565b148015611e1d575b908115611e0d575b5090565b611e179150613cef565b5f611e09565b5080611e38611e3263b2752ac960e01b610410565b91610410565b14611e01565b611e5790611e52611e4d611cd5565b613d2f565b612118565b565b611e6d611e68611e729261160b565b610a11565b6104b9565b90565b611e7e90611e59565b90565b1b90565b91906008611ea0910291611e9a5f1984611e81565b92611e81565b9181191691161790565b611ebe611eb9611ec3926105f8565b610a11565b6105f8565b90565b90565b9190611edf611eda611ee793611eaa565b611ec6565b908354611e85565b9055565b5f90565b611f0191611efb611eeb565b91611ec9565b565b60065f91611f1383808301611eef565b611f208360018301611eef565b611f2d8360028301611eef565b611f3a8360038301611eef565b611f478360048301611eef565b611f548360058301611eef565b0155565b634e487b7160e01b5f525f60045260245ffd5b905f03611f7d57611f7b90611f03565b565b611f58565b90611f8e60ff9161160e565b9181191691161790565b611fa19061045d565b90565b90565b90611fbc611fb7611fc392611f98565b611fa4565b8254611f82565b9055565b611fdb611fd6611fe09261160b565b610a11565b6105f8565b90565b6001611fef91016105f8565b90565b90565b61200961200461200e92611ff2565b610a11565b6105f8565b90565b612020612026919392936105f8565b926105f8565b820391821161203157565b611d41565b9190600861205691029161205060018060a01b0384611e81565b92611e81565b9181191691161790565b90565b919061207961207461208193610a3c565b612060565b908354612036565b9055565b90565b634e487b7160e01b5f52603160045260245ffd5b5490565b5f5260205f2090565b6120b28161209c565b8210156120cc576120c46001916120a0565b910201905f90565b61167b565b5f90565b6120e7916120e16120d1565b91612063565b565b6120f28161209c565b801561211357600190039061211061210a83836120a9565b906120d5565b55565b612088565b8061213361212d6121285f611e75565b6104c4565b916104c4565b146122a95761215561214f61214a600f8490610e10565b610aa1565b1561045d565b61228a5761216e5f612169600d8490610a48565b611f6b565b6121835f61217e600f8490610e10565b611fa7565b61218c5f611fc7565b5b806121a96121a361219e600e61168f565b6105f8565b916105f8565b1015612284576121c46121be600e839061169c565b906116e7565b6121d66121d0846104c4565b916104c4565b146121e9576121e490611fe3565b61218d565b61222f9061222961222161221b600e612215612205600e61168f565b61220f6001611ff5565b90612011565b9061169c565b906116e7565b91600e61169c565b90612063565b61224161223c600e612085565b6120e9565b5b61226c7f5d9d5034656cb3ebfb0655057cd7f9b4077a9b42ff42ce223cbac5bc586d212691610a3c565b90612275610402565b8061227f81610511565b0390a2565b50612242565b6122a5905f918291636585b60d60e01b835260048301610c9d565b0390fd5b5f63d92e233d60e01b8152806122c160048201610511565b0390fd5b6122ce90611e3e565b565b606090565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015612309575b602083101461230457565b6122d5565b91607f16916122f9565b60209181520190565b5f5260205f2090565b905f929180549061233f612338836122e9565b8094612313565b916001811690815f14612396575060011461235a575b505050565b612367919293945061231c565b915f925b81841061237e57505001905f8080612355565b6001816020929593955484860152019101929061236b565b92949550505060ff19168252151560200201905f8080612355565b906123bb91612325565b90565b634e487b7160e01b5f52604160045260245ffd5b906123dc90610570565b810190811067ffffffffffffffff8211176123f657604052565b6123be565b9061241b6124149261240b610402565b938480926123b1565b03836123d2565b565b612426906123fb565b90565b6124316122d0565b5061243c600361241d565b90565b61245c9161244b611dd2565b50612454613d43565b919091613d50565b600190565b612469611eeb565b506124746002610a7a565b90565b8061249261248c6124875f611e75565b6104c4565b916104c4565b1461253057816124aa6124a45f611fc7565b916105f8565b14612514576124ba338390613d95565b6124c5818390613eec565b339061250f6124fd6124f77fde22baff038e3a3e08407cbdf617deed74e869a7ba517df611e33131c6e6ea0493610a3c565b93610a3c565b93612506610402565b9182918261068e565b0390a3565b5f631f2a200560e01b81528061252c60048201610511565b0390fd5b5f63d92e233d60e01b81528061254860048201610511565b0390fd5b9161257692612559611dd2565b5061256e612565613d43565b82908491613f58565b919091613fe4565b600190565b5f90565b6125889061077c565b90565b906125959061257f565b5f5260205260405f2090565b90565b6125b06125b591610a5e565b6125a1565b90565b6125c290546125a4565b90565b60016125de6125e4926125d661257b565b50600561258b565b016125b8565b90565b806126026125fc6125f75f611e75565b6104c4565b916104c4565b146126f2578161261a6126145f611fc7565b916105f8565b146126d65761262a338390614081565b3361263d612637836104c4565b916104c4565b0361269d575b61264e8183906141d9565b33906126986126866126807fb90795a66650155983e242cac3e1ac1a4dc26f8ed2987f3ce416a34e00111fd493610a3c565b93610a3c565b9361268f610402565b9182918261068e565b0390a3565b6126a8813390613c6b565b6126ba6126b45f611fc7565b916105f8565b036126c5575b612643565b6126d181338491613f58565b6126c0565b5f631f2a200560e01b8152806126ee60048201610511565b0390fd5b5f63d92e233d60e01b81528061270a60048201610511565b0390fd5b906127299161272461271f826125c5565b613d2f565b61272b565b565b9061273591614238565b50565b906127429161270e565b565b9061274e906105f8565b9052565b9061275c9061045d565b9052565b9061277361276c610402565b92836123d2565b565b61277f60e0612760565b90565b906128316128286006612793612775565b946127aa6127a25f8301610a7a565b5f8801612744565b6127c26127b960018301610a7a565b60208801612744565b6127da6127d160028301610a7a565b60408801612744565b6127f26127e960038301610a7a565b60608801612744565b61280a61280160048301610a7a565b60808801612744565b61282261281960058301610a7a565b60a08801612744565b01610aa1565b60c08401612752565b565b61283c90612782565b90565b61284990516105f8565b90565b90565b61286361285e6128689261284c565b610a11565b6105f8565b90565b61287a612880919392936105f8565b926105f8565b820180921161288b57565b611d41565b6128a76128ac9161289f611eeb565b50600d610a48565b612833565b426128df6128d96128d46128c26060860161283f565b6128ce6201518061284f565b9061286b565b6105f8565b916105f8565b101561290a578061290160a06128fa6020612907950161283f565b920161283f565b90612011565b90565b6020612916910161283f565b90565b5f90565b90565b61293461292f6129399261291d565b610a11565b6108e1565b90565b612944612919565b5061294f6012612920565b90565b61295a61257b565b506129636142e4565b90565b908061298161297b612976613d43565b6104c4565b916104c4565b036129925761298f9161439e565b50565b5f63334bd91960e11b8152806129aa60048201610511565b0390fd5b906129b890610a3c565b5f5260205260405f2090565b90565b6129db6129d66129e092611c4e565b610a11565b6105f8565b90565b612a1a91612a0f612a09612a04612a15946129fc611eeb565b50600a6129ae565b6129c4565b9161447f565b90614575565b6129c7565b90565b90612a3791612a32612a2d61134d565b613d2f565b612a39565b565b9081612a55612a4f612a4a5f611e75565b6104c4565b916104c4565b14612ae55780612a6d612a675f611fc7565b916105f8565b14612ac957612a84612a7d612461565b829061286b565b612a9d612a97612a92611405565b6105f8565b916105f8565b11612aad57612aab91613eec565b565b5f63177e3fc360e01b815280612ac560048201610511565b0390fd5b5f631f2a200560e01b815280612ae160048201610511565b0390fd5b5f63d92e233d60e01b815280612afd60048201610511565b0390fd5b90612b0b91612a1d565b565b612b15611eeb565b50612b2f612b21611405565b612b29612461565b90612011565b90565b67ffffffffffffffff8111612b5057612b4c602091610570565b0190565b6123be565b90612b67612b6283612b32565b612760565b918252565b5f7f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000910152565b612b9d601d612b55565b90612baa60208301612b6c565b565b612bb4612b93565b90565b612bbf6122d0565b50612bc8613696565b612be1612bdb612bd661469c565b611493565b91611493565b03612bf157612bee612bac565b90565b5f6301bfc1c560e61b815280612c0960048201610511565b0390fd5b90612c1790610a3c565b5f5260205260405f2090565b612c2f612c3491610a5e565b6116c4565b90565b612c419054612c23565b90565b612c5b612c6091612c536120d1565b506009612c0d565b612c37565b90565b60207f6f7574206f6620626f756e647300000000000000000000000000000000000000917f53796e646963617465546f6b656e43726f7373636861696e3a20696e646578205f8201520152565b612cbd602d60409261055c565b612cc681612c63565b0190565b612cdf9060208101905f818303910152612cb0565b90565b15612ce957565b612cf1610402565b62461bcd60e51b815280612d0760048201612cca565b0390fd5b612d47612d4d91612d1a6120d1565b50612d4081612d3a612d34612d2f600e61168f565b6105f8565b916105f8565b10612ce2565b600e61169c565b906116e7565b90565b612d6190612d5c613d43565b6146ec565b565b90612d7e9291612d79612d74611cd5565b613d2f565b612ee4565b565b9081549168010000000000000000831015612db05782612da8916001612dae950181556120a9565b90612063565b565b6123be565b916020612dd6929493612dcf60408201965f830190610681565b0190610681565b565b612de260e0612760565b90565b90612df15f199161160e565b9181191691161790565b90612e10612e0b612e1792611eaa565b611ec6565b8254612de5565b9055565b612e25905161045d565b90565b90612ed060c06006612ed694612e4b5f8201612e455f880161283f565b90612dfb565b612e6460018201612e5e6020880161283f565b90612dfb565b612e7d60028201612e776040880161283f565b90612dfb565b612e9660038201612e906060880161283f565b90612dfb565b612eaf60048201612ea96080880161283f565b90612dfb565b612ec860058201612ec260a0880161283f565b90612dfb565b019201612e1b565b90611fa7565b565b90612ee291612e28565b565b80612eff612ef9612ef45f611e75565b6104c4565b916104c4565b1461307f57612f21612f1b612f16600f8490610e10565b610aa1565b1561045d565b61300a575b818342425f905f92600194612f39612dd8565b965f880190612f4791612744565b6020870190612f5591612744565b6040860190612f6391612744565b6060850190612f7191612744565b612f7a90611fc7565b6080840190612f8891612744565b612f9190611fc7565b60a0830190612f9f91612744565b60c0820190612fad91612752565b600d82612fb991610a48565b90612fc391612ed8565b907faa807d0abf30d91968c7478c66b6d82521a106af13eda036e2036da9af16895891612fef90610a3c565b92612ff8610402565b9182916130059183612db5565b0390a2565b61301e613017600e612085565b8290612d80565b613034600161302f600f8490610e10565b611fa7565b808290846130627fdb03f97dc5840a71e69be7470e4761af10a1237973e81c12d0dc2813895a652692610a3c565b9261307761306e610402565b92839283612db5565b0390a2612f26565b5f63d92e233d60e01b81528061309760048201610511565b0390fd5b906130a69291612d63565b565b6130b0611eeb565b506130bb600e61168f565b90565b5f90565b6130d4906130ce6130be565b50614777565b90565b906130e190610a3c565b5f5260205260405f2090565b613103613108916130fc611eeb565b505f6130d7565b610a7a565b90565b606090565b60209181520190565b6131239054612c23565b90565b60010190565b9061314961314361313c8461168f565b8093613110565b92611693565b905f5b8181106131595750505090565b90919261317961317360019261316e87613119565b610f53565b94613126565b910191909161314c565b9061318d9161312c565b90565b906131b06131a9926131a0610402565b93848092613183565b03836123d2565b565b6131bb90613190565b90565b6131c661310b565b506131d1600e6131b2565b90565b6131dc611dd2565b506132046131ff6131f76131f2600d8590610a48565b612833565b92600f610e10565b610aa1565b908161320f575b5090565b61321c915060c001612e1b565b5f61320b565b9061323c916132376132326112e9565b613d2f565b61323e565b565b8061325961325361324e5f611e75565b6104c4565b916104c4565b1461331d578161327161326b5f611fc7565b916105f8565b14613301576132876132816133d2565b1561045d565b6132e5576132968183906141d9565b33906132e06132ce6132c87fbef4f81c1814c641ede85ebaacf19d048b2c5b55980adfa6ef0f956c651335a293610a3c565b93610a3c565b936132d7610402565b9182918261068e565b0390a3565b5f63b8b5ca2d60e01b8152806132fd60048201610511565b0390fd5b5f631f2a200560e01b81528061331960048201610511565b0390fd5b5f63d92e233d60e01b81528061333560048201610511565b0390fd5b9061334391613222565b565b61334d611eeb565b50613358600c610a7a565b61336a6133645f611fc7565b916105f8565b148015613399575b61338d5761338a613383600c610a7a565b4290612011565b90565b6133965f611fc7565b90565b50426133b66133b06133ab600c610a7a565b6105f8565b916105f8565b1015613372565b6133cf906133c9611eeb565b506147a6565b90565b6133da611dd2565b506133e5600c610a7a565b6133f76133f15f611fc7565b916105f8565b141580613402575b90565b504261341f613419613414600c610a7a565b6105f8565b916105f8565b106133ff565b61343e9061343961343461162f565b613d2f565b613440565b565b8061345361344d426105f8565b916105f8565b1115613509578061348c6134867f00000000000000000000000000000000000000000000000000000000000000006105f8565b916105f8565b116134ed5761349b600c610a7a565b6134a682600c612dfb565b9033906134d37fdd6896dcf1d4b311cca87dd19bbba2ea9ce2f867c1568878a0438a66a1afeeec92610a3c565b926134e86134df610402565b92839283612db5565b0390a2565b5f63ef69af6560e01b81528061350560048201610511565b0390fd5b5f63a565835360e01b81528061352160048201610511565b0390fd5b61352e90613425565b565b5f90565b606090565b61354290610a30565b90565b67ffffffffffffffff811161355d5760208091020190565b6123be565b9061357461356f83613545565b612760565b918252565b369037565b906135a361358b83613562565b926020806135998693613545565b9201910390613579565b565b600f60f81b90565b6135b5613530565b506135be6122d0565b506135c76122d0565b506135d0611eeb565b506135d96120d1565b506135e261257b565b506135eb613534565b506135f46147be565b906135fd6147fe565b90469061360930613539565b906136135f611613565b906136256136205f611fc7565b61357e565b9061362e6135a5565b96959493929190565b61366061366591613646611eeb565b5061365a613654600b6129c4565b9161447f565b90614575565b6129c7565b90565b61368f915f61368461368a9361367c611dd2565b50600561258b565b01610e10565b610aa1565b90565b5f90565b61369e613692565b506136a761469c565b90565b6136c16136c6916136b9611eeb565b50600d610a48565b612833565b426136f96136f36136ee6136dc6040860161283f565b6136e86201518061284f565b9061286b565b6105f8565b916105f8565b1015613723578061371a60806137135f613720950161283f565b920161283f565b90612011565b90565b5f61372e910161283f565b90565b6137396122d0565b50613744600461241d565b90565b61376e6137696137646137739361375c611eeb565b50600a6129ae565b6129c4565b61483e565b6129c7565b90565b61379391613782611dd2565b5061378b613d43565b919091613fe4565b600190565b906137ab916137a5611eeb565b506129e3565b90565b6137c0906137ba611eeb565b50613747565b90565b6137cb611eeb565b506137d4612461565b90565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf90565b6138306138379461382660609498979561381c608086019a5f8701906107c0565b6020850190610c90565b6040830190610681565b0190610681565b565b60200190565b5190565b939594909291954261385d613857896105f8565b916105f8565b116138d657916138c8916138cf936138bf6138d498996138a761387e6137d7565b6138988b938b61388c610402565b958694602086016137fb565b602082018103825203826123d2565b6138b96138b38261383f565b91613839565b206148b3565b929091926148d0565b918261491a565b6146ec565b565b6138f1875f918291632341d78760e11b83526004830161068e565b0390fd5b5f90565b5f90565b613905612775565b906020808080808080886139176138f5565b8152016139226138f5565b81520161392d6138f5565b8152016139386138f5565b8152016139436138f5565b81520161394e6138f5565b8152016139596138f9565b81525050565b6139676138fd565b90565b6139816139869161397961395f565b50600d610a48565b612833565b90565b906139a39161399e613999611cd5565b613d2f565b6139a5565b565b806139c06139ba6139b55f611e75565b6104c4565b916104c4565b14613a61576139e26139dc6139d7600f8490610e10565b610aa1565b1561045d565b613a42576139fe8260066139f8600d8590610a48565b01611fa7565b613a3d613a2b7f9c8668db324845065d2b9a2a183bd3141f63018f548282daf18da49ccbf88c3392610a3c565b92613a34610402565b9182918261046f565b0390a2565b613a5d905f918291636585b60d60e01b835260048301610c9d565b0390fd5b5f63d92e233d60e01b815280613a7960048201610511565b0390fd5b90613a8791613989565b565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990565b9194613af5613aff92989795613aeb60a096613ae1613b069a613ad760c08a019e5f8b01906107c0565b6020890190610c90565b6040870190610c90565b6060850190610681565b6080830190610681565b0190610681565b565b916020613b29929493613b2260408201965f830190610c90565b0190610c90565b565b969591939294909442613b46613b40836105f8565b916105f8565b11613c005790613baf613bb8949392613b97613b60613a89565b613b888c80948c91613b728d9161495d565b9192613b7c610402565b97889660208801613aad565b602082018103825203826123d2565b613ba9613ba38261383f565b91613839565b206148b3565b929091926148d0565b80613bcb613bc5876104c4565b916104c4565b03613be05750613bde9293919091613d50565b565b8490613bfc5f9283926325c0072360e11b845260048401613b08565b0390fd5b613c1b905f91829163313c898160e11b83526004830161068e565b0390fd5b90613c3a91613c35613c30826125c5565b613d2f565b613c3c565b565b90613c469161439e565b50565b90613c5391613c1f565b565b90613c5f90610a3c565b5f5260205260405f2090565b613c9091613c86613c8b92613c7e611eeb565b506001613c55565b6130d7565b610a7a565b90565b613c9d6040612760565b90565b5f90565b5f90565b613cb0613c93565b9060208083613cbd613ca0565b815201613cc8613ca4565b81525050565b613cd6613ca8565b90565b90613cec91613ce6613cce565b50614990565b90565b613cf7611dd2565b5080613d12613d0c637965db0b60e01b610410565b91610410565b14908115613d1f575b5090565b613d2991506149b8565b5f613d1b565b613d4190613d3b613d43565b90614a01565b565b613d4b6120d1565b503390565b91613d5e9291600192614a3c565b565b90565b604090613d8c613d939496959396613d8260608401985f850190610c90565b6020830190610681565b0190610681565b565b90613daa613da5600d8490610a48565b613d60565b91613dc8613dc2613dbd600f8490610e10565b610aa1565b1561045d565b8015613ed1575b613eb25742613e06613e00613dfb613de960028801610a7a565b613df56201518061284f565b9061286b565b6105f8565b916105f8565b1015613e8b575b613e2d613e1b5f8501610a7a565b613e2760048601610a7a565b90612011565b9082613e41613e3b846105f8565b916105f8565b11613e6b57505090613e636004613e6993920191613e5e83610a7a565b61286b565b90612dfb565b565b613e8783925f9384936340ed367b60e01b855260048501613d63565b0390fd5b613ea0613e975f611fc7565b60048501612dfb565b613ead4260028501612dfb565b613e0d565b613ecd905f918291636585b60d60e01b835260048301610c9d565b0390fd5b50613ee7613ee160068501610aa1565b1561045d565b613dcf565b80613f07613f01613efc5f611e75565b6104c4565b916104c4565b14613f2357613f2191613f195f611e75565b919091614b4b565b565b613f46613f2f5f611e75565b5f91829163ec442f0560e01b835260048301610c9d565b0390fd5b90613f5591036105f8565b90565b929192613f66818390613c6b565b9081613f7b613f755f196105f8565b916105f8565b10613f88575b5050509050565b81613f9b613f95876105f8565b916105f8565b10613fc157613fb89394613fb0919392613f4a565b905f92614a3c565b805f8080613f81565b50613fe0849291925f938493637dc7a0d960e11b855260048501613d63565b0390fd5b9182614000613ffa613ff55f611e75565b6104c4565b916104c4565b1461405a578161402061401a6140155f611e75565b6104c4565b916104c4565b146140335761403192919091614b4b565b565b61405661403f5f611e75565b5f91829163ec442f0560e01b835260048301610c9d565b0390fd5b61407d6140665f611e75565b5f918291634b637e8f60e11b835260048301610c9d565b0390fd5b90614096614091600d8490610a48565b613d60565b916140b46140ae6140a9600f8490610e10565b610aa1565b1561045d565b80156141be575b61419f57426140f26140ec6140e76140d560038801610a7a565b6140e16201518061284f565b9061286b565b6105f8565b916105f8565b1015614178575b61411a61410860018501610a7a565b61411460058601610a7a565b90612011565b908261412e614128846105f8565b916105f8565b116141585750509061415060056141569392019161414b83610a7a565b61286b565b90612dfb565b565b61417483925f9384936372ff4bd160e11b855260048501613d63565b0390fd5b61418d6141845f611fc7565b60058501612dfb565b61419a4260038501612dfb565b6140f9565b6141ba905f918291636585b60d60e01b835260048301610c9d565b0390fd5b506141d46141ce60068501610aa1565b1561045d565b6140bb565b90816141f56141ef6141ea5f611e75565b6104c4565b916104c4565b146142115761420f91906142085f611e75565b9091614b4b565b565b61423461421d5f611e75565b5f918291634b637e8f60e11b835260048301610c9d565b0390fd5b614240611dd2565b5061425561424f828490613668565b1561045d565b5f146142de5761427d60016142785f6142706005869061258b565b018590610e10565b611fa7565b90614286613d43565b906142c36142bd6142b77f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9561257f565b92610a3c565b92610a3c565b926142cc610402565b806142d681610511565b0390a4600190565b50505f90565b6142ec61257b565b506142f630613539565b6143286143227f00000000000000000000000000000000000000000000000000000000000000006104c4565b916104c4565b1480614364575b5f14614359577f000000000000000000000000000000000000000000000000000000000000000090565b614361614c66565b90565b50466143986143927f00000000000000000000000000000000000000000000000000000000000000006105f8565b916105f8565b1461432f565b6143a6611dd2565b506143b2818390613668565b5f1461443a576143d95f6143d45f6143cc6005869061258b565b018590610e10565b611fa7565b906143e2613d43565b9061441f6144196144137ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9561257f565b92610a3c565b92610a3c565b92614428610402565b8061443281610511565b0390a4600190565b50505f90565b61445461444f61445992611493565b610a11565b6105f8565b90565b91602061447d92949361447660408201965f830190610681565b019061149e565b565b614487613692565b50614490613696565b816144a361449d83614440565b916105f8565b10156144b657506144b390614d6f565b90565b906144d15f928392637669fc0f60e11b84526004840161445c565b0390fd5b5490565b90565b6144f06144eb6144f5926144d9565b610a11565b6105f8565b90565b90565b65ffffffffffff1690565b61451261451791610a5e565b6144fb565b90565b6145249054614506565b90565b60301c90565b60018060d01b031690565b61454461454991614527565b61452d565b90565b6145569054614538565b90565b61456d6145686145729261160b565b610a11565b611c4e565b90565b906145c990614582611d3d565b5061458e5f84016144d5565b6145975f611fc7565b9080806145ad6145a760056144dc565b916105f8565b1161462a575b50906145c45f8601939192936144f8565b6153be565b806145dc6145d65f611fc7565b916105f8565b145f146145f25750506145ee5f614559565b5b90565b61461f5f9161461a6146148461462596019261460e6001611ff5565b90612011565b916144f8565b6153b4565b0161454c565b6145ef565b8061463861463e9291615049565b90612011565b908361467061466a6146655f61465f818c0161465a89916144f8565b6153b4565b0161451a565b611493565b91611493565b105f146146815750905b905f6145b3565b9150614697906146916001611ff5565b9061286b565b61467a565b6146a4613692565b506146ae43614d6f565b90565b906146c260018060a01b039161160e565b9181191691161790565b906146e16146dc6146e892610a3c565b612060565b82546146b1565b9055565b906147759161476f6146fd82612c44565b6147128461470d60098690612c0d565b6146cc565b8281859061475261474c6147467f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f95610a3c565b92610a3c565b92610a3c565b9261475b610402565b8061476581610511565b0390a4929161544d565b91615465565b565b61479e6147996147946147a39361478c6130be565b50600a6129ae565b6129c4565b615613565b615692565b90565b6147b8906147b2611eeb565b506156e3565b90565b90565b6147c66122d0565b506147fb7f00000000000000000000000000000000000000000000000000000000000000006147f560066147bb565b906157fe565b90565b6148066122d0565b5061483b7f000000000000000000000000000000000000000000000000000000000000000061483560076147bb565b906157fe565b90565b614846611d3d565b506148525f82016144d5565b8061486561485f5f611fc7565b916105f8565b145f1461487b5750506148775f614559565b5b90565b6148a85f916148a361489d846148ae9601926148976001611ff5565b90612011565b916144f8565b6153b4565b0161454c565b614878565b6148cd906148bf61257b565b506148c86142e4565b61584c565b90565b926148eb926148f4946148e16120d1565b5092909192615912565b90929192615a3d565b90565b91602061491892949361491160408201965f830190610c90565b0190610681565b565b6149238161495d565b91614936614930846105f8565b916105f8565b0361493f575050565b6149595f9283926301d4b62360e61b8452600484016148f7565b0390fd5b61497190614969611eeb565b5060086130d7565b61498d61497d82610a7a565b9161498783611fe3565b90612dfb565b90565b906149b06149ab6149b5936149a3613cce565b50600a6129ae565b6129c4565b615b9f565b90565b6149c0611dd2565b506149da6149d46301ffc9a760e01b610410565b91610410565b1490565b9160206149ff9294936149f860408201965f830190610c90565b01906107c0565b565b90614a16614a10838390613668565b1561045d565b614a1e575050565b614a385f92839263e2517d3f60e01b8452600484016149de565b0390fd5b909281614a59614a53614a4e5f611e75565b6104c4565b916104c4565b14614b245783614a79614a73614a6e5f611e75565b6104c4565b916104c4565b14614afd57614a9d83614a98614a9160018690613c55565b87906130d7565b612dfb565b614aa7575b505050565b919091614af2614ae0614ada7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610a3c565b93610a3c565b93614ae9610402565b9182918261068e565b0390a35f8080614aa2565b614b20614b095f611e75565b5f918291634a1406b160e11b835260048301610c9d565b0390fd5b614b47614b305f611e75565b5f91829163e602df0560e01b835260048301610c9d565b0390fd5b9182614b67614b61614b5c5f611e75565b6104c4565b916104c4565b141580614bd2575b614b82575b614b8092919091615bc0565b565b614b8a6133d2565b80614bb1575b15614b74575f6336e278fd60e21b815280614bad60048201610511565b0390fd5b50614bcd614bc7614bc06112e9565b3390613668565b1561045d565b614b90565b5081614bee614be8614be35f611e75565b6104c4565b916104c4565b1415614b6f565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b90959492614c6494614c53614c5d92614c49608096614c3f60a088019c5f8901906107c0565b60208701906107c0565b60408501906107c0565b6060830190610681565b0190610c90565b565b614c6e61257b565b50614c77614bf5565b614cee7f000000000000000000000000000000000000000000000000000000000000000091614cdf7f000000000000000000000000000000000000000000000000000000000000000046614cca30613539565b91614cd3610402565b96879560208701614c19565b602082018103825203826123d2565b614d00614cfa8261383f565b91613839565b2090565b90565b614d1b614d16614d2092614d04565b610a11565b6108e1565b90565b614d2c90614d07565b9052565b916020614d51929493614d4a60408201965f830190614d23565b0190610681565b565b614d67614d62614d6c926105f8565b610a11565b611493565b90565b614d77613692565b5080614d91614d8b65ffffffffffff614440565b916105f8565b11614da257614d9f90614d53565b90565b6030614dbe5f9283926306dfcc6560e41b845260048401614d30565b0390fd5b90565b614dd9614dd4614dde92614dc2565b610a11565b6105f8565b90565b90565b614df8614df3614dfd92614de1565b610a11565b6108e1565b90565b614e1f90614e19614e13614e24946108e1565b916105f8565b90610e26565b6105f8565b90565b90565b614e3e614e39614e4392614e27565b610a11565b6108e1565b90565b614e6590614e5f614e59614e6a946108e1565b916105f8565b90611e81565b6105f8565b90565b90565b614e84614e7f614e8992614e6d565b610a11565b6105f8565b90565b90565b614ea3614e9e614ea892614e8c565b610a11565b6108e1565b90565b90565b614ec2614ebd614ec792614eab565b610a11565b6105f8565b90565b90565b614ee1614edc614ee692614eca565b610a11565b6108e1565b90565b90565b614f00614efb614f0592614ee9565b610a11565b6105f8565b90565b90565b614f1f614f1a614f2492614f08565b610a11565b6108e1565b90565b90565b614f3e614f39614f4392614f27565b610a11565b6105f8565b90565b90565b614f5d614f58614f6292614f46565b610a11565b6108e1565b90565b614f79614f74614f7e92614eca565b610a11565b6105f8565b90565b90565b614f98614f93614f9d92614f81565b610a11565b6108e1565b90565b614fb4614faf614fb992614f46565b610a11565b6105f8565b90565b614fd0614fcb614fd592611ff2565b610a11565b6108e1565b90565b90565b614fef614fea614ff492614fd8565b610a11565b6105f8565b90565b9061500291026105f8565b90565b634e487b7160e01b5f52601260045260245ffd5b61502561502b916105f8565b916105f8565b908115615036570490565b615005565b9061504691016105f8565b90565b615051611eeb565b50806150666150606001611ff5565b916105f8565b11156153b1578061527b6152586152486152386152286152186152086151f86151e86151d86151c88b6151c26151bb6152819f61519b61518b6151ab926150ad6001611ff5565b90806150c56150bf600160801b614dc5565b916105f8565b1015615383575b806150e86150e268010000000000000000614e70565b916105f8565b1015615355575b80615107615101640100000000614eae565b916105f8565b1015615327575b8061512461511e62010000614eec565b916105f8565b10156152f9575b8061514061513a610100614f2a565b916105f8565b10156152cb575b8061515b6151556010614f65565b916105f8565b101561529d575b61517561516f6004614fa0565b916105f8565b1015615284575b6151866003614fdb565b614ff7565b6151956001614fbc565b90614e00565b6151a58186615019565b9061503b565b6151b56001614fbc565b90614e00565b8092615019565b9061503b565b6151d26001614fbc565b90614e00565b6151e2818c615019565b9061503b565b6151f26001614fbc565b90614e00565b615202818a615019565b9061503b565b6152126001614fbc565b90614e00565b6152228188615019565b9061503b565b6152326001614fbc565b90614e00565b6152428186615019565b9061503b565b6152526001614fbc565b90614e00565b9161527561526f61526a858094615019565b6105f8565b916105f8565b11615c50565b90613f4a565b90565b615298906152926001614fbc565b90614e46565b61517c565b6152b46152c5916152ae6004614f49565b90614e00565b916152bf6002614f84565b90614e46565b90615162565b6152e26152f3916152dc6008614f0b565b90614e00565b916152ed6004614f49565b90614e46565b90615147565b6153106153219161530a6010614ecd565b90614e00565b9161531b6008614f0b565b90614e46565b9061512b565b61533e61534f916153386020614e8f565b90614e00565b916153496010614ecd565b90614e46565b9061510e565b61536c61537d916153666040614e2a565b90614e00565b916153776020614e8f565b90614e46565b906150ef565b61539a6153ab916153946080614de4565b90614e00565b916153a56040614e2a565b90614e46565b906150cc565b90565b5f5260205f200190565b939190926153ca611eeb565b505b816153df6153d9836105f8565b916105f8565b1015615445576153f0828290615c9c565b906154065f6154008885906153b4565b0161451a565b61541861541287611493565b91611493565b115f146154285750915b916153cc565b92915061543f906154396001611ff5565b9061286b565b90615422565b925050915090565b61545f90615459611eeb565b506130ed565b90565b90565b9190918061547b615475856104c4565b916104c4565b1415806155f9575b61548d575b505050565b806154a86154a261549d5f611e75565b6104c4565b916104c4565b03615569575b50816154ca6154c46154bf5f611e75565b6104c4565b916104c4565b036154d6575b80615488565b61551d615510615517926154ec600a86906129ae565b9061550a6155046154fe600193615d35565b936129c4565b91615462565b90615d88565b92906129c7565b916129c7565b91909161554a7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610a3c565b9261555f615556610402565b92839283612db5565b0390a25f806154d0565b6155a86155ae6155a161557e600a85906129ae565b600261559b61559561558f89615d35565b936129c4565b91615462565b90615d88565b92906129c7565b916129c7565b9190916155db7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610a3c565b926155f06155e7610402565b92839283612db5565b0390a25f6154ae565b508161560d6156075f611fc7565b916105f8565b11615483565b5f61562791615620611eeb565b50016144d5565b90565b61563e61563961564392610e9e565b610a11565b6105f8565b90565b61564f90614e8f565b9052565b91602061567492949361566d60408201965f830190615646565b0190610681565b565b61568a61568561568f926105f8565b610a11565b610e9e565b90565b61569a6130be565b50806156b26156ac63ffffffff61562a565b916105f8565b116156c3576156c090615676565b90565b60206156df5f9283926306dfcc6560e41b845260048401615653565b0390fd5b6156fa6156ff916156f2611eeb565b5060086130d7565b610a7a565b90565b90565b61571961571461571e92615702565b61160e565b61077c565b90565b61572b60ff615705565b90565b5f5260205f2090565b905f929180549061575161574a836122e9565b8094612313565b916001811690815f146157a8575060011461576c575b505050565b615779919293945061572e565b915f925b81841061579057505001905f8080615767565b6001816020929593955484860152019101929061577d565b92949550505060ff19168252151560200201905f8080615767565b906157cd91615737565b90565b906157f06157e9926157e0610402565b938480926157c3565b03836123d2565b565b6157fb906157d0565b90565b906158076122d0565b506158118261257f565b61582a61582461581f615721565b61077c565b9161077c565b14155f1461583f575061583c90615e12565b90565b61584991506157f2565b90565b60429161585761257b565b50604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b5f90565b61589d6158a291610a5e565b611eaa565b90565b90565b6158bc6158b76158c1926158a5565b610a11565b6105f8565b90565b6158f9615900946158ef6060949897956158e5608086019a5f8701906107c0565b60208501906108e7565b60408301906107c0565b01906107c0565b565b61590a610402565b3d5f823e3d90fd5b93929361591d6120d1565b5061592661588d565b5061592f61257b565b5061593985615891565b61596b6159657f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06158a8565b916105f8565b116159f8579061598e602094955f94939293615985610402565b948594856158c4565b838052039060015afa156159f3576159a65f5161160e565b806159c16159bb6159b65f611e75565b6104c4565b916104c4565b146159d7575f916159d15f611613565b91929190565b506159e15f611e75565b6001916159ed5f611613565b91929190565b615902565b505050615a045f611e75565b9060039291929190565b634e487b7160e01b5f52602160045260245ffd5b60041115615a2c57565b615a0e565b90615a3b82615a22565b565b80615a50615a4a5f615a31565b91615a31565b145f14615a5b575050565b80615a6f615a696001615a31565b91615a31565b145f14615a92575f63f645eedf60e01b815280615a8e60048201610511565b0390fd5b80615aa6615aa06002615a31565b91615a31565b145f14615ad457615ad0615ab983615891565b5f91829163fce698f760e01b83526004830161068e565b0390fd5b615ae7615ae16003615a31565b91615a31565b14615aef5750565b615b0a905f9182916335e2f38360e21b8352600483016107cd565b0390fd5b5f5260205f2090565b615b20816144d5565b821015615b3a57615b32600191615b0e565b910201905f90565b61167b565b90615b4990611493565b9052565b90615b5790611c4e565b9052565b90615b91615b885f615b6b613c93565b94615b82615b7a83830161451a565b838801615b3f565b0161454c565b60208401615b4d565b565b615b9c90615b5b565b90565b615bbd915f615bb792615bb0613cce565b5001615b17565b50615b93565b90565b9291615bce84838391615e42565b83615be9615be3615bde5f611e75565b6104c4565b916104c4565b14615bfe575b615bfc9293919091615fcc565b565b615c06612461565b93615c0f615fb1565b9480615c23615c1d886105f8565b916105f8565b11615c3057509350615bef565b8590615c4c5f928392630e58ae9360e11b845260048401612db5565b0390fd5b615c58611eeb565b50151590565b615c72615c6d615c7792614f81565b610a11565b6105f8565b90565b615c86615c8c916105f8565b916105f8565b908115615c97570490565b615005565b615cc1615cc792615cab611eeb565b508281169218615cbb6002615c5e565b90615c7a565b9061286b565b90565b90565b615ce1615cdc615ce692615cca565b610a11565b6108e1565b90565b615cf290615ccd565b9052565b916020615d17929493615d1060408201965f830190615ce9565b0190610681565b565b615d2d615d28615d32926105f8565b610a11565b611c4e565b90565b615d3d611d3d565b5080615d57615d5160018060d01b036129c7565b916105f8565b11615d6857615d6590615d19565b90565b60d0615d845f9283926306dfcc6560e41b845260048401615cf6565b0390fd5b90615dbe615dc49392615d99611d3d565b50615da2611d3d565b508093615db7615db0613696565b949261483e565b9091616434565b9161608b565b91909190565b615dde615dd9615de392614e8c565b610a11565b6105f8565b90565b369037565b90615e10615df883612b55565b92602080615e068693612b32565b9201910390615de6565b565b615e1a6122d0565b50615e24816160f5565b90615e37615e326020615dca565b615deb565b918252602082015290565b91909180615e60615e5a615e555f611e75565b6104c4565b916104c4565b145f14615f4157615e84615e7d83615e786002610a7a565b61286b565b6002612dfb565b5b82615ea0615e9a615e955f611e75565b6104c4565b916104c4565b145f14615f1557615ec4615ebd83615eb86002610a7a565b613f4a565b6002612dfb565b5b919091615f10615efe615ef87fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610a3c565b93610a3c565b93615f07610402565b9182918261068e565b0390a3565b615f3c82615f36615f275f87906130d7565b91615f3183610a7a565b61503b565b90612dfb565b615ec5565b615f54615f4f5f83906130d7565b610a7a565b80615f67615f61856105f8565b916105f8565b10615f8f57615f7a615f8a918490613f4a565b615f855f84906130d7565b612dfb565b615e85565b90615fad9091925f93849363391434e360e21b855260048501613d63565b0390fd5b615fb9611eeb565b50615fc960018060d01b036129c7565b90565b9161602461601e61602b9480615ff2615fec615fe75f611e75565b6104c4565b916104c4565b1461605c575b8461601361600d6160085f611e75565b6104c4565b916104c4565b1461602d575b612c44565b92612c44565b9091615465565b565b616055600b600261604f61604961604389615d35565b936129c4565b91615462565b90615d88565b5050616019565b616084600b600161607e61607861607289615d35565b936129c4565b91615462565b90615d88565b5050615ff8565b916160af5f6160b49461609c611d3d565b506160a5611d3d565b50019291926144f8565b6162e6565b91909190565b6160ce6160c96160d392615702565b610a11565b6105f8565b90565b90565b6160ed6160e86160f2926160d6565b610a11565b6105f8565b90565b61610a61610f91616104611eeb565b5061257f565b615891565b61611960ff6160ba565b168061612e616128601f6160d9565b916105f8565b116161365790565b5f632cd44ac360e21b81528061614e60048201610511565b0390fd5b5490565b6161606040612760565b90565b5f5260205f2090565b61617581616152565b82101561618f57616187600191616163565b910201905f90565b61167b565b61619e9051611493565b90565b906161b265ffffffffffff9161160e565b9181191691161790565b6161d06161cb6161d592611493565b610a11565b611493565b90565b90565b906161f06161eb6161f7926161bc565b6161d8565b82546161a1565b9055565b6162059051611c4e565b90565b60301b90565b9061622065ffffffffffff1991616208565b9181191691161790565b61623e61623961624392611c4e565b610a11565b611c4e565b90565b90565b9061625e6162596162659261622a565b616246565b825461620e565b9055565b9061629360205f6162999461628b828201616285848801616194565b906161db565b0192016161fb565b90616249565b565b91906162ac576162aa91616269565b565b611f58565b90815491680100000000000000008310156162e157826162d99160016162df9501815561616c565b9061629b565b565b6123be565b909291926162f2611d3d565b506162fb611d3d565b5061630582616152565b806163186163125f611fc7565b916105f8565b115f146163e85761633e9061633884916163326001611ff5565b90612011565b906153b4565b9061634a5f830161451a565b926163565f840161454c565b938061636a61636485611493565b91611493565b116163cc5761638161637b84611493565b91611493565b145f1461639c575050616397905f859101616249565b5b9190565b6163c792506163c2866163b96163b0616156565b945f8601615b3f565b60208401615b4d565b6162b1565b616398565b5f632520601d60e01b8152806163e460048201610511565b0390fd5b506164139161640e856164056163fc616156565b945f8601615b3f565b60208401615b4d565b6162b1565b61641c5f614559565b9190565b634e487b7160e01b5f52605160045260245ffd5b91909180600114616453576002036164205761644f91611dbc565b905b565b5061645d91611d7d565b9061645156
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\x80`@R4a\0\x84Wa\0\x1Ba\0\x15a\x01XV[\x90a\x01\x9EV[a\0#a\0\x89V[adca\x1C\xDC\x829`\x80Q\x81aC7\x01R`\xA0Q\x81aCn\x01R`\xC0Q\x81aB\xFE\x01R`\xE0Q\x81aL|\x01Ra\x01\0Q\x81aL\xA1\x01Ra\x01 Q\x81aG\xCC\x01Ra\x01@Q\x81aH\x0C\x01Ra\x01`Q\x81\x81\x81a\x11\x11\x01Ra4b\x01Radc\x90\xF3[a\0\x8FV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xBB\x90a\0\x93V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\xD3W`@RV[a\0\x9DV[\x90a\0\xEBa\0\xE4a\0\x89V[\x92\x83a\0\xB1V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x05\x90a\0\xF1V[\x90V[a\x01\x11\x81a\0\xFCV[\x03a\x01\x18WV[_\x80\xFD[\x90PQ\x90a\x01)\x82a\x01\x08V[V[\x91\x90`@\x83\x82\x03\x12a\x01SW\x80a\x01Ga\x01P\x92_\x86\x01a\x01\x1CV[\x93` \x01a\x01\x1CV[\x90V[a\0\xEDV[a\x01va\x81?\x808\x03\x80a\x01k\x81a\0\xD8V[\x92\x839\x81\x01\x90a\x01+V[\x90\x91V[\x7F\xCC\xE2\x96\xB0@3*\x08\x0Em\xF15\x15\xA3\xEC(i\xE2\x1C\xD2\x0FsD\xAF\t\x87\xDD\xB98\xD8\xBD!\x90V[a\x01\xABa\x01\xB8\x92\x82a\x01\xBBV[a\x01\xB3a\x01zV[a\t\x9AV[PV[\x90a\x01\xC5\x91a\x01\xC7V[V[\x90a\x01\xD1\x91a\x04\x16V[V[`\x01\x80`@\x1B\x03\x81\x11a\x01\xEFWa\x01\xEB` \x91a\0\x93V[\x01\x90V[a\0\x9DV[\x90a\x02\x06a\x02\x01\x83a\x01\xD3V[a\0\xD8V[\x91\x82RV[_\x7FSyndicate\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02<`\ta\x01\xF4V[\x90a\x02I` \x83\x01a\x02\x0BV[V[a\x02Sa\x022V[\x90V[_\x7FSYND\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\x87`\x04a\x01\xF4V[\x90a\x02\x94` \x83\x01a\x02VV[V[a\x02\x9Ea\x02}V[\x90V[\x90V[\x90V[a\x02\xBBa\x02\xB6a\x02\xC0\x92a\x02\xA1V[a\x02\xA4V[a\0\xF1V[\x90V[a\x02\xCC\x90a\x02\xA7V[\x90V[_\x01\x90V[\x90V[\x90V[a\x02\xEEa\x02\xE9a\x02\xF3\x92a\x02\xD4V[a\x02\xA4V[a\x02\xD7V[\x90V[a\x03\x02bv\xA7\0a\x02\xDAV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x03(a\x03.\x91\x93\x92\x93a\x02\xD7V[\x92a\x02\xD7V[\x82\x01\x80\x92\x11a\x039WV[a\x03\x05V[a\x03Ra\x03Ma\x03W\x92a\x02\xA1V[a\x02\xA4V[a\x02\xD7V[\x90V[_\x1B\x90V[\x90a\x03k_\x19\x91a\x03ZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x89a\x03\x84a\x03\x8E\x92a\x02\xD7V[a\x02\xA4V[a\x02\xD7V[\x90V[\x90V[\x90a\x03\xA9a\x03\xA4a\x03\xB0\x92a\x03uV[a\x03\x91V[\x82Ta\x03_V[\x90UV[\x90V[a\x03\xCBa\x03\xC6a\x03\xD0\x92a\x02\xA1V[a\x03ZV[a\x03\xB4V[\x90V[a\x03\xDC_a\x03\xB7V[\x90V[\x90V[a\x03\xF6a\x03\xF1a\x03\xFB\x92a\x03\xDFV[a\x02\xA4V[a\x02\xD7V[\x90V[a\x04\x13k\x02\xE8vi\xC3\x08sj\x04\0\0\0a\x03\xE2V[\x90V[\x90a\x048a\x04\"a\x02KV[a\x04*a\x02KV[a\x042a\x02\x96V[\x91a\x04\xFEV[\x81a\x04Sa\x04Ma\x04H_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14a\x04\xE2W\x80a\x04sa\x04ma\x04h_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14a\x04\xC6Wa\x04\xB5a\x04\xC4\x92a\x04\x91Ba\x04\x8Ba\x02\xF6V[\x90a\x03\x19V[a\x01`Ra\x04\xA8a\x04\xA1_a\x03>V[`\x0Ca\x03\x94V[a\x04\xB0a\x03\xD3V[a\t\x9AV[Pa\x04\xBEa\x03\xFEV[\x90a\nhV[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x04\xDE`\x04\x82\x01a\x02\xCFV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x04\xFA`\x04\x82\x01a\x02\xCFV[\x03\x90\xFD[\x90a\x05\t\x92\x91a\x05\x0BV[V[\x90a\x05\x16\x92\x91a\x05\x18V[V[\x90a\x05#\x92\x91a\x05%V[V[\x90a\x050\x92\x91a\x052V[V[\x90a\x05=\x92\x91a\x05\x8AV[V[_\x7F1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05p`\x01a\x01\xF4V[\x90a\x05}` \x83\x01a\x05?V[V[a\x05\x87a\x05fV[\x90V[\x90a\x05\x9E\x92\x91a\x05\x98a\x05\x7FV[\x90a\x05\xA0V[V[\x90a\x05\xAC\x93\x92\x91a\x05\xF2V[V[\x90V[\x90V[` \x01\x90V[Q\x90V[a\x05\xD2a\x05\xCDa\x05\xD7\x92a\0\xF1V[a\x02\xA4V[a\0\xF1V[\x90V[a\x05\xE3\x90a\x05\xBEV[\x90V[a\x05\xEF\x90a\x05\xDAV[\x90V[a\x06\x03a\x06S\x94a\x068\x93\x94a\x06\x87V[a\x06\x17\x81a\x06\x11`\x06a\x05\xAEV[\x90a\x0B\x15V[a\x01 Ra\x06/\x83a\x06)`\x07a\x05\xAEV[\x90a\x0B\x15V[a\x01@Ra\x05\xB1V[a\x06Ja\x06D\x82a\x05\xBAV[\x91a\x05\xB4V[ `\xE0Ra\x05\xB1V[a\x06ea\x06_\x82a\x05\xBAV[\x91a\x05\xB4V[ a\x01\0RF`\xA0Ra\x06va\x0C\x1AV[`\x80Ra\x06\x820a\x05\xE6V[`\xC0RV[\x90a\x06\x91\x91a\x06\x93V[V[\x90a\x06\x9D\x91a\x06\x9FV[V[\x90a\x06\xA9\x91a\x08\xF0V[V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x06\xF6W[` \x83\x10\x14a\x06\xF1WV[a\x06\xC2V[\x91`\x7F\x16\x91a\x06\xE6V[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x072\x91\x02\x91a\x07,_\x19\x84a\x07\x13V[\x92a\x07\x13V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x07Ra\x07Ma\x07Z\x93a\x03uV[a\x03\x91V[\x90\x83Ta\x07\x17V[\x90UV[_\x90V[a\x07t\x91a\x07na\x07^V[\x91a\x07<V[V[[\x81\x81\x10a\x07\x82WPPV[\x80a\x07\x8F_`\x01\x93a\x07bV[\x01a\x07wV[\x91\x90`\x1F\x81\x11a\x07\xA5W[PPPV[a\x07\xB1a\x07\xD6\x93a\x07\0V[\x90` a\x07\xBD\x84a\x07\tV[\x83\x01\x93\x10a\x07\xDEW[a\x07\xCF\x90a\x07\tV[\x01\x90a\x07vV[_\x80\x80a\x07\xA0V[\x91Pa\x07\xCF\x81\x92\x90Pa\x07\xC6V[\x1C\x90V[\x90a\x08\0\x90_\x19\x90`\x08\x02a\x07\xECV[\x19\x16\x90V[\x81a\x08\x0F\x91a\x07\xF0V[\x90`\x02\x02\x17\x90V[\x90a\x08!\x81a\x06\xBEV[\x90`\x01\x80`@\x1B\x03\x82\x11a\x08\xDFWa\x08C\x82a\x08=\x85Ta\x06\xD6V[\x85a\x07\x95V[` \x90`\x1F\x83\x11`\x01\x14a\x08wW\x91\x80\x91a\x08f\x93_\x92a\x08kW[PPa\x08\x05V[\x90U[V[\x90\x91P\x01Q_\x80a\x08_V[`\x1F\x19\x83\x16\x91a\x08\x86\x85a\x07\0V[\x92_[\x81\x81\x10a\x08\xC7WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x08\xADW[PPP\x02\x01\x90Ua\x08iV[a\x08\xBD\x91\x01Q`\x1F\x84\x16\x90a\x07\xF0V[\x90U_\x80\x80a\x08\xA1V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x08\x89V[a\0\x9DV[\x90a\x08\xEE\x91a\x08\x17V[V[\x90a\x08\xFFa\t\x06\x92`\x03a\x08\xE4V[`\x04a\x08\xE4V[V[_\x90V[\x15\x15\x90V[a\t\x1A\x90a\x03\xB4V[\x90V[\x90a\t'\x90a\t\x11V[_R` R`@_ \x90V[a\t<\x90a\x05\xDAV[\x90V[\x90a\tI\x90a\t3V[_R` R`@_ \x90V[\x90a\ta`\xFF\x91a\x03ZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\tt\x90a\t\x0CV[\x90V[\x90V[\x90a\t\x8Fa\t\x8Aa\t\x96\x92a\tkV[a\twV[\x82Ta\tUV[\x90UV[a\t\xA2a\t\x08V[Pa\t\xB7a\t\xB1\x82\x84\x90a\x0C\xB7V[\x15a\t\x0CV[_\x14a\n@Wa\t\xDF`\x01a\t\xDA_a\t\xD2`\x05\x86\x90a\t\x1DV[\x01\x85\x90a\t?V[a\tzV[\x90a\t\xE8a\x0C\xE5V[\x90a\n%a\n\x1Fa\n\x19\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\t\x11V[\x92a\t3V[\x92a\t3V[\x92a\n.a\0\x89V[\x80a\n8\x81a\x02\xCFV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\nO\x90a\0\xFCV[\x90RV[\x91\x90a\nf\x90_` \x85\x01\x94\x01\x90a\nFV[V[\x80a\n\x83a\n}a\nx_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14a\n\x9FWa\n\x9D\x91a\n\x95_a\x02\xC3V[\x91\x90\x91a\r\x16V[V[a\n\xC2a\n\xAB_a\x02\xC3V[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\nSV[\x03\x90\xFD[_\x90V[\x90V[a\n\xE1a\n\xDCa\n\xE6\x92a\n\xCAV[a\x02\xA4V[a\x02\xD7V[\x90V[\x90V[a\x0B\0a\n\xFBa\x0B\x05\x92a\n\xE9V[a\x03ZV[a\x03\xB4V[\x90V[a\x0B\x12`\xFFa\n\xECV[\x90V[\x90a\x0B\x1Ea\n\xC6V[Pa\x0B0a\x0B+\x83a\x05\xB1V[a\x05\xBAV[a\x0BCa\x0B=` a\n\xCDV[\x91a\x02\xD7V[\x10_\x14a\x0BWWPa\x0BT\x90a\x0E\xB0V[\x90V[_a\x0Bea\x0Bk\x93\x92a\r\xC0V[\x01a\x08\xE4V[a\x0B{a\x0Bva\x0B\x08V[a\t\x11V[\x90V[_\x90V[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[a\x0B\xB0\x90Qa\x03\xB4V[\x90V[a\x0B\xBC\x90a\x03\xB4V[\x90RV[a\x0B\xC9\x90a\x02\xD7V[\x90RV[\x90\x95\x94\x92a\x0C\x18\x94a\x0C\x07a\x0C\x11\x92a\x0B\xFD`\x80\x96a\x0B\xF3`\xA0\x88\x01\x9C_\x89\x01\x90a\x0B\xB3V[` \x87\x01\x90a\x0B\xB3V[`@\x85\x01\x90a\x0B\xB3V[``\x83\x01\x90a\x0B\xC0V[\x01\x90a\nFV[V[a\x0C\"a\x0B~V[Pa\x0C+a\x0B\x82V[a\x0Cua\x0C8`\xE0a\x0B\xA6V[\x91a\x0Cfa\x0CGa\x01\0a\x0B\xA6V[Fa\x0CQ0a\x05\xE6V[\x91a\x0CZa\0\x89V[\x96\x87\x95` \x87\x01a\x0B\xCDV[` \x82\x01\x81\x03\x82R\x03\x82a\0\xB1V[a\x0C\x87a\x0C\x81\x82a\x05\xBAV[\x91a\x05\xB4V[ \x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x0C\xA2a\x0C\xA7\x91a\x0C\x8BV[a\x0C\x90V[\x90V[a\x0C\xB4\x90Ta\x0C\x96V[\x90V[a\x0C\xDE\x91_a\x0C\xD3a\x0C\xD9\x93a\x0C\xCBa\t\x08V[P`\x05a\t\x1DV[\x01a\t?V[a\x0C\xAAV[\x90V[_\x90V[a\x0C\xEDa\x0C\xE1V[P3\x90V[\x7F\x84\xFEt\xC7\x1A(\xB6\x9A\xA9`Hl\xA0\xE8\xC1A\x8C\x86\xE9\xEA,\xD6\xB5\x84\x9B\x95\xE2\xC8\xF4\x07\xA6t\x90V[\x91\x82a\r2a\r,a\r'_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14\x15\x80a\r\x9DW[a\rMW[a\rK\x92\x91\x90\x91a\x0F\xD4V[V[a\rUa\x0F^V[\x80a\r|W[\x15a\r?W_c6\xE2x\xFD`\xE2\x1B\x81R\x80a\rx`\x04\x82\x01a\x02\xCFV[\x03\x90\xFD[Pa\r\x98a\r\x92a\r\x8Ba\x0C\xF2V[3\x90a\x0C\xB7V[\x15a\t\x0CV[a\r[V[P\x81a\r\xB9a\r\xB3a\r\xAE_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14\x15a\r:V[\x90V[\x90V[a\r\xDAa\r\xD5a\r\xDF\x92a\r\xC3V[a\x02\xA4V[a\x02\xD7V[\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0E\x15a\x0E\x1E` \x93a\x0E#\x93a\x0E\x0C\x81a\x06\xBEV[\x93\x84\x80\x93a\r\xE2V[\x95\x86\x91\x01a\r\xEBV[a\0\x93V[\x01\x90V[a\x0E<\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\r\xF6V[\x90V[a\x0EYa\x0ETa\x0EN\x83a\x05\xBAV[\x92a\x05\xB4V[a\x0B\xA6V[\x90` \x81\x10a\x0EgW[P\x90V[a\x0Ey\x90_\x19\x90` \x03`\x08\x02a\x07\x13V[\x16_a\x0EcV[a\x0E\x8Ca\x0E\x91\x91a\x0C\x8BV[a\x03uV[\x90V[a\x0E\xA8a\x0E\xA3a\x0E\xAD\x92a\x02\xD7V[a\x03ZV[a\x03\xB4V[\x90V[a\x0E\xB8a\n\xC6V[Pa\x0E\xC2\x81a\x05\xB1V[\x90a\x0E\xCC\x82a\x05\xBAV[a\x0E\xDFa\x0E\xD9`\x1Fa\r\xC6V[\x91a\x02\xD7V[\x11a\x0F\x14WPa\x0F\x0C\x81a\x0F\x06a\x0F\0a\x0E\xFBa\x0F\x11\x95a\x0E?V[a\x0E\x80V[\x91a\x05\xBAV[\x17a\x0E\x94V[a\t\x11V[\x90V[a\x0F6\x90a\x0F a\0\x89V[\x91\x82\x91c0Z'\xA9`\xE0\x1B\x83R`\x04\x83\x01a\x0E'V[\x03\x90\xFD[\x90V[a\x0FIa\x0FN\x91a\x0C\x8BV[a\x0F:V[\x90V[a\x0F[\x90Ta\x0F=V[\x90V[a\x0Ffa\t\x08V[Pa\x0Fq`\x0Ca\x0FQV[a\x0F\x83a\x0F}_a\x03>V[\x91a\x02\xD7V[\x14\x15\x80a\x0F\x8EW[\x90V[PBa\x0F\xABa\x0F\xA5a\x0F\xA0`\x0Ca\x0FQV[a\x02\xD7V[\x91a\x02\xD7V[\x10a\x0F\x8BV[\x91` a\x0F\xD2\x92\x94\x93a\x0F\xCB`@\x82\x01\x96_\x83\x01\x90a\x0B\xC0V[\x01\x90a\x0B\xC0V[V[\x92\x91a\x0F\xE2\x84\x83\x83\x91a\x10\xDDV[\x83a\x0F\xFDa\x0F\xF7a\x0F\xF2_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14a\x10\x12W[a\x10\x10\x92\x93\x91\x90\x91a\x12\xAAV[V[a\x10\x1Aa\x12LV[\x93a\x10#a\x12\x89V[\x94\x80a\x107a\x101\x88a\x02\xD7V[\x91a\x02\xD7V[\x11a\x10DWP\x93Pa\x10\x03V[\x85\x90a\x10`_\x92\x83\x92c\x0EX\xAE\x93`\xE1\x1B\x84R`\x04\x84\x01a\x0F\xB1V[\x03\x90\xFD[\x90a\x10n\x90a\t3V[_R` R`@_ \x90V[`@\x90a\x10\xA3a\x10\xAA\x94\x96\x95\x93\x96a\x10\x99``\x84\x01\x98_\x85\x01\x90a\nFV[` \x83\x01\x90a\x0B\xC0V[\x01\x90a\x0B\xC0V[V[\x90a\x10\xB7\x91\x03a\x02\xD7V[\x90V[\x90a\x10\xC5\x91\x01a\x02\xD7V[\x90V[\x91\x90a\x10\xDB\x90_` \x85\x01\x94\x01\x90a\x0B\xC0V[V[\x91\x90\x91\x80a\x10\xFBa\x10\xF5a\x10\xF0_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14_\x14a\x11\xDCWa\x11\x1Fa\x11\x18\x83a\x11\x13`\x02a\x0FQV[a\x03\x19V[`\x02a\x03\x94V[[\x82a\x11;a\x115a\x110_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14_\x14a\x11\xB0Wa\x11_a\x11X\x83a\x11S`\x02a\x0FQV[a\x10\xACV[`\x02a\x03\x94V[[\x91\x90\x91a\x11\xABa\x11\x99a\x11\x93\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\t3V[\x93a\t3V[\x93a\x11\xA2a\0\x89V[\x91\x82\x91\x82a\x10\xC8V[\x03\x90\xA3V[a\x11\xD7\x82a\x11\xD1a\x11\xC2_\x87\x90a\x10dV[\x91a\x11\xCC\x83a\x0FQV[a\x10\xBAV[\x90a\x03\x94V[a\x11`V[a\x11\xEFa\x11\xEA_\x83\x90a\x10dV[a\x0FQV[\x80a\x12\x02a\x11\xFC\x85a\x02\xD7V[\x91a\x02\xD7V[\x10a\x12*Wa\x12\x15a\x12%\x91\x84\x90a\x10\xACV[a\x12 _\x84\x90a\x10dV[a\x03\x94V[a\x11 V[\x90a\x12H\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a\x10zV[\x03\x90\xFD[a\x12Ta\x07^V[Pa\x12_`\x02a\x0FQV[\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x12\x81a\x12|a\x12\x86\x92a\x12bV[a\x02\xA4V[a\x02\xD7V[\x90V[a\x12\x91a\x07^V[Pa\x12\xA1`\x01\x80`\xD0\x1B\x03a\x12mV[\x90V[\x90V[\x90V[\x91a\x13\x02a\x12\xFCa\x13\t\x94\x80a\x12\xD0a\x12\xCAa\x12\xC5_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14a\x13:W[\x84a\x12\xF1a\x12\xEBa\x12\xE6_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x14a\x13\x0BW[a\x152V[\x92a\x152V[\x90\x91a\x15gV[V[a\x133`\x0B`\x02a\x13-a\x13'a\x13!\x89a\x14\x1CV[\x93a\x12\xA4V[\x91a\x12\xA7V[\x90a\x14oV[PPa\x12\xF7V[a\x13b`\x0B`\x01a\x13\\a\x13Va\x13P\x89a\x14\x1CV[\x93a\x12\xA4V[\x91a\x12\xA7V[\x90a\x14oV[PPa\x12\xD6V[_\x90V[a\x13ya\x13\x7F\x91a\x12bV[\x91a\x12bV[\x01\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x13\x90WV[a\x03\x05V[\x90a\x13\xA8\x91a\x13\xA2a\x13iV[Pa\x13mV[\x90V[\x90V[`\xFF\x16\x90V[a\x13\xC8a\x13\xC3a\x13\xCD\x92a\x13\xABV[a\x02\xA4V[a\x13\xAEV[\x90V[a\x13\xD9\x90a\x13\xB4V[\x90RV[\x91` a\x13\xFE\x92\x94\x93a\x13\xF7`@\x82\x01\x96_\x83\x01\x90a\x13\xD0V[\x01\x90a\x0B\xC0V[V[a\x14\x14a\x14\x0Fa\x14\x19\x92a\x02\xD7V[a\x02\xA4V[a\x12bV[\x90V[a\x14$a\x13iV[P\x80a\x14>a\x148`\x01\x80`\xD0\x1B\x03a\x12mV[\x91a\x02\xD7V[\x11a\x14OWa\x14L\x90a\x14\0V[\x90V[`\xD0a\x14k_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a\x13\xDDV[\x03\x90\xFD[\x90a\x14\xA5a\x14\xAB\x93\x92a\x14\x80a\x13iV[Pa\x14\x89a\x13iV[P\x80\x93a\x14\x9Ea\x14\x97a\x17\x19V[\x94\x92a\x17\xC6V[\x90\x91a\x1C\xACV[\x91a\x18;V[\x91\x90\x91\x90V[a\x14\xBDa\x14\xC3\x91a\x12bV[\x91a\x12bV[\x90\x03\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x14\xD5WV[a\x03\x05V[\x90a\x14\xED\x91a\x14\xE7a\x13iV[Pa\x14\xB1V[\x90V[\x90a\x14\xFA\x90a\t3V[_R` R`@_ \x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x15\x1Da\x15\"\x91a\x0C\x8BV[a\x15\x06V[\x90V[a\x15/\x90Ta\x15\x11V[\x90V[a\x15Ia\x15N\x91a\x15Aa\x0C\xE1V[P`\ta\x14\xF0V[a\x15%V[\x90V[\x90a\x15[\x90a\t3V[_R` R`@_ \x90V[\x91\x90\x91\x80a\x15}a\x15w\x85a\0\xFCV[\x91a\0\xFCV[\x14\x15\x80a\x16\xFBW[a\x15\x8FW[PPPV[\x80a\x15\xAAa\x15\xA4a\x15\x9F_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x03a\x16kW[P\x81a\x15\xCCa\x15\xC6a\x15\xC1_a\x02\xC3V[a\0\xFCV[\x91a\0\xFCV[\x03a\x15\xD8W[\x80a\x15\x8AV[a\x16\x1Fa\x16\x12a\x16\x19\x92a\x15\xEE`\n\x86\x90a\x15QV[\x90a\x16\x0Ca\x16\x06a\x16\0`\x01\x93a\x14\x1CV[\x93a\x12\xA4V[\x91a\x12\xA7V[\x90a\x14oV[\x92\x90a\x12mV[\x91a\x12mV[\x91\x90\x91a\x16L\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\t3V[\x92a\x16aa\x16Xa\0\x89V[\x92\x83\x92\x83a\x0F\xB1V[\x03\x90\xA2_\x80a\x15\xD2V[a\x16\xAAa\x16\xB0a\x16\xA3a\x16\x80`\n\x85\x90a\x15QV[`\x02a\x16\x9Da\x16\x97a\x16\x91\x89a\x14\x1CV[\x93a\x12\xA4V[\x91a\x12\xA7V[\x90a\x14oV[\x92\x90a\x12mV[\x91a\x12mV[\x91\x90\x91a\x16\xDD\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\t3V[\x92a\x16\xF2a\x16\xE9a\0\x89V[\x92\x83\x92\x83a\x0F\xB1V[\x03\x90\xA2_a\x15\xB0V[P\x81a\x17\x0Fa\x17\t_a\x03>V[\x91a\x02\xD7V[\x11a\x15\x85V[_\x90V[a\x17!a\x17\x15V[Pa\x17*a\x18jV[\x90V[T\x90V[\x90V[a\x17Ha\x17Ca\x17M\x92a\x171V[a\x02\xA4V[a\x02\xD7V[\x90V[a\x17_a\x17e\x91\x93\x92\x93a\x02\xD7V[\x92a\x02\xD7V[\x82\x03\x91\x82\x11a\x17pWV[a\x03\x05V[\x90V[`0\x1C\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x17\x95a\x17\x9A\x91a\x17xV[a\x17~V[\x90V[a\x17\xA7\x90Ta\x17\x89V[\x90V[a\x17\xBEa\x17\xB9a\x17\xC3\x92a\x02\xA1V[a\x02\xA4V[a\x12bV[\x90V[a\x17\xCEa\x13iV[Pa\x17\xDA_\x82\x01a\x17-V[\x80a\x17\xEDa\x17\xE7_a\x03>V[\x91a\x02\xD7V[\x14_\x14a\x18\x03WPPa\x17\xFF_a\x17\xAAV[[\x90V[a\x180_\x91a\x18+a\x18%\x84a\x186\x96\x01\x92a\x18\x1F`\x01a\x174V[\x90a\x17PV[\x91a\x17uV[a\x18\x7FV[\x01a\x17\x9DV[a\x18\0V[\x91a\x18__a\x18d\x94a\x18La\x13iV[Pa\x18Ua\x13iV[P\x01\x92\x91\x92a\x17uV[a\x1A\x84V[\x91\x90\x91\x90V[a\x18ra\x17\x15V[Pa\x18|Ca\x1CEV[\x90V[_R` _ \x01\x90V[T\x90V[a\x18\x97`@a\0\xD8V[\x90V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90a\x18\xAF\x90a\x18\x9AV[\x90RV[\x90a\x18\xBD\x90a\x12bV[\x90RV[_R` _ \x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[a\x18\xE7\x81a\x18\x89V[\x82\x10\x15a\x19\x01Wa\x18\xF9`\x01\x91a\x18\xC1V[\x91\x02\x01\x90_\x90V[a\x18\xCAV[a\x19\x10\x90Qa\x18\x9AV[\x90V[\x90a\x19$e\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x03ZV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19Ba\x19=a\x19G\x92a\x18\x9AV[a\x02\xA4V[a\x18\x9AV[\x90V[\x90V[\x90a\x19ba\x19]a\x19i\x92a\x19.V[a\x19JV[\x82Ta\x19\x13V[\x90UV[a\x19w\x90Qa\x12bV[\x90V[`0\x1B\x90V[\x90a\x19\x92e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x91a\x19zV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xB0a\x19\xABa\x19\xB5\x92a\x12bV[a\x02\xA4V[a\x12bV[\x90V[\x90V[\x90a\x19\xD0a\x19\xCBa\x19\xD7\x92a\x19\x9CV[a\x19\xB8V[\x82Ta\x19\x80V[\x90UV[\x90a\x1A\x05` _a\x1A\x0B\x94a\x19\xFD\x82\x82\x01a\x19\xF7\x84\x88\x01a\x19\x06V[\x90a\x19MV[\x01\x92\x01a\x19mV[\x90a\x19\xBBV[V[\x91\x90a\x1A\x1EWa\x1A\x1C\x91a\x19\xDBV[V[a\x06\xABV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x1ASW\x82a\x1AK\x91`\x01a\x1AQ\x95\x01\x81Ua\x18\xDEV[\x90a\x1A\rV[V[a\0\x9DV[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x1Aoa\x1At\x91a\x0C\x8BV[a\x1AXV[\x90V[a\x1A\x81\x90Ta\x1AcV[\x90V[\x90\x92\x91\x92a\x1A\x90a\x13iV[Pa\x1A\x99a\x13iV[Pa\x1A\xA3\x82a\x18\x89V[\x80a\x1A\xB6a\x1A\xB0_a\x03>V[\x91a\x02\xD7V[\x11_\x14a\x1B\x86Wa\x1A\xDC\x90a\x1A\xD6\x84\x91a\x1A\xD0`\x01a\x174V[\x90a\x17PV[\x90a\x18\x7FV[\x90a\x1A\xE8_\x83\x01a\x1AwV[\x92a\x1A\xF4_\x84\x01a\x17\x9DV[\x93\x80a\x1B\x08a\x1B\x02\x85a\x18\x9AV[\x91a\x18\x9AV[\x11a\x1BjWa\x1B\x1Fa\x1B\x19\x84a\x18\x9AV[\x91a\x18\x9AV[\x14_\x14a\x1B:WPPa\x1B5\x90_\x85\x91\x01a\x19\xBBV[[\x91\x90V[a\x1Be\x92Pa\x1B`\x86a\x1BWa\x1BNa\x18\x8DV[\x94_\x86\x01a\x18\xA5V[` \x84\x01a\x18\xB3V[a\x1A#V[a\x1B6V[_c% `\x1D`\xE0\x1B\x81R\x80a\x1B\x82`\x04\x82\x01a\x02\xCFV[\x03\x90\xFD[Pa\x1B\xB1\x91a\x1B\xAC\x85a\x1B\xA3a\x1B\x9Aa\x18\x8DV[\x94_\x86\x01a\x18\xA5V[` \x84\x01a\x18\xB3V[a\x1A#V[a\x1B\xBA_a\x17\xAAV[\x91\x90V[a\x1B\xD2a\x1B\xCDa\x1B\xD7\x92a\x18\x9AV[a\x02\xA4V[a\x02\xD7V[\x90V[\x90V[a\x1B\xF1a\x1B\xECa\x1B\xF6\x92a\x1B\xDAV[a\x02\xA4V[a\x13\xAEV[\x90V[a\x1C\x02\x90a\x1B\xDDV[\x90RV[\x91` a\x1C'\x92\x94\x93a\x1C `@\x82\x01\x96_\x83\x01\x90a\x1B\xF9V[\x01\x90a\x0B\xC0V[V[a\x1C=a\x1C8a\x1CB\x92a\x02\xD7V[a\x02\xA4V[a\x18\x9AV[\x90V[a\x1CMa\x17\x15V[P\x80a\x1Cga\x1Cae\xFF\xFF\xFF\xFF\xFF\xFFa\x1B\xBEV[\x91a\x02\xD7V[\x11a\x1CxWa\x1Cu\x90a\x1C)V[\x90V[`0a\x1C\x94_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a\x1C\x06V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[\x91\x90\x91\x80`\x01\x14a\x1C\xCBW`\x02\x03a\x1C\x98Wa\x1C\xC7\x91a\x14\xDAV[\x90[V[Pa\x1C\xD5\x91a\x13\x95V[\x90a\x1C\xC9V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x1D9V[a\0\x1D_5a\x03\xFCV[\x80c\x01\xFF\xC9\xA7\x14a\x03\xF7W\x80c\x04\xDF\x01}\x14a\x03\xF2W\x80c\x06\xFD\xDE\x03\x14a\x03\xEDW\x80c\t^\xA7\xB3\x14a\x03\xE8W\x80c\x18\x16\r\xDD\x14a\x03\xE3W\x80c\x18\xBFPw\x14a\x03\xDEW\x80c#\xB8r\xDD\x14a\x03\xD9W\x80c$\x8A\x9C\xA3\x14a\x03\xD4W\x80c+\x8CI\xE3\x14a\x03\xCFW\x80c//\xF1]\x14a\x03\xCAW\x80c0\xD3\xE8\xEB\x14a\x03\xC5W\x80c1<\xE5g\x14a\x03\xC0W\x80c6D\xE5\x15\x14a\x03\xBBW\x80c6V\x8A\xBE\x14a\x03\xB6W\x80c:F\xB1\xA8\x14a\x03\xB1W\x80c@\xC1\x0F\x19\x14a\x03\xACW\x80cBz\xC0\xCA\x14a\x03\xA7W\x80cK\xDD6\xCE\x14a\x03\xA2W\x80cK\xF5\xD7\xE9\x14a\x03\x9DW\x80cO\x1B\xFC\x9E\x14a\x03\x98W\x80cX|\xDE\x1E\x14a\x03\x93W\x80cZ]\xB1\xBB\x14a\x03\x8EW\x80c\\\x19\xA9\\\x14a\x03\x89W\x80cc\xA0\xDA\xAC\x14a\x03\x84W\x80ce\x14U4\x14a\x03\x7FW\x80cj\x96\xE3\xED\x14a\x03zW\x80co\xCF\xFFE\x14a\x03uW\x80cp\xA0\x821\x14a\x03pW\x80cr\xCB\xDC\xC8\x14a\x03kW\x80cx\xFB\x7F\xD2\x14a\x03fW\x80cy\xCCg\x90\x14a\x03aW\x80cz\x8C\xD1V\x14a\x03\\W\x80c~\xCE\xBE\0\x14a\x03WW\x80c\x83\xF1!\x1B\x14a\x03RW\x80c\x84&\xAD\xF2\x14a\x03MW\x80c\x84L\x90&\x14a\x03HW\x80c\x84\xB0\x19n\x14a\x03CW\x80c\x8AT%!\x14a\x03>W\x80c\x8D3C\xD6\x14a\x039W\x80c\x8ES\x9E\x8C\x14a\x034W\x80c\x90-U\xA5\x14a\x03/W\x80c\x91\xD1HT\x14a\x03*W\x80c\x91\xDD\xAD\xF4\x14a\x03%W\x80c\x94\xAA\"\xF2\x14a\x03 W\x80c\x95\xD8\x9BA\x14a\x03\x1BW\x80c\x9A\xB2N\xB0\x14a\x03\x16W\x80c\x9B~\xF6K\x14a\x03\x11W\x80c\xA2\x17\xFD\xDF\x14a\x03\x0CW\x80c\xA3\xC4G\x05\x14a\x03\x07W\x80c\xA9\x05\x9C\xBB\x14a\x03\x02W\x80c\xAA\x08*\x9D\x14a\x02\xFDW\x80c\xB0\xCA%>\x14a\x02\xF8W\x80c\xBBMD6\x14a\x02\xF3W\x80c\xC0*\xE7T\x14a\x02\xEEW\x80c\xC3\xCD\xA5 \x14a\x02\xE9W\x80c\xC4\xFCE\xA8\x14a\x02\xE4W\x80c\xC9\xAB\0\x06\x14a\x02\xDFW\x80c\xD5\x05\xAC\xCF\x14a\x02\xDAW\x80c\xD5Gt\x1F\x14a\x02\xD5W\x80c\xDDb\xED>\x14a\x02\xD0W\x80c\xF1\x12~\xD8\x14a\x02\xCBWc\xF7^\x85\x12\x03a\0\x0EWa\x1D\x04V[a\x1C\x9FV[a\x1B\xBBV[a\x1BZV[a\x1B V[a\x1A|V[a\x19\xF7V[a\x19\x1DV[a\x18aV[a\x18,V[a\x17\xF6V[a\x17\xC1V[a\x17VV[a\x17!V[a\x16FV[a\x15\xD6V[a\x15_V[a\x15*V[a\x14\xF5V[a\x14\xC0V[a\x14]V[a\x14(V[a\x13\xB1V[a\x13|V[a\x13\x18V[a\x12\xADV[a\x11hV[a\x113V[a\x10\xDAV[a\x10\xA5V[a\x10pV[a\x10<V[a\x10\x07V[a\x0F\xD2V[a\x0E\xFEV[a\x0E\xC9V[a\x0EiV[a\r\xDBV[a\r\xA7V[a\r:V[a\r\x05V[a\x0C\xB2V[a\x0C[V[a\x0B\xEDV[a\x0B\xB8V[a\x0B|V[a\t\xDDV[a\t\xA7V[a\tsV[a\t>V[a\t\tV[a\x08\xACV[a\x08xV[a\x08\x17V[a\x07\xE2V[a\x07FV[a\x06\xD8V[a\x06\xA3V[a\x06KV[a\x05\xC3V[a\x05\x16V[a\x04\x84V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x04%\x81a\x04\x10V[\x03a\x04,WV[_\x80\xFD[\x90P5\x90a\x04=\x82a\x04\x1CV[V[\x90` \x82\x82\x03\x12a\x04XWa\x04U\x91_\x01a\x040V[\x90V[a\x04\x0CV[\x15\x15\x90V[a\x04k\x90a\x04]V[\x90RV[\x91\x90a\x04\x82\x90_` \x85\x01\x94\x01\x90a\x04bV[V[4a\x04\xB4Wa\x04\xB0a\x04\x9Fa\x04\x9A6`\x04a\x04?V[a\x1D\xD6V[a\x04\xA7a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xCD\x90a\x04\xB9V[\x90V[a\x04\xD9\x81a\x04\xC4V[\x03a\x04\xE0WV[_\x80\xFD[\x90P5\x90a\x04\xF1\x82a\x04\xD0V[V[\x90` \x82\x82\x03\x12a\x05\x0CWa\x05\t\x91_\x01a\x04\xE4V[\x90V[a\x04\x0CV[_\x01\x90V[4a\x05DWa\x05.a\x05)6`\x04a\x04\xF3V[a\"\xC5V[a\x056a\x04\x02V[\x80a\x05@\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[_\x91\x03\x12a\x05SWV[a\x04\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x05\x99a\x05\xA2` \x93a\x05\xA7\x93a\x05\x90\x81a\x05XV[\x93\x84\x80\x93a\x05\\V[\x95\x86\x91\x01a\x05eV[a\x05pV[\x01\x90V[a\x05\xC0\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05zV[\x90V[4a\x05\xF3Wa\x05\xD36`\x04a\x05IV[a\x05\xEFa\x05\xDEa$)V[a\x05\xE6a\x04\x02V[\x91\x82\x91\x82a\x05\xABV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x06\x04\x81a\x05\xF8V[\x03a\x06\x0BWV[_\x80\xFD[\x90P5\x90a\x06\x1C\x82a\x05\xFBV[V[\x91\x90`@\x83\x82\x03\x12a\x06FW\x80a\x06:a\x06C\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\x06|Wa\x06xa\x06ga\x06a6`\x04a\x06\x1EV[\x90a$?V[a\x06oa\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[a\x06\x8A\x90a\x05\xF8V[\x90RV[\x91\x90a\x06\xA1\x90_` \x85\x01\x94\x01\x90a\x06\x81V[V[4a\x06\xD3Wa\x06\xB36`\x04a\x05IV[a\x06\xCFa\x06\xBEa$aV[a\x06\xC6a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x07\x07Wa\x06\xF1a\x06\xEB6`\x04a\x06\x1EV[\x90a$wV[a\x06\xF9a\x04\x02V[\x80a\x07\x03\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x90\x91``\x82\x84\x03\x12a\x07AWa\x07>a\x07'\x84_\x85\x01a\x04\xE4V[\x93a\x075\x81` \x86\x01a\x04\xE4V[\x93`@\x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\x07wWa\x07sa\x07ba\x07\\6`\x04a\x07\x0CV[\x91a%LV[a\x07ja\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x07\x88\x81a\x07|V[\x03a\x07\x8FWV[_\x80\xFD[\x90P5\x90a\x07\xA0\x82a\x07\x7FV[V[\x90` \x82\x82\x03\x12a\x07\xBBWa\x07\xB8\x91_\x01a\x07\x93V[\x90V[a\x04\x0CV[a\x07\xC9\x90a\x07|V[\x90RV[\x91\x90a\x07\xE0\x90_` \x85\x01\x94\x01\x90a\x07\xC0V[V[4a\x08\x12Wa\x08\x0Ea\x07\xFDa\x07\xF86`\x04a\x07\xA2V[a%\xC5V[a\x08\x05a\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[4a\x08FWa\x080a\x08*6`\x04a\x06\x1EV[\x90a%\xE7V[a\x088a\x04\x02V[\x80a\x08B\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x91\x90`@\x83\x82\x03\x12a\x08sW\x80a\x08ga\x08p\x92_\x86\x01a\x07\x93V[\x93` \x01a\x04\xE4V[\x90V[a\x04\x0CV[4a\x08\xA7Wa\x08\x91a\x08\x8B6`\x04a\x08KV[\x90a'8V[a\x08\x99a\x04\x02V[\x80a\x08\xA3\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x08\xDCWa\x08\xD8a\x08\xC7a\x08\xC26`\x04a\x04\xF3V[a(\x90V[a\x08\xCFa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[`\xFF\x16\x90V[a\x08\xF0\x90a\x08\xE1V[\x90RV[\x91\x90a\t\x07\x90_` \x85\x01\x94\x01\x90a\x08\xE7V[V[4a\t9Wa\t\x196`\x04a\x05IV[a\t5a\t$a)<V[a\t,a\x04\x02V[\x91\x82\x91\x82a\x08\xF4V[\x03\x90\xF3[a\x04\x08V[4a\tnWa\tN6`\x04a\x05IV[a\tja\tYa)RV[a\taa\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[4a\t\xA2Wa\t\x8Ca\t\x866`\x04a\x08KV[\x90a)fV[a\t\x94a\x04\x02V[\x80a\t\x9E\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\t\xD8Wa\t\xD4a\t\xC3a\t\xBD6`\x04a\x06\x1EV[\x90a)\xE3V[a\t\xCBa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\n\x0CWa\t\xF6a\t\xF06`\x04a\x06\x1EV[\x90a+\x01V[a\t\xFEa\x04\x02V[\x80a\n\x08\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x90V[a\n(a\n#a\n-\x92a\x04\xB9V[a\n\x11V[a\x04\xB9V[\x90V[a\n9\x90a\n\x14V[\x90V[a\nE\x90a\n0V[\x90V[\x90a\nR\x90a\n<V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\nra\nw\x91a\n^V[a\ncV[\x90V[a\n\x84\x90Ta\nfV[\x90V[`\xFF\x16\x90V[a\n\x99a\n\x9E\x91a\n^V[a\n\x87V[\x90V[a\n\xAB\x90Ta\n\x8DV[\x90V[a\n\xB9\x90`\ra\nHV[a\n\xC4_\x82\x01a\nzV[\x91a\n\xD1`\x01\x83\x01a\nzV[\x91a\n\xDE`\x02\x82\x01a\nzV[\x91a\n\xEB`\x03\x83\x01a\nzV[\x91a\n\xF8`\x04\x82\x01a\nzV[\x91a\x0B\x11`\x06a\x0B\n`\x05\x85\x01a\nzV[\x93\x01a\n\xA1V[\x90V[\x94\x92\x90\x97\x96\x95\x93\x91`\xE0\x86\x01\x98_\x87\x01a\x0B-\x91a\x06\x81V[` \x86\x01a\x0B:\x91a\x06\x81V[`@\x85\x01a\x0BG\x91a\x06\x81V[``\x84\x01a\x0BT\x91a\x06\x81V[`\x80\x83\x01a\x0Ba\x91a\x06\x81V[`\xA0\x82\x01a\x0Bn\x91a\x06\x81V[`\xC0\x01a\x0Bz\x91a\x04bV[V[4a\x0B\xB3Wa\x0B\xAFa\x0B\x97a\x0B\x926`\x04a\x04\xF3V[a\n\xAEV[\x93a\x0B\xA6\x97\x95\x97\x93\x91\x93a\x04\x02V[\x97\x88\x97\x88a\x0B\x14V[\x03\x90\xF3[a\x04\x08V[4a\x0B\xE8Wa\x0B\xC86`\x04a\x05IV[a\x0B\xE4a\x0B\xD3a+\rV[a\x0B\xDBa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x0C\x1DWa\x0B\xFD6`\x04a\x05IV[a\x0C\x19a\x0C\x08a+\xB7V[a\x0C\x10a\x04\x02V[\x91\x82\x91\x82a\x05\xABV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x0C9a\x0C4a\x0C>\x92a\x0C\"V[a\n\x11V[a\x05\xF8V[\x90V[a\x0CMbv\xA7\0a\x0C%V[\x90V[a\x0CXa\x0CAV[\x90V[4a\x0C\x8BWa\x0Ck6`\x04a\x05IV[a\x0C\x87a\x0Cva\x0CPV[a\x0C~a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[a\x0C\x99\x90a\x04\xC4V[\x90RV[\x91\x90a\x0C\xB0\x90_` \x85\x01\x94\x01\x90a\x0C\x90V[V[4a\x0C\xE2Wa\x0C\xDEa\x0C\xCDa\x0C\xC86`\x04a\x04\xF3V[a,DV[a\x0C\xD5a\x04\x02V[\x91\x82\x91\x82a\x0C\x9DV[\x03\x90\xF3[a\x04\x08V[\x90` \x82\x82\x03\x12a\r\0Wa\x0C\xFD\x91_\x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\r5Wa\r1a\r a\r\x1B6`\x04a\x0C\xE7V[a-\x0BV[a\r(a\x04\x02V[\x91\x82\x91\x82a\x0C\x9DV[\x03\x90\xF3[a\x04\x08V[4a\rhWa\rRa\rM6`\x04a\x04\xF3V[a-PV[a\rZa\x04\x02V[\x80a\rd\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x90\x91``\x82\x84\x03\x12a\r\xA2Wa\r\x9Fa\r\x88\x84_\x85\x01a\x04\xE4V[\x93a\r\x96\x81` \x86\x01a\x06\x0FV[\x93`@\x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\r\xD6Wa\r\xC0a\r\xBA6`\x04a\rmV[\x91a0\x9BV[a\r\xC8a\x04\x02V[\x80a\r\xD2\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x0E\x0BWa\r\xEB6`\x04a\x05IV[a\x0E\x07a\r\xF6a0\xA8V[a\r\xFEa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90a\x0E\x1A\x90a\n<V[_R` R`@_ \x90V[\x1C\x90V[a\x0E:\x90`\x08a\x0E?\x93\x02a\x0E&V[a\n\x87V[\x90V[\x90a\x0EM\x91Ta\x0E*V[\x90V[a\x0Ef\x90a\x0Ea`\x0F\x91_\x92a\x0E\x10V[a\x0EBV[\x90V[4a\x0E\x99Wa\x0E\x95a\x0E\x84a\x0E\x7F6`\x04a\x04\xF3V[a\x0EPV[a\x0E\x8Ca\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[c\xFF\xFF\xFF\xFF\x16\x90V[a\x0E\xB0\x90a\x0E\x9EV[\x90RV[\x91\x90a\x0E\xC7\x90_` \x85\x01\x94\x01\x90a\x0E\xA7V[V[4a\x0E\xF9Wa\x0E\xF5a\x0E\xE4a\x0E\xDF6`\x04a\x04\xF3V[a0\xC2V[a\x0E\xECa\x04\x02V[\x91\x82\x91\x82a\x0E\xB4V[\x03\x90\xF3[a\x04\x08V[4a\x0F.Wa\x0F*a\x0F\x19a\x0F\x146`\x04a\x04\xF3V[a0\xEDV[a\x0F!a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x0FO\x90a\x04\xC4V[\x90RV[\x90a\x0F`\x81` \x93a\x0FFV[\x01\x90V[` \x01\x90V[\x90a\x0F\x87a\x0F\x81a\x0Fz\x84a\x0F3V[\x80\x93a\x0F7V[\x92a\x0F@V[\x90_[\x81\x81\x10a\x0F\x97WPPP\x90V[\x90\x91\x92a\x0F\xB0a\x0F\xAA`\x01\x92\x86Qa\x0FSV[\x94a\x0FdV[\x91\x01\x91\x90\x91a\x0F\x8AV[a\x0F\xCF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0FjV[\x90V[4a\x10\x02Wa\x0F\xE26`\x04a\x05IV[a\x0F\xFEa\x0F\xEDa1\xBEV[a\x0F\xF5a\x04\x02V[\x91\x82\x91\x82a\x0F\xBAV[\x03\x90\xF3[a\x04\x08V[4a\x107Wa\x103a\x10\"a\x10\x1D6`\x04a\x04\xF3V[a1\xD4V[a\x10*a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[4a\x10kWa\x10Ua\x10O6`\x04a\x06\x1EV[\x90a39V[a\x10]a\x04\x02V[\x80a\x10g\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x10\xA0Wa\x10\x806`\x04a\x05IV[a\x10\x9Ca\x10\x8Ba3EV[a\x10\x93a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x10\xD5Wa\x10\xD1a\x10\xC0a\x10\xBB6`\x04a\x04\xF3V[a3\xBDV[a\x10\xC8a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x11\nWa\x10\xEA6`\x04a\x05IV[a\x11\x06a\x10\xF5a3\xD2V[a\x10\xFDa\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x11cWa\x11C6`\x04a\x05IV[a\x11_a\x11Na\x11\x0FV[a\x11Va\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x11\x96Wa\x11\x80a\x11{6`\x04a\x0C\xE7V[a5%V[a\x11\x88a\x04\x02V[\x80a\x11\x92\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[`\xFF`\xF8\x1B\x16\x90V[a\x11\xAD\x90a\x11\x9BV[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x11\xCD\x90a\x05\xF8V[\x90RV[\x90a\x11\xDE\x81` \x93a\x11\xC4V[\x01\x90V[` \x01\x90V[\x90a\x12\x05a\x11\xFFa\x11\xF8\x84a\x11\xB1V[\x80\x93a\x11\xB5V[\x92a\x11\xBEV[\x90_[\x81\x81\x10a\x12\x15WPPP\x90V[\x90\x91\x92a\x12.a\x12(`\x01\x92\x86Qa\x11\xD1V[\x94a\x11\xE2V[\x91\x01\x91\x90\x91a\x12\x08V[\x93\x95\x91\x94a\x12\x89a\x12~a\x12\x9D\x95a\x12pa\x12\x93\x95a\x12\xAA\x9C\x9Aa\x12c`\xE0\x8C\x01\x92_\x8D\x01\x90a\x11\xA4V[\x8A\x82\x03` \x8C\x01Ra\x05zV[\x90\x88\x82\x03`@\x8A\x01Ra\x05zV[\x97``\x87\x01\x90a\x06\x81V[`\x80\x85\x01\x90a\x0C\x90V[`\xA0\x83\x01\x90a\x07\xC0V[`\xC0\x81\x84\x03\x91\x01Ra\x11\xE8V[\x90V[4a\x12\xE4Wa\x12\xBD6`\x04a\x05IV[a\x12\xE0a\x12\xC8a5\xADV[\x93a\x12\xD7\x97\x95\x97\x93\x91\x93a\x04\x02V[\x97\x88\x97\x88a\x128V[\x03\x90\xF3[a\x04\x08V[\x7F\x84\xFEt\xC7\x1A(\xB6\x9A\xA9`Hl\xA0\xE8\xC1A\x8C\x86\xE9\xEA,\xD6\xB5\x84\x9B\x95\xE2\xC8\xF4\x07\xA6t\x90V[a\x13\x15a\x12\xE9V[\x90V[4a\x13HWa\x13(6`\x04a\x05IV[a\x13Da\x133a\x13\rV[a\x13;a\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[\x7F\x9B\x12\xE0\xC5p~II\x15\xE5\x8B\x05d\xF1\x8A\xAA\xD9\xB7J\xC6\x9B\xFC\x81Z\x1E\xDA\xDC\x8EK\xD02\xEB\x90V[a\x13ya\x13MV[\x90V[4a\x13\xACWa\x13\x8C6`\x04a\x05IV[a\x13\xA8a\x13\x97a\x13qV[a\x13\x9Fa\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[4a\x13\xE1Wa\x13\xDDa\x13\xCCa\x13\xC76`\x04a\x0C\xE7V[a67V[a\x13\xD4a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x13\xFDa\x13\xF8a\x14\x02\x92a\x13\xE6V[a\n\x11V[a\x05\xF8V[\x90V[a\x14\x1Ak\x03;.<\x9F\xD0\x80<\xE8\0\0\0a\x13\xE9V[\x90V[a\x14%a\x14\x05V[\x90V[4a\x14XWa\x1486`\x04a\x05IV[a\x14Ta\x14Ca\x14\x1DV[a\x14Ka\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x14\x8EWa\x14\x8Aa\x14ya\x14s6`\x04a\x08KV[\x90a6hV[a\x14\x81a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x14\xA7\x90a\x14\x93V[\x90RV[\x91\x90a\x14\xBE\x90_` \x85\x01\x94\x01\x90a\x14\x9EV[V[4a\x14\xF0Wa\x14\xD06`\x04a\x05IV[a\x14\xECa\x14\xDBa6\x96V[a\x14\xE3a\x04\x02V[\x91\x82\x91\x82a\x14\xABV[\x03\x90\xF3[a\x04\x08V[4a\x15%Wa\x15!a\x15\x10a\x15\x0B6`\x04a\x04\xF3V[a6\xAAV[a\x15\x18a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x15ZWa\x15:6`\x04a\x05IV[a\x15Va\x15Ea71V[a\x15Ma\x04\x02V[\x91\x82\x91\x82a\x05\xABV[\x03\x90\xF3[a\x04\x08V[4a\x15\x8FWa\x15\x8Ba\x15za\x15u6`\x04a\x04\xF3V[a7GV[a\x15\x82a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x15\xABa\x15\xA6a\x15\xB0\x92a\x15\x94V[a\n\x11V[a\x05\xF8V[\x90V[a\x15\xC8k\x02\xE8vi\xC3\x08sj\x04\0\0\0a\x15\x97V[\x90V[a\x15\xD3a\x15\xB3V[\x90V[4a\x16\x06Wa\x15\xE66`\x04a\x05IV[a\x16\x02a\x15\xF1a\x15\xCBV[a\x15\xF9a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90V[_\x1B\x90V[a\x16'a\x16\"a\x16,\x92a\x16\x0BV[a\x16\x0EV[a\x07|V[\x90V[a\x168_a\x16\x13V[\x90V[a\x16Ca\x16/V[\x90V[4a\x16vWa\x16V6`\x04a\x05IV[a\x16ra\x16aa\x16;V[a\x16ia\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x16\xA5\x81a\x16\x8FV[\x82\x10\x15a\x16\xBFWa\x16\xB7`\x01\x91a\x16\x93V[\x91\x02\x01\x90_\x90V[a\x16{V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\xDF\x90`\x08a\x16\xE4\x93\x02a\x0E&V[a\x16\xC4V[\x90V[\x90a\x16\xF2\x91Ta\x16\xCFV[\x90V[`\x0Ea\x17\0\x81a\x16\x8FV[\x82\x10\x15a\x17\x1DWa\x17\x1A\x91a\x17\x14\x91a\x16\x9CV[\x90a\x16\xE7V[\x90V[_\x80\xFD[4a\x17QWa\x17Ma\x17<a\x1776`\x04a\x0C\xE7V[a\x16\xF5V[a\x17Da\x04\x02V[\x91\x82\x91\x82a\x0C\x9DV[\x03\x90\xF3[a\x04\x08V[4a\x17\x87Wa\x17\x83a\x17ra\x17l6`\x04a\x06\x1EV[\x90a7vV[a\x17za\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[a\x17\x9C\x90`\x08a\x17\xA1\x93\x02a\x0E&V[a\ncV[\x90V[\x90a\x17\xAF\x91Ta\x17\x8CV[\x90V[a\x17\xBE`\x0C_\x90a\x17\xA4V[\x90V[4a\x17\xF1Wa\x17\xD16`\x04a\x05IV[a\x17\xEDa\x17\xDCa\x17\xB2V[a\x17\xE4a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x18'Wa\x18#a\x18\x12a\x18\x0C6`\x04a\x06\x1EV[\x90a7\x98V[a\x18\x1Aa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x18\\Wa\x18Xa\x18Ga\x18B6`\x04a\x04\xF3V[a7\xAEV[a\x18Oa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x18\x91Wa\x18q6`\x04a\x05IV[a\x18\x8Da\x18|a7\xC3V[a\x18\x84a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[a\x18\x9F\x81a\x08\xE1V[\x03a\x18\xA6WV[_\x80\xFD[\x90P5\x90a\x18\xB7\x82a\x18\x96V[V[\x90\x91`\xC0\x82\x84\x03\x12a\x19\x18Wa\x18\xD1\x83_\x84\x01a\x04\xE4V[\x92a\x18\xDF\x81` \x85\x01a\x06\x0FV[\x92a\x18\xED\x82`@\x83\x01a\x06\x0FV[\x92a\x19\x15a\x18\xFE\x84``\x85\x01a\x18\xAAV[\x93a\x19\x0C\x81`\x80\x86\x01a\x07\x93V[\x93`\xA0\x01a\x07\x93V[\x90V[a\x04\x0CV[4a\x19RWa\x19<a\x1906`\x04a\x18\xB9V[\x94\x93\x90\x93\x92\x91\x92a8CV[a\x19Da\x04\x02V[\x80a\x19N\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[a\x19`\x90a\x04]V[\x90RV[\x90`\xC0\x80a\x19\xE0\x93a\x19|_\x82\x01Q_\x86\x01\x90a\x11\xC4V[a\x19\x8E` \x82\x01Q` \x86\x01\x90a\x11\xC4V[a\x19\xA0`@\x82\x01Q`@\x86\x01\x90a\x11\xC4V[a\x19\xB2``\x82\x01Q``\x86\x01\x90a\x11\xC4V[a\x19\xC4`\x80\x82\x01Q`\x80\x86\x01\x90a\x11\xC4V[a\x19\xD6`\xA0\x82\x01Q`\xA0\x86\x01\x90a\x11\xC4V[\x01Q\x91\x01\x90a\x19WV[V[\x91\x90a\x19\xF5\x90_`\xE0\x85\x01\x94\x01\x90a\x19dV[V[4a\x1A'Wa\x1A#a\x1A\x12a\x1A\r6`\x04a\x04\xF3V[a9jV[a\x1A\x1Aa\x04\x02V[\x91\x82\x91\x82a\x19\xE2V[\x03\x90\xF3[a\x04\x08V[a\x1A5\x81a\x04]V[\x03a\x1A<WV[_\x80\xFD[\x90P5\x90a\x1AM\x82a\x1A,V[V[\x91\x90`@\x83\x82\x03\x12a\x1AwW\x80a\x1Aka\x1At\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x1A@V[\x90V[a\x04\x0CV[4a\x1A\xABWa\x1A\x95a\x1A\x8F6`\x04a\x1AOV[\x90a:}V[a\x1A\x9Da\x04\x02V[\x80a\x1A\xA7\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[`\xE0\x81\x83\x03\x12a\x1B\x1BWa\x1A\xC6\x82_\x83\x01a\x04\xE4V[\x92a\x1A\xD4\x83` \x84\x01a\x04\xE4V[\x92a\x1A\xE2\x81`@\x85\x01a\x06\x0FV[\x92a\x1A\xF0\x82``\x83\x01a\x06\x0FV[\x92a\x1B\x18a\x1B\x01\x84`\x80\x85\x01a\x18\xAAV[\x93a\x1B\x0F\x81`\xA0\x86\x01a\x07\x93V[\x93`\xC0\x01a\x07\x93V[\x90V[a\x04\x0CV[4a\x1BUWa\x1B?a\x1B36`\x04a\x1A\xB0V[\x95\x94\x90\x94\x93\x91\x93a;+V[a\x1BGa\x04\x02V[\x80a\x1BQ\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x1B\x89Wa\x1Bsa\x1Bm6`\x04a\x08KV[\x90a<IV[a\x1B{a\x04\x02V[\x80a\x1B\x85\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x91\x90`@\x83\x82\x03\x12a\x1B\xB6W\x80a\x1B\xAAa\x1B\xB3\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x04\xE4V[\x90V[a\x04\x0CV[4a\x1B\xECWa\x1B\xE8a\x1B\xD7a\x1B\xD16`\x04a\x1B\x8EV[\x90a<kV[a\x1B\xDFa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[a\x1B\xFA\x81a\x0E\x9EV[\x03a\x1C\x01WV[_\x80\xFD[\x90P5\x90a\x1C\x12\x82a\x1B\xF1V[V[\x91\x90`@\x83\x82\x03\x12a\x1C<W\x80a\x1C0a\x1C9\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x1C\x05V[\x90V[a\x04\x0CV[a\x1CJ\x90a\x14\x93V[\x90RV[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x1Cb\x90a\x1CNV[\x90RV[\x90` \x80a\x1C\x88\x93a\x1C~_\x82\x01Q_\x86\x01\x90a\x1CAV[\x01Q\x91\x01\x90a\x1CYV[V[\x91\x90a\x1C\x9D\x90_`@\x85\x01\x94\x01\x90a\x1CfV[V[4a\x1C\xD0Wa\x1C\xCCa\x1C\xBBa\x1C\xB56`\x04a\x1C\x14V[\x90a<\xD9V[a\x1C\xC3a\x04\x02V[\x91\x82\x91\x82a\x1C\x8AV[\x03\x90\xF3[a\x04\x08V[\x7F\xCC\xE2\x96\xB0@3*\x08\x0Em\xF15\x15\xA3\xEC(i\xE2\x1C\xD2\x0FsD\xAF\t\x87\xDD\xB98\xD8\xBD!\x90V[a\x1D\x01a\x1C\xD5V[\x90V[4a\x1D4Wa\x1D\x146`\x04a\x05IV[a\x1D0a\x1D\x1Fa\x1C\xF9V[a\x1D'a\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[_\x80\xFD[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x1Daa\x1Dg\x91a\x1CNV[\x91a\x1CNV[\x01\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1DxWV[a\x1DAV[\x90a\x1D\x90\x91a\x1D\x8Aa\x1D=V[Pa\x1DUV[\x90V[a\x1D\x9Fa\x1D\xA5\x91a\x1CNV[\x91a\x1CNV[\x90\x03\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1D\xB7WV[a\x1DAV[\x90a\x1D\xCF\x91a\x1D\xC9a\x1D=V[Pa\x1D\x93V[\x90V[_\x90V[a\x1D\xDEa\x1D\xD2V[P\x80a\x1D\xF9a\x1D\xF3c\x0C\xCC\xC6e`\xE2\x1Ba\x04\x10V[\x91a\x04\x10V[\x14\x80\x15a\x1E\x1DW[\x90\x81\x15a\x1E\rW[P\x90V[a\x1E\x17\x91Pa<\xEFV[_a\x1E\tV[P\x80a\x1E8a\x1E2c\xB2u*\xC9`\xE0\x1Ba\x04\x10V[\x91a\x04\x10V[\x14a\x1E\x01V[a\x1EW\x90a\x1ERa\x1EMa\x1C\xD5V[a=/V[a!\x18V[V[a\x1Ema\x1Eha\x1Er\x92a\x16\x0BV[a\n\x11V[a\x04\xB9V[\x90V[a\x1E~\x90a\x1EYV[\x90V[\x1B\x90V[\x91\x90`\x08a\x1E\xA0\x91\x02\x91a\x1E\x9A_\x19\x84a\x1E\x81V[\x92a\x1E\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1E\xBEa\x1E\xB9a\x1E\xC3\x92a\x05\xF8V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[\x91\x90a\x1E\xDFa\x1E\xDAa\x1E\xE7\x93a\x1E\xAAV[a\x1E\xC6V[\x90\x83Ta\x1E\x85V[\x90UV[_\x90V[a\x1F\x01\x91a\x1E\xFBa\x1E\xEBV[\x91a\x1E\xC9V[V[`\x06_\x91a\x1F\x13\x83\x80\x83\x01a\x1E\xEFV[a\x1F \x83`\x01\x83\x01a\x1E\xEFV[a\x1F-\x83`\x02\x83\x01a\x1E\xEFV[a\x1F:\x83`\x03\x83\x01a\x1E\xEFV[a\x1FG\x83`\x04\x83\x01a\x1E\xEFV[a\x1FT\x83`\x05\x83\x01a\x1E\xEFV[\x01UV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x1F}Wa\x1F{\x90a\x1F\x03V[V[a\x1FXV[\x90a\x1F\x8E`\xFF\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1F\xA1\x90a\x04]V[\x90V[\x90V[\x90a\x1F\xBCa\x1F\xB7a\x1F\xC3\x92a\x1F\x98V[a\x1F\xA4V[\x82Ta\x1F\x82V[\x90UV[a\x1F\xDBa\x1F\xD6a\x1F\xE0\x92a\x16\x0BV[a\n\x11V[a\x05\xF8V[\x90V[`\x01a\x1F\xEF\x91\x01a\x05\xF8V[\x90V[\x90V[a \ta \x04a \x0E\x92a\x1F\xF2V[a\n\x11V[a\x05\xF8V[\x90V[a  a &\x91\x93\x92\x93a\x05\xF8V[\x92a\x05\xF8V[\x82\x03\x91\x82\x11a 1WV[a\x1DAV[\x91\x90`\x08a V\x91\x02\x91a P`\x01\x80`\xA0\x1B\x03\x84a\x1E\x81V[\x92a\x1E\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a ya ta \x81\x93a\n<V[a `V[\x90\x83Ta 6V[\x90UV[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a \xB2\x81a \x9CV[\x82\x10\x15a \xCCWa \xC4`\x01\x91a \xA0V[\x91\x02\x01\x90_\x90V[a\x16{V[_\x90V[a \xE7\x91a \xE1a \xD1V[\x91a cV[V[a \xF2\x81a \x9CV[\x80\x15a!\x13W`\x01\x90\x03\x90a!\x10a!\n\x83\x83a \xA9V[\x90a \xD5V[UV[a \x88V[\x80a!3a!-a!(_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a\"\xA9Wa!Ua!Oa!J`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[a\"\x8AWa!n_a!i`\r\x84\x90a\nHV[a\x1FkV[a!\x83_a!~`\x0F\x84\x90a\x0E\x10V[a\x1F\xA7V[a!\x8C_a\x1F\xC7V[[\x80a!\xA9a!\xA3a!\x9E`\x0Ea\x16\x8FV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a\"\x84Wa!\xC4a!\xBE`\x0E\x83\x90a\x16\x9CV[\x90a\x16\xE7V[a!\xD6a!\xD0\x84a\x04\xC4V[\x91a\x04\xC4V[\x14a!\xE9Wa!\xE4\x90a\x1F\xE3V[a!\x8DV[a\"/\x90a\")a\"!a\"\x1B`\x0Ea\"\x15a\"\x05`\x0Ea\x16\x8FV[a\"\x0F`\x01a\x1F\xF5V[\x90a \x11V[\x90a\x16\x9CV[\x90a\x16\xE7V[\x91`\x0Ea\x16\x9CV[\x90a cV[a\"Aa\"<`\x0Ea \x85V[a \xE9V[[a\"l\x7F]\x9DP4el\xB3\xEB\xFB\x06U\x05|\xD7\xF9\xB4\x07z\x9BB\xFFB\xCE\"<\xBA\xC5\xBCXm!&\x91a\n<V[\x90a\"ua\x04\x02V[\x80a\"\x7F\x81a\x05\x11V[\x03\x90\xA2V[Pa\"BV[a\"\xA5\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\"\xC1`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[a\"\xCE\x90a\x1E>V[V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a#\tW[` \x83\x10\x14a#\x04WV[a\"\xD5V[\x91`\x7F\x16\x91a\"\xF9V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a#?a#8\x83a\"\xE9V[\x80\x94a#\x13V[\x91`\x01\x81\x16\x90\x81_\x14a#\x96WP`\x01\x14a#ZW[PPPV[a#g\x91\x92\x93\x94Pa#\x1CV[\x91_\x92[\x81\x84\x10a#~WPP\x01\x90_\x80\x80a#UV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a#kV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a#UV[\x90a#\xBB\x91a#%V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a#\xDC\x90a\x05pV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a#\xF6W`@RV[a#\xBEV[\x90a$\x1Ba$\x14\x92a$\x0Ba\x04\x02V[\x93\x84\x80\x92a#\xB1V[\x03\x83a#\xD2V[V[a$&\x90a#\xFBV[\x90V[a$1a\"\xD0V[Pa$<`\x03a$\x1DV[\x90V[a$\\\x91a$Ka\x1D\xD2V[Pa$Ta=CV[\x91\x90\x91a=PV[`\x01\x90V[a$ia\x1E\xEBV[Pa$t`\x02a\nzV[\x90V[\x80a$\x92a$\x8Ca$\x87_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a%0W\x81a$\xAAa$\xA4_a\x1F\xC7V[\x91a\x05\xF8V[\x14a%\x14Wa$\xBA3\x83\x90a=\x95V[a$\xC5\x81\x83\x90a>\xECV[3\x90a%\x0Fa$\xFDa$\xF7\x7F\xDE\"\xBA\xFF\x03\x8E:>\x08@|\xBD\xF6\x17\xDE\xEDt\xE8i\xA7\xBAQ}\xF6\x11\xE311\xC6\xE6\xEA\x04\x93a\n<V[\x93a\n<V[\x93a%\x06a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[_c\x1F* \x05`\xE0\x1B\x81R\x80a%,`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a%H`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x91a%v\x92a%Ya\x1D\xD2V[Pa%na%ea=CV[\x82\x90\x84\x91a?XV[\x91\x90\x91a?\xE4V[`\x01\x90V[_\x90V[a%\x88\x90a\x07|V[\x90V[\x90a%\x95\x90a%\x7FV[_R` R`@_ \x90V[\x90V[a%\xB0a%\xB5\x91a\n^V[a%\xA1V[\x90V[a%\xC2\x90Ta%\xA4V[\x90V[`\x01a%\xDEa%\xE4\x92a%\xD6a%{V[P`\x05a%\x8BV[\x01a%\xB8V[\x90V[\x80a&\x02a%\xFCa%\xF7_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a&\xF2W\x81a&\x1Aa&\x14_a\x1F\xC7V[\x91a\x05\xF8V[\x14a&\xD6Wa&*3\x83\x90a@\x81V[3a&=a&7\x83a\x04\xC4V[\x91a\x04\xC4V[\x03a&\x9DW[a&N\x81\x83\x90aA\xD9V[3\x90a&\x98a&\x86a&\x80\x7F\xB9\x07\x95\xA6fP\x15Y\x83\xE2B\xCA\xC3\xE1\xAC\x1AM\xC2o\x8E\xD2\x98\x7F<\xE4\x16\xA3N\0\x11\x1F\xD4\x93a\n<V[\x93a\n<V[\x93a&\x8Fa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[a&\xA8\x813\x90a<kV[a&\xBAa&\xB4_a\x1F\xC7V[\x91a\x05\xF8V[\x03a&\xC5W[a&CV[a&\xD1\x813\x84\x91a?XV[a&\xC0V[_c\x1F* \x05`\xE0\x1B\x81R\x80a&\xEE`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a'\n`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a')\x91a'$a'\x1F\x82a%\xC5V[a=/V[a'+V[V[\x90a'5\x91aB8V[PV[\x90a'B\x91a'\x0EV[V[\x90a'N\x90a\x05\xF8V[\x90RV[\x90a'\\\x90a\x04]V[\x90RV[\x90a'sa'la\x04\x02V[\x92\x83a#\xD2V[V[a'\x7F`\xE0a'`V[\x90V[\x90a(1a((`\x06a'\x93a'uV[\x94a'\xAAa'\xA2_\x83\x01a\nzV[_\x88\x01a'DV[a'\xC2a'\xB9`\x01\x83\x01a\nzV[` \x88\x01a'DV[a'\xDAa'\xD1`\x02\x83\x01a\nzV[`@\x88\x01a'DV[a'\xF2a'\xE9`\x03\x83\x01a\nzV[``\x88\x01a'DV[a(\na(\x01`\x04\x83\x01a\nzV[`\x80\x88\x01a'DV[a(\"a(\x19`\x05\x83\x01a\nzV[`\xA0\x88\x01a'DV[\x01a\n\xA1V[`\xC0\x84\x01a'RV[V[a(<\x90a'\x82V[\x90V[a(I\x90Qa\x05\xF8V[\x90V[\x90V[a(ca(^a(h\x92a(LV[a\n\x11V[a\x05\xF8V[\x90V[a(za(\x80\x91\x93\x92\x93a\x05\xF8V[\x92a\x05\xF8V[\x82\x01\x80\x92\x11a(\x8BWV[a\x1DAV[a(\xA7a(\xAC\x91a(\x9Fa\x1E\xEBV[P`\ra\nHV[a(3V[Ba(\xDFa(\xD9a(\xD4a(\xC2``\x86\x01a(?V[a(\xCEb\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a)\nW\x80a)\x01`\xA0a(\xFA` a)\x07\x95\x01a(?V[\x92\x01a(?V[\x90a \x11V[\x90V[` a)\x16\x91\x01a(?V[\x90V[_\x90V[\x90V[a)4a)/a)9\x92a)\x1DV[a\n\x11V[a\x08\xE1V[\x90V[a)Da)\x19V[Pa)O`\x12a) V[\x90V[a)Za%{V[Pa)caB\xE4V[\x90V[\x90\x80a)\x81a){a)va=CV[a\x04\xC4V[\x91a\x04\xC4V[\x03a)\x92Wa)\x8F\x91aC\x9EV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a)\xAA`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a)\xB8\x90a\n<V[_R` R`@_ \x90V[\x90V[a)\xDBa)\xD6a)\xE0\x92a\x1CNV[a\n\x11V[a\x05\xF8V[\x90V[a*\x1A\x91a*\x0Fa*\ta*\x04a*\x15\x94a)\xFCa\x1E\xEBV[P`\na)\xAEV[a)\xC4V[\x91aD\x7FV[\x90aEuV[a)\xC7V[\x90V[\x90a*7\x91a*2a*-a\x13MV[a=/V[a*9V[V[\x90\x81a*Ua*Oa*J_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a*\xE5W\x80a*ma*g_a\x1F\xC7V[\x91a\x05\xF8V[\x14a*\xC9Wa*\x84a*}a$aV[\x82\x90a(kV[a*\x9Da*\x97a*\x92a\x14\x05V[a\x05\xF8V[\x91a\x05\xF8V[\x11a*\xADWa*\xAB\x91a>\xECV[V[_c\x17~?\xC3`\xE0\x1B\x81R\x80a*\xC5`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a*\xE1`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a*\xFD`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a+\x0B\x91a*\x1DV[V[a+\x15a\x1E\xEBV[Pa+/a+!a\x14\x05V[a+)a$aV[\x90a \x11V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a+PWa+L` \x91a\x05pV[\x01\x90V[a#\xBEV[\x90a+ga+b\x83a+2V[a'`V[\x91\x82RV[_\x7Fmode=blocknumber&from=default\0\0\0\x91\x01RV[a+\x9D`\x1Da+UV[\x90a+\xAA` \x83\x01a+lV[V[a+\xB4a+\x93V[\x90V[a+\xBFa\"\xD0V[Pa+\xC8a6\x96V[a+\xE1a+\xDBa+\xD6aF\x9CV[a\x14\x93V[\x91a\x14\x93V[\x03a+\xF1Wa+\xEEa+\xACV[\x90V[_c\x01\xBF\xC1\xC5`\xE6\x1B\x81R\x80a,\t`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a,\x17\x90a\n<V[_R` R`@_ \x90V[a,/a,4\x91a\n^V[a\x16\xC4V[\x90V[a,A\x90Ta,#V[\x90V[a,[a,`\x91a,Sa \xD1V[P`\ta,\rV[a,7V[\x90V[` \x7Fout of bounds\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSyndicateTokenCrosschain: index _\x82\x01R\x01RV[a,\xBD`-`@\x92a\x05\\V[a,\xC6\x81a,cV[\x01\x90V[a,\xDF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra,\xB0V[\x90V[\x15a,\xE9WV[a,\xF1a\x04\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a-\x07`\x04\x82\x01a,\xCAV[\x03\x90\xFD[a-Ga-M\x91a-\x1Aa \xD1V[Pa-@\x81a-:a-4a-/`\x0Ea\x16\x8FV[a\x05\xF8V[\x91a\x05\xF8V[\x10a,\xE2V[`\x0Ea\x16\x9CV[\x90a\x16\xE7V[\x90V[a-a\x90a-\\a=CV[aF\xECV[V[\x90a-~\x92\x91a-ya-ta\x1C\xD5V[a=/V[a.\xE4V[V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a-\xB0W\x82a-\xA8\x91`\x01a-\xAE\x95\x01\x81Ua \xA9V[\x90a cV[V[a#\xBEV[\x91` a-\xD6\x92\x94\x93a-\xCF`@\x82\x01\x96_\x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[a-\xE2`\xE0a'`V[\x90V[\x90a-\xF1_\x19\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a.\x10a.\x0Ba.\x17\x92a\x1E\xAAV[a\x1E\xC6V[\x82Ta-\xE5V[\x90UV[a.%\x90Qa\x04]V[\x90V[\x90a.\xD0`\xC0`\x06a.\xD6\x94a.K_\x82\x01a.E_\x88\x01a(?V[\x90a-\xFBV[a.d`\x01\x82\x01a.^` \x88\x01a(?V[\x90a-\xFBV[a.}`\x02\x82\x01a.w`@\x88\x01a(?V[\x90a-\xFBV[a.\x96`\x03\x82\x01a.\x90``\x88\x01a(?V[\x90a-\xFBV[a.\xAF`\x04\x82\x01a.\xA9`\x80\x88\x01a(?V[\x90a-\xFBV[a.\xC8`\x05\x82\x01a.\xC2`\xA0\x88\x01a(?V[\x90a-\xFBV[\x01\x92\x01a.\x1BV[\x90a\x1F\xA7V[V[\x90a.\xE2\x91a.(V[V[\x80a.\xFFa.\xF9a.\xF4_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a0\x7FWa/!a/\x1Ba/\x16`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[a0\nW[\x81\x83BB_\x90_\x92`\x01\x94a/9a-\xD8V[\x96_\x88\x01\x90a/G\x91a'DV[` \x87\x01\x90a/U\x91a'DV[`@\x86\x01\x90a/c\x91a'DV[``\x85\x01\x90a/q\x91a'DV[a/z\x90a\x1F\xC7V[`\x80\x84\x01\x90a/\x88\x91a'DV[a/\x91\x90a\x1F\xC7V[`\xA0\x83\x01\x90a/\x9F\x91a'DV[`\xC0\x82\x01\x90a/\xAD\x91a'RV[`\r\x82a/\xB9\x91a\nHV[\x90a/\xC3\x91a.\xD8V[\x90\x7F\xAA\x80}\n\xBF0\xD9\x19h\xC7G\x8Cf\xB6\xD8%!\xA1\x06\xAF\x13\xED\xA06\xE2\x03m\xA9\xAF\x16\x89X\x91a/\xEF\x90a\n<V[\x92a/\xF8a\x04\x02V[\x91\x82\x91a0\x05\x91\x83a-\xB5V[\x03\x90\xA2V[a0\x1Ea0\x17`\x0Ea \x85V[\x82\x90a-\x80V[a04`\x01a0/`\x0F\x84\x90a\x0E\x10V[a\x1F\xA7V[\x80\x82\x90\x84a0b\x7F\xDB\x03\xF9}\xC5\x84\nq\xE6\x9B\xE7G\x0EGa\xAF\x10\xA1#ys\xE8\x1C\x12\xD0\xDC(\x13\x89Ze&\x92a\n<V[\x92a0wa0na\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2a/&V[_c\xD9.#=`\xE0\x1B\x81R\x80a0\x97`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a0\xA6\x92\x91a-cV[V[a0\xB0a\x1E\xEBV[Pa0\xBB`\x0Ea\x16\x8FV[\x90V[_\x90V[a0\xD4\x90a0\xCEa0\xBEV[PaGwV[\x90V[\x90a0\xE1\x90a\n<V[_R` R`@_ \x90V[a1\x03a1\x08\x91a0\xFCa\x1E\xEBV[P_a0\xD7V[a\nzV[\x90V[``\x90V[` \x91\x81R\x01\x90V[a1#\x90Ta,#V[\x90V[`\x01\x01\x90V[\x90a1Ia1Ca1<\x84a\x16\x8FV[\x80\x93a1\x10V[\x92a\x16\x93V[\x90_[\x81\x81\x10a1YWPPP\x90V[\x90\x91\x92a1ya1s`\x01\x92a1n\x87a1\x19V[a\x0FSV[\x94a1&V[\x91\x01\x91\x90\x91a1LV[\x90a1\x8D\x91a1,V[\x90V[\x90a1\xB0a1\xA9\x92a1\xA0a\x04\x02V[\x93\x84\x80\x92a1\x83V[\x03\x83a#\xD2V[V[a1\xBB\x90a1\x90V[\x90V[a1\xC6a1\x0BV[Pa1\xD1`\x0Ea1\xB2V[\x90V[a1\xDCa\x1D\xD2V[Pa2\x04a1\xFFa1\xF7a1\xF2`\r\x85\x90a\nHV[a(3V[\x92`\x0Fa\x0E\x10V[a\n\xA1V[\x90\x81a2\x0FW[P\x90V[a2\x1C\x91P`\xC0\x01a.\x1BV[_a2\x0BV[\x90a2<\x91a27a22a\x12\xE9V[a=/V[a2>V[V[\x80a2Ya2Sa2N_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a3\x1DW\x81a2qa2k_a\x1F\xC7V[\x91a\x05\xF8V[\x14a3\x01Wa2\x87a2\x81a3\xD2V[\x15a\x04]V[a2\xE5Wa2\x96\x81\x83\x90aA\xD9V[3\x90a2\xE0a2\xCEa2\xC8\x7F\xBE\xF4\xF8\x1C\x18\x14\xC6A\xED\xE8^\xBA\xAC\xF1\x9D\x04\x8B,[U\x98\n\xDF\xA6\xEF\x0F\x95le\x135\xA2\x93a\n<V[\x93a\n<V[\x93a2\xD7a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[_c\xB8\xB5\xCA-`\xE0\x1B\x81R\x80a2\xFD`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a3\x19`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a35`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a3C\x91a2\"V[V[a3Ma\x1E\xEBV[Pa3X`\x0Ca\nzV[a3ja3d_a\x1F\xC7V[\x91a\x05\xF8V[\x14\x80\x15a3\x99W[a3\x8DWa3\x8Aa3\x83`\x0Ca\nzV[B\x90a \x11V[\x90V[a3\x96_a\x1F\xC7V[\x90V[PBa3\xB6a3\xB0a3\xAB`\x0Ca\nzV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a3rV[a3\xCF\x90a3\xC9a\x1E\xEBV[PaG\xA6V[\x90V[a3\xDAa\x1D\xD2V[Pa3\xE5`\x0Ca\nzV[a3\xF7a3\xF1_a\x1F\xC7V[\x91a\x05\xF8V[\x14\x15\x80a4\x02W[\x90V[PBa4\x1Fa4\x19a4\x14`\x0Ca\nzV[a\x05\xF8V[\x91a\x05\xF8V[\x10a3\xFFV[a4>\x90a49a44a\x16/V[a=/V[a4@V[V[\x80a4Sa4MBa\x05\xF8V[\x91a\x05\xF8V[\x11\x15a5\tW\x80a4\x8Ca4\x86\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x05\xF8V[\x91a\x05\xF8V[\x11a4\xEDWa4\x9B`\x0Ca\nzV[a4\xA6\x82`\x0Ca-\xFBV[\x903\x90a4\xD3\x7F\xDDh\x96\xDC\xF1\xD4\xB3\x11\xCC\xA8}\xD1\x9B\xBB\xA2\xEA\x9C\xE2\xF8g\xC1V\x88x\xA0C\x8Af\xA1\xAF\xEE\xEC\x92a\n<V[\x92a4\xE8a4\xDFa\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2V[_c\xEFi\xAFe`\xE0\x1B\x81R\x80a5\x05`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xA5e\x83S`\xE0\x1B\x81R\x80a5!`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[a5.\x90a4%V[V[_\x90V[``\x90V[a5B\x90a\n0V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a5]W` \x80\x91\x02\x01\x90V[a#\xBEV[\x90a5ta5o\x83a5EV[a'`V[\x91\x82RV[6\x907V[\x90a5\xA3a5\x8B\x83a5bV[\x92` \x80a5\x99\x86\x93a5EV[\x92\x01\x91\x03\x90a5yV[V[`\x0F`\xF8\x1B\x90V[a5\xB5a50V[Pa5\xBEa\"\xD0V[Pa5\xC7a\"\xD0V[Pa5\xD0a\x1E\xEBV[Pa5\xD9a \xD1V[Pa5\xE2a%{V[Pa5\xEBa54V[Pa5\xF4aG\xBEV[\x90a5\xFDaG\xFEV[\x90F\x90a6\t0a59V[\x90a6\x13_a\x16\x13V[\x90a6%a6 _a\x1F\xC7V[a5~V[\x90a6.a5\xA5V[\x96\x95\x94\x93\x92\x91\x90V[a6`a6e\x91a6Fa\x1E\xEBV[Pa6Za6T`\x0Ba)\xC4V[\x91aD\x7FV[\x90aEuV[a)\xC7V[\x90V[a6\x8F\x91_a6\x84a6\x8A\x93a6|a\x1D\xD2V[P`\x05a%\x8BV[\x01a\x0E\x10V[a\n\xA1V[\x90V[_\x90V[a6\x9Ea6\x92V[Pa6\xA7aF\x9CV[\x90V[a6\xC1a6\xC6\x91a6\xB9a\x1E\xEBV[P`\ra\nHV[a(3V[Ba6\xF9a6\xF3a6\xEEa6\xDC`@\x86\x01a(?V[a6\xE8b\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a7#W\x80a7\x1A`\x80a7\x13_a7 \x95\x01a(?V[\x92\x01a(?V[\x90a \x11V[\x90V[_a7.\x91\x01a(?V[\x90V[a79a\"\xD0V[Pa7D`\x04a$\x1DV[\x90V[a7na7ia7da7s\x93a7\\a\x1E\xEBV[P`\na)\xAEV[a)\xC4V[aH>V[a)\xC7V[\x90V[a7\x93\x91a7\x82a\x1D\xD2V[Pa7\x8Ba=CV[\x91\x90\x91a?\xE4V[`\x01\x90V[\x90a7\xAB\x91a7\xA5a\x1E\xEBV[Pa)\xE3V[\x90V[a7\xC0\x90a7\xBAa\x1E\xEBV[Pa7GV[\x90V[a7\xCBa\x1E\xEBV[Pa7\xD4a$aV[\x90V[\x7F\xE4\x83)\x05{\xFD\x03\xD5^I\xB5G\x13.9\xCF\xFD\x9C\x18 \xAD{\x9DLS\x07i\x14%\xD1Z\xDF\x90V[a80a87\x94a8&``\x94\x98\x97\x95a8\x1C`\x80\x86\x01\x9A_\x87\x01\x90a\x07\xC0V[` \x85\x01\x90a\x0C\x90V[`@\x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[` \x01\x90V[Q\x90V[\x93\x95\x94\x90\x92\x91\x95Ba8]a8W\x89a\x05\xF8V[\x91a\x05\xF8V[\x11a8\xD6W\x91a8\xC8\x91a8\xCF\x93a8\xBFa8\xD4\x98\x99a8\xA7a8~a7\xD7V[a8\x98\x8B\x93\x8Ba8\x8Ca\x04\x02V[\x95\x86\x94` \x86\x01a7\xFBV[` \x82\x01\x81\x03\x82R\x03\x82a#\xD2V[a8\xB9a8\xB3\x82a8?V[\x91a89V[ aH\xB3V[\x92\x90\x91\x92aH\xD0V[\x91\x82aI\x1AV[aF\xECV[V[a8\xF1\x87_\x91\x82\x91c#A\xD7\x87`\xE1\x1B\x83R`\x04\x83\x01a\x06\x8EV[\x03\x90\xFD[_\x90V[_\x90V[a9\x05a'uV[\x90` \x80\x80\x80\x80\x80\x80\x88a9\x17a8\xF5V[\x81R\x01a9\"a8\xF5V[\x81R\x01a9-a8\xF5V[\x81R\x01a98a8\xF5V[\x81R\x01a9Ca8\xF5V[\x81R\x01a9Na8\xF5V[\x81R\x01a9Ya8\xF9V[\x81RPPV[a9ga8\xFDV[\x90V[a9\x81a9\x86\x91a9ya9_V[P`\ra\nHV[a(3V[\x90V[\x90a9\xA3\x91a9\x9Ea9\x99a\x1C\xD5V[a=/V[a9\xA5V[V[\x80a9\xC0a9\xBAa9\xB5_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a:aWa9\xE2a9\xDCa9\xD7`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[a:BWa9\xFE\x82`\x06a9\xF8`\r\x85\x90a\nHV[\x01a\x1F\xA7V[a:=a:+\x7F\x9C\x86h\xDB2HE\x06]+\x9A*\x18;\xD3\x14\x1Fc\x01\x8FT\x82\x82\xDA\xF1\x8D\xA4\x9C\xCB\xF8\x8C3\x92a\n<V[\x92a:4a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xA2V[a:]\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a:y`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a:\x87\x91a9\x89V[V[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x90V[\x91\x94a:\xF5a:\xFF\x92\x98\x97\x95a:\xEB`\xA0\x96a:\xE1a;\x06\x9Aa:\xD7`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x07\xC0V[` \x89\x01\x90a\x0C\x90V[`@\x87\x01\x90a\x0C\x90V[``\x85\x01\x90a\x06\x81V[`\x80\x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[\x91` a;)\x92\x94\x93a;\"`@\x82\x01\x96_\x83\x01\x90a\x0C\x90V[\x01\x90a\x0C\x90V[V[\x96\x95\x91\x93\x92\x94\x90\x94Ba;Fa;@\x83a\x05\xF8V[\x91a\x05\xF8V[\x11a<\0W\x90a;\xAFa;\xB8\x94\x93\x92a;\x97a;`a:\x89V[a;\x88\x8C\x80\x94\x8C\x91a;r\x8D\x91aI]V[\x91\x92a;|a\x04\x02V[\x97\x88\x96` \x88\x01a:\xADV[` \x82\x01\x81\x03\x82R\x03\x82a#\xD2V[a;\xA9a;\xA3\x82a8?V[\x91a89V[ aH\xB3V[\x92\x90\x91\x92aH\xD0V[\x80a;\xCBa;\xC5\x87a\x04\xC4V[\x91a\x04\xC4V[\x03a;\xE0WPa;\xDE\x92\x93\x91\x90\x91a=PV[V[\x84\x90a;\xFC_\x92\x83\x92c%\xC0\x07#`\xE1\x1B\x84R`\x04\x84\x01a;\x08V[\x03\x90\xFD[a<\x1B\x90_\x91\x82\x91c1<\x89\x81`\xE1\x1B\x83R`\x04\x83\x01a\x06\x8EV[\x03\x90\xFD[\x90a<:\x91a<5a<0\x82a%\xC5V[a=/V[a<<V[V[\x90a<F\x91aC\x9EV[PV[\x90a<S\x91a<\x1FV[V[\x90a<_\x90a\n<V[_R` R`@_ \x90V[a<\x90\x91a<\x86a<\x8B\x92a<~a\x1E\xEBV[P`\x01a<UV[a0\xD7V[a\nzV[\x90V[a<\x9D`@a'`V[\x90V[_\x90V[_\x90V[a<\xB0a<\x93V[\x90` \x80\x83a<\xBDa<\xA0V[\x81R\x01a<\xC8a<\xA4V[\x81RPPV[a<\xD6a<\xA8V[\x90V[\x90a<\xEC\x91a<\xE6a<\xCEV[PaI\x90V[\x90V[a<\xF7a\x1D\xD2V[P\x80a=\x12a=\x0Ccye\xDB\x0B`\xE0\x1Ba\x04\x10V[\x91a\x04\x10V[\x14\x90\x81\x15a=\x1FW[P\x90V[a=)\x91PaI\xB8V[_a=\x1BV[a=A\x90a=;a=CV[\x90aJ\x01V[V[a=Ka \xD1V[P3\x90V[\x91a=^\x92\x91`\x01\x92aJ<V[V[\x90V[`@\x90a=\x8Ca=\x93\x94\x96\x95\x93\x96a=\x82``\x84\x01\x98_\x85\x01\x90a\x0C\x90V[` \x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[\x90a=\xAAa=\xA5`\r\x84\x90a\nHV[a=`V[\x91a=\xC8a=\xC2a=\xBD`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[\x80\x15a>\xD1W[a>\xB2WBa>\x06a>\0a=\xFBa=\xE9`\x02\x88\x01a\nzV[a=\xF5b\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a>\x8BW[a>-a>\x1B_\x85\x01a\nzV[a>'`\x04\x86\x01a\nzV[\x90a \x11V[\x90\x82a>Aa>;\x84a\x05\xF8V[\x91a\x05\xF8V[\x11a>kWPP\x90a>c`\x04a>i\x93\x92\x01\x91a>^\x83a\nzV[a(kV[\x90a-\xFBV[V[a>\x87\x83\x92_\x93\x84\x93c@\xED6{`\xE0\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[a>\xA0a>\x97_a\x1F\xC7V[`\x04\x85\x01a-\xFBV[a>\xADB`\x02\x85\x01a-\xFBV[a>\rV[a>\xCD\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[Pa>\xE7a>\xE1`\x06\x85\x01a\n\xA1V[\x15a\x04]V[a=\xCFV[\x80a?\x07a?\x01a>\xFC_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a?#Wa?!\x91a?\x19_a\x1EuV[\x91\x90\x91aKKV[V[a?Fa?/_a\x1EuV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[\x90a?U\x91\x03a\x05\xF8V[\x90V[\x92\x91\x92a?f\x81\x83\x90a<kV[\x90\x81a?{a?u_\x19a\x05\xF8V[\x91a\x05\xF8V[\x10a?\x88W[PPP\x90PV[\x81a?\x9Ba?\x95\x87a\x05\xF8V[\x91a\x05\xF8V[\x10a?\xC1Wa?\xB8\x93\x94a?\xB0\x91\x93\x92a?JV[\x90_\x92aJ<V[\x80_\x80\x80a?\x81V[Pa?\xE0\x84\x92\x91\x92_\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[\x91\x82a@\0a?\xFAa?\xF5_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a@ZW\x81a@ a@\x1Aa@\x15_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a@3Wa@1\x92\x91\x90\x91aKKV[V[a@Va@?_a\x1EuV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[a@}a@f_a\x1EuV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[\x90a@\x96a@\x91`\r\x84\x90a\nHV[a=`V[\x91a@\xB4a@\xAEa@\xA9`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[\x80\x15aA\xBEW[aA\x9FWBa@\xF2a@\xECa@\xE7a@\xD5`\x03\x88\x01a\nzV[a@\xE1b\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15aAxW[aA\x1AaA\x08`\x01\x85\x01a\nzV[aA\x14`\x05\x86\x01a\nzV[\x90a \x11V[\x90\x82aA.aA(\x84a\x05\xF8V[\x91a\x05\xF8V[\x11aAXWPP\x90aAP`\x05aAV\x93\x92\x01\x91aAK\x83a\nzV[a(kV[\x90a-\xFBV[V[aAt\x83\x92_\x93\x84\x93cr\xFFK\xD1`\xE1\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[aA\x8DaA\x84_a\x1F\xC7V[`\x05\x85\x01a-\xFBV[aA\x9AB`\x03\x85\x01a-\xFBV[a@\xF9V[aA\xBA\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[PaA\xD4aA\xCE`\x06\x85\x01a\n\xA1V[\x15a\x04]V[a@\xBBV[\x90\x81aA\xF5aA\xEFaA\xEA_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aB\x11WaB\x0F\x91\x90aB\x08_a\x1EuV[\x90\x91aKKV[V[aB4aB\x1D_a\x1EuV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[aB@a\x1D\xD2V[PaBUaBO\x82\x84\x90a6hV[\x15a\x04]V[_\x14aB\xDEWaB}`\x01aBx_aBp`\x05\x86\x90a%\x8BV[\x01\x85\x90a\x0E\x10V[a\x1F\xA7V[\x90aB\x86a=CV[\x90aB\xC3aB\xBDaB\xB7\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a%\x7FV[\x92a\n<V[\x92a\n<V[\x92aB\xCCa\x04\x02V[\x80aB\xD6\x81a\x05\x11V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aB\xECa%{V[PaB\xF60a59V[aC(aC\"\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\xC4V[\x91a\x04\xC4V[\x14\x80aCdW[_\x14aCYW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[aCaaLfV[\x90V[PFaC\x98aC\x92\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x05\xF8V[\x91a\x05\xF8V[\x14aC/V[aC\xA6a\x1D\xD2V[PaC\xB2\x81\x83\x90a6hV[_\x14aD:WaC\xD9_aC\xD4_aC\xCC`\x05\x86\x90a%\x8BV[\x01\x85\x90a\x0E\x10V[a\x1F\xA7V[\x90aC\xE2a=CV[\x90aD\x1FaD\x19aD\x13\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a%\x7FV[\x92a\n<V[\x92a\n<V[\x92aD(a\x04\x02V[\x80aD2\x81a\x05\x11V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aDTaDOaDY\x92a\x14\x93V[a\n\x11V[a\x05\xF8V[\x90V[\x91` aD}\x92\x94\x93aDv`@\x82\x01\x96_\x83\x01\x90a\x06\x81V[\x01\x90a\x14\x9EV[V[aD\x87a6\x92V[PaD\x90a6\x96V[\x81aD\xA3aD\x9D\x83aD@V[\x91a\x05\xF8V[\x10\x15aD\xB6WPaD\xB3\x90aMoV[\x90V[\x90aD\xD1_\x92\x83\x92cvi\xFC\x0F`\xE1\x1B\x84R`\x04\x84\x01aD\\V[\x03\x90\xFD[T\x90V[\x90V[aD\xF0aD\xEBaD\xF5\x92aD\xD9V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[aE\x12aE\x17\x91a\n^V[aD\xFBV[\x90V[aE$\x90TaE\x06V[\x90V[`0\x1C\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[aEDaEI\x91aE'V[aE-V[\x90V[aEV\x90TaE8V[\x90V[aEmaEhaEr\x92a\x16\x0BV[a\n\x11V[a\x1CNV[\x90V[\x90aE\xC9\x90aE\x82a\x1D=V[PaE\x8E_\x84\x01aD\xD5V[aE\x97_a\x1F\xC7V[\x90\x80\x80aE\xADaE\xA7`\x05aD\xDCV[\x91a\x05\xF8V[\x11aF*W[P\x90aE\xC4_\x86\x01\x93\x91\x92\x93aD\xF8V[aS\xBEV[\x80aE\xDCaE\xD6_a\x1F\xC7V[\x91a\x05\xF8V[\x14_\x14aE\xF2WPPaE\xEE_aEYV[[\x90V[aF\x1F_\x91aF\x1AaF\x14\x84aF%\x96\x01\x92aF\x0E`\x01a\x1F\xF5V[\x90a \x11V[\x91aD\xF8V[aS\xB4V[\x01aELV[aE\xEFV[\x80aF8aF>\x92\x91aPIV[\x90a \x11V[\x90\x83aFpaFjaFe_aF_\x81\x8C\x01aFZ\x89\x91aD\xF8V[aS\xB4V[\x01aE\x1AV[a\x14\x93V[\x91a\x14\x93V[\x10_\x14aF\x81WP\x90[\x90_aE\xB3V[\x91PaF\x97\x90aF\x91`\x01a\x1F\xF5V[\x90a(kV[aFzV[aF\xA4a6\x92V[PaF\xAECaMoV[\x90V[\x90aF\xC2`\x01\x80`\xA0\x1B\x03\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90aF\xE1aF\xDCaF\xE8\x92a\n<V[a `V[\x82TaF\xB1V[\x90UV[\x90aGu\x91aGoaF\xFD\x82a,DV[aG\x12\x84aG\r`\t\x86\x90a,\rV[aF\xCCV[\x82\x81\x85\x90aGRaGLaGF\x7F14\xE8\xA2\xE6\xD9~\x92\x9A~T\x01\x1E\xA5H]}\x19m\xD5\xF0\xBAMN\xF9X\x03\xE8\xE3\xFC%\x7F\x95a\n<V[\x92a\n<V[\x92a\n<V[\x92aG[a\x04\x02V[\x80aGe\x81a\x05\x11V[\x03\x90\xA4\x92\x91aTMV[\x91aTeV[V[aG\x9EaG\x99aG\x94aG\xA3\x93aG\x8Ca0\xBEV[P`\na)\xAEV[a)\xC4V[aV\x13V[aV\x92V[\x90V[aG\xB8\x90aG\xB2a\x1E\xEBV[PaV\xE3V[\x90V[\x90V[aG\xC6a\"\xD0V[PaG\xFB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aG\xF5`\x06aG\xBBV[\x90aW\xFEV[\x90V[aH\x06a\"\xD0V[PaH;\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aH5`\x07aG\xBBV[\x90aW\xFEV[\x90V[aHFa\x1D=V[PaHR_\x82\x01aD\xD5V[\x80aHeaH__a\x1F\xC7V[\x91a\x05\xF8V[\x14_\x14aH{WPPaHw_aEYV[[\x90V[aH\xA8_\x91aH\xA3aH\x9D\x84aH\xAE\x96\x01\x92aH\x97`\x01a\x1F\xF5V[\x90a \x11V[\x91aD\xF8V[aS\xB4V[\x01aELV[aHxV[aH\xCD\x90aH\xBFa%{V[PaH\xC8aB\xE4V[aXLV[\x90V[\x92aH\xEB\x92aH\xF4\x94aH\xE1a \xD1V[P\x92\x90\x91\x92aY\x12V[\x90\x92\x91\x92aZ=V[\x90V[\x91` aI\x18\x92\x94\x93aI\x11`@\x82\x01\x96_\x83\x01\x90a\x0C\x90V[\x01\x90a\x06\x81V[V[aI#\x81aI]V[\x91aI6aI0\x84a\x05\xF8V[\x91a\x05\xF8V[\x03aI?WPPV[aIY_\x92\x83\x92c\x01\xD4\xB6#`\xE6\x1B\x84R`\x04\x84\x01aH\xF7V[\x03\x90\xFD[aIq\x90aIia\x1E\xEBV[P`\x08a0\xD7V[aI\x8DaI}\x82a\nzV[\x91aI\x87\x83a\x1F\xE3V[\x90a-\xFBV[\x90V[\x90aI\xB0aI\xABaI\xB5\x93aI\xA3a<\xCEV[P`\na)\xAEV[a)\xC4V[a[\x9FV[\x90V[aI\xC0a\x1D\xD2V[PaI\xDAaI\xD4c\x01\xFF\xC9\xA7`\xE0\x1Ba\x04\x10V[\x91a\x04\x10V[\x14\x90V[\x91` aI\xFF\x92\x94\x93aI\xF8`@\x82\x01\x96_\x83\x01\x90a\x0C\x90V[\x01\x90a\x07\xC0V[V[\x90aJ\x16aJ\x10\x83\x83\x90a6hV[\x15a\x04]V[aJ\x1EWPPV[aJ8_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01aI\xDEV[\x03\x90\xFD[\x90\x92\x81aJYaJSaJN_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aK$W\x83aJyaJsaJn_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aJ\xFDWaJ\x9D\x83aJ\x98aJ\x91`\x01\x86\x90a<UV[\x87\x90a0\xD7V[a-\xFBV[aJ\xA7W[PPPV[\x91\x90\x91aJ\xF2aJ\xE0aJ\xDA\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\n<V[\x93a\n<V[\x93aJ\xE9a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3_\x80\x80aJ\xA2V[aK aK\t_a\x1EuV[_\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[aKGaK0_a\x1EuV[_\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[\x91\x82aKgaKaaK\\_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14\x15\x80aK\xD2W[aK\x82W[aK\x80\x92\x91\x90\x91a[\xC0V[V[aK\x8Aa3\xD2V[\x80aK\xB1W[\x15aKtW_c6\xE2x\xFD`\xE2\x1B\x81R\x80aK\xAD`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[PaK\xCDaK\xC7aK\xC0a\x12\xE9V[3\x90a6hV[\x15a\x04]V[aK\x90V[P\x81aK\xEEaK\xE8aK\xE3_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14\x15aKoV[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[\x90\x95\x94\x92aLd\x94aLSaL]\x92aLI`\x80\x96aL?`\xA0\x88\x01\x9C_\x89\x01\x90a\x07\xC0V[` \x87\x01\x90a\x07\xC0V[`@\x85\x01\x90a\x07\xC0V[``\x83\x01\x90a\x06\x81V[\x01\x90a\x0C\x90V[V[aLna%{V[PaLwaK\xF5V[aL\xEE\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91aL\xDF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0FaL\xCA0a59V[\x91aL\xD3a\x04\x02V[\x96\x87\x95` \x87\x01aL\x19V[` \x82\x01\x81\x03\x82R\x03\x82a#\xD2V[aM\0aL\xFA\x82a8?V[\x91a89V[ \x90V[\x90V[aM\x1BaM\x16aM \x92aM\x04V[a\n\x11V[a\x08\xE1V[\x90V[aM,\x90aM\x07V[\x90RV[\x91` aMQ\x92\x94\x93aMJ`@\x82\x01\x96_\x83\x01\x90aM#V[\x01\x90a\x06\x81V[V[aMgaMbaMl\x92a\x05\xF8V[a\n\x11V[a\x14\x93V[\x90V[aMwa6\x92V[P\x80aM\x91aM\x8Be\xFF\xFF\xFF\xFF\xFF\xFFaD@V[\x91a\x05\xF8V[\x11aM\xA2WaM\x9F\x90aMSV[\x90V[`0aM\xBE_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01aM0V[\x03\x90\xFD[\x90V[aM\xD9aM\xD4aM\xDE\x92aM\xC2V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aM\xF8aM\xF3aM\xFD\x92aM\xE1V[a\n\x11V[a\x08\xE1V[\x90V[aN\x1F\x90aN\x19aN\x13aN$\x94a\x08\xE1V[\x91a\x05\xF8V[\x90a\x0E&V[a\x05\xF8V[\x90V[\x90V[aN>aN9aNC\x92aN'V[a\n\x11V[a\x08\xE1V[\x90V[aNe\x90aN_aNYaNj\x94a\x08\xE1V[\x91a\x05\xF8V[\x90a\x1E\x81V[a\x05\xF8V[\x90V[\x90V[aN\x84aN\x7FaN\x89\x92aNmV[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aN\xA3aN\x9EaN\xA8\x92aN\x8CV[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aN\xC2aN\xBDaN\xC7\x92aN\xABV[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aN\xE1aN\xDCaN\xE6\x92aN\xCAV[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aO\0aN\xFBaO\x05\x92aN\xE9V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aO\x1FaO\x1AaO$\x92aO\x08V[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aO>aO9aOC\x92aO'V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aO]aOXaOb\x92aOFV[a\n\x11V[a\x08\xE1V[\x90V[aOyaOtaO~\x92aN\xCAV[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aO\x98aO\x93aO\x9D\x92aO\x81V[a\n\x11V[a\x08\xE1V[\x90V[aO\xB4aO\xAFaO\xB9\x92aOFV[a\n\x11V[a\x05\xF8V[\x90V[aO\xD0aO\xCBaO\xD5\x92a\x1F\xF2V[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aO\xEFaO\xEAaO\xF4\x92aO\xD8V[a\n\x11V[a\x05\xF8V[\x90V[\x90aP\x02\x91\x02a\x05\xF8V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[aP%aP+\x91a\x05\xF8V[\x91a\x05\xF8V[\x90\x81\x15aP6W\x04\x90V[aP\x05V[\x90aPF\x91\x01a\x05\xF8V[\x90V[aPQa\x1E\xEBV[P\x80aPfaP``\x01a\x1F\xF5V[\x91a\x05\xF8V[\x11\x15aS\xB1W\x80aR{aRXaRHaR8aR(aR\x18aR\x08aQ\xF8aQ\xE8aQ\xD8aQ\xC8\x8BaQ\xC2aQ\xBBaR\x81\x9FaQ\x9BaQ\x8BaQ\xAB\x92aP\xAD`\x01a\x1F\xF5V[\x90\x80aP\xC5aP\xBF`\x01`\x80\x1BaM\xC5V[\x91a\x05\xF8V[\x10\x15aS\x83W[\x80aP\xE8aP\xE2h\x01\0\0\0\0\0\0\0\0aNpV[\x91a\x05\xF8V[\x10\x15aSUW[\x80aQ\x07aQ\x01d\x01\0\0\0\0aN\xAEV[\x91a\x05\xF8V[\x10\x15aS'W[\x80aQ$aQ\x1Eb\x01\0\0aN\xECV[\x91a\x05\xF8V[\x10\x15aR\xF9W[\x80aQ@aQ:a\x01\0aO*V[\x91a\x05\xF8V[\x10\x15aR\xCBW[\x80aQ[aQU`\x10aOeV[\x91a\x05\xF8V[\x10\x15aR\x9DW[aQuaQo`\x04aO\xA0V[\x91a\x05\xF8V[\x10\x15aR\x84W[aQ\x86`\x03aO\xDBV[aO\xF7V[aQ\x95`\x01aO\xBCV[\x90aN\0V[aQ\xA5\x81\x86aP\x19V[\x90aP;V[aQ\xB5`\x01aO\xBCV[\x90aN\0V[\x80\x92aP\x19V[\x90aP;V[aQ\xD2`\x01aO\xBCV[\x90aN\0V[aQ\xE2\x81\x8CaP\x19V[\x90aP;V[aQ\xF2`\x01aO\xBCV[\x90aN\0V[aR\x02\x81\x8AaP\x19V[\x90aP;V[aR\x12`\x01aO\xBCV[\x90aN\0V[aR\"\x81\x88aP\x19V[\x90aP;V[aR2`\x01aO\xBCV[\x90aN\0V[aRB\x81\x86aP\x19V[\x90aP;V[aRR`\x01aO\xBCV[\x90aN\0V[\x91aRuaRoaRj\x85\x80\x94aP\x19V[a\x05\xF8V[\x91a\x05\xF8V[\x11a\\PV[\x90a?JV[\x90V[aR\x98\x90aR\x92`\x01aO\xBCV[\x90aNFV[aQ|V[aR\xB4aR\xC5\x91aR\xAE`\x04aOIV[\x90aN\0V[\x91aR\xBF`\x02aO\x84V[\x90aNFV[\x90aQbV[aR\xE2aR\xF3\x91aR\xDC`\x08aO\x0BV[\x90aN\0V[\x91aR\xED`\x04aOIV[\x90aNFV[\x90aQGV[aS\x10aS!\x91aS\n`\x10aN\xCDV[\x90aN\0V[\x91aS\x1B`\x08aO\x0BV[\x90aNFV[\x90aQ+V[aS>aSO\x91aS8` aN\x8FV[\x90aN\0V[\x91aSI`\x10aN\xCDV[\x90aNFV[\x90aQ\x0EV[aSlaS}\x91aSf`@aN*V[\x90aN\0V[\x91aSw` aN\x8FV[\x90aNFV[\x90aP\xEFV[aS\x9AaS\xAB\x91aS\x94`\x80aM\xE4V[\x90aN\0V[\x91aS\xA5`@aN*V[\x90aNFV[\x90aP\xCCV[\x90V[_R` _ \x01\x90V[\x93\x91\x90\x92aS\xCAa\x1E\xEBV[P[\x81aS\xDFaS\xD9\x83a\x05\xF8V[\x91a\x05\xF8V[\x10\x15aTEWaS\xF0\x82\x82\x90a\\\x9CV[\x90aT\x06_aT\0\x88\x85\x90aS\xB4V[\x01aE\x1AV[aT\x18aT\x12\x87a\x14\x93V[\x91a\x14\x93V[\x11_\x14aT(WP\x91[\x91aS\xCCV[\x92\x91PaT?\x90aT9`\x01a\x1F\xF5V[\x90a(kV[\x90aT\"V[\x92PP\x91P\x90V[aT_\x90aTYa\x1E\xEBV[Pa0\xEDV[\x90V[\x90V[\x91\x90\x91\x80aT{aTu\x85a\x04\xC4V[\x91a\x04\xC4V[\x14\x15\x80aU\xF9W[aT\x8DW[PPPV[\x80aT\xA8aT\xA2aT\x9D_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x03aUiW[P\x81aT\xCAaT\xC4aT\xBF_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x03aT\xD6W[\x80aT\x88V[aU\x1DaU\x10aU\x17\x92aT\xEC`\n\x86\x90a)\xAEV[\x90aU\naU\x04aT\xFE`\x01\x93a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[\x92\x90a)\xC7V[\x91a)\xC7V[\x91\x90\x91aUJ\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\n<V[\x92aU_aUVa\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2_\x80aT\xD0V[aU\xA8aU\xAEaU\xA1aU~`\n\x85\x90a)\xAEV[`\x02aU\x9BaU\x95aU\x8F\x89a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[\x92\x90a)\xC7V[\x91a)\xC7V[\x91\x90\x91aU\xDB\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\n<V[\x92aU\xF0aU\xE7a\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2_aT\xAEV[P\x81aV\raV\x07_a\x1F\xC7V[\x91a\x05\xF8V[\x11aT\x83V[_aV'\x91aV a\x1E\xEBV[P\x01aD\xD5V[\x90V[aV>aV9aVC\x92a\x0E\x9EV[a\n\x11V[a\x05\xF8V[\x90V[aVO\x90aN\x8FV[\x90RV[\x91` aVt\x92\x94\x93aVm`@\x82\x01\x96_\x83\x01\x90aVFV[\x01\x90a\x06\x81V[V[aV\x8AaV\x85aV\x8F\x92a\x05\xF8V[a\n\x11V[a\x0E\x9EV[\x90V[aV\x9Aa0\xBEV[P\x80aV\xB2aV\xACc\xFF\xFF\xFF\xFFaV*V[\x91a\x05\xF8V[\x11aV\xC3WaV\xC0\x90aVvV[\x90V[` aV\xDF_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01aVSV[\x03\x90\xFD[aV\xFAaV\xFF\x91aV\xF2a\x1E\xEBV[P`\x08a0\xD7V[a\nzV[\x90V[\x90V[aW\x19aW\x14aW\x1E\x92aW\x02V[a\x16\x0EV[a\x07|V[\x90V[aW+`\xFFaW\x05V[\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90aWQaWJ\x83a\"\xE9V[\x80\x94a#\x13V[\x91`\x01\x81\x16\x90\x81_\x14aW\xA8WP`\x01\x14aWlW[PPPV[aWy\x91\x92\x93\x94PaW.V[\x91_\x92[\x81\x84\x10aW\x90WPP\x01\x90_\x80\x80aWgV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90aW}V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80aWgV[\x90aW\xCD\x91aW7V[\x90V[\x90aW\xF0aW\xE9\x92aW\xE0a\x04\x02V[\x93\x84\x80\x92aW\xC3V[\x03\x83a#\xD2V[V[aW\xFB\x90aW\xD0V[\x90V[\x90aX\x07a\"\xD0V[PaX\x11\x82a%\x7FV[aX*aX$aX\x1FaW!V[a\x07|V[\x91a\x07|V[\x14\x15_\x14aX?WPaX<\x90a^\x12V[\x90V[aXI\x91PaW\xF2V[\x90V[`B\x91aXWa%{V[P`@Q\x91\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x02\x83\x01R`\"\x82\x01R \x90V[_\x90V[aX\x9DaX\xA2\x91a\n^V[a\x1E\xAAV[\x90V[\x90V[aX\xBCaX\xB7aX\xC1\x92aX\xA5V[a\n\x11V[a\x05\xF8V[\x90V[aX\xF9aY\0\x94aX\xEF``\x94\x98\x97\x95aX\xE5`\x80\x86\x01\x9A_\x87\x01\x90a\x07\xC0V[` \x85\x01\x90a\x08\xE7V[`@\x83\x01\x90a\x07\xC0V[\x01\x90a\x07\xC0V[V[aY\na\x04\x02V[=_\x82>=\x90\xFD[\x93\x92\x93aY\x1Da \xD1V[PaY&aX\x8DV[PaY/a%{V[PaY9\x85aX\x91V[aYkaYe\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0aX\xA8V[\x91a\x05\xF8V[\x11aY\xF8W\x90aY\x8E` \x94\x95_\x94\x93\x92\x93aY\x85a\x04\x02V[\x94\x85\x94\x85aX\xC4V[\x83\x80R\x03\x90`\x01Z\xFA\x15aY\xF3WaY\xA6_Qa\x16\x0EV[\x80aY\xC1aY\xBBaY\xB6_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aY\xD7W_\x91aY\xD1_a\x16\x13V[\x91\x92\x91\x90V[PaY\xE1_a\x1EuV[`\x01\x91aY\xED_a\x16\x13V[\x91\x92\x91\x90V[aY\x02V[PPPaZ\x04_a\x1EuV[\x90`\x03\x92\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15aZ,WV[aZ\x0EV[\x90aZ;\x82aZ\"V[V[\x80aZPaZJ_aZ1V[\x91aZ1V[\x14_\x14aZ[WPPV[\x80aZoaZi`\x01aZ1V[\x91aZ1V[\x14_\x14aZ\x92W_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80aZ\x8E`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x80aZ\xA6aZ\xA0`\x02aZ1V[\x91aZ1V[\x14_\x14aZ\xD4WaZ\xD0aZ\xB9\x83aX\x91V[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x8EV[\x03\x90\xFD[aZ\xE7aZ\xE1`\x03aZ1V[\x91aZ1V[\x14aZ\xEFWPV[a[\n\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a\x07\xCDV[\x03\x90\xFD[_R` _ \x90V[a[ \x81aD\xD5V[\x82\x10\x15a[:Wa[2`\x01\x91a[\x0EV[\x91\x02\x01\x90_\x90V[a\x16{V[\x90a[I\x90a\x14\x93V[\x90RV[\x90a[W\x90a\x1CNV[\x90RV[\x90a[\x91a[\x88_a[ka<\x93V[\x94a[\x82a[z\x83\x83\x01aE\x1AV[\x83\x88\x01a[?V[\x01aELV[` \x84\x01a[MV[V[a[\x9C\x90a[[V[\x90V[a[\xBD\x91_a[\xB7\x92a[\xB0a<\xCEV[P\x01a[\x17V[Pa[\x93V[\x90V[\x92\x91a[\xCE\x84\x83\x83\x91a^BV[\x83a[\xE9a[\xE3a[\xDE_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a[\xFEW[a[\xFC\x92\x93\x91\x90\x91a_\xCCV[V[a\\\x06a$aV[\x93a\\\x0Fa_\xB1V[\x94\x80a\\#a\\\x1D\x88a\x05\xF8V[\x91a\x05\xF8V[\x11a\\0WP\x93Pa[\xEFV[\x85\x90a\\L_\x92\x83\x92c\x0EX\xAE\x93`\xE1\x1B\x84R`\x04\x84\x01a-\xB5V[\x03\x90\xFD[a\\Xa\x1E\xEBV[P\x15\x15\x90V[a\\ra\\ma\\w\x92aO\x81V[a\n\x11V[a\x05\xF8V[\x90V[a\\\x86a\\\x8C\x91a\x05\xF8V[\x91a\x05\xF8V[\x90\x81\x15a\\\x97W\x04\x90V[aP\x05V[a\\\xC1a\\\xC7\x92a\\\xABa\x1E\xEBV[P\x82\x81\x16\x92\x18a\\\xBB`\x02a\\^V[\x90a\\zV[\x90a(kV[\x90V[\x90V[a\\\xE1a\\\xDCa\\\xE6\x92a\\\xCAV[a\n\x11V[a\x08\xE1V[\x90V[a\\\xF2\x90a\\\xCDV[\x90RV[\x91` a]\x17\x92\x94\x93a]\x10`@\x82\x01\x96_\x83\x01\x90a\\\xE9V[\x01\x90a\x06\x81V[V[a]-a](a]2\x92a\x05\xF8V[a\n\x11V[a\x1CNV[\x90V[a]=a\x1D=V[P\x80a]Wa]Q`\x01\x80`\xD0\x1B\x03a)\xC7V[\x91a\x05\xF8V[\x11a]hWa]e\x90a]\x19V[\x90V[`\xD0a]\x84_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a\\\xF6V[\x03\x90\xFD[\x90a]\xBEa]\xC4\x93\x92a]\x99a\x1D=V[Pa]\xA2a\x1D=V[P\x80\x93a]\xB7a]\xB0a6\x96V[\x94\x92aH>V[\x90\x91ad4V[\x91a`\x8BV[\x91\x90\x91\x90V[a]\xDEa]\xD9a]\xE3\x92aN\x8CV[a\n\x11V[a\x05\xF8V[\x90V[6\x907V[\x90a^\x10a]\xF8\x83a+UV[\x92` \x80a^\x06\x86\x93a+2V[\x92\x01\x91\x03\x90a]\xE6V[V[a^\x1Aa\"\xD0V[Pa^$\x81a`\xF5V[\x90a^7a^2` a]\xCAV[a]\xEBV[\x91\x82R` \x82\x01R\x90V[\x91\x90\x91\x80a^`a^Za^U_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14_\x14a_AWa^\x84a^}\x83a^x`\x02a\nzV[a(kV[`\x02a-\xFBV[[\x82a^\xA0a^\x9Aa^\x95_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14_\x14a_\x15Wa^\xC4a^\xBD\x83a^\xB8`\x02a\nzV[a?JV[`\x02a-\xFBV[[\x91\x90\x91a_\x10a^\xFEa^\xF8\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\n<V[\x93a\n<V[\x93a_\x07a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[a_<\x82a_6a_'_\x87\x90a0\xD7V[\x91a_1\x83a\nzV[aP;V[\x90a-\xFBV[a^\xC5V[a_Ta_O_\x83\x90a0\xD7V[a\nzV[\x80a_ga_a\x85a\x05\xF8V[\x91a\x05\xF8V[\x10a_\x8FWa_za_\x8A\x91\x84\x90a?JV[a_\x85_\x84\x90a0\xD7V[a-\xFBV[a^\x85V[\x90a_\xAD\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[a_\xB9a\x1E\xEBV[Pa_\xC9`\x01\x80`\xD0\x1B\x03a)\xC7V[\x90V[\x91a`$a`\x1Ea`+\x94\x80a_\xF2a_\xECa_\xE7_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a`\\W[\x84a`\x13a`\ra`\x08_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a`-W[a,DV[\x92a,DV[\x90\x91aTeV[V[a`U`\x0B`\x02a`Oa`Ia`C\x89a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[PPa`\x19V[a`\x84`\x0B`\x01a`~a`xa`r\x89a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[PPa_\xF8V[\x91a`\xAF_a`\xB4\x94a`\x9Ca\x1D=V[Pa`\xA5a\x1D=V[P\x01\x92\x91\x92aD\xF8V[ab\xE6V[\x91\x90\x91\x90V[a`\xCEa`\xC9a`\xD3\x92aW\x02V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[a`\xEDa`\xE8a`\xF2\x92a`\xD6V[a\n\x11V[a\x05\xF8V[\x90V[aa\naa\x0F\x91aa\x04a\x1E\xEBV[Pa%\x7FV[aX\x91V[aa\x19`\xFFa`\xBAV[\x16\x80aa.aa(`\x1Fa`\xD9V[\x91a\x05\xF8V[\x11aa6W\x90V[_c,\xD4J\xC3`\xE2\x1B\x81R\x80aaN`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[T\x90V[aa``@a'`V[\x90V[_R` _ \x90V[aau\x81aaRV[\x82\x10\x15aa\x8FWaa\x87`\x01\x91aacV[\x91\x02\x01\x90_\x90V[a\x16{V[aa\x9E\x90Qa\x14\x93V[\x90V[\x90aa\xB2e\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[aa\xD0aa\xCBaa\xD5\x92a\x14\x93V[a\n\x11V[a\x14\x93V[\x90V[\x90V[\x90aa\xF0aa\xEBaa\xF7\x92aa\xBCV[aa\xD8V[\x82Taa\xA1V[\x90UV[ab\x05\x90Qa\x1CNV[\x90V[`0\x1B\x90V[\x90ab e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x91ab\x08V[\x91\x81\x19\x16\x91\x16\x17\x90V[ab>ab9abC\x92a\x1CNV[a\n\x11V[a\x1CNV[\x90V[\x90V[\x90ab^abYabe\x92ab*V[abFV[\x82Tab\x0EV[\x90UV[\x90ab\x93` _ab\x99\x94ab\x8B\x82\x82\x01ab\x85\x84\x88\x01aa\x94V[\x90aa\xDBV[\x01\x92\x01aa\xFBV[\x90abIV[V[\x91\x90ab\xACWab\xAA\x91abiV[V[a\x1FXV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15ab\xE1W\x82ab\xD9\x91`\x01ab\xDF\x95\x01\x81UaalV[\x90ab\x9BV[V[a#\xBEV[\x90\x92\x91\x92ab\xF2a\x1D=V[Pab\xFBa\x1D=V[Pac\x05\x82aaRV[\x80ac\x18ac\x12_a\x1F\xC7V[\x91a\x05\xF8V[\x11_\x14ac\xE8Wac>\x90ac8\x84\x91ac2`\x01a\x1F\xF5V[\x90a \x11V[\x90aS\xB4V[\x90acJ_\x83\x01aE\x1AV[\x92acV_\x84\x01aELV[\x93\x80acjacd\x85a\x14\x93V[\x91a\x14\x93V[\x11ac\xCCWac\x81ac{\x84a\x14\x93V[\x91a\x14\x93V[\x14_\x14ac\x9CWPPac\x97\x90_\x85\x91\x01abIV[[\x91\x90V[ac\xC7\x92Pac\xC2\x86ac\xB9ac\xB0aaVV[\x94_\x86\x01a[?V[` \x84\x01a[MV[ab\xB1V[ac\x98V[_c% `\x1D`\xE0\x1B\x81R\x80ac\xE4`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[Pad\x13\x91ad\x0E\x85ad\x05ac\xFCaaVV[\x94_\x86\x01a[?V[` \x84\x01a[MV[ab\xB1V[ad\x1C_aEYV[\x91\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[\x91\x90\x91\x80`\x01\x14adSW`\x02\x03ad WadO\x91a\x1D\xBCV[\x90[V[Pad]\x91a\x1D}V[\x90adQV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x1D9V[a\0\x1D_5a\x03\xFCV[\x80c\x01\xFF\xC9\xA7\x14a\x03\xF7W\x80c\x04\xDF\x01}\x14a\x03\xF2W\x80c\x06\xFD\xDE\x03\x14a\x03\xEDW\x80c\t^\xA7\xB3\x14a\x03\xE8W\x80c\x18\x16\r\xDD\x14a\x03\xE3W\x80c\x18\xBFPw\x14a\x03\xDEW\x80c#\xB8r\xDD\x14a\x03\xD9W\x80c$\x8A\x9C\xA3\x14a\x03\xD4W\x80c+\x8CI\xE3\x14a\x03\xCFW\x80c//\xF1]\x14a\x03\xCAW\x80c0\xD3\xE8\xEB\x14a\x03\xC5W\x80c1<\xE5g\x14a\x03\xC0W\x80c6D\xE5\x15\x14a\x03\xBBW\x80c6V\x8A\xBE\x14a\x03\xB6W\x80c:F\xB1\xA8\x14a\x03\xB1W\x80c@\xC1\x0F\x19\x14a\x03\xACW\x80cBz\xC0\xCA\x14a\x03\xA7W\x80cK\xDD6\xCE\x14a\x03\xA2W\x80cK\xF5\xD7\xE9\x14a\x03\x9DW\x80cO\x1B\xFC\x9E\x14a\x03\x98W\x80cX|\xDE\x1E\x14a\x03\x93W\x80cZ]\xB1\xBB\x14a\x03\x8EW\x80c\\\x19\xA9\\\x14a\x03\x89W\x80cc\xA0\xDA\xAC\x14a\x03\x84W\x80ce\x14U4\x14a\x03\x7FW\x80cj\x96\xE3\xED\x14a\x03zW\x80co\xCF\xFFE\x14a\x03uW\x80cp\xA0\x821\x14a\x03pW\x80cr\xCB\xDC\xC8\x14a\x03kW\x80cx\xFB\x7F\xD2\x14a\x03fW\x80cy\xCCg\x90\x14a\x03aW\x80cz\x8C\xD1V\x14a\x03\\W\x80c~\xCE\xBE\0\x14a\x03WW\x80c\x83\xF1!\x1B\x14a\x03RW\x80c\x84&\xAD\xF2\x14a\x03MW\x80c\x84L\x90&\x14a\x03HW\x80c\x84\xB0\x19n\x14a\x03CW\x80c\x8AT%!\x14a\x03>W\x80c\x8D3C\xD6\x14a\x039W\x80c\x8ES\x9E\x8C\x14a\x034W\x80c\x90-U\xA5\x14a\x03/W\x80c\x91\xD1HT\x14a\x03*W\x80c\x91\xDD\xAD\xF4\x14a\x03%W\x80c\x94\xAA\"\xF2\x14a\x03 W\x80c\x95\xD8\x9BA\x14a\x03\x1BW\x80c\x9A\xB2N\xB0\x14a\x03\x16W\x80c\x9B~\xF6K\x14a\x03\x11W\x80c\xA2\x17\xFD\xDF\x14a\x03\x0CW\x80c\xA3\xC4G\x05\x14a\x03\x07W\x80c\xA9\x05\x9C\xBB\x14a\x03\x02W\x80c\xAA\x08*\x9D\x14a\x02\xFDW\x80c\xB0\xCA%>\x14a\x02\xF8W\x80c\xBBMD6\x14a\x02\xF3W\x80c\xC0*\xE7T\x14a\x02\xEEW\x80c\xC3\xCD\xA5 \x14a\x02\xE9W\x80c\xC4\xFCE\xA8\x14a\x02\xE4W\x80c\xC9\xAB\0\x06\x14a\x02\xDFW\x80c\xD5\x05\xAC\xCF\x14a\x02\xDAW\x80c\xD5Gt\x1F\x14a\x02\xD5W\x80c\xDDb\xED>\x14a\x02\xD0W\x80c\xF1\x12~\xD8\x14a\x02\xCBWc\xF7^\x85\x12\x03a\0\x0EWa\x1D\x04V[a\x1C\x9FV[a\x1B\xBBV[a\x1BZV[a\x1B V[a\x1A|V[a\x19\xF7V[a\x19\x1DV[a\x18aV[a\x18,V[a\x17\xF6V[a\x17\xC1V[a\x17VV[a\x17!V[a\x16FV[a\x15\xD6V[a\x15_V[a\x15*V[a\x14\xF5V[a\x14\xC0V[a\x14]V[a\x14(V[a\x13\xB1V[a\x13|V[a\x13\x18V[a\x12\xADV[a\x11hV[a\x113V[a\x10\xDAV[a\x10\xA5V[a\x10pV[a\x10<V[a\x10\x07V[a\x0F\xD2V[a\x0E\xFEV[a\x0E\xC9V[a\x0EiV[a\r\xDBV[a\r\xA7V[a\r:V[a\r\x05V[a\x0C\xB2V[a\x0C[V[a\x0B\xEDV[a\x0B\xB8V[a\x0B|V[a\t\xDDV[a\t\xA7V[a\tsV[a\t>V[a\t\tV[a\x08\xACV[a\x08xV[a\x08\x17V[a\x07\xE2V[a\x07FV[a\x06\xD8V[a\x06\xA3V[a\x06KV[a\x05\xC3V[a\x05\x16V[a\x04\x84V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x04%\x81a\x04\x10V[\x03a\x04,WV[_\x80\xFD[\x90P5\x90a\x04=\x82a\x04\x1CV[V[\x90` \x82\x82\x03\x12a\x04XWa\x04U\x91_\x01a\x040V[\x90V[a\x04\x0CV[\x15\x15\x90V[a\x04k\x90a\x04]V[\x90RV[\x91\x90a\x04\x82\x90_` \x85\x01\x94\x01\x90a\x04bV[V[4a\x04\xB4Wa\x04\xB0a\x04\x9Fa\x04\x9A6`\x04a\x04?V[a\x1D\xD6V[a\x04\xA7a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xCD\x90a\x04\xB9V[\x90V[a\x04\xD9\x81a\x04\xC4V[\x03a\x04\xE0WV[_\x80\xFD[\x90P5\x90a\x04\xF1\x82a\x04\xD0V[V[\x90` \x82\x82\x03\x12a\x05\x0CWa\x05\t\x91_\x01a\x04\xE4V[\x90V[a\x04\x0CV[_\x01\x90V[4a\x05DWa\x05.a\x05)6`\x04a\x04\xF3V[a\"\xC5V[a\x056a\x04\x02V[\x80a\x05@\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[_\x91\x03\x12a\x05SWV[a\x04\x0CV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x05\x99a\x05\xA2` \x93a\x05\xA7\x93a\x05\x90\x81a\x05XV[\x93\x84\x80\x93a\x05\\V[\x95\x86\x91\x01a\x05eV[a\x05pV[\x01\x90V[a\x05\xC0\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05zV[\x90V[4a\x05\xF3Wa\x05\xD36`\x04a\x05IV[a\x05\xEFa\x05\xDEa$)V[a\x05\xE6a\x04\x02V[\x91\x82\x91\x82a\x05\xABV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x06\x04\x81a\x05\xF8V[\x03a\x06\x0BWV[_\x80\xFD[\x90P5\x90a\x06\x1C\x82a\x05\xFBV[V[\x91\x90`@\x83\x82\x03\x12a\x06FW\x80a\x06:a\x06C\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\x06|Wa\x06xa\x06ga\x06a6`\x04a\x06\x1EV[\x90a$?V[a\x06oa\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[a\x06\x8A\x90a\x05\xF8V[\x90RV[\x91\x90a\x06\xA1\x90_` \x85\x01\x94\x01\x90a\x06\x81V[V[4a\x06\xD3Wa\x06\xB36`\x04a\x05IV[a\x06\xCFa\x06\xBEa$aV[a\x06\xC6a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x07\x07Wa\x06\xF1a\x06\xEB6`\x04a\x06\x1EV[\x90a$wV[a\x06\xF9a\x04\x02V[\x80a\x07\x03\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x90\x91``\x82\x84\x03\x12a\x07AWa\x07>a\x07'\x84_\x85\x01a\x04\xE4V[\x93a\x075\x81` \x86\x01a\x04\xE4V[\x93`@\x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\x07wWa\x07sa\x07ba\x07\\6`\x04a\x07\x0CV[\x91a%LV[a\x07ja\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x07\x88\x81a\x07|V[\x03a\x07\x8FWV[_\x80\xFD[\x90P5\x90a\x07\xA0\x82a\x07\x7FV[V[\x90` \x82\x82\x03\x12a\x07\xBBWa\x07\xB8\x91_\x01a\x07\x93V[\x90V[a\x04\x0CV[a\x07\xC9\x90a\x07|V[\x90RV[\x91\x90a\x07\xE0\x90_` \x85\x01\x94\x01\x90a\x07\xC0V[V[4a\x08\x12Wa\x08\x0Ea\x07\xFDa\x07\xF86`\x04a\x07\xA2V[a%\xC5V[a\x08\x05a\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[4a\x08FWa\x080a\x08*6`\x04a\x06\x1EV[\x90a%\xE7V[a\x088a\x04\x02V[\x80a\x08B\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x91\x90`@\x83\x82\x03\x12a\x08sW\x80a\x08ga\x08p\x92_\x86\x01a\x07\x93V[\x93` \x01a\x04\xE4V[\x90V[a\x04\x0CV[4a\x08\xA7Wa\x08\x91a\x08\x8B6`\x04a\x08KV[\x90a'8V[a\x08\x99a\x04\x02V[\x80a\x08\xA3\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x08\xDCWa\x08\xD8a\x08\xC7a\x08\xC26`\x04a\x04\xF3V[a(\x90V[a\x08\xCFa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[`\xFF\x16\x90V[a\x08\xF0\x90a\x08\xE1V[\x90RV[\x91\x90a\t\x07\x90_` \x85\x01\x94\x01\x90a\x08\xE7V[V[4a\t9Wa\t\x196`\x04a\x05IV[a\t5a\t$a)<V[a\t,a\x04\x02V[\x91\x82\x91\x82a\x08\xF4V[\x03\x90\xF3[a\x04\x08V[4a\tnWa\tN6`\x04a\x05IV[a\tja\tYa)RV[a\taa\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[4a\t\xA2Wa\t\x8Ca\t\x866`\x04a\x08KV[\x90a)fV[a\t\x94a\x04\x02V[\x80a\t\x9E\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\t\xD8Wa\t\xD4a\t\xC3a\t\xBD6`\x04a\x06\x1EV[\x90a)\xE3V[a\t\xCBa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\n\x0CWa\t\xF6a\t\xF06`\x04a\x06\x1EV[\x90a+\x01V[a\t\xFEa\x04\x02V[\x80a\n\x08\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x90V[a\n(a\n#a\n-\x92a\x04\xB9V[a\n\x11V[a\x04\xB9V[\x90V[a\n9\x90a\n\x14V[\x90V[a\nE\x90a\n0V[\x90V[\x90a\nR\x90a\n<V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\nra\nw\x91a\n^V[a\ncV[\x90V[a\n\x84\x90Ta\nfV[\x90V[`\xFF\x16\x90V[a\n\x99a\n\x9E\x91a\n^V[a\n\x87V[\x90V[a\n\xAB\x90Ta\n\x8DV[\x90V[a\n\xB9\x90`\ra\nHV[a\n\xC4_\x82\x01a\nzV[\x91a\n\xD1`\x01\x83\x01a\nzV[\x91a\n\xDE`\x02\x82\x01a\nzV[\x91a\n\xEB`\x03\x83\x01a\nzV[\x91a\n\xF8`\x04\x82\x01a\nzV[\x91a\x0B\x11`\x06a\x0B\n`\x05\x85\x01a\nzV[\x93\x01a\n\xA1V[\x90V[\x94\x92\x90\x97\x96\x95\x93\x91`\xE0\x86\x01\x98_\x87\x01a\x0B-\x91a\x06\x81V[` \x86\x01a\x0B:\x91a\x06\x81V[`@\x85\x01a\x0BG\x91a\x06\x81V[``\x84\x01a\x0BT\x91a\x06\x81V[`\x80\x83\x01a\x0Ba\x91a\x06\x81V[`\xA0\x82\x01a\x0Bn\x91a\x06\x81V[`\xC0\x01a\x0Bz\x91a\x04bV[V[4a\x0B\xB3Wa\x0B\xAFa\x0B\x97a\x0B\x926`\x04a\x04\xF3V[a\n\xAEV[\x93a\x0B\xA6\x97\x95\x97\x93\x91\x93a\x04\x02V[\x97\x88\x97\x88a\x0B\x14V[\x03\x90\xF3[a\x04\x08V[4a\x0B\xE8Wa\x0B\xC86`\x04a\x05IV[a\x0B\xE4a\x0B\xD3a+\rV[a\x0B\xDBa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x0C\x1DWa\x0B\xFD6`\x04a\x05IV[a\x0C\x19a\x0C\x08a+\xB7V[a\x0C\x10a\x04\x02V[\x91\x82\x91\x82a\x05\xABV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x0C9a\x0C4a\x0C>\x92a\x0C\"V[a\n\x11V[a\x05\xF8V[\x90V[a\x0CMbv\xA7\0a\x0C%V[\x90V[a\x0CXa\x0CAV[\x90V[4a\x0C\x8BWa\x0Ck6`\x04a\x05IV[a\x0C\x87a\x0Cva\x0CPV[a\x0C~a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[a\x0C\x99\x90a\x04\xC4V[\x90RV[\x91\x90a\x0C\xB0\x90_` \x85\x01\x94\x01\x90a\x0C\x90V[V[4a\x0C\xE2Wa\x0C\xDEa\x0C\xCDa\x0C\xC86`\x04a\x04\xF3V[a,DV[a\x0C\xD5a\x04\x02V[\x91\x82\x91\x82a\x0C\x9DV[\x03\x90\xF3[a\x04\x08V[\x90` \x82\x82\x03\x12a\r\0Wa\x0C\xFD\x91_\x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\r5Wa\r1a\r a\r\x1B6`\x04a\x0C\xE7V[a-\x0BV[a\r(a\x04\x02V[\x91\x82\x91\x82a\x0C\x9DV[\x03\x90\xF3[a\x04\x08V[4a\rhWa\rRa\rM6`\x04a\x04\xF3V[a-PV[a\rZa\x04\x02V[\x80a\rd\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x90\x91``\x82\x84\x03\x12a\r\xA2Wa\r\x9Fa\r\x88\x84_\x85\x01a\x04\xE4V[\x93a\r\x96\x81` \x86\x01a\x06\x0FV[\x93`@\x01a\x06\x0FV[\x90V[a\x04\x0CV[4a\r\xD6Wa\r\xC0a\r\xBA6`\x04a\rmV[\x91a0\x9BV[a\r\xC8a\x04\x02V[\x80a\r\xD2\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x0E\x0BWa\r\xEB6`\x04a\x05IV[a\x0E\x07a\r\xF6a0\xA8V[a\r\xFEa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90a\x0E\x1A\x90a\n<V[_R` R`@_ \x90V[\x1C\x90V[a\x0E:\x90`\x08a\x0E?\x93\x02a\x0E&V[a\n\x87V[\x90V[\x90a\x0EM\x91Ta\x0E*V[\x90V[a\x0Ef\x90a\x0Ea`\x0F\x91_\x92a\x0E\x10V[a\x0EBV[\x90V[4a\x0E\x99Wa\x0E\x95a\x0E\x84a\x0E\x7F6`\x04a\x04\xF3V[a\x0EPV[a\x0E\x8Ca\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[c\xFF\xFF\xFF\xFF\x16\x90V[a\x0E\xB0\x90a\x0E\x9EV[\x90RV[\x91\x90a\x0E\xC7\x90_` \x85\x01\x94\x01\x90a\x0E\xA7V[V[4a\x0E\xF9Wa\x0E\xF5a\x0E\xE4a\x0E\xDF6`\x04a\x04\xF3V[a0\xC2V[a\x0E\xECa\x04\x02V[\x91\x82\x91\x82a\x0E\xB4V[\x03\x90\xF3[a\x04\x08V[4a\x0F.Wa\x0F*a\x0F\x19a\x0F\x146`\x04a\x04\xF3V[a0\xEDV[a\x0F!a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x0FO\x90a\x04\xC4V[\x90RV[\x90a\x0F`\x81` \x93a\x0FFV[\x01\x90V[` \x01\x90V[\x90a\x0F\x87a\x0F\x81a\x0Fz\x84a\x0F3V[\x80\x93a\x0F7V[\x92a\x0F@V[\x90_[\x81\x81\x10a\x0F\x97WPPP\x90V[\x90\x91\x92a\x0F\xB0a\x0F\xAA`\x01\x92\x86Qa\x0FSV[\x94a\x0FdV[\x91\x01\x91\x90\x91a\x0F\x8AV[a\x0F\xCF\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0FjV[\x90V[4a\x10\x02Wa\x0F\xE26`\x04a\x05IV[a\x0F\xFEa\x0F\xEDa1\xBEV[a\x0F\xF5a\x04\x02V[\x91\x82\x91\x82a\x0F\xBAV[\x03\x90\xF3[a\x04\x08V[4a\x107Wa\x103a\x10\"a\x10\x1D6`\x04a\x04\xF3V[a1\xD4V[a\x10*a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[4a\x10kWa\x10Ua\x10O6`\x04a\x06\x1EV[\x90a39V[a\x10]a\x04\x02V[\x80a\x10g\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x10\xA0Wa\x10\x806`\x04a\x05IV[a\x10\x9Ca\x10\x8Ba3EV[a\x10\x93a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x10\xD5Wa\x10\xD1a\x10\xC0a\x10\xBB6`\x04a\x04\xF3V[a3\xBDV[a\x10\xC8a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x11\nWa\x10\xEA6`\x04a\x05IV[a\x11\x06a\x10\xF5a3\xD2V[a\x10\xFDa\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x11cWa\x11C6`\x04a\x05IV[a\x11_a\x11Na\x11\x0FV[a\x11Va\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x11\x96Wa\x11\x80a\x11{6`\x04a\x0C\xE7V[a5%V[a\x11\x88a\x04\x02V[\x80a\x11\x92\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[`\xFF`\xF8\x1B\x16\x90V[a\x11\xAD\x90a\x11\x9BV[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x11\xCD\x90a\x05\xF8V[\x90RV[\x90a\x11\xDE\x81` \x93a\x11\xC4V[\x01\x90V[` \x01\x90V[\x90a\x12\x05a\x11\xFFa\x11\xF8\x84a\x11\xB1V[\x80\x93a\x11\xB5V[\x92a\x11\xBEV[\x90_[\x81\x81\x10a\x12\x15WPPP\x90V[\x90\x91\x92a\x12.a\x12(`\x01\x92\x86Qa\x11\xD1V[\x94a\x11\xE2V[\x91\x01\x91\x90\x91a\x12\x08V[\x93\x95\x91\x94a\x12\x89a\x12~a\x12\x9D\x95a\x12pa\x12\x93\x95a\x12\xAA\x9C\x9Aa\x12c`\xE0\x8C\x01\x92_\x8D\x01\x90a\x11\xA4V[\x8A\x82\x03` \x8C\x01Ra\x05zV[\x90\x88\x82\x03`@\x8A\x01Ra\x05zV[\x97``\x87\x01\x90a\x06\x81V[`\x80\x85\x01\x90a\x0C\x90V[`\xA0\x83\x01\x90a\x07\xC0V[`\xC0\x81\x84\x03\x91\x01Ra\x11\xE8V[\x90V[4a\x12\xE4Wa\x12\xBD6`\x04a\x05IV[a\x12\xE0a\x12\xC8a5\xADV[\x93a\x12\xD7\x97\x95\x97\x93\x91\x93a\x04\x02V[\x97\x88\x97\x88a\x128V[\x03\x90\xF3[a\x04\x08V[\x7F\x84\xFEt\xC7\x1A(\xB6\x9A\xA9`Hl\xA0\xE8\xC1A\x8C\x86\xE9\xEA,\xD6\xB5\x84\x9B\x95\xE2\xC8\xF4\x07\xA6t\x90V[a\x13\x15a\x12\xE9V[\x90V[4a\x13HWa\x13(6`\x04a\x05IV[a\x13Da\x133a\x13\rV[a\x13;a\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[\x7F\x9B\x12\xE0\xC5p~II\x15\xE5\x8B\x05d\xF1\x8A\xAA\xD9\xB7J\xC6\x9B\xFC\x81Z\x1E\xDA\xDC\x8EK\xD02\xEB\x90V[a\x13ya\x13MV[\x90V[4a\x13\xACWa\x13\x8C6`\x04a\x05IV[a\x13\xA8a\x13\x97a\x13qV[a\x13\x9Fa\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[4a\x13\xE1Wa\x13\xDDa\x13\xCCa\x13\xC76`\x04a\x0C\xE7V[a67V[a\x13\xD4a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x13\xFDa\x13\xF8a\x14\x02\x92a\x13\xE6V[a\n\x11V[a\x05\xF8V[\x90V[a\x14\x1Ak\x03;.<\x9F\xD0\x80<\xE8\0\0\0a\x13\xE9V[\x90V[a\x14%a\x14\x05V[\x90V[4a\x14XWa\x1486`\x04a\x05IV[a\x14Ta\x14Ca\x14\x1DV[a\x14Ka\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x14\x8EWa\x14\x8Aa\x14ya\x14s6`\x04a\x08KV[\x90a6hV[a\x14\x81a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x14\xA7\x90a\x14\x93V[\x90RV[\x91\x90a\x14\xBE\x90_` \x85\x01\x94\x01\x90a\x14\x9EV[V[4a\x14\xF0Wa\x14\xD06`\x04a\x05IV[a\x14\xECa\x14\xDBa6\x96V[a\x14\xE3a\x04\x02V[\x91\x82\x91\x82a\x14\xABV[\x03\x90\xF3[a\x04\x08V[4a\x15%Wa\x15!a\x15\x10a\x15\x0B6`\x04a\x04\xF3V[a6\xAAV[a\x15\x18a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x15ZWa\x15:6`\x04a\x05IV[a\x15Va\x15Ea71V[a\x15Ma\x04\x02V[\x91\x82\x91\x82a\x05\xABV[\x03\x90\xF3[a\x04\x08V[4a\x15\x8FWa\x15\x8Ba\x15za\x15u6`\x04a\x04\xF3V[a7GV[a\x15\x82a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90V[a\x15\xABa\x15\xA6a\x15\xB0\x92a\x15\x94V[a\n\x11V[a\x05\xF8V[\x90V[a\x15\xC8k\x02\xE8vi\xC3\x08sj\x04\0\0\0a\x15\x97V[\x90V[a\x15\xD3a\x15\xB3V[\x90V[4a\x16\x06Wa\x15\xE66`\x04a\x05IV[a\x16\x02a\x15\xF1a\x15\xCBV[a\x15\xF9a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[\x90V[_\x1B\x90V[a\x16'a\x16\"a\x16,\x92a\x16\x0BV[a\x16\x0EV[a\x07|V[\x90V[a\x168_a\x16\x13V[\x90V[a\x16Ca\x16/V[\x90V[4a\x16vWa\x16V6`\x04a\x05IV[a\x16ra\x16aa\x16;V[a\x16ia\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x16\xA5\x81a\x16\x8FV[\x82\x10\x15a\x16\xBFWa\x16\xB7`\x01\x91a\x16\x93V[\x91\x02\x01\x90_\x90V[a\x16{V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\xDF\x90`\x08a\x16\xE4\x93\x02a\x0E&V[a\x16\xC4V[\x90V[\x90a\x16\xF2\x91Ta\x16\xCFV[\x90V[`\x0Ea\x17\0\x81a\x16\x8FV[\x82\x10\x15a\x17\x1DWa\x17\x1A\x91a\x17\x14\x91a\x16\x9CV[\x90a\x16\xE7V[\x90V[_\x80\xFD[4a\x17QWa\x17Ma\x17<a\x1776`\x04a\x0C\xE7V[a\x16\xF5V[a\x17Da\x04\x02V[\x91\x82\x91\x82a\x0C\x9DV[\x03\x90\xF3[a\x04\x08V[4a\x17\x87Wa\x17\x83a\x17ra\x17l6`\x04a\x06\x1EV[\x90a7vV[a\x17za\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xF3[a\x04\x08V[a\x17\x9C\x90`\x08a\x17\xA1\x93\x02a\x0E&V[a\ncV[\x90V[\x90a\x17\xAF\x91Ta\x17\x8CV[\x90V[a\x17\xBE`\x0C_\x90a\x17\xA4V[\x90V[4a\x17\xF1Wa\x17\xD16`\x04a\x05IV[a\x17\xEDa\x17\xDCa\x17\xB2V[a\x17\xE4a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x18'Wa\x18#a\x18\x12a\x18\x0C6`\x04a\x06\x1EV[\x90a7\x98V[a\x18\x1Aa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x18\\Wa\x18Xa\x18Ga\x18B6`\x04a\x04\xF3V[a7\xAEV[a\x18Oa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[4a\x18\x91Wa\x18q6`\x04a\x05IV[a\x18\x8Da\x18|a7\xC3V[a\x18\x84a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[a\x18\x9F\x81a\x08\xE1V[\x03a\x18\xA6WV[_\x80\xFD[\x90P5\x90a\x18\xB7\x82a\x18\x96V[V[\x90\x91`\xC0\x82\x84\x03\x12a\x19\x18Wa\x18\xD1\x83_\x84\x01a\x04\xE4V[\x92a\x18\xDF\x81` \x85\x01a\x06\x0FV[\x92a\x18\xED\x82`@\x83\x01a\x06\x0FV[\x92a\x19\x15a\x18\xFE\x84``\x85\x01a\x18\xAAV[\x93a\x19\x0C\x81`\x80\x86\x01a\x07\x93V[\x93`\xA0\x01a\x07\x93V[\x90V[a\x04\x0CV[4a\x19RWa\x19<a\x1906`\x04a\x18\xB9V[\x94\x93\x90\x93\x92\x91\x92a8CV[a\x19Da\x04\x02V[\x80a\x19N\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[a\x19`\x90a\x04]V[\x90RV[\x90`\xC0\x80a\x19\xE0\x93a\x19|_\x82\x01Q_\x86\x01\x90a\x11\xC4V[a\x19\x8E` \x82\x01Q` \x86\x01\x90a\x11\xC4V[a\x19\xA0`@\x82\x01Q`@\x86\x01\x90a\x11\xC4V[a\x19\xB2``\x82\x01Q``\x86\x01\x90a\x11\xC4V[a\x19\xC4`\x80\x82\x01Q`\x80\x86\x01\x90a\x11\xC4V[a\x19\xD6`\xA0\x82\x01Q`\xA0\x86\x01\x90a\x11\xC4V[\x01Q\x91\x01\x90a\x19WV[V[\x91\x90a\x19\xF5\x90_`\xE0\x85\x01\x94\x01\x90a\x19dV[V[4a\x1A'Wa\x1A#a\x1A\x12a\x1A\r6`\x04a\x04\xF3V[a9jV[a\x1A\x1Aa\x04\x02V[\x91\x82\x91\x82a\x19\xE2V[\x03\x90\xF3[a\x04\x08V[a\x1A5\x81a\x04]V[\x03a\x1A<WV[_\x80\xFD[\x90P5\x90a\x1AM\x82a\x1A,V[V[\x91\x90`@\x83\x82\x03\x12a\x1AwW\x80a\x1Aka\x1At\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x1A@V[\x90V[a\x04\x0CV[4a\x1A\xABWa\x1A\x95a\x1A\x8F6`\x04a\x1AOV[\x90a:}V[a\x1A\x9Da\x04\x02V[\x80a\x1A\xA7\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[`\xE0\x81\x83\x03\x12a\x1B\x1BWa\x1A\xC6\x82_\x83\x01a\x04\xE4V[\x92a\x1A\xD4\x83` \x84\x01a\x04\xE4V[\x92a\x1A\xE2\x81`@\x85\x01a\x06\x0FV[\x92a\x1A\xF0\x82``\x83\x01a\x06\x0FV[\x92a\x1B\x18a\x1B\x01\x84`\x80\x85\x01a\x18\xAAV[\x93a\x1B\x0F\x81`\xA0\x86\x01a\x07\x93V[\x93`\xC0\x01a\x07\x93V[\x90V[a\x04\x0CV[4a\x1BUWa\x1B?a\x1B36`\x04a\x1A\xB0V[\x95\x94\x90\x94\x93\x91\x93a;+V[a\x1BGa\x04\x02V[\x80a\x1BQ\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[4a\x1B\x89Wa\x1Bsa\x1Bm6`\x04a\x08KV[\x90a<IV[a\x1B{a\x04\x02V[\x80a\x1B\x85\x81a\x05\x11V[\x03\x90\xF3[a\x04\x08V[\x91\x90`@\x83\x82\x03\x12a\x1B\xB6W\x80a\x1B\xAAa\x1B\xB3\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x04\xE4V[\x90V[a\x04\x0CV[4a\x1B\xECWa\x1B\xE8a\x1B\xD7a\x1B\xD16`\x04a\x1B\x8EV[\x90a<kV[a\x1B\xDFa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xF3[a\x04\x08V[a\x1B\xFA\x81a\x0E\x9EV[\x03a\x1C\x01WV[_\x80\xFD[\x90P5\x90a\x1C\x12\x82a\x1B\xF1V[V[\x91\x90`@\x83\x82\x03\x12a\x1C<W\x80a\x1C0a\x1C9\x92_\x86\x01a\x04\xE4V[\x93` \x01a\x1C\x05V[\x90V[a\x04\x0CV[a\x1CJ\x90a\x14\x93V[\x90RV[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x1Cb\x90a\x1CNV[\x90RV[\x90` \x80a\x1C\x88\x93a\x1C~_\x82\x01Q_\x86\x01\x90a\x1CAV[\x01Q\x91\x01\x90a\x1CYV[V[\x91\x90a\x1C\x9D\x90_`@\x85\x01\x94\x01\x90a\x1CfV[V[4a\x1C\xD0Wa\x1C\xCCa\x1C\xBBa\x1C\xB56`\x04a\x1C\x14V[\x90a<\xD9V[a\x1C\xC3a\x04\x02V[\x91\x82\x91\x82a\x1C\x8AV[\x03\x90\xF3[a\x04\x08V[\x7F\xCC\xE2\x96\xB0@3*\x08\x0Em\xF15\x15\xA3\xEC(i\xE2\x1C\xD2\x0FsD\xAF\t\x87\xDD\xB98\xD8\xBD!\x90V[a\x1D\x01a\x1C\xD5V[\x90V[4a\x1D4Wa\x1D\x146`\x04a\x05IV[a\x1D0a\x1D\x1Fa\x1C\xF9V[a\x1D'a\x04\x02V[\x91\x82\x91\x82a\x07\xCDV[\x03\x90\xF3[a\x04\x08V[_\x80\xFD[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x1Daa\x1Dg\x91a\x1CNV[\x91a\x1CNV[\x01\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1DxWV[a\x1DAV[\x90a\x1D\x90\x91a\x1D\x8Aa\x1D=V[Pa\x1DUV[\x90V[a\x1D\x9Fa\x1D\xA5\x91a\x1CNV[\x91a\x1CNV[\x90\x03\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1D\xB7WV[a\x1DAV[\x90a\x1D\xCF\x91a\x1D\xC9a\x1D=V[Pa\x1D\x93V[\x90V[_\x90V[a\x1D\xDEa\x1D\xD2V[P\x80a\x1D\xF9a\x1D\xF3c\x0C\xCC\xC6e`\xE2\x1Ba\x04\x10V[\x91a\x04\x10V[\x14\x80\x15a\x1E\x1DW[\x90\x81\x15a\x1E\rW[P\x90V[a\x1E\x17\x91Pa<\xEFV[_a\x1E\tV[P\x80a\x1E8a\x1E2c\xB2u*\xC9`\xE0\x1Ba\x04\x10V[\x91a\x04\x10V[\x14a\x1E\x01V[a\x1EW\x90a\x1ERa\x1EMa\x1C\xD5V[a=/V[a!\x18V[V[a\x1Ema\x1Eha\x1Er\x92a\x16\x0BV[a\n\x11V[a\x04\xB9V[\x90V[a\x1E~\x90a\x1EYV[\x90V[\x1B\x90V[\x91\x90`\x08a\x1E\xA0\x91\x02\x91a\x1E\x9A_\x19\x84a\x1E\x81V[\x92a\x1E\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1E\xBEa\x1E\xB9a\x1E\xC3\x92a\x05\xF8V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[\x91\x90a\x1E\xDFa\x1E\xDAa\x1E\xE7\x93a\x1E\xAAV[a\x1E\xC6V[\x90\x83Ta\x1E\x85V[\x90UV[_\x90V[a\x1F\x01\x91a\x1E\xFBa\x1E\xEBV[\x91a\x1E\xC9V[V[`\x06_\x91a\x1F\x13\x83\x80\x83\x01a\x1E\xEFV[a\x1F \x83`\x01\x83\x01a\x1E\xEFV[a\x1F-\x83`\x02\x83\x01a\x1E\xEFV[a\x1F:\x83`\x03\x83\x01a\x1E\xEFV[a\x1FG\x83`\x04\x83\x01a\x1E\xEFV[a\x1FT\x83`\x05\x83\x01a\x1E\xEFV[\x01UV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x1F}Wa\x1F{\x90a\x1F\x03V[V[a\x1FXV[\x90a\x1F\x8E`\xFF\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1F\xA1\x90a\x04]V[\x90V[\x90V[\x90a\x1F\xBCa\x1F\xB7a\x1F\xC3\x92a\x1F\x98V[a\x1F\xA4V[\x82Ta\x1F\x82V[\x90UV[a\x1F\xDBa\x1F\xD6a\x1F\xE0\x92a\x16\x0BV[a\n\x11V[a\x05\xF8V[\x90V[`\x01a\x1F\xEF\x91\x01a\x05\xF8V[\x90V[\x90V[a \ta \x04a \x0E\x92a\x1F\xF2V[a\n\x11V[a\x05\xF8V[\x90V[a  a &\x91\x93\x92\x93a\x05\xF8V[\x92a\x05\xF8V[\x82\x03\x91\x82\x11a 1WV[a\x1DAV[\x91\x90`\x08a V\x91\x02\x91a P`\x01\x80`\xA0\x1B\x03\x84a\x1E\x81V[\x92a\x1E\x81V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a ya ta \x81\x93a\n<V[a `V[\x90\x83Ta 6V[\x90UV[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a \xB2\x81a \x9CV[\x82\x10\x15a \xCCWa \xC4`\x01\x91a \xA0V[\x91\x02\x01\x90_\x90V[a\x16{V[_\x90V[a \xE7\x91a \xE1a \xD1V[\x91a cV[V[a \xF2\x81a \x9CV[\x80\x15a!\x13W`\x01\x90\x03\x90a!\x10a!\n\x83\x83a \xA9V[\x90a \xD5V[UV[a \x88V[\x80a!3a!-a!(_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a\"\xA9Wa!Ua!Oa!J`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[a\"\x8AWa!n_a!i`\r\x84\x90a\nHV[a\x1FkV[a!\x83_a!~`\x0F\x84\x90a\x0E\x10V[a\x1F\xA7V[a!\x8C_a\x1F\xC7V[[\x80a!\xA9a!\xA3a!\x9E`\x0Ea\x16\x8FV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a\"\x84Wa!\xC4a!\xBE`\x0E\x83\x90a\x16\x9CV[\x90a\x16\xE7V[a!\xD6a!\xD0\x84a\x04\xC4V[\x91a\x04\xC4V[\x14a!\xE9Wa!\xE4\x90a\x1F\xE3V[a!\x8DV[a\"/\x90a\")a\"!a\"\x1B`\x0Ea\"\x15a\"\x05`\x0Ea\x16\x8FV[a\"\x0F`\x01a\x1F\xF5V[\x90a \x11V[\x90a\x16\x9CV[\x90a\x16\xE7V[\x91`\x0Ea\x16\x9CV[\x90a cV[a\"Aa\"<`\x0Ea \x85V[a \xE9V[[a\"l\x7F]\x9DP4el\xB3\xEB\xFB\x06U\x05|\xD7\xF9\xB4\x07z\x9BB\xFFB\xCE\"<\xBA\xC5\xBCXm!&\x91a\n<V[\x90a\"ua\x04\x02V[\x80a\"\x7F\x81a\x05\x11V[\x03\x90\xA2V[Pa\"BV[a\"\xA5\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\"\xC1`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[a\"\xCE\x90a\x1E>V[V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a#\tW[` \x83\x10\x14a#\x04WV[a\"\xD5V[\x91`\x7F\x16\x91a\"\xF9V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a#?a#8\x83a\"\xE9V[\x80\x94a#\x13V[\x91`\x01\x81\x16\x90\x81_\x14a#\x96WP`\x01\x14a#ZW[PPPV[a#g\x91\x92\x93\x94Pa#\x1CV[\x91_\x92[\x81\x84\x10a#~WPP\x01\x90_\x80\x80a#UV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a#kV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a#UV[\x90a#\xBB\x91a#%V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a#\xDC\x90a\x05pV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a#\xF6W`@RV[a#\xBEV[\x90a$\x1Ba$\x14\x92a$\x0Ba\x04\x02V[\x93\x84\x80\x92a#\xB1V[\x03\x83a#\xD2V[V[a$&\x90a#\xFBV[\x90V[a$1a\"\xD0V[Pa$<`\x03a$\x1DV[\x90V[a$\\\x91a$Ka\x1D\xD2V[Pa$Ta=CV[\x91\x90\x91a=PV[`\x01\x90V[a$ia\x1E\xEBV[Pa$t`\x02a\nzV[\x90V[\x80a$\x92a$\x8Ca$\x87_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a%0W\x81a$\xAAa$\xA4_a\x1F\xC7V[\x91a\x05\xF8V[\x14a%\x14Wa$\xBA3\x83\x90a=\x95V[a$\xC5\x81\x83\x90a>\xECV[3\x90a%\x0Fa$\xFDa$\xF7\x7F\xDE\"\xBA\xFF\x03\x8E:>\x08@|\xBD\xF6\x17\xDE\xEDt\xE8i\xA7\xBAQ}\xF6\x11\xE311\xC6\xE6\xEA\x04\x93a\n<V[\x93a\n<V[\x93a%\x06a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[_c\x1F* \x05`\xE0\x1B\x81R\x80a%,`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a%H`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x91a%v\x92a%Ya\x1D\xD2V[Pa%na%ea=CV[\x82\x90\x84\x91a?XV[\x91\x90\x91a?\xE4V[`\x01\x90V[_\x90V[a%\x88\x90a\x07|V[\x90V[\x90a%\x95\x90a%\x7FV[_R` R`@_ \x90V[\x90V[a%\xB0a%\xB5\x91a\n^V[a%\xA1V[\x90V[a%\xC2\x90Ta%\xA4V[\x90V[`\x01a%\xDEa%\xE4\x92a%\xD6a%{V[P`\x05a%\x8BV[\x01a%\xB8V[\x90V[\x80a&\x02a%\xFCa%\xF7_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a&\xF2W\x81a&\x1Aa&\x14_a\x1F\xC7V[\x91a\x05\xF8V[\x14a&\xD6Wa&*3\x83\x90a@\x81V[3a&=a&7\x83a\x04\xC4V[\x91a\x04\xC4V[\x03a&\x9DW[a&N\x81\x83\x90aA\xD9V[3\x90a&\x98a&\x86a&\x80\x7F\xB9\x07\x95\xA6fP\x15Y\x83\xE2B\xCA\xC3\xE1\xAC\x1AM\xC2o\x8E\xD2\x98\x7F<\xE4\x16\xA3N\0\x11\x1F\xD4\x93a\n<V[\x93a\n<V[\x93a&\x8Fa\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[a&\xA8\x813\x90a<kV[a&\xBAa&\xB4_a\x1F\xC7V[\x91a\x05\xF8V[\x03a&\xC5W[a&CV[a&\xD1\x813\x84\x91a?XV[a&\xC0V[_c\x1F* \x05`\xE0\x1B\x81R\x80a&\xEE`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a'\n`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a')\x91a'$a'\x1F\x82a%\xC5V[a=/V[a'+V[V[\x90a'5\x91aB8V[PV[\x90a'B\x91a'\x0EV[V[\x90a'N\x90a\x05\xF8V[\x90RV[\x90a'\\\x90a\x04]V[\x90RV[\x90a'sa'la\x04\x02V[\x92\x83a#\xD2V[V[a'\x7F`\xE0a'`V[\x90V[\x90a(1a((`\x06a'\x93a'uV[\x94a'\xAAa'\xA2_\x83\x01a\nzV[_\x88\x01a'DV[a'\xC2a'\xB9`\x01\x83\x01a\nzV[` \x88\x01a'DV[a'\xDAa'\xD1`\x02\x83\x01a\nzV[`@\x88\x01a'DV[a'\xF2a'\xE9`\x03\x83\x01a\nzV[``\x88\x01a'DV[a(\na(\x01`\x04\x83\x01a\nzV[`\x80\x88\x01a'DV[a(\"a(\x19`\x05\x83\x01a\nzV[`\xA0\x88\x01a'DV[\x01a\n\xA1V[`\xC0\x84\x01a'RV[V[a(<\x90a'\x82V[\x90V[a(I\x90Qa\x05\xF8V[\x90V[\x90V[a(ca(^a(h\x92a(LV[a\n\x11V[a\x05\xF8V[\x90V[a(za(\x80\x91\x93\x92\x93a\x05\xF8V[\x92a\x05\xF8V[\x82\x01\x80\x92\x11a(\x8BWV[a\x1DAV[a(\xA7a(\xAC\x91a(\x9Fa\x1E\xEBV[P`\ra\nHV[a(3V[Ba(\xDFa(\xD9a(\xD4a(\xC2``\x86\x01a(?V[a(\xCEb\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a)\nW\x80a)\x01`\xA0a(\xFA` a)\x07\x95\x01a(?V[\x92\x01a(?V[\x90a \x11V[\x90V[` a)\x16\x91\x01a(?V[\x90V[_\x90V[\x90V[a)4a)/a)9\x92a)\x1DV[a\n\x11V[a\x08\xE1V[\x90V[a)Da)\x19V[Pa)O`\x12a) V[\x90V[a)Za%{V[Pa)caB\xE4V[\x90V[\x90\x80a)\x81a){a)va=CV[a\x04\xC4V[\x91a\x04\xC4V[\x03a)\x92Wa)\x8F\x91aC\x9EV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a)\xAA`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a)\xB8\x90a\n<V[_R` R`@_ \x90V[\x90V[a)\xDBa)\xD6a)\xE0\x92a\x1CNV[a\n\x11V[a\x05\xF8V[\x90V[a*\x1A\x91a*\x0Fa*\ta*\x04a*\x15\x94a)\xFCa\x1E\xEBV[P`\na)\xAEV[a)\xC4V[\x91aD\x7FV[\x90aEuV[a)\xC7V[\x90V[\x90a*7\x91a*2a*-a\x13MV[a=/V[a*9V[V[\x90\x81a*Ua*Oa*J_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a*\xE5W\x80a*ma*g_a\x1F\xC7V[\x91a\x05\xF8V[\x14a*\xC9Wa*\x84a*}a$aV[\x82\x90a(kV[a*\x9Da*\x97a*\x92a\x14\x05V[a\x05\xF8V[\x91a\x05\xF8V[\x11a*\xADWa*\xAB\x91a>\xECV[V[_c\x17~?\xC3`\xE0\x1B\x81R\x80a*\xC5`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a*\xE1`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a*\xFD`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a+\x0B\x91a*\x1DV[V[a+\x15a\x1E\xEBV[Pa+/a+!a\x14\x05V[a+)a$aV[\x90a \x11V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a+PWa+L` \x91a\x05pV[\x01\x90V[a#\xBEV[\x90a+ga+b\x83a+2V[a'`V[\x91\x82RV[_\x7Fmode=blocknumber&from=default\0\0\0\x91\x01RV[a+\x9D`\x1Da+UV[\x90a+\xAA` \x83\x01a+lV[V[a+\xB4a+\x93V[\x90V[a+\xBFa\"\xD0V[Pa+\xC8a6\x96V[a+\xE1a+\xDBa+\xD6aF\x9CV[a\x14\x93V[\x91a\x14\x93V[\x03a+\xF1Wa+\xEEa+\xACV[\x90V[_c\x01\xBF\xC1\xC5`\xE6\x1B\x81R\x80a,\t`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a,\x17\x90a\n<V[_R` R`@_ \x90V[a,/a,4\x91a\n^V[a\x16\xC4V[\x90V[a,A\x90Ta,#V[\x90V[a,[a,`\x91a,Sa \xD1V[P`\ta,\rV[a,7V[\x90V[` \x7Fout of bounds\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSyndicateTokenCrosschain: index _\x82\x01R\x01RV[a,\xBD`-`@\x92a\x05\\V[a,\xC6\x81a,cV[\x01\x90V[a,\xDF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra,\xB0V[\x90V[\x15a,\xE9WV[a,\xF1a\x04\x02V[bF\x1B\xCD`\xE5\x1B\x81R\x80a-\x07`\x04\x82\x01a,\xCAV[\x03\x90\xFD[a-Ga-M\x91a-\x1Aa \xD1V[Pa-@\x81a-:a-4a-/`\x0Ea\x16\x8FV[a\x05\xF8V[\x91a\x05\xF8V[\x10a,\xE2V[`\x0Ea\x16\x9CV[\x90a\x16\xE7V[\x90V[a-a\x90a-\\a=CV[aF\xECV[V[\x90a-~\x92\x91a-ya-ta\x1C\xD5V[a=/V[a.\xE4V[V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a-\xB0W\x82a-\xA8\x91`\x01a-\xAE\x95\x01\x81Ua \xA9V[\x90a cV[V[a#\xBEV[\x91` a-\xD6\x92\x94\x93a-\xCF`@\x82\x01\x96_\x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[a-\xE2`\xE0a'`V[\x90V[\x90a-\xF1_\x19\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a.\x10a.\x0Ba.\x17\x92a\x1E\xAAV[a\x1E\xC6V[\x82Ta-\xE5V[\x90UV[a.%\x90Qa\x04]V[\x90V[\x90a.\xD0`\xC0`\x06a.\xD6\x94a.K_\x82\x01a.E_\x88\x01a(?V[\x90a-\xFBV[a.d`\x01\x82\x01a.^` \x88\x01a(?V[\x90a-\xFBV[a.}`\x02\x82\x01a.w`@\x88\x01a(?V[\x90a-\xFBV[a.\x96`\x03\x82\x01a.\x90``\x88\x01a(?V[\x90a-\xFBV[a.\xAF`\x04\x82\x01a.\xA9`\x80\x88\x01a(?V[\x90a-\xFBV[a.\xC8`\x05\x82\x01a.\xC2`\xA0\x88\x01a(?V[\x90a-\xFBV[\x01\x92\x01a.\x1BV[\x90a\x1F\xA7V[V[\x90a.\xE2\x91a.(V[V[\x80a.\xFFa.\xF9a.\xF4_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a0\x7FWa/!a/\x1Ba/\x16`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[a0\nW[\x81\x83BB_\x90_\x92`\x01\x94a/9a-\xD8V[\x96_\x88\x01\x90a/G\x91a'DV[` \x87\x01\x90a/U\x91a'DV[`@\x86\x01\x90a/c\x91a'DV[``\x85\x01\x90a/q\x91a'DV[a/z\x90a\x1F\xC7V[`\x80\x84\x01\x90a/\x88\x91a'DV[a/\x91\x90a\x1F\xC7V[`\xA0\x83\x01\x90a/\x9F\x91a'DV[`\xC0\x82\x01\x90a/\xAD\x91a'RV[`\r\x82a/\xB9\x91a\nHV[\x90a/\xC3\x91a.\xD8V[\x90\x7F\xAA\x80}\n\xBF0\xD9\x19h\xC7G\x8Cf\xB6\xD8%!\xA1\x06\xAF\x13\xED\xA06\xE2\x03m\xA9\xAF\x16\x89X\x91a/\xEF\x90a\n<V[\x92a/\xF8a\x04\x02V[\x91\x82\x91a0\x05\x91\x83a-\xB5V[\x03\x90\xA2V[a0\x1Ea0\x17`\x0Ea \x85V[\x82\x90a-\x80V[a04`\x01a0/`\x0F\x84\x90a\x0E\x10V[a\x1F\xA7V[\x80\x82\x90\x84a0b\x7F\xDB\x03\xF9}\xC5\x84\nq\xE6\x9B\xE7G\x0EGa\xAF\x10\xA1#ys\xE8\x1C\x12\xD0\xDC(\x13\x89Ze&\x92a\n<V[\x92a0wa0na\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2a/&V[_c\xD9.#=`\xE0\x1B\x81R\x80a0\x97`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a0\xA6\x92\x91a-cV[V[a0\xB0a\x1E\xEBV[Pa0\xBB`\x0Ea\x16\x8FV[\x90V[_\x90V[a0\xD4\x90a0\xCEa0\xBEV[PaGwV[\x90V[\x90a0\xE1\x90a\n<V[_R` R`@_ \x90V[a1\x03a1\x08\x91a0\xFCa\x1E\xEBV[P_a0\xD7V[a\nzV[\x90V[``\x90V[` \x91\x81R\x01\x90V[a1#\x90Ta,#V[\x90V[`\x01\x01\x90V[\x90a1Ia1Ca1<\x84a\x16\x8FV[\x80\x93a1\x10V[\x92a\x16\x93V[\x90_[\x81\x81\x10a1YWPPP\x90V[\x90\x91\x92a1ya1s`\x01\x92a1n\x87a1\x19V[a\x0FSV[\x94a1&V[\x91\x01\x91\x90\x91a1LV[\x90a1\x8D\x91a1,V[\x90V[\x90a1\xB0a1\xA9\x92a1\xA0a\x04\x02V[\x93\x84\x80\x92a1\x83V[\x03\x83a#\xD2V[V[a1\xBB\x90a1\x90V[\x90V[a1\xC6a1\x0BV[Pa1\xD1`\x0Ea1\xB2V[\x90V[a1\xDCa\x1D\xD2V[Pa2\x04a1\xFFa1\xF7a1\xF2`\r\x85\x90a\nHV[a(3V[\x92`\x0Fa\x0E\x10V[a\n\xA1V[\x90\x81a2\x0FW[P\x90V[a2\x1C\x91P`\xC0\x01a.\x1BV[_a2\x0BV[\x90a2<\x91a27a22a\x12\xE9V[a=/V[a2>V[V[\x80a2Ya2Sa2N_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a3\x1DW\x81a2qa2k_a\x1F\xC7V[\x91a\x05\xF8V[\x14a3\x01Wa2\x87a2\x81a3\xD2V[\x15a\x04]V[a2\xE5Wa2\x96\x81\x83\x90aA\xD9V[3\x90a2\xE0a2\xCEa2\xC8\x7F\xBE\xF4\xF8\x1C\x18\x14\xC6A\xED\xE8^\xBA\xAC\xF1\x9D\x04\x8B,[U\x98\n\xDF\xA6\xEF\x0F\x95le\x135\xA2\x93a\n<V[\x93a\n<V[\x93a2\xD7a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[_c\xB8\xB5\xCA-`\xE0\x1B\x81R\x80a2\xFD`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a3\x19`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a35`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a3C\x91a2\"V[V[a3Ma\x1E\xEBV[Pa3X`\x0Ca\nzV[a3ja3d_a\x1F\xC7V[\x91a\x05\xF8V[\x14\x80\x15a3\x99W[a3\x8DWa3\x8Aa3\x83`\x0Ca\nzV[B\x90a \x11V[\x90V[a3\x96_a\x1F\xC7V[\x90V[PBa3\xB6a3\xB0a3\xAB`\x0Ca\nzV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a3rV[a3\xCF\x90a3\xC9a\x1E\xEBV[PaG\xA6V[\x90V[a3\xDAa\x1D\xD2V[Pa3\xE5`\x0Ca\nzV[a3\xF7a3\xF1_a\x1F\xC7V[\x91a\x05\xF8V[\x14\x15\x80a4\x02W[\x90V[PBa4\x1Fa4\x19a4\x14`\x0Ca\nzV[a\x05\xF8V[\x91a\x05\xF8V[\x10a3\xFFV[a4>\x90a49a44a\x16/V[a=/V[a4@V[V[\x80a4Sa4MBa\x05\xF8V[\x91a\x05\xF8V[\x11\x15a5\tW\x80a4\x8Ca4\x86\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x05\xF8V[\x91a\x05\xF8V[\x11a4\xEDWa4\x9B`\x0Ca\nzV[a4\xA6\x82`\x0Ca-\xFBV[\x903\x90a4\xD3\x7F\xDDh\x96\xDC\xF1\xD4\xB3\x11\xCC\xA8}\xD1\x9B\xBB\xA2\xEA\x9C\xE2\xF8g\xC1V\x88x\xA0C\x8Af\xA1\xAF\xEE\xEC\x92a\n<V[\x92a4\xE8a4\xDFa\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2V[_c\xEFi\xAFe`\xE0\x1B\x81R\x80a5\x05`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[_c\xA5e\x83S`\xE0\x1B\x81R\x80a5!`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[a5.\x90a4%V[V[_\x90V[``\x90V[a5B\x90a\n0V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a5]W` \x80\x91\x02\x01\x90V[a#\xBEV[\x90a5ta5o\x83a5EV[a'`V[\x91\x82RV[6\x907V[\x90a5\xA3a5\x8B\x83a5bV[\x92` \x80a5\x99\x86\x93a5EV[\x92\x01\x91\x03\x90a5yV[V[`\x0F`\xF8\x1B\x90V[a5\xB5a50V[Pa5\xBEa\"\xD0V[Pa5\xC7a\"\xD0V[Pa5\xD0a\x1E\xEBV[Pa5\xD9a \xD1V[Pa5\xE2a%{V[Pa5\xEBa54V[Pa5\xF4aG\xBEV[\x90a5\xFDaG\xFEV[\x90F\x90a6\t0a59V[\x90a6\x13_a\x16\x13V[\x90a6%a6 _a\x1F\xC7V[a5~V[\x90a6.a5\xA5V[\x96\x95\x94\x93\x92\x91\x90V[a6`a6e\x91a6Fa\x1E\xEBV[Pa6Za6T`\x0Ba)\xC4V[\x91aD\x7FV[\x90aEuV[a)\xC7V[\x90V[a6\x8F\x91_a6\x84a6\x8A\x93a6|a\x1D\xD2V[P`\x05a%\x8BV[\x01a\x0E\x10V[a\n\xA1V[\x90V[_\x90V[a6\x9Ea6\x92V[Pa6\xA7aF\x9CV[\x90V[a6\xC1a6\xC6\x91a6\xB9a\x1E\xEBV[P`\ra\nHV[a(3V[Ba6\xF9a6\xF3a6\xEEa6\xDC`@\x86\x01a(?V[a6\xE8b\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a7#W\x80a7\x1A`\x80a7\x13_a7 \x95\x01a(?V[\x92\x01a(?V[\x90a \x11V[\x90V[_a7.\x91\x01a(?V[\x90V[a79a\"\xD0V[Pa7D`\x04a$\x1DV[\x90V[a7na7ia7da7s\x93a7\\a\x1E\xEBV[P`\na)\xAEV[a)\xC4V[aH>V[a)\xC7V[\x90V[a7\x93\x91a7\x82a\x1D\xD2V[Pa7\x8Ba=CV[\x91\x90\x91a?\xE4V[`\x01\x90V[\x90a7\xAB\x91a7\xA5a\x1E\xEBV[Pa)\xE3V[\x90V[a7\xC0\x90a7\xBAa\x1E\xEBV[Pa7GV[\x90V[a7\xCBa\x1E\xEBV[Pa7\xD4a$aV[\x90V[\x7F\xE4\x83)\x05{\xFD\x03\xD5^I\xB5G\x13.9\xCF\xFD\x9C\x18 \xAD{\x9DLS\x07i\x14%\xD1Z\xDF\x90V[a80a87\x94a8&``\x94\x98\x97\x95a8\x1C`\x80\x86\x01\x9A_\x87\x01\x90a\x07\xC0V[` \x85\x01\x90a\x0C\x90V[`@\x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[` \x01\x90V[Q\x90V[\x93\x95\x94\x90\x92\x91\x95Ba8]a8W\x89a\x05\xF8V[\x91a\x05\xF8V[\x11a8\xD6W\x91a8\xC8\x91a8\xCF\x93a8\xBFa8\xD4\x98\x99a8\xA7a8~a7\xD7V[a8\x98\x8B\x93\x8Ba8\x8Ca\x04\x02V[\x95\x86\x94` \x86\x01a7\xFBV[` \x82\x01\x81\x03\x82R\x03\x82a#\xD2V[a8\xB9a8\xB3\x82a8?V[\x91a89V[ aH\xB3V[\x92\x90\x91\x92aH\xD0V[\x91\x82aI\x1AV[aF\xECV[V[a8\xF1\x87_\x91\x82\x91c#A\xD7\x87`\xE1\x1B\x83R`\x04\x83\x01a\x06\x8EV[\x03\x90\xFD[_\x90V[_\x90V[a9\x05a'uV[\x90` \x80\x80\x80\x80\x80\x80\x88a9\x17a8\xF5V[\x81R\x01a9\"a8\xF5V[\x81R\x01a9-a8\xF5V[\x81R\x01a98a8\xF5V[\x81R\x01a9Ca8\xF5V[\x81R\x01a9Na8\xF5V[\x81R\x01a9Ya8\xF9V[\x81RPPV[a9ga8\xFDV[\x90V[a9\x81a9\x86\x91a9ya9_V[P`\ra\nHV[a(3V[\x90V[\x90a9\xA3\x91a9\x9Ea9\x99a\x1C\xD5V[a=/V[a9\xA5V[V[\x80a9\xC0a9\xBAa9\xB5_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a:aWa9\xE2a9\xDCa9\xD7`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[a:BWa9\xFE\x82`\x06a9\xF8`\r\x85\x90a\nHV[\x01a\x1F\xA7V[a:=a:+\x7F\x9C\x86h\xDB2HE\x06]+\x9A*\x18;\xD3\x14\x1Fc\x01\x8FT\x82\x82\xDA\xF1\x8D\xA4\x9C\xCB\xF8\x8C3\x92a\n<V[\x92a:4a\x04\x02V[\x91\x82\x91\x82a\x04oV[\x03\x90\xA2V[a:]\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a:y`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x90a:\x87\x91a9\x89V[V[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x90V[\x91\x94a:\xF5a:\xFF\x92\x98\x97\x95a:\xEB`\xA0\x96a:\xE1a;\x06\x9Aa:\xD7`\xC0\x8A\x01\x9E_\x8B\x01\x90a\x07\xC0V[` \x89\x01\x90a\x0C\x90V[`@\x87\x01\x90a\x0C\x90V[``\x85\x01\x90a\x06\x81V[`\x80\x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[\x91` a;)\x92\x94\x93a;\"`@\x82\x01\x96_\x83\x01\x90a\x0C\x90V[\x01\x90a\x0C\x90V[V[\x96\x95\x91\x93\x92\x94\x90\x94Ba;Fa;@\x83a\x05\xF8V[\x91a\x05\xF8V[\x11a<\0W\x90a;\xAFa;\xB8\x94\x93\x92a;\x97a;`a:\x89V[a;\x88\x8C\x80\x94\x8C\x91a;r\x8D\x91aI]V[\x91\x92a;|a\x04\x02V[\x97\x88\x96` \x88\x01a:\xADV[` \x82\x01\x81\x03\x82R\x03\x82a#\xD2V[a;\xA9a;\xA3\x82a8?V[\x91a89V[ aH\xB3V[\x92\x90\x91\x92aH\xD0V[\x80a;\xCBa;\xC5\x87a\x04\xC4V[\x91a\x04\xC4V[\x03a;\xE0WPa;\xDE\x92\x93\x91\x90\x91a=PV[V[\x84\x90a;\xFC_\x92\x83\x92c%\xC0\x07#`\xE1\x1B\x84R`\x04\x84\x01a;\x08V[\x03\x90\xFD[a<\x1B\x90_\x91\x82\x91c1<\x89\x81`\xE1\x1B\x83R`\x04\x83\x01a\x06\x8EV[\x03\x90\xFD[\x90a<:\x91a<5a<0\x82a%\xC5V[a=/V[a<<V[V[\x90a<F\x91aC\x9EV[PV[\x90a<S\x91a<\x1FV[V[\x90a<_\x90a\n<V[_R` R`@_ \x90V[a<\x90\x91a<\x86a<\x8B\x92a<~a\x1E\xEBV[P`\x01a<UV[a0\xD7V[a\nzV[\x90V[a<\x9D`@a'`V[\x90V[_\x90V[_\x90V[a<\xB0a<\x93V[\x90` \x80\x83a<\xBDa<\xA0V[\x81R\x01a<\xC8a<\xA4V[\x81RPPV[a<\xD6a<\xA8V[\x90V[\x90a<\xEC\x91a<\xE6a<\xCEV[PaI\x90V[\x90V[a<\xF7a\x1D\xD2V[P\x80a=\x12a=\x0Ccye\xDB\x0B`\xE0\x1Ba\x04\x10V[\x91a\x04\x10V[\x14\x90\x81\x15a=\x1FW[P\x90V[a=)\x91PaI\xB8V[_a=\x1BV[a=A\x90a=;a=CV[\x90aJ\x01V[V[a=Ka \xD1V[P3\x90V[\x91a=^\x92\x91`\x01\x92aJ<V[V[\x90V[`@\x90a=\x8Ca=\x93\x94\x96\x95\x93\x96a=\x82``\x84\x01\x98_\x85\x01\x90a\x0C\x90V[` \x83\x01\x90a\x06\x81V[\x01\x90a\x06\x81V[V[\x90a=\xAAa=\xA5`\r\x84\x90a\nHV[a=`V[\x91a=\xC8a=\xC2a=\xBD`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[\x80\x15a>\xD1W[a>\xB2WBa>\x06a>\0a=\xFBa=\xE9`\x02\x88\x01a\nzV[a=\xF5b\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15a>\x8BW[a>-a>\x1B_\x85\x01a\nzV[a>'`\x04\x86\x01a\nzV[\x90a \x11V[\x90\x82a>Aa>;\x84a\x05\xF8V[\x91a\x05\xF8V[\x11a>kWPP\x90a>c`\x04a>i\x93\x92\x01\x91a>^\x83a\nzV[a(kV[\x90a-\xFBV[V[a>\x87\x83\x92_\x93\x84\x93c@\xED6{`\xE0\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[a>\xA0a>\x97_a\x1F\xC7V[`\x04\x85\x01a-\xFBV[a>\xADB`\x02\x85\x01a-\xFBV[a>\rV[a>\xCD\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[Pa>\xE7a>\xE1`\x06\x85\x01a\n\xA1V[\x15a\x04]V[a=\xCFV[\x80a?\x07a?\x01a>\xFC_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a?#Wa?!\x91a?\x19_a\x1EuV[\x91\x90\x91aKKV[V[a?Fa?/_a\x1EuV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[\x90a?U\x91\x03a\x05\xF8V[\x90V[\x92\x91\x92a?f\x81\x83\x90a<kV[\x90\x81a?{a?u_\x19a\x05\xF8V[\x91a\x05\xF8V[\x10a?\x88W[PPP\x90PV[\x81a?\x9Ba?\x95\x87a\x05\xF8V[\x91a\x05\xF8V[\x10a?\xC1Wa?\xB8\x93\x94a?\xB0\x91\x93\x92a?JV[\x90_\x92aJ<V[\x80_\x80\x80a?\x81V[Pa?\xE0\x84\x92\x91\x92_\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[\x91\x82a@\0a?\xFAa?\xF5_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a@ZW\x81a@ a@\x1Aa@\x15_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a@3Wa@1\x92\x91\x90\x91aKKV[V[a@Va@?_a\x1EuV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[a@}a@f_a\x1EuV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[\x90a@\x96a@\x91`\r\x84\x90a\nHV[a=`V[\x91a@\xB4a@\xAEa@\xA9`\x0F\x84\x90a\x0E\x10V[a\n\xA1V[\x15a\x04]V[\x80\x15aA\xBEW[aA\x9FWBa@\xF2a@\xECa@\xE7a@\xD5`\x03\x88\x01a\nzV[a@\xE1b\x01Q\x80a(OV[\x90a(kV[a\x05\xF8V[\x91a\x05\xF8V[\x10\x15aAxW[aA\x1AaA\x08`\x01\x85\x01a\nzV[aA\x14`\x05\x86\x01a\nzV[\x90a \x11V[\x90\x82aA.aA(\x84a\x05\xF8V[\x91a\x05\xF8V[\x11aAXWPP\x90aAP`\x05aAV\x93\x92\x01\x91aAK\x83a\nzV[a(kV[\x90a-\xFBV[V[aAt\x83\x92_\x93\x84\x93cr\xFFK\xD1`\xE1\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[aA\x8DaA\x84_a\x1F\xC7V[`\x05\x85\x01a-\xFBV[aA\x9AB`\x03\x85\x01a-\xFBV[a@\xF9V[aA\xBA\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[PaA\xD4aA\xCE`\x06\x85\x01a\n\xA1V[\x15a\x04]V[a@\xBBV[\x90\x81aA\xF5aA\xEFaA\xEA_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aB\x11WaB\x0F\x91\x90aB\x08_a\x1EuV[\x90\x91aKKV[V[aB4aB\x1D_a\x1EuV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[aB@a\x1D\xD2V[PaBUaBO\x82\x84\x90a6hV[\x15a\x04]V[_\x14aB\xDEWaB}`\x01aBx_aBp`\x05\x86\x90a%\x8BV[\x01\x85\x90a\x0E\x10V[a\x1F\xA7V[\x90aB\x86a=CV[\x90aB\xC3aB\xBDaB\xB7\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a%\x7FV[\x92a\n<V[\x92a\n<V[\x92aB\xCCa\x04\x02V[\x80aB\xD6\x81a\x05\x11V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aB\xECa%{V[PaB\xF60a59V[aC(aC\"\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\xC4V[\x91a\x04\xC4V[\x14\x80aCdW[_\x14aCYW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[aCaaLfV[\x90V[PFaC\x98aC\x92\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x05\xF8V[\x91a\x05\xF8V[\x14aC/V[aC\xA6a\x1D\xD2V[PaC\xB2\x81\x83\x90a6hV[_\x14aD:WaC\xD9_aC\xD4_aC\xCC`\x05\x86\x90a%\x8BV[\x01\x85\x90a\x0E\x10V[a\x1F\xA7V[\x90aC\xE2a=CV[\x90aD\x1FaD\x19aD\x13\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a%\x7FV[\x92a\n<V[\x92a\n<V[\x92aD(a\x04\x02V[\x80aD2\x81a\x05\x11V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aDTaDOaDY\x92a\x14\x93V[a\n\x11V[a\x05\xF8V[\x90V[\x91` aD}\x92\x94\x93aDv`@\x82\x01\x96_\x83\x01\x90a\x06\x81V[\x01\x90a\x14\x9EV[V[aD\x87a6\x92V[PaD\x90a6\x96V[\x81aD\xA3aD\x9D\x83aD@V[\x91a\x05\xF8V[\x10\x15aD\xB6WPaD\xB3\x90aMoV[\x90V[\x90aD\xD1_\x92\x83\x92cvi\xFC\x0F`\xE1\x1B\x84R`\x04\x84\x01aD\\V[\x03\x90\xFD[T\x90V[\x90V[aD\xF0aD\xEBaD\xF5\x92aD\xD9V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[aE\x12aE\x17\x91a\n^V[aD\xFBV[\x90V[aE$\x90TaE\x06V[\x90V[`0\x1C\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[aEDaEI\x91aE'V[aE-V[\x90V[aEV\x90TaE8V[\x90V[aEmaEhaEr\x92a\x16\x0BV[a\n\x11V[a\x1CNV[\x90V[\x90aE\xC9\x90aE\x82a\x1D=V[PaE\x8E_\x84\x01aD\xD5V[aE\x97_a\x1F\xC7V[\x90\x80\x80aE\xADaE\xA7`\x05aD\xDCV[\x91a\x05\xF8V[\x11aF*W[P\x90aE\xC4_\x86\x01\x93\x91\x92\x93aD\xF8V[aS\xBEV[\x80aE\xDCaE\xD6_a\x1F\xC7V[\x91a\x05\xF8V[\x14_\x14aE\xF2WPPaE\xEE_aEYV[[\x90V[aF\x1F_\x91aF\x1AaF\x14\x84aF%\x96\x01\x92aF\x0E`\x01a\x1F\xF5V[\x90a \x11V[\x91aD\xF8V[aS\xB4V[\x01aELV[aE\xEFV[\x80aF8aF>\x92\x91aPIV[\x90a \x11V[\x90\x83aFpaFjaFe_aF_\x81\x8C\x01aFZ\x89\x91aD\xF8V[aS\xB4V[\x01aE\x1AV[a\x14\x93V[\x91a\x14\x93V[\x10_\x14aF\x81WP\x90[\x90_aE\xB3V[\x91PaF\x97\x90aF\x91`\x01a\x1F\xF5V[\x90a(kV[aFzV[aF\xA4a6\x92V[PaF\xAECaMoV[\x90V[\x90aF\xC2`\x01\x80`\xA0\x1B\x03\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90aF\xE1aF\xDCaF\xE8\x92a\n<V[a `V[\x82TaF\xB1V[\x90UV[\x90aGu\x91aGoaF\xFD\x82a,DV[aG\x12\x84aG\r`\t\x86\x90a,\rV[aF\xCCV[\x82\x81\x85\x90aGRaGLaGF\x7F14\xE8\xA2\xE6\xD9~\x92\x9A~T\x01\x1E\xA5H]}\x19m\xD5\xF0\xBAMN\xF9X\x03\xE8\xE3\xFC%\x7F\x95a\n<V[\x92a\n<V[\x92a\n<V[\x92aG[a\x04\x02V[\x80aGe\x81a\x05\x11V[\x03\x90\xA4\x92\x91aTMV[\x91aTeV[V[aG\x9EaG\x99aG\x94aG\xA3\x93aG\x8Ca0\xBEV[P`\na)\xAEV[a)\xC4V[aV\x13V[aV\x92V[\x90V[aG\xB8\x90aG\xB2a\x1E\xEBV[PaV\xE3V[\x90V[\x90V[aG\xC6a\"\xD0V[PaG\xFB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aG\xF5`\x06aG\xBBV[\x90aW\xFEV[\x90V[aH\x06a\"\xD0V[PaH;\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aH5`\x07aG\xBBV[\x90aW\xFEV[\x90V[aHFa\x1D=V[PaHR_\x82\x01aD\xD5V[\x80aHeaH__a\x1F\xC7V[\x91a\x05\xF8V[\x14_\x14aH{WPPaHw_aEYV[[\x90V[aH\xA8_\x91aH\xA3aH\x9D\x84aH\xAE\x96\x01\x92aH\x97`\x01a\x1F\xF5V[\x90a \x11V[\x91aD\xF8V[aS\xB4V[\x01aELV[aHxV[aH\xCD\x90aH\xBFa%{V[PaH\xC8aB\xE4V[aXLV[\x90V[\x92aH\xEB\x92aH\xF4\x94aH\xE1a \xD1V[P\x92\x90\x91\x92aY\x12V[\x90\x92\x91\x92aZ=V[\x90V[\x91` aI\x18\x92\x94\x93aI\x11`@\x82\x01\x96_\x83\x01\x90a\x0C\x90V[\x01\x90a\x06\x81V[V[aI#\x81aI]V[\x91aI6aI0\x84a\x05\xF8V[\x91a\x05\xF8V[\x03aI?WPPV[aIY_\x92\x83\x92c\x01\xD4\xB6#`\xE6\x1B\x84R`\x04\x84\x01aH\xF7V[\x03\x90\xFD[aIq\x90aIia\x1E\xEBV[P`\x08a0\xD7V[aI\x8DaI}\x82a\nzV[\x91aI\x87\x83a\x1F\xE3V[\x90a-\xFBV[\x90V[\x90aI\xB0aI\xABaI\xB5\x93aI\xA3a<\xCEV[P`\na)\xAEV[a)\xC4V[a[\x9FV[\x90V[aI\xC0a\x1D\xD2V[PaI\xDAaI\xD4c\x01\xFF\xC9\xA7`\xE0\x1Ba\x04\x10V[\x91a\x04\x10V[\x14\x90V[\x91` aI\xFF\x92\x94\x93aI\xF8`@\x82\x01\x96_\x83\x01\x90a\x0C\x90V[\x01\x90a\x07\xC0V[V[\x90aJ\x16aJ\x10\x83\x83\x90a6hV[\x15a\x04]V[aJ\x1EWPPV[aJ8_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01aI\xDEV[\x03\x90\xFD[\x90\x92\x81aJYaJSaJN_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aK$W\x83aJyaJsaJn_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aJ\xFDWaJ\x9D\x83aJ\x98aJ\x91`\x01\x86\x90a<UV[\x87\x90a0\xD7V[a-\xFBV[aJ\xA7W[PPPV[\x91\x90\x91aJ\xF2aJ\xE0aJ\xDA\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\n<V[\x93a\n<V[\x93aJ\xE9a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3_\x80\x80aJ\xA2V[aK aK\t_a\x1EuV[_\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[aKGaK0_a\x1EuV[_\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\x0C\x9DV[\x03\x90\xFD[\x91\x82aKgaKaaK\\_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14\x15\x80aK\xD2W[aK\x82W[aK\x80\x92\x91\x90\x91a[\xC0V[V[aK\x8Aa3\xD2V[\x80aK\xB1W[\x15aKtW_c6\xE2x\xFD`\xE2\x1B\x81R\x80aK\xAD`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[PaK\xCDaK\xC7aK\xC0a\x12\xE9V[3\x90a6hV[\x15a\x04]V[aK\x90V[P\x81aK\xEEaK\xE8aK\xE3_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14\x15aKoV[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[\x90\x95\x94\x92aLd\x94aLSaL]\x92aLI`\x80\x96aL?`\xA0\x88\x01\x9C_\x89\x01\x90a\x07\xC0V[` \x87\x01\x90a\x07\xC0V[`@\x85\x01\x90a\x07\xC0V[``\x83\x01\x90a\x06\x81V[\x01\x90a\x0C\x90V[V[aLna%{V[PaLwaK\xF5V[aL\xEE\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91aL\xDF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0FaL\xCA0a59V[\x91aL\xD3a\x04\x02V[\x96\x87\x95` \x87\x01aL\x19V[` \x82\x01\x81\x03\x82R\x03\x82a#\xD2V[aM\0aL\xFA\x82a8?V[\x91a89V[ \x90V[\x90V[aM\x1BaM\x16aM \x92aM\x04V[a\n\x11V[a\x08\xE1V[\x90V[aM,\x90aM\x07V[\x90RV[\x91` aMQ\x92\x94\x93aMJ`@\x82\x01\x96_\x83\x01\x90aM#V[\x01\x90a\x06\x81V[V[aMgaMbaMl\x92a\x05\xF8V[a\n\x11V[a\x14\x93V[\x90V[aMwa6\x92V[P\x80aM\x91aM\x8Be\xFF\xFF\xFF\xFF\xFF\xFFaD@V[\x91a\x05\xF8V[\x11aM\xA2WaM\x9F\x90aMSV[\x90V[`0aM\xBE_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01aM0V[\x03\x90\xFD[\x90V[aM\xD9aM\xD4aM\xDE\x92aM\xC2V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aM\xF8aM\xF3aM\xFD\x92aM\xE1V[a\n\x11V[a\x08\xE1V[\x90V[aN\x1F\x90aN\x19aN\x13aN$\x94a\x08\xE1V[\x91a\x05\xF8V[\x90a\x0E&V[a\x05\xF8V[\x90V[\x90V[aN>aN9aNC\x92aN'V[a\n\x11V[a\x08\xE1V[\x90V[aNe\x90aN_aNYaNj\x94a\x08\xE1V[\x91a\x05\xF8V[\x90a\x1E\x81V[a\x05\xF8V[\x90V[\x90V[aN\x84aN\x7FaN\x89\x92aNmV[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aN\xA3aN\x9EaN\xA8\x92aN\x8CV[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aN\xC2aN\xBDaN\xC7\x92aN\xABV[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aN\xE1aN\xDCaN\xE6\x92aN\xCAV[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aO\0aN\xFBaO\x05\x92aN\xE9V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aO\x1FaO\x1AaO$\x92aO\x08V[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aO>aO9aOC\x92aO'V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aO]aOXaOb\x92aOFV[a\n\x11V[a\x08\xE1V[\x90V[aOyaOtaO~\x92aN\xCAV[a\n\x11V[a\x05\xF8V[\x90V[\x90V[aO\x98aO\x93aO\x9D\x92aO\x81V[a\n\x11V[a\x08\xE1V[\x90V[aO\xB4aO\xAFaO\xB9\x92aOFV[a\n\x11V[a\x05\xF8V[\x90V[aO\xD0aO\xCBaO\xD5\x92a\x1F\xF2V[a\n\x11V[a\x08\xE1V[\x90V[\x90V[aO\xEFaO\xEAaO\xF4\x92aO\xD8V[a\n\x11V[a\x05\xF8V[\x90V[\x90aP\x02\x91\x02a\x05\xF8V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[aP%aP+\x91a\x05\xF8V[\x91a\x05\xF8V[\x90\x81\x15aP6W\x04\x90V[aP\x05V[\x90aPF\x91\x01a\x05\xF8V[\x90V[aPQa\x1E\xEBV[P\x80aPfaP``\x01a\x1F\xF5V[\x91a\x05\xF8V[\x11\x15aS\xB1W\x80aR{aRXaRHaR8aR(aR\x18aR\x08aQ\xF8aQ\xE8aQ\xD8aQ\xC8\x8BaQ\xC2aQ\xBBaR\x81\x9FaQ\x9BaQ\x8BaQ\xAB\x92aP\xAD`\x01a\x1F\xF5V[\x90\x80aP\xC5aP\xBF`\x01`\x80\x1BaM\xC5V[\x91a\x05\xF8V[\x10\x15aS\x83W[\x80aP\xE8aP\xE2h\x01\0\0\0\0\0\0\0\0aNpV[\x91a\x05\xF8V[\x10\x15aSUW[\x80aQ\x07aQ\x01d\x01\0\0\0\0aN\xAEV[\x91a\x05\xF8V[\x10\x15aS'W[\x80aQ$aQ\x1Eb\x01\0\0aN\xECV[\x91a\x05\xF8V[\x10\x15aR\xF9W[\x80aQ@aQ:a\x01\0aO*V[\x91a\x05\xF8V[\x10\x15aR\xCBW[\x80aQ[aQU`\x10aOeV[\x91a\x05\xF8V[\x10\x15aR\x9DW[aQuaQo`\x04aO\xA0V[\x91a\x05\xF8V[\x10\x15aR\x84W[aQ\x86`\x03aO\xDBV[aO\xF7V[aQ\x95`\x01aO\xBCV[\x90aN\0V[aQ\xA5\x81\x86aP\x19V[\x90aP;V[aQ\xB5`\x01aO\xBCV[\x90aN\0V[\x80\x92aP\x19V[\x90aP;V[aQ\xD2`\x01aO\xBCV[\x90aN\0V[aQ\xE2\x81\x8CaP\x19V[\x90aP;V[aQ\xF2`\x01aO\xBCV[\x90aN\0V[aR\x02\x81\x8AaP\x19V[\x90aP;V[aR\x12`\x01aO\xBCV[\x90aN\0V[aR\"\x81\x88aP\x19V[\x90aP;V[aR2`\x01aO\xBCV[\x90aN\0V[aRB\x81\x86aP\x19V[\x90aP;V[aRR`\x01aO\xBCV[\x90aN\0V[\x91aRuaRoaRj\x85\x80\x94aP\x19V[a\x05\xF8V[\x91a\x05\xF8V[\x11a\\PV[\x90a?JV[\x90V[aR\x98\x90aR\x92`\x01aO\xBCV[\x90aNFV[aQ|V[aR\xB4aR\xC5\x91aR\xAE`\x04aOIV[\x90aN\0V[\x91aR\xBF`\x02aO\x84V[\x90aNFV[\x90aQbV[aR\xE2aR\xF3\x91aR\xDC`\x08aO\x0BV[\x90aN\0V[\x91aR\xED`\x04aOIV[\x90aNFV[\x90aQGV[aS\x10aS!\x91aS\n`\x10aN\xCDV[\x90aN\0V[\x91aS\x1B`\x08aO\x0BV[\x90aNFV[\x90aQ+V[aS>aSO\x91aS8` aN\x8FV[\x90aN\0V[\x91aSI`\x10aN\xCDV[\x90aNFV[\x90aQ\x0EV[aSlaS}\x91aSf`@aN*V[\x90aN\0V[\x91aSw` aN\x8FV[\x90aNFV[\x90aP\xEFV[aS\x9AaS\xAB\x91aS\x94`\x80aM\xE4V[\x90aN\0V[\x91aS\xA5`@aN*V[\x90aNFV[\x90aP\xCCV[\x90V[_R` _ \x01\x90V[\x93\x91\x90\x92aS\xCAa\x1E\xEBV[P[\x81aS\xDFaS\xD9\x83a\x05\xF8V[\x91a\x05\xF8V[\x10\x15aTEWaS\xF0\x82\x82\x90a\\\x9CV[\x90aT\x06_aT\0\x88\x85\x90aS\xB4V[\x01aE\x1AV[aT\x18aT\x12\x87a\x14\x93V[\x91a\x14\x93V[\x11_\x14aT(WP\x91[\x91aS\xCCV[\x92\x91PaT?\x90aT9`\x01a\x1F\xF5V[\x90a(kV[\x90aT\"V[\x92PP\x91P\x90V[aT_\x90aTYa\x1E\xEBV[Pa0\xEDV[\x90V[\x90V[\x91\x90\x91\x80aT{aTu\x85a\x04\xC4V[\x91a\x04\xC4V[\x14\x15\x80aU\xF9W[aT\x8DW[PPPV[\x80aT\xA8aT\xA2aT\x9D_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x03aUiW[P\x81aT\xCAaT\xC4aT\xBF_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x03aT\xD6W[\x80aT\x88V[aU\x1DaU\x10aU\x17\x92aT\xEC`\n\x86\x90a)\xAEV[\x90aU\naU\x04aT\xFE`\x01\x93a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[\x92\x90a)\xC7V[\x91a)\xC7V[\x91\x90\x91aUJ\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\n<V[\x92aU_aUVa\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2_\x80aT\xD0V[aU\xA8aU\xAEaU\xA1aU~`\n\x85\x90a)\xAEV[`\x02aU\x9BaU\x95aU\x8F\x89a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[\x92\x90a)\xC7V[\x91a)\xC7V[\x91\x90\x91aU\xDB\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\n<V[\x92aU\xF0aU\xE7a\x04\x02V[\x92\x83\x92\x83a-\xB5V[\x03\x90\xA2_aT\xAEV[P\x81aV\raV\x07_a\x1F\xC7V[\x91a\x05\xF8V[\x11aT\x83V[_aV'\x91aV a\x1E\xEBV[P\x01aD\xD5V[\x90V[aV>aV9aVC\x92a\x0E\x9EV[a\n\x11V[a\x05\xF8V[\x90V[aVO\x90aN\x8FV[\x90RV[\x91` aVt\x92\x94\x93aVm`@\x82\x01\x96_\x83\x01\x90aVFV[\x01\x90a\x06\x81V[V[aV\x8AaV\x85aV\x8F\x92a\x05\xF8V[a\n\x11V[a\x0E\x9EV[\x90V[aV\x9Aa0\xBEV[P\x80aV\xB2aV\xACc\xFF\xFF\xFF\xFFaV*V[\x91a\x05\xF8V[\x11aV\xC3WaV\xC0\x90aVvV[\x90V[` aV\xDF_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01aVSV[\x03\x90\xFD[aV\xFAaV\xFF\x91aV\xF2a\x1E\xEBV[P`\x08a0\xD7V[a\nzV[\x90V[\x90V[aW\x19aW\x14aW\x1E\x92aW\x02V[a\x16\x0EV[a\x07|V[\x90V[aW+`\xFFaW\x05V[\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90aWQaWJ\x83a\"\xE9V[\x80\x94a#\x13V[\x91`\x01\x81\x16\x90\x81_\x14aW\xA8WP`\x01\x14aWlW[PPPV[aWy\x91\x92\x93\x94PaW.V[\x91_\x92[\x81\x84\x10aW\x90WPP\x01\x90_\x80\x80aWgV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90aW}V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80aWgV[\x90aW\xCD\x91aW7V[\x90V[\x90aW\xF0aW\xE9\x92aW\xE0a\x04\x02V[\x93\x84\x80\x92aW\xC3V[\x03\x83a#\xD2V[V[aW\xFB\x90aW\xD0V[\x90V[\x90aX\x07a\"\xD0V[PaX\x11\x82a%\x7FV[aX*aX$aX\x1FaW!V[a\x07|V[\x91a\x07|V[\x14\x15_\x14aX?WPaX<\x90a^\x12V[\x90V[aXI\x91PaW\xF2V[\x90V[`B\x91aXWa%{V[P`@Q\x91\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x02\x83\x01R`\"\x82\x01R \x90V[_\x90V[aX\x9DaX\xA2\x91a\n^V[a\x1E\xAAV[\x90V[\x90V[aX\xBCaX\xB7aX\xC1\x92aX\xA5V[a\n\x11V[a\x05\xF8V[\x90V[aX\xF9aY\0\x94aX\xEF``\x94\x98\x97\x95aX\xE5`\x80\x86\x01\x9A_\x87\x01\x90a\x07\xC0V[` \x85\x01\x90a\x08\xE7V[`@\x83\x01\x90a\x07\xC0V[\x01\x90a\x07\xC0V[V[aY\na\x04\x02V[=_\x82>=\x90\xFD[\x93\x92\x93aY\x1Da \xD1V[PaY&aX\x8DV[PaY/a%{V[PaY9\x85aX\x91V[aYkaYe\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0aX\xA8V[\x91a\x05\xF8V[\x11aY\xF8W\x90aY\x8E` \x94\x95_\x94\x93\x92\x93aY\x85a\x04\x02V[\x94\x85\x94\x85aX\xC4V[\x83\x80R\x03\x90`\x01Z\xFA\x15aY\xF3WaY\xA6_Qa\x16\x0EV[\x80aY\xC1aY\xBBaY\xB6_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14aY\xD7W_\x91aY\xD1_a\x16\x13V[\x91\x92\x91\x90V[PaY\xE1_a\x1EuV[`\x01\x91aY\xED_a\x16\x13V[\x91\x92\x91\x90V[aY\x02V[PPPaZ\x04_a\x1EuV[\x90`\x03\x92\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15aZ,WV[aZ\x0EV[\x90aZ;\x82aZ\"V[V[\x80aZPaZJ_aZ1V[\x91aZ1V[\x14_\x14aZ[WPPV[\x80aZoaZi`\x01aZ1V[\x91aZ1V[\x14_\x14aZ\x92W_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80aZ\x8E`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[\x80aZ\xA6aZ\xA0`\x02aZ1V[\x91aZ1V[\x14_\x14aZ\xD4WaZ\xD0aZ\xB9\x83aX\x91V[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06\x8EV[\x03\x90\xFD[aZ\xE7aZ\xE1`\x03aZ1V[\x91aZ1V[\x14aZ\xEFWPV[a[\n\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a\x07\xCDV[\x03\x90\xFD[_R` _ \x90V[a[ \x81aD\xD5V[\x82\x10\x15a[:Wa[2`\x01\x91a[\x0EV[\x91\x02\x01\x90_\x90V[a\x16{V[\x90a[I\x90a\x14\x93V[\x90RV[\x90a[W\x90a\x1CNV[\x90RV[\x90a[\x91a[\x88_a[ka<\x93V[\x94a[\x82a[z\x83\x83\x01aE\x1AV[\x83\x88\x01a[?V[\x01aELV[` \x84\x01a[MV[V[a[\x9C\x90a[[V[\x90V[a[\xBD\x91_a[\xB7\x92a[\xB0a<\xCEV[P\x01a[\x17V[Pa[\x93V[\x90V[\x92\x91a[\xCE\x84\x83\x83\x91a^BV[\x83a[\xE9a[\xE3a[\xDE_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a[\xFEW[a[\xFC\x92\x93\x91\x90\x91a_\xCCV[V[a\\\x06a$aV[\x93a\\\x0Fa_\xB1V[\x94\x80a\\#a\\\x1D\x88a\x05\xF8V[\x91a\x05\xF8V[\x11a\\0WP\x93Pa[\xEFV[\x85\x90a\\L_\x92\x83\x92c\x0EX\xAE\x93`\xE1\x1B\x84R`\x04\x84\x01a-\xB5V[\x03\x90\xFD[a\\Xa\x1E\xEBV[P\x15\x15\x90V[a\\ra\\ma\\w\x92aO\x81V[a\n\x11V[a\x05\xF8V[\x90V[a\\\x86a\\\x8C\x91a\x05\xF8V[\x91a\x05\xF8V[\x90\x81\x15a\\\x97W\x04\x90V[aP\x05V[a\\\xC1a\\\xC7\x92a\\\xABa\x1E\xEBV[P\x82\x81\x16\x92\x18a\\\xBB`\x02a\\^V[\x90a\\zV[\x90a(kV[\x90V[\x90V[a\\\xE1a\\\xDCa\\\xE6\x92a\\\xCAV[a\n\x11V[a\x08\xE1V[\x90V[a\\\xF2\x90a\\\xCDV[\x90RV[\x91` a]\x17\x92\x94\x93a]\x10`@\x82\x01\x96_\x83\x01\x90a\\\xE9V[\x01\x90a\x06\x81V[V[a]-a](a]2\x92a\x05\xF8V[a\n\x11V[a\x1CNV[\x90V[a]=a\x1D=V[P\x80a]Wa]Q`\x01\x80`\xD0\x1B\x03a)\xC7V[\x91a\x05\xF8V[\x11a]hWa]e\x90a]\x19V[\x90V[`\xD0a]\x84_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a\\\xF6V[\x03\x90\xFD[\x90a]\xBEa]\xC4\x93\x92a]\x99a\x1D=V[Pa]\xA2a\x1D=V[P\x80\x93a]\xB7a]\xB0a6\x96V[\x94\x92aH>V[\x90\x91ad4V[\x91a`\x8BV[\x91\x90\x91\x90V[a]\xDEa]\xD9a]\xE3\x92aN\x8CV[a\n\x11V[a\x05\xF8V[\x90V[6\x907V[\x90a^\x10a]\xF8\x83a+UV[\x92` \x80a^\x06\x86\x93a+2V[\x92\x01\x91\x03\x90a]\xE6V[V[a^\x1Aa\"\xD0V[Pa^$\x81a`\xF5V[\x90a^7a^2` a]\xCAV[a]\xEBV[\x91\x82R` \x82\x01R\x90V[\x91\x90\x91\x80a^`a^Za^U_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14_\x14a_AWa^\x84a^}\x83a^x`\x02a\nzV[a(kV[`\x02a-\xFBV[[\x82a^\xA0a^\x9Aa^\x95_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14_\x14a_\x15Wa^\xC4a^\xBD\x83a^\xB8`\x02a\nzV[a?JV[`\x02a-\xFBV[[\x91\x90\x91a_\x10a^\xFEa^\xF8\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\n<V[\x93a\n<V[\x93a_\x07a\x04\x02V[\x91\x82\x91\x82a\x06\x8EV[\x03\x90\xA3V[a_<\x82a_6a_'_\x87\x90a0\xD7V[\x91a_1\x83a\nzV[aP;V[\x90a-\xFBV[a^\xC5V[a_Ta_O_\x83\x90a0\xD7V[a\nzV[\x80a_ga_a\x85a\x05\xF8V[\x91a\x05\xF8V[\x10a_\x8FWa_za_\x8A\x91\x84\x90a?JV[a_\x85_\x84\x90a0\xD7V[a-\xFBV[a^\x85V[\x90a_\xAD\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a=cV[\x03\x90\xFD[a_\xB9a\x1E\xEBV[Pa_\xC9`\x01\x80`\xD0\x1B\x03a)\xC7V[\x90V[\x91a`$a`\x1Ea`+\x94\x80a_\xF2a_\xECa_\xE7_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a`\\W[\x84a`\x13a`\ra`\x08_a\x1EuV[a\x04\xC4V[\x91a\x04\xC4V[\x14a`-W[a,DV[\x92a,DV[\x90\x91aTeV[V[a`U`\x0B`\x02a`Oa`Ia`C\x89a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[PPa`\x19V[a`\x84`\x0B`\x01a`~a`xa`r\x89a]5V[\x93a)\xC4V[\x91aTbV[\x90a]\x88V[PPa_\xF8V[\x91a`\xAF_a`\xB4\x94a`\x9Ca\x1D=V[Pa`\xA5a\x1D=V[P\x01\x92\x91\x92aD\xF8V[ab\xE6V[\x91\x90\x91\x90V[a`\xCEa`\xC9a`\xD3\x92aW\x02V[a\n\x11V[a\x05\xF8V[\x90V[\x90V[a`\xEDa`\xE8a`\xF2\x92a`\xD6V[a\n\x11V[a\x05\xF8V[\x90V[aa\naa\x0F\x91aa\x04a\x1E\xEBV[Pa%\x7FV[aX\x91V[aa\x19`\xFFa`\xBAV[\x16\x80aa.aa(`\x1Fa`\xD9V[\x91a\x05\xF8V[\x11aa6W\x90V[_c,\xD4J\xC3`\xE2\x1B\x81R\x80aaN`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[T\x90V[aa``@a'`V[\x90V[_R` _ \x90V[aau\x81aaRV[\x82\x10\x15aa\x8FWaa\x87`\x01\x91aacV[\x91\x02\x01\x90_\x90V[a\x16{V[aa\x9E\x90Qa\x14\x93V[\x90V[\x90aa\xB2e\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x16\x0EV[\x91\x81\x19\x16\x91\x16\x17\x90V[aa\xD0aa\xCBaa\xD5\x92a\x14\x93V[a\n\x11V[a\x14\x93V[\x90V[\x90V[\x90aa\xF0aa\xEBaa\xF7\x92aa\xBCV[aa\xD8V[\x82Taa\xA1V[\x90UV[ab\x05\x90Qa\x1CNV[\x90V[`0\x1B\x90V[\x90ab e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x91ab\x08V[\x91\x81\x19\x16\x91\x16\x17\x90V[ab>ab9abC\x92a\x1CNV[a\n\x11V[a\x1CNV[\x90V[\x90V[\x90ab^abYabe\x92ab*V[abFV[\x82Tab\x0EV[\x90UV[\x90ab\x93` _ab\x99\x94ab\x8B\x82\x82\x01ab\x85\x84\x88\x01aa\x94V[\x90aa\xDBV[\x01\x92\x01aa\xFBV[\x90abIV[V[\x91\x90ab\xACWab\xAA\x91abiV[V[a\x1FXV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15ab\xE1W\x82ab\xD9\x91`\x01ab\xDF\x95\x01\x81UaalV[\x90ab\x9BV[V[a#\xBEV[\x90\x92\x91\x92ab\xF2a\x1D=V[Pab\xFBa\x1D=V[Pac\x05\x82aaRV[\x80ac\x18ac\x12_a\x1F\xC7V[\x91a\x05\xF8V[\x11_\x14ac\xE8Wac>\x90ac8\x84\x91ac2`\x01a\x1F\xF5V[\x90a \x11V[\x90aS\xB4V[\x90acJ_\x83\x01aE\x1AV[\x92acV_\x84\x01aELV[\x93\x80acjacd\x85a\x14\x93V[\x91a\x14\x93V[\x11ac\xCCWac\x81ac{\x84a\x14\x93V[\x91a\x14\x93V[\x14_\x14ac\x9CWPPac\x97\x90_\x85\x91\x01abIV[[\x91\x90V[ac\xC7\x92Pac\xC2\x86ac\xB9ac\xB0aaVV[\x94_\x86\x01a[?V[` \x84\x01a[MV[ab\xB1V[ac\x98V[_c% `\x1D`\xE0\x1B\x81R\x80ac\xE4`\x04\x82\x01a\x05\x11V[\x03\x90\xFD[Pad\x13\x91ad\x0E\x85ad\x05ac\xFCaaVV[\x94_\x86\x01a[?V[` \x84\x01a[MV[ab\xB1V[ad\x1C_aEYV[\x91\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[\x91\x90\x91\x80`\x01\x14adSW`\x02\x03ad WadO\x91a\x1D\xBCV[\x90[V[Pad]\x91a\x1D}V[\x90adQV",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `BridgeNotActive(address)` and selector `0xefda0e06`.
```solidity
error BridgeNotActive(address bridge);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeNotActive {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeNotActive) -> Self {
                (value.bridge,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { bridge: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeNotActive(address)";
            const SELECTOR: [u8; 4] = [239u8, 218u8, 14u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `BurnOnlyDuringLockPeriod()` and selector `0xb8b5ca2d`.
```solidity
error BurnOnlyDuringLockPeriod();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BurnOnlyDuringLockPeriod {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BurnOnlyDuringLockPeriod>
        for UnderlyingRustTuple<'_> {
            fn from(value: BurnOnlyDuringLockPeriod) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for BurnOnlyDuringLockPeriod {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BurnOnlyDuringLockPeriod {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BurnOnlyDuringLockPeriod()";
            const SELECTOR: [u8; 4] = [184u8, 181u8, 202u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CheckpointUnorderedInsertion()` and selector `0x2520601d`.
```solidity
error CheckpointUnorderedInsertion();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckpointUnorderedInsertion {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CheckpointUnorderedInsertion>
        for UnderlyingRustTuple<'_> {
            fn from(value: CheckpointUnorderedInsertion) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CheckpointUnorderedInsertion {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CheckpointUnorderedInsertion {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CheckpointUnorderedInsertion()";
            const SELECTOR: [u8; 4] = [37u8, 32u8, 96u8, 29u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignature()` and selector `0xf645eedf`.
```solidity
error ECDSAInvalidSignature();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignature {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignature()";
            const SELECTOR: [u8; 4] = [246u8, 69u8, 238u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignatureLength(uint256)` and selector `0xfce698f7`.
```solidity
error ECDSAInvalidSignatureLength(uint256 length);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureLength {
        #[allow(missing_docs)]
        pub length: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureLength>
        for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureLength) -> Self {
                (value.length,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ECDSAInvalidSignatureLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { length: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureLength(uint256)";
            const SELECTOR: [u8; 4] = [252u8, 230u8, 152u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                )
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignatureS(bytes32)` and selector `0xd78bce0c`.
```solidity
error ECDSAInvalidSignatureS(bytes32 s);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureS {
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureS> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureS) -> Self {
                (value.s,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignatureS {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { s: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureS {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureS(bytes32)";
            const SELECTOR: [u8; 4] = [215u8, 139u8, 206u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
        }
    };
    /**Custom error with signature `ERC20ExceededSafeSupply(uint256,uint256)` and selector `0x1cb15d26`.
```solidity
error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20ExceededSafeSupply {
        #[allow(missing_docs)]
        pub increasedSupply: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub cap: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20ExceededSafeSupply> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20ExceededSafeSupply) -> Self {
                (value.increasedSupply, value.cap)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20ExceededSafeSupply {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    increasedSupply: tuple.0,
                    cap: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20ExceededSafeSupply {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20ExceededSafeSupply(uint256,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 177u8, 93u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.increasedSupply),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.cap),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InsufficientAllowance(address,uint256,uint256)` and selector `0xfb8f41b2`.
```solidity
error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InsufficientAllowance {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub allowance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientAllowance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientAllowance) -> Self {
                (value.spender, value.allowance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientAllowance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    spender: tuple.0,
                    allowance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientAllowance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientAllowance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [251u8, 143u8, 65u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InsufficientBalance(address,uint256,uint256)` and selector `0xe450d38c`.
```solidity
error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InsufficientBalance {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientBalance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientBalance) -> Self {
                (value.sender, value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    balance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientBalance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [228u8, 80u8, 211u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidApprover(address)` and selector `0xe602df05`.
```solidity
error ERC20InvalidApprover(address approver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidApprover {
        #[allow(missing_docs)]
        pub approver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidApprover> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidApprover) -> Self {
                (value.approver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidApprover {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { approver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidApprover {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidApprover(address)";
            const SELECTOR: [u8; 4] = [230u8, 2u8, 223u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.approver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidReceiver(address)` and selector `0xec442f05`.
```solidity
error ERC20InvalidReceiver(address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidReceiver {
        #[allow(missing_docs)]
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidReceiver> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidReceiver) -> Self {
                (value.receiver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidReceiver {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { receiver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidReceiver {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidReceiver(address)";
            const SELECTOR: [u8; 4] = [236u8, 68u8, 47u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidSender(address)` and selector `0x96c6fd1e`.
```solidity
error ERC20InvalidSender(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidSender {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSender) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSender(address)";
            const SELECTOR: [u8; 4] = [150u8, 198u8, 253u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC20InvalidSpender(address)` and selector `0x94280d62`.
```solidity
error ERC20InvalidSpender(address spender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidSpender {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSpender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSpender) -> Self {
                (value.spender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSpender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { spender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSpender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSpender(address)";
            const SELECTOR: [u8; 4] = [148u8, 40u8, 13u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC2612ExpiredSignature(uint256)` and selector `0x62791302`.
```solidity
error ERC2612ExpiredSignature(uint256 deadline);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC2612ExpiredSignature {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC2612ExpiredSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ERC2612ExpiredSignature) -> Self {
                (value.deadline,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC2612ExpiredSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { deadline: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC2612ExpiredSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC2612ExpiredSignature(uint256)";
            const SELECTOR: [u8; 4] = [98u8, 121u8, 19u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                )
            }
        }
    };
    /**Custom error with signature `ERC2612InvalidSigner(address,address)` and selector `0x4b800e46`.
```solidity
error ERC2612InvalidSigner(address signer, address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC2612InvalidSigner {
        #[allow(missing_docs)]
        pub signer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC2612InvalidSigner> for UnderlyingRustTuple<'_> {
            fn from(value: ERC2612InvalidSigner) -> Self {
                (value.signer, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC2612InvalidSigner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    signer: tuple.0,
                    owner: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC2612InvalidSigner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC2612InvalidSigner(address,address)";
            const SELECTOR: [u8; 4] = [75u8, 128u8, 14u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC5805FutureLookup(uint256,uint48)` and selector `0xecd3f81e`.
```solidity
error ERC5805FutureLookup(uint256 timepoint, uint48 clock);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC5805FutureLookup {
        #[allow(missing_docs)]
        pub timepoint: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub clock: alloy::sol_types::private::primitives::aliases::U48,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<48>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U48,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC5805FutureLookup> for UnderlyingRustTuple<'_> {
            fn from(value: ERC5805FutureLookup) -> Self {
                (value.timepoint, value.clock)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC5805FutureLookup {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    timepoint: tuple.0,
                    clock: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC5805FutureLookup {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC5805FutureLookup(uint256,uint48)";
            const SELECTOR: [u8; 4] = [236u8, 211u8, 248u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timepoint),
                    <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::SolType>::tokenize(&self.clock),
                )
            }
        }
    };
    /**Custom error with signature `ERC6372InconsistentClock()` and selector `0x6ff07140`.
```solidity
error ERC6372InconsistentClock();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC6372InconsistentClock {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC6372InconsistentClock>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC6372InconsistentClock) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC6372InconsistentClock {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC6372InconsistentClock {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC6372InconsistentClock()";
            const SELECTOR: [u8; 4] = [111u8, 240u8, 113u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ExceedsTotalSupply()` and selector `0x177e3fc3`.
```solidity
error ExceedsTotalSupply();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExceedsTotalSupply {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExceedsTotalSupply> for UnderlyingRustTuple<'_> {
            fn from(value: ExceedsTotalSupply) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExceedsTotalSupply {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExceedsTotalSupply {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExceedsTotalSupply()";
            const SELECTOR: [u8; 4] = [23u8, 126u8, 63u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InsufficientBurnLimit(address,uint256,uint256)` and selector `0xe5fe97a2`.
```solidity
error InsufficientBurnLimit(address bridge, uint256 requested, uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientBurnLimit {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub requested: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientBurnLimit> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientBurnLimit) -> Self {
                (value.bridge, value.requested, value.available)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientBurnLimit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bridge: tuple.0,
                    requested: tuple.1,
                    available: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientBurnLimit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientBurnLimit(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [229u8, 254u8, 151u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.requested),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.available),
                )
            }
        }
    };
    /**Custom error with signature `InsufficientMintLimit(address,uint256,uint256)` and selector `0x40ed367b`.
```solidity
error InsufficientMintLimit(address bridge, uint256 requested, uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientMintLimit {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub requested: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientMintLimit> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientMintLimit) -> Self {
                (value.bridge, value.requested, value.available)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientMintLimit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bridge: tuple.0,
                    requested: tuple.1,
                    available: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientMintLimit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientMintLimit(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 237u8, 54u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.requested),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.available),
                )
            }
        }
    };
    /**Custom error with signature `InvalidAccountNonce(address,uint256)` and selector `0x752d88c0`.
```solidity
error InvalidAccountNonce(address account, uint256 currentNonce);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAccountNonce {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub currentNonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAccountNonce> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAccountNonce) -> Self {
                (value.account, value.currentNonce)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAccountNonce {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    currentNonce: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAccountNonce {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAccountNonce(address,uint256)";
            const SELECTOR: [u8; 4] = [117u8, 45u8, 136u8, 192u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentNonce),
                )
            }
        }
    };
    /**Custom error with signature `InvalidShortString()` and selector `0xb3512b0c`.
```solidity
error InvalidShortString();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidShortString {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidShortString> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidShortString) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidShortString {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidShortString {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidShortString()";
            const SELECTOR: [u8; 4] = [179u8, 81u8, 43u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `SafeCastOverflowedUintDowncast(uint8,uint256)` and selector `0x6dfcc650`.
```solidity
error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeCastOverflowedUintDowncast {
        #[allow(missing_docs)]
        pub bits: u8,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeCastOverflowedUintDowncast>
        for UnderlyingRustTuple<'_> {
            fn from(value: SafeCastOverflowedUintDowncast) -> Self {
                (value.bits, value.value)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SafeCastOverflowedUintDowncast {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bits: tuple.0,
                    value: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeCastOverflowedUintDowncast {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeCastOverflowedUintDowncast(uint8,uint256)";
            const SELECTOR: [u8; 4] = [109u8, 252u8, 198u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.bits),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
        }
    };
    /**Custom error with signature `StringTooLong(string)` and selector `0x305a27a9`.
```solidity
error StringTooLong(string str);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StringTooLong {
        #[allow(missing_docs)]
        pub str: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StringTooLong> for UnderlyingRustTuple<'_> {
            fn from(value: StringTooLong) -> Self {
                (value.str,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StringTooLong {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { str: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for StringTooLong {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "StringTooLong(string)";
            const SELECTOR: [u8; 4] = [48u8, 90u8, 39u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.str,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransfersLocked()` and selector `0xdb89e3f4`.
```solidity
error TransfersLocked();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransfersLocked {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransfersLocked> for UnderlyingRustTuple<'_> {
            fn from(value: TransfersLocked) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransfersLocked {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransfersLocked {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransfersLocked()";
            const SELECTOR: [u8; 4] = [219u8, 137u8, 227u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `UnauthorizedBridge(address)` and selector `0x6585b60d`.
```solidity
error UnauthorizedBridge(address bridge);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnauthorizedBridge {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorizedBridge> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorizedBridge) -> Self {
                (value.bridge,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorizedBridge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { bridge: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorizedBridge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorizedBridge(address)";
            const SELECTOR: [u8; 4] = [101u8, 133u8, 182u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `UnlockTimestampInPast()` and selector `0xa5658353`.
```solidity
error UnlockTimestampInPast();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnlockTimestampInPast {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnlockTimestampInPast> for UnderlyingRustTuple<'_> {
            fn from(value: UnlockTimestampInPast) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnlockTimestampInPast {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnlockTimestampInPast {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnlockTimestampInPast()";
            const SELECTOR: [u8; 4] = [165u8, 101u8, 131u8, 83u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `UnlockTimestampTooLate()` and selector `0xef69af65`.
```solidity
error UnlockTimestampTooLate();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnlockTimestampTooLate {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnlockTimestampTooLate> for UnderlyingRustTuple<'_> {
            fn from(value: UnlockTimestampTooLate) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnlockTimestampTooLate {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnlockTimestampTooLate {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnlockTimestampTooLate()";
            const SELECTOR: [u8; 4] = [239u8, 105u8, 175u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `VotesExpiredSignature(uint256)` and selector `0x4683af0e`.
```solidity
error VotesExpiredSignature(uint256 expiry);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VotesExpiredSignature {
        #[allow(missing_docs)]
        pub expiry: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<VotesExpiredSignature> for UnderlyingRustTuple<'_> {
            fn from(value: VotesExpiredSignature) -> Self {
                (value.expiry,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for VotesExpiredSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { expiry: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for VotesExpiredSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "VotesExpiredSignature(uint256)";
            const SELECTOR: [u8; 4] = [70u8, 131u8, 175u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expiry),
                )
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAmount()` and selector `0x1f2a2005`.
```solidity
error ZeroAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAmount()";
            const SELECTOR: [u8; 4] = [31u8, 42u8, 32u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed owner, address indexed spender, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    spender: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone(), self.spender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.spender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeActiveStatusChanged(address,bool)` and selector `0x9c8668db324845065d2b9a2a183bd3141f63018f548282daf18da49ccbf88c33`.
```solidity
event BridgeActiveStatusChanged(address indexed bridge, bool isActive);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeActiveStatusChanged {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeActiveStatusChanged {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeActiveStatusChanged(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                156u8,
                134u8,
                104u8,
                219u8,
                50u8,
                72u8,
                69u8,
                6u8,
                93u8,
                43u8,
                154u8,
                42u8,
                24u8,
                59u8,
                211u8,
                20u8,
                31u8,
                99u8,
                1u8,
                143u8,
                84u8,
                130u8,
                130u8,
                218u8,
                241u8,
                141u8,
                164u8,
                156u8,
                203u8,
                248u8,
                140u8,
                51u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    isActive: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isActive,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeActiveStatusChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeActiveStatusChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &BridgeActiveStatusChanged,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeAdded(address,uint256,uint256)` and selector `0xdb03f97dc5840a71e69be7470e4761af10a1237973e81c12d0dc2813895a6526`.
```solidity
event BridgeAdded(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeAdded {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeAdded {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeAdded(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                219u8,
                3u8,
                249u8,
                125u8,
                197u8,
                132u8,
                10u8,
                113u8,
                230u8,
                155u8,
                231u8,
                71u8,
                14u8,
                71u8,
                97u8,
                175u8,
                16u8,
                161u8,
                35u8,
                121u8,
                115u8,
                232u8,
                28u8,
                18u8,
                208u8,
                220u8,
                40u8,
                19u8,
                137u8,
                90u8,
                101u8,
                38u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    dailyMintLimit: data.0,
                    dailyBurnLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeLimitsSet(address,uint256,uint256)` and selector `0xaa807d0abf30d91968c7478c66b6d82521a106af13eda036e2036da9af168958`.
```solidity
event BridgeLimitsSet(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeLimitsSet {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeLimitsSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeLimitsSet(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                170u8,
                128u8,
                125u8,
                10u8,
                191u8,
                48u8,
                217u8,
                25u8,
                104u8,
                199u8,
                71u8,
                140u8,
                102u8,
                182u8,
                216u8,
                37u8,
                33u8,
                161u8,
                6u8,
                175u8,
                19u8,
                237u8,
                160u8,
                54u8,
                226u8,
                3u8,
                109u8,
                169u8,
                175u8,
                22u8,
                137u8,
                88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    dailyMintLimit: data.0,
                    dailyBurnLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeLimitsSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeLimitsSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeLimitsSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeRemoved(address)` and selector `0x5d9d5034656cb3ebfb0655057cd7f9b4077a9b42ff42ce223cbac5bc586d2126`.
```solidity
event BridgeRemoved(address indexed bridge);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeRemoved {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                93u8,
                157u8,
                80u8,
                52u8,
                101u8,
                108u8,
                179u8,
                235u8,
                251u8,
                6u8,
                85u8,
                5u8,
                124u8,
                215u8,
                249u8,
                180u8,
                7u8,
                122u8,
                155u8,
                66u8,
                255u8,
                66u8,
                206u8,
                34u8,
                60u8,
                186u8,
                197u8,
                188u8,
                88u8,
                109u8,
                33u8,
                38u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { bridge: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CrosschainBurn(address,uint256,address)` and selector `0xb90795a66650155983e242cac3e1ac1a4dc26f8ed2987f3ce416a34e00111fd4`.
```solidity
event CrosschainBurn(address indexed from, uint256 amount, address indexed bridge);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrosschainBurn {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrosschainBurn {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CrosschainBurn(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                185u8,
                7u8,
                149u8,
                166u8,
                102u8,
                80u8,
                21u8,
                89u8,
                131u8,
                226u8,
                66u8,
                202u8,
                195u8,
                225u8,
                172u8,
                26u8,
                77u8,
                194u8,
                111u8,
                142u8,
                210u8,
                152u8,
                127u8,
                60u8,
                228u8,
                22u8,
                163u8,
                78u8,
                0u8,
                17u8,
                31u8,
                212u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    amount: data.0,
                    bridge: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrosschainBurn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrosschainBurn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrosschainBurn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CrosschainMint(address,uint256,address)` and selector `0xde22baff038e3a3e08407cbdf617deed74e869a7ba517df611e33131c6e6ea04`.
```solidity
event CrosschainMint(address indexed to, uint256 amount, address indexed bridge);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrosschainMint {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrosschainMint {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CrosschainMint(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                222u8,
                34u8,
                186u8,
                255u8,
                3u8,
                142u8,
                58u8,
                62u8,
                8u8,
                64u8,
                124u8,
                189u8,
                246u8,
                23u8,
                222u8,
                237u8,
                116u8,
                232u8,
                105u8,
                167u8,
                186u8,
                81u8,
                125u8,
                246u8,
                17u8,
                227u8,
                49u8,
                49u8,
                198u8,
                230u8,
                234u8,
                4u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    to: topics.1,
                    amount: data.0,
                    bridge: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.to.clone(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrosschainMint {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrosschainMint> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrosschainMint) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DelegateChanged(address,address,address)` and selector `0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f`.
```solidity
event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DelegateChanged {
        #[allow(missing_docs)]
        pub delegator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub fromDelegate: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub toDelegate: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DelegateChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "DelegateChanged(address,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                49u8,
                52u8,
                232u8,
                162u8,
                230u8,
                217u8,
                126u8,
                146u8,
                154u8,
                126u8,
                84u8,
                1u8,
                30u8,
                165u8,
                72u8,
                93u8,
                125u8,
                25u8,
                109u8,
                213u8,
                240u8,
                186u8,
                77u8,
                78u8,
                249u8,
                88u8,
                3u8,
                232u8,
                227u8,
                252u8,
                37u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    delegator: topics.1,
                    fromDelegate: topics.2,
                    toDelegate: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.delegator.clone(),
                    self.fromDelegate.clone(),
                    self.toDelegate.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.delegator,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.fromDelegate,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.toDelegate,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DelegateChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DelegateChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DelegateChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DelegateVotesChanged(address,uint256,uint256)` and selector `0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724`.
```solidity
event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DelegateVotesChanged {
        #[allow(missing_docs)]
        pub delegate: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub previousVotes: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newVotes: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DelegateVotesChanged {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "DelegateVotesChanged(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                222u8,
                194u8,
                186u8,
                205u8,
                210u8,
                240u8,
                91u8,
                89u8,
                222u8,
                52u8,
                218u8,
                155u8,
                82u8,
                61u8,
                255u8,
                139u8,
                228u8,
                46u8,
                94u8,
                56u8,
                232u8,
                24u8,
                200u8,
                47u8,
                219u8,
                11u8,
                174u8,
                119u8,
                67u8,
                135u8,
                167u8,
                36u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    delegate: topics.1,
                    previousVotes: data.0,
                    newVotes: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousVotes),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newVotes),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.delegate.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.delegate,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DelegateVotesChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DelegateVotesChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DelegateVotesChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `EIP712DomainChanged()` and selector `0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31`.
```solidity
event EIP712DomainChanged();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EIP712DomainChanged {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EIP712DomainChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "EIP712DomainChanged()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                10u8,
                99u8,
                135u8,
                201u8,
                234u8,
                54u8,
                40u8,
                184u8,
                138u8,
                99u8,
                59u8,
                180u8,
                243u8,
                177u8,
                81u8,
                119u8,
                15u8,
                112u8,
                8u8,
                81u8,
                23u8,
                161u8,
                95u8,
                155u8,
                243u8,
                120u8,
                124u8,
                218u8,
                83u8,
                241u8,
                61u8,
                49u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EIP712DomainChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EIP712DomainChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EIP712DomainChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TokensBurnedByManager(address,uint256,address)` and selector `0xbef4f81c1814c641ede85ebaacf19d048b2c5b55980adfa6ef0f956c651335a2`.
```solidity
event TokensBurnedByManager(address indexed from, uint256 amount, address indexed burner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TokensBurnedByManager {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub burner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TokensBurnedByManager {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TokensBurnedByManager(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                190u8,
                244u8,
                248u8,
                28u8,
                24u8,
                20u8,
                198u8,
                65u8,
                237u8,
                232u8,
                94u8,
                186u8,
                172u8,
                241u8,
                157u8,
                4u8,
                139u8,
                44u8,
                91u8,
                85u8,
                152u8,
                10u8,
                223u8,
                166u8,
                239u8,
                15u8,
                149u8,
                108u8,
                101u8,
                19u8,
                53u8,
                162u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    amount: data.0,
                    burner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.burner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.burner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TokensBurnedByManager {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TokensBurnedByManager> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TokensBurnedByManager) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed from, address indexed to, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    to: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UnlockTimestampUpdated(uint256,uint256,address)` and selector `0xdd6896dcf1d4b311cca87dd19bbba2ea9ce2f867c1568878a0438a66a1afeeec`.
```solidity
event UnlockTimestampUpdated(uint256 oldTimestamp, uint256 newTimestamp, address indexed updatedBy);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UnlockTimestampUpdated {
        #[allow(missing_docs)]
        pub oldTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub updatedBy: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UnlockTimestampUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UnlockTimestampUpdated(uint256,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                104u8,
                150u8,
                220u8,
                241u8,
                212u8,
                179u8,
                17u8,
                204u8,
                168u8,
                125u8,
                209u8,
                155u8,
                187u8,
                162u8,
                234u8,
                156u8,
                226u8,
                248u8,
                103u8,
                193u8,
                86u8,
                136u8,
                120u8,
                160u8,
                67u8,
                138u8,
                102u8,
                161u8,
                175u8,
                238u8,
                236u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldTimestamp: data.0,
                    newTimestamp: data.1,
                    updatedBy: topics.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newTimestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.updatedBy.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.updatedBy,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UnlockTimestampUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UnlockTimestampUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UnlockTimestampUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address defaultAdmin, address syndTreasuryAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub defaultAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub syndTreasuryAddress: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.defaultAdmin, value.syndTreasuryAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        defaultAdmin: tuple.0,
                        syndTreasuryAddress: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.defaultAdmin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.syndTreasuryAddress,
                    ),
                )
            }
        }
    };
    /**Function with signature `AIRDROP_MANAGER_ROLE()` and selector `0x8a542521`.
```solidity
function AIRDROP_MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AIRDROP_MANAGER_ROLECall {}
    ///Container type for the return parameters of the [`AIRDROP_MANAGER_ROLE()`](AIRDROP_MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AIRDROP_MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AIRDROP_MANAGER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: AIRDROP_MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AIRDROP_MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AIRDROP_MANAGER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: AIRDROP_MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AIRDROP_MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AIRDROP_MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = AIRDROP_MANAGER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AIRDROP_MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [138u8, 84u8, 37u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `BRIDGE_MANAGER_ROLE()` and selector `0xf75e8512`.
```solidity
function BRIDGE_MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_MANAGER_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_MANAGER_ROLE()`](BRIDGE_MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_MANAGER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_MANAGER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_MANAGER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [247u8, 94u8, 133u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `CLOCK_MODE()` and selector `0x4bf5d7e9`.
```solidity
function CLOCK_MODE() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CLOCK_MODECall {}
    ///Container type for the return parameters of the [`CLOCK_MODE()`](CLOCK_MODECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CLOCK_MODEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CLOCK_MODECall> for UnderlyingRustTuple<'_> {
                fn from(value: CLOCK_MODECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CLOCK_MODECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CLOCK_MODEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CLOCK_MODEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CLOCK_MODEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CLOCK_MODECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = CLOCK_MODEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CLOCK_MODE()";
            const SELECTOR: [u8; 4] = [75u8, 245u8, 215u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DOMAIN_SEPARATOR()` and selector `0x3644e515`.
```solidity
function DOMAIN_SEPARATOR() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORCall {}
    ///Container type for the return parameters of the [`DOMAIN_SEPARATOR()`](DOMAIN_SEPARATORCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DOMAIN_SEPARATORCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DOMAIN_SEPARATORReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DOMAIN_SEPARATOR()";
            const SELECTOR: [u8; 4] = [54u8, 68u8, 229u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `EMISSION_MINTER_ROLE()` and selector `0x8d3343d6`.
```solidity
function EMISSION_MINTER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EMISSION_MINTER_ROLECall {}
    ///Container type for the return parameters of the [`EMISSION_MINTER_ROLE()`](EMISSION_MINTER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EMISSION_MINTER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EMISSION_MINTER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: EMISSION_MINTER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EMISSION_MINTER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EMISSION_MINTER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: EMISSION_MINTER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EMISSION_MINTER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for EMISSION_MINTER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = EMISSION_MINTER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EMISSION_MINTER_ROLE()";
            const SELECTOR: [u8; 4] = [141u8, 51u8, 67u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `INITIAL_MINT_SUPPLY()` and selector `0x9b7ef64b`.
```solidity
function INITIAL_MINT_SUPPLY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_MINT_SUPPLYCall {}
    ///Container type for the return parameters of the [`INITIAL_MINT_SUPPLY()`](INITIAL_MINT_SUPPLYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_MINT_SUPPLYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_MINT_SUPPLYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_MINT_SUPPLYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_MINT_SUPPLYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_MINT_SUPPLYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_MINT_SUPPLYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_MINT_SUPPLYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for INITIAL_MINT_SUPPLYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = INITIAL_MINT_SUPPLYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "INITIAL_MINT_SUPPLY()";
            const SELECTOR: [u8; 4] = [155u8, 126u8, 246u8, 75u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MAX_LOCK_DURATION()` and selector `0x4f1bfc9e`.
```solidity
function MAX_LOCK_DURATION() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_LOCK_DURATIONCall {}
    ///Container type for the return parameters of the [`MAX_LOCK_DURATION()`](MAX_LOCK_DURATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_LOCK_DURATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_LOCK_DURATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_LOCK_DURATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_LOCK_DURATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_LOCK_DURATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_LOCK_DURATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_LOCK_DURATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MAX_LOCK_DURATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MAX_LOCK_DURATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MAX_LOCK_DURATION()";
            const SELECTOR: [u8; 4] = [79u8, 27u8, 252u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TOTAL_SUPPLY()` and selector `0x902d55a5`.
```solidity
function TOTAL_SUPPLY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TOTAL_SUPPLYCall {}
    ///Container type for the return parameters of the [`TOTAL_SUPPLY()`](TOTAL_SUPPLYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TOTAL_SUPPLYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TOTAL_SUPPLYCall> for UnderlyingRustTuple<'_> {
                fn from(value: TOTAL_SUPPLYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TOTAL_SUPPLYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TOTAL_SUPPLYReturn> for UnderlyingRustTuple<'_> {
                fn from(value: TOTAL_SUPPLYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TOTAL_SUPPLYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TOTAL_SUPPLYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TOTAL_SUPPLYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TOTAL_SUPPLY()";
            const SELECTOR: [u8; 4] = [144u8, 45u8, 85u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowance(address,address)` and selector `0xdd62ed3e`.
```solidity
function allowance(address owner, address spender) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowance(address,address)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value.owner, value.spender)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(address,address)";
            const SELECTOR: [u8; 4] = [221u8, 98u8, 237u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address spender, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveCall {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeConfigs(address)` and selector `0x427ac0ca`.
```solidity
function bridgeConfigs(address) external view returns (uint256 dailyMintLimit, uint256 dailyBurnLimit, uint256 lastMintTimestamp, uint256 lastBurnTimestamp, uint256 currentMintUsed, uint256 currentBurnUsed, bool isActive);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeConfigsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`bridgeConfigs(address)`](bridgeConfigsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeConfigsReturn {
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub lastMintTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub lastBurnTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentMintUsed: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentBurnUsed: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeConfigsCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeConfigsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeConfigsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeConfigsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeConfigsReturn) -> Self {
                    (
                        value.dailyMintLimit,
                        value.dailyBurnLimit,
                        value.lastMintTimestamp,
                        value.lastBurnTimestamp,
                        value.currentMintUsed,
                        value.currentBurnUsed,
                        value.isActive,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeConfigsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        dailyMintLimit: tuple.0,
                        dailyBurnLimit: tuple.1,
                        lastMintTimestamp: tuple.2,
                        lastBurnTimestamp: tuple.3,
                        currentMintUsed: tuple.4,
                        currentBurnUsed: tuple.5,
                        isActive: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeConfigsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeConfigsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeConfigs(address)";
            const SELECTOR: [u8; 4] = [66u8, 122u8, 192u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridges(uint256)` and selector `0xa3c44705`.
```solidity
function bridges(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgesCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`bridges(uint256)`](bridgesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgesCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridges(uint256)";
            const SELECTOR: [u8; 4] = [163u8, 196u8, 71u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `burnFrom(address,uint256)` and selector `0x79cc6790`.
```solidity
function burnFrom(address from, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnFromCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`burnFrom(address,uint256)`](burnFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnFromReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: burnFromCall) -> Self {
                    (value.from, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: burnFromReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for burnFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = burnFromReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "burnFrom(address,uint256)";
            const SELECTOR: [u8; 4] = [121u8, 204u8, 103u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `checkpoints(address,uint32)` and selector `0xf1127ed8`.
```solidity
function checkpoints(address account, uint32 pos) external view returns (Checkpoints.Checkpoint208 memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkpointsCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub pos: u32,
    }
    ///Container type for the return parameters of the [`checkpoints(address,uint32)`](checkpointsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkpointsReturn {
        #[allow(missing_docs)]
        pub _0: <Checkpoints::Checkpoint208 as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, u32);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkpointsCall> for UnderlyingRustTuple<'_> {
                fn from(value: checkpointsCall) -> Self {
                    (value.account, value.pos)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for checkpointsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        pos: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Checkpoints::Checkpoint208,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Checkpoints::Checkpoint208 as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkpointsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: checkpointsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for checkpointsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkpointsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = checkpointsReturn;
            type ReturnTuple<'a> = (Checkpoints::Checkpoint208,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkpoints(address,uint32)";
            const SELECTOR: [u8; 4] = [241u8, 18u8, 126u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pos),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `clock()` and selector `0x91ddadf4`.
```solidity
function clock() external view returns (uint48);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clockCall {}
    ///Container type for the return parameters of the [`clock()`](clockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clockReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U48,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clockCall> for UnderlyingRustTuple<'_> {
                fn from(value: clockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<48>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U48,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clockReturn> for UnderlyingRustTuple<'_> {
                fn from(value: clockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for clockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = clockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<48>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "clock()";
            const SELECTOR: [u8; 4] = [145u8, 221u8, 173u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crosschainBurn(address,uint256)` and selector `0x2b8c49e3`.
```solidity
function crosschainBurn(address from, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainBurnCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`crosschainBurn(address,uint256)`](crosschainBurnCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainBurnReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainBurnCall> for UnderlyingRustTuple<'_> {
                fn from(value: crosschainBurnCall) -> Self {
                    (value.from, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crosschainBurnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainBurnReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crosschainBurnReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crosschainBurnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crosschainBurnCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crosschainBurnReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crosschainBurn(address,uint256)";
            const SELECTOR: [u8; 4] = [43u8, 140u8, 73u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crosschainMint(address,uint256)` and selector `0x18bf5077`.
```solidity
function crosschainMint(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainMintCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`crosschainMint(address,uint256)`](crosschainMintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainMintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainMintCall> for UnderlyingRustTuple<'_> {
                fn from(value: crosschainMintCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crosschainMintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainMintReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crosschainMintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crosschainMintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crosschainMintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crosschainMintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crosschainMint(address,uint256)";
            const SELECTOR: [u8; 4] = [24u8, 191u8, 80u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `decimals()` and selector `0x313ce567`.
```solidity
function decimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decimalsCall {}
    ///Container type for the return parameters of the [`decimals()`](decimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decimalsReturn {
        #[allow(missing_docs)]
        pub _0: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = decimalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decimals()";
            const SELECTOR: [u8; 4] = [49u8, 60u8, 229u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `delegate(address)` and selector `0x5c19a95c`.
```solidity
function delegate(address delegatee) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateCall {
        #[allow(missing_docs)]
        pub delegatee: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`delegate(address)`](delegateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateCall> for UnderlyingRustTuple<'_> {
                fn from(value: delegateCall) -> Self {
                    (value.delegatee,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { delegatee: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: delegateReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delegateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = delegateReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delegate(address)";
            const SELECTOR: [u8; 4] = [92u8, 25u8, 169u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.delegatee,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)` and selector `0xc3cda520`.
```solidity
function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateBySigCall {
        #[allow(missing_docs)]
        pub delegatee: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub expiry: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub v: u8,
        #[allow(missing_docs)]
        pub r: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)`](delegateBySigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateBySigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateBySigCall> for UnderlyingRustTuple<'_> {
                fn from(value: delegateBySigCall) -> Self {
                    (
                        value.delegatee,
                        value.nonce,
                        value.expiry,
                        value.v,
                        value.r,
                        value.s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateBySigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        delegatee: tuple.0,
                        nonce: tuple.1,
                        expiry: tuple.2,
                        v: tuple.3,
                        r: tuple.4,
                        s: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateBySigReturn> for UnderlyingRustTuple<'_> {
                fn from(value: delegateBySigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateBySigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delegateBySigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = delegateBySigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [195u8, 205u8, 165u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.delegatee,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expiry),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `delegates(address)` and selector `0x587cde1e`.
```solidity
function delegates(address account) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegatesCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`delegates(address)`](delegatesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegatesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegatesCall> for UnderlyingRustTuple<'_> {
                fn from(value: delegatesCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegatesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegatesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: delegatesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegatesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delegatesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = delegatesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delegates(address)";
            const SELECTOR: [u8; 4] = [88u8, 124u8, 222u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `eip712Domain()` and selector `0x84b0196e`.
```solidity
function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eip712DomainCall {}
    ///Container type for the return parameters of the [`eip712Domain()`](eip712DomainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eip712DomainReturn {
        #[allow(missing_docs)]
        pub fields: alloy::sol_types::private::FixedBytes<1>,
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub version: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub verifyingContract: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extensions: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainCall> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<1>,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainReturn) -> Self {
                    (
                        value.fields,
                        value.name,
                        value.version,
                        value.chainId,
                        value.verifyingContract,
                        value.salt,
                        value.extensions,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fields: tuple.0,
                        name: tuple.1,
                        version: tuple.2,
                        chainId: tuple.3,
                        verifyingContract: tuple.4,
                        salt: tuple.5,
                        extensions: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for eip712DomainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = eip712DomainReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "eip712Domain()";
            const SELECTOR: [u8; 4] = [132u8, 176u8, 25u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllBridges()` and selector `0x72cbdcc8`.
```solidity
function getAllBridges() external view returns (address[] memory allBridges);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllBridgesCall {}
    ///Container type for the return parameters of the [`getAllBridges()`](getAllBridgesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllBridgesReturn {
        #[allow(missing_docs)]
        pub allBridges: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllBridgesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAllBridgesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllBridgesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllBridgesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getAllBridgesReturn) -> Self {
                    (value.allBridges,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllBridgesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { allBridges: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllBridgesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllBridgesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllBridges()";
            const SELECTOR: [u8; 4] = [114u8, 203u8, 220u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAvailableBurnLimit(address)` and selector `0x30d3e8eb`.
```solidity
function getAvailableBurnLimit(address bridge) external view returns (uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableBurnLimitCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getAvailableBurnLimit(address)`](getAvailableBurnLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableBurnLimitReturn {
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableBurnLimitCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableBurnLimitCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableBurnLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableBurnLimitReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableBurnLimitReturn) -> Self {
                    (value.available,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableBurnLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { available: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAvailableBurnLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAvailableBurnLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAvailableBurnLimit(address)";
            const SELECTOR: [u8; 4] = [48u8, 211u8, 232u8, 235u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAvailableMintLimit(address)` and selector `0x94aa22f2`.
```solidity
function getAvailableMintLimit(address bridge) external view returns (uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableMintLimitCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getAvailableMintLimit(address)`](getAvailableMintLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableMintLimitReturn {
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableMintLimitCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableMintLimitCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableMintLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableMintLimitReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableMintLimitReturn) -> Self {
                    (value.available,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableMintLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { available: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAvailableMintLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAvailableMintLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAvailableMintLimit(address)";
            const SELECTOR: [u8; 4] = [148u8, 170u8, 34u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBridgeAtIndex(uint256)` and selector `0x5a5db1bb`.
```solidity
function getBridgeAtIndex(uint256 index) external view returns (address bridge);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeAtIndexCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getBridgeAtIndex(uint256)`](getBridgeAtIndexCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeAtIndexReturn {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeAtIndexCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeAtIndexCall) -> Self {
                    (value.index,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeAtIndexCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeAtIndexReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeAtIndexReturn) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeAtIndexReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeAtIndexCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBridgeAtIndexReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeAtIndex(uint256)";
            const SELECTOR: [u8; 4] = [90u8, 93u8, 177u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBridgeConfig(address)` and selector `0xc4fc45a8`.
```solidity
function getBridgeConfig(address bridge) external view returns (IBridgeRateLimiter.BridgeConfig memory config);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeConfigCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getBridgeConfig(address)`](getBridgeConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeConfigReturn {
        #[allow(missing_docs)]
        pub config: <IBridgeRateLimiter::BridgeConfig as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeConfigCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeConfigCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (IBridgeRateLimiter::BridgeConfig,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <IBridgeRateLimiter::BridgeConfig as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeConfigReturn) -> Self {
                    (value.config,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { config: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeConfigCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBridgeConfigReturn;
            type ReturnTuple<'a> = (IBridgeRateLimiter::BridgeConfig,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeConfig(address)";
            const SELECTOR: [u8; 4] = [196u8, 252u8, 69u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBridgeCount()` and selector `0x65145534`.
```solidity
function getBridgeCount() external view returns (uint256 count);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeCountCall {}
    ///Container type for the return parameters of the [`getBridgeCount()`](getBridgeCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeCountReturn {
        #[allow(missing_docs)]
        pub count: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeCountReturn) -> Self {
                    (value.count,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { count: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBridgeCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeCount()";
            const SELECTOR: [u8; 4] = [101u8, 20u8, 85u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentTotalSupply()` and selector `0xc02ae754`.
```solidity
function getCurrentTotalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentTotalSupplyCall {}
    ///Container type for the return parameters of the [`getCurrentTotalSupply()`](getCurrentTotalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentTotalSupplyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentTotalSupplyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentTotalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentTotalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentTotalSupplyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentTotalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentTotalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentTotalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentTotalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentTotalSupply()";
            const SELECTOR: [u8; 4] = [192u8, 42u8, 231u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPastTotalSupply(uint256)` and selector `0x8e539e8c`.
```solidity
function getPastTotalSupply(uint256 timepoint) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastTotalSupplyCall {
        #[allow(missing_docs)]
        pub timepoint: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getPastTotalSupply(uint256)`](getPastTotalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastTotalSupplyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastTotalSupplyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastTotalSupplyCall) -> Self {
                    (value.timepoint,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastTotalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { timepoint: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastTotalSupplyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastTotalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastTotalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPastTotalSupplyCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPastTotalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPastTotalSupply(uint256)";
            const SELECTOR: [u8; 4] = [142u8, 83u8, 158u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timepoint),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPastVotes(address,uint256)` and selector `0x3a46b1a8`.
```solidity
function getPastVotes(address account, uint256 timepoint) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotesCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub timepoint: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getPastVotes(address,uint256)`](getPastVotesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotesCall) -> Self {
                    (value.account, value.timepoint)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPastVotesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        timepoint: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPastVotesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPastVotesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPastVotesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPastVotes(address,uint256)";
            const SELECTOR: [u8; 4] = [58u8, 70u8, 177u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timepoint),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getPastVotingPower(address,uint256)` and selector `0xb0ca253e`.
```solidity
function getPastVotingPower(address account, uint256 blockNumber) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotingPowerCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getPastVotingPower(address,uint256)`](getPastVotingPowerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotingPowerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotingPowerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotingPowerCall) -> Self {
                    (value.account, value.blockNumber)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastVotingPowerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        blockNumber: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotingPowerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotingPowerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastVotingPowerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPastVotingPowerCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPastVotingPowerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPastVotingPower(address,uint256)";
            const SELECTOR: [u8; 4] = [176u8, 202u8, 37u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRemainingEmissions()` and selector `0x4bdd36ce`.
```solidity
function getRemainingEmissions() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRemainingEmissionsCall {}
    ///Container type for the return parameters of the [`getRemainingEmissions()`](getRemainingEmissionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRemainingEmissionsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRemainingEmissionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRemainingEmissionsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRemainingEmissionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRemainingEmissionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRemainingEmissionsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRemainingEmissionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRemainingEmissionsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRemainingEmissionsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRemainingEmissions()";
            const SELECTOR: [u8; 4] = [75u8, 221u8, 54u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRemainingLockTime()` and selector `0x7a8cd156`.
```solidity
function getRemainingLockTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRemainingLockTimeCall {}
    ///Container type for the return parameters of the [`getRemainingLockTime()`](getRemainingLockTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRemainingLockTimeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRemainingLockTimeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRemainingLockTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRemainingLockTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRemainingLockTimeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRemainingLockTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRemainingLockTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRemainingLockTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRemainingLockTimeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRemainingLockTime()";
            const SELECTOR: [u8; 4] = [122u8, 140u8, 209u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getVotes(address)` and selector `0x9ab24eb0`.
```solidity
function getVotes(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getVotes(address)`](getVotesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVotesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getVotesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVotes(address)";
            const SELECTOR: [u8; 4] = [154u8, 178u8, 78u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getVotingPower(address)` and selector `0xbb4d4436`.
```solidity
function getVotingPower(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotingPowerCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getVotingPower(address)`](getVotingPowerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotingPowerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotingPowerCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVotingPowerCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotingPowerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotingPowerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getVotingPowerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getVotingPowerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVotingPowerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getVotingPowerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVotingPower(address)";
            const SELECTOR: [u8; 4] = [187u8, 77u8, 68u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isBridgeAdded(address)` and selector `0x6a96e3ed`.
```solidity
function isBridgeAdded(address) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBridgeAddedCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isBridgeAdded(address)`](isBridgeAddedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBridgeAddedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBridgeAddedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isBridgeAddedCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isBridgeAddedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBridgeAddedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isBridgeAddedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isBridgeAddedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isBridgeAddedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isBridgeAddedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isBridgeAdded(address)";
            const SELECTOR: [u8; 4] = [106u8, 150u8, 227u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isBridgeAuthorized(address)` and selector `0x78fb7fd2`.
```solidity
function isBridgeAuthorized(address bridge) external view returns (bool authorized);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBridgeAuthorizedCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isBridgeAuthorized(address)`](isBridgeAuthorizedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBridgeAuthorizedReturn {
        #[allow(missing_docs)]
        pub authorized: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBridgeAuthorizedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isBridgeAuthorizedCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isBridgeAuthorizedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBridgeAuthorizedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isBridgeAuthorizedReturn) -> Self {
                    (value.authorized,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isBridgeAuthorizedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { authorized: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isBridgeAuthorizedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isBridgeAuthorizedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isBridgeAuthorized(address)";
            const SELECTOR: [u8; 4] = [120u8, 251u8, 127u8, 210u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxLockTimestamp()` and selector `0x8426adf2`.
```solidity
function maxLockTimestamp() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxLockTimestampCall {}
    ///Container type for the return parameters of the [`maxLockTimestamp()`](maxLockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxLockTimestampReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxLockTimestampCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxLockTimestampCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxLockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxLockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxLockTimestampReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxLockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxLockTimestampCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxLockTimestampReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxLockTimestamp()";
            const SELECTOR: [u8; 4] = [132u8, 38u8, 173u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `mint(address,uint256)` and selector `0x40c10f19`.
```solidity
function mint(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mint(address,uint256)`](mintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(address,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 193u8, 15u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameCall {}
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `nonces(address)` and selector `0x7ecebe00`.
```solidity
function nonces(address owner) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noncesCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`nonces(address)`](noncesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noncesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesCall> for UnderlyingRustTuple<'_> {
                fn from(value: noncesCall) -> Self {
                    (value.owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: noncesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for noncesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = noncesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nonces(address)";
            const SELECTOR: [u8; 4] = [126u8, 206u8, 190u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `numCheckpoints(address)` and selector `0x6fcfff45`.
```solidity
function numCheckpoints(address account) external view returns (uint32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct numCheckpointsCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`numCheckpoints(address)`](numCheckpointsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct numCheckpointsReturn {
        #[allow(missing_docs)]
        pub _0: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<numCheckpointsCall> for UnderlyingRustTuple<'_> {
                fn from(value: numCheckpointsCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for numCheckpointsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<numCheckpointsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: numCheckpointsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for numCheckpointsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for numCheckpointsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = numCheckpointsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "numCheckpoints(address)";
            const SELECTOR: [u8; 4] = [111u8, 207u8, 255u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permit(address,address,uint256,uint256,uint8,bytes32,bytes32)` and selector `0xd505accf`.
```solidity
function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub v: u8,
        #[allow(missing_docs)]
        pub r: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`permit(address,address,uint256,uint256,uint8,bytes32,bytes32)`](permitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitCall> for UnderlyingRustTuple<'_> {
                fn from(value: permitCall) -> Self {
                    (
                        value.owner,
                        value.spender,
                        value.value,
                        value.deadline,
                        value.v,
                        value.r,
                        value.s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                        value: tuple.2,
                        deadline: tuple.3,
                        v: tuple.4,
                        r: tuple.5,
                        s: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: permitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [213u8, 5u8, 172u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeBridge(address)` and selector `0x04df017d`.
```solidity
function removeBridge(address bridge) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeBridgeCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeBridge(address)`](removeBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeBridgeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeBridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeBridgeCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeBridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeBridgeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeBridgeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeBridgeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeBridge(address)";
            const SELECTOR: [u8; 4] = [4u8, 223u8, 1u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeActive(address,bool)` and selector `0xc9ab0006`.
```solidity
function setBridgeActive(address bridge, bool isActive) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    ///Container type for the return parameters of the [`setBridgeActive(address,bool)`](setBridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveCall) -> Self {
                    (value.bridge, value.isActive)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bridge: tuple.0,
                        isActive: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeActiveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeActive(address,bool)";
            const SELECTOR: [u8; 4] = [201u8, 171u8, 0u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isActive,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeLimits(address,uint256,uint256)` and selector `0x63a0daac`.
```solidity
function setBridgeLimits(address bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeLimitsCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setBridgeLimits(address,uint256,uint256)`](setBridgeLimitsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeLimitsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeLimitsCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeLimitsCall) -> Self {
                    (value.bridge, value.dailyMintLimit, value.dailyBurnLimit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeLimitsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bridge: tuple.0,
                        dailyMintLimit: tuple.1,
                        dailyBurnLimit: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeLimitsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeLimitsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeLimitsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeLimitsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeLimitsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeLimits(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [99u8, 160u8, 218u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setUnlockTimestamp(uint256)` and selector `0x844c9026`.
```solidity
function setUnlockTimestamp(uint256 newUnlockTimestamp) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUnlockTimestampCall {
        #[allow(missing_docs)]
        pub newUnlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setUnlockTimestamp(uint256)`](setUnlockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUnlockTimestampReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUnlockTimestampCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setUnlockTimestampCall) -> Self {
                    (value.newUnlockTimestamp,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setUnlockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newUnlockTimestamp: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUnlockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setUnlockTimestampReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setUnlockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUnlockTimestampCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUnlockTimestampReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUnlockTimestamp(uint256)";
            const SELECTOR: [u8; 4] = [132u8, 76u8, 144u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newUnlockTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolCall {}
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `totalSupply()` and selector `0x18160ddd`.
```solidity
function totalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyCall {}
    ///Container type for the return parameters of the [`totalSupply()`](totalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalSupply()";
            const SELECTOR: [u8; 4] = [24u8, 22u8, 13u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transfer(address,uint256)` and selector `0xa9059cbb`.
```solidity
function transfer(address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transfer(address,uint256)`](transferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCall) -> Self {
                    (value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfer(address,uint256)";
            const SELECTOR: [u8; 4] = [169u8, 5u8, 156u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        value: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFromReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transfersLocked()` and selector `0x83f1211b`.
```solidity
function transfersLocked() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transfersLockedCall {}
    ///Container type for the return parameters of the [`transfersLocked()`](transfersLockedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transfersLockedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transfersLockedCall> for UnderlyingRustTuple<'_> {
                fn from(value: transfersLockedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transfersLockedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transfersLockedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transfersLockedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transfersLockedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transfersLockedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transfersLockedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfersLocked()";
            const SELECTOR: [u8; 4] = [131u8, 241u8, 33u8, 27u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `unlockTimestamp()` and selector `0xaa082a9d`.
```solidity
function unlockTimestamp() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unlockTimestampCall {}
    ///Container type for the return parameters of the [`unlockTimestamp()`](unlockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unlockTimestampReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockTimestampCall> for UnderlyingRustTuple<'_> {
                fn from(value: unlockTimestampCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unlockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: unlockTimestampReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for unlockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unlockTimestampCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unlockTimestampReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unlockTimestamp()";
            const SELECTOR: [u8; 4] = [170u8, 8u8, 42u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateTokenCrosschain`](self) function calls.
    pub enum SyndicateTokenCrosschainCalls {
        #[allow(missing_docs)]
        AIRDROP_MANAGER_ROLE(AIRDROP_MANAGER_ROLECall),
        #[allow(missing_docs)]
        BRIDGE_MANAGER_ROLE(BRIDGE_MANAGER_ROLECall),
        #[allow(missing_docs)]
        CLOCK_MODE(CLOCK_MODECall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        DOMAIN_SEPARATOR(DOMAIN_SEPARATORCall),
        #[allow(missing_docs)]
        EMISSION_MINTER_ROLE(EMISSION_MINTER_ROLECall),
        #[allow(missing_docs)]
        INITIAL_MINT_SUPPLY(INITIAL_MINT_SUPPLYCall),
        #[allow(missing_docs)]
        MAX_LOCK_DURATION(MAX_LOCK_DURATIONCall),
        #[allow(missing_docs)]
        TOTAL_SUPPLY(TOTAL_SUPPLYCall),
        #[allow(missing_docs)]
        allowance(allowanceCall),
        #[allow(missing_docs)]
        approve(approveCall),
        #[allow(missing_docs)]
        balanceOf(balanceOfCall),
        #[allow(missing_docs)]
        bridgeConfigs(bridgeConfigsCall),
        #[allow(missing_docs)]
        bridges(bridgesCall),
        #[allow(missing_docs)]
        burnFrom(burnFromCall),
        #[allow(missing_docs)]
        checkpoints(checkpointsCall),
        #[allow(missing_docs)]
        clock(clockCall),
        #[allow(missing_docs)]
        crosschainBurn(crosschainBurnCall),
        #[allow(missing_docs)]
        crosschainMint(crosschainMintCall),
        #[allow(missing_docs)]
        decimals(decimalsCall),
        #[allow(missing_docs)]
        delegate(delegateCall),
        #[allow(missing_docs)]
        delegateBySig(delegateBySigCall),
        #[allow(missing_docs)]
        delegates(delegatesCall),
        #[allow(missing_docs)]
        eip712Domain(eip712DomainCall),
        #[allow(missing_docs)]
        getAllBridges(getAllBridgesCall),
        #[allow(missing_docs)]
        getAvailableBurnLimit(getAvailableBurnLimitCall),
        #[allow(missing_docs)]
        getAvailableMintLimit(getAvailableMintLimitCall),
        #[allow(missing_docs)]
        getBridgeAtIndex(getBridgeAtIndexCall),
        #[allow(missing_docs)]
        getBridgeConfig(getBridgeConfigCall),
        #[allow(missing_docs)]
        getBridgeCount(getBridgeCountCall),
        #[allow(missing_docs)]
        getCurrentTotalSupply(getCurrentTotalSupplyCall),
        #[allow(missing_docs)]
        getPastTotalSupply(getPastTotalSupplyCall),
        #[allow(missing_docs)]
        getPastVotes(getPastVotesCall),
        #[allow(missing_docs)]
        getPastVotingPower(getPastVotingPowerCall),
        #[allow(missing_docs)]
        getRemainingEmissions(getRemainingEmissionsCall),
        #[allow(missing_docs)]
        getRemainingLockTime(getRemainingLockTimeCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        getVotes(getVotesCall),
        #[allow(missing_docs)]
        getVotingPower(getVotingPowerCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        isBridgeAdded(isBridgeAddedCall),
        #[allow(missing_docs)]
        isBridgeAuthorized(isBridgeAuthorizedCall),
        #[allow(missing_docs)]
        maxLockTimestamp(maxLockTimestampCall),
        #[allow(missing_docs)]
        mint(mintCall),
        #[allow(missing_docs)]
        name(nameCall),
        #[allow(missing_docs)]
        nonces(noncesCall),
        #[allow(missing_docs)]
        numCheckpoints(numCheckpointsCall),
        #[allow(missing_docs)]
        permit(permitCall),
        #[allow(missing_docs)]
        removeBridge(removeBridgeCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        setBridgeActive(setBridgeActiveCall),
        #[allow(missing_docs)]
        setBridgeLimits(setBridgeLimitsCall),
        #[allow(missing_docs)]
        setUnlockTimestamp(setUnlockTimestampCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        symbol(symbolCall),
        #[allow(missing_docs)]
        totalSupply(totalSupplyCall),
        #[allow(missing_docs)]
        transfer(transferCall),
        #[allow(missing_docs)]
        transferFrom(transferFromCall),
        #[allow(missing_docs)]
        transfersLocked(transfersLockedCall),
        #[allow(missing_docs)]
        unlockTimestamp(unlockTimestampCall),
    }
    #[automatically_derived]
    impl SyndicateTokenCrosschainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [4u8, 223u8, 1u8, 125u8],
            [6u8, 253u8, 222u8, 3u8],
            [9u8, 94u8, 167u8, 179u8],
            [24u8, 22u8, 13u8, 221u8],
            [24u8, 191u8, 80u8, 119u8],
            [35u8, 184u8, 114u8, 221u8],
            [36u8, 138u8, 156u8, 163u8],
            [43u8, 140u8, 73u8, 227u8],
            [47u8, 47u8, 241u8, 93u8],
            [48u8, 211u8, 232u8, 235u8],
            [49u8, 60u8, 229u8, 103u8],
            [54u8, 68u8, 229u8, 21u8],
            [54u8, 86u8, 138u8, 190u8],
            [58u8, 70u8, 177u8, 168u8],
            [64u8, 193u8, 15u8, 25u8],
            [66u8, 122u8, 192u8, 202u8],
            [75u8, 221u8, 54u8, 206u8],
            [75u8, 245u8, 215u8, 233u8],
            [79u8, 27u8, 252u8, 158u8],
            [88u8, 124u8, 222u8, 30u8],
            [90u8, 93u8, 177u8, 187u8],
            [92u8, 25u8, 169u8, 92u8],
            [99u8, 160u8, 218u8, 172u8],
            [101u8, 20u8, 85u8, 52u8],
            [106u8, 150u8, 227u8, 237u8],
            [111u8, 207u8, 255u8, 69u8],
            [112u8, 160u8, 130u8, 49u8],
            [114u8, 203u8, 220u8, 200u8],
            [120u8, 251u8, 127u8, 210u8],
            [121u8, 204u8, 103u8, 144u8],
            [122u8, 140u8, 209u8, 86u8],
            [126u8, 206u8, 190u8, 0u8],
            [131u8, 241u8, 33u8, 27u8],
            [132u8, 38u8, 173u8, 242u8],
            [132u8, 76u8, 144u8, 38u8],
            [132u8, 176u8, 25u8, 110u8],
            [138u8, 84u8, 37u8, 33u8],
            [141u8, 51u8, 67u8, 214u8],
            [142u8, 83u8, 158u8, 140u8],
            [144u8, 45u8, 85u8, 165u8],
            [145u8, 209u8, 72u8, 84u8],
            [145u8, 221u8, 173u8, 244u8],
            [148u8, 170u8, 34u8, 242u8],
            [149u8, 216u8, 155u8, 65u8],
            [154u8, 178u8, 78u8, 176u8],
            [155u8, 126u8, 246u8, 75u8],
            [162u8, 23u8, 253u8, 223u8],
            [163u8, 196u8, 71u8, 5u8],
            [169u8, 5u8, 156u8, 187u8],
            [170u8, 8u8, 42u8, 157u8],
            [176u8, 202u8, 37u8, 62u8],
            [187u8, 77u8, 68u8, 54u8],
            [192u8, 42u8, 231u8, 84u8],
            [195u8, 205u8, 165u8, 32u8],
            [196u8, 252u8, 69u8, 168u8],
            [201u8, 171u8, 0u8, 6u8],
            [213u8, 5u8, 172u8, 207u8],
            [213u8, 71u8, 116u8, 31u8],
            [221u8, 98u8, 237u8, 62u8],
            [241u8, 18u8, 126u8, 216u8],
            [247u8, 94u8, 133u8, 18u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateTokenCrosschainCalls {
        const NAME: &'static str = "SyndicateTokenCrosschainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 62usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AIRDROP_MANAGER_ROLE(_) => {
                    <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::BRIDGE_MANAGER_ROLE(_) => {
                    <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CLOCK_MODE(_) => {
                    <CLOCK_MODECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DOMAIN_SEPARATOR(_) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::EMISSION_MINTER_ROLE(_) => {
                    <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::INITIAL_MINT_SUPPLY(_) => {
                    <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MAX_LOCK_DURATION(_) => {
                    <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TOTAL_SUPPLY(_) => {
                    <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowance(_) => {
                    <allowanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeConfigs(_) => {
                    <bridgeConfigsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridges(_) => <bridgesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::burnFrom(_) => <burnFromCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::checkpoints(_) => {
                    <checkpointsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::clock(_) => <clockCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::crosschainBurn(_) => {
                    <crosschainBurnCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crosschainMint(_) => {
                    <crosschainMintCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::decimals(_) => <decimalsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::delegate(_) => <delegateCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::delegateBySig(_) => {
                    <delegateBySigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::delegates(_) => {
                    <delegatesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::eip712Domain(_) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllBridges(_) => {
                    <getAllBridgesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAvailableBurnLimit(_) => {
                    <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAvailableMintLimit(_) => {
                    <getAvailableMintLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeAtIndex(_) => {
                    <getBridgeAtIndexCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeConfig(_) => {
                    <getBridgeConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeCount(_) => {
                    <getBridgeCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentTotalSupply(_) => {
                    <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPastTotalSupply(_) => {
                    <getPastTotalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPastVotes(_) => {
                    <getPastVotesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPastVotingPower(_) => {
                    <getPastVotingPowerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRemainingEmissions(_) => {
                    <getRemainingEmissionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRemainingLockTime(_) => {
                    <getRemainingLockTimeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVotes(_) => <getVotesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getVotingPower(_) => {
                    <getVotingPowerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isBridgeAdded(_) => {
                    <isBridgeAddedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isBridgeAuthorized(_) => {
                    <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxLockTimestamp(_) => {
                    <maxLockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::nonces(_) => <noncesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::numCheckpoints(_) => {
                    <numCheckpointsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::permit(_) => <permitCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removeBridge(_) => {
                    <removeBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeActive(_) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeLimits(_) => {
                    <setBridgeLimitsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setUnlockTimestamp(_) => {
                    <setUnlockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::totalSupply(_) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfer(_) => <transferCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfersLocked(_) => {
                    <transfersLockedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unlockTimestamp(_) => {
                    <unlockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn removeBridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <removeBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::removeBridge)
                    }
                    removeBridge
                },
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::name)
                    }
                    name
                },
                {
                    fn approve(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::approve)
                    }
                    approve
                },
                {
                    fn totalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn crosschainMint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <crosschainMintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::crosschainMint)
                    }
                    crosschainMint
                },
                {
                    fn transferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn crosschainBurn(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <crosschainBurnCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::crosschainBurn)
                    }
                    crosschainBurn
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn getAvailableBurnLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAvailableBurnLimit)
                    }
                    getAvailableBurnLimit
                },
                {
                    fn decimals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <decimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::decimals)
                    }
                    decimals
                },
                {
                    fn DOMAIN_SEPARATOR(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::DOMAIN_SEPARATOR)
                    }
                    DOMAIN_SEPARATOR
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn getPastVotes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastVotesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastVotes)
                    }
                    getPastVotes
                },
                {
                    fn mint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::mint)
                    }
                    mint
                },
                {
                    fn bridgeConfigs(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <bridgeConfigsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::bridgeConfigs)
                    }
                    bridgeConfigs
                },
                {
                    fn getRemainingEmissions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getRemainingEmissionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getRemainingEmissions)
                    }
                    getRemainingEmissions
                },
                {
                    fn CLOCK_MODE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <CLOCK_MODECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::CLOCK_MODE)
                    }
                    CLOCK_MODE
                },
                {
                    fn MAX_LOCK_DURATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::MAX_LOCK_DURATION)
                    }
                    MAX_LOCK_DURATION
                },
                {
                    fn delegates(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegatesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::delegates)
                    }
                    delegates
                },
                {
                    fn getBridgeAtIndex(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeAtIndexCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeAtIndex)
                    }
                    getBridgeAtIndex
                },
                {
                    fn delegate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegateCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::delegate)
                    }
                    delegate
                },
                {
                    fn setBridgeLimits(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setBridgeLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::setBridgeLimits)
                    }
                    setBridgeLimits
                },
                {
                    fn getBridgeCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeCount)
                    }
                    getBridgeCount
                },
                {
                    fn isBridgeAdded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <isBridgeAddedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::isBridgeAdded)
                    }
                    isBridgeAdded
                },
                {
                    fn numCheckpoints(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <numCheckpointsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::numCheckpoints)
                    }
                    numCheckpoints
                },
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn getAllBridges(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAllBridgesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAllBridges)
                    }
                    getAllBridges
                },
                {
                    fn isBridgeAuthorized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::isBridgeAuthorized)
                    }
                    isBridgeAuthorized
                },
                {
                    fn burnFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <burnFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::burnFrom)
                    }
                    burnFrom
                },
                {
                    fn getRemainingLockTime(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getRemainingLockTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getRemainingLockTime)
                    }
                    getRemainingLockTime
                },
                {
                    fn nonces(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <noncesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::nonces)
                    }
                    nonces
                },
                {
                    fn transfersLocked(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transfersLockedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::transfersLocked)
                    }
                    transfersLocked
                },
                {
                    fn maxLockTimestamp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <maxLockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::maxLockTimestamp)
                    }
                    maxLockTimestamp
                },
                {
                    fn setUnlockTimestamp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setUnlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::setUnlockTimestamp)
                    }
                    setUnlockTimestamp
                },
                {
                    fn eip712Domain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <eip712DomainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::eip712Domain)
                    }
                    eip712Domain
                },
                {
                    fn AIRDROP_MANAGER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::AIRDROP_MANAGER_ROLE)
                    }
                    AIRDROP_MANAGER_ROLE
                },
                {
                    fn EMISSION_MINTER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::EMISSION_MINTER_ROLE)
                    }
                    EMISSION_MINTER_ROLE
                },
                {
                    fn getPastTotalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastTotalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastTotalSupply)
                    }
                    getPastTotalSupply
                },
                {
                    fn TOTAL_SUPPLY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::TOTAL_SUPPLY)
                    }
                    TOTAL_SUPPLY
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn clock(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <clockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::clock)
                    }
                    clock
                },
                {
                    fn getAvailableMintLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAvailableMintLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAvailableMintLimit)
                    }
                    getAvailableMintLimit
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::symbol)
                    }
                    symbol
                },
                {
                    fn getVotes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getVotesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getVotes)
                    }
                    getVotes
                },
                {
                    fn INITIAL_MINT_SUPPLY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::INITIAL_MINT_SUPPLY)
                    }
                    INITIAL_MINT_SUPPLY
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn bridges(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <bridgesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::bridges)
                    }
                    bridges
                },
                {
                    fn transfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::transfer)
                    }
                    transfer
                },
                {
                    fn unlockTimestamp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <unlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::unlockTimestamp)
                    }
                    unlockTimestamp
                },
                {
                    fn getPastVotingPower(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastVotingPowerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastVotingPower)
                    }
                    getPastVotingPower
                },
                {
                    fn getVotingPower(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getVotingPowerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getVotingPower)
                    }
                    getVotingPower
                },
                {
                    fn getCurrentTotalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getCurrentTotalSupply)
                    }
                    getCurrentTotalSupply
                },
                {
                    fn delegateBySig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegateBySigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::delegateBySig)
                    }
                    delegateBySig
                },
                {
                    fn getBridgeConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeConfig)
                    }
                    getBridgeConfig
                },
                {
                    fn setBridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::setBridgeActive)
                    }
                    setBridgeActive
                },
                {
                    fn permit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <permitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::permit)
                    }
                    permit
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn allowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::allowance)
                    }
                    allowance
                },
                {
                    fn checkpoints(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <checkpointsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::checkpoints)
                    }
                    checkpoints
                },
                {
                    fn BRIDGE_MANAGER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainCalls::BRIDGE_MANAGER_ROLE)
                    }
                    BRIDGE_MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AIRDROP_MANAGER_ROLE(inner) => {
                    <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BRIDGE_MANAGER_ROLE(inner) => {
                    <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CLOCK_MODE(inner) => {
                    <CLOCK_MODECall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EMISSION_MINTER_ROLE(inner) => {
                    <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::INITIAL_MINT_SUPPLY(inner) => {
                    <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MAX_LOCK_DURATION(inner) => {
                    <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TOTAL_SUPPLY(inner) => {
                    <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bridgeConfigs(inner) => {
                    <bridgeConfigsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridges(inner) => {
                    <bridgesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::burnFrom(inner) => {
                    <burnFromCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::checkpoints(inner) => {
                    <checkpointsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::clock(inner) => {
                    <clockCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::crosschainBurn(inner) => {
                    <crosschainBurnCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crosschainMint(inner) => {
                    <crosschainMintCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::delegate(inner) => {
                    <delegateCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::delegateBySig(inner) => {
                    <delegateBySigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::delegates(inner) => {
                    <delegatesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllBridges(inner) => {
                    <getAllBridgesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAvailableBurnLimit(inner) => {
                    <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAvailableMintLimit(inner) => {
                    <getAvailableMintLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeAtIndex(inner) => {
                    <getBridgeAtIndexCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeConfig(inner) => {
                    <getBridgeConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeCount(inner) => {
                    <getBridgeCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentTotalSupply(inner) => {
                    <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPastTotalSupply(inner) => {
                    <getPastTotalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPastVotes(inner) => {
                    <getPastVotesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPastVotingPower(inner) => {
                    <getPastVotingPowerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRemainingEmissions(inner) => {
                    <getRemainingEmissionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRemainingLockTime(inner) => {
                    <getRemainingLockTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getVotingPower(inner) => {
                    <getVotingPowerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isBridgeAdded(inner) => {
                    <isBridgeAddedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isBridgeAuthorized(inner) => {
                    <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxLockTimestamp(inner) => {
                    <maxLockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::numCheckpoints(inner) => {
                    <numCheckpointsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeBridge(inner) => {
                    <removeBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeLimits(inner) => {
                    <setBridgeLimitsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setUnlockTimestamp(inner) => {
                    <setUnlockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfersLocked(inner) => {
                    <transfersLockedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unlockTimestamp(inner) => {
                    <unlockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AIRDROP_MANAGER_ROLE(inner) => {
                    <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BRIDGE_MANAGER_ROLE(inner) => {
                    <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CLOCK_MODE(inner) => {
                    <CLOCK_MODECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EMISSION_MINTER_ROLE(inner) => {
                    <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::INITIAL_MINT_SUPPLY(inner) => {
                    <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MAX_LOCK_DURATION(inner) => {
                    <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TOTAL_SUPPLY(inner) => {
                    <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeConfigs(inner) => {
                    <bridgeConfigsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridges(inner) => {
                    <bridgesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::burnFrom(inner) => {
                    <burnFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkpoints(inner) => {
                    <checkpointsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::clock(inner) => {
                    <clockCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::crosschainBurn(inner) => {
                    <crosschainBurnCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crosschainMint(inner) => {
                    <crosschainMintCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delegate(inner) => {
                    <delegateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delegateBySig(inner) => {
                    <delegateBySigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delegates(inner) => {
                    <delegatesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllBridges(inner) => {
                    <getAllBridgesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAvailableBurnLimit(inner) => {
                    <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAvailableMintLimit(inner) => {
                    <getAvailableMintLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeAtIndex(inner) => {
                    <getBridgeAtIndexCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeConfig(inner) => {
                    <getBridgeConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeCount(inner) => {
                    <getBridgeCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentTotalSupply(inner) => {
                    <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPastTotalSupply(inner) => {
                    <getPastTotalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPastVotes(inner) => {
                    <getPastVotesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPastVotingPower(inner) => {
                    <getPastVotingPowerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRemainingEmissions(inner) => {
                    <getRemainingEmissionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRemainingLockTime(inner) => {
                    <getRemainingLockTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVotingPower(inner) => {
                    <getVotingPowerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isBridgeAdded(inner) => {
                    <isBridgeAddedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isBridgeAuthorized(inner) => {
                    <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxLockTimestamp(inner) => {
                    <maxLockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::numCheckpoints(inner) => {
                    <numCheckpointsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeBridge(inner) => {
                    <removeBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeLimits(inner) => {
                    <setBridgeLimitsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setUnlockTimestamp(inner) => {
                    <setUnlockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfersLocked(inner) => {
                    <transfersLockedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unlockTimestamp(inner) => {
                    <unlockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateTokenCrosschain`](self) custom errors.
    pub enum SyndicateTokenCrosschainErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        BridgeNotActive(BridgeNotActive),
        #[allow(missing_docs)]
        BurnOnlyDuringLockPeriod(BurnOnlyDuringLockPeriod),
        #[allow(missing_docs)]
        CheckpointUnorderedInsertion(CheckpointUnorderedInsertion),
        #[allow(missing_docs)]
        ECDSAInvalidSignature(ECDSAInvalidSignature),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureLength(ECDSAInvalidSignatureLength),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureS(ECDSAInvalidSignatureS),
        #[allow(missing_docs)]
        ERC20ExceededSafeSupply(ERC20ExceededSafeSupply),
        #[allow(missing_docs)]
        ERC20InsufficientAllowance(ERC20InsufficientAllowance),
        #[allow(missing_docs)]
        ERC20InsufficientBalance(ERC20InsufficientBalance),
        #[allow(missing_docs)]
        ERC20InvalidApprover(ERC20InvalidApprover),
        #[allow(missing_docs)]
        ERC20InvalidReceiver(ERC20InvalidReceiver),
        #[allow(missing_docs)]
        ERC20InvalidSender(ERC20InvalidSender),
        #[allow(missing_docs)]
        ERC20InvalidSpender(ERC20InvalidSpender),
        #[allow(missing_docs)]
        ERC2612ExpiredSignature(ERC2612ExpiredSignature),
        #[allow(missing_docs)]
        ERC2612InvalidSigner(ERC2612InvalidSigner),
        #[allow(missing_docs)]
        ERC5805FutureLookup(ERC5805FutureLookup),
        #[allow(missing_docs)]
        ERC6372InconsistentClock(ERC6372InconsistentClock),
        #[allow(missing_docs)]
        ExceedsTotalSupply(ExceedsTotalSupply),
        #[allow(missing_docs)]
        InsufficientBurnLimit(InsufficientBurnLimit),
        #[allow(missing_docs)]
        InsufficientMintLimit(InsufficientMintLimit),
        #[allow(missing_docs)]
        InvalidAccountNonce(InvalidAccountNonce),
        #[allow(missing_docs)]
        InvalidShortString(InvalidShortString),
        #[allow(missing_docs)]
        SafeCastOverflowedUintDowncast(SafeCastOverflowedUintDowncast),
        #[allow(missing_docs)]
        StringTooLong(StringTooLong),
        #[allow(missing_docs)]
        TransfersLocked(TransfersLocked),
        #[allow(missing_docs)]
        UnauthorizedBridge(UnauthorizedBridge),
        #[allow(missing_docs)]
        UnlockTimestampInPast(UnlockTimestampInPast),
        #[allow(missing_docs)]
        UnlockTimestampTooLate(UnlockTimestampTooLate),
        #[allow(missing_docs)]
        VotesExpiredSignature(VotesExpiredSignature),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroAmount(ZeroAmount),
    }
    #[automatically_derived]
    impl SyndicateTokenCrosschainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [23u8, 126u8, 63u8, 195u8],
            [28u8, 177u8, 93u8, 38u8],
            [31u8, 42u8, 32u8, 5u8],
            [37u8, 32u8, 96u8, 29u8],
            [48u8, 90u8, 39u8, 169u8],
            [64u8, 237u8, 54u8, 123u8],
            [70u8, 131u8, 175u8, 14u8],
            [75u8, 128u8, 14u8, 70u8],
            [98u8, 121u8, 19u8, 2u8],
            [101u8, 133u8, 182u8, 13u8],
            [102u8, 151u8, 178u8, 50u8],
            [109u8, 252u8, 198u8, 80u8],
            [111u8, 240u8, 113u8, 64u8],
            [117u8, 45u8, 136u8, 192u8],
            [148u8, 40u8, 13u8, 98u8],
            [150u8, 198u8, 253u8, 30u8],
            [165u8, 101u8, 131u8, 83u8],
            [179u8, 81u8, 43u8, 12u8],
            [184u8, 181u8, 202u8, 45u8],
            [215u8, 139u8, 206u8, 12u8],
            [217u8, 46u8, 35u8, 61u8],
            [219u8, 137u8, 227u8, 244u8],
            [226u8, 81u8, 125u8, 63u8],
            [228u8, 80u8, 211u8, 140u8],
            [229u8, 254u8, 151u8, 162u8],
            [230u8, 2u8, 223u8, 5u8],
            [236u8, 68u8, 47u8, 5u8],
            [236u8, 211u8, 248u8, 30u8],
            [239u8, 105u8, 175u8, 101u8],
            [239u8, 218u8, 14u8, 6u8],
            [246u8, 69u8, 238u8, 223u8],
            [251u8, 143u8, 65u8, 178u8],
            [252u8, 230u8, 152u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateTokenCrosschainErrors {
        const NAME: &'static str = "SyndicateTokenCrosschainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 33usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeNotActive(_) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BurnOnlyDuringLockPeriod(_) => {
                    <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CheckpointUnorderedInsertion(_) => {
                    <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignature(_) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureLength(_) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureS(_) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20ExceededSafeSupply(_) => {
                    <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InsufficientAllowance(_) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InsufficientBalance(_) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidApprover(_) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidReceiver(_) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSender(_) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSpender(_) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC2612ExpiredSignature(_) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC2612InvalidSigner(_) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC5805FutureLookup(_) => {
                    <ERC5805FutureLookup as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC6372InconsistentClock(_) => {
                    <ERC6372InconsistentClock as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExceedsTotalSupply(_) => {
                    <ExceedsTotalSupply as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientBurnLimit(_) => {
                    <InsufficientBurnLimit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientMintLimit(_) => {
                    <InsufficientMintLimit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAccountNonce(_) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidShortString(_) => {
                    <InvalidShortString as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeCastOverflowedUintDowncast(_) => {
                    <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::SELECTOR
                }
                Self::StringTooLong(_) => {
                    <StringTooLong as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransfersLocked(_) => {
                    <TransfersLocked as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorizedBridge(_) => {
                    <UnauthorizedBridge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnlockTimestampInPast(_) => {
                    <UnlockTimestampInPast as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnlockTimestampTooLate(_) => {
                    <UnlockTimestampTooLate as alloy_sol_types::SolError>::SELECTOR
                }
                Self::VotesExpiredSignature(_) => {
                    <VotesExpiredSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAmount(_) => {
                    <ZeroAmount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors>] = &[
                {
                    fn ExceedsTotalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ExceedsTotalSupply as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ExceedsTotalSupply)
                    }
                    ExceedsTotalSupply
                },
                {
                    fn ERC20ExceededSafeSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20ExceededSafeSupply)
                    }
                    ERC20ExceededSafeSupply
                },
                {
                    fn ZeroAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn CheckpointUnorderedInsertion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::CheckpointUnorderedInsertion,
                            )
                    }
                    CheckpointUnorderedInsertion
                },
                {
                    fn StringTooLong(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <StringTooLong as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::StringTooLong)
                    }
                    StringTooLong
                },
                {
                    fn InsufficientMintLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientMintLimit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::InsufficientMintLimit)
                    }
                    InsufficientMintLimit
                },
                {
                    fn VotesExpiredSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <VotesExpiredSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::VotesExpiredSignature)
                    }
                    VotesExpiredSignature
                },
                {
                    fn ERC2612InvalidSigner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC2612InvalidSigner)
                    }
                    ERC2612InvalidSigner
                },
                {
                    fn ERC2612ExpiredSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC2612ExpiredSignature)
                    }
                    ERC2612ExpiredSignature
                },
                {
                    fn UnauthorizedBridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnauthorizedBridge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnauthorizedBridge)
                    }
                    UnauthorizedBridge
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn SafeCastOverflowedUintDowncast(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::SafeCastOverflowedUintDowncast,
                            )
                    }
                    SafeCastOverflowedUintDowncast
                },
                {
                    fn ERC6372InconsistentClock(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC6372InconsistentClock as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC6372InconsistentClock,
                            )
                    }
                    ERC6372InconsistentClock
                },
                {
                    fn InvalidAccountNonce(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InvalidAccountNonce as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::InvalidAccountNonce)
                    }
                    InvalidAccountNonce
                },
                {
                    fn ERC20InvalidSpender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidSpender)
                    }
                    ERC20InvalidSpender
                },
                {
                    fn ERC20InvalidSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidSender)
                    }
                    ERC20InvalidSender
                },
                {
                    fn UnlockTimestampInPast(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnlockTimestampInPast as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnlockTimestampInPast)
                    }
                    UnlockTimestampInPast
                },
                {
                    fn InvalidShortString(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InvalidShortString as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::InvalidShortString)
                    }
                    InvalidShortString
                },
                {
                    fn BurnOnlyDuringLockPeriod(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::BurnOnlyDuringLockPeriod,
                            )
                    }
                    BurnOnlyDuringLockPeriod
                },
                {
                    fn ECDSAInvalidSignatureS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ECDSAInvalidSignatureS)
                    }
                    ECDSAInvalidSignatureS
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn TransfersLocked(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <TransfersLocked as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::TransfersLocked)
                    }
                    TransfersLocked
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn ERC20InsufficientBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC20InsufficientBalance,
                            )
                    }
                    ERC20InsufficientBalance
                },
                {
                    fn InsufficientBurnLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientBurnLimit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::InsufficientBurnLimit)
                    }
                    InsufficientBurnLimit
                },
                {
                    fn ERC20InvalidApprover(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidApprover)
                    }
                    ERC20InvalidApprover
                },
                {
                    fn ERC20InvalidReceiver(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidReceiver)
                    }
                    ERC20InvalidReceiver
                },
                {
                    fn ERC5805FutureLookup(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC5805FutureLookup as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC5805FutureLookup)
                    }
                    ERC5805FutureLookup
                },
                {
                    fn UnlockTimestampTooLate(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnlockTimestampTooLate as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnlockTimestampTooLate)
                    }
                    UnlockTimestampTooLate
                },
                {
                    fn BridgeNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BridgeNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::BridgeNotActive)
                    }
                    BridgeNotActive
                },
                {
                    fn ECDSAInvalidSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateTokenCrosschainErrors::ECDSAInvalidSignature)
                    }
                    ECDSAInvalidSignature
                },
                {
                    fn ERC20InsufficientAllowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC20InsufficientAllowance,
                            )
                    }
                    ERC20InsufficientAllowance
                },
                {
                    fn ECDSAInvalidSignatureLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ECDSAInvalidSignatureLength,
                            )
                    }
                    ECDSAInvalidSignatureLength
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BurnOnlyDuringLockPeriod(inner) => {
                    <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CheckpointUnorderedInsertion(inner) => {
                    <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20ExceededSafeSupply(inner) => {
                    <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC2612ExpiredSignature(inner) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC2612InvalidSigner(inner) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC5805FutureLookup(inner) => {
                    <ERC5805FutureLookup as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC6372InconsistentClock(inner) => {
                    <ERC6372InconsistentClock as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ExceedsTotalSupply(inner) => {
                    <ExceedsTotalSupply as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientBurnLimit(inner) => {
                    <InsufficientBurnLimit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientMintLimit(inner) => {
                    <InsufficientMintLimit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAccountNonce(inner) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidShortString(inner) => {
                    <InvalidShortString as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeCastOverflowedUintDowncast(inner) => {
                    <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::StringTooLong(inner) => {
                    <StringTooLong as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::TransfersLocked(inner) => {
                    <TransfersLocked as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnauthorizedBridge(inner) => {
                    <UnauthorizedBridge as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnlockTimestampInPast(inner) => {
                    <UnlockTimestampInPast as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnlockTimestampTooLate(inner) => {
                    <UnlockTimestampTooLate as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::VotesExpiredSignature(inner) => {
                    <VotesExpiredSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BurnOnlyDuringLockPeriod(inner) => {
                    <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CheckpointUnorderedInsertion(inner) => {
                    <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20ExceededSafeSupply(inner) => {
                    <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC2612ExpiredSignature(inner) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC2612InvalidSigner(inner) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC5805FutureLookup(inner) => {
                    <ERC5805FutureLookup as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC6372InconsistentClock(inner) => {
                    <ERC6372InconsistentClock as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExceedsTotalSupply(inner) => {
                    <ExceedsTotalSupply as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientBurnLimit(inner) => {
                    <InsufficientBurnLimit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientMintLimit(inner) => {
                    <InsufficientMintLimit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAccountNonce(inner) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidShortString(inner) => {
                    <InvalidShortString as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeCastOverflowedUintDowncast(inner) => {
                    <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::StringTooLong(inner) => {
                    <StringTooLong as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransfersLocked(inner) => {
                    <TransfersLocked as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnauthorizedBridge(inner) => {
                    <UnauthorizedBridge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnlockTimestampInPast(inner) => {
                    <UnlockTimestampInPast as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnlockTimestampTooLate(inner) => {
                    <UnlockTimestampTooLate as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::VotesExpiredSignature(inner) => {
                    <VotesExpiredSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`SyndicateTokenCrosschain`](self) events.
    pub enum SyndicateTokenCrosschainEvents {
        #[allow(missing_docs)]
        Approval(Approval),
        #[allow(missing_docs)]
        BridgeActiveStatusChanged(BridgeActiveStatusChanged),
        #[allow(missing_docs)]
        BridgeAdded(BridgeAdded),
        #[allow(missing_docs)]
        BridgeLimitsSet(BridgeLimitsSet),
        #[allow(missing_docs)]
        BridgeRemoved(BridgeRemoved),
        #[allow(missing_docs)]
        CrosschainBurn(CrosschainBurn),
        #[allow(missing_docs)]
        CrosschainMint(CrosschainMint),
        #[allow(missing_docs)]
        DelegateChanged(DelegateChanged),
        #[allow(missing_docs)]
        DelegateVotesChanged(DelegateVotesChanged),
        #[allow(missing_docs)]
        EIP712DomainChanged(EIP712DomainChanged),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        TokensBurnedByManager(TokensBurnedByManager),
        #[allow(missing_docs)]
        Transfer(Transfer),
        #[allow(missing_docs)]
        UnlockTimestampUpdated(UnlockTimestampUpdated),
    }
    #[automatically_derived]
    impl SyndicateTokenCrosschainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                10u8,
                99u8,
                135u8,
                201u8,
                234u8,
                54u8,
                40u8,
                184u8,
                138u8,
                99u8,
                59u8,
                180u8,
                243u8,
                177u8,
                81u8,
                119u8,
                15u8,
                112u8,
                8u8,
                81u8,
                23u8,
                161u8,
                95u8,
                155u8,
                243u8,
                120u8,
                124u8,
                218u8,
                83u8,
                241u8,
                61u8,
                49u8,
            ],
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                49u8,
                52u8,
                232u8,
                162u8,
                230u8,
                217u8,
                126u8,
                146u8,
                154u8,
                126u8,
                84u8,
                1u8,
                30u8,
                165u8,
                72u8,
                93u8,
                125u8,
                25u8,
                109u8,
                213u8,
                240u8,
                186u8,
                77u8,
                78u8,
                249u8,
                88u8,
                3u8,
                232u8,
                227u8,
                252u8,
                37u8,
                127u8,
            ],
            [
                93u8,
                157u8,
                80u8,
                52u8,
                101u8,
                108u8,
                179u8,
                235u8,
                251u8,
                6u8,
                85u8,
                5u8,
                124u8,
                215u8,
                249u8,
                180u8,
                7u8,
                122u8,
                155u8,
                66u8,
                255u8,
                66u8,
                206u8,
                34u8,
                60u8,
                186u8,
                197u8,
                188u8,
                88u8,
                109u8,
                33u8,
                38u8,
            ],
            [
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ],
            [
                156u8,
                134u8,
                104u8,
                219u8,
                50u8,
                72u8,
                69u8,
                6u8,
                93u8,
                43u8,
                154u8,
                42u8,
                24u8,
                59u8,
                211u8,
                20u8,
                31u8,
                99u8,
                1u8,
                143u8,
                84u8,
                130u8,
                130u8,
                218u8,
                241u8,
                141u8,
                164u8,
                156u8,
                203u8,
                248u8,
                140u8,
                51u8,
            ],
            [
                170u8,
                128u8,
                125u8,
                10u8,
                191u8,
                48u8,
                217u8,
                25u8,
                104u8,
                199u8,
                71u8,
                140u8,
                102u8,
                182u8,
                216u8,
                37u8,
                33u8,
                161u8,
                6u8,
                175u8,
                19u8,
                237u8,
                160u8,
                54u8,
                226u8,
                3u8,
                109u8,
                169u8,
                175u8,
                22u8,
                137u8,
                88u8,
            ],
            [
                185u8,
                7u8,
                149u8,
                166u8,
                102u8,
                80u8,
                21u8,
                89u8,
                131u8,
                226u8,
                66u8,
                202u8,
                195u8,
                225u8,
                172u8,
                26u8,
                77u8,
                194u8,
                111u8,
                142u8,
                210u8,
                152u8,
                127u8,
                60u8,
                228u8,
                22u8,
                163u8,
                78u8,
                0u8,
                17u8,
                31u8,
                212u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                190u8,
                244u8,
                248u8,
                28u8,
                24u8,
                20u8,
                198u8,
                65u8,
                237u8,
                232u8,
                94u8,
                186u8,
                172u8,
                241u8,
                157u8,
                4u8,
                139u8,
                44u8,
                91u8,
                85u8,
                152u8,
                10u8,
                223u8,
                166u8,
                239u8,
                15u8,
                149u8,
                108u8,
                101u8,
                19u8,
                53u8,
                162u8,
            ],
            [
                219u8,
                3u8,
                249u8,
                125u8,
                197u8,
                132u8,
                10u8,
                113u8,
                230u8,
                155u8,
                231u8,
                71u8,
                14u8,
                71u8,
                97u8,
                175u8,
                16u8,
                161u8,
                35u8,
                121u8,
                115u8,
                232u8,
                28u8,
                18u8,
                208u8,
                220u8,
                40u8,
                19u8,
                137u8,
                90u8,
                101u8,
                38u8,
            ],
            [
                221u8,
                104u8,
                150u8,
                220u8,
                241u8,
                212u8,
                179u8,
                17u8,
                204u8,
                168u8,
                125u8,
                209u8,
                155u8,
                187u8,
                162u8,
                234u8,
                156u8,
                226u8,
                248u8,
                103u8,
                193u8,
                86u8,
                136u8,
                120u8,
                160u8,
                67u8,
                138u8,
                102u8,
                161u8,
                175u8,
                238u8,
                236u8,
            ],
            [
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ],
            [
                222u8,
                34u8,
                186u8,
                255u8,
                3u8,
                142u8,
                58u8,
                62u8,
                8u8,
                64u8,
                124u8,
                189u8,
                246u8,
                23u8,
                222u8,
                237u8,
                116u8,
                232u8,
                105u8,
                167u8,
                186u8,
                81u8,
                125u8,
                246u8,
                17u8,
                227u8,
                49u8,
                49u8,
                198u8,
                230u8,
                234u8,
                4u8,
            ],
            [
                222u8,
                194u8,
                186u8,
                205u8,
                210u8,
                240u8,
                91u8,
                89u8,
                222u8,
                52u8,
                218u8,
                155u8,
                82u8,
                61u8,
                255u8,
                139u8,
                228u8,
                46u8,
                94u8,
                56u8,
                232u8,
                24u8,
                200u8,
                47u8,
                219u8,
                11u8,
                174u8,
                119u8,
                67u8,
                135u8,
                167u8,
                36u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateTokenCrosschainEvents {
        const NAME: &'static str = "SyndicateTokenCrosschainEvents";
        const COUNT: usize = 16usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(
                    <BridgeActiveStatusChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeActiveStatusChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeActiveStatusChanged)
                }
                Some(<BridgeAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeAdded)
                }
                Some(<BridgeLimitsSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeLimitsSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeLimitsSet)
                }
                Some(<BridgeRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeRemoved)
                }
                Some(<CrosschainBurn as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrosschainBurn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CrosschainBurn)
                }
                Some(<CrosschainMint as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrosschainMint as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CrosschainMint)
                }
                Some(<DelegateChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DelegateChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DelegateChanged)
                }
                Some(
                    <DelegateVotesChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DelegateVotesChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DelegateVotesChanged)
                }
                Some(
                    <EIP712DomainChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EIP712DomainChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::EIP712DomainChanged)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(
                    <TokensBurnedByManager as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TokensBurnedByManager as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TokensBurnedByManager)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                Some(
                    <UnlockTimestampUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <UnlockTimestampUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UnlockTimestampUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateTokenCrosschainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeActiveStatusChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeLimitsSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrosschainBurn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrosschainMint(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DelegateChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DelegateVotesChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EIP712DomainChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TokensBurnedByManager(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UnlockTimestampUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeActiveStatusChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeLimitsSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrosschainBurn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrosschainMint(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DelegateChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DelegateVotesChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EIP712DomainChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TokensBurnedByManager(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UnlockTimestampUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateTokenCrosschain`](self) contract instance.

See the [wrapper's documentation](`SyndicateTokenCrosschainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateTokenCrosschainInstance<T, P, N> {
        SyndicateTokenCrosschainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        syndTreasuryAddress: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateTokenCrosschainInstance<T, P, N>>,
    > {
        SyndicateTokenCrosschainInstance::<
            T,
            P,
            N,
        >::deploy(provider, defaultAdmin, syndTreasuryAddress)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        syndTreasuryAddress: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateTokenCrosschainInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, defaultAdmin, syndTreasuryAddress)
    }
    /**A [`SyndicateTokenCrosschain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateTokenCrosschain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateTokenCrosschainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateTokenCrosschainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateTokenCrosschainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenCrosschainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateTokenCrosschain`](self) contract instance.

See the [wrapper's documentation](`SyndicateTokenCrosschainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            syndTreasuryAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SyndicateTokenCrosschainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                defaultAdmin,
                syndTreasuryAddress,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            syndTreasuryAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            defaultAdmin,
                            syndTreasuryAddress,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateTokenCrosschainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateTokenCrosschainInstance<T, P, N> {
            SyndicateTokenCrosschainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenCrosschainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AIRDROP_MANAGER_ROLE`] function.
        pub fn AIRDROP_MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, AIRDROP_MANAGER_ROLECall, N> {
            self.call_builder(&AIRDROP_MANAGER_ROLECall {})
        }
        ///Creates a new call builder for the [`BRIDGE_MANAGER_ROLE`] function.
        pub fn BRIDGE_MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_MANAGER_ROLECall, N> {
            self.call_builder(&BRIDGE_MANAGER_ROLECall {})
        }
        ///Creates a new call builder for the [`CLOCK_MODE`] function.
        pub fn CLOCK_MODE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, CLOCK_MODECall, N> {
            self.call_builder(&CLOCK_MODECall {})
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`DOMAIN_SEPARATOR`] function.
        pub fn DOMAIN_SEPARATOR(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DOMAIN_SEPARATORCall, N> {
            self.call_builder(&DOMAIN_SEPARATORCall {})
        }
        ///Creates a new call builder for the [`EMISSION_MINTER_ROLE`] function.
        pub fn EMISSION_MINTER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, EMISSION_MINTER_ROLECall, N> {
            self.call_builder(&EMISSION_MINTER_ROLECall {})
        }
        ///Creates a new call builder for the [`INITIAL_MINT_SUPPLY`] function.
        pub fn INITIAL_MINT_SUPPLY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, INITIAL_MINT_SUPPLYCall, N> {
            self.call_builder(&INITIAL_MINT_SUPPLYCall {})
        }
        ///Creates a new call builder for the [`MAX_LOCK_DURATION`] function.
        pub fn MAX_LOCK_DURATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MAX_LOCK_DURATIONCall, N> {
            self.call_builder(&MAX_LOCK_DURATIONCall {})
        }
        ///Creates a new call builder for the [`TOTAL_SUPPLY`] function.
        pub fn TOTAL_SUPPLY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TOTAL_SUPPLYCall, N> {
            self.call_builder(&TOTAL_SUPPLYCall {})
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowanceCall, N> {
            self.call_builder(&allowanceCall { owner, spender })
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approveCall, N> {
            self.call_builder(&approveCall { spender, value })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { account })
        }
        ///Creates a new call builder for the [`bridgeConfigs`] function.
        pub fn bridgeConfigs(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeConfigsCall, N> {
            self.call_builder(&bridgeConfigsCall { _0 })
        }
        ///Creates a new call builder for the [`bridges`] function.
        pub fn bridges(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgesCall, N> {
            self.call_builder(&bridgesCall { _0 })
        }
        ///Creates a new call builder for the [`burnFrom`] function.
        pub fn burnFrom(
            &self,
            from: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, burnFromCall, N> {
            self.call_builder(&burnFromCall { from, amount })
        }
        ///Creates a new call builder for the [`checkpoints`] function.
        pub fn checkpoints(
            &self,
            account: alloy::sol_types::private::Address,
            pos: u32,
        ) -> alloy_contract::SolCallBuilder<T, &P, checkpointsCall, N> {
            self.call_builder(&checkpointsCall { account, pos })
        }
        ///Creates a new call builder for the [`clock`] function.
        pub fn clock(&self) -> alloy_contract::SolCallBuilder<T, &P, clockCall, N> {
            self.call_builder(&clockCall {})
        }
        ///Creates a new call builder for the [`crosschainBurn`] function.
        pub fn crosschainBurn(
            &self,
            from: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, crosschainBurnCall, N> {
            self.call_builder(&crosschainBurnCall { from, amount })
        }
        ///Creates a new call builder for the [`crosschainMint`] function.
        pub fn crosschainMint(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, crosschainMintCall, N> {
            self.call_builder(&crosschainMintCall { to, amount })
        }
        ///Creates a new call builder for the [`decimals`] function.
        pub fn decimals(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, decimalsCall, N> {
            self.call_builder(&decimalsCall {})
        }
        ///Creates a new call builder for the [`delegate`] function.
        pub fn delegate(
            &self,
            delegatee: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, delegateCall, N> {
            self.call_builder(&delegateCall { delegatee })
        }
        ///Creates a new call builder for the [`delegateBySig`] function.
        pub fn delegateBySig(
            &self,
            delegatee: alloy::sol_types::private::Address,
            nonce: alloy::sol_types::private::primitives::aliases::U256,
            expiry: alloy::sol_types::private::primitives::aliases::U256,
            v: u8,
            r: alloy::sol_types::private::FixedBytes<32>,
            s: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, delegateBySigCall, N> {
            self.call_builder(
                &delegateBySigCall {
                    delegatee,
                    nonce,
                    expiry,
                    v,
                    r,
                    s,
                },
            )
        }
        ///Creates a new call builder for the [`delegates`] function.
        pub fn delegates(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, delegatesCall, N> {
            self.call_builder(&delegatesCall { account })
        }
        ///Creates a new call builder for the [`eip712Domain`] function.
        pub fn eip712Domain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, eip712DomainCall, N> {
            self.call_builder(&eip712DomainCall {})
        }
        ///Creates a new call builder for the [`getAllBridges`] function.
        pub fn getAllBridges(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllBridgesCall, N> {
            self.call_builder(&getAllBridgesCall {})
        }
        ///Creates a new call builder for the [`getAvailableBurnLimit`] function.
        pub fn getAvailableBurnLimit(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAvailableBurnLimitCall, N> {
            self.call_builder(
                &getAvailableBurnLimitCall {
                    bridge,
                },
            )
        }
        ///Creates a new call builder for the [`getAvailableMintLimit`] function.
        pub fn getAvailableMintLimit(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAvailableMintLimitCall, N> {
            self.call_builder(
                &getAvailableMintLimitCall {
                    bridge,
                },
            )
        }
        ///Creates a new call builder for the [`getBridgeAtIndex`] function.
        pub fn getBridgeAtIndex(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBridgeAtIndexCall, N> {
            self.call_builder(&getBridgeAtIndexCall { index })
        }
        ///Creates a new call builder for the [`getBridgeConfig`] function.
        pub fn getBridgeConfig(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBridgeConfigCall, N> {
            self.call_builder(&getBridgeConfigCall { bridge })
        }
        ///Creates a new call builder for the [`getBridgeCount`] function.
        pub fn getBridgeCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBridgeCountCall, N> {
            self.call_builder(&getBridgeCountCall {})
        }
        ///Creates a new call builder for the [`getCurrentTotalSupply`] function.
        pub fn getCurrentTotalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentTotalSupplyCall, N> {
            self.call_builder(&getCurrentTotalSupplyCall {})
        }
        ///Creates a new call builder for the [`getPastTotalSupply`] function.
        pub fn getPastTotalSupply(
            &self,
            timepoint: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPastTotalSupplyCall, N> {
            self.call_builder(
                &getPastTotalSupplyCall {
                    timepoint,
                },
            )
        }
        ///Creates a new call builder for the [`getPastVotes`] function.
        pub fn getPastVotes(
            &self,
            account: alloy::sol_types::private::Address,
            timepoint: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPastVotesCall, N> {
            self.call_builder(
                &getPastVotesCall {
                    account,
                    timepoint,
                },
            )
        }
        ///Creates a new call builder for the [`getPastVotingPower`] function.
        pub fn getPastVotingPower(
            &self,
            account: alloy::sol_types::private::Address,
            blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPastVotingPowerCall, N> {
            self.call_builder(
                &getPastVotingPowerCall {
                    account,
                    blockNumber,
                },
            )
        }
        ///Creates a new call builder for the [`getRemainingEmissions`] function.
        pub fn getRemainingEmissions(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRemainingEmissionsCall, N> {
            self.call_builder(&getRemainingEmissionsCall {})
        }
        ///Creates a new call builder for the [`getRemainingLockTime`] function.
        pub fn getRemainingLockTime(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRemainingLockTimeCall, N> {
            self.call_builder(&getRemainingLockTimeCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`getVotes`] function.
        pub fn getVotes(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getVotesCall, N> {
            self.call_builder(&getVotesCall { account })
        }
        ///Creates a new call builder for the [`getVotingPower`] function.
        pub fn getVotingPower(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getVotingPowerCall, N> {
            self.call_builder(&getVotingPowerCall { account })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`isBridgeAdded`] function.
        pub fn isBridgeAdded(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isBridgeAddedCall, N> {
            self.call_builder(&isBridgeAddedCall { _0 })
        }
        ///Creates a new call builder for the [`isBridgeAuthorized`] function.
        pub fn isBridgeAuthorized(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isBridgeAuthorizedCall, N> {
            self.call_builder(&isBridgeAuthorizedCall { bridge })
        }
        ///Creates a new call builder for the [`maxLockTimestamp`] function.
        pub fn maxLockTimestamp(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxLockTimestampCall, N> {
            self.call_builder(&maxLockTimestampCall {})
        }
        ///Creates a new call builder for the [`mint`] function.
        pub fn mint(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mintCall, N> {
            self.call_builder(&mintCall { to, amount })
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`nonces`] function.
        pub fn nonces(
            &self,
            owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, noncesCall, N> {
            self.call_builder(&noncesCall { owner })
        }
        ///Creates a new call builder for the [`numCheckpoints`] function.
        pub fn numCheckpoints(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, numCheckpointsCall, N> {
            self.call_builder(&numCheckpointsCall { account })
        }
        ///Creates a new call builder for the [`permit`] function.
        pub fn permit(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            v: u8,
            r: alloy::sol_types::private::FixedBytes<32>,
            s: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, permitCall, N> {
            self.call_builder(
                &permitCall {
                    owner,
                    spender,
                    value,
                    deadline,
                    v,
                    r,
                    s,
                },
            )
        }
        ///Creates a new call builder for the [`removeBridge`] function.
        pub fn removeBridge(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeBridgeCall, N> {
            self.call_builder(&removeBridgeCall { bridge })
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`setBridgeActive`] function.
        pub fn setBridgeActive(
            &self,
            bridge: alloy::sol_types::private::Address,
            isActive: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeActiveCall, N> {
            self.call_builder(
                &setBridgeActiveCall {
                    bridge,
                    isActive,
                },
            )
        }
        ///Creates a new call builder for the [`setBridgeLimits`] function.
        pub fn setBridgeLimits(
            &self,
            bridge: alloy::sol_types::private::Address,
            dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
            dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeLimitsCall, N> {
            self.call_builder(
                &setBridgeLimitsCall {
                    bridge,
                    dailyMintLimit,
                    dailyBurnLimit,
                },
            )
        }
        ///Creates a new call builder for the [`setUnlockTimestamp`] function.
        pub fn setUnlockTimestamp(
            &self,
            newUnlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setUnlockTimestampCall, N> {
            self.call_builder(
                &setUnlockTimestampCall {
                    newUnlockTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`totalSupply`] function.
        pub fn totalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, totalSupplyCall, N> {
            self.call_builder(&totalSupplyCall {})
        }
        ///Creates a new call builder for the [`transfer`] function.
        pub fn transfer(
            &self,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCall, N> {
            self.call_builder(&transferCall { to, value })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFromCall, N> {
            self.call_builder(
                &transferFromCall {
                    from,
                    to,
                    value,
                },
            )
        }
        ///Creates a new call builder for the [`transfersLocked`] function.
        pub fn transfersLocked(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, transfersLockedCall, N> {
            self.call_builder(&transfersLockedCall {})
        }
        ///Creates a new call builder for the [`unlockTimestamp`] function.
        pub fn unlockTimestamp(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, unlockTimestampCall, N> {
            self.call_builder(&unlockTimestampCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenCrosschainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`BridgeActiveStatusChanged`] event.
        pub fn BridgeActiveStatusChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeActiveStatusChanged, N> {
            self.event_filter::<BridgeActiveStatusChanged>()
        }
        ///Creates a new event filter for the [`BridgeAdded`] event.
        pub fn BridgeAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeAdded, N> {
            self.event_filter::<BridgeAdded>()
        }
        ///Creates a new event filter for the [`BridgeLimitsSet`] event.
        pub fn BridgeLimitsSet_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeLimitsSet, N> {
            self.event_filter::<BridgeLimitsSet>()
        }
        ///Creates a new event filter for the [`BridgeRemoved`] event.
        pub fn BridgeRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeRemoved, N> {
            self.event_filter::<BridgeRemoved>()
        }
        ///Creates a new event filter for the [`CrosschainBurn`] event.
        pub fn CrosschainBurn_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CrosschainBurn, N> {
            self.event_filter::<CrosschainBurn>()
        }
        ///Creates a new event filter for the [`CrosschainMint`] event.
        pub fn CrosschainMint_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CrosschainMint, N> {
            self.event_filter::<CrosschainMint>()
        }
        ///Creates a new event filter for the [`DelegateChanged`] event.
        pub fn DelegateChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DelegateChanged, N> {
            self.event_filter::<DelegateChanged>()
        }
        ///Creates a new event filter for the [`DelegateVotesChanged`] event.
        pub fn DelegateVotesChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DelegateVotesChanged, N> {
            self.event_filter::<DelegateVotesChanged>()
        }
        ///Creates a new event filter for the [`EIP712DomainChanged`] event.
        pub fn EIP712DomainChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, EIP712DomainChanged, N> {
            self.event_filter::<EIP712DomainChanged>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`TokensBurnedByManager`] event.
        pub fn TokensBurnedByManager_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TokensBurnedByManager, N> {
            self.event_filter::<TokensBurnedByManager>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
        ///Creates a new event filter for the [`UnlockTimestampUpdated`] event.
        pub fn UnlockTimestampUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UnlockTimestampUpdated, N> {
            self.event_filter::<UnlockTimestampUpdated>()
        }
    }
}
