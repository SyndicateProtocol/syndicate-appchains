/**

Generated by the following Solidity interface...
```solidity
interface TeeModule {
    struct PendingAssertion {
        bytes32 blockHash;
        bytes32 sendRoot;
        bytes32 seqBlockHash;
    }
    struct TeeTrustedInput {
        bytes32 appchainConfigHash;
        bytes32 appchainStartBlockHash;
        bytes32 seqConfigHash;
        bytes32 seqStartBlockHash;
        bytes32 setDelayedMessageAcc;
        bytes32 l1StartBlockHash;
        bytes32 l1EndBlockHash;
    }

    error ECDSAInvalidSignature();
    error ECDSAInvalidSignatureLength(uint256 length);
    error ECDSAInvalidSignatureS(bytes32 s);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error ReentrancyGuardReentrantCall();

    event ChallengeResolved(PendingAssertion);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event TeeAppchainConfigHash(bytes32 configHash, bytes32 blockHash);
    event TeeHacked(uint256);
    event TeeInput(TeeTrustedInput input);
    event TeeSeqConfigHash(bytes32 configHash, bytes32 blockHash);

    constructor(address poster_, address bridge_, bytes32 appchainConfigHash_, bytes32 appchainStartBlockHash_, bytes32 seqConfigHash_, bytes32 seqStartBlockHash_, bytes32 l1StartBlockHash_, address l1block_, uint64 challengeWindowDuration_, address teeKeyManager_);

    receive() external payable;

    function bridge() external view returns (address);
    function challengeWindowDuration() external view returns (uint64);
    function challengeWindowEnd() external view returns (uint64);
    function closeChallengeWindow() external;
    function l1block() external view returns (address);
    function owner() external view returns (address);
    function pendingAssertions(uint256) external view returns (bytes32 blockHash, bytes32 sendRoot, bytes32 seqBlockHash);
    function poster() external view returns (address);
    function renounceOwnership() external;
    function resolveChallenge(PendingAssertion memory assertion) external;
    function setAppchainConfigHash(bytes32 hash) external;
    function setChallengeWindowDuration(uint64 duration) external;
    function setSeqConfigHash(bytes32 hash) external;
    function submitAssertion(PendingAssertion memory assertion, bytes memory signature) external;
    function teeHackCount() external view returns (uint256);
    function teeKeyManager() external view returns (address);
    function teeTrustedInput() external view returns (bytes32 appchainConfigHash, bytes32 appchainStartBlockHash, bytes32 seqConfigHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBlockHash, bytes32 l1EndBlockHash);
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "poster_",
        "type": "address",
        "internalType": "contract AssertionPoster"
      },
      {
        "name": "bridge_",
        "type": "address",
        "internalType": "contract IBridge"
      },
      {
        "name": "appchainConfigHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "appchainStartBlockHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqConfigHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqStartBlockHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1StartBlockHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1block_",
        "type": "address",
        "internalType": "contract IL1Block"
      },
      {
        "name": "challengeWindowDuration_",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "teeKeyManager_",
        "type": "address",
        "internalType": "contract ITeeKeyManager"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "bridge",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IBridge"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "challengeWindowDuration",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "challengeWindowEnd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "closeChallengeWindow",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "l1block",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IL1Block"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pendingAssertions",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "sendRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "poster",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract AssertionPoster"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "resolveChallenge",
    "inputs": [
      {
        "name": "assertion",
        "type": "tuple",
        "internalType": "struct PendingAssertion",
        "components": [
          {
            "name": "blockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "sendRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setAppchainConfigHash",
    "inputs": [
      {
        "name": "hash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setChallengeWindowDuration",
    "inputs": [
      {
        "name": "duration",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSeqConfigHash",
    "inputs": [
      {
        "name": "hash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "submitAssertion",
    "inputs": [
      {
        "name": "assertion",
        "type": "tuple",
        "internalType": "struct PendingAssertion",
        "components": [
          {
            "name": "blockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "sendRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "teeHackCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "teeKeyManager",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ITeeKeyManager"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "teeTrustedInput",
    "inputs": [],
    "outputs": [
      {
        "name": "appchainConfigHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "appchainStartBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqConfigHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqStartBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "setDelayedMessageAcc",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1StartBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1EndBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ChallengeResolved",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct PendingAssertion",
        "components": [
          {
            "name": "blockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "sendRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeAppchainConfigHash",
    "inputs": [
      {
        "name": "configHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "blockHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeHacked",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeInput",
    "inputs": [
      {
        "name": "input",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct TeeTrustedInput",
        "components": [
          {
            "name": "appchainConfigHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "appchainStartBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqConfigHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqStartBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "setDelayedMessageAcc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "l1StartBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "l1EndBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeSeqConfigHash",
    "inputs": [
      {
        "name": "configHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "blockHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureLength",
    "inputs": [
      {
        "name": "length",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureS",
    "inputs": [
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TeeModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x61010060405234610099576100276100156102ca565b989790979691969592959493946107e1565b61002f61009e565b612ed661184a82396080518181816106690152611f47015260a05181818161095401528181611c410152611c74015260c05181818161043f01528181611b8101528181611d3301528181611de2015261202f015260e05181818161024801526113c70152612ed690f35b6100a4565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100d0906100a8565b810190811060018060401b038211176100e857604052565b6100b2565b906101006100f961009e565b92836100c6565b565b5f80fd5b60018060a01b031690565b61011a90610106565b90565b61012690610111565b90565b6101328161011d565b0361013957565b5f80fd5b9050519061014a82610129565b565b61015590610111565b90565b6101618161014c565b0361016857565b5f80fd5b9050519061017982610158565b565b90565b6101878161017b565b0361018e57565b5f80fd5b9050519061019f8261017e565b565b6101aa90610111565b90565b6101b6816101a1565b036101bd57565b5f80fd5b905051906101ce826101ad565b565b60018060401b031690565b6101e4816101d0565b036101eb57565b5f80fd5b905051906101fc826101db565b565b61020790610111565b90565b610213816101fe565b0361021a57565b5f80fd5b9050519061022b8261020a565b565b610140818303126102c557610244825f830161013d565b92610252836020840161016c565b926102608160408501610192565b9261026e8260608301610192565b9261027c8360808401610192565b9261028a8160a08501610192565b926102988260c08301610192565b926102c26102a98460e085016101c1565b936102b88161010086016101ef565b936101200161021e565b90565b610102565b6102e8614720803803806102dd816100ed565b92833981019061022d565b90919293949596979899565b60401b90565b9061031468010000000000000000600160801b03916102f4565b9181191691161790565b90565b61033561033061033a926101d0565b61031e565b6101d0565b90565b90565b9061035561035061035c92610321565b61033d565b82546102fa565b9055565b61037461036f61037992610106565b61031e565b610106565b90565b61038590610360565b90565b6103919061037c565b90565b90565b6103ab6103a66103b092610394565b61031e565b610106565b90565b6103bc90610397565b90565b5f80fd5b60e01b90565b906020828203126103e2576103df915f016101ef565b90565b610102565b5f0190565b6103f461009e565b3d5f823e3d90fd5b61041061040b61041592610394565b61031e565b6101d0565b90565b906020828203126104315761042e915f01610192565b90565b610102565b5f1b90565b61044f61044a61045492610394565b610436565b61017b565b90565b60209181520190565b5f7f6c3120636f6e747261637420696e76616c696400000000000000000000000000910152565b6104946013602092610457565b61049d81610460565b0190565b6104b69060208101905f818303910152610487565b90565b156104c057565b6104c861009e565b62461bcd60e51b8152806104de600482016104a1565b0390fd5b6104eb9061037c565b90565b90565b61050561050061050a92610394565b61031e565b6104ee565b90565b60207f20636f6465000000000000000000000000000000000000000000000000000000917f706f73746572206164647265737320646f6573206e6f74206861766520616e795f8201520152565b6105676025604092610457565b6105708161050d565b0190565b6105899060208101905f81830391015261055a565b90565b1561059357565b61059b61009e565b62461bcd60e51b8152806105b160048201610574565b0390fd5b6105be9061037c565b90565b6105ca816104ee565b036105d157565b5f80fd5b905051906105e2826105c1565b565b906020828203126105fd576105fa915f016105d5565b90565b610102565b60207f2062726964676500000000000000000000000000000000000000000000000000917f696e73756666696369656e742064656c61796564206d6573736167657320696e5f8201520152565b61065c6027604092610457565b61066581610602565b0190565b61067e9060208101905f81830391015261064f565b90565b1561068857565b61069061009e565b62461bcd60e51b8152806106a660048201610669565b0390fd5b6106b39061037c565b90565b60207f61766520616e7920636f64650000000000000000000000000000000000000000917f7465654b65794d616e61676572206164647265737320646f6573206e6f7420685f8201520152565b610710602c604092610457565b610719816106b6565b0190565b6107329060208101905f818303910152610703565b90565b1561073c57565b61074461009e565b62461bcd60e51b81528061075a6004820161071d565b0390fd5b9061076a5f1991610436565b9181191691161790565b61077d9061017b565b90565b5f1c90565b61078e90610780565b90565b906107a66107a16107ad92610774565b610785565b825461075e565b9055565b6107ba9061017b565b9052565b9160206107df9294936107d860408201965f8301906107b1565b01906107b1565b565b90919395976107ff9099939597996107f833610b91565b600b610340565b61080889610388565b61082261081c6108175f6103b3565b610111565b91610111565b1480156109e2575b986108376108839a6104b9565b60c05261085f610846826104e2565b3b6108596108535f6104f1565b916104ee565b1161058c565b608052602061086d826105b5565b63eca067ad9061087b61009e565b9a8b926103c3565b82528180610893600482016103e7565b03915afa9788156109dd576109a5986108c6915f916109af575b506108c06108ba5f6104f1565b916104ee565b11610681565b60a0526108ee6108d5826106aa565b3b6108e86108e25f6104f1565b916104ee565b11610735565b60e0526108fe815f600201610791565b61090c826001600201610791565b907fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec9161094361093a61009e565b928392836107be565b0390a16109538160028001610791565b610961826003600201610791565b907fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b9161099861098f61009e565b928392836107be565b0390a16005600201610791565b6109ad6116ae565b565b6109d0915060203d81116109d6575b6109c881836100c6565b8101906105e4565b5f6108ad565b503d6109be565b6103ec565b50610a0760206109f18b610388565b63b80777ea906109ff61009e565b9384926103c3565b82528180610a17600482016103e7565b03915afa908115610b21575f91610af3575b50610a3c610a365f6103fc565b916101d0565b119889610a54575b6108376108839a919a505061082a565b610a7a99506020610a6482610388565b6309bd5a6090610a7261009e565b9c8d926103c3565b82528180610a8a600482016103e7565b03915afa998a15610aee576108839a610837915f91610ac0575b50610ab7610ab15f61043b565b9161017b565b119a5050610a44565b610ae1915060203d8111610ae7575b610ad981836100c6565b810190610418565b5f610aa4565b503d610acf565b6103ec565b610b14915060203d8111610b1a575b610b0c81836100c6565b8101906103c9565b5f610a29565b503d610b02565b6103ec565b90565b610b3d610b38610b4292610b26565b61031e565b6104ee565b90565b610b4f6001610b29565b90565b610b66610b61610b6b926104ee565b61031e565b6104ee565b90565b90565b90610b86610b81610b8d92610b52565b610b6e565b825461075e565b9055565b610b9a90610bd0565b610bac610ba5610b45565b6001610b71565b565b610bb790610111565b9052565b9190610bce905f60208501940190610bae565b565b80610beb610be5610be05f6103b3565b610111565b91610111565b14610bfb57610bf99061172e565b565b610c1e610c075f6103b3565b5f918291631e4fbdf760e01b835260048301610bbb565b0390fd5b610c2a6117dd565b610c326111dd565b610c3a611835565b565b5490565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610c9a6033604092610457565b610ca381610c40565b0190565b610cbc9060208101905f818303910152610c8d565b90565b15610cc657565b610cce61009e565b62461bcd60e51b815280610ce460048201610ca7565b0390fd5b610cf290516101a1565b90565b610d09610d04610d0e926104ee565b61031e565b6101d0565b90565b60018060401b031690565b610d28610d2d91610780565b610d11565b90565b610d3a9054610d1c565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610d97603c604092610457565b610da081610d3d565b0190565b610db99060208101905f818303910152610d8a565b90565b15610dc357565b610dcb61009e565b62461bcd60e51b815280610de160048201610da4565b0390fd5b60401c90565b610df7610dfc91610de5565b610d11565b90565b610e099054610deb565b90565b634e487b7160e01b5f52601160045260245ffd5b610e2c610e32916101d0565b916101d0565b019060018060401b038211610e4357565b610e0c565b90610e5960018060401b0391610436565b9181191691161790565b90610e78610e73610e7f92610321565b61033d565b8254610e48565b9055565b634e487b7160e01b5f52603260045260245ffd5b5f5260205f2090565b610ea981610c3c565b821015610ec357610ebb600391610e97565b910201905f90565b610e83565b90565b610ed7610edc91610780565b610ec8565b90565b610ee99054610ecb565b90565b610ef6905161011d565b90565b5f910312610f0357565b610102565b610f17610f1d919392936104ee565b926104ee565b91610f298382026104ee565b928184041490151715610f3857565b610e0c565b610f48906003610f08565b90565b1b90565b91906008610f6a910291610f645f1984610f4b565b92610f4b565b9181191691161790565b9190610f8a610f85610f9293610774565b610785565b908354610f4f565b9055565b5f90565b610fac91610fa6610f96565b91610f74565b565b5f6002610fd492610fc183808301610f9a565b610fce8360018301610f9a565b01610f9a565b565b634e487b7160e01b5f525f60045260245ffd5b905f03610ffb57610ff990610fae565b565b610fd6565b5b81811061100c575050565b806110195f600393610fe9565b01611001565b909182811061102e575b505050565b61104c61104661104061105795610f3d565b92610f3d565b92610e97565b918201910190611000565b5f8080611029565b90680100000000000000008111611088578161107d61108693610c3c565b9082815561101f565b565b6100b2565b5f6110979161105f565b565b905f036110ab576110a99061108d565b565b610fd6565b6110ba905161014c565b90565b6110cc6110d2919392936104ee565b926104ee565b82039182116110dd57565b610e0c565b6110eb906104ee565b9052565b9190611102905f602085019401906110e2565b565b61110d9061017b565b9052565b9060c06111be60066111c69461113561112c5f830154610ecb565b5f870190611104565b61114f6111456001830154610ecb565b6020870190611104565b61116961115f6002830154610ecb565b6040870190611104565b6111836111796003830154610ecb565b6060870190611104565b61119d6111936004830154610ecb565b6080870190611104565b6111b76111ad6005830154610ecb565b60a0870190611104565b0154610ecb565b910190611104565b565b91906111db905f60e08501940190611111565b565b6112046111ea6009610c3c565b6111fd6111f76001610b29565b916104ee565b1115610cbf565b61121661121160c0610ce8565b610388565b61123061122a6112255f6103b3565b610111565b91610111565b145f146116235761126561124342610cf5565b5b61125f611259611254600b610d30565b6101d0565b916101d0565b11610dbc565b61128b61128461127442610cf5565b61127e600b610dff565b90610e20565b600b610e63565b6112956009610c3c565b6112a76112a15f6104f1565b916104ee565b116114f4575b6112bf6112ba60a06110b0565b6105b5565b6112f163d5719dc260206112db6112d660a06110b0565b6105b5565b63eca067ad906112e961009e565b9485926103c3565b82528180611301600482016103e7565b03915afa9283156114ef57611346611331611351956020955f916114c2575b5061132b6001610b29565b906110bd565b9261133a61009e565b958694859384936103c3565b8352600483016110ef565b03915afa80156114bd57611371915f9161148f575b506004600201610791565b61138361137e60c0610ce8565b610388565b61139d6113976113925f6103b3565b610111565b91610111565b145f14611404576113c76113bb436113b56001610b29565b906110bd565b405b6006600201610791565b60026113ff7f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc916113f661009e565b918291826111c8565b0390a1565b611431602061141b61141660c0610ce8565b610388565b6309bd5a609061142961009e565b9384926103c3565b82528180611441600482016103e7565b03915afa801561148a576113c7915f9161145c575b506113bd565b61147d915060203d8111611483575b61147581836100c6565b810190610418565b5f611456565b503d61146b565b6103ec565b6114b0915060203d81116114b6575b6114a881836100c6565b810190610418565b5f611366565b503d61149e565b6103ec565b6114e29150863d81116114e8575b6114da81836100c6565b8101906105e4565b5f611320565b503d6114d0565b6103ec565b61151861150e5f61150760098290610ea0565b5001610edf565b6001600201610791565b61153d611533600261152c60095f90610ea0565b5001610edf565b6003600201610791565b61155761154d6006600201610edf565b6005600201610791565b6115696115646080610eec565b6104e2565b63daeab4126115855f61157e60098290610ea0565b5001610edf565b61159d600161159660095f90610ea0565b5001610edf565b92803b1561161e576115c25f80946115cd6115b661009e565b978896879586946103c3565b8452600484016107be565b03925af18015611619576115ed575b506115e85f6009611099565b6112ad565b61160c905f3d8111611612575b61160481836100c6565b810190610ef9565b5f6115dc565b503d6115fa565b6103ec565b6103bf565b611650602061163a61163560c0610ce8565b610388565b63b80777ea9061164861009e565b9384926103c3565b82528180611660600482016103e7565b03915afa80156116a957611265915f9161167b575b50611244565b61169c915060203d81116116a2575b61169481836100c6565b8101906103c9565b5f611675565b503d61168a565b6103ec565b6116b6610c22565b565b60018060a01b031690565b6116cf6116d491610780565b6116b8565b90565b6116e190546116c3565b90565b906116f560018060a01b0391610436565b9181191691161790565b6117089061037c565b90565b90565b9061172361171e61172a926116ff565b61170b565b82546116e4565b9055565b6117375f6116d7565b611741825f61170e565b9061177561176f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936116ff565b916116ff565b9161177e61009e565b80611788816103e7565b0390a3565b90565b61179c6117a191610780565b61178d565b90565b6117ae9054611790565b90565b90565b6117c86117c36117cd926117b1565b61031e565b6104ee565b90565b6117da60026117b4565b90565b6117e760016117a4565b6118006117fa6117f56117d0565b6104ee565b916104ee565b14611819576118176118106117d0565b6001610b71565b565b5f633ee5aeb560e01b815280611831600482016103e7565b0390fd5b611847611840610b45565b6001610b71565b56fe60806040526004361015610015575b36610b3857005b61001f5f3561013e565b80630dbfd1fa146101395780633a009a06146101345780633ceaae7d1461012f578063420caf3a1461012a5780634bd167c914610125578063697b5e62146101205780636c4c20601461011b578063715018a61461011657806380959721146101115780638da5cb5b1461010c5780638fed55a314610107578063a56ec6cd14610102578063c3f2dbd3146100fd578063e78cea92146100f8578063eb60553a146100f3578063ee1c28b8146100ee578063f223055c146100e95763f2fde38b0361000e57610b05565b610a91565b610a5c565b610a1a565b6109a4565b61091f565b6108a6565b61076f565b61071c565b6106b9565b610634565b610601565b6105cc565b61053a565b61048f565b610401565b6102ce565b610203565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b908160609103126101685790565b610156565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101b35781359167ffffffffffffffff83116101ae5760200192600183028401116101a957565b610175565b610171565b61016d565b9190916080818403126101f9576101d1835f830161015a565b92606082013567ffffffffffffffff81116101f4576101f09201610179565b9091565b610152565b61014e565b5f0190565b346102325761021c6102163660046101b8565b9161164d565b610224610144565b8061022e816101fe565b0390f35b61014a565b5f91031261024157565b61014e565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b90565b61028c6102876102919261026a565b610275565b61026a565b90565b61029d90610278565b90565b6102a990610294565b90565b6102b5906102a0565b9052565b91906102cc905f602085019401906102ac565b565b346102fe576102de366004610237565b6102fa6102e9610246565b6102f1610144565b918291826102b9565b0390f35b61014a565b5f1c90565b90565b61031761031c91610303565b610308565b90565b610329905461030b565b90565b60026103395f820161031f565b916103466001830161031f565b916103536002820161031f565b916103606003830161031f565b9161036d6004820161031f565b91610386600661037f6005850161031f565b930161031f565b90565b90565b61039590610389565b9052565b949290979695939160e08601985f87016103b29161038c565b602086016103bf9161038c565b604085016103cc9161038c565b606084016103d99161038c565b608083016103e69161038c565b60a082016103f39161038c565b60c0016103ff9161038c565b565b3461043857610411366004610237565b61043461041c61032c565b9361042b979597939193610144565b97889788610399565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b61046a90610294565b90565b61047690610461565b9052565b919061048d905f6020850194019061046d565b565b346104bf5761049f366004610237565b6104bb6104aa61043d565b6104b2610144565b9182918261047a565b0390f35b61014a565b1c90565b67ffffffffffffffff1690565b6104e59060086104ea93026104c4565b6104c8565b90565b906104f891546104d5565b90565b610508600b6008906104ed565b90565b67ffffffffffffffff1690565b6105219061050b565b9052565b9190610538905f60208501940190610518565b565b3461056a5761054a366004610237565b6105666105556104fb565b61055d610144565b91829182610525565b0390f35b61014a565b90565b61058290600861058793026104c4565b61056f565b90565b906105959154610572565b90565b6105a4600a5f9061058a565b90565b90565b6105b3906105a7565b9052565b91906105ca905f602085019401906105aa565b565b346105fc576105dc366004610237565b6105f86105e7610598565b6105ef610144565b918291826105b7565b0390f35b61014a565b3461062f57610611366004610237565b6106196120c7565b610621610144565b8061062b816101fe565b0390f35b61014a565b3461066257610644366004610237565b61064c6120f6565b610654610144565b8061065e816101fe565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b61069490610294565b90565b6106a09061068b565b9052565b91906106b7905f60208501940190610697565b565b346106e9576106c9366004610237565b6106e56106d4610667565b6106dc610144565b918291826106a4565b0390f35b61014a565b6106f79061026a565b90565b610703906106ee565b9052565b919061071a905f602085019401906106fa565b565b3461074c5761072c366004610237565b610748610737612130565b61073f610144565b91829182610707565b0390f35b61014a565b9060608282031261076a57610767915f0161015a565b90565b61014e565b3461079d57610787610782366004610751565b612418565b61078f610144565b80610799816101fe565b0390f35b61014a565b6107ab816105a7565b036107b257565b5f80fd5b905035906107c3826107a2565b565b906020828203126107de576107db915f016107b6565b90565b61014e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61080d816107f7565b8210156108275761081f6003916107fb565b910201905f90565b6107e3565b600990610838826107f7565b8110156108705761084891610804565b506108545f820161031f565b9161086d60026108666001850161031f565b930161031f565b90565b5f80fd5b60409061089d6108a4949695939661089360608401985f85019061038c565b602083019061038c565b019061038c565b565b346108d9576108d56108c16108bc3660046107c5565b61082c565b6108cc939193610144565b93849384610874565b0390f35b61014a565b6108e781610389565b036108ee57565b5f80fd5b905035906108ff826108de565b565b9060208282031261091a57610917915f016108f2565b90565b61014e565b3461094d57610937610932366004610901565b612558565b61093f610144565b80610949816101fe565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b61097f90610294565b90565b61098b90610976565b9052565b91906109a2905f60208501940190610982565b565b346109d4576109b4366004610237565b6109d06109bf610952565b6109c7610144565b9182918261098f565b0390f35b61014a565b6109e28161050b565b036109e957565b5f80fd5b905035906109fa826109d9565b565b90602082820312610a1557610a12915f016109ed565b90565b61014e565b34610a4857610a32610a2d3660046109fc565b61269b565b610a3a610144565b80610a44816101fe565b0390f35b61014a565b610a59600b5f906104ed565b90565b34610a8c57610a6c366004610237565b610a88610a77610a4d565b610a7f610144565b91829182610525565b0390f35b61014a565b34610abf57610aa9610aa4366004610901565b612733565b610ab1610144565b80610abb816101fe565b0390f35b61014a565b610acd816106ee565b03610ad457565b5f80fd5b90503590610ae582610ac4565b565b90602082820312610b0057610afd915f01610ad8565b90565b61014e565b34610b3357610b1d610b18366004610ae7565b6127a3565b610b25610144565b80610b2f816101fe565b0390f35b61014a565b5f80fd5b90610b4f9291610b4a6127bb565b611330565b610b57612820565b565b5090565b90565b610b74610b6f610b7992610b5d565b610275565b6105a7565b90565b60209181520190565b5f7f696e76616c6964207369676e6174757265206c656e6774680000000000000000910152565b610bb96018602092610b7c565b610bc281610b85565b0190565b610bdb9060208101905f818303910152610bac565b90565b15610be557565b610bed610144565b62461bcd60e51b815280610c0360048201610bc6565b0390fd5b90565b90565b610c19610c1e91610389565b610c0a565b9052565b602081610c34610c3c93839695610c0d565b018092610c0d565b0190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610c6890610c40565b810190811067ffffffffffffffff821117610c8257604052565b610c4a565b60200190565b5190565b5f80fd5b90610ca8610ca1610144565b9283610c5e565b565b67ffffffffffffffff8111610cc857610cc4602091610c40565b0190565b610c4a565b90825f939282370152565b90929192610ced610ce882610caa565b610c95565b93818552602085019082840111610d0957610d0792610ccd565b565b610c91565b610d19913691610cd8565b90565b5f80fd5b60e01b90565b151590565b610d3481610d26565b03610d3b57565b5f80fd5b90505190610d4c82610d2b565b565b90602082820312610d6757610d64915f01610d3f565b90565b61014e565b610d74610144565b3d5f823e3d90fd5b5f7f696e76616c696420746565207369676e61747572650000000000000000000000910152565b610db06015602092610b7c565b610db981610d7c565b0190565b610dd29060208101905f818303910152610da3565b90565b15610ddc57565b610de4610144565b62461bcd60e51b815280610dfa60048201610dbd565b0390fd5b35610e08816108de565b90565b5f7f617070636861696e20626c6f636b206861736820756e6368616e676564000000910152565b610e3f601d602092610b7c565b610e4881610e0b565b0190565b610e619060208101905f818303910152610e32565b90565b15610e6b57565b610e73610144565b62461bcd60e51b815280610e8960048201610e4c565b0390fd5b90565b610ea4610e9f610ea992610e8d565b610275565b6105a7565b90565b6001610eb891016105a7565b90565b90565b5f7f617373657274696f6e20616c7265616479206578697374730000000000000000910152565b610ef26018602092610b7c565b610efb81610ebe565b0190565b610f149060208101905f818303910152610ee5565b90565b15610f1e57565b610f26610144565b62461bcd60e51b815280610f3c60048201610eff565b0390fd5b610f54610f4f610f59926105a7565b610275565b61050b565b90565b60401c90565b610f6e610f7391610f5c565b6104c8565b90565b610f809054610f62565b90565b634e487b7160e01b5f52601160045260245ffd5b610fa3610fa99161050b565b9161050b565b019067ffffffffffffffff8211610fbc57565b610f83565b5f1b90565b90610fd967ffffffffffffffff91610fc1565b9181191691161790565b610ff7610ff2610ffc9261050b565b610275565b61050b565b90565b90565b9061101761101261101e92610fe3565b610fff565b8254610fc6565b9055565b90565b5f5260205f2090565b5490565b61103b8161102e565b8210156110555761104d600391611025565b910201905f90565b6107e3565b634e487b7160e01b5f525f60045260245ffd5b906110795f1991610fc1565b9181191691161790565b61108c90610389565b90565b61109890610303565b90565b906110b06110ab6110b792611083565b61108f565b825461106d565b9055565b906110ff60406002611105946110de5f82016110d85f8801610dfe565b9061109b565b6110f7600182016110f160208801610dfe565b9061109b565b019201610dfe565b9061109b565b565b919061111857611116916110bb565b565b61105a565b1b90565b9081549168010000000000000000831015611151578261114991600161114f95018155611032565b90611107565b565b610c4a565b90565b61116d61116861117292611156565b610275565b6105a7565b90565b90565b61118c61118761119192611175565b610275565b6105a7565b90565b6111a06111a591610303565b61056f565b90565b6111b29054611194565b90565b6111c46111ca919392936105a7565b926105a7565b82018092116111d557565b610f83565b6111ee6111e96111f3926105a7565b610275565b6105a7565b90565b90565b9061120e611209611215926111da565b6111f6565b825461106d565b9055565b61122290610278565b90565b61122e90611219565b90565b61123a90610294565b90565b61124690610294565b90565b905090565b6112595f8092611249565b0190565b6112669061124e565b90565b9061127b61127683610caa565b610c95565b918252565b606090565b3d5f146112a0576112953d611269565b903d5f602084013e5b565b6112a8611280565b9061129e565b5f7f7061796d656e74206661696c6564000000000000000000000000000000000000910152565b6112e2600e602092610b7c565b6112eb816112ae565b0190565b6113049060208101905f8183039101526112d5565b90565b1561130e57565b611316610144565b62461bcd60e51b81528061132c600482016112ef565b0390fd5b919290602061141e91611360611347828890610b59565b61135a6113546041610b60565b916105a7565b14610bde565b6113698561285f565b956114136113fe61138261137d6002610c07565b61292c565b6113ab8a9161139d611392610144565b9384928a8401610c22565b888201810382520382610c5e565b6113bd6113b782610c8d565b91610c87565b20936113f86113eb7f00000000000000000000000000000000000000000000000000000000000000006102a0565b94637217efcd9692610d0e565b906129cb565b92611407610144565b95869485938493610d20565b835260048301610707565b03915afa801561164857611439915f9161161a575b50610dd5565b61146c6114475f8401610dfe565b61146561145f61145a600160020161031f565b610389565b91610389565b1415610e64565b6114755f610e90565b5b8061149261148c61148760096107f7565b6105a7565b916105a7565b10156114df576114da906114d5856114ce6114c86114c36114be6114b860098890610804565b50610ebb565b6129ed565b610389565b91610389565b1415610f17565b610eac565b611476565b509150611517906114f060096107f7565b6115026114fc5f610e90565b916105a7565b146115ef575b6115126009611022565b611121565b61152160096107f7565b61153461152e6002611159565b916105a7565b1461153c575b565b61156261155b61154c6001611178565b611556600a6111a8565b6111b5565b600a6111f9565b61156c600a6111a8565b6115a27f37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a791611599610144565b918291826105b7565b0390a16115ea5f806115bb6115b633611225565b611231565b6115c43061123d565b316115cd610144565b90816115d88161125d565b03925af16115e4611285565b50611307565b61153a565b61161561160e6115fe42610f40565b611608600b610f76565b90610f97565b600b611002565b611508565b61163b915060203d8111611641575b6116338183610c5e565b810190610d4e565b5f611433565b503d611629565b610d6c565b906116589291610b3c565b565b6116626127bb565b61166a611b55565b611672612820565b565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b6116ce6033604092610b7c565b6116d781611674565b0190565b6116f09060208101905f8183039101526116c1565b90565b156116fa57565b611702610144565b62461bcd60e51b815280611718600482016116db565b0390fd5b61173061172b61173592610e8d565b610275565b61026a565b90565b6117419061171c565b90565b90505190611751826109d9565b565b9060208282031261176c57611769915f01611744565b90565b61014e565b61177d61178291610303565b6104c8565b90565b61178f9054611771565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b6117ec603c604092610b7c565b6117f581611792565b0190565b61180e9060208101905f8183039101526117df565b90565b1561181857565b611820610144565b62461bcd60e51b815280611836600482016117f9565b0390fd5b5f91031261184457565b61014e565b91602061186a92949361186360408201965f83019061038c565b019061038c565b565b61187b611881919392936105a7565b926105a7565b9161188d8382026105a7565b92818404149015171561189c57565b610f83565b6118ac90600361186c565b90565b919060086118ca9102916118c45f198461111d565b9261111d565b9181191691161790565b91906118ea6118e56118f293611083565b61108f565b9083546118af565b9055565b5f90565b61190c916119066118f6565b916118d4565b565b5f600261193492611921838083016118fa565b61192e83600183016118fa565b016118fa565b565b905f03611948576119469061190e565b565b61105a565b5b818110611959575050565b806119665f600393611936565b0161194e565b909182811061197b575b505050565b61199961199361198d6119a4956118a1565b926118a1565b926107fb565b91820191019061194d565b5f8080611976565b906801000000000000000081116119d557816119ca6119d3936107f7565b9082815561196c565b565b610c4a565b5f6119e4916119ac565b565b905f036119f8576119f6906119da565b565b61105a565b90505190611a0a826107a2565b565b90602082820312611a2557611a22915f016119fd565b90565b61014e565b611a39611a3f919392936105a7565b926105a7565b8203918211611a4a57565b610f83565b90505190611a5c826108de565b565b90602082820312611a7757611a74915f01611a4f565b90565b61014e565b611a8590610389565b9052565b9060c0611b366006611b3e94611aad611aa45f83015461030b565b5f870190611a7c565b611ac7611abd600183015461030b565b6020870190611a7c565b611ae1611ad7600283015461030b565b6040870190611a7c565b611afb611af1600383015461030b565b6060870190611a7c565b611b15611b0b600483015461030b565b6080870190611a7c565b611b2f611b25600583015461030b565b60a0870190611a7c565b015461030b565b910190611a7c565b565b9190611b53905f60e08501940190611a89565b565b611b7c611b6260096107f7565b611b75611b6f6001611178565b916105a7565b11156116f3565b611ba57f0000000000000000000000000000000000000000000000000000000000000000610461565b611bbf611bb9611bb45f611738565b6106ee565b916106ee565b145f1461202557611bf4611bd242610f40565b5b611bee611be8611be3600b611785565b61050b565b9161050b565b11611811565b611c1a611c13611c0342610f40565b611c0d600b610f76565b90610f97565b600b611002565b611c2460096107f7565b611c36611c305f610e90565b916105a7565b11611edf575b611c657f0000000000000000000000000000000000000000000000000000000000000000610976565b611cae63d5719dc26020611c987f0000000000000000000000000000000000000000000000000000000000000000610976565b63eca067ad90611ca6610144565b948592610d20565b82528180611cbe600482016101fe565b03915afa928315611eda57611d03611cee611d0e956020955f91611ead575b50611ce86001611178565b90611a2a565b92611cf7610144565b95869485938493610d20565b8352600483016105b7565b03915afa8015611ea857611d2e915f91611e7a575b50600460020161109b565b611d577f0000000000000000000000000000000000000000000000000000000000000000610461565b611d71611d6b611d665f611738565b6106ee565b916106ee565b145f14611dd857611d9b611d8f43611d896001611178565b90611a2a565b405b600660020161109b565b6002611dd37f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc91611dca610144565b91829182611b40565b0390a1565b611e1c6020611e067f0000000000000000000000000000000000000000000000000000000000000000610461565b6309bd5a6090611e14610144565b938492610d20565b82528180611e2c600482016101fe565b03915afa8015611e7557611d9b915f91611e47575b50611d91565b611e68915060203d8111611e6e575b611e608183610c5e565b810190611a5e565b5f611e41565b503d611e56565b610d6c565b611e9b915060203d8111611ea1575b611e938183610c5e565b810190611a5e565b5f611d23565b503d611e89565b610d6c565b611ecd9150863d8111611ed3575b611ec58183610c5e565b810190611a0c565b5f611cdd565b503d611ebb565b610d6c565b611f03611ef95f611ef260098290610804565b500161031f565b600160020161109b565b611f28611f1e6002611f1760095f90610804565b500161031f565b600360020161109b565b611f42611f38600660020161031f565b600560020161109b565b611f6b7f000000000000000000000000000000000000000000000000000000000000000061068b565b63daeab412611f875f611f8060098290610804565b500161031f565b611f9f6001611f9860095f90610804565b500161031f565b92803b1561202057611fc45f8094611fcf611fb8610144565b97889687958694610d20565b845260048401611849565b03925af1801561201b57611fef575b50611fea5f60096119e6565b611c3c565b61200e905f3d8111612014575b6120068183610c5e565b81019061183a565b5f611fde565b503d611ffc565b610d6c565b610d1c565b61206960206120537f0000000000000000000000000000000000000000000000000000000000000000610461565b63b80777ea90612061610144565b938492610d20565b82528180612079600482016101fe565b03915afa80156120c257611bf4915f91612094575b50611bd3565b6120b5915060203d81116120bb575b6120ad8183610c5e565b810190611753565b5f61208e565b503d6120a3565b610d6c565b6120cf61165a565b565b6120d9612a58565b6120e16120e3565b565b6120f46120ef5f611738565b612af0565b565b6120fe6120d1565b565b5f90565b60018060a01b031690565b61211b61212091610303565b612104565b90565b61212d905461210f565b90565b612138612100565b506121425f612123565b90565b61215690612151612a58565b612158565b565b612169906121646127bb565b6122e0565b612171612820565b565b5f7f6368616c6c656e676520646f6573206e6f742065786973740000000000000000910152565b6121a76018602092610b7c565b6121b081612173565b0190565b6121c99060208101905f81830391015261219a565b90565b156121d357565b6121db610144565b62461bcd60e51b8152806121f1600482016121b4565b0390fd5b61220961220461220e92610e8d565b610275565b61050b565b90565b506122209060208101906108f2565b90565b9060406122686122709361224561223c5f830183612211565b5f860190611a7c565b61225f6122556020830183612211565b6020860190611a7c565b82810190612211565b910190611a7c565b565b9190612285905f60608501940190612223565b565b5f7f617373657274696f6e206e6f7420666f756e6400000000000000000000000000910152565b6122bb6013602092610b7c565b6122c481612287565b0190565b6122dd9060208101905f8183039101526122ae565b90565b6123066122ed60096107f7565b6123006122fa6001611178565b916105a7565b116121cc565b61230f8161285f565b906123195f610e90565b5b8061233661233061232b60096107f7565b6105a7565b916105a7565b10156123f6578261236b61236561236061235b61235560098790610804565b50610ebb565b6129ed565b610389565b91610389565b1461237e5761237990610eac565b61231a565b50905061238c5f60096119e6565b6123a06123996009611022565b8290611121565b6123b36123ac5f6121f5565b600b611002565b6123bb6120c7565b6123f17fe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b916123e8610144565b91829182612272565b0390a1565b6123fe610144565b62461bcd60e51b815280612414600482016122c8565b0390fd5b61242190612145565b565b6124349061242f612a58565b6124de565b565b60207f617373657274696f6e73206172652070656e64696e6700000000000000000000917f63616e6e6f742075706461746520636f6e6669672068617368207768696c65205f8201520152565b6124906036604092610b7c565b61249981612436565b0190565b6124b29060208101905f818303910152612483565b90565b156124bc57565b6124c4610144565b62461bcd60e51b8152806124da6004820161249d565b0390fd5b6125036124eb60096107f7565b6124fd6124f75f610e90565b916105a7565b146124b5565b612510816002800161109b565b61251d600360020161031f565b7fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b9161255361254a610144565b92839283611849565b0390a1565b61256190612423565b565b6125749061256f612a58565b612669565b565b60207f68696c6520617373657274696f6e2069732070656e64696e6700000000000000917f63616e6e6f7420757064617465206368616c6c656e67652077696e646f7720775f8201520152565b6125d06039604092610b7c565b6125d981612576565b0190565b6125f29060208101905f8183039101526125c3565b90565b156125fc57565b612604610144565b62461bcd60e51b81528061261a600482016125dd565b0390fd5b60401b90565b9061263f6fffffffffffffffff00000000000000009161261e565b9181191691161790565b9061265e61265961266592610fe3565b610fff565b8254612624565b9055565b6126999061269261267a60096107f7565b61268c6126865f610e90565b916105a7565b146125f5565b600b612649565b565b6126a490612563565b565b6126b7906126b2612a58565b6126b9565b565b6126de6126c660096107f7565b6126d86126d25f610e90565b916105a7565b146124b5565b6126eb815f60020161109b565b6126f8600160020161031f565b7fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec9161272e612725610144565b92839283611849565b0390a1565b61273c906126a6565b565b61274f9061274a612a58565b612751565b565b8061276c6127666127615f611738565b6106ee565b916106ee565b1461277c5761277a90612af0565b565b61279f6127885f611738565b5f918291631e4fbdf760e01b835260048301610707565b0390fd5b6127ac9061273e565b565b6127b86002611159565b90565b6127c560016111a8565b6127de6127d86127d36127ae565b6105a7565b916105a7565b146127f7576127f56127ee6127ae565b60016111f9565b565b5f633ee5aeb560e01b81528061280f600482016101fe565b0390fd5b61281d6001611178565b90565b61283261282b612813565b60016111f9565b565b60209392612853858361284b829561285b97610c0d565b018092610c0d565b018092610c0d565b0190565b6128676118f6565b506128b46128765f8301610dfe565b6128a5612891604061288a60208701610dfe565b9501610dfe565b612899610144565b94859360208501612834565b60208201810382520382610c5e565b6128c66128c082610c8d565b91610c87565b2090565b9461291860208099989596612910828099612908826129209a6129006129289f806128f8859e928693610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b0190565b6129346118f6565b506129b56129435f830161031f565b6129a66129526001850161031f565b9361295f6002820161031f565b9061296c6003820161031f565b6129786004830161031f565b90612991600661298a6005860161031f565b940161031f565b9361299a610144565b988997602089016128ca565b60208201810382520382610c5e565b6129c76129c182610c8d565b91610c87565b2090565b6129ea916129e1916129db612100565b50612b73565b90929192612c70565b90565b6129f56118f6565b50612a42612a045f830161031f565b612a33612a1f6002612a186001870161031f565b950161031f565b612a27610144565b94859360208501612834565b60208201810382520382610c5e565b612a54612a4e82610c8d565b91610c87565b2090565b612a60612130565b612a79612a73612a6e612d41565b6106ee565b916106ee565b03612a8057565b612aa2612a8b612d41565b5f91829163118cdaa760e01b835260048301610707565b0390fd5b90612ab760018060a01b0391610fc1565b9181191691161790565b612aca90610294565b90565b90565b90612ae5612ae0612aec92612ac1565b612acd565b8254612aa6565b9055565b612af95f612123565b612b03825f612ad0565b90612b37612b317f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093612ac1565b91612ac1565b91612b40610144565b80612b4a816101fe565b0390a3565b5f90565b612b67612b62612b6c926105a7565b610fc1565b610389565b90565b5f90565b919091612b7e612100565b50612b87612b4f565b50612b906118f6565b50612b9a83610c8d565b612bad612ba76041610b60565b916105a7565b145f14612bf457612bed9192612bc16118f6565b50612bca6118f6565b50612bd3612b6f565b506020810151606060408301519201515f1a909192612dda565b9192909190565b50612bfe5f611738565b90612c12612c0d600294610c8d565b612b53565b91929190565b634e487b7160e01b5f52602160045260245ffd5b60041115612c3657565b612c18565b90612c4582612c2c565b565b9190612c5a905f6020850194019061038c565b565b612c68612c6d91610303565b6111da565b90565b80612c83612c7d5f612c3b565b91612c3b565b145f14612c8e575050565b80612ca2612c9c6001612c3b565b91612c3b565b145f14612cc5575f63f645eedf60e01b815280612cc1600482016101fe565b0390fd5b80612cd9612cd36002612c3b565b91612c3b565b145f14612d0757612d03612cec83612c5c565b5f91829163fce698f760e01b8352600483016105b7565b0390fd5b612d1a612d146003612c3b565b91612c3b565b14612d225750565b612d3d905f9182916335e2f38360e21b835260048301612c47565b0390fd5b612d49612100565b503390565b90565b612d65612d60612d6a92612d4e565b610275565b6105a7565b90565b60ff1690565b612d7c90612d6d565b9052565b612db5612dbc94612dab606094989795612da1608086019a5f87019061038c565b6020850190612d73565b604083019061038c565b019061038c565b565b612dd2612dcd612dd792610e8d565b610fc1565b610389565b90565b939293612de5612100565b50612dee612b4f565b50612df76118f6565b50612e0185612c5c565b612e33612e2d7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612d51565b916105a7565b11612ec05790612e56602094955f94939293612e4d610144565b94859485612d80565b838052039060015afa15612ebb57612e6e5f51610fc1565b80612e89612e83612e7e5f611738565b6106ee565b916106ee565b14612e9f575f91612e995f612dbe565b91929190565b50612ea95f611738565b600191612eb55f612dbe565b91929190565b610d6c565b505050612ecc5f611738565b906003929192919056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\0`@R4a\0\x99Wa\0'a\0\x15a\x02\xCAV[\x98\x97\x90\x97\x96\x91\x96\x95\x92\x95\x94\x93\x94a\x07\xE1V[a\0/a\0\x9EV[a.\xD6a\x18J\x829`\x80Q\x81\x81\x81a\x06i\x01Ra\x1FG\x01R`\xA0Q\x81\x81\x81a\tT\x01R\x81\x81a\x1CA\x01Ra\x1Ct\x01R`\xC0Q\x81\x81\x81a\x04?\x01R\x81\x81a\x1B\x81\x01R\x81\x81a\x1D3\x01R\x81\x81a\x1D\xE2\x01Ra /\x01R`\xE0Q\x81\x81\x81a\x02H\x01Ra\x13\xC7\x01Ra.\xD6\x90\xF3[a\0\xA4V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xD0\x90a\0\xA8V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\xE8W`@RV[a\0\xB2V[\x90a\x01\0a\0\xF9a\0\x9EV[\x92\x83a\0\xC6V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x1A\x90a\x01\x06V[\x90V[a\x01&\x90a\x01\x11V[\x90V[a\x012\x81a\x01\x1DV[\x03a\x019WV[_\x80\xFD[\x90PQ\x90a\x01J\x82a\x01)V[V[a\x01U\x90a\x01\x11V[\x90V[a\x01a\x81a\x01LV[\x03a\x01hWV[_\x80\xFD[\x90PQ\x90a\x01y\x82a\x01XV[V[\x90V[a\x01\x87\x81a\x01{V[\x03a\x01\x8EWV[_\x80\xFD[\x90PQ\x90a\x01\x9F\x82a\x01~V[V[a\x01\xAA\x90a\x01\x11V[\x90V[a\x01\xB6\x81a\x01\xA1V[\x03a\x01\xBDWV[_\x80\xFD[\x90PQ\x90a\x01\xCE\x82a\x01\xADV[V[`\x01\x80`@\x1B\x03\x16\x90V[a\x01\xE4\x81a\x01\xD0V[\x03a\x01\xEBWV[_\x80\xFD[\x90PQ\x90a\x01\xFC\x82a\x01\xDBV[V[a\x02\x07\x90a\x01\x11V[\x90V[a\x02\x13\x81a\x01\xFEV[\x03a\x02\x1AWV[_\x80\xFD[\x90PQ\x90a\x02+\x82a\x02\nV[V[a\x01@\x81\x83\x03\x12a\x02\xC5Wa\x02D\x82_\x83\x01a\x01=V[\x92a\x02R\x83` \x84\x01a\x01lV[\x92a\x02`\x81`@\x85\x01a\x01\x92V[\x92a\x02n\x82``\x83\x01a\x01\x92V[\x92a\x02|\x83`\x80\x84\x01a\x01\x92V[\x92a\x02\x8A\x81`\xA0\x85\x01a\x01\x92V[\x92a\x02\x98\x82`\xC0\x83\x01a\x01\x92V[\x92a\x02\xC2a\x02\xA9\x84`\xE0\x85\x01a\x01\xC1V[\x93a\x02\xB8\x81a\x01\0\x86\x01a\x01\xEFV[\x93a\x01 \x01a\x02\x1EV[\x90V[a\x01\x02V[a\x02\xE8aG \x808\x03\x80a\x02\xDD\x81a\0\xEDV[\x92\x839\x81\x01\x90a\x02-V[\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99V[`@\x1B\x90V[\x90a\x03\x14h\x01\0\0\0\0\0\0\0\0`\x01`\x80\x1B\x03\x91a\x02\xF4V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x035a\x030a\x03:\x92a\x01\xD0V[a\x03\x1EV[a\x01\xD0V[\x90V[\x90V[\x90a\x03Ua\x03Pa\x03\\\x92a\x03!V[a\x03=V[\x82Ta\x02\xFAV[\x90UV[a\x03ta\x03oa\x03y\x92a\x01\x06V[a\x03\x1EV[a\x01\x06V[\x90V[a\x03\x85\x90a\x03`V[\x90V[a\x03\x91\x90a\x03|V[\x90V[\x90V[a\x03\xABa\x03\xA6a\x03\xB0\x92a\x03\x94V[a\x03\x1EV[a\x01\x06V[\x90V[a\x03\xBC\x90a\x03\x97V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[\x90` \x82\x82\x03\x12a\x03\xE2Wa\x03\xDF\x91_\x01a\x01\xEFV[\x90V[a\x01\x02V[_\x01\x90V[a\x03\xF4a\0\x9EV[=_\x82>=\x90\xFD[a\x04\x10a\x04\x0Ba\x04\x15\x92a\x03\x94V[a\x03\x1EV[a\x01\xD0V[\x90V[\x90` \x82\x82\x03\x12a\x041Wa\x04.\x91_\x01a\x01\x92V[\x90V[a\x01\x02V[_\x1B\x90V[a\x04Oa\x04Ja\x04T\x92a\x03\x94V[a\x046V[a\x01{V[\x90V[` \x91\x81R\x01\x90V[_\x7Fl1 contract invalid\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\x94`\x13` \x92a\x04WV[a\x04\x9D\x81a\x04`V[\x01\x90V[a\x04\xB6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\x87V[\x90V[\x15a\x04\xC0WV[a\x04\xC8a\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\xDE`\x04\x82\x01a\x04\xA1V[\x03\x90\xFD[a\x04\xEB\x90a\x03|V[\x90V[\x90V[a\x05\x05a\x05\0a\x05\n\x92a\x03\x94V[a\x03\x1EV[a\x04\xEEV[\x90V[` \x7F code\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fposter address does not have any_\x82\x01R\x01RV[a\x05g`%`@\x92a\x04WV[a\x05p\x81a\x05\rV[\x01\x90V[a\x05\x89\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05ZV[\x90V[\x15a\x05\x93WV[a\x05\x9Ba\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05\xB1`\x04\x82\x01a\x05tV[\x03\x90\xFD[a\x05\xBE\x90a\x03|V[\x90V[a\x05\xCA\x81a\x04\xEEV[\x03a\x05\xD1WV[_\x80\xFD[\x90PQ\x90a\x05\xE2\x82a\x05\xC1V[V[\x90` \x82\x82\x03\x12a\x05\xFDWa\x05\xFA\x91_\x01a\x05\xD5V[\x90V[a\x01\x02V[` \x7F bridge\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Finsufficient delayed messages in_\x82\x01R\x01RV[a\x06\\`'`@\x92a\x04WV[a\x06e\x81a\x06\x02V[\x01\x90V[a\x06~\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06OV[\x90V[\x15a\x06\x88WV[a\x06\x90a\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xA6`\x04\x82\x01a\x06iV[\x03\x90\xFD[a\x06\xB3\x90a\x03|V[\x90V[` \x7Fave any code\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FteeKeyManager address does not h_\x82\x01R\x01RV[a\x07\x10`,`@\x92a\x04WV[a\x07\x19\x81a\x06\xB6V[\x01\x90V[a\x072\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\x03V[\x90V[\x15a\x07<WV[a\x07Da\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07Z`\x04\x82\x01a\x07\x1DV[\x03\x90\xFD[\x90a\x07j_\x19\x91a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07}\x90a\x01{V[\x90V[_\x1C\x90V[a\x07\x8E\x90a\x07\x80V[\x90V[\x90a\x07\xA6a\x07\xA1a\x07\xAD\x92a\x07tV[a\x07\x85V[\x82Ta\x07^V[\x90UV[a\x07\xBA\x90a\x01{V[\x90RV[\x91` a\x07\xDF\x92\x94\x93a\x07\xD8`@\x82\x01\x96_\x83\x01\x90a\x07\xB1V[\x01\x90a\x07\xB1V[V[\x90\x91\x93\x95\x97a\x07\xFF\x90\x99\x93\x95\x97\x99a\x07\xF83a\x0B\x91V[`\x0Ba\x03@V[a\x08\x08\x89a\x03\x88V[a\x08\"a\x08\x1Ca\x08\x17_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14\x80\x15a\t\xE2W[\x98a\x087a\x08\x83\x9Aa\x04\xB9V[`\xC0Ra\x08_a\x08F\x82a\x04\xE2V[;a\x08Ya\x08S_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x05\x8CV[`\x80R` a\x08m\x82a\x05\xB5V[c\xEC\xA0g\xAD\x90a\x08{a\0\x9EV[\x9A\x8B\x92a\x03\xC3V[\x82R\x81\x80a\x08\x93`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x97\x88\x15a\t\xDDWa\t\xA5\x98a\x08\xC6\x91_\x91a\t\xAFW[Pa\x08\xC0a\x08\xBA_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x06\x81V[`\xA0Ra\x08\xEEa\x08\xD5\x82a\x06\xAAV[;a\x08\xE8a\x08\xE2_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x075V[`\xE0Ra\x08\xFE\x81_`\x02\x01a\x07\x91V[a\t\x0C\x82`\x01`\x02\x01a\x07\x91V[\x90\x7F\xC9\x85\xBC\xCB\xD0\xC9\x0E\x19\x7FJss\x02\n3\xBAo\xF8d\xD09\x9F\xD7\xD6\\\\|2\xFF\xB0\x15\xEC\x91a\tCa\t:a\0\x9EV[\x92\x83\x92\x83a\x07\xBEV[\x03\x90\xA1a\tS\x81`\x02\x80\x01a\x07\x91V[a\ta\x82`\x03`\x02\x01a\x07\x91V[\x90\x7F\xB9\xEB \xB3/\xAC\x96X\x84\xCBX2a\x02%|\xAE`E\x04\xF0\xA3l\xD1\0\x8A2\x84Z\xD5\xC2\x9B\x91a\t\x98a\t\x8Fa\0\x9EV[\x92\x83\x92\x83a\x07\xBEV[\x03\x90\xA1`\x05`\x02\x01a\x07\x91V[a\t\xADa\x16\xAEV[V[a\t\xD0\x91P` =\x81\x11a\t\xD6W[a\t\xC8\x81\x83a\0\xC6V[\x81\x01\x90a\x05\xE4V[_a\x08\xADV[P=a\t\xBEV[a\x03\xECV[Pa\n\x07` a\t\xF1\x8Ba\x03\x88V[c\xB8\x07w\xEA\x90a\t\xFFa\0\x9EV[\x93\x84\x92a\x03\xC3V[\x82R\x81\x80a\n\x17`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x90\x81\x15a\x0B!W_\x91a\n\xF3W[Pa\n<a\n6_a\x03\xFCV[\x91a\x01\xD0V[\x11\x98\x89a\nTW[a\x087a\x08\x83\x9A\x91\x9APPa\x08*V[a\nz\x99P` a\nd\x82a\x03\x88V[c\t\xBDZ`\x90a\nra\0\x9EV[\x9C\x8D\x92a\x03\xC3V[\x82R\x81\x80a\n\x8A`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x99\x8A\x15a\n\xEEWa\x08\x83\x9Aa\x087\x91_\x91a\n\xC0W[Pa\n\xB7a\n\xB1_a\x04;V[\x91a\x01{V[\x11\x9APPa\nDV[a\n\xE1\x91P` =\x81\x11a\n\xE7W[a\n\xD9\x81\x83a\0\xC6V[\x81\x01\x90a\x04\x18V[_a\n\xA4V[P=a\n\xCFV[a\x03\xECV[a\x0B\x14\x91P` =\x81\x11a\x0B\x1AW[a\x0B\x0C\x81\x83a\0\xC6V[\x81\x01\x90a\x03\xC9V[_a\n)V[P=a\x0B\x02V[a\x03\xECV[\x90V[a\x0B=a\x0B8a\x0BB\x92a\x0B&V[a\x03\x1EV[a\x04\xEEV[\x90V[a\x0BO`\x01a\x0B)V[\x90V[a\x0Bfa\x0Baa\x0Bk\x92a\x04\xEEV[a\x03\x1EV[a\x04\xEEV[\x90V[\x90V[\x90a\x0B\x86a\x0B\x81a\x0B\x8D\x92a\x0BRV[a\x0BnV[\x82Ta\x07^V[\x90UV[a\x0B\x9A\x90a\x0B\xD0V[a\x0B\xACa\x0B\xA5a\x0BEV[`\x01a\x0BqV[V[a\x0B\xB7\x90a\x01\x11V[\x90RV[\x91\x90a\x0B\xCE\x90_` \x85\x01\x94\x01\x90a\x0B\xAEV[V[\x80a\x0B\xEBa\x0B\xE5a\x0B\xE0_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14a\x0B\xFBWa\x0B\xF9\x90a\x17.V[V[a\x0C\x1Ea\x0C\x07_a\x03\xB3V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x0B\xBBV[\x03\x90\xFD[a\x0C*a\x17\xDDV[a\x0C2a\x11\xDDV[a\x0C:a\x185V[V[T\x90V[` \x7Ftoo many assertions\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x0C\x9A`3`@\x92a\x04WV[a\x0C\xA3\x81a\x0C@V[\x01\x90V[a\x0C\xBC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\x8DV[\x90V[\x15a\x0C\xC6WV[a\x0C\xCEa\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\xE4`\x04\x82\x01a\x0C\xA7V[\x03\x90\xFD[a\x0C\xF2\x90Qa\x01\xA1V[\x90V[a\r\ta\r\x04a\r\x0E\x92a\x04\xEEV[a\x03\x1EV[a\x01\xD0V[\x90V[`\x01\x80`@\x1B\x03\x16\x90V[a\r(a\r-\x91a\x07\x80V[a\r\x11V[\x90V[a\r:\x90Ta\r\x1CV[\x90V[` \x7Finsufficient time has passed\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\r\x97`<`@\x92a\x04WV[a\r\xA0\x81a\r=V[\x01\x90V[a\r\xB9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\x8AV[\x90V[\x15a\r\xC3WV[a\r\xCBa\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xE1`\x04\x82\x01a\r\xA4V[\x03\x90\xFD[`@\x1C\x90V[a\r\xF7a\r\xFC\x91a\r\xE5V[a\r\x11V[\x90V[a\x0E\t\x90Ta\r\xEBV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0E,a\x0E2\x91a\x01\xD0V[\x91a\x01\xD0V[\x01\x90`\x01\x80`@\x1B\x03\x82\x11a\x0ECWV[a\x0E\x0CV[\x90a\x0EY`\x01\x80`@\x1B\x03\x91a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x0Exa\x0Esa\x0E\x7F\x92a\x03!V[a\x03=V[\x82Ta\x0EHV[\x90UV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_R` _ \x90V[a\x0E\xA9\x81a\x0C<V[\x82\x10\x15a\x0E\xC3Wa\x0E\xBB`\x03\x91a\x0E\x97V[\x91\x02\x01\x90_\x90V[a\x0E\x83V[\x90V[a\x0E\xD7a\x0E\xDC\x91a\x07\x80V[a\x0E\xC8V[\x90V[a\x0E\xE9\x90Ta\x0E\xCBV[\x90V[a\x0E\xF6\x90Qa\x01\x1DV[\x90V[_\x91\x03\x12a\x0F\x03WV[a\x01\x02V[a\x0F\x17a\x0F\x1D\x91\x93\x92\x93a\x04\xEEV[\x92a\x04\xEEV[\x91a\x0F)\x83\x82\x02a\x04\xEEV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x0F8WV[a\x0E\x0CV[a\x0FH\x90`\x03a\x0F\x08V[\x90V[\x1B\x90V[\x91\x90`\x08a\x0Fj\x91\x02\x91a\x0Fd_\x19\x84a\x0FKV[\x92a\x0FKV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0F\x8Aa\x0F\x85a\x0F\x92\x93a\x07tV[a\x07\x85V[\x90\x83Ta\x0FOV[\x90UV[_\x90V[a\x0F\xAC\x91a\x0F\xA6a\x0F\x96V[\x91a\x0FtV[V[_`\x02a\x0F\xD4\x92a\x0F\xC1\x83\x80\x83\x01a\x0F\x9AV[a\x0F\xCE\x83`\x01\x83\x01a\x0F\x9AV[\x01a\x0F\x9AV[V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x0F\xFBWa\x0F\xF9\x90a\x0F\xAEV[V[a\x0F\xD6V[[\x81\x81\x10a\x10\x0CWPPV[\x80a\x10\x19_`\x03\x93a\x0F\xE9V[\x01a\x10\x01V[\x90\x91\x82\x81\x10a\x10.W[PPPV[a\x10La\x10Fa\x10@a\x10W\x95a\x0F=V[\x92a\x0F=V[\x92a\x0E\x97V[\x91\x82\x01\x91\x01\x90a\x10\0V[_\x80\x80a\x10)V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x10\x88W\x81a\x10}a\x10\x86\x93a\x0C<V[\x90\x82\x81Ua\x10\x1FV[V[a\0\xB2V[_a\x10\x97\x91a\x10_V[V[\x90_\x03a\x10\xABWa\x10\xA9\x90a\x10\x8DV[V[a\x0F\xD6V[a\x10\xBA\x90Qa\x01LV[\x90V[a\x10\xCCa\x10\xD2\x91\x93\x92\x93a\x04\xEEV[\x92a\x04\xEEV[\x82\x03\x91\x82\x11a\x10\xDDWV[a\x0E\x0CV[a\x10\xEB\x90a\x04\xEEV[\x90RV[\x91\x90a\x11\x02\x90_` \x85\x01\x94\x01\x90a\x10\xE2V[V[a\x11\r\x90a\x01{V[\x90RV[\x90`\xC0a\x11\xBE`\x06a\x11\xC6\x94a\x115a\x11,_\x83\x01Ta\x0E\xCBV[_\x87\x01\x90a\x11\x04V[a\x11Oa\x11E`\x01\x83\x01Ta\x0E\xCBV[` \x87\x01\x90a\x11\x04V[a\x11ia\x11_`\x02\x83\x01Ta\x0E\xCBV[`@\x87\x01\x90a\x11\x04V[a\x11\x83a\x11y`\x03\x83\x01Ta\x0E\xCBV[``\x87\x01\x90a\x11\x04V[a\x11\x9Da\x11\x93`\x04\x83\x01Ta\x0E\xCBV[`\x80\x87\x01\x90a\x11\x04V[a\x11\xB7a\x11\xAD`\x05\x83\x01Ta\x0E\xCBV[`\xA0\x87\x01\x90a\x11\x04V[\x01Ta\x0E\xCBV[\x91\x01\x90a\x11\x04V[V[\x91\x90a\x11\xDB\x90_`\xE0\x85\x01\x94\x01\x90a\x11\x11V[V[a\x12\x04a\x11\xEA`\ta\x0C<V[a\x11\xFDa\x11\xF7`\x01a\x0B)V[\x91a\x04\xEEV[\x11\x15a\x0C\xBFV[a\x12\x16a\x12\x11`\xC0a\x0C\xE8V[a\x03\x88V[a\x120a\x12*a\x12%_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14_\x14a\x16#Wa\x12ea\x12CBa\x0C\xF5V[[a\x12_a\x12Ya\x12T`\x0Ba\r0V[a\x01\xD0V[\x91a\x01\xD0V[\x11a\r\xBCV[a\x12\x8Ba\x12\x84a\x12tBa\x0C\xF5V[a\x12~`\x0Ba\r\xFFV[\x90a\x0E V[`\x0Ba\x0EcV[a\x12\x95`\ta\x0C<V[a\x12\xA7a\x12\xA1_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x14\xF4W[a\x12\xBFa\x12\xBA`\xA0a\x10\xB0V[a\x05\xB5V[a\x12\xF1c\xD5q\x9D\xC2` a\x12\xDBa\x12\xD6`\xA0a\x10\xB0V[a\x05\xB5V[c\xEC\xA0g\xAD\x90a\x12\xE9a\0\x9EV[\x94\x85\x92a\x03\xC3V[\x82R\x81\x80a\x13\x01`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x92\x83\x15a\x14\xEFWa\x13Fa\x131a\x13Q\x95` \x95_\x91a\x14\xC2W[Pa\x13+`\x01a\x0B)V[\x90a\x10\xBDV[\x92a\x13:a\0\x9EV[\x95\x86\x94\x85\x93\x84\x93a\x03\xC3V[\x83R`\x04\x83\x01a\x10\xEFV[\x03\x91Z\xFA\x80\x15a\x14\xBDWa\x13q\x91_\x91a\x14\x8FW[P`\x04`\x02\x01a\x07\x91V[a\x13\x83a\x13~`\xC0a\x0C\xE8V[a\x03\x88V[a\x13\x9Da\x13\x97a\x13\x92_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14_\x14a\x14\x04Wa\x13\xC7a\x13\xBBCa\x13\xB5`\x01a\x0B)V[\x90a\x10\xBDV[@[`\x06`\x02\x01a\x07\x91V[`\x02a\x13\xFF\x7F\x91\t+\xCFU\t!\xE3\x81\xE8\x1F\x06i3 SK\x14J~V\x1C_\xC0\x8F\x19@\xD5\x08\xA8\\\xDC\x91a\x13\xF6a\0\x9EV[\x91\x82\x91\x82a\x11\xC8V[\x03\x90\xA1V[a\x141` a\x14\x1Ba\x14\x16`\xC0a\x0C\xE8V[a\x03\x88V[c\t\xBDZ`\x90a\x14)a\0\x9EV[\x93\x84\x92a\x03\xC3V[\x82R\x81\x80a\x14A`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x80\x15a\x14\x8AWa\x13\xC7\x91_\x91a\x14\\W[Pa\x13\xBDV[a\x14}\x91P` =\x81\x11a\x14\x83W[a\x14u\x81\x83a\0\xC6V[\x81\x01\x90a\x04\x18V[_a\x14VV[P=a\x14kV[a\x03\xECV[a\x14\xB0\x91P` =\x81\x11a\x14\xB6W[a\x14\xA8\x81\x83a\0\xC6V[\x81\x01\x90a\x04\x18V[_a\x13fV[P=a\x14\x9EV[a\x03\xECV[a\x14\xE2\x91P\x86=\x81\x11a\x14\xE8W[a\x14\xDA\x81\x83a\0\xC6V[\x81\x01\x90a\x05\xE4V[_a\x13 V[P=a\x14\xD0V[a\x03\xECV[a\x15\x18a\x15\x0E_a\x15\x07`\t\x82\x90a\x0E\xA0V[P\x01a\x0E\xDFV[`\x01`\x02\x01a\x07\x91V[a\x15=a\x153`\x02a\x15,`\t_\x90a\x0E\xA0V[P\x01a\x0E\xDFV[`\x03`\x02\x01a\x07\x91V[a\x15Wa\x15M`\x06`\x02\x01a\x0E\xDFV[`\x05`\x02\x01a\x07\x91V[a\x15ia\x15d`\x80a\x0E\xECV[a\x04\xE2V[c\xDA\xEA\xB4\x12a\x15\x85_a\x15~`\t\x82\x90a\x0E\xA0V[P\x01a\x0E\xDFV[a\x15\x9D`\x01a\x15\x96`\t_\x90a\x0E\xA0V[P\x01a\x0E\xDFV[\x92\x80;\x15a\x16\x1EWa\x15\xC2_\x80\x94a\x15\xCDa\x15\xB6a\0\x9EV[\x97\x88\x96\x87\x95\x86\x94a\x03\xC3V[\x84R`\x04\x84\x01a\x07\xBEV[\x03\x92Z\xF1\x80\x15a\x16\x19Wa\x15\xEDW[Pa\x15\xE8_`\ta\x10\x99V[a\x12\xADV[a\x16\x0C\x90_=\x81\x11a\x16\x12W[a\x16\x04\x81\x83a\0\xC6V[\x81\x01\x90a\x0E\xF9V[_a\x15\xDCV[P=a\x15\xFAV[a\x03\xECV[a\x03\xBFV[a\x16P` a\x16:a\x165`\xC0a\x0C\xE8V[a\x03\x88V[c\xB8\x07w\xEA\x90a\x16Ha\0\x9EV[\x93\x84\x92a\x03\xC3V[\x82R\x81\x80a\x16``\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x80\x15a\x16\xA9Wa\x12e\x91_\x91a\x16{W[Pa\x12DV[a\x16\x9C\x91P` =\x81\x11a\x16\xA2W[a\x16\x94\x81\x83a\0\xC6V[\x81\x01\x90a\x03\xC9V[_a\x16uV[P=a\x16\x8AV[a\x03\xECV[a\x16\xB6a\x0C\"V[V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\xCFa\x16\xD4\x91a\x07\x80V[a\x16\xB8V[\x90V[a\x16\xE1\x90Ta\x16\xC3V[\x90V[\x90a\x16\xF5`\x01\x80`\xA0\x1B\x03\x91a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x17\x08\x90a\x03|V[\x90V[\x90V[\x90a\x17#a\x17\x1Ea\x17*\x92a\x16\xFFV[a\x17\x0BV[\x82Ta\x16\xE4V[\x90UV[a\x177_a\x16\xD7V[a\x17A\x82_a\x17\x0EV[\x90a\x17ua\x17o\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x16\xFFV[\x91a\x16\xFFV[\x91a\x17~a\0\x9EV[\x80a\x17\x88\x81a\x03\xE7V[\x03\x90\xA3V[\x90V[a\x17\x9Ca\x17\xA1\x91a\x07\x80V[a\x17\x8DV[\x90V[a\x17\xAE\x90Ta\x17\x90V[\x90V[\x90V[a\x17\xC8a\x17\xC3a\x17\xCD\x92a\x17\xB1V[a\x03\x1EV[a\x04\xEEV[\x90V[a\x17\xDA`\x02a\x17\xB4V[\x90V[a\x17\xE7`\x01a\x17\xA4V[a\x18\0a\x17\xFAa\x17\xF5a\x17\xD0V[a\x04\xEEV[\x91a\x04\xEEV[\x14a\x18\x19Wa\x18\x17a\x18\x10a\x17\xD0V[`\x01a\x0BqV[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a\x181`\x04\x82\x01a\x03\xE7V[\x03\x90\xFD[a\x18Ga\x18@a\x0BEV[`\x01a\x0BqV[V\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\x0B8W\0[a\0\x1F_5a\x01>V[\x80c\r\xBF\xD1\xFA\x14a\x019W\x80c:\0\x9A\x06\x14a\x014W\x80c<\xEA\xAE}\x14a\x01/W\x80cB\x0C\xAF:\x14a\x01*W\x80cK\xD1g\xC9\x14a\x01%W\x80ci{^b\x14a\x01 W\x80clL `\x14a\x01\x1BW\x80cqP\x18\xA6\x14a\x01\x16W\x80c\x80\x95\x97!\x14a\x01\x11W\x80c\x8D\xA5\xCB[\x14a\x01\x0CW\x80c\x8F\xEDU\xA3\x14a\x01\x07W\x80c\xA5n\xC6\xCD\x14a\x01\x02W\x80c\xC3\xF2\xDB\xD3\x14a\0\xFDW\x80c\xE7\x8C\xEA\x92\x14a\0\xF8W\x80c\xEB`U:\x14a\0\xF3W\x80c\xEE\x1C(\xB8\x14a\0\xEEW\x80c\xF2#\x05\\\x14a\0\xE9Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x05V[a\n\x91V[a\n\\V[a\n\x1AV[a\t\xA4V[a\t\x1FV[a\x08\xA6V[a\x07oV[a\x07\x1CV[a\x06\xB9V[a\x064V[a\x06\x01V[a\x05\xCCV[a\x05:V[a\x04\x8FV[a\x04\x01V[a\x02\xCEV[a\x02\x03V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x81``\x91\x03\x12a\x01hW\x90V[a\x01VV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xB3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xAEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xA9WV[a\x01uV[a\x01qV[a\x01mV[\x91\x90\x91`\x80\x81\x84\x03\x12a\x01\xF9Wa\x01\xD1\x83_\x83\x01a\x01ZV[\x92``\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xF4Wa\x01\xF0\x92\x01a\x01yV[\x90\x91V[a\x01RV[a\x01NV[_\x01\x90V[4a\x022Wa\x02\x1Ca\x02\x166`\x04a\x01\xB8V[\x91a\x16MV[a\x02$a\x01DV[\x80a\x02.\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[_\x91\x03\x12a\x02AWV[a\x01NV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\x8Ca\x02\x87a\x02\x91\x92a\x02jV[a\x02uV[a\x02jV[\x90V[a\x02\x9D\x90a\x02xV[\x90V[a\x02\xA9\x90a\x02\x94V[\x90V[a\x02\xB5\x90a\x02\xA0V[\x90RV[\x91\x90a\x02\xCC\x90_` \x85\x01\x94\x01\x90a\x02\xACV[V[4a\x02\xFEWa\x02\xDE6`\x04a\x027V[a\x02\xFAa\x02\xE9a\x02FV[a\x02\xF1a\x01DV[\x91\x82\x91\x82a\x02\xB9V[\x03\x90\xF3[a\x01JV[_\x1C\x90V[\x90V[a\x03\x17a\x03\x1C\x91a\x03\x03V[a\x03\x08V[\x90V[a\x03)\x90Ta\x03\x0BV[\x90V[`\x02a\x039_\x82\x01a\x03\x1FV[\x91a\x03F`\x01\x83\x01a\x03\x1FV[\x91a\x03S`\x02\x82\x01a\x03\x1FV[\x91a\x03``\x03\x83\x01a\x03\x1FV[\x91a\x03m`\x04\x82\x01a\x03\x1FV[\x91a\x03\x86`\x06a\x03\x7F`\x05\x85\x01a\x03\x1FV[\x93\x01a\x03\x1FV[\x90V[\x90V[a\x03\x95\x90a\x03\x89V[\x90RV[\x94\x92\x90\x97\x96\x95\x93\x91`\xE0\x86\x01\x98_\x87\x01a\x03\xB2\x91a\x03\x8CV[` \x86\x01a\x03\xBF\x91a\x03\x8CV[`@\x85\x01a\x03\xCC\x91a\x03\x8CV[``\x84\x01a\x03\xD9\x91a\x03\x8CV[`\x80\x83\x01a\x03\xE6\x91a\x03\x8CV[`\xA0\x82\x01a\x03\xF3\x91a\x03\x8CV[`\xC0\x01a\x03\xFF\x91a\x03\x8CV[V[4a\x048Wa\x04\x116`\x04a\x027V[a\x044a\x04\x1Ca\x03,V[\x93a\x04+\x97\x95\x97\x93\x91\x93a\x01DV[\x97\x88\x97\x88a\x03\x99V[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x04j\x90a\x02\x94V[\x90V[a\x04v\x90a\x04aV[\x90RV[\x91\x90a\x04\x8D\x90_` \x85\x01\x94\x01\x90a\x04mV[V[4a\x04\xBFWa\x04\x9F6`\x04a\x027V[a\x04\xBBa\x04\xAAa\x04=V[a\x04\xB2a\x01DV[\x91\x82\x91\x82a\x04zV[\x03\x90\xF3[a\x01JV[\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\xE5\x90`\x08a\x04\xEA\x93\x02a\x04\xC4V[a\x04\xC8V[\x90V[\x90a\x04\xF8\x91Ta\x04\xD5V[\x90V[a\x05\x08`\x0B`\x08\x90a\x04\xEDV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x05!\x90a\x05\x0BV[\x90RV[\x91\x90a\x058\x90_` \x85\x01\x94\x01\x90a\x05\x18V[V[4a\x05jWa\x05J6`\x04a\x027V[a\x05fa\x05Ua\x04\xFBV[a\x05]a\x01DV[\x91\x82\x91\x82a\x05%V[\x03\x90\xF3[a\x01JV[\x90V[a\x05\x82\x90`\x08a\x05\x87\x93\x02a\x04\xC4V[a\x05oV[\x90V[\x90a\x05\x95\x91Ta\x05rV[\x90V[a\x05\xA4`\n_\x90a\x05\x8AV[\x90V[\x90V[a\x05\xB3\x90a\x05\xA7V[\x90RV[\x91\x90a\x05\xCA\x90_` \x85\x01\x94\x01\x90a\x05\xAAV[V[4a\x05\xFCWa\x05\xDC6`\x04a\x027V[a\x05\xF8a\x05\xE7a\x05\x98V[a\x05\xEFa\x01DV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x01JV[4a\x06/Wa\x06\x116`\x04a\x027V[a\x06\x19a \xC7V[a\x06!a\x01DV[\x80a\x06+\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[4a\x06bWa\x06D6`\x04a\x027V[a\x06La \xF6V[a\x06Ta\x01DV[\x80a\x06^\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x06\x94\x90a\x02\x94V[\x90V[a\x06\xA0\x90a\x06\x8BV[\x90RV[\x91\x90a\x06\xB7\x90_` \x85\x01\x94\x01\x90a\x06\x97V[V[4a\x06\xE9Wa\x06\xC96`\x04a\x027V[a\x06\xE5a\x06\xD4a\x06gV[a\x06\xDCa\x01DV[\x91\x82\x91\x82a\x06\xA4V[\x03\x90\xF3[a\x01JV[a\x06\xF7\x90a\x02jV[\x90V[a\x07\x03\x90a\x06\xEEV[\x90RV[\x91\x90a\x07\x1A\x90_` \x85\x01\x94\x01\x90a\x06\xFAV[V[4a\x07LWa\x07,6`\x04a\x027V[a\x07Ha\x077a!0V[a\x07?a\x01DV[\x91\x82\x91\x82a\x07\x07V[\x03\x90\xF3[a\x01JV[\x90``\x82\x82\x03\x12a\x07jWa\x07g\x91_\x01a\x01ZV[\x90V[a\x01NV[4a\x07\x9DWa\x07\x87a\x07\x826`\x04a\x07QV[a$\x18V[a\x07\x8Fa\x01DV[\x80a\x07\x99\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[a\x07\xAB\x81a\x05\xA7V[\x03a\x07\xB2WV[_\x80\xFD[\x90P5\x90a\x07\xC3\x82a\x07\xA2V[V[\x90` \x82\x82\x03\x12a\x07\xDEWa\x07\xDB\x91_\x01a\x07\xB6V[\x90V[a\x01NV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x08\r\x81a\x07\xF7V[\x82\x10\x15a\x08'Wa\x08\x1F`\x03\x91a\x07\xFBV[\x91\x02\x01\x90_\x90V[a\x07\xE3V[`\t\x90a\x088\x82a\x07\xF7V[\x81\x10\x15a\x08pWa\x08H\x91a\x08\x04V[Pa\x08T_\x82\x01a\x03\x1FV[\x91a\x08m`\x02a\x08f`\x01\x85\x01a\x03\x1FV[\x93\x01a\x03\x1FV[\x90V[_\x80\xFD[`@\x90a\x08\x9Da\x08\xA4\x94\x96\x95\x93\x96a\x08\x93``\x84\x01\x98_\x85\x01\x90a\x03\x8CV[` \x83\x01\x90a\x03\x8CV[\x01\x90a\x03\x8CV[V[4a\x08\xD9Wa\x08\xD5a\x08\xC1a\x08\xBC6`\x04a\x07\xC5V[a\x08,V[a\x08\xCC\x93\x91\x93a\x01DV[\x93\x84\x93\x84a\x08tV[\x03\x90\xF3[a\x01JV[a\x08\xE7\x81a\x03\x89V[\x03a\x08\xEEWV[_\x80\xFD[\x90P5\x90a\x08\xFF\x82a\x08\xDEV[V[\x90` \x82\x82\x03\x12a\t\x1AWa\t\x17\x91_\x01a\x08\xF2V[\x90V[a\x01NV[4a\tMWa\t7a\t26`\x04a\t\x01V[a%XV[a\t?a\x01DV[\x80a\tI\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t\x7F\x90a\x02\x94V[\x90V[a\t\x8B\x90a\tvV[\x90RV[\x91\x90a\t\xA2\x90_` \x85\x01\x94\x01\x90a\t\x82V[V[4a\t\xD4Wa\t\xB46`\x04a\x027V[a\t\xD0a\t\xBFa\tRV[a\t\xC7a\x01DV[\x91\x82\x91\x82a\t\x8FV[\x03\x90\xF3[a\x01JV[a\t\xE2\x81a\x05\x0BV[\x03a\t\xE9WV[_\x80\xFD[\x90P5\x90a\t\xFA\x82a\t\xD9V[V[\x90` \x82\x82\x03\x12a\n\x15Wa\n\x12\x91_\x01a\t\xEDV[\x90V[a\x01NV[4a\nHWa\n2a\n-6`\x04a\t\xFCV[a&\x9BV[a\n:a\x01DV[\x80a\nD\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[a\nY`\x0B_\x90a\x04\xEDV[\x90V[4a\n\x8CWa\nl6`\x04a\x027V[a\n\x88a\nwa\nMV[a\n\x7Fa\x01DV[\x91\x82\x91\x82a\x05%V[\x03\x90\xF3[a\x01JV[4a\n\xBFWa\n\xA9a\n\xA46`\x04a\t\x01V[a'3V[a\n\xB1a\x01DV[\x80a\n\xBB\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[a\n\xCD\x81a\x06\xEEV[\x03a\n\xD4WV[_\x80\xFD[\x90P5\x90a\n\xE5\x82a\n\xC4V[V[\x90` \x82\x82\x03\x12a\x0B\0Wa\n\xFD\x91_\x01a\n\xD8V[\x90V[a\x01NV[4a\x0B3Wa\x0B\x1Da\x0B\x186`\x04a\n\xE7V[a'\xA3V[a\x0B%a\x01DV[\x80a\x0B/\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[_\x80\xFD[\x90a\x0BO\x92\x91a\x0BJa'\xBBV[a\x130V[a\x0BWa( V[V[P\x90V[\x90V[a\x0Bta\x0Boa\x0By\x92a\x0B]V[a\x02uV[a\x05\xA7V[\x90V[` \x91\x81R\x01\x90V[_\x7Finvalid signature length\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xB9`\x18` \x92a\x0B|V[a\x0B\xC2\x81a\x0B\x85V[\x01\x90V[a\x0B\xDB\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xACV[\x90V[\x15a\x0B\xE5WV[a\x0B\xEDa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\x03`\x04\x82\x01a\x0B\xC6V[\x03\x90\xFD[\x90V[\x90V[a\x0C\x19a\x0C\x1E\x91a\x03\x89V[a\x0C\nV[\x90RV[` \x81a\x0C4a\x0C<\x93\x83\x96\x95a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0Ch\x90a\x0C@V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\x82W`@RV[a\x0CJV[` \x01\x90V[Q\x90V[_\x80\xFD[\x90a\x0C\xA8a\x0C\xA1a\x01DV[\x92\x83a\x0C^V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0C\xC8Wa\x0C\xC4` \x91a\x0C@V[\x01\x90V[a\x0CJV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x0C\xEDa\x0C\xE8\x82a\x0C\xAAV[a\x0C\x95V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\r\tWa\r\x07\x92a\x0C\xCDV[V[a\x0C\x91V[a\r\x19\x916\x91a\x0C\xD8V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[\x15\x15\x90V[a\r4\x81a\r&V[\x03a\r;WV[_\x80\xFD[\x90PQ\x90a\rL\x82a\r+V[V[\x90` \x82\x82\x03\x12a\rgWa\rd\x91_\x01a\r?V[\x90V[a\x01NV[a\rta\x01DV[=_\x82>=\x90\xFD[_\x7Finvalid tee signature\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\r\xB0`\x15` \x92a\x0B|V[a\r\xB9\x81a\r|V[\x01\x90V[a\r\xD2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\xA3V[\x90V[\x15a\r\xDCWV[a\r\xE4a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xFA`\x04\x82\x01a\r\xBDV[\x03\x90\xFD[5a\x0E\x08\x81a\x08\xDEV[\x90V[_\x7Fappchain block hash unchanged\0\0\0\x91\x01RV[a\x0E?`\x1D` \x92a\x0B|V[a\x0EH\x81a\x0E\x0BV[\x01\x90V[a\x0Ea\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E2V[\x90V[\x15a\x0EkWV[a\x0Esa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E\x89`\x04\x82\x01a\x0ELV[\x03\x90\xFD[\x90V[a\x0E\xA4a\x0E\x9Fa\x0E\xA9\x92a\x0E\x8DV[a\x02uV[a\x05\xA7V[\x90V[`\x01a\x0E\xB8\x91\x01a\x05\xA7V[\x90V[\x90V[_\x7Fassertion already exists\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xF2`\x18` \x92a\x0B|V[a\x0E\xFB\x81a\x0E\xBEV[\x01\x90V[a\x0F\x14\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xE5V[\x90V[\x15a\x0F\x1EWV[a\x0F&a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0F<`\x04\x82\x01a\x0E\xFFV[\x03\x90\xFD[a\x0FTa\x0FOa\x0FY\x92a\x05\xA7V[a\x02uV[a\x05\x0BV[\x90V[`@\x1C\x90V[a\x0Fna\x0Fs\x91a\x0F\\V[a\x04\xC8V[\x90V[a\x0F\x80\x90Ta\x0FbV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0F\xA3a\x0F\xA9\x91a\x05\x0BV[\x91a\x05\x0BV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F\xBCWV[a\x0F\x83V[_\x1B\x90V[\x90a\x0F\xD9g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0F\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xF7a\x0F\xF2a\x0F\xFC\x92a\x05\x0BV[a\x02uV[a\x05\x0BV[\x90V[\x90V[\x90a\x10\x17a\x10\x12a\x10\x1E\x92a\x0F\xE3V[a\x0F\xFFV[\x82Ta\x0F\xC6V[\x90UV[\x90V[_R` _ \x90V[T\x90V[a\x10;\x81a\x10.V[\x82\x10\x15a\x10UWa\x10M`\x03\x91a\x10%V[\x91\x02\x01\x90_\x90V[a\x07\xE3V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90a\x10y_\x19\x91a\x0F\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\x8C\x90a\x03\x89V[\x90V[a\x10\x98\x90a\x03\x03V[\x90V[\x90a\x10\xB0a\x10\xABa\x10\xB7\x92a\x10\x83V[a\x10\x8FV[\x82Ta\x10mV[\x90UV[\x90a\x10\xFF`@`\x02a\x11\x05\x94a\x10\xDE_\x82\x01a\x10\xD8_\x88\x01a\r\xFEV[\x90a\x10\x9BV[a\x10\xF7`\x01\x82\x01a\x10\xF1` \x88\x01a\r\xFEV[\x90a\x10\x9BV[\x01\x92\x01a\r\xFEV[\x90a\x10\x9BV[V[\x91\x90a\x11\x18Wa\x11\x16\x91a\x10\xBBV[V[a\x10ZV[\x1B\x90V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x11QW\x82a\x11I\x91`\x01a\x11O\x95\x01\x81Ua\x102V[\x90a\x11\x07V[V[a\x0CJV[\x90V[a\x11ma\x11ha\x11r\x92a\x11VV[a\x02uV[a\x05\xA7V[\x90V[\x90V[a\x11\x8Ca\x11\x87a\x11\x91\x92a\x11uV[a\x02uV[a\x05\xA7V[\x90V[a\x11\xA0a\x11\xA5\x91a\x03\x03V[a\x05oV[\x90V[a\x11\xB2\x90Ta\x11\x94V[\x90V[a\x11\xC4a\x11\xCA\x91\x93\x92\x93a\x05\xA7V[\x92a\x05\xA7V[\x82\x01\x80\x92\x11a\x11\xD5WV[a\x0F\x83V[a\x11\xEEa\x11\xE9a\x11\xF3\x92a\x05\xA7V[a\x02uV[a\x05\xA7V[\x90V[\x90V[\x90a\x12\x0Ea\x12\ta\x12\x15\x92a\x11\xDAV[a\x11\xF6V[\x82Ta\x10mV[\x90UV[a\x12\"\x90a\x02xV[\x90V[a\x12.\x90a\x12\x19V[\x90V[a\x12:\x90a\x02\x94V[\x90V[a\x12F\x90a\x02\x94V[\x90V[\x90P\x90V[a\x12Y_\x80\x92a\x12IV[\x01\x90V[a\x12f\x90a\x12NV[\x90V[\x90a\x12{a\x12v\x83a\x0C\xAAV[a\x0C\x95V[\x91\x82RV[``\x90V[=_\x14a\x12\xA0Wa\x12\x95=a\x12iV[\x90=_` \x84\x01>[V[a\x12\xA8a\x12\x80V[\x90a\x12\x9EV[_\x7Fpayment failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12\xE2`\x0E` \x92a\x0B|V[a\x12\xEB\x81a\x12\xAEV[\x01\x90V[a\x13\x04\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12\xD5V[\x90V[\x15a\x13\x0EWV[a\x13\x16a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13,`\x04\x82\x01a\x12\xEFV[\x03\x90\xFD[\x91\x92\x90` a\x14\x1E\x91a\x13`a\x13G\x82\x88\x90a\x0BYV[a\x13Za\x13T`Aa\x0B`V[\x91a\x05\xA7V[\x14a\x0B\xDEV[a\x13i\x85a(_V[\x95a\x14\x13a\x13\xFEa\x13\x82a\x13}`\x02a\x0C\x07V[a),V[a\x13\xAB\x8A\x91a\x13\x9Da\x13\x92a\x01DV[\x93\x84\x92\x8A\x84\x01a\x0C\"V[\x88\x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a\x13\xBDa\x13\xB7\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x93a\x13\xF8a\x13\xEB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\xA0V[\x94cr\x17\xEF\xCD\x96\x92a\r\x0EV[\x90a)\xCBV[\x92a\x14\x07a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\r V[\x83R`\x04\x83\x01a\x07\x07V[\x03\x91Z\xFA\x80\x15a\x16HWa\x149\x91_\x91a\x16\x1AW[Pa\r\xD5V[a\x14la\x14G_\x84\x01a\r\xFEV[a\x14ea\x14_a\x14Z`\x01`\x02\x01a\x03\x1FV[a\x03\x89V[\x91a\x03\x89V[\x14\x15a\x0EdV[a\x14u_a\x0E\x90V[[\x80a\x14\x92a\x14\x8Ca\x14\x87`\ta\x07\xF7V[a\x05\xA7V[\x91a\x05\xA7V[\x10\x15a\x14\xDFWa\x14\xDA\x90a\x14\xD5\x85a\x14\xCEa\x14\xC8a\x14\xC3a\x14\xBEa\x14\xB8`\t\x88\x90a\x08\x04V[Pa\x0E\xBBV[a)\xEDV[a\x03\x89V[\x91a\x03\x89V[\x14\x15a\x0F\x17V[a\x0E\xACV[a\x14vV[P\x91Pa\x15\x17\x90a\x14\xF0`\ta\x07\xF7V[a\x15\x02a\x14\xFC_a\x0E\x90V[\x91a\x05\xA7V[\x14a\x15\xEFW[a\x15\x12`\ta\x10\"V[a\x11!V[a\x15!`\ta\x07\xF7V[a\x154a\x15.`\x02a\x11YV[\x91a\x05\xA7V[\x14a\x15<W[V[a\x15ba\x15[a\x15L`\x01a\x11xV[a\x15V`\na\x11\xA8V[a\x11\xB5V[`\na\x11\xF9V[a\x15l`\na\x11\xA8V[a\x15\xA2\x7F7\xE8\xAD\xD6\x94\xC5\x92mVN\x97\x11`\xF5\x97A\x03\xCB\xBB\xC7\xC9\x07G\xC4\xC6\xF8\x02\x03\x1D5g\xA7\x91a\x15\x99a\x01DV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA1a\x15\xEA_\x80a\x15\xBBa\x15\xB63a\x12%V[a\x121V[a\x15\xC40a\x12=V[1a\x15\xCDa\x01DV[\x90\x81a\x15\xD8\x81a\x12]V[\x03\x92Z\xF1a\x15\xE4a\x12\x85V[Pa\x13\x07V[a\x15:V[a\x16\x15a\x16\x0Ea\x15\xFEBa\x0F@V[a\x16\x08`\x0Ba\x0FvV[\x90a\x0F\x97V[`\x0Ba\x10\x02V[a\x15\x08V[a\x16;\x91P` =\x81\x11a\x16AW[a\x163\x81\x83a\x0C^V[\x81\x01\x90a\rNV[_a\x143V[P=a\x16)V[a\rlV[\x90a\x16X\x92\x91a\x0B<V[V[a\x16ba'\xBBV[a\x16ja\x1BUV[a\x16ra( V[V[` \x7Ftoo many assertions\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x16\xCE`3`@\x92a\x0B|V[a\x16\xD7\x81a\x16tV[\x01\x90V[a\x16\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xC1V[\x90V[\x15a\x16\xFAWV[a\x17\x02a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x18`\x04\x82\x01a\x16\xDBV[\x03\x90\xFD[a\x170a\x17+a\x175\x92a\x0E\x8DV[a\x02uV[a\x02jV[\x90V[a\x17A\x90a\x17\x1CV[\x90V[\x90PQ\x90a\x17Q\x82a\t\xD9V[V[\x90` \x82\x82\x03\x12a\x17lWa\x17i\x91_\x01a\x17DV[\x90V[a\x01NV[a\x17}a\x17\x82\x91a\x03\x03V[a\x04\xC8V[\x90V[a\x17\x8F\x90Ta\x17qV[\x90V[` \x7Finsufficient time has passed\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x17\xEC`<`@\x92a\x0B|V[a\x17\xF5\x81a\x17\x92V[\x01\x90V[a\x18\x0E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\xDFV[\x90V[\x15a\x18\x18WV[a\x18 a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x186`\x04\x82\x01a\x17\xF9V[\x03\x90\xFD[_\x91\x03\x12a\x18DWV[a\x01NV[\x91` a\x18j\x92\x94\x93a\x18c`@\x82\x01\x96_\x83\x01\x90a\x03\x8CV[\x01\x90a\x03\x8CV[V[a\x18{a\x18\x81\x91\x93\x92\x93a\x05\xA7V[\x92a\x05\xA7V[\x91a\x18\x8D\x83\x82\x02a\x05\xA7V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x18\x9CWV[a\x0F\x83V[a\x18\xAC\x90`\x03a\x18lV[\x90V[\x91\x90`\x08a\x18\xCA\x91\x02\x91a\x18\xC4_\x19\x84a\x11\x1DV[\x92a\x11\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x18\xEAa\x18\xE5a\x18\xF2\x93a\x10\x83V[a\x10\x8FV[\x90\x83Ta\x18\xAFV[\x90UV[_\x90V[a\x19\x0C\x91a\x19\x06a\x18\xF6V[\x91a\x18\xD4V[V[_`\x02a\x194\x92a\x19!\x83\x80\x83\x01a\x18\xFAV[a\x19.\x83`\x01\x83\x01a\x18\xFAV[\x01a\x18\xFAV[V[\x90_\x03a\x19HWa\x19F\x90a\x19\x0EV[V[a\x10ZV[[\x81\x81\x10a\x19YWPPV[\x80a\x19f_`\x03\x93a\x196V[\x01a\x19NV[\x90\x91\x82\x81\x10a\x19{W[PPPV[a\x19\x99a\x19\x93a\x19\x8Da\x19\xA4\x95a\x18\xA1V[\x92a\x18\xA1V[\x92a\x07\xFBV[\x91\x82\x01\x91\x01\x90a\x19MV[_\x80\x80a\x19vV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x19\xD5W\x81a\x19\xCAa\x19\xD3\x93a\x07\xF7V[\x90\x82\x81Ua\x19lV[V[a\x0CJV[_a\x19\xE4\x91a\x19\xACV[V[\x90_\x03a\x19\xF8Wa\x19\xF6\x90a\x19\xDAV[V[a\x10ZV[\x90PQ\x90a\x1A\n\x82a\x07\xA2V[V[\x90` \x82\x82\x03\x12a\x1A%Wa\x1A\"\x91_\x01a\x19\xFDV[\x90V[a\x01NV[a\x1A9a\x1A?\x91\x93\x92\x93a\x05\xA7V[\x92a\x05\xA7V[\x82\x03\x91\x82\x11a\x1AJWV[a\x0F\x83V[\x90PQ\x90a\x1A\\\x82a\x08\xDEV[V[\x90` \x82\x82\x03\x12a\x1AwWa\x1At\x91_\x01a\x1AOV[\x90V[a\x01NV[a\x1A\x85\x90a\x03\x89V[\x90RV[\x90`\xC0a\x1B6`\x06a\x1B>\x94a\x1A\xADa\x1A\xA4_\x83\x01Ta\x03\x0BV[_\x87\x01\x90a\x1A|V[a\x1A\xC7a\x1A\xBD`\x01\x83\x01Ta\x03\x0BV[` \x87\x01\x90a\x1A|V[a\x1A\xE1a\x1A\xD7`\x02\x83\x01Ta\x03\x0BV[`@\x87\x01\x90a\x1A|V[a\x1A\xFBa\x1A\xF1`\x03\x83\x01Ta\x03\x0BV[``\x87\x01\x90a\x1A|V[a\x1B\x15a\x1B\x0B`\x04\x83\x01Ta\x03\x0BV[`\x80\x87\x01\x90a\x1A|V[a\x1B/a\x1B%`\x05\x83\x01Ta\x03\x0BV[`\xA0\x87\x01\x90a\x1A|V[\x01Ta\x03\x0BV[\x91\x01\x90a\x1A|V[V[\x91\x90a\x1BS\x90_`\xE0\x85\x01\x94\x01\x90a\x1A\x89V[V[a\x1B|a\x1Bb`\ta\x07\xF7V[a\x1Bua\x1Bo`\x01a\x11xV[\x91a\x05\xA7V[\x11\x15a\x16\xF3V[a\x1B\xA5\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[a\x1B\xBFa\x1B\xB9a\x1B\xB4_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14_\x14a %Wa\x1B\xF4a\x1B\xD2Ba\x0F@V[[a\x1B\xEEa\x1B\xE8a\x1B\xE3`\x0Ba\x17\x85V[a\x05\x0BV[\x91a\x05\x0BV[\x11a\x18\x11V[a\x1C\x1Aa\x1C\x13a\x1C\x03Ba\x0F@V[a\x1C\r`\x0Ba\x0FvV[\x90a\x0F\x97V[`\x0Ba\x10\x02V[a\x1C$`\ta\x07\xF7V[a\x1C6a\x1C0_a\x0E\x90V[\x91a\x05\xA7V[\x11a\x1E\xDFW[a\x1Ce\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\tvV[a\x1C\xAEc\xD5q\x9D\xC2` a\x1C\x98\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\tvV[c\xEC\xA0g\xAD\x90a\x1C\xA6a\x01DV[\x94\x85\x92a\r V[\x82R\x81\x80a\x1C\xBE`\x04\x82\x01a\x01\xFEV[\x03\x91Z\xFA\x92\x83\x15a\x1E\xDAWa\x1D\x03a\x1C\xEEa\x1D\x0E\x95` \x95_\x91a\x1E\xADW[Pa\x1C\xE8`\x01a\x11xV[\x90a\x1A*V[\x92a\x1C\xF7a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\r V[\x83R`\x04\x83\x01a\x05\xB7V[\x03\x91Z\xFA\x80\x15a\x1E\xA8Wa\x1D.\x91_\x91a\x1EzW[P`\x04`\x02\x01a\x10\x9BV[a\x1DW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[a\x1Dqa\x1Dka\x1Df_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14_\x14a\x1D\xD8Wa\x1D\x9Ba\x1D\x8FCa\x1D\x89`\x01a\x11xV[\x90a\x1A*V[@[`\x06`\x02\x01a\x10\x9BV[`\x02a\x1D\xD3\x7F\x91\t+\xCFU\t!\xE3\x81\xE8\x1F\x06i3 SK\x14J~V\x1C_\xC0\x8F\x19@\xD5\x08\xA8\\\xDC\x91a\x1D\xCAa\x01DV[\x91\x82\x91\x82a\x1B@V[\x03\x90\xA1V[a\x1E\x1C` a\x1E\x06\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[c\t\xBDZ`\x90a\x1E\x14a\x01DV[\x93\x84\x92a\r V[\x82R\x81\x80a\x1E,`\x04\x82\x01a\x01\xFEV[\x03\x91Z\xFA\x80\x15a\x1EuWa\x1D\x9B\x91_\x91a\x1EGW[Pa\x1D\x91V[a\x1Eh\x91P` =\x81\x11a\x1EnW[a\x1E`\x81\x83a\x0C^V[\x81\x01\x90a\x1A^V[_a\x1EAV[P=a\x1EVV[a\rlV[a\x1E\x9B\x91P` =\x81\x11a\x1E\xA1W[a\x1E\x93\x81\x83a\x0C^V[\x81\x01\x90a\x1A^V[_a\x1D#V[P=a\x1E\x89V[a\rlV[a\x1E\xCD\x91P\x86=\x81\x11a\x1E\xD3W[a\x1E\xC5\x81\x83a\x0C^V[\x81\x01\x90a\x1A\x0CV[_a\x1C\xDDV[P=a\x1E\xBBV[a\rlV[a\x1F\x03a\x1E\xF9_a\x1E\xF2`\t\x82\x90a\x08\x04V[P\x01a\x03\x1FV[`\x01`\x02\x01a\x10\x9BV[a\x1F(a\x1F\x1E`\x02a\x1F\x17`\t_\x90a\x08\x04V[P\x01a\x03\x1FV[`\x03`\x02\x01a\x10\x9BV[a\x1FBa\x1F8`\x06`\x02\x01a\x03\x1FV[`\x05`\x02\x01a\x10\x9BV[a\x1Fk\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06\x8BV[c\xDA\xEA\xB4\x12a\x1F\x87_a\x1F\x80`\t\x82\x90a\x08\x04V[P\x01a\x03\x1FV[a\x1F\x9F`\x01a\x1F\x98`\t_\x90a\x08\x04V[P\x01a\x03\x1FV[\x92\x80;\x15a  Wa\x1F\xC4_\x80\x94a\x1F\xCFa\x1F\xB8a\x01DV[\x97\x88\x96\x87\x95\x86\x94a\r V[\x84R`\x04\x84\x01a\x18IV[\x03\x92Z\xF1\x80\x15a \x1BWa\x1F\xEFW[Pa\x1F\xEA_`\ta\x19\xE6V[a\x1C<V[a \x0E\x90_=\x81\x11a \x14W[a \x06\x81\x83a\x0C^V[\x81\x01\x90a\x18:V[_a\x1F\xDEV[P=a\x1F\xFCV[a\rlV[a\r\x1CV[a i` a S\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[c\xB8\x07w\xEA\x90a aa\x01DV[\x93\x84\x92a\r V[\x82R\x81\x80a y`\x04\x82\x01a\x01\xFEV[\x03\x91Z\xFA\x80\x15a \xC2Wa\x1B\xF4\x91_\x91a \x94W[Pa\x1B\xD3V[a \xB5\x91P` =\x81\x11a \xBBW[a \xAD\x81\x83a\x0C^V[\x81\x01\x90a\x17SV[_a \x8EV[P=a \xA3V[a\rlV[a \xCFa\x16ZV[V[a \xD9a*XV[a \xE1a \xE3V[V[a \xF4a \xEF_a\x178V[a*\xF0V[V[a \xFEa \xD1V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a!\x1Ba! \x91a\x03\x03V[a!\x04V[\x90V[a!-\x90Ta!\x0FV[\x90V[a!8a!\0V[Pa!B_a!#V[\x90V[a!V\x90a!Qa*XV[a!XV[V[a!i\x90a!da'\xBBV[a\"\xE0V[a!qa( V[V[_\x7Fchallenge does not exist\0\0\0\0\0\0\0\0\x91\x01RV[a!\xA7`\x18` \x92a\x0B|V[a!\xB0\x81a!sV[\x01\x90V[a!\xC9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra!\x9AV[\x90V[\x15a!\xD3WV[a!\xDBa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a!\xF1`\x04\x82\x01a!\xB4V[\x03\x90\xFD[a\"\ta\"\x04a\"\x0E\x92a\x0E\x8DV[a\x02uV[a\x05\x0BV[\x90V[Pa\" \x90` \x81\x01\x90a\x08\xF2V[\x90V[\x90`@a\"ha\"p\x93a\"Ea\"<_\x83\x01\x83a\"\x11V[_\x86\x01\x90a\x1A|V[a\"_a\"U` \x83\x01\x83a\"\x11V[` \x86\x01\x90a\x1A|V[\x82\x81\x01\x90a\"\x11V[\x91\x01\x90a\x1A|V[V[\x91\x90a\"\x85\x90_``\x85\x01\x94\x01\x90a\"#V[V[_\x7Fassertion not found\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\"\xBB`\x13` \x92a\x0B|V[a\"\xC4\x81a\"\x87V[\x01\x90V[a\"\xDD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\"\xAEV[\x90V[a#\x06a\"\xED`\ta\x07\xF7V[a#\0a\"\xFA`\x01a\x11xV[\x91a\x05\xA7V[\x11a!\xCCV[a#\x0F\x81a(_V[\x90a#\x19_a\x0E\x90V[[\x80a#6a#0a#+`\ta\x07\xF7V[a\x05\xA7V[\x91a\x05\xA7V[\x10\x15a#\xF6W\x82a#ka#ea#`a#[a#U`\t\x87\x90a\x08\x04V[Pa\x0E\xBBV[a)\xEDV[a\x03\x89V[\x91a\x03\x89V[\x14a#~Wa#y\x90a\x0E\xACV[a#\x1AV[P\x90Pa#\x8C_`\ta\x19\xE6V[a#\xA0a#\x99`\ta\x10\"V[\x82\x90a\x11!V[a#\xB3a#\xAC_a!\xF5V[`\x0Ba\x10\x02V[a#\xBBa \xC7V[a#\xF1\x7F\xE4.\xAF\x077\xE2G\x8A_Z\xED:\x06\x10\xAE{\t\xA2|\xBA\xC9\xADj\\\xC4\xD6\x8Fx\xAF\xD1B[\x91a#\xE8a\x01DV[\x91\x82\x91\x82a\"rV[\x03\x90\xA1V[a#\xFEa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a$\x14`\x04\x82\x01a\"\xC8V[\x03\x90\xFD[a$!\x90a!EV[V[a$4\x90a$/a*XV[a$\xDEV[V[` \x7Fassertions are pending\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot update config hash while _\x82\x01R\x01RV[a$\x90`6`@\x92a\x0B|V[a$\x99\x81a$6V[\x01\x90V[a$\xB2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra$\x83V[\x90V[\x15a$\xBCWV[a$\xC4a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a$\xDA`\x04\x82\x01a$\x9DV[\x03\x90\xFD[a%\x03a$\xEB`\ta\x07\xF7V[a$\xFDa$\xF7_a\x0E\x90V[\x91a\x05\xA7V[\x14a$\xB5V[a%\x10\x81`\x02\x80\x01a\x10\x9BV[a%\x1D`\x03`\x02\x01a\x03\x1FV[\x7F\xB9\xEB \xB3/\xAC\x96X\x84\xCBX2a\x02%|\xAE`E\x04\xF0\xA3l\xD1\0\x8A2\x84Z\xD5\xC2\x9B\x91a%Sa%Ja\x01DV[\x92\x83\x92\x83a\x18IV[\x03\x90\xA1V[a%a\x90a$#V[V[a%t\x90a%oa*XV[a&iV[V[` \x7Fhile assertion is pending\0\0\0\0\0\0\0\x91\x7Fcannot update challenge window w_\x82\x01R\x01RV[a%\xD0`9`@\x92a\x0B|V[a%\xD9\x81a%vV[\x01\x90V[a%\xF2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra%\xC3V[\x90V[\x15a%\xFCWV[a&\x04a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a&\x1A`\x04\x82\x01a%\xDDV[\x03\x90\xFD[`@\x1B\x90V[\x90a&?o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x91a&\x1EV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a&^a&Ya&e\x92a\x0F\xE3V[a\x0F\xFFV[\x82Ta&$V[\x90UV[a&\x99\x90a&\x92a&z`\ta\x07\xF7V[a&\x8Ca&\x86_a\x0E\x90V[\x91a\x05\xA7V[\x14a%\xF5V[`\x0Ba&IV[V[a&\xA4\x90a%cV[V[a&\xB7\x90a&\xB2a*XV[a&\xB9V[V[a&\xDEa&\xC6`\ta\x07\xF7V[a&\xD8a&\xD2_a\x0E\x90V[\x91a\x05\xA7V[\x14a$\xB5V[a&\xEB\x81_`\x02\x01a\x10\x9BV[a&\xF8`\x01`\x02\x01a\x03\x1FV[\x7F\xC9\x85\xBC\xCB\xD0\xC9\x0E\x19\x7FJss\x02\n3\xBAo\xF8d\xD09\x9F\xD7\xD6\\\\|2\xFF\xB0\x15\xEC\x91a'.a'%a\x01DV[\x92\x83\x92\x83a\x18IV[\x03\x90\xA1V[a'<\x90a&\xA6V[V[a'O\x90a'Ja*XV[a'QV[V[\x80a'la'fa'a_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14a'|Wa'z\x90a*\xF0V[V[a'\x9Fa'\x88_a\x178V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x07\x07V[\x03\x90\xFD[a'\xAC\x90a'>V[V[a'\xB8`\x02a\x11YV[\x90V[a'\xC5`\x01a\x11\xA8V[a'\xDEa'\xD8a'\xD3a'\xAEV[a\x05\xA7V[\x91a\x05\xA7V[\x14a'\xF7Wa'\xF5a'\xEEa'\xAEV[`\x01a\x11\xF9V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a(\x0F`\x04\x82\x01a\x01\xFEV[\x03\x90\xFD[a(\x1D`\x01a\x11xV[\x90V[a(2a(+a(\x13V[`\x01a\x11\xF9V[V[` \x93\x92a(S\x85\x83a(K\x82\x95a([\x97a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x90V[a(ga\x18\xF6V[Pa(\xB4a(v_\x83\x01a\r\xFEV[a(\xA5a(\x91`@a(\x8A` \x87\x01a\r\xFEV[\x95\x01a\r\xFEV[a(\x99a\x01DV[\x94\x85\x93` \x85\x01a(4V[` \x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a(\xC6a(\xC0\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x90V[\x94a)\x18` \x80\x99\x98\x95\x96a)\x10\x82\x80\x99a)\x08\x82a) \x9Aa)\0a)(\x9F\x80a(\xF8\x85\x9E\x92\x86\x93a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x90V[a)4a\x18\xF6V[Pa)\xB5a)C_\x83\x01a\x03\x1FV[a)\xA6a)R`\x01\x85\x01a\x03\x1FV[\x93a)_`\x02\x82\x01a\x03\x1FV[\x90a)l`\x03\x82\x01a\x03\x1FV[a)x`\x04\x83\x01a\x03\x1FV[\x90a)\x91`\x06a)\x8A`\x05\x86\x01a\x03\x1FV[\x94\x01a\x03\x1FV[\x93a)\x9Aa\x01DV[\x98\x89\x97` \x89\x01a(\xCAV[` \x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a)\xC7a)\xC1\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x90V[a)\xEA\x91a)\xE1\x91a)\xDBa!\0V[Pa+sV[\x90\x92\x91\x92a,pV[\x90V[a)\xF5a\x18\xF6V[Pa*Ba*\x04_\x83\x01a\x03\x1FV[a*3a*\x1F`\x02a*\x18`\x01\x87\x01a\x03\x1FV[\x95\x01a\x03\x1FV[a*'a\x01DV[\x94\x85\x93` \x85\x01a(4V[` \x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a*Ta*N\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x90V[a*`a!0V[a*ya*sa*na-AV[a\x06\xEEV[\x91a\x06\xEEV[\x03a*\x80WV[a*\xA2a*\x8Ba-AV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x07\x07V[\x03\x90\xFD[\x90a*\xB7`\x01\x80`\xA0\x1B\x03\x91a\x0F\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a*\xCA\x90a\x02\x94V[\x90V[\x90V[\x90a*\xE5a*\xE0a*\xEC\x92a*\xC1V[a*\xCDV[\x82Ta*\xA6V[\x90UV[a*\xF9_a!#V[a+\x03\x82_a*\xD0V[\x90a+7a+1\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a*\xC1V[\x91a*\xC1V[\x91a+@a\x01DV[\x80a+J\x81a\x01\xFEV[\x03\x90\xA3V[_\x90V[a+ga+ba+l\x92a\x05\xA7V[a\x0F\xC1V[a\x03\x89V[\x90V[_\x90V[\x91\x90\x91a+~a!\0V[Pa+\x87a+OV[Pa+\x90a\x18\xF6V[Pa+\x9A\x83a\x0C\x8DV[a+\xADa+\xA7`Aa\x0B`V[\x91a\x05\xA7V[\x14_\x14a+\xF4Wa+\xED\x91\x92a+\xC1a\x18\xF6V[Pa+\xCAa\x18\xF6V[Pa+\xD3a+oV[P` \x81\x01Q```@\x83\x01Q\x92\x01Q_\x1A\x90\x91\x92a-\xDAV[\x91\x92\x90\x91\x90V[Pa+\xFE_a\x178V[\x90a,\x12a,\r`\x02\x94a\x0C\x8DV[a+SV[\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15a,6WV[a,\x18V[\x90a,E\x82a,,V[V[\x91\x90a,Z\x90_` \x85\x01\x94\x01\x90a\x03\x8CV[V[a,ha,m\x91a\x03\x03V[a\x11\xDAV[\x90V[\x80a,\x83a,}_a,;V[\x91a,;V[\x14_\x14a,\x8EWPPV[\x80a,\xA2a,\x9C`\x01a,;V[\x91a,;V[\x14_\x14a,\xC5W_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80a,\xC1`\x04\x82\x01a\x01\xFEV[\x03\x90\xFD[\x80a,\xD9a,\xD3`\x02a,;V[\x91a,;V[\x14_\x14a-\x07Wa-\x03a,\xEC\x83a,\\V[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[a-\x1Aa-\x14`\x03a,;V[\x91a,;V[\x14a-\"WPV[a-=\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a,GV[\x03\x90\xFD[a-Ia!\0V[P3\x90V[\x90V[a-ea-`a-j\x92a-NV[a\x02uV[a\x05\xA7V[\x90V[`\xFF\x16\x90V[a-|\x90a-mV[\x90RV[a-\xB5a-\xBC\x94a-\xAB``\x94\x98\x97\x95a-\xA1`\x80\x86\x01\x9A_\x87\x01\x90a\x03\x8CV[` \x85\x01\x90a-sV[`@\x83\x01\x90a\x03\x8CV[\x01\x90a\x03\x8CV[V[a-\xD2a-\xCDa-\xD7\x92a\x0E\x8DV[a\x0F\xC1V[a\x03\x89V[\x90V[\x93\x92\x93a-\xE5a!\0V[Pa-\xEEa+OV[Pa-\xF7a\x18\xF6V[Pa.\x01\x85a,\\V[a.3a.-\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a-QV[\x91a\x05\xA7V[\x11a.\xC0W\x90a.V` \x94\x95_\x94\x93\x92\x93a.Ma\x01DV[\x94\x85\x94\x85a-\x80V[\x83\x80R\x03\x90`\x01Z\xFA\x15a.\xBBWa.n_Qa\x0F\xC1V[\x80a.\x89a.\x83a.~_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14a.\x9FW_\x91a.\x99_a-\xBEV[\x91\x92\x91\x90V[Pa.\xA9_a\x178V[`\x01\x91a.\xB5_a-\xBEV[\x91\x92\x91\x90V[a\rlV[PPPa.\xCC_a\x178V[\x90`\x03\x92\x91\x92\x91\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b36610b3857005b61001f5f3561013e565b80630dbfd1fa146101395780633a009a06146101345780633ceaae7d1461012f578063420caf3a1461012a5780634bd167c914610125578063697b5e62146101205780636c4c20601461011b578063715018a61461011657806380959721146101115780638da5cb5b1461010c5780638fed55a314610107578063a56ec6cd14610102578063c3f2dbd3146100fd578063e78cea92146100f8578063eb60553a146100f3578063ee1c28b8146100ee578063f223055c146100e95763f2fde38b0361000e57610b05565b610a91565b610a5c565b610a1a565b6109a4565b61091f565b6108a6565b61076f565b61071c565b6106b9565b610634565b610601565b6105cc565b61053a565b61048f565b610401565b6102ce565b610203565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b908160609103126101685790565b610156565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101b35781359167ffffffffffffffff83116101ae5760200192600183028401116101a957565b610175565b610171565b61016d565b9190916080818403126101f9576101d1835f830161015a565b92606082013567ffffffffffffffff81116101f4576101f09201610179565b9091565b610152565b61014e565b5f0190565b346102325761021c6102163660046101b8565b9161164d565b610224610144565b8061022e816101fe565b0390f35b61014a565b5f91031261024157565b61014e565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b90565b61028c6102876102919261026a565b610275565b61026a565b90565b61029d90610278565b90565b6102a990610294565b90565b6102b5906102a0565b9052565b91906102cc905f602085019401906102ac565b565b346102fe576102de366004610237565b6102fa6102e9610246565b6102f1610144565b918291826102b9565b0390f35b61014a565b5f1c90565b90565b61031761031c91610303565b610308565b90565b610329905461030b565b90565b60026103395f820161031f565b916103466001830161031f565b916103536002820161031f565b916103606003830161031f565b9161036d6004820161031f565b91610386600661037f6005850161031f565b930161031f565b90565b90565b61039590610389565b9052565b949290979695939160e08601985f87016103b29161038c565b602086016103bf9161038c565b604085016103cc9161038c565b606084016103d99161038c565b608083016103e69161038c565b60a082016103f39161038c565b60c0016103ff9161038c565b565b3461043857610411366004610237565b61043461041c61032c565b9361042b979597939193610144565b97889788610399565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b61046a90610294565b90565b61047690610461565b9052565b919061048d905f6020850194019061046d565b565b346104bf5761049f366004610237565b6104bb6104aa61043d565b6104b2610144565b9182918261047a565b0390f35b61014a565b1c90565b67ffffffffffffffff1690565b6104e59060086104ea93026104c4565b6104c8565b90565b906104f891546104d5565b90565b610508600b6008906104ed565b90565b67ffffffffffffffff1690565b6105219061050b565b9052565b9190610538905f60208501940190610518565b565b3461056a5761054a366004610237565b6105666105556104fb565b61055d610144565b91829182610525565b0390f35b61014a565b90565b61058290600861058793026104c4565b61056f565b90565b906105959154610572565b90565b6105a4600a5f9061058a565b90565b90565b6105b3906105a7565b9052565b91906105ca905f602085019401906105aa565b565b346105fc576105dc366004610237565b6105f86105e7610598565b6105ef610144565b918291826105b7565b0390f35b61014a565b3461062f57610611366004610237565b6106196120c7565b610621610144565b8061062b816101fe565b0390f35b61014a565b3461066257610644366004610237565b61064c6120f6565b610654610144565b8061065e816101fe565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b61069490610294565b90565b6106a09061068b565b9052565b91906106b7905f60208501940190610697565b565b346106e9576106c9366004610237565b6106e56106d4610667565b6106dc610144565b918291826106a4565b0390f35b61014a565b6106f79061026a565b90565b610703906106ee565b9052565b919061071a905f602085019401906106fa565b565b3461074c5761072c366004610237565b610748610737612130565b61073f610144565b91829182610707565b0390f35b61014a565b9060608282031261076a57610767915f0161015a565b90565b61014e565b3461079d57610787610782366004610751565b612418565b61078f610144565b80610799816101fe565b0390f35b61014a565b6107ab816105a7565b036107b257565b5f80fd5b905035906107c3826107a2565b565b906020828203126107de576107db915f016107b6565b90565b61014e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61080d816107f7565b8210156108275761081f6003916107fb565b910201905f90565b6107e3565b600990610838826107f7565b8110156108705761084891610804565b506108545f820161031f565b9161086d60026108666001850161031f565b930161031f565b90565b5f80fd5b60409061089d6108a4949695939661089360608401985f85019061038c565b602083019061038c565b019061038c565b565b346108d9576108d56108c16108bc3660046107c5565b61082c565b6108cc939193610144565b93849384610874565b0390f35b61014a565b6108e781610389565b036108ee57565b5f80fd5b905035906108ff826108de565b565b9060208282031261091a57610917915f016108f2565b90565b61014e565b3461094d57610937610932366004610901565b612558565b61093f610144565b80610949816101fe565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b61097f90610294565b90565b61098b90610976565b9052565b91906109a2905f60208501940190610982565b565b346109d4576109b4366004610237565b6109d06109bf610952565b6109c7610144565b9182918261098f565b0390f35b61014a565b6109e28161050b565b036109e957565b5f80fd5b905035906109fa826109d9565b565b90602082820312610a1557610a12915f016109ed565b90565b61014e565b34610a4857610a32610a2d3660046109fc565b61269b565b610a3a610144565b80610a44816101fe565b0390f35b61014a565b610a59600b5f906104ed565b90565b34610a8c57610a6c366004610237565b610a88610a77610a4d565b610a7f610144565b91829182610525565b0390f35b61014a565b34610abf57610aa9610aa4366004610901565b612733565b610ab1610144565b80610abb816101fe565b0390f35b61014a565b610acd816106ee565b03610ad457565b5f80fd5b90503590610ae582610ac4565b565b90602082820312610b0057610afd915f01610ad8565b90565b61014e565b34610b3357610b1d610b18366004610ae7565b6127a3565b610b25610144565b80610b2f816101fe565b0390f35b61014a565b5f80fd5b90610b4f9291610b4a6127bb565b611330565b610b57612820565b565b5090565b90565b610b74610b6f610b7992610b5d565b610275565b6105a7565b90565b60209181520190565b5f7f696e76616c6964207369676e6174757265206c656e6774680000000000000000910152565b610bb96018602092610b7c565b610bc281610b85565b0190565b610bdb9060208101905f818303910152610bac565b90565b15610be557565b610bed610144565b62461bcd60e51b815280610c0360048201610bc6565b0390fd5b90565b90565b610c19610c1e91610389565b610c0a565b9052565b602081610c34610c3c93839695610c0d565b018092610c0d565b0190565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610c6890610c40565b810190811067ffffffffffffffff821117610c8257604052565b610c4a565b60200190565b5190565b5f80fd5b90610ca8610ca1610144565b9283610c5e565b565b67ffffffffffffffff8111610cc857610cc4602091610c40565b0190565b610c4a565b90825f939282370152565b90929192610ced610ce882610caa565b610c95565b93818552602085019082840111610d0957610d0792610ccd565b565b610c91565b610d19913691610cd8565b90565b5f80fd5b60e01b90565b151590565b610d3481610d26565b03610d3b57565b5f80fd5b90505190610d4c82610d2b565b565b90602082820312610d6757610d64915f01610d3f565b90565b61014e565b610d74610144565b3d5f823e3d90fd5b5f7f696e76616c696420746565207369676e61747572650000000000000000000000910152565b610db06015602092610b7c565b610db981610d7c565b0190565b610dd29060208101905f818303910152610da3565b90565b15610ddc57565b610de4610144565b62461bcd60e51b815280610dfa60048201610dbd565b0390fd5b35610e08816108de565b90565b5f7f617070636861696e20626c6f636b206861736820756e6368616e676564000000910152565b610e3f601d602092610b7c565b610e4881610e0b565b0190565b610e619060208101905f818303910152610e32565b90565b15610e6b57565b610e73610144565b62461bcd60e51b815280610e8960048201610e4c565b0390fd5b90565b610ea4610e9f610ea992610e8d565b610275565b6105a7565b90565b6001610eb891016105a7565b90565b90565b5f7f617373657274696f6e20616c7265616479206578697374730000000000000000910152565b610ef26018602092610b7c565b610efb81610ebe565b0190565b610f149060208101905f818303910152610ee5565b90565b15610f1e57565b610f26610144565b62461bcd60e51b815280610f3c60048201610eff565b0390fd5b610f54610f4f610f59926105a7565b610275565b61050b565b90565b60401c90565b610f6e610f7391610f5c565b6104c8565b90565b610f809054610f62565b90565b634e487b7160e01b5f52601160045260245ffd5b610fa3610fa99161050b565b9161050b565b019067ffffffffffffffff8211610fbc57565b610f83565b5f1b90565b90610fd967ffffffffffffffff91610fc1565b9181191691161790565b610ff7610ff2610ffc9261050b565b610275565b61050b565b90565b90565b9061101761101261101e92610fe3565b610fff565b8254610fc6565b9055565b90565b5f5260205f2090565b5490565b61103b8161102e565b8210156110555761104d600391611025565b910201905f90565b6107e3565b634e487b7160e01b5f525f60045260245ffd5b906110795f1991610fc1565b9181191691161790565b61108c90610389565b90565b61109890610303565b90565b906110b06110ab6110b792611083565b61108f565b825461106d565b9055565b906110ff60406002611105946110de5f82016110d85f8801610dfe565b9061109b565b6110f7600182016110f160208801610dfe565b9061109b565b019201610dfe565b9061109b565b565b919061111857611116916110bb565b565b61105a565b1b90565b9081549168010000000000000000831015611151578261114991600161114f95018155611032565b90611107565b565b610c4a565b90565b61116d61116861117292611156565b610275565b6105a7565b90565b90565b61118c61118761119192611175565b610275565b6105a7565b90565b6111a06111a591610303565b61056f565b90565b6111b29054611194565b90565b6111c46111ca919392936105a7565b926105a7565b82018092116111d557565b610f83565b6111ee6111e96111f3926105a7565b610275565b6105a7565b90565b90565b9061120e611209611215926111da565b6111f6565b825461106d565b9055565b61122290610278565b90565b61122e90611219565b90565b61123a90610294565b90565b61124690610294565b90565b905090565b6112595f8092611249565b0190565b6112669061124e565b90565b9061127b61127683610caa565b610c95565b918252565b606090565b3d5f146112a0576112953d611269565b903d5f602084013e5b565b6112a8611280565b9061129e565b5f7f7061796d656e74206661696c6564000000000000000000000000000000000000910152565b6112e2600e602092610b7c565b6112eb816112ae565b0190565b6113049060208101905f8183039101526112d5565b90565b1561130e57565b611316610144565b62461bcd60e51b81528061132c600482016112ef565b0390fd5b919290602061141e91611360611347828890610b59565b61135a6113546041610b60565b916105a7565b14610bde565b6113698561285f565b956114136113fe61138261137d6002610c07565b61292c565b6113ab8a9161139d611392610144565b9384928a8401610c22565b888201810382520382610c5e565b6113bd6113b782610c8d565b91610c87565b20936113f86113eb7f00000000000000000000000000000000000000000000000000000000000000006102a0565b94637217efcd9692610d0e565b906129cb565b92611407610144565b95869485938493610d20565b835260048301610707565b03915afa801561164857611439915f9161161a575b50610dd5565b61146c6114475f8401610dfe565b61146561145f61145a600160020161031f565b610389565b91610389565b1415610e64565b6114755f610e90565b5b8061149261148c61148760096107f7565b6105a7565b916105a7565b10156114df576114da906114d5856114ce6114c86114c36114be6114b860098890610804565b50610ebb565b6129ed565b610389565b91610389565b1415610f17565b610eac565b611476565b509150611517906114f060096107f7565b6115026114fc5f610e90565b916105a7565b146115ef575b6115126009611022565b611121565b61152160096107f7565b61153461152e6002611159565b916105a7565b1461153c575b565b61156261155b61154c6001611178565b611556600a6111a8565b6111b5565b600a6111f9565b61156c600a6111a8565b6115a27f37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a791611599610144565b918291826105b7565b0390a16115ea5f806115bb6115b633611225565b611231565b6115c43061123d565b316115cd610144565b90816115d88161125d565b03925af16115e4611285565b50611307565b61153a565b61161561160e6115fe42610f40565b611608600b610f76565b90610f97565b600b611002565b611508565b61163b915060203d8111611641575b6116338183610c5e565b810190610d4e565b5f611433565b503d611629565b610d6c565b906116589291610b3c565b565b6116626127bb565b61166a611b55565b611672612820565b565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b6116ce6033604092610b7c565b6116d781611674565b0190565b6116f09060208101905f8183039101526116c1565b90565b156116fa57565b611702610144565b62461bcd60e51b815280611718600482016116db565b0390fd5b61173061172b61173592610e8d565b610275565b61026a565b90565b6117419061171c565b90565b90505190611751826109d9565b565b9060208282031261176c57611769915f01611744565b90565b61014e565b61177d61178291610303565b6104c8565b90565b61178f9054611771565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b6117ec603c604092610b7c565b6117f581611792565b0190565b61180e9060208101905f8183039101526117df565b90565b1561181857565b611820610144565b62461bcd60e51b815280611836600482016117f9565b0390fd5b5f91031261184457565b61014e565b91602061186a92949361186360408201965f83019061038c565b019061038c565b565b61187b611881919392936105a7565b926105a7565b9161188d8382026105a7565b92818404149015171561189c57565b610f83565b6118ac90600361186c565b90565b919060086118ca9102916118c45f198461111d565b9261111d565b9181191691161790565b91906118ea6118e56118f293611083565b61108f565b9083546118af565b9055565b5f90565b61190c916119066118f6565b916118d4565b565b5f600261193492611921838083016118fa565b61192e83600183016118fa565b016118fa565b565b905f03611948576119469061190e565b565b61105a565b5b818110611959575050565b806119665f600393611936565b0161194e565b909182811061197b575b505050565b61199961199361198d6119a4956118a1565b926118a1565b926107fb565b91820191019061194d565b5f8080611976565b906801000000000000000081116119d557816119ca6119d3936107f7565b9082815561196c565b565b610c4a565b5f6119e4916119ac565b565b905f036119f8576119f6906119da565b565b61105a565b90505190611a0a826107a2565b565b90602082820312611a2557611a22915f016119fd565b90565b61014e565b611a39611a3f919392936105a7565b926105a7565b8203918211611a4a57565b610f83565b90505190611a5c826108de565b565b90602082820312611a7757611a74915f01611a4f565b90565b61014e565b611a8590610389565b9052565b9060c0611b366006611b3e94611aad611aa45f83015461030b565b5f870190611a7c565b611ac7611abd600183015461030b565b6020870190611a7c565b611ae1611ad7600283015461030b565b6040870190611a7c565b611afb611af1600383015461030b565b6060870190611a7c565b611b15611b0b600483015461030b565b6080870190611a7c565b611b2f611b25600583015461030b565b60a0870190611a7c565b015461030b565b910190611a7c565b565b9190611b53905f60e08501940190611a89565b565b611b7c611b6260096107f7565b611b75611b6f6001611178565b916105a7565b11156116f3565b611ba57f0000000000000000000000000000000000000000000000000000000000000000610461565b611bbf611bb9611bb45f611738565b6106ee565b916106ee565b145f1461202557611bf4611bd242610f40565b5b611bee611be8611be3600b611785565b61050b565b9161050b565b11611811565b611c1a611c13611c0342610f40565b611c0d600b610f76565b90610f97565b600b611002565b611c2460096107f7565b611c36611c305f610e90565b916105a7565b11611edf575b611c657f0000000000000000000000000000000000000000000000000000000000000000610976565b611cae63d5719dc26020611c987f0000000000000000000000000000000000000000000000000000000000000000610976565b63eca067ad90611ca6610144565b948592610d20565b82528180611cbe600482016101fe565b03915afa928315611eda57611d03611cee611d0e956020955f91611ead575b50611ce86001611178565b90611a2a565b92611cf7610144565b95869485938493610d20565b8352600483016105b7565b03915afa8015611ea857611d2e915f91611e7a575b50600460020161109b565b611d577f0000000000000000000000000000000000000000000000000000000000000000610461565b611d71611d6b611d665f611738565b6106ee565b916106ee565b145f14611dd857611d9b611d8f43611d896001611178565b90611a2a565b405b600660020161109b565b6002611dd37f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc91611dca610144565b91829182611b40565b0390a1565b611e1c6020611e067f0000000000000000000000000000000000000000000000000000000000000000610461565b6309bd5a6090611e14610144565b938492610d20565b82528180611e2c600482016101fe565b03915afa8015611e7557611d9b915f91611e47575b50611d91565b611e68915060203d8111611e6e575b611e608183610c5e565b810190611a5e565b5f611e41565b503d611e56565b610d6c565b611e9b915060203d8111611ea1575b611e938183610c5e565b810190611a5e565b5f611d23565b503d611e89565b610d6c565b611ecd9150863d8111611ed3575b611ec58183610c5e565b810190611a0c565b5f611cdd565b503d611ebb565b610d6c565b611f03611ef95f611ef260098290610804565b500161031f565b600160020161109b565b611f28611f1e6002611f1760095f90610804565b500161031f565b600360020161109b565b611f42611f38600660020161031f565b600560020161109b565b611f6b7f000000000000000000000000000000000000000000000000000000000000000061068b565b63daeab412611f875f611f8060098290610804565b500161031f565b611f9f6001611f9860095f90610804565b500161031f565b92803b1561202057611fc45f8094611fcf611fb8610144565b97889687958694610d20565b845260048401611849565b03925af1801561201b57611fef575b50611fea5f60096119e6565b611c3c565b61200e905f3d8111612014575b6120068183610c5e565b81019061183a565b5f611fde565b503d611ffc565b610d6c565b610d1c565b61206960206120537f0000000000000000000000000000000000000000000000000000000000000000610461565b63b80777ea90612061610144565b938492610d20565b82528180612079600482016101fe565b03915afa80156120c257611bf4915f91612094575b50611bd3565b6120b5915060203d81116120bb575b6120ad8183610c5e565b810190611753565b5f61208e565b503d6120a3565b610d6c565b6120cf61165a565b565b6120d9612a58565b6120e16120e3565b565b6120f46120ef5f611738565b612af0565b565b6120fe6120d1565b565b5f90565b60018060a01b031690565b61211b61212091610303565b612104565b90565b61212d905461210f565b90565b612138612100565b506121425f612123565b90565b61215690612151612a58565b612158565b565b612169906121646127bb565b6122e0565b612171612820565b565b5f7f6368616c6c656e676520646f6573206e6f742065786973740000000000000000910152565b6121a76018602092610b7c565b6121b081612173565b0190565b6121c99060208101905f81830391015261219a565b90565b156121d357565b6121db610144565b62461bcd60e51b8152806121f1600482016121b4565b0390fd5b61220961220461220e92610e8d565b610275565b61050b565b90565b506122209060208101906108f2565b90565b9060406122686122709361224561223c5f830183612211565b5f860190611a7c565b61225f6122556020830183612211565b6020860190611a7c565b82810190612211565b910190611a7c565b565b9190612285905f60608501940190612223565b565b5f7f617373657274696f6e206e6f7420666f756e6400000000000000000000000000910152565b6122bb6013602092610b7c565b6122c481612287565b0190565b6122dd9060208101905f8183039101526122ae565b90565b6123066122ed60096107f7565b6123006122fa6001611178565b916105a7565b116121cc565b61230f8161285f565b906123195f610e90565b5b8061233661233061232b60096107f7565b6105a7565b916105a7565b10156123f6578261236b61236561236061235b61235560098790610804565b50610ebb565b6129ed565b610389565b91610389565b1461237e5761237990610eac565b61231a565b50905061238c5f60096119e6565b6123a06123996009611022565b8290611121565b6123b36123ac5f6121f5565b600b611002565b6123bb6120c7565b6123f17fe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b916123e8610144565b91829182612272565b0390a1565b6123fe610144565b62461bcd60e51b815280612414600482016122c8565b0390fd5b61242190612145565b565b6124349061242f612a58565b6124de565b565b60207f617373657274696f6e73206172652070656e64696e6700000000000000000000917f63616e6e6f742075706461746520636f6e6669672068617368207768696c65205f8201520152565b6124906036604092610b7c565b61249981612436565b0190565b6124b29060208101905f818303910152612483565b90565b156124bc57565b6124c4610144565b62461bcd60e51b8152806124da6004820161249d565b0390fd5b6125036124eb60096107f7565b6124fd6124f75f610e90565b916105a7565b146124b5565b612510816002800161109b565b61251d600360020161031f565b7fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b9161255361254a610144565b92839283611849565b0390a1565b61256190612423565b565b6125749061256f612a58565b612669565b565b60207f68696c6520617373657274696f6e2069732070656e64696e6700000000000000917f63616e6e6f7420757064617465206368616c6c656e67652077696e646f7720775f8201520152565b6125d06039604092610b7c565b6125d981612576565b0190565b6125f29060208101905f8183039101526125c3565b90565b156125fc57565b612604610144565b62461bcd60e51b81528061261a600482016125dd565b0390fd5b60401b90565b9061263f6fffffffffffffffff00000000000000009161261e565b9181191691161790565b9061265e61265961266592610fe3565b610fff565b8254612624565b9055565b6126999061269261267a60096107f7565b61268c6126865f610e90565b916105a7565b146125f5565b600b612649565b565b6126a490612563565b565b6126b7906126b2612a58565b6126b9565b565b6126de6126c660096107f7565b6126d86126d25f610e90565b916105a7565b146124b5565b6126eb815f60020161109b565b6126f8600160020161031f565b7fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec9161272e612725610144565b92839283611849565b0390a1565b61273c906126a6565b565b61274f9061274a612a58565b612751565b565b8061276c6127666127615f611738565b6106ee565b916106ee565b1461277c5761277a90612af0565b565b61279f6127885f611738565b5f918291631e4fbdf760e01b835260048301610707565b0390fd5b6127ac9061273e565b565b6127b86002611159565b90565b6127c560016111a8565b6127de6127d86127d36127ae565b6105a7565b916105a7565b146127f7576127f56127ee6127ae565b60016111f9565b565b5f633ee5aeb560e01b81528061280f600482016101fe565b0390fd5b61281d6001611178565b90565b61283261282b612813565b60016111f9565b565b60209392612853858361284b829561285b97610c0d565b018092610c0d565b018092610c0d565b0190565b6128676118f6565b506128b46128765f8301610dfe565b6128a5612891604061288a60208701610dfe565b9501610dfe565b612899610144565b94859360208501612834565b60208201810382520382610c5e565b6128c66128c082610c8d565b91610c87565b2090565b9461291860208099989596612910828099612908826129209a6129006129289f806128f8859e928693610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b018092610c0d565b0190565b6129346118f6565b506129b56129435f830161031f565b6129a66129526001850161031f565b9361295f6002820161031f565b9061296c6003820161031f565b6129786004830161031f565b90612991600661298a6005860161031f565b940161031f565b9361299a610144565b988997602089016128ca565b60208201810382520382610c5e565b6129c76129c182610c8d565b91610c87565b2090565b6129ea916129e1916129db612100565b50612b73565b90929192612c70565b90565b6129f56118f6565b50612a42612a045f830161031f565b612a33612a1f6002612a186001870161031f565b950161031f565b612a27610144565b94859360208501612834565b60208201810382520382610c5e565b612a54612a4e82610c8d565b91610c87565b2090565b612a60612130565b612a79612a73612a6e612d41565b6106ee565b916106ee565b03612a8057565b612aa2612a8b612d41565b5f91829163118cdaa760e01b835260048301610707565b0390fd5b90612ab760018060a01b0391610fc1565b9181191691161790565b612aca90610294565b90565b90565b90612ae5612ae0612aec92612ac1565b612acd565b8254612aa6565b9055565b612af95f612123565b612b03825f612ad0565b90612b37612b317f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093612ac1565b91612ac1565b91612b40610144565b80612b4a816101fe565b0390a3565b5f90565b612b67612b62612b6c926105a7565b610fc1565b610389565b90565b5f90565b919091612b7e612100565b50612b87612b4f565b50612b906118f6565b50612b9a83610c8d565b612bad612ba76041610b60565b916105a7565b145f14612bf457612bed9192612bc16118f6565b50612bca6118f6565b50612bd3612b6f565b506020810151606060408301519201515f1a909192612dda565b9192909190565b50612bfe5f611738565b90612c12612c0d600294610c8d565b612b53565b91929190565b634e487b7160e01b5f52602160045260245ffd5b60041115612c3657565b612c18565b90612c4582612c2c565b565b9190612c5a905f6020850194019061038c565b565b612c68612c6d91610303565b6111da565b90565b80612c83612c7d5f612c3b565b91612c3b565b145f14612c8e575050565b80612ca2612c9c6001612c3b565b91612c3b565b145f14612cc5575f63f645eedf60e01b815280612cc1600482016101fe565b0390fd5b80612cd9612cd36002612c3b565b91612c3b565b145f14612d0757612d03612cec83612c5c565b5f91829163fce698f760e01b8352600483016105b7565b0390fd5b612d1a612d146003612c3b565b91612c3b565b14612d225750565b612d3d905f9182916335e2f38360e21b835260048301612c47565b0390fd5b612d49612100565b503390565b90565b612d65612d60612d6a92612d4e565b610275565b6105a7565b90565b60ff1690565b612d7c90612d6d565b9052565b612db5612dbc94612dab606094989795612da1608086019a5f87019061038c565b6020850190612d73565b604083019061038c565b019061038c565b565b612dd2612dcd612dd792610e8d565b610fc1565b610389565b90565b939293612de5612100565b50612dee612b4f565b50612df76118f6565b50612e0185612c5c565b612e33612e2d7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612d51565b916105a7565b11612ec05790612e56602094955f94939293612e4d610144565b94859485612d80565b838052039060015afa15612ebb57612e6e5f51610fc1565b80612e89612e83612e7e5f611738565b6106ee565b916106ee565b14612e9f575f91612e995f612dbe565b91929190565b50612ea95f611738565b600191612eb55f612dbe565b91929190565b610d6c565b505050612ecc5f611738565b906003929192919056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\x0B8W\0[a\0\x1F_5a\x01>V[\x80c\r\xBF\xD1\xFA\x14a\x019W\x80c:\0\x9A\x06\x14a\x014W\x80c<\xEA\xAE}\x14a\x01/W\x80cB\x0C\xAF:\x14a\x01*W\x80cK\xD1g\xC9\x14a\x01%W\x80ci{^b\x14a\x01 W\x80clL `\x14a\x01\x1BW\x80cqP\x18\xA6\x14a\x01\x16W\x80c\x80\x95\x97!\x14a\x01\x11W\x80c\x8D\xA5\xCB[\x14a\x01\x0CW\x80c\x8F\xEDU\xA3\x14a\x01\x07W\x80c\xA5n\xC6\xCD\x14a\x01\x02W\x80c\xC3\xF2\xDB\xD3\x14a\0\xFDW\x80c\xE7\x8C\xEA\x92\x14a\0\xF8W\x80c\xEB`U:\x14a\0\xF3W\x80c\xEE\x1C(\xB8\x14a\0\xEEW\x80c\xF2#\x05\\\x14a\0\xE9Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x05V[a\n\x91V[a\n\\V[a\n\x1AV[a\t\xA4V[a\t\x1FV[a\x08\xA6V[a\x07oV[a\x07\x1CV[a\x06\xB9V[a\x064V[a\x06\x01V[a\x05\xCCV[a\x05:V[a\x04\x8FV[a\x04\x01V[a\x02\xCEV[a\x02\x03V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x81``\x91\x03\x12a\x01hW\x90V[a\x01VV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xB3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xAEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xA9WV[a\x01uV[a\x01qV[a\x01mV[\x91\x90\x91`\x80\x81\x84\x03\x12a\x01\xF9Wa\x01\xD1\x83_\x83\x01a\x01ZV[\x92``\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xF4Wa\x01\xF0\x92\x01a\x01yV[\x90\x91V[a\x01RV[a\x01NV[_\x01\x90V[4a\x022Wa\x02\x1Ca\x02\x166`\x04a\x01\xB8V[\x91a\x16MV[a\x02$a\x01DV[\x80a\x02.\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[_\x91\x03\x12a\x02AWV[a\x01NV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\x8Ca\x02\x87a\x02\x91\x92a\x02jV[a\x02uV[a\x02jV[\x90V[a\x02\x9D\x90a\x02xV[\x90V[a\x02\xA9\x90a\x02\x94V[\x90V[a\x02\xB5\x90a\x02\xA0V[\x90RV[\x91\x90a\x02\xCC\x90_` \x85\x01\x94\x01\x90a\x02\xACV[V[4a\x02\xFEWa\x02\xDE6`\x04a\x027V[a\x02\xFAa\x02\xE9a\x02FV[a\x02\xF1a\x01DV[\x91\x82\x91\x82a\x02\xB9V[\x03\x90\xF3[a\x01JV[_\x1C\x90V[\x90V[a\x03\x17a\x03\x1C\x91a\x03\x03V[a\x03\x08V[\x90V[a\x03)\x90Ta\x03\x0BV[\x90V[`\x02a\x039_\x82\x01a\x03\x1FV[\x91a\x03F`\x01\x83\x01a\x03\x1FV[\x91a\x03S`\x02\x82\x01a\x03\x1FV[\x91a\x03``\x03\x83\x01a\x03\x1FV[\x91a\x03m`\x04\x82\x01a\x03\x1FV[\x91a\x03\x86`\x06a\x03\x7F`\x05\x85\x01a\x03\x1FV[\x93\x01a\x03\x1FV[\x90V[\x90V[a\x03\x95\x90a\x03\x89V[\x90RV[\x94\x92\x90\x97\x96\x95\x93\x91`\xE0\x86\x01\x98_\x87\x01a\x03\xB2\x91a\x03\x8CV[` \x86\x01a\x03\xBF\x91a\x03\x8CV[`@\x85\x01a\x03\xCC\x91a\x03\x8CV[``\x84\x01a\x03\xD9\x91a\x03\x8CV[`\x80\x83\x01a\x03\xE6\x91a\x03\x8CV[`\xA0\x82\x01a\x03\xF3\x91a\x03\x8CV[`\xC0\x01a\x03\xFF\x91a\x03\x8CV[V[4a\x048Wa\x04\x116`\x04a\x027V[a\x044a\x04\x1Ca\x03,V[\x93a\x04+\x97\x95\x97\x93\x91\x93a\x01DV[\x97\x88\x97\x88a\x03\x99V[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x04j\x90a\x02\x94V[\x90V[a\x04v\x90a\x04aV[\x90RV[\x91\x90a\x04\x8D\x90_` \x85\x01\x94\x01\x90a\x04mV[V[4a\x04\xBFWa\x04\x9F6`\x04a\x027V[a\x04\xBBa\x04\xAAa\x04=V[a\x04\xB2a\x01DV[\x91\x82\x91\x82a\x04zV[\x03\x90\xF3[a\x01JV[\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\xE5\x90`\x08a\x04\xEA\x93\x02a\x04\xC4V[a\x04\xC8V[\x90V[\x90a\x04\xF8\x91Ta\x04\xD5V[\x90V[a\x05\x08`\x0B`\x08\x90a\x04\xEDV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x05!\x90a\x05\x0BV[\x90RV[\x91\x90a\x058\x90_` \x85\x01\x94\x01\x90a\x05\x18V[V[4a\x05jWa\x05J6`\x04a\x027V[a\x05fa\x05Ua\x04\xFBV[a\x05]a\x01DV[\x91\x82\x91\x82a\x05%V[\x03\x90\xF3[a\x01JV[\x90V[a\x05\x82\x90`\x08a\x05\x87\x93\x02a\x04\xC4V[a\x05oV[\x90V[\x90a\x05\x95\x91Ta\x05rV[\x90V[a\x05\xA4`\n_\x90a\x05\x8AV[\x90V[\x90V[a\x05\xB3\x90a\x05\xA7V[\x90RV[\x91\x90a\x05\xCA\x90_` \x85\x01\x94\x01\x90a\x05\xAAV[V[4a\x05\xFCWa\x05\xDC6`\x04a\x027V[a\x05\xF8a\x05\xE7a\x05\x98V[a\x05\xEFa\x01DV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x01JV[4a\x06/Wa\x06\x116`\x04a\x027V[a\x06\x19a \xC7V[a\x06!a\x01DV[\x80a\x06+\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[4a\x06bWa\x06D6`\x04a\x027V[a\x06La \xF6V[a\x06Ta\x01DV[\x80a\x06^\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x06\x94\x90a\x02\x94V[\x90V[a\x06\xA0\x90a\x06\x8BV[\x90RV[\x91\x90a\x06\xB7\x90_` \x85\x01\x94\x01\x90a\x06\x97V[V[4a\x06\xE9Wa\x06\xC96`\x04a\x027V[a\x06\xE5a\x06\xD4a\x06gV[a\x06\xDCa\x01DV[\x91\x82\x91\x82a\x06\xA4V[\x03\x90\xF3[a\x01JV[a\x06\xF7\x90a\x02jV[\x90V[a\x07\x03\x90a\x06\xEEV[\x90RV[\x91\x90a\x07\x1A\x90_` \x85\x01\x94\x01\x90a\x06\xFAV[V[4a\x07LWa\x07,6`\x04a\x027V[a\x07Ha\x077a!0V[a\x07?a\x01DV[\x91\x82\x91\x82a\x07\x07V[\x03\x90\xF3[a\x01JV[\x90``\x82\x82\x03\x12a\x07jWa\x07g\x91_\x01a\x01ZV[\x90V[a\x01NV[4a\x07\x9DWa\x07\x87a\x07\x826`\x04a\x07QV[a$\x18V[a\x07\x8Fa\x01DV[\x80a\x07\x99\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[a\x07\xAB\x81a\x05\xA7V[\x03a\x07\xB2WV[_\x80\xFD[\x90P5\x90a\x07\xC3\x82a\x07\xA2V[V[\x90` \x82\x82\x03\x12a\x07\xDEWa\x07\xDB\x91_\x01a\x07\xB6V[\x90V[a\x01NV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x08\r\x81a\x07\xF7V[\x82\x10\x15a\x08'Wa\x08\x1F`\x03\x91a\x07\xFBV[\x91\x02\x01\x90_\x90V[a\x07\xE3V[`\t\x90a\x088\x82a\x07\xF7V[\x81\x10\x15a\x08pWa\x08H\x91a\x08\x04V[Pa\x08T_\x82\x01a\x03\x1FV[\x91a\x08m`\x02a\x08f`\x01\x85\x01a\x03\x1FV[\x93\x01a\x03\x1FV[\x90V[_\x80\xFD[`@\x90a\x08\x9Da\x08\xA4\x94\x96\x95\x93\x96a\x08\x93``\x84\x01\x98_\x85\x01\x90a\x03\x8CV[` \x83\x01\x90a\x03\x8CV[\x01\x90a\x03\x8CV[V[4a\x08\xD9Wa\x08\xD5a\x08\xC1a\x08\xBC6`\x04a\x07\xC5V[a\x08,V[a\x08\xCC\x93\x91\x93a\x01DV[\x93\x84\x93\x84a\x08tV[\x03\x90\xF3[a\x01JV[a\x08\xE7\x81a\x03\x89V[\x03a\x08\xEEWV[_\x80\xFD[\x90P5\x90a\x08\xFF\x82a\x08\xDEV[V[\x90` \x82\x82\x03\x12a\t\x1AWa\t\x17\x91_\x01a\x08\xF2V[\x90V[a\x01NV[4a\tMWa\t7a\t26`\x04a\t\x01V[a%XV[a\t?a\x01DV[\x80a\tI\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t\x7F\x90a\x02\x94V[\x90V[a\t\x8B\x90a\tvV[\x90RV[\x91\x90a\t\xA2\x90_` \x85\x01\x94\x01\x90a\t\x82V[V[4a\t\xD4Wa\t\xB46`\x04a\x027V[a\t\xD0a\t\xBFa\tRV[a\t\xC7a\x01DV[\x91\x82\x91\x82a\t\x8FV[\x03\x90\xF3[a\x01JV[a\t\xE2\x81a\x05\x0BV[\x03a\t\xE9WV[_\x80\xFD[\x90P5\x90a\t\xFA\x82a\t\xD9V[V[\x90` \x82\x82\x03\x12a\n\x15Wa\n\x12\x91_\x01a\t\xEDV[\x90V[a\x01NV[4a\nHWa\n2a\n-6`\x04a\t\xFCV[a&\x9BV[a\n:a\x01DV[\x80a\nD\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[a\nY`\x0B_\x90a\x04\xEDV[\x90V[4a\n\x8CWa\nl6`\x04a\x027V[a\n\x88a\nwa\nMV[a\n\x7Fa\x01DV[\x91\x82\x91\x82a\x05%V[\x03\x90\xF3[a\x01JV[4a\n\xBFWa\n\xA9a\n\xA46`\x04a\t\x01V[a'3V[a\n\xB1a\x01DV[\x80a\n\xBB\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[a\n\xCD\x81a\x06\xEEV[\x03a\n\xD4WV[_\x80\xFD[\x90P5\x90a\n\xE5\x82a\n\xC4V[V[\x90` \x82\x82\x03\x12a\x0B\0Wa\n\xFD\x91_\x01a\n\xD8V[\x90V[a\x01NV[4a\x0B3Wa\x0B\x1Da\x0B\x186`\x04a\n\xE7V[a'\xA3V[a\x0B%a\x01DV[\x80a\x0B/\x81a\x01\xFEV[\x03\x90\xF3[a\x01JV[_\x80\xFD[\x90a\x0BO\x92\x91a\x0BJa'\xBBV[a\x130V[a\x0BWa( V[V[P\x90V[\x90V[a\x0Bta\x0Boa\x0By\x92a\x0B]V[a\x02uV[a\x05\xA7V[\x90V[` \x91\x81R\x01\x90V[_\x7Finvalid signature length\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xB9`\x18` \x92a\x0B|V[a\x0B\xC2\x81a\x0B\x85V[\x01\x90V[a\x0B\xDB\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xACV[\x90V[\x15a\x0B\xE5WV[a\x0B\xEDa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\x03`\x04\x82\x01a\x0B\xC6V[\x03\x90\xFD[\x90V[\x90V[a\x0C\x19a\x0C\x1E\x91a\x03\x89V[a\x0C\nV[\x90RV[` \x81a\x0C4a\x0C<\x93\x83\x96\x95a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0Ch\x90a\x0C@V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\x82W`@RV[a\x0CJV[` \x01\x90V[Q\x90V[_\x80\xFD[\x90a\x0C\xA8a\x0C\xA1a\x01DV[\x92\x83a\x0C^V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0C\xC8Wa\x0C\xC4` \x91a\x0C@V[\x01\x90V[a\x0CJV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x0C\xEDa\x0C\xE8\x82a\x0C\xAAV[a\x0C\x95V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\r\tWa\r\x07\x92a\x0C\xCDV[V[a\x0C\x91V[a\r\x19\x916\x91a\x0C\xD8V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[\x15\x15\x90V[a\r4\x81a\r&V[\x03a\r;WV[_\x80\xFD[\x90PQ\x90a\rL\x82a\r+V[V[\x90` \x82\x82\x03\x12a\rgWa\rd\x91_\x01a\r?V[\x90V[a\x01NV[a\rta\x01DV[=_\x82>=\x90\xFD[_\x7Finvalid tee signature\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\r\xB0`\x15` \x92a\x0B|V[a\r\xB9\x81a\r|V[\x01\x90V[a\r\xD2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\xA3V[\x90V[\x15a\r\xDCWV[a\r\xE4a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xFA`\x04\x82\x01a\r\xBDV[\x03\x90\xFD[5a\x0E\x08\x81a\x08\xDEV[\x90V[_\x7Fappchain block hash unchanged\0\0\0\x91\x01RV[a\x0E?`\x1D` \x92a\x0B|V[a\x0EH\x81a\x0E\x0BV[\x01\x90V[a\x0Ea\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E2V[\x90V[\x15a\x0EkWV[a\x0Esa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0E\x89`\x04\x82\x01a\x0ELV[\x03\x90\xFD[\x90V[a\x0E\xA4a\x0E\x9Fa\x0E\xA9\x92a\x0E\x8DV[a\x02uV[a\x05\xA7V[\x90V[`\x01a\x0E\xB8\x91\x01a\x05\xA7V[\x90V[\x90V[_\x7Fassertion already exists\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xF2`\x18` \x92a\x0B|V[a\x0E\xFB\x81a\x0E\xBEV[\x01\x90V[a\x0F\x14\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xE5V[\x90V[\x15a\x0F\x1EWV[a\x0F&a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0F<`\x04\x82\x01a\x0E\xFFV[\x03\x90\xFD[a\x0FTa\x0FOa\x0FY\x92a\x05\xA7V[a\x02uV[a\x05\x0BV[\x90V[`@\x1C\x90V[a\x0Fna\x0Fs\x91a\x0F\\V[a\x04\xC8V[\x90V[a\x0F\x80\x90Ta\x0FbV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0F\xA3a\x0F\xA9\x91a\x05\x0BV[\x91a\x05\x0BV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0F\xBCWV[a\x0F\x83V[_\x1B\x90V[\x90a\x0F\xD9g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x0F\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xF7a\x0F\xF2a\x0F\xFC\x92a\x05\x0BV[a\x02uV[a\x05\x0BV[\x90V[\x90V[\x90a\x10\x17a\x10\x12a\x10\x1E\x92a\x0F\xE3V[a\x0F\xFFV[\x82Ta\x0F\xC6V[\x90UV[\x90V[_R` _ \x90V[T\x90V[a\x10;\x81a\x10.V[\x82\x10\x15a\x10UWa\x10M`\x03\x91a\x10%V[\x91\x02\x01\x90_\x90V[a\x07\xE3V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90a\x10y_\x19\x91a\x0F\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\x8C\x90a\x03\x89V[\x90V[a\x10\x98\x90a\x03\x03V[\x90V[\x90a\x10\xB0a\x10\xABa\x10\xB7\x92a\x10\x83V[a\x10\x8FV[\x82Ta\x10mV[\x90UV[\x90a\x10\xFF`@`\x02a\x11\x05\x94a\x10\xDE_\x82\x01a\x10\xD8_\x88\x01a\r\xFEV[\x90a\x10\x9BV[a\x10\xF7`\x01\x82\x01a\x10\xF1` \x88\x01a\r\xFEV[\x90a\x10\x9BV[\x01\x92\x01a\r\xFEV[\x90a\x10\x9BV[V[\x91\x90a\x11\x18Wa\x11\x16\x91a\x10\xBBV[V[a\x10ZV[\x1B\x90V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x11QW\x82a\x11I\x91`\x01a\x11O\x95\x01\x81Ua\x102V[\x90a\x11\x07V[V[a\x0CJV[\x90V[a\x11ma\x11ha\x11r\x92a\x11VV[a\x02uV[a\x05\xA7V[\x90V[\x90V[a\x11\x8Ca\x11\x87a\x11\x91\x92a\x11uV[a\x02uV[a\x05\xA7V[\x90V[a\x11\xA0a\x11\xA5\x91a\x03\x03V[a\x05oV[\x90V[a\x11\xB2\x90Ta\x11\x94V[\x90V[a\x11\xC4a\x11\xCA\x91\x93\x92\x93a\x05\xA7V[\x92a\x05\xA7V[\x82\x01\x80\x92\x11a\x11\xD5WV[a\x0F\x83V[a\x11\xEEa\x11\xE9a\x11\xF3\x92a\x05\xA7V[a\x02uV[a\x05\xA7V[\x90V[\x90V[\x90a\x12\x0Ea\x12\ta\x12\x15\x92a\x11\xDAV[a\x11\xF6V[\x82Ta\x10mV[\x90UV[a\x12\"\x90a\x02xV[\x90V[a\x12.\x90a\x12\x19V[\x90V[a\x12:\x90a\x02\x94V[\x90V[a\x12F\x90a\x02\x94V[\x90V[\x90P\x90V[a\x12Y_\x80\x92a\x12IV[\x01\x90V[a\x12f\x90a\x12NV[\x90V[\x90a\x12{a\x12v\x83a\x0C\xAAV[a\x0C\x95V[\x91\x82RV[``\x90V[=_\x14a\x12\xA0Wa\x12\x95=a\x12iV[\x90=_` \x84\x01>[V[a\x12\xA8a\x12\x80V[\x90a\x12\x9EV[_\x7Fpayment failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12\xE2`\x0E` \x92a\x0B|V[a\x12\xEB\x81a\x12\xAEV[\x01\x90V[a\x13\x04\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12\xD5V[\x90V[\x15a\x13\x0EWV[a\x13\x16a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13,`\x04\x82\x01a\x12\xEFV[\x03\x90\xFD[\x91\x92\x90` a\x14\x1E\x91a\x13`a\x13G\x82\x88\x90a\x0BYV[a\x13Za\x13T`Aa\x0B`V[\x91a\x05\xA7V[\x14a\x0B\xDEV[a\x13i\x85a(_V[\x95a\x14\x13a\x13\xFEa\x13\x82a\x13}`\x02a\x0C\x07V[a),V[a\x13\xAB\x8A\x91a\x13\x9Da\x13\x92a\x01DV[\x93\x84\x92\x8A\x84\x01a\x0C\"V[\x88\x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a\x13\xBDa\x13\xB7\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x93a\x13\xF8a\x13\xEB\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\xA0V[\x94cr\x17\xEF\xCD\x96\x92a\r\x0EV[\x90a)\xCBV[\x92a\x14\x07a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\r V[\x83R`\x04\x83\x01a\x07\x07V[\x03\x91Z\xFA\x80\x15a\x16HWa\x149\x91_\x91a\x16\x1AW[Pa\r\xD5V[a\x14la\x14G_\x84\x01a\r\xFEV[a\x14ea\x14_a\x14Z`\x01`\x02\x01a\x03\x1FV[a\x03\x89V[\x91a\x03\x89V[\x14\x15a\x0EdV[a\x14u_a\x0E\x90V[[\x80a\x14\x92a\x14\x8Ca\x14\x87`\ta\x07\xF7V[a\x05\xA7V[\x91a\x05\xA7V[\x10\x15a\x14\xDFWa\x14\xDA\x90a\x14\xD5\x85a\x14\xCEa\x14\xC8a\x14\xC3a\x14\xBEa\x14\xB8`\t\x88\x90a\x08\x04V[Pa\x0E\xBBV[a)\xEDV[a\x03\x89V[\x91a\x03\x89V[\x14\x15a\x0F\x17V[a\x0E\xACV[a\x14vV[P\x91Pa\x15\x17\x90a\x14\xF0`\ta\x07\xF7V[a\x15\x02a\x14\xFC_a\x0E\x90V[\x91a\x05\xA7V[\x14a\x15\xEFW[a\x15\x12`\ta\x10\"V[a\x11!V[a\x15!`\ta\x07\xF7V[a\x154a\x15.`\x02a\x11YV[\x91a\x05\xA7V[\x14a\x15<W[V[a\x15ba\x15[a\x15L`\x01a\x11xV[a\x15V`\na\x11\xA8V[a\x11\xB5V[`\na\x11\xF9V[a\x15l`\na\x11\xA8V[a\x15\xA2\x7F7\xE8\xAD\xD6\x94\xC5\x92mVN\x97\x11`\xF5\x97A\x03\xCB\xBB\xC7\xC9\x07G\xC4\xC6\xF8\x02\x03\x1D5g\xA7\x91a\x15\x99a\x01DV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA1a\x15\xEA_\x80a\x15\xBBa\x15\xB63a\x12%V[a\x121V[a\x15\xC40a\x12=V[1a\x15\xCDa\x01DV[\x90\x81a\x15\xD8\x81a\x12]V[\x03\x92Z\xF1a\x15\xE4a\x12\x85V[Pa\x13\x07V[a\x15:V[a\x16\x15a\x16\x0Ea\x15\xFEBa\x0F@V[a\x16\x08`\x0Ba\x0FvV[\x90a\x0F\x97V[`\x0Ba\x10\x02V[a\x15\x08V[a\x16;\x91P` =\x81\x11a\x16AW[a\x163\x81\x83a\x0C^V[\x81\x01\x90a\rNV[_a\x143V[P=a\x16)V[a\rlV[\x90a\x16X\x92\x91a\x0B<V[V[a\x16ba'\xBBV[a\x16ja\x1BUV[a\x16ra( V[V[` \x7Ftoo many assertions\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x16\xCE`3`@\x92a\x0B|V[a\x16\xD7\x81a\x16tV[\x01\x90V[a\x16\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x16\xC1V[\x90V[\x15a\x16\xFAWV[a\x17\x02a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x17\x18`\x04\x82\x01a\x16\xDBV[\x03\x90\xFD[a\x170a\x17+a\x175\x92a\x0E\x8DV[a\x02uV[a\x02jV[\x90V[a\x17A\x90a\x17\x1CV[\x90V[\x90PQ\x90a\x17Q\x82a\t\xD9V[V[\x90` \x82\x82\x03\x12a\x17lWa\x17i\x91_\x01a\x17DV[\x90V[a\x01NV[a\x17}a\x17\x82\x91a\x03\x03V[a\x04\xC8V[\x90V[a\x17\x8F\x90Ta\x17qV[\x90V[` \x7Finsufficient time has passed\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x17\xEC`<`@\x92a\x0B|V[a\x17\xF5\x81a\x17\x92V[\x01\x90V[a\x18\x0E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x17\xDFV[\x90V[\x15a\x18\x18WV[a\x18 a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x186`\x04\x82\x01a\x17\xF9V[\x03\x90\xFD[_\x91\x03\x12a\x18DWV[a\x01NV[\x91` a\x18j\x92\x94\x93a\x18c`@\x82\x01\x96_\x83\x01\x90a\x03\x8CV[\x01\x90a\x03\x8CV[V[a\x18{a\x18\x81\x91\x93\x92\x93a\x05\xA7V[\x92a\x05\xA7V[\x91a\x18\x8D\x83\x82\x02a\x05\xA7V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x18\x9CWV[a\x0F\x83V[a\x18\xAC\x90`\x03a\x18lV[\x90V[\x91\x90`\x08a\x18\xCA\x91\x02\x91a\x18\xC4_\x19\x84a\x11\x1DV[\x92a\x11\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x18\xEAa\x18\xE5a\x18\xF2\x93a\x10\x83V[a\x10\x8FV[\x90\x83Ta\x18\xAFV[\x90UV[_\x90V[a\x19\x0C\x91a\x19\x06a\x18\xF6V[\x91a\x18\xD4V[V[_`\x02a\x194\x92a\x19!\x83\x80\x83\x01a\x18\xFAV[a\x19.\x83`\x01\x83\x01a\x18\xFAV[\x01a\x18\xFAV[V[\x90_\x03a\x19HWa\x19F\x90a\x19\x0EV[V[a\x10ZV[[\x81\x81\x10a\x19YWPPV[\x80a\x19f_`\x03\x93a\x196V[\x01a\x19NV[\x90\x91\x82\x81\x10a\x19{W[PPPV[a\x19\x99a\x19\x93a\x19\x8Da\x19\xA4\x95a\x18\xA1V[\x92a\x18\xA1V[\x92a\x07\xFBV[\x91\x82\x01\x91\x01\x90a\x19MV[_\x80\x80a\x19vV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x19\xD5W\x81a\x19\xCAa\x19\xD3\x93a\x07\xF7V[\x90\x82\x81Ua\x19lV[V[a\x0CJV[_a\x19\xE4\x91a\x19\xACV[V[\x90_\x03a\x19\xF8Wa\x19\xF6\x90a\x19\xDAV[V[a\x10ZV[\x90PQ\x90a\x1A\n\x82a\x07\xA2V[V[\x90` \x82\x82\x03\x12a\x1A%Wa\x1A\"\x91_\x01a\x19\xFDV[\x90V[a\x01NV[a\x1A9a\x1A?\x91\x93\x92\x93a\x05\xA7V[\x92a\x05\xA7V[\x82\x03\x91\x82\x11a\x1AJWV[a\x0F\x83V[\x90PQ\x90a\x1A\\\x82a\x08\xDEV[V[\x90` \x82\x82\x03\x12a\x1AwWa\x1At\x91_\x01a\x1AOV[\x90V[a\x01NV[a\x1A\x85\x90a\x03\x89V[\x90RV[\x90`\xC0a\x1B6`\x06a\x1B>\x94a\x1A\xADa\x1A\xA4_\x83\x01Ta\x03\x0BV[_\x87\x01\x90a\x1A|V[a\x1A\xC7a\x1A\xBD`\x01\x83\x01Ta\x03\x0BV[` \x87\x01\x90a\x1A|V[a\x1A\xE1a\x1A\xD7`\x02\x83\x01Ta\x03\x0BV[`@\x87\x01\x90a\x1A|V[a\x1A\xFBa\x1A\xF1`\x03\x83\x01Ta\x03\x0BV[``\x87\x01\x90a\x1A|V[a\x1B\x15a\x1B\x0B`\x04\x83\x01Ta\x03\x0BV[`\x80\x87\x01\x90a\x1A|V[a\x1B/a\x1B%`\x05\x83\x01Ta\x03\x0BV[`\xA0\x87\x01\x90a\x1A|V[\x01Ta\x03\x0BV[\x91\x01\x90a\x1A|V[V[\x91\x90a\x1BS\x90_`\xE0\x85\x01\x94\x01\x90a\x1A\x89V[V[a\x1B|a\x1Bb`\ta\x07\xF7V[a\x1Bua\x1Bo`\x01a\x11xV[\x91a\x05\xA7V[\x11\x15a\x16\xF3V[a\x1B\xA5\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[a\x1B\xBFa\x1B\xB9a\x1B\xB4_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14_\x14a %Wa\x1B\xF4a\x1B\xD2Ba\x0F@V[[a\x1B\xEEa\x1B\xE8a\x1B\xE3`\x0Ba\x17\x85V[a\x05\x0BV[\x91a\x05\x0BV[\x11a\x18\x11V[a\x1C\x1Aa\x1C\x13a\x1C\x03Ba\x0F@V[a\x1C\r`\x0Ba\x0FvV[\x90a\x0F\x97V[`\x0Ba\x10\x02V[a\x1C$`\ta\x07\xF7V[a\x1C6a\x1C0_a\x0E\x90V[\x91a\x05\xA7V[\x11a\x1E\xDFW[a\x1Ce\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\tvV[a\x1C\xAEc\xD5q\x9D\xC2` a\x1C\x98\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\tvV[c\xEC\xA0g\xAD\x90a\x1C\xA6a\x01DV[\x94\x85\x92a\r V[\x82R\x81\x80a\x1C\xBE`\x04\x82\x01a\x01\xFEV[\x03\x91Z\xFA\x92\x83\x15a\x1E\xDAWa\x1D\x03a\x1C\xEEa\x1D\x0E\x95` \x95_\x91a\x1E\xADW[Pa\x1C\xE8`\x01a\x11xV[\x90a\x1A*V[\x92a\x1C\xF7a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\r V[\x83R`\x04\x83\x01a\x05\xB7V[\x03\x91Z\xFA\x80\x15a\x1E\xA8Wa\x1D.\x91_\x91a\x1EzW[P`\x04`\x02\x01a\x10\x9BV[a\x1DW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[a\x1Dqa\x1Dka\x1Df_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14_\x14a\x1D\xD8Wa\x1D\x9Ba\x1D\x8FCa\x1D\x89`\x01a\x11xV[\x90a\x1A*V[@[`\x06`\x02\x01a\x10\x9BV[`\x02a\x1D\xD3\x7F\x91\t+\xCFU\t!\xE3\x81\xE8\x1F\x06i3 SK\x14J~V\x1C_\xC0\x8F\x19@\xD5\x08\xA8\\\xDC\x91a\x1D\xCAa\x01DV[\x91\x82\x91\x82a\x1B@V[\x03\x90\xA1V[a\x1E\x1C` a\x1E\x06\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[c\t\xBDZ`\x90a\x1E\x14a\x01DV[\x93\x84\x92a\r V[\x82R\x81\x80a\x1E,`\x04\x82\x01a\x01\xFEV[\x03\x91Z\xFA\x80\x15a\x1EuWa\x1D\x9B\x91_\x91a\x1EGW[Pa\x1D\x91V[a\x1Eh\x91P` =\x81\x11a\x1EnW[a\x1E`\x81\x83a\x0C^V[\x81\x01\x90a\x1A^V[_a\x1EAV[P=a\x1EVV[a\rlV[a\x1E\x9B\x91P` =\x81\x11a\x1E\xA1W[a\x1E\x93\x81\x83a\x0C^V[\x81\x01\x90a\x1A^V[_a\x1D#V[P=a\x1E\x89V[a\rlV[a\x1E\xCD\x91P\x86=\x81\x11a\x1E\xD3W[a\x1E\xC5\x81\x83a\x0C^V[\x81\x01\x90a\x1A\x0CV[_a\x1C\xDDV[P=a\x1E\xBBV[a\rlV[a\x1F\x03a\x1E\xF9_a\x1E\xF2`\t\x82\x90a\x08\x04V[P\x01a\x03\x1FV[`\x01`\x02\x01a\x10\x9BV[a\x1F(a\x1F\x1E`\x02a\x1F\x17`\t_\x90a\x08\x04V[P\x01a\x03\x1FV[`\x03`\x02\x01a\x10\x9BV[a\x1FBa\x1F8`\x06`\x02\x01a\x03\x1FV[`\x05`\x02\x01a\x10\x9BV[a\x1Fk\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x06\x8BV[c\xDA\xEA\xB4\x12a\x1F\x87_a\x1F\x80`\t\x82\x90a\x08\x04V[P\x01a\x03\x1FV[a\x1F\x9F`\x01a\x1F\x98`\t_\x90a\x08\x04V[P\x01a\x03\x1FV[\x92\x80;\x15a  Wa\x1F\xC4_\x80\x94a\x1F\xCFa\x1F\xB8a\x01DV[\x97\x88\x96\x87\x95\x86\x94a\r V[\x84R`\x04\x84\x01a\x18IV[\x03\x92Z\xF1\x80\x15a \x1BWa\x1F\xEFW[Pa\x1F\xEA_`\ta\x19\xE6V[a\x1C<V[a \x0E\x90_=\x81\x11a \x14W[a \x06\x81\x83a\x0C^V[\x81\x01\x90a\x18:V[_a\x1F\xDEV[P=a\x1F\xFCV[a\rlV[a\r\x1CV[a i` a S\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04aV[c\xB8\x07w\xEA\x90a aa\x01DV[\x93\x84\x92a\r V[\x82R\x81\x80a y`\x04\x82\x01a\x01\xFEV[\x03\x91Z\xFA\x80\x15a \xC2Wa\x1B\xF4\x91_\x91a \x94W[Pa\x1B\xD3V[a \xB5\x91P` =\x81\x11a \xBBW[a \xAD\x81\x83a\x0C^V[\x81\x01\x90a\x17SV[_a \x8EV[P=a \xA3V[a\rlV[a \xCFa\x16ZV[V[a \xD9a*XV[a \xE1a \xE3V[V[a \xF4a \xEF_a\x178V[a*\xF0V[V[a \xFEa \xD1V[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a!\x1Ba! \x91a\x03\x03V[a!\x04V[\x90V[a!-\x90Ta!\x0FV[\x90V[a!8a!\0V[Pa!B_a!#V[\x90V[a!V\x90a!Qa*XV[a!XV[V[a!i\x90a!da'\xBBV[a\"\xE0V[a!qa( V[V[_\x7Fchallenge does not exist\0\0\0\0\0\0\0\0\x91\x01RV[a!\xA7`\x18` \x92a\x0B|V[a!\xB0\x81a!sV[\x01\x90V[a!\xC9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra!\x9AV[\x90V[\x15a!\xD3WV[a!\xDBa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a!\xF1`\x04\x82\x01a!\xB4V[\x03\x90\xFD[a\"\ta\"\x04a\"\x0E\x92a\x0E\x8DV[a\x02uV[a\x05\x0BV[\x90V[Pa\" \x90` \x81\x01\x90a\x08\xF2V[\x90V[\x90`@a\"ha\"p\x93a\"Ea\"<_\x83\x01\x83a\"\x11V[_\x86\x01\x90a\x1A|V[a\"_a\"U` \x83\x01\x83a\"\x11V[` \x86\x01\x90a\x1A|V[\x82\x81\x01\x90a\"\x11V[\x91\x01\x90a\x1A|V[V[\x91\x90a\"\x85\x90_``\x85\x01\x94\x01\x90a\"#V[V[_\x7Fassertion not found\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\"\xBB`\x13` \x92a\x0B|V[a\"\xC4\x81a\"\x87V[\x01\x90V[a\"\xDD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\"\xAEV[\x90V[a#\x06a\"\xED`\ta\x07\xF7V[a#\0a\"\xFA`\x01a\x11xV[\x91a\x05\xA7V[\x11a!\xCCV[a#\x0F\x81a(_V[\x90a#\x19_a\x0E\x90V[[\x80a#6a#0a#+`\ta\x07\xF7V[a\x05\xA7V[\x91a\x05\xA7V[\x10\x15a#\xF6W\x82a#ka#ea#`a#[a#U`\t\x87\x90a\x08\x04V[Pa\x0E\xBBV[a)\xEDV[a\x03\x89V[\x91a\x03\x89V[\x14a#~Wa#y\x90a\x0E\xACV[a#\x1AV[P\x90Pa#\x8C_`\ta\x19\xE6V[a#\xA0a#\x99`\ta\x10\"V[\x82\x90a\x11!V[a#\xB3a#\xAC_a!\xF5V[`\x0Ba\x10\x02V[a#\xBBa \xC7V[a#\xF1\x7F\xE4.\xAF\x077\xE2G\x8A_Z\xED:\x06\x10\xAE{\t\xA2|\xBA\xC9\xADj\\\xC4\xD6\x8Fx\xAF\xD1B[\x91a#\xE8a\x01DV[\x91\x82\x91\x82a\"rV[\x03\x90\xA1V[a#\xFEa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a$\x14`\x04\x82\x01a\"\xC8V[\x03\x90\xFD[a$!\x90a!EV[V[a$4\x90a$/a*XV[a$\xDEV[V[` \x7Fassertions are pending\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot update config hash while _\x82\x01R\x01RV[a$\x90`6`@\x92a\x0B|V[a$\x99\x81a$6V[\x01\x90V[a$\xB2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra$\x83V[\x90V[\x15a$\xBCWV[a$\xC4a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a$\xDA`\x04\x82\x01a$\x9DV[\x03\x90\xFD[a%\x03a$\xEB`\ta\x07\xF7V[a$\xFDa$\xF7_a\x0E\x90V[\x91a\x05\xA7V[\x14a$\xB5V[a%\x10\x81`\x02\x80\x01a\x10\x9BV[a%\x1D`\x03`\x02\x01a\x03\x1FV[\x7F\xB9\xEB \xB3/\xAC\x96X\x84\xCBX2a\x02%|\xAE`E\x04\xF0\xA3l\xD1\0\x8A2\x84Z\xD5\xC2\x9B\x91a%Sa%Ja\x01DV[\x92\x83\x92\x83a\x18IV[\x03\x90\xA1V[a%a\x90a$#V[V[a%t\x90a%oa*XV[a&iV[V[` \x7Fhile assertion is pending\0\0\0\0\0\0\0\x91\x7Fcannot update challenge window w_\x82\x01R\x01RV[a%\xD0`9`@\x92a\x0B|V[a%\xD9\x81a%vV[\x01\x90V[a%\xF2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra%\xC3V[\x90V[\x15a%\xFCWV[a&\x04a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a&\x1A`\x04\x82\x01a%\xDDV[\x03\x90\xFD[`@\x1B\x90V[\x90a&?o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x91a&\x1EV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a&^a&Ya&e\x92a\x0F\xE3V[a\x0F\xFFV[\x82Ta&$V[\x90UV[a&\x99\x90a&\x92a&z`\ta\x07\xF7V[a&\x8Ca&\x86_a\x0E\x90V[\x91a\x05\xA7V[\x14a%\xF5V[`\x0Ba&IV[V[a&\xA4\x90a%cV[V[a&\xB7\x90a&\xB2a*XV[a&\xB9V[V[a&\xDEa&\xC6`\ta\x07\xF7V[a&\xD8a&\xD2_a\x0E\x90V[\x91a\x05\xA7V[\x14a$\xB5V[a&\xEB\x81_`\x02\x01a\x10\x9BV[a&\xF8`\x01`\x02\x01a\x03\x1FV[\x7F\xC9\x85\xBC\xCB\xD0\xC9\x0E\x19\x7FJss\x02\n3\xBAo\xF8d\xD09\x9F\xD7\xD6\\\\|2\xFF\xB0\x15\xEC\x91a'.a'%a\x01DV[\x92\x83\x92\x83a\x18IV[\x03\x90\xA1V[a'<\x90a&\xA6V[V[a'O\x90a'Ja*XV[a'QV[V[\x80a'la'fa'a_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14a'|Wa'z\x90a*\xF0V[V[a'\x9Fa'\x88_a\x178V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x07\x07V[\x03\x90\xFD[a'\xAC\x90a'>V[V[a'\xB8`\x02a\x11YV[\x90V[a'\xC5`\x01a\x11\xA8V[a'\xDEa'\xD8a'\xD3a'\xAEV[a\x05\xA7V[\x91a\x05\xA7V[\x14a'\xF7Wa'\xF5a'\xEEa'\xAEV[`\x01a\x11\xF9V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a(\x0F`\x04\x82\x01a\x01\xFEV[\x03\x90\xFD[a(\x1D`\x01a\x11xV[\x90V[a(2a(+a(\x13V[`\x01a\x11\xF9V[V[` \x93\x92a(S\x85\x83a(K\x82\x95a([\x97a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x90V[a(ga\x18\xF6V[Pa(\xB4a(v_\x83\x01a\r\xFEV[a(\xA5a(\x91`@a(\x8A` \x87\x01a\r\xFEV[\x95\x01a\r\xFEV[a(\x99a\x01DV[\x94\x85\x93` \x85\x01a(4V[` \x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a(\xC6a(\xC0\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x90V[\x94a)\x18` \x80\x99\x98\x95\x96a)\x10\x82\x80\x99a)\x08\x82a) \x9Aa)\0a)(\x9F\x80a(\xF8\x85\x9E\x92\x86\x93a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x80\x92a\x0C\rV[\x01\x90V[a)4a\x18\xF6V[Pa)\xB5a)C_\x83\x01a\x03\x1FV[a)\xA6a)R`\x01\x85\x01a\x03\x1FV[\x93a)_`\x02\x82\x01a\x03\x1FV[\x90a)l`\x03\x82\x01a\x03\x1FV[a)x`\x04\x83\x01a\x03\x1FV[\x90a)\x91`\x06a)\x8A`\x05\x86\x01a\x03\x1FV[\x94\x01a\x03\x1FV[\x93a)\x9Aa\x01DV[\x98\x89\x97` \x89\x01a(\xCAV[` \x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a)\xC7a)\xC1\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x90V[a)\xEA\x91a)\xE1\x91a)\xDBa!\0V[Pa+sV[\x90\x92\x91\x92a,pV[\x90V[a)\xF5a\x18\xF6V[Pa*Ba*\x04_\x83\x01a\x03\x1FV[a*3a*\x1F`\x02a*\x18`\x01\x87\x01a\x03\x1FV[\x95\x01a\x03\x1FV[a*'a\x01DV[\x94\x85\x93` \x85\x01a(4V[` \x82\x01\x81\x03\x82R\x03\x82a\x0C^V[a*Ta*N\x82a\x0C\x8DV[\x91a\x0C\x87V[ \x90V[a*`a!0V[a*ya*sa*na-AV[a\x06\xEEV[\x91a\x06\xEEV[\x03a*\x80WV[a*\xA2a*\x8Ba-AV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x07\x07V[\x03\x90\xFD[\x90a*\xB7`\x01\x80`\xA0\x1B\x03\x91a\x0F\xC1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a*\xCA\x90a\x02\x94V[\x90V[\x90V[\x90a*\xE5a*\xE0a*\xEC\x92a*\xC1V[a*\xCDV[\x82Ta*\xA6V[\x90UV[a*\xF9_a!#V[a+\x03\x82_a*\xD0V[\x90a+7a+1\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a*\xC1V[\x91a*\xC1V[\x91a+@a\x01DV[\x80a+J\x81a\x01\xFEV[\x03\x90\xA3V[_\x90V[a+ga+ba+l\x92a\x05\xA7V[a\x0F\xC1V[a\x03\x89V[\x90V[_\x90V[\x91\x90\x91a+~a!\0V[Pa+\x87a+OV[Pa+\x90a\x18\xF6V[Pa+\x9A\x83a\x0C\x8DV[a+\xADa+\xA7`Aa\x0B`V[\x91a\x05\xA7V[\x14_\x14a+\xF4Wa+\xED\x91\x92a+\xC1a\x18\xF6V[Pa+\xCAa\x18\xF6V[Pa+\xD3a+oV[P` \x81\x01Q```@\x83\x01Q\x92\x01Q_\x1A\x90\x91\x92a-\xDAV[\x91\x92\x90\x91\x90V[Pa+\xFE_a\x178V[\x90a,\x12a,\r`\x02\x94a\x0C\x8DV[a+SV[\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15a,6WV[a,\x18V[\x90a,E\x82a,,V[V[\x91\x90a,Z\x90_` \x85\x01\x94\x01\x90a\x03\x8CV[V[a,ha,m\x91a\x03\x03V[a\x11\xDAV[\x90V[\x80a,\x83a,}_a,;V[\x91a,;V[\x14_\x14a,\x8EWPPV[\x80a,\xA2a,\x9C`\x01a,;V[\x91a,;V[\x14_\x14a,\xC5W_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80a,\xC1`\x04\x82\x01a\x01\xFEV[\x03\x90\xFD[\x80a,\xD9a,\xD3`\x02a,;V[\x91a,;V[\x14_\x14a-\x07Wa-\x03a,\xEC\x83a,\\V[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[a-\x1Aa-\x14`\x03a,;V[\x91a,;V[\x14a-\"WPV[a-=\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a,GV[\x03\x90\xFD[a-Ia!\0V[P3\x90V[\x90V[a-ea-`a-j\x92a-NV[a\x02uV[a\x05\xA7V[\x90V[`\xFF\x16\x90V[a-|\x90a-mV[\x90RV[a-\xB5a-\xBC\x94a-\xAB``\x94\x98\x97\x95a-\xA1`\x80\x86\x01\x9A_\x87\x01\x90a\x03\x8CV[` \x85\x01\x90a-sV[`@\x83\x01\x90a\x03\x8CV[\x01\x90a\x03\x8CV[V[a-\xD2a-\xCDa-\xD7\x92a\x0E\x8DV[a\x0F\xC1V[a\x03\x89V[\x90V[\x93\x92\x93a-\xE5a!\0V[Pa-\xEEa+OV[Pa-\xF7a\x18\xF6V[Pa.\x01\x85a,\\V[a.3a.-\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a-QV[\x91a\x05\xA7V[\x11a.\xC0W\x90a.V` \x94\x95_\x94\x93\x92\x93a.Ma\x01DV[\x94\x85\x94\x85a-\x80V[\x83\x80R\x03\x90`\x01Z\xFA\x15a.\xBBWa.n_Qa\x0F\xC1V[\x80a.\x89a.\x83a.~_a\x178V[a\x06\xEEV[\x91a\x06\xEEV[\x14a.\x9FW_\x91a.\x99_a-\xBEV[\x91\x92\x91\x90V[Pa.\xA9_a\x178V[`\x01\x91a.\xB5_a-\xBEV[\x91\x92\x91\x90V[a\rlV[PPPa.\xCC_a\x178V[\x90`\x03\x92\x91\x92\x91\x90V",
    );
    /**```solidity
struct PendingAssertion { bytes32 blockHash; bytes32 sendRoot; bytes32 seqBlockHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PendingAssertion {
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sendRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PendingAssertion> for UnderlyingRustTuple<'_> {
            fn from(value: PendingAssertion) -> Self {
                (value.blockHash, value.sendRoot, value.seqBlockHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PendingAssertion {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    blockHash: tuple.0,
                    sendRoot: tuple.1,
                    seqBlockHash: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PendingAssertion {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PendingAssertion {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.sendRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqBlockHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PendingAssertion {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PendingAssertion {
            const NAME: &'static str = "PendingAssertion";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PendingAssertion(bytes32 blockHash,bytes32 sendRoot,bytes32 seqBlockHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.blockHash)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.sendRoot)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.seqBlockHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PendingAssertion {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.blockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.sendRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.seqBlockHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.blockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.sendRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.seqBlockHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct TeeTrustedInput { bytes32 appchainConfigHash; bytes32 appchainStartBlockHash; bytes32 seqConfigHash; bytes32 seqStartBlockHash; bytes32 setDelayedMessageAcc; bytes32 l1StartBlockHash; bytes32 l1EndBlockHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TeeTrustedInput {
        #[allow(missing_docs)]
        pub appchainConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub appchainStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub setDelayedMessageAcc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1StartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1EndBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TeeTrustedInput> for UnderlyingRustTuple<'_> {
            fn from(value: TeeTrustedInput) -> Self {
                (
                    value.appchainConfigHash,
                    value.appchainStartBlockHash,
                    value.seqConfigHash,
                    value.seqStartBlockHash,
                    value.setDelayedMessageAcc,
                    value.l1StartBlockHash,
                    value.l1EndBlockHash,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TeeTrustedInput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    appchainConfigHash: tuple.0,
                    appchainStartBlockHash: tuple.1,
                    seqConfigHash: tuple.2,
                    seqStartBlockHash: tuple.3,
                    setDelayedMessageAcc: tuple.4,
                    l1StartBlockHash: tuple.5,
                    l1EndBlockHash: tuple.6,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for TeeTrustedInput {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for TeeTrustedInput {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainConfigHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.appchainStartBlockHash,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqConfigHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqStartBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.setDelayedMessageAcc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1StartBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1EndBlockHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for TeeTrustedInput {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for TeeTrustedInput {
            const NAME: &'static str = "TeeTrustedInput";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "TeeTrustedInput(bytes32 appchainConfigHash,bytes32 appchainStartBlockHash,bytes32 seqConfigHash,bytes32 seqStartBlockHash,bytes32 setDelayedMessageAcc,bytes32 l1StartBlockHash,bytes32 l1EndBlockHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.appchainConfigHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.appchainStartBlockHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.seqConfigHash)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.seqStartBlockHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.setDelayedMessageAcc,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.l1StartBlockHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.l1EndBlockHash,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for TeeTrustedInput {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.appchainConfigHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.appchainStartBlockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.seqConfigHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.seqStartBlockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.setDelayedMessageAcc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.l1StartBlockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.l1EndBlockHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.appchainConfigHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.appchainStartBlockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.seqConfigHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.seqStartBlockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.setDelayedMessageAcc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.l1StartBlockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.l1EndBlockHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignature()` and selector `0xf645eedf`.
```solidity
error ECDSAInvalidSignature();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignature {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignature()";
            const SELECTOR: [u8; 4] = [246u8, 69u8, 238u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignatureLength(uint256)` and selector `0xfce698f7`.
```solidity
error ECDSAInvalidSignatureLength(uint256 length);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureLength {
        #[allow(missing_docs)]
        pub length: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureLength>
        for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureLength) -> Self {
                (value.length,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ECDSAInvalidSignatureLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { length: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureLength(uint256)";
            const SELECTOR: [u8; 4] = [252u8, 230u8, 152u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                )
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignatureS(bytes32)` and selector `0xd78bce0c`.
```solidity
error ECDSAInvalidSignatureS(bytes32 s);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureS {
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureS> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureS) -> Self {
                (value.s,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignatureS {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { s: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureS {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureS(bytes32)";
            const SELECTOR: [u8; 4] = [215u8, 139u8, 206u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `ChallengeResolved((bytes32,bytes32,bytes32))` and selector `0xe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b`.
```solidity
event ChallengeResolved(PendingAssertion);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ChallengeResolved {
        #[allow(missing_docs)]
        pub _0: <PendingAssertion as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ChallengeResolved {
            type DataTuple<'a> = (PendingAssertion,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ChallengeResolved((bytes32,bytes32,bytes32))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8,
                46u8,
                175u8,
                7u8,
                55u8,
                226u8,
                71u8,
                138u8,
                95u8,
                90u8,
                237u8,
                58u8,
                6u8,
                16u8,
                174u8,
                123u8,
                9u8,
                162u8,
                124u8,
                186u8,
                201u8,
                173u8,
                106u8,
                92u8,
                196u8,
                214u8,
                143u8,
                120u8,
                175u8,
                209u8,
                66u8,
                91u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<PendingAssertion as alloy_sol_types::SolType>::tokenize(&self._0),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ChallengeResolved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ChallengeResolved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ChallengeResolved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeAppchainConfigHash(bytes32,bytes32)` and selector `0xc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec`.
```solidity
event TeeAppchainConfigHash(bytes32 configHash, bytes32 blockHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeAppchainConfigHash {
        #[allow(missing_docs)]
        pub configHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeAppchainConfigHash {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeAppchainConfigHash(bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                201u8,
                133u8,
                188u8,
                203u8,
                208u8,
                201u8,
                14u8,
                25u8,
                127u8,
                74u8,
                115u8,
                115u8,
                2u8,
                10u8,
                51u8,
                186u8,
                111u8,
                248u8,
                100u8,
                208u8,
                57u8,
                159u8,
                215u8,
                214u8,
                92u8,
                92u8,
                124u8,
                50u8,
                255u8,
                176u8,
                21u8,
                236u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    configHash: data.0,
                    blockHash: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.configHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockHash),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeAppchainConfigHash {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeAppchainConfigHash> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeAppchainConfigHash) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeHacked(uint256)` and selector `0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7`.
```solidity
event TeeHacked(uint256);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeHacked {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeHacked {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeHacked(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                55u8,
                232u8,
                173u8,
                214u8,
                148u8,
                197u8,
                146u8,
                109u8,
                86u8,
                78u8,
                151u8,
                17u8,
                96u8,
                245u8,
                151u8,
                65u8,
                3u8,
                203u8,
                187u8,
                199u8,
                201u8,
                7u8,
                71u8,
                196u8,
                198u8,
                248u8,
                2u8,
                3u8,
                29u8,
                53u8,
                103u8,
                167u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeHacked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeHacked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeHacked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32))` and selector `0x91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc`.
```solidity
event TeeInput(TeeTrustedInput input);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeInput {
        #[allow(missing_docs)]
        pub input: <TeeTrustedInput as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeInput {
            type DataTuple<'a> = (TeeTrustedInput,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                145u8,
                9u8,
                43u8,
                207u8,
                85u8,
                9u8,
                33u8,
                227u8,
                129u8,
                232u8,
                31u8,
                6u8,
                105u8,
                51u8,
                32u8,
                83u8,
                75u8,
                20u8,
                74u8,
                126u8,
                86u8,
                28u8,
                95u8,
                192u8,
                143u8,
                25u8,
                64u8,
                213u8,
                8u8,
                168u8,
                92u8,
                220u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { input: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<TeeTrustedInput as alloy_sol_types::SolType>::tokenize(&self.input),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeInput {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeInput> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeInput) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeSeqConfigHash(bytes32,bytes32)` and selector `0xb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b`.
```solidity
event TeeSeqConfigHash(bytes32 configHash, bytes32 blockHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeSeqConfigHash {
        #[allow(missing_docs)]
        pub configHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeSeqConfigHash {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeSeqConfigHash(bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                185u8,
                235u8,
                32u8,
                179u8,
                47u8,
                172u8,
                150u8,
                88u8,
                132u8,
                203u8,
                88u8,
                50u8,
                97u8,
                2u8,
                37u8,
                124u8,
                174u8,
                96u8,
                69u8,
                4u8,
                240u8,
                163u8,
                108u8,
                209u8,
                0u8,
                138u8,
                50u8,
                132u8,
                90u8,
                213u8,
                194u8,
                155u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    configHash: data.0,
                    blockHash: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.configHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockHash),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeSeqConfigHash {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeSeqConfigHash> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeSeqConfigHash) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address poster_, address bridge_, bytes32 appchainConfigHash_, bytes32 appchainStartBlockHash_, bytes32 seqConfigHash_, bytes32 seqStartBlockHash_, bytes32 l1StartBlockHash_, address l1block_, uint64 challengeWindowDuration_, address teeKeyManager_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub poster_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bridge_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1block_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub challengeWindowDuration_: u64,
        #[allow(missing_docs)]
        pub teeKeyManager_: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
                u64,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.poster_,
                        value.bridge_,
                        value.appchainConfigHash_,
                        value.appchainStartBlockHash_,
                        value.seqConfigHash_,
                        value.seqStartBlockHash_,
                        value.l1StartBlockHash_,
                        value.l1block_,
                        value.challengeWindowDuration_,
                        value.teeKeyManager_,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        poster_: tuple.0,
                        bridge_: tuple.1,
                        appchainConfigHash_: tuple.2,
                        appchainStartBlockHash_: tuple.3,
                        seqConfigHash_: tuple.4,
                        seqStartBlockHash_: tuple.5,
                        l1StartBlockHash_: tuple.6,
                        l1block_: tuple.7,
                        challengeWindowDuration_: tuple.8,
                        teeKeyManager_: tuple.9,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.poster_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge_,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainConfigHash_),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.appchainStartBlockHash_,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqConfigHash_),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqStartBlockHash_),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1StartBlockHash_),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l1block_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.challengeWindowDuration_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.teeKeyManager_,
                    ),
                )
            }
        }
    };
    /**Function with signature `bridge()` and selector `0xe78cea92`.
```solidity
function bridge() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeCall {}
    ///Container type for the return parameters of the [`bridge()`](bridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridge()";
            const SELECTOR: [u8; 4] = [231u8, 140u8, 234u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `challengeWindowDuration()` and selector `0x4bd167c9`.
```solidity
function challengeWindowDuration() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowDurationCall {}
    ///Container type for the return parameters of the [`challengeWindowDuration()`](challengeWindowDurationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowDurationReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowDurationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowDurationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowDurationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowDurationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowDurationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowDurationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for challengeWindowDurationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = challengeWindowDurationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "challengeWindowDuration()";
            const SELECTOR: [u8; 4] = [75u8, 209u8, 103u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `challengeWindowEnd()` and selector `0xee1c28b8`.
```solidity
function challengeWindowEnd() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowEndCall {}
    ///Container type for the return parameters of the [`challengeWindowEnd()`](challengeWindowEndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowEndReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowEndCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowEndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowEndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowEndReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowEndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowEndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for challengeWindowEndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = challengeWindowEndReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "challengeWindowEnd()";
            const SELECTOR: [u8; 4] = [238u8, 28u8, 40u8, 184u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `closeChallengeWindow()` and selector `0x6c4c2060`.
```solidity
function closeChallengeWindow() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct closeChallengeWindowCall {}
    ///Container type for the return parameters of the [`closeChallengeWindow()`](closeChallengeWindowCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct closeChallengeWindowReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<closeChallengeWindowCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: closeChallengeWindowCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for closeChallengeWindowCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<closeChallengeWindowReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: closeChallengeWindowReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for closeChallengeWindowReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for closeChallengeWindowCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = closeChallengeWindowReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "closeChallengeWindow()";
            const SELECTOR: [u8; 4] = [108u8, 76u8, 32u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l1block()` and selector `0x420caf3a`.
```solidity
function l1block() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l1blockCall {}
    ///Container type for the return parameters of the [`l1block()`](l1blockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l1blockReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l1blockCall> for UnderlyingRustTuple<'_> {
                fn from(value: l1blockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l1blockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l1blockReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l1blockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l1blockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l1blockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l1blockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l1block()";
            const SELECTOR: [u8; 4] = [66u8, 12u8, 175u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pendingAssertions(uint256)` and selector `0xa56ec6cd`.
```solidity
function pendingAssertions(uint256) external view returns (bytes32 blockHash, bytes32 sendRoot, bytes32 seqBlockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingAssertionsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`pendingAssertions(uint256)`](pendingAssertionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingAssertionsReturn {
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sendRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingAssertionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: pendingAssertionsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for pendingAssertionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingAssertionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: pendingAssertionsReturn) -> Self {
                    (value.blockHash, value.sendRoot, value.seqBlockHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for pendingAssertionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockHash: tuple.0,
                        sendRoot: tuple.1,
                        seqBlockHash: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pendingAssertionsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pendingAssertionsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pendingAssertions(uint256)";
            const SELECTOR: [u8; 4] = [165u8, 110u8, 198u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `poster()` and selector `0x80959721`.
```solidity
function poster() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct posterCall {}
    ///Container type for the return parameters of the [`poster()`](posterCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct posterReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<posterCall> for UnderlyingRustTuple<'_> {
                fn from(value: posterCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for posterCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<posterReturn> for UnderlyingRustTuple<'_> {
                fn from(value: posterReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for posterReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for posterCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = posterReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "poster()";
            const SELECTOR: [u8; 4] = [128u8, 149u8, 151u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `resolveChallenge((bytes32,bytes32,bytes32))` and selector `0x8fed55a3`.
```solidity
function resolveChallenge(PendingAssertion memory assertion) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resolveChallengeCall {
        #[allow(missing_docs)]
        pub assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`resolveChallenge((bytes32,bytes32,bytes32))`](resolveChallengeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resolveChallengeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PendingAssertion,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PendingAssertion as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resolveChallengeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: resolveChallengeCall) -> Self {
                    (value.assertion,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for resolveChallengeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { assertion: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resolveChallengeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: resolveChallengeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for resolveChallengeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for resolveChallengeCall {
            type Parameters<'a> = (PendingAssertion,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = resolveChallengeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "resolveChallenge((bytes32,bytes32,bytes32))";
            const SELECTOR: [u8; 4] = [143u8, 237u8, 85u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PendingAssertion as alloy_sol_types::SolType>::tokenize(
                        &self.assertion,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAppchainConfigHash(bytes32)` and selector `0xf223055c`.
```solidity
function setAppchainConfigHash(bytes32 hash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAppchainConfigHashCall {
        #[allow(missing_docs)]
        pub hash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setAppchainConfigHash(bytes32)`](setAppchainConfigHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAppchainConfigHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAppchainConfigHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAppchainConfigHashCall) -> Self {
                    (value.hash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAppchainConfigHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { hash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAppchainConfigHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAppchainConfigHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAppchainConfigHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAppchainConfigHashCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAppchainConfigHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAppchainConfigHash(bytes32)";
            const SELECTOR: [u8; 4] = [242u8, 35u8, 5u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.hash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setChallengeWindowDuration(uint64)` and selector `0xeb60553a`.
```solidity
function setChallengeWindowDuration(uint64 duration) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setChallengeWindowDurationCall {
        #[allow(missing_docs)]
        pub duration: u64,
    }
    ///Container type for the return parameters of the [`setChallengeWindowDuration(uint64)`](setChallengeWindowDurationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setChallengeWindowDurationReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setChallengeWindowDurationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setChallengeWindowDurationCall) -> Self {
                    (value.duration,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setChallengeWindowDurationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { duration: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setChallengeWindowDurationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setChallengeWindowDurationReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setChallengeWindowDurationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setChallengeWindowDurationCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setChallengeWindowDurationReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setChallengeWindowDuration(uint64)";
            const SELECTOR: [u8; 4] = [235u8, 96u8, 85u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.duration),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setSeqConfigHash(bytes32)` and selector `0xc3f2dbd3`.
```solidity
function setSeqConfigHash(bytes32 hash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSeqConfigHashCall {
        #[allow(missing_docs)]
        pub hash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setSeqConfigHash(bytes32)`](setSeqConfigHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSeqConfigHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSeqConfigHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSeqConfigHashCall) -> Self {
                    (value.hash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSeqConfigHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { hash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSeqConfigHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSeqConfigHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSeqConfigHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSeqConfigHashCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSeqConfigHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSeqConfigHash(bytes32)";
            const SELECTOR: [u8; 4] = [195u8, 242u8, 219u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.hash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `submitAssertion((bytes32,bytes32,bytes32),bytes)` and selector `0x0dbfd1fa`.
```solidity
function submitAssertion(PendingAssertion memory assertion, bytes memory signature) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitAssertionCall {
        #[allow(missing_docs)]
        pub assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`submitAssertion((bytes32,bytes32,bytes32),bytes)`](submitAssertionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitAssertionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                PendingAssertion,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PendingAssertion as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitAssertionCall> for UnderlyingRustTuple<'_> {
                fn from(value: submitAssertionCall) -> Self {
                    (value.assertion, value.signature)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for submitAssertionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        assertion: tuple.0,
                        signature: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitAssertionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: submitAssertionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for submitAssertionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for submitAssertionCall {
            type Parameters<'a> = (PendingAssertion, alloy::sol_types::sol_data::Bytes);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = submitAssertionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "submitAssertion((bytes32,bytes32,bytes32),bytes)";
            const SELECTOR: [u8; 4] = [13u8, 191u8, 209u8, 250u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PendingAssertion as alloy_sol_types::SolType>::tokenize(
                        &self.assertion,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `teeHackCount()` and selector `0x697b5e62`.
```solidity
function teeHackCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeHackCountCall {}
    ///Container type for the return parameters of the [`teeHackCount()`](teeHackCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeHackCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeHackCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: teeHackCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeHackCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeHackCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: teeHackCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeHackCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for teeHackCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = teeHackCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "teeHackCount()";
            const SELECTOR: [u8; 4] = [105u8, 123u8, 94u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `teeKeyManager()` and selector `0x3a009a06`.
```solidity
function teeKeyManager() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeKeyManagerCall {}
    ///Container type for the return parameters of the [`teeKeyManager()`](teeKeyManagerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeKeyManagerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeKeyManagerCall> for UnderlyingRustTuple<'_> {
                fn from(value: teeKeyManagerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeKeyManagerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeKeyManagerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: teeKeyManagerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeKeyManagerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for teeKeyManagerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = teeKeyManagerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "teeKeyManager()";
            const SELECTOR: [u8; 4] = [58u8, 0u8, 154u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `teeTrustedInput()` and selector `0x3ceaae7d`.
```solidity
function teeTrustedInput() external view returns (bytes32 appchainConfigHash, bytes32 appchainStartBlockHash, bytes32 seqConfigHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBlockHash, bytes32 l1EndBlockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeTrustedInputCall {}
    ///Container type for the return parameters of the [`teeTrustedInput()`](teeTrustedInputCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeTrustedInputReturn {
        #[allow(missing_docs)]
        pub appchainConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub appchainStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub setDelayedMessageAcc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1StartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1EndBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeTrustedInputCall> for UnderlyingRustTuple<'_> {
                fn from(value: teeTrustedInputCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeTrustedInputCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeTrustedInputReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: teeTrustedInputReturn) -> Self {
                    (
                        value.appchainConfigHash,
                        value.appchainStartBlockHash,
                        value.seqConfigHash,
                        value.seqStartBlockHash,
                        value.setDelayedMessageAcc,
                        value.l1StartBlockHash,
                        value.l1EndBlockHash,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for teeTrustedInputReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        appchainConfigHash: tuple.0,
                        appchainStartBlockHash: tuple.1,
                        seqConfigHash: tuple.2,
                        seqStartBlockHash: tuple.3,
                        setDelayedMessageAcc: tuple.4,
                        l1StartBlockHash: tuple.5,
                        l1EndBlockHash: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for teeTrustedInputCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = teeTrustedInputReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "teeTrustedInput()";
            const SELECTOR: [u8; 4] = [60u8, 234u8, 174u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TeeModule`](self) function calls.
    pub enum TeeModuleCalls {
        #[allow(missing_docs)]
        bridge(bridgeCall),
        #[allow(missing_docs)]
        challengeWindowDuration(challengeWindowDurationCall),
        #[allow(missing_docs)]
        challengeWindowEnd(challengeWindowEndCall),
        #[allow(missing_docs)]
        closeChallengeWindow(closeChallengeWindowCall),
        #[allow(missing_docs)]
        l1block(l1blockCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        pendingAssertions(pendingAssertionsCall),
        #[allow(missing_docs)]
        poster(posterCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        resolveChallenge(resolveChallengeCall),
        #[allow(missing_docs)]
        setAppchainConfigHash(setAppchainConfigHashCall),
        #[allow(missing_docs)]
        setChallengeWindowDuration(setChallengeWindowDurationCall),
        #[allow(missing_docs)]
        setSeqConfigHash(setSeqConfigHashCall),
        #[allow(missing_docs)]
        submitAssertion(submitAssertionCall),
        #[allow(missing_docs)]
        teeHackCount(teeHackCountCall),
        #[allow(missing_docs)]
        teeKeyManager(teeKeyManagerCall),
        #[allow(missing_docs)]
        teeTrustedInput(teeTrustedInputCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl TeeModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 191u8, 209u8, 250u8],
            [58u8, 0u8, 154u8, 6u8],
            [60u8, 234u8, 174u8, 125u8],
            [66u8, 12u8, 175u8, 58u8],
            [75u8, 209u8, 103u8, 201u8],
            [105u8, 123u8, 94u8, 98u8],
            [108u8, 76u8, 32u8, 96u8],
            [113u8, 80u8, 24u8, 166u8],
            [128u8, 149u8, 151u8, 33u8],
            [141u8, 165u8, 203u8, 91u8],
            [143u8, 237u8, 85u8, 163u8],
            [165u8, 110u8, 198u8, 205u8],
            [195u8, 242u8, 219u8, 211u8],
            [231u8, 140u8, 234u8, 146u8],
            [235u8, 96u8, 85u8, 58u8],
            [238u8, 28u8, 40u8, 184u8],
            [242u8, 35u8, 5u8, 92u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeModuleCalls {
        const NAME: &'static str = "TeeModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::bridge(_) => <bridgeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::challengeWindowDuration(_) => {
                    <challengeWindowDurationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::challengeWindowEnd(_) => {
                    <challengeWindowEndCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::closeChallengeWindow(_) => {
                    <closeChallengeWindowCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l1block(_) => <l1blockCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pendingAssertions(_) => {
                    <pendingAssertionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::poster(_) => <posterCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::resolveChallenge(_) => {
                    <resolveChallengeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAppchainConfigHash(_) => {
                    <setAppchainConfigHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setChallengeWindowDuration(_) => {
                    <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSeqConfigHash(_) => {
                    <setSeqConfigHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::submitAssertion(_) => {
                    <submitAssertionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::teeHackCount(_) => {
                    <teeHackCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::teeKeyManager(_) => {
                    <teeKeyManagerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::teeTrustedInput(_) => {
                    <teeTrustedInputCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TeeModuleCalls>] = &[
                {
                    fn submitAssertion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <submitAssertionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::submitAssertion)
                    }
                    submitAssertion
                },
                {
                    fn teeKeyManager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <teeKeyManagerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::teeKeyManager)
                    }
                    teeKeyManager
                },
                {
                    fn teeTrustedInput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <teeTrustedInputCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::teeTrustedInput)
                    }
                    teeTrustedInput
                },
                {
                    fn l1block(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <l1blockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::l1block)
                    }
                    l1block
                },
                {
                    fn challengeWindowDuration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <challengeWindowDurationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::challengeWindowDuration)
                    }
                    challengeWindowDuration
                },
                {
                    fn teeHackCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <teeHackCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::teeHackCount)
                    }
                    teeHackCount
                },
                {
                    fn closeChallengeWindow(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <closeChallengeWindowCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::closeChallengeWindow)
                    }
                    closeChallengeWindow
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn poster(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <posterCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::poster)
                    }
                    poster
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn resolveChallenge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <resolveChallengeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::resolveChallenge)
                    }
                    resolveChallenge
                },
                {
                    fn pendingAssertions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <pendingAssertionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::pendingAssertions)
                    }
                    pendingAssertions
                },
                {
                    fn setSeqConfigHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <setSeqConfigHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::setSeqConfigHash)
                    }
                    setSeqConfigHash
                },
                {
                    fn bridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <bridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::bridge)
                    }
                    bridge
                },
                {
                    fn setChallengeWindowDuration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::setChallengeWindowDuration)
                    }
                    setChallengeWindowDuration
                },
                {
                    fn challengeWindowEnd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <challengeWindowEndCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::challengeWindowEnd)
                    }
                    challengeWindowEnd
                },
                {
                    fn setAppchainConfigHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <setAppchainConfigHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::setAppchainConfigHash)
                    }
                    setAppchainConfigHash
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::bridge(inner) => {
                    <bridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::challengeWindowDuration(inner) => {
                    <challengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::challengeWindowEnd(inner) => {
                    <challengeWindowEndCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::closeChallengeWindow(inner) => {
                    <closeChallengeWindowCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l1block(inner) => {
                    <l1blockCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pendingAssertions(inner) => {
                    <pendingAssertionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::poster(inner) => {
                    <posterCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::resolveChallenge(inner) => {
                    <resolveChallengeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setAppchainConfigHash(inner) => {
                    <setAppchainConfigHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setChallengeWindowDuration(inner) => {
                    <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSeqConfigHash(inner) => {
                    <setSeqConfigHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::submitAssertion(inner) => {
                    <submitAssertionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::teeHackCount(inner) => {
                    <teeHackCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::teeKeyManager(inner) => {
                    <teeKeyManagerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::teeTrustedInput(inner) => {
                    <teeTrustedInputCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::bridge(inner) => {
                    <bridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::challengeWindowDuration(inner) => {
                    <challengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::challengeWindowEnd(inner) => {
                    <challengeWindowEndCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::closeChallengeWindow(inner) => {
                    <closeChallengeWindowCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l1block(inner) => {
                    <l1blockCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pendingAssertions(inner) => {
                    <pendingAssertionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::poster(inner) => {
                    <posterCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::resolveChallenge(inner) => {
                    <resolveChallengeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAppchainConfigHash(inner) => {
                    <setAppchainConfigHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setChallengeWindowDuration(inner) => {
                    <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSeqConfigHash(inner) => {
                    <setSeqConfigHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::submitAssertion(inner) => {
                    <submitAssertionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::teeHackCount(inner) => {
                    <teeHackCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::teeKeyManager(inner) => {
                    <teeKeyManagerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::teeTrustedInput(inner) => {
                    <teeTrustedInputCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeModule`](self) custom errors.
    pub enum TeeModuleErrors {
        #[allow(missing_docs)]
        ECDSAInvalidSignature(ECDSAInvalidSignature),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureLength(ECDSAInvalidSignatureLength),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureS(ECDSAInvalidSignatureS),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
    }
    #[automatically_derived]
    impl TeeModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [62u8, 229u8, 174u8, 181u8],
            [215u8, 139u8, 206u8, 12u8],
            [246u8, 69u8, 238u8, 223u8],
            [252u8, 230u8, 152u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeModuleErrors {
        const NAME: &'static str = "TeeModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ECDSAInvalidSignature(_) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureLength(_) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureS(_) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TeeModuleErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn ECDSAInvalidSignatureS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::ECDSAInvalidSignatureS)
                    }
                    ECDSAInvalidSignatureS
                },
                {
                    fn ECDSAInvalidSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::ECDSAInvalidSignature)
                    }
                    ECDSAInvalidSignature
                },
                {
                    fn ECDSAInvalidSignatureLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::ECDSAInvalidSignatureLength)
                    }
                    ECDSAInvalidSignatureLength
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeModule`](self) events.
    pub enum TeeModuleEvents {
        #[allow(missing_docs)]
        ChallengeResolved(ChallengeResolved),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        TeeAppchainConfigHash(TeeAppchainConfigHash),
        #[allow(missing_docs)]
        TeeHacked(TeeHacked),
        #[allow(missing_docs)]
        TeeInput(TeeInput),
        #[allow(missing_docs)]
        TeeSeqConfigHash(TeeSeqConfigHash),
    }
    #[automatically_derived]
    impl TeeModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                55u8,
                232u8,
                173u8,
                214u8,
                148u8,
                197u8,
                146u8,
                109u8,
                86u8,
                78u8,
                151u8,
                17u8,
                96u8,
                245u8,
                151u8,
                65u8,
                3u8,
                203u8,
                187u8,
                199u8,
                201u8,
                7u8,
                71u8,
                196u8,
                198u8,
                248u8,
                2u8,
                3u8,
                29u8,
                53u8,
                103u8,
                167u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                145u8,
                9u8,
                43u8,
                207u8,
                85u8,
                9u8,
                33u8,
                227u8,
                129u8,
                232u8,
                31u8,
                6u8,
                105u8,
                51u8,
                32u8,
                83u8,
                75u8,
                20u8,
                74u8,
                126u8,
                86u8,
                28u8,
                95u8,
                192u8,
                143u8,
                25u8,
                64u8,
                213u8,
                8u8,
                168u8,
                92u8,
                220u8,
            ],
            [
                185u8,
                235u8,
                32u8,
                179u8,
                47u8,
                172u8,
                150u8,
                88u8,
                132u8,
                203u8,
                88u8,
                50u8,
                97u8,
                2u8,
                37u8,
                124u8,
                174u8,
                96u8,
                69u8,
                4u8,
                240u8,
                163u8,
                108u8,
                209u8,
                0u8,
                138u8,
                50u8,
                132u8,
                90u8,
                213u8,
                194u8,
                155u8,
            ],
            [
                201u8,
                133u8,
                188u8,
                203u8,
                208u8,
                201u8,
                14u8,
                25u8,
                127u8,
                74u8,
                115u8,
                115u8,
                2u8,
                10u8,
                51u8,
                186u8,
                111u8,
                248u8,
                100u8,
                208u8,
                57u8,
                159u8,
                215u8,
                214u8,
                92u8,
                92u8,
                124u8,
                50u8,
                255u8,
                176u8,
                21u8,
                236u8,
            ],
            [
                228u8,
                46u8,
                175u8,
                7u8,
                55u8,
                226u8,
                71u8,
                138u8,
                95u8,
                90u8,
                237u8,
                58u8,
                6u8,
                16u8,
                174u8,
                123u8,
                9u8,
                162u8,
                124u8,
                186u8,
                201u8,
                173u8,
                106u8,
                92u8,
                196u8,
                214u8,
                143u8,
                120u8,
                175u8,
                209u8,
                66u8,
                91u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for TeeModuleEvents {
        const NAME: &'static str = "TeeModuleEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ChallengeResolved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ChallengeResolved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ChallengeResolved)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <TeeAppchainConfigHash as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TeeAppchainConfigHash as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeAppchainConfigHash)
                }
                Some(<TeeHacked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TeeHacked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeHacked)
                }
                Some(<TeeInput as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TeeInput as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeInput)
                }
                Some(<TeeSeqConfigHash as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TeeSeqConfigHash as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeSeqConfigHash)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for TeeModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChallengeResolved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeAppchainConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeHacked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeInput(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeSeqConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChallengeResolved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeAppchainConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeHacked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeInput(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeSeqConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TeeModule`](self) contract instance.

See the [wrapper's documentation](`TeeModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TeeModuleInstance<T, P, N> {
        TeeModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        poster_: alloy::sol_types::private::Address,
        bridge_: alloy::sol_types::private::Address,
        appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1block_: alloy::sol_types::private::Address,
        challengeWindowDuration_: u64,
        teeKeyManager_: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TeeModuleInstance<T, P, N>>,
    > {
        TeeModuleInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            poster_,
            bridge_,
            appchainConfigHash_,
            appchainStartBlockHash_,
            seqConfigHash_,
            seqStartBlockHash_,
            l1StartBlockHash_,
            l1block_,
            challengeWindowDuration_,
            teeKeyManager_,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        poster_: alloy::sol_types::private::Address,
        bridge_: alloy::sol_types::private::Address,
        appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1block_: alloy::sol_types::private::Address,
        challengeWindowDuration_: u64,
        teeKeyManager_: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TeeModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            poster_,
            bridge_,
            appchainConfigHash_,
            appchainStartBlockHash_,
            seqConfigHash_,
            seqStartBlockHash_,
            l1StartBlockHash_,
            l1block_,
            challengeWindowDuration_,
            teeKeyManager_,
        )
    }
    /**A [`TeeModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TeeModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TeeModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TeeModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TeeModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TeeModule`](self) contract instance.

See the [wrapper's documentation](`TeeModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            poster_: alloy::sol_types::private::Address,
            bridge_: alloy::sol_types::private::Address,
            appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1block_: alloy::sol_types::private::Address,
            challengeWindowDuration_: u64,
            teeKeyManager_: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<TeeModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                poster_,
                bridge_,
                appchainConfigHash_,
                appchainStartBlockHash_,
                seqConfigHash_,
                seqStartBlockHash_,
                l1StartBlockHash_,
                l1block_,
                challengeWindowDuration_,
                teeKeyManager_,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            poster_: alloy::sol_types::private::Address,
            bridge_: alloy::sol_types::private::Address,
            appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1block_: alloy::sol_types::private::Address,
            challengeWindowDuration_: u64,
            teeKeyManager_: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            poster_,
                            bridge_,
                            appchainConfigHash_,
                            appchainStartBlockHash_,
                            seqConfigHash_,
                            seqStartBlockHash_,
                            l1StartBlockHash_,
                            l1block_,
                            challengeWindowDuration_,
                            teeKeyManager_,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TeeModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TeeModuleInstance<T, P, N> {
            TeeModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`bridge`] function.
        pub fn bridge(&self) -> alloy_contract::SolCallBuilder<T, &P, bridgeCall, N> {
            self.call_builder(&bridgeCall {})
        }
        ///Creates a new call builder for the [`challengeWindowDuration`] function.
        pub fn challengeWindowDuration(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, challengeWindowDurationCall, N> {
            self.call_builder(&challengeWindowDurationCall {})
        }
        ///Creates a new call builder for the [`challengeWindowEnd`] function.
        pub fn challengeWindowEnd(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, challengeWindowEndCall, N> {
            self.call_builder(&challengeWindowEndCall {})
        }
        ///Creates a new call builder for the [`closeChallengeWindow`] function.
        pub fn closeChallengeWindow(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, closeChallengeWindowCall, N> {
            self.call_builder(&closeChallengeWindowCall {})
        }
        ///Creates a new call builder for the [`l1block`] function.
        pub fn l1block(&self) -> alloy_contract::SolCallBuilder<T, &P, l1blockCall, N> {
            self.call_builder(&l1blockCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`pendingAssertions`] function.
        pub fn pendingAssertions(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, pendingAssertionsCall, N> {
            self.call_builder(&pendingAssertionsCall { _0 })
        }
        ///Creates a new call builder for the [`poster`] function.
        pub fn poster(&self) -> alloy_contract::SolCallBuilder<T, &P, posterCall, N> {
            self.call_builder(&posterCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`resolveChallenge`] function.
        pub fn resolveChallenge(
            &self,
            assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, resolveChallengeCall, N> {
            self.call_builder(&resolveChallengeCall { assertion })
        }
        ///Creates a new call builder for the [`setAppchainConfigHash`] function.
        pub fn setAppchainConfigHash(
            &self,
            hash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAppchainConfigHashCall, N> {
            self.call_builder(&setAppchainConfigHashCall { hash })
        }
        ///Creates a new call builder for the [`setChallengeWindowDuration`] function.
        pub fn setChallengeWindowDuration(
            &self,
            duration: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, setChallengeWindowDurationCall, N> {
            self.call_builder(
                &setChallengeWindowDurationCall {
                    duration,
                },
            )
        }
        ///Creates a new call builder for the [`setSeqConfigHash`] function.
        pub fn setSeqConfigHash(
            &self,
            hash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSeqConfigHashCall, N> {
            self.call_builder(&setSeqConfigHashCall { hash })
        }
        ///Creates a new call builder for the [`submitAssertion`] function.
        pub fn submitAssertion(
            &self,
            assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
            signature: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, submitAssertionCall, N> {
            self.call_builder(
                &submitAssertionCall {
                    assertion,
                    signature,
                },
            )
        }
        ///Creates a new call builder for the [`teeHackCount`] function.
        pub fn teeHackCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, teeHackCountCall, N> {
            self.call_builder(&teeHackCountCall {})
        }
        ///Creates a new call builder for the [`teeKeyManager`] function.
        pub fn teeKeyManager(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, teeKeyManagerCall, N> {
            self.call_builder(&teeKeyManagerCall {})
        }
        ///Creates a new call builder for the [`teeTrustedInput`] function.
        pub fn teeTrustedInput(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, teeTrustedInputCall, N> {
            self.call_builder(&teeTrustedInputCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ChallengeResolved`] event.
        pub fn ChallengeResolved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ChallengeResolved, N> {
            self.event_filter::<ChallengeResolved>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`TeeAppchainConfigHash`] event.
        pub fn TeeAppchainConfigHash_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TeeAppchainConfigHash, N> {
            self.event_filter::<TeeAppchainConfigHash>()
        }
        ///Creates a new event filter for the [`TeeHacked`] event.
        pub fn TeeHacked_filter(&self) -> alloy_contract::Event<T, &P, TeeHacked, N> {
            self.event_filter::<TeeHacked>()
        }
        ///Creates a new event filter for the [`TeeInput`] event.
        pub fn TeeInput_filter(&self) -> alloy_contract::Event<T, &P, TeeInput, N> {
            self.event_filter::<TeeInput>()
        }
        ///Creates a new event filter for the [`TeeSeqConfigHash`] event.
        pub fn TeeSeqConfigHash_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TeeSeqConfigHash, N> {
            self.event_filter::<TeeSeqConfigHash>()
        }
    }
}
