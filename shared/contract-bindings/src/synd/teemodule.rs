/**

Generated by the following Solidity interface...
```solidity
interface TeeModule {
    struct PendingAssertion {
        bytes32 blockHash;
        bytes32 sendRoot;
        bytes32 seqBlockHash;
    }
    struct TeeTrustedInput {
        bytes32 appchainConfigHash;
        bytes32 appchainStartBlockHash;
        bytes32 seqConfigHash;
        bytes32 seqStartBlockHash;
        bytes32 setDelayedMessageAcc;
        bytes32 l1StartBlockHash;
        bytes32 l1EndBlockHash;
    }

    error ECDSAInvalidSignature();
    error ECDSAInvalidSignatureLength(uint256 length);
    error ECDSAInvalidSignatureS(bytes32 s);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event ChallengeResolved(PendingAssertion);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event TeeAppchainConfigHash(bytes32 configHash, bytes32 blockHash);
    event TeeHacked(uint256);
    event TeeInput(TeeTrustedInput input);
    event TeeSeqConfigHash(bytes32 configHash, bytes32 blockHash);

    constructor(address poster_, address bridge_, bytes32 appchainConfigHash_, bytes32 appchainStartBlockHash_, bytes32 seqConfigHash_, bytes32 seqStartBlockHash_, bytes32 l1StartBlockHash_, address l1block_, uint64 challengeWindowDuration_, address teeKeyManager_);

    receive() external payable;

    function bridge() external view returns (address);
    function challengeWindowDuration() external view returns (uint64);
    function challengeWindowEnd() external view returns (uint64);
    function closeChallengeWindow() external;
    function l1block() external view returns (address);
    function owner() external view returns (address);
    function pendingAssertions(uint256) external view returns (bytes32 blockHash, bytes32 sendRoot, bytes32 seqBlockHash);
    function poster() external view returns (address);
    function renounceOwnership() external;
    function resolveChallenge(PendingAssertion memory assertion) external;
    function setAppchainConfigHash(bytes32 hash) external;
    function setChallengeWindowDuration(uint64 duration) external;
    function setSeqConfigHash(bytes32 hash) external;
    function submitAssertion(PendingAssertion memory assertion, bytes memory signature, address rewardAddr) external;
    function teeHackCount() external view returns (uint256);
    function teeKeyManager() external view returns (address);
    function teeTrustedInput() external view returns (bytes32 appchainConfigHash, bytes32 appchainStartBlockHash, bytes32 seqConfigHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBlockHash, bytes32 l1EndBlockHash);
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "poster_",
        "type": "address",
        "internalType": "contract AssertionPoster"
      },
      {
        "name": "bridge_",
        "type": "address",
        "internalType": "contract IBridge"
      },
      {
        "name": "appchainConfigHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "appchainStartBlockHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqConfigHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqStartBlockHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1StartBlockHash_",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1block_",
        "type": "address",
        "internalType": "contract IL1Block"
      },
      {
        "name": "challengeWindowDuration_",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "teeKeyManager_",
        "type": "address",
        "internalType": "contract ITeeKeyManager"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "bridge",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IBridge"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "challengeWindowDuration",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "challengeWindowEnd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "closeChallengeWindow",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "l1block",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IL1Block"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pendingAssertions",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "sendRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "poster",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract AssertionPoster"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "resolveChallenge",
    "inputs": [
      {
        "name": "assertion",
        "type": "tuple",
        "internalType": "struct PendingAssertion",
        "components": [
          {
            "name": "blockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "sendRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setAppchainConfigHash",
    "inputs": [
      {
        "name": "hash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setChallengeWindowDuration",
    "inputs": [
      {
        "name": "duration",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setSeqConfigHash",
    "inputs": [
      {
        "name": "hash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "submitAssertion",
    "inputs": [
      {
        "name": "assertion",
        "type": "tuple",
        "internalType": "struct PendingAssertion",
        "components": [
          {
            "name": "blockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "sendRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "signature",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "rewardAddr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "teeHackCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "teeKeyManager",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract ITeeKeyManager"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "teeTrustedInput",
    "inputs": [],
    "outputs": [
      {
        "name": "appchainConfigHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "appchainStartBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqConfigHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "seqStartBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "setDelayedMessageAcc",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1StartBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "l1EndBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ChallengeResolved",
    "inputs": [
      {
        "name": "",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct PendingAssertion",
        "components": [
          {
            "name": "blockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "sendRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeAppchainConfigHash",
    "inputs": [
      {
        "name": "configHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "blockHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeHacked",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeInput",
    "inputs": [
      {
        "name": "input",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct TeeTrustedInput",
        "components": [
          {
            "name": "appchainConfigHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "appchainStartBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqConfigHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "seqStartBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "setDelayedMessageAcc",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "l1StartBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "l1EndBlockHash",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TeeSeqConfigHash",
    "inputs": [
      {
        "name": "configHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "blockHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureLength",
    "inputs": [
      {
        "name": "length",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureS",
    "inputs": [
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TeeModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x61010060405234610099576100276100156102ca565b989790979691969592959493946107e1565b61002f61009e565b612dfa6117008239608051818181610589015261160d015260a051818181610987015281816112e20152611315015260c05181818161035a01528181611248015281816113d4015281816114a901526116f5015260e05181818161016301526122860152612dfa90f35b6100a4565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100d0906100a8565b810190811060018060401b038211176100e857604052565b6100b2565b906101006100f961009e565b92836100c6565b565b5f80fd5b60018060a01b031690565b61011a90610106565b90565b61012690610111565b90565b6101328161011d565b0361013957565b5f80fd5b9050519061014a82610129565b565b61015590610111565b90565b6101618161014c565b0361016857565b5f80fd5b9050519061017982610158565b565b90565b6101878161017b565b0361018e57565b5f80fd5b9050519061019f8261017e565b565b6101aa90610111565b90565b6101b6816101a1565b036101bd57565b5f80fd5b905051906101ce826101ad565b565b60018060401b031690565b6101e4816101d0565b036101eb57565b5f80fd5b905051906101fc826101db565b565b61020790610111565b90565b610213816101fe565b0361021a57565b5f80fd5b9050519061022b8261020a565b565b610140818303126102c557610244825f830161013d565b92610252836020840161016c565b926102608160408501610192565b9261026e8260608301610192565b9261027c8360808401610192565b9261028a8160a08501610192565b926102988260c08301610192565b926102c26102a98460e085016101c1565b936102b88161010086016101ef565b936101200161021e565b90565b610102565b6102e86144fa803803806102dd816100ed565b92833981019061022d565b90919293949596979899565b60401b90565b9061031468010000000000000000600160801b03916102f4565b9181191691161790565b90565b61033561033061033a926101d0565b61031e565b6101d0565b90565b90565b9061035561035061035c92610321565b61033d565b82546102fa565b9055565b61037461036f61037992610106565b61031e565b610106565b90565b61038590610360565b90565b6103919061037c565b90565b90565b6103ab6103a66103b092610394565b61031e565b610106565b90565b6103bc90610397565b90565b5f80fd5b60e01b90565b906020828203126103e2576103df915f016101ef565b90565b610102565b5f0190565b6103f461009e565b3d5f823e3d90fd5b61041061040b61041592610394565b61031e565b6101d0565b90565b906020828203126104315761042e915f01610192565b90565b610102565b5f1b90565b61044f61044a61045492610394565b610436565b61017b565b90565b60209181520190565b5f7f6c3120636f6e747261637420696e76616c696400000000000000000000000000910152565b6104946013602092610457565b61049d81610460565b0190565b6104b69060208101905f818303910152610487565b90565b156104c057565b6104c861009e565b62461bcd60e51b8152806104de600482016104a1565b0390fd5b6104eb9061037c565b90565b90565b61050561050061050a92610394565b61031e565b6104ee565b90565b60207f20636f6465000000000000000000000000000000000000000000000000000000917f706f73746572206164647265737320646f6573206e6f74206861766520616e795f8201520152565b6105676025604092610457565b6105708161050d565b0190565b6105899060208101905f81830391015261055a565b90565b1561059357565b61059b61009e565b62461bcd60e51b8152806105b160048201610574565b0390fd5b6105be9061037c565b90565b6105ca816104ee565b036105d157565b5f80fd5b905051906105e2826105c1565b565b906020828203126105fd576105fa915f016105d5565b90565b610102565b60207f2062726964676500000000000000000000000000000000000000000000000000917f696e73756666696369656e742064656c61796564206d6573736167657320696e5f8201520152565b61065c6027604092610457565b61066581610602565b0190565b61067e9060208101905f81830391015261064f565b90565b1561068857565b61069061009e565b62461bcd60e51b8152806106a660048201610669565b0390fd5b6106b39061037c565b90565b60207f61766520616e7920636f64650000000000000000000000000000000000000000917f7465654b65794d616e61676572206164647265737320646f6573206e6f7420685f8201520152565b610710602c604092610457565b610719816106b6565b0190565b6107329060208101905f818303910152610703565b90565b1561073c57565b61074461009e565b62461bcd60e51b81528061075a6004820161071d565b0390fd5b9061076a5f1991610436565b9181191691161790565b61077d9061017b565b90565b5f1c90565b61078e90610780565b90565b906107a66107a16107ad92610774565b610785565b825461075e565b9055565b6107ba9061017b565b9052565b9160206107df9294936107d860408201965f8301906107b1565b01906107b1565b565b90919395976107ff9099939597996107f833610b48565b600a610340565b61080889610388565b61082261081c6108175f6103b3565b610111565b91610111565b1480156109e2575b986108376108839a6104b9565b60c05261085f610846826104e2565b3b6108596108535f6104f1565b916104ee565b1161058c565b608052602061086d826105b5565b63eca067ad9061087b61009e565b9a8b926103c3565b82528180610893600482016103e7565b03915afa9788156109dd576109a5986108c6915f916109af575b506108c06108ba5f6104f1565b916104ee565b11610681565b60a0526108ee6108d5826106aa565b3b6108e86108e25f6104f1565b916104ee565b11610735565b60e0526108fe815f600101610791565b61090b8260018001610791565b907fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec9161094261093961009e565b928392836107be565b0390a1610953816002600101610791565b610961826003600101610791565b907fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b9161099861098f61009e565b928392836107be565b0390a16005600101610791565b6109ad61115a565b565b6109d0915060203d81116109d6575b6109c881836100c6565b8101906105e4565b5f6108ad565b503d6109be565b6103ec565b50610a0760206109f18b610388565b63b80777ea906109ff61009e565b9384926103c3565b82528180610a17600482016103e7565b03915afa908115610b21575f91610af3575b50610a3c610a365f6103fc565b916101d0565b119889610a54575b6108376108839a919a505061082a565b610a7a99506020610a6482610388565b6309bd5a6090610a7261009e565b9c8d926103c3565b82528180610a8a600482016103e7565b03915afa998a15610aee576108839a610837915f91610ac0575b50610ab7610ab15f61043b565b9161017b565b119a5050610a44565b610ae1915060203d8111610ae7575b610ad981836100c6565b810190610418565b5f610aa4565b503d610acf565b6103ec565b610b14915060203d8111610b1a575b610b0c81836100c6565b8101906103c9565b5f610a29565b503d610b02565b6103ec565b610b2f90610111565b9052565b9190610b46905f60208501940190610b26565b565b80610b63610b5d610b585f6103b3565b610111565b91610111565b14610b7357610b71906116a0565b565b610b96610b7f5f6103b3565b5f918291631e4fbdf760e01b835260048301610b33565b0390fd5b5490565b90565b610bb5610bb0610bba92610b9e565b61031e565b6104ee565b90565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610c176033604092610457565b610c2081610bbd565b0190565b610c399060208101905f818303910152610c0a565b90565b15610c4357565b610c4b61009e565b62461bcd60e51b815280610c6160048201610c24565b0390fd5b610c6f90516101a1565b90565b610c86610c81610c8b926104ee565b61031e565b6101d0565b90565b60018060401b031690565b610ca5610caa91610780565b610c8e565b90565b610cb79054610c99565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610d14603c604092610457565b610d1d81610cba565b0190565b610d369060208101905f818303910152610d07565b90565b15610d4057565b610d4861009e565b62461bcd60e51b815280610d5e60048201610d21565b0390fd5b634e487b7160e01b5f52603260045260245ffd5b5f5260205f2090565b610d8881610b9a565b821015610da257610d9a600391610d76565b910201905f90565b610d62565b90565b610db6610dbb91610780565b610da7565b90565b610dc89054610daa565b90565b610dd5905161011d565b90565b5f910312610de257565b610102565b634e487b7160e01b5f52601160045260245ffd5b610e0a610e10919392936104ee565b926104ee565b91610e1c8382026104ee565b928184041490151715610e2b57565b610de7565b610e3b906003610dfb565b90565b1b90565b91906008610e5d910291610e575f1984610e3e565b92610e3e565b9181191691161790565b9190610e7d610e78610e8593610774565b610785565b908354610e42565b9055565b5f90565b610e9f91610e99610e89565b91610e67565b565b5f6002610ec792610eb483808301610e8d565b610ec18360018301610e8d565b01610e8d565b565b634e487b7160e01b5f525f60045260245ffd5b905f03610eee57610eec90610ea1565b565b610ec9565b5b818110610eff575050565b80610f0c5f600393610edc565b01610ef4565b9091828110610f21575b505050565b610f3f610f39610f33610f4a95610e30565b92610e30565b92610d76565b918201910190610ef3565b5f8080610f1c565b90680100000000000000008111610f7b5781610f70610f7993610b9a565b90828155610f12565b565b6100b2565b5f610f8a91610f52565b565b905f03610f9e57610f9c90610f80565b565b610ec9565b610fad905161014c565b90565b610fbf610fc5919392936104ee565b926104ee565b8203918211610fd057565b610de7565b610fde906104ee565b9052565b9190610ff5905f60208501940190610fd5565b565b6110009061017b565b9052565b9060c06110b160066110b99461102861101f5f830154610daa565b5f870190610ff7565b6110426110386001830154610daa565b6020870190610ff7565b61105c6110526002830154610daa565b6040870190610ff7565b61107661106c6003830154610daa565b6060870190610ff7565b6110906110866004830154610daa565b6080870190610ff7565b6110aa6110a06005830154610daa565b60a0870190610ff7565b0154610daa565b910190610ff7565b565b91906110ce905f60e08501940190611004565b565b60401c90565b6110e26110e7916110d0565b610c8e565b90565b6110f490546110d6565b90565b611103611109916101d0565b916101d0565b019060018060401b03821161111a57565b610de7565b9061113060018060401b0391610436565b9181191691161790565b9061114f61114a61115692610321565b61033d565b825461111f565b9055565b6111816111676008610b9a565b61117a6111746001610ba1565b916104ee565b1115610c3c565b61119361118e60c0610c65565b610388565b6111ad6111a76111a25f6103b3565b610111565b91610111565b145f1461159f576111e26111c042610c72565b5b6111dc6111d66111d1600a610cad565b6101d0565b916101d0565b11610d39565b6111ec6008610b9a565b6111fe6111f85f6104f1565b916104ee565b11611471575b61121661121160a0610fa3565b6105b5565b61124863d5719dc2602061123261122d60a0610fa3565b6105b5565b63eca067ad9061124061009e565b9485926103c3565b82528180611258600482016103e7565b03915afa92831561146c5761129d6112886112a8956020955f9161143f575b506112826001610ba1565b90610fb0565b9261129161009e565b958694859384936103c3565b835260048301610fe2565b03915afa801561143a576112c8915f9161140c575b506004600101610791565b6112da6112d560c0610c65565b610388565b6112f46112ee6112e95f6103b3565b610111565b91610111565b145f146113815761131e6113124361130c6001610ba1565b90610fb0565b405b6006600101610791565b60016113567f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc9161134d61009e565b918291826110bb565b0390a161137f61137861136842610c72565b611372600a6110ea565b906110f7565b600a61113a565b565b6113ae602061139861139360c0610c65565b610388565b6309bd5a60906113a661009e565b9384926103c3565b825281806113be600482016103e7565b03915afa80156114075761131e915f916113d9575b50611314565b6113fa915060203d8111611400575b6113f281836100c6565b810190610418565b5f6113d3565b503d6113e8565b6103ec565b61142d915060203d8111611433575b61142581836100c6565b810190610418565b5f6112bd565b503d61141b565b6103ec565b61145f9150863d8111611465575b61145781836100c6565b8101906105e4565b5f611277565b503d61144d565b6103ec565b61149461148b5f61148460088290610d7f565b5001610dbe565b60018001610791565b6114b96114af60026114a860085f90610d7f565b5001610dbe565b6003600101610791565b6114d36114c96006600101610dbe565b6005600101610791565b6114e56114e06080610dcb565b6104e2565b63daeab4126115015f6114fa60088290610d7f565b5001610dbe565b611519600161151260085f90610d7f565b5001610dbe565b92803b1561159a5761153e5f809461154961153261009e565b978896879586946103c3565b8452600484016107be565b03925af1801561159557611569575b506115645f6008610f8c565b611204565b611588905f3d811161158e575b61158081836100c6565b810190610dd8565b5f611558565b503d611576565b6103ec565b6103bf565b6115cc60206115b66115b160c0610c65565b610388565b63b80777ea906115c461009e565b9384926103c3565b825281806115dc600482016103e7565b03915afa8015611625576111e2915f916115f7575b506111c1565b611618915060203d811161161e575b61161081836100c6565b8101906103c9565b5f6115f1565b503d611606565b6103ec565b60018060a01b031690565b61164161164691610780565b61162a565b90565b6116539054611635565b90565b9061166760018060a01b0391610436565b9181191691161790565b61167a9061037c565b90565b90565b9061169561169061169c92611671565b61167d565b8254611656565b9055565b6116a95f611649565b6116b3825f611680565b906116e76116e17f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093611671565b91611671565b916116f061009e565b806116fa816103e7565b0390a356fe60806040526004361015610015575b36610b4857005b61001f5f3561013e565b80633a009a06146101395780633ceaae7d14610134578063420caf3a1461012f5780634bd167c91461012a578063697b5e62146101255780636c4c206014610120578063715018a61461011b57806380959721146101165780638da5cb5b146101115780638fed55a31461010c578063a56ec6cd14610107578063c3f2dbd314610102578063e50c6156146100fd578063e78cea92146100f8578063eb60553a146100f3578063ee1c28b8146100ee578063f223055c146100e95763f2fde38b0361000e57610b15565b610ac4565b610a8f565b610a4d565b6109d7565b61094e565b61085a565b6107e1565b6106aa565b61063c565b6105d9565b610554565b610521565b6104e7565b610455565b6103aa565b61031c565b6101e9565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261015c57565b61014e565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b90565b6101a76101a26101ac92610185565b610190565b610185565b90565b6101b890610193565b90565b6101c4906101af565b90565b6101d0906101bb565b9052565b91906101e7905f602085019401906101c7565b565b34610219576101f9366004610152565b610215610204610161565b61020c610144565b918291826101d4565b0390f35b61014a565b5f1c90565b90565b6102326102379161021e565b610223565b90565b6102449054610226565b90565b60016102545f820161023a565b916102616001830161023a565b9161026e6002820161023a565b9161027b6003830161023a565b916102886004820161023a565b916102a1600661029a6005850161023a565b930161023a565b90565b90565b6102b0906102a4565b9052565b949290979695939160e08601985f87016102cd916102a7565b602086016102da916102a7565b604085016102e7916102a7565b606084016102f4916102a7565b60808301610301916102a7565b60a0820161030e916102a7565b60c00161031a916102a7565b565b346103535761032c366004610152565b61034f610337610247565b93610346979597939193610144565b978897886102b4565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b610385906101af565b90565b6103919061037c565b9052565b91906103a8905f60208501940190610388565b565b346103da576103ba366004610152565b6103d66103c5610358565b6103cd610144565b91829182610395565b0390f35b61014a565b1c90565b67ffffffffffffffff1690565b61040090600861040593026103df565b6103e3565b90565b9061041391546103f0565b90565b610423600a600890610408565b90565b67ffffffffffffffff1690565b61043c90610426565b9052565b9190610453905f60208501940190610433565b565b3461048557610465366004610152565b610481610470610416565b610478610144565b91829182610440565b0390f35b61014a565b90565b61049d9060086104a293026103df565b61048a565b90565b906104b0915461048d565b90565b6104bf60095f906104a5565b90565b90565b6104ce906104c2565b9052565b91906104e5905f602085019401906104c5565b565b34610517576104f7366004610152565b6105136105026104b3565b61050a610144565b918291826104d2565b0390f35b61014a565b5f0190565b3461054f57610531366004610152565b61053961121c565b610541610144565b8061054b8161051c565b0390f35b61014a565b3461058257610564366004610152565b61056c6117b2565b610574610144565b8061057e8161051c565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6105b4906101af565b90565b6105c0906105ab565b9052565b91906105d7905f602085019401906105b7565b565b34610609576105e9366004610152565b6106056105f4610587565b6105fc610144565b918291826105c4565b0390f35b61014a565b61061790610185565b90565b6106239061060e565b9052565b919061063a905f6020850194019061061a565b565b3461066c5761064c366004610152565b6106686106576117ec565b61065f610144565b91829182610627565b0390f35b61014a565b5f80fd5b5f80fd5b908160609103126106875790565b610675565b906060828203126106a5576106a2915f01610679565b90565b61014e565b346106d8576106c26106bd36600461068c565b611ba7565b6106ca610144565b806106d48161051c565b0390f35b61014a565b6106e6816104c2565b036106ed57565b5f80fd5b905035906106fe826106dd565b565b9060208282031261071957610716915f016106f1565b90565b61014e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61074881610732565b8210156107625761075a600391610736565b910201905f90565b61071e565b60089061077382610732565b8110156107ab576107839161073f565b5061078f5f820161023a565b916107a860026107a16001850161023a565b930161023a565b90565b5f80fd5b6040906107d86107df94969593966107ce60608401985f8501906102a7565b60208301906102a7565b01906102a7565b565b34610814576108106107fc6107f7366004610700565b610767565b610807939193610144565b938493846107af565b0390f35b61014a565b610822816102a4565b0361082957565b5f80fd5b9050359061083a82610819565b565b9060208282031261085557610852915f0161082d565b90565b61014e565b346108885761087261086d36600461083c565b611ce8565b61087a610144565b806108848161051c565b0390f35b61014a565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156108d35781359167ffffffffffffffff83116108ce5760200192600183028401116108c957565b610895565b610891565b61088d565b6108e18161060e565b036108e857565b5f80fd5b905035906108f9826108d8565b565b9060a08282031261094957610912815f8401610679565b92606083013567ffffffffffffffff81116109445761093683610941928601610899565b9390946080016108ec565b90565b610671565b61014e565b346109805761096a6109613660046108fb565b929190916121ed565b610972610144565b8061097c8161051c565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6109b2906101af565b90565b6109be906109a9565b9052565b91906109d5905f602085019401906109b5565b565b34610a07576109e7366004610152565b610a036109f2610985565b6109fa610144565b918291826109c2565b0390f35b61014a565b610a1581610426565b03610a1c57565b5f80fd5b90503590610a2d82610a0c565b565b90602082820312610a4857610a45915f01610a20565b90565b61014e565b34610a7b57610a65610a60366004610a2f565b612646565b610a6d610144565b80610a778161051c565b0390f35b61014a565b610a8c600a5f90610408565b90565b34610abf57610a9f366004610152565b610abb610aaa610a80565b610ab2610144565b91829182610440565b0390f35b61014a565b34610af257610adc610ad736600461083c565b6126dd565b610ae4610144565b80610aee8161051c565b0390f35b61014a565b90602082820312610b1057610b0d915f016108ec565b90565b61014e565b34610b4357610b2d610b28366004610af7565b61274d565b610b35610144565b80610b3f8161051c565b0390f35b61014a565b5f80fd5b90565b610b63610b5e610b6892610b4c565b610190565b6104c2565b90565b60209181520190565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610bce6033604092610b6b565b610bd781610b74565b0190565b610bf09060208101905f818303910152610bc1565b90565b15610bfa57565b610c02610144565b62461bcd60e51b815280610c1860048201610bdb565b0390fd5b90565b610c33610c2e610c3892610c1c565b610190565b610185565b90565b610c4490610c1f565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610c7390610c4b565b810190811067ffffffffffffffff821117610c8d57604052565b610c55565b60e01b90565b90505190610ca582610a0c565b565b90602082820312610cc057610cbd915f01610c98565b90565b61014e565b610ccd610144565b3d5f823e3d90fd5b610ce9610ce4610cee926104c2565b610190565b610426565b90565b610cfd610d029161021e565b6103e3565b90565b610d0f9054610cf1565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610d6c603c604092610b6b565b610d7581610d12565b0190565b610d8e9060208101905f818303910152610d5f565b90565b15610d9857565b610da0610144565b62461bcd60e51b815280610db660048201610d79565b0390fd5b610dce610dc9610dd392610c1c565b610190565b6104c2565b90565b5f1b90565b90610de75f1991610dd6565b9181191691161790565b610dfa906102a4565b90565b610e069061021e565b90565b90610e1e610e19610e2592610df1565b610dfd565b8254610ddb565b9055565b5f910312610e3357565b61014e565b916020610e59929493610e5260408201965f8301906102a7565b01906102a7565b565b634e487b7160e01b5f52601160045260245ffd5b610e7e610e84919392936104c2565b926104c2565b91610e908382026104c2565b928184041490151715610e9f57565b610e5b565b610eaf906003610e6f565b90565b1b90565b91906008610ed1910291610ecb5f1984610eb2565b92610eb2565b9181191691161790565b9190610ef1610eec610ef993610df1565b610dfd565b908354610eb6565b9055565b5f90565b610f1391610f0d610efd565b91610edb565b565b5f6002610f3b92610f2883808301610f01565b610f358360018301610f01565b01610f01565b565b634e487b7160e01b5f525f60045260245ffd5b905f03610f6257610f6090610f15565b565b610f3d565b5b818110610f73575050565b80610f805f600393610f50565b01610f68565b9091828110610f95575b505050565b610fb3610fad610fa7610fbe95610ea4565b92610ea4565b92610736565b918201910190610f67565b5f8080610f90565b90680100000000000000008111610fef5781610fe4610fed93610732565b90828155610f86565b565b610c55565b5f610ffe91610fc6565b565b905f036110125761101090610ff4565b565b610f3d565b90505190611024826106dd565b565b9060208282031261103f5761103c915f01611017565b90565b61014e565b611053611059919392936104c2565b926104c2565b820391821161106457565b610e5b565b9050519061107682610819565b565b906020828203126110915761108e915f01611069565b90565b61014e565b61109f906102a4565b9052565b9060c06111506006611158946110c76110be5f830154610226565b5f870190611096565b6110e16110d76001830154610226565b6020870190611096565b6110fb6110f16002830154610226565b6040870190611096565b61111561110b6003830154610226565b6060870190611096565b61112f6111256004830154610226565b6080870190611096565b61114961113f6005830154610226565b60a0870190611096565b0154610226565b910190611096565b565b919061116d905f60e085019401906110a3565b565b60401c90565b6111816111869161116f565b6103e3565b90565b6111939054611175565b90565b6111a26111a891610426565b91610426565b019067ffffffffffffffff82116111bb57565b610e5b565b906111d367ffffffffffffffff91610dd6565b9181191691161790565b6111f16111ec6111f692610426565b610190565b610426565b90565b90565b9061121161120c611218926111dd565b6111f9565b82546111c0565b9055565b6112436112296008610732565b61123c6112366001610b4f565b916104c2565b1115610bf3565b61126c7f000000000000000000000000000000000000000000000000000000000000000061037c565b61128661128061127b5f610c3b565b61060e565b9161060e565b145f146116eb576112bb61129942610cd5565b5b6112b56112af6112aa600a610d05565b610426565b91610426565b11610d91565b6112c56008610732565b6112d76112d15f610dba565b916104c2565b116115a6575b6113067f00000000000000000000000000000000000000000000000000000000000000006109a9565b61134f63d5719dc260206113397f00000000000000000000000000000000000000000000000000000000000000006109a9565b63eca067ad90611347610144565b948592610c92565b8252818061135f6004820161051c565b03915afa9283156115a1576113a461138f6113af956020955f91611574575b506113896001610b4f565b90611044565b92611398610144565b95869485938493610c92565b8352600483016104d2565b03915afa801561156f576113cf915f91611541575b506004600101610e09565b6113f87f000000000000000000000000000000000000000000000000000000000000000061037c565b61141261140c6114075f610c3b565b61060e565b9161060e565b145f1461149f5761143c6114304361142a6001610b4f565b90611044565b405b6006600101610e09565b60016114747f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc9161146b610144565b9182918261115a565b0390a161149d61149661148642610cd5565b611490600a611189565b90611196565b600a6111fc565b565b6114e360206114cd7f000000000000000000000000000000000000000000000000000000000000000061037c565b6309bd5a60906114db610144565b938492610c92565b825281806114f36004820161051c565b03915afa801561153c5761143c915f9161150e575b50611432565b61152f915060203d8111611535575b6115278183610c69565b810190611078565b5f611508565b503d61151d565b610cc5565b611562915060203d8111611568575b61155a8183610c69565b810190611078565b5f6113c4565b503d611550565b610cc5565b6115949150863d811161159a575b61158c8183610c69565b810190611026565b5f61137e565b503d611582565b610cc5565b6115c96115c05f6115b96008829061073f565b500161023a565b60018001610e09565b6115ee6115e460026115dd60085f9061073f565b500161023a565b6003600101610e09565b6116086115fe600660010161023a565b6005600101610e09565b6116317f00000000000000000000000000000000000000000000000000000000000000006105ab565b63daeab41261164d5f6116466008829061073f565b500161023a565b611665600161165e60085f9061073f565b500161023a565b92803b156116e65761168a5f809461169561167e610144565b97889687958694610c92565b845260048401610e38565b03925af180156116e1576116b5575b506116b05f6008611000565b6112dd565b6116d4905f3d81116116da575b6116cc8183610c69565b810190610e29565b5f6116a4565b503d6116c2565b610cc5565b610c47565b61172f60206117197f000000000000000000000000000000000000000000000000000000000000000061037c565b63b80777ea90611727610144565b938492610c92565b8252818061173f6004820161051c565b03915afa8015611788576112bb915f9161175a575b5061129a565b61177b915060203d8111611781575b6117738183610c69565b810190610ca7565b5f611754565b503d611769565b610cc5565b611795612758565b61179d61179f565b565b6117b06117ab5f610c3b565b6127f0565b565b6117ba61178d565b565b5f90565b60018060a01b031690565b6117d76117dc9161021e565b6117c0565b90565b6117e990546117cb565b90565b6117f46117bc565b506117fe5f6117df565b90565b6118129061180d612758565b611a6f565b565b5f7f6368616c6c656e676520646f6573206e6f742065786973740000000000000000910152565b6118486018602092610b6b565b61185181611814565b0190565b61186a9060208101905f81830391015261183b565b90565b1561187457565b61187c610144565b62461bcd60e51b81528061189260048201611855565b0390fd5b60016118a291016104c2565b90565b90565b90565b5f5260205f2090565b5490565b6118c1816118b4565b8210156118db576118d36003916118ab565b910201905f90565b61071e565b356118ea81610819565b90565b9061193160406002611937946119105f820161190a5f88016118e0565b90610e09565b61192960018201611923602088016118e0565b90610e09565b0192016118e0565b90610e09565b565b919061194a57611948916118ed565b565b610f3d565b908154916801000000000000000083101561197f578261197791600161197d950181556118b8565b90611939565b565b610c55565b61199861199361199d92610c1c565b610190565b610426565b90565b506119af90602081019061082d565b90565b9060406119f76119ff936119d46119cb5f8301836119a0565b5f860190611096565b6119ee6119e460208301836119a0565b6020860190611096565b828101906119a0565b910190611096565b565b9190611a14905f606085019401906119b2565b565b5f7f617373657274696f6e206e6f7420666f756e6400000000000000000000000000910152565b611a4a6013602092610b6b565b611a5381611a16565b0190565b611a6c9060208101905f818303910152611a3d565b90565b611a95611a7c6008610732565b611a8f611a896001610b4f565b916104c2565b1161186d565b611a9e8161287a565b90611aa85f610dba565b5b80611ac5611abf611aba6008610732565b6104c2565b916104c2565b1015611b855782611afa611af4611aef611aea611ae46008879061073f565b506118a5565b6128e5565b6102a4565b916102a4565b14611b0d57611b0890611896565b611aa9565b509050611b1b5f6008611000565b611b2f611b2860086118a8565b829061194f565b611b42611b3b5f611984565b600a6111fc565b611b4a61121c565b611b807fe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b91611b77610144565b91829182611a01565b0390a1565b611b8d610144565b62461bcd60e51b815280611ba360048201611a57565b0390fd5b611bb090611801565b565b611bc390611bbe612758565b611c6d565b565b60207f617373657274696f6e73206172652070656e64696e6700000000000000000000917f63616e6e6f742075706461746520636f6e6669672068617368207768696c65205f8201520152565b611c1f6036604092610b6b565b611c2881611bc5565b0190565b611c419060208101905f818303910152611c12565b90565b15611c4b57565b611c53610144565b62461bcd60e51b815280611c6960048201611c2c565b0390fd5b611c92611c7a6008610732565b611c8c611c865f610dba565b916104c2565b14611c44565b611ca0816002600101610e09565b611cad600360010161023a565b7fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b91611ce3611cda610144565b92839283610e38565b0390a1565b611cf190611bb2565b565b5090565b90565b611d0e611d09611d1392611cf7565b610190565b6104c2565b90565b5f7f696e76616c6964207369676e6174757265206c656e6774680000000000000000910152565b611d4a6018602092610b6b565b611d5381611d16565b0190565b611d6c9060208101905f818303910152611d3d565b90565b15611d7657565b611d7e610144565b62461bcd60e51b815280611d9460048201611d57565b0390fd5b90565b90565b611daa611daf916102a4565b611d9b565b9052565b602081611dc5611dcd93839695611d9e565b018092611d9e565b0190565b60200190565b5190565b5f80fd5b90611df2611deb610144565b9283610c69565b565b67ffffffffffffffff8111611e1257611e0e602091610c4b565b0190565b610c55565b90825f939282370152565b90929192611e37611e3282611df4565b611ddf565b93818552602085019082840111611e5357611e5192611e17565b565b611ddb565b611e63913691611e22565b90565b151590565b611e7481611e66565b03611e7b57565b5f80fd5b90505190611e8c82611e6b565b565b90602082820312611ea757611ea4915f01611e7f565b90565b61014e565b5f7f696e76616c696420746565207369676e61747572650000000000000000000000910152565b611ee06015602092610b6b565b611ee981611eac565b0190565b611f029060208101905f818303910152611ed3565b90565b15611f0c57565b611f14610144565b62461bcd60e51b815280611f2a60048201611eed565b0390fd5b5f7f617070636861696e20626c6f636b206861736820756e6368616e676564000000910152565b611f62601d602092610b6b565b611f6b81611f2e565b0190565b611f849060208101905f818303910152611f55565b90565b15611f8e57565b611f96610144565b62461bcd60e51b815280611fac60048201611f6f565b0390fd5b5f7f617373657274696f6e20616c7265616479206578697374730000000000000000910152565b611fe46018602092610b6b565b611fed81611fb0565b0190565b6120069060208101905f818303910152611fd7565b90565b1561201057565b612018610144565b62461bcd60e51b81528061202e60048201611ff1565b0390fd5b90565b61204961204461204e92612032565b610190565b6104c2565b90565b61205d6120629161021e565b61048a565b90565b61206f9054612051565b90565b612081612087919392936104c2565b926104c2565b820180921161209257565b610e5b565b6120ab6120a66120b0926104c2565b610190565b6104c2565b90565b90565b906120cb6120c66120d292612097565b6120b3565b8254610ddb565b9055565b6120df90610193565b90565b6120eb906120d6565b90565b6120f7906101af565b90565b612103906101af565b90565b905090565b6121165f8092612106565b0190565b6121239061210b565b90565b9061213861213383611df4565b611ddf565b918252565b606090565b3d5f1461215d576121523d612126565b903d5f602084013e5b565b61216561213d565b9061215b565b5f7f7061796d656e74206661696c6564000000000000000000000000000000000000910152565b61219f600e602092610b6b565b6121a88161216b565b0190565b6121c19060208101905f818303910152612192565b90565b156121cb57565b6121d3610144565b62461bcd60e51b8152806121e9600482016121ac565b0390fd5b929060206122dd9195939561221f612206828990611cf3565b6122196122136041611cfa565b916104c2565b14611d6f565b6122288661287a565b966122d26122bd61224161223c6001611d98565b6129b2565b61226a8b9161225c612251610144565b9384928a8401611db3565b888201810382520382610c69565b61227c61227682611dd7565b91611dd1565b20936122b76122aa7f00000000000000000000000000000000000000000000000000000000000000006101bb565b94637217efcd9692611e58565b90612a51565b926122c6610144565b95869485938493610c92565b835260048301610627565b03915afa8015612509576122f8915f916124db575b50611f05565b61232a6123065f85016118e0565b61232361231d6123186001800161023a565b6102a4565b916102a4565b1415611f87565b6123335f610dba565b5b8061235061234a6123456008610732565b6104c2565b916104c2565b101561239d57612398906123938661238c61238661238161237c6123766008889061073f565b506118a5565b6128e5565b6102a4565b916102a4565b1415612009565b611896565b612334565b50916123d69193506123af6008610732565b6123c16123bb5f610dba565b916104c2565b146124b0575b6123d160086118a8565b61194f565b6123e06008610732565b6123f36123ed6002612035565b916104c2565b146123fc575b50565b5f8061247b6124766124aa9461242e6124276124186001610b4f565b6124226009612065565b612072565b60096120b6565b6124386009612065565b61246e7f37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a791612465610144565b918291826104d2565b0390a16120e2565b6120ee565b612484306120fa565b3161248d610144565b90816124988161211a565b03925af16124a4612142565b506121c4565b5f6123f9565b6124d66124cf6124bf42610cd5565b6124c9600a611189565b90611196565b600a6111fc565b6123c7565b6124fc915060203d8111612502575b6124f48183610c69565b810190611e8e565b5f6122f2565b503d6124ea565b610cc5565b61251f9061251a612758565b612614565b565b60207f68696c6520617373657274696f6e2069732070656e64696e6700000000000000917f63616e6e6f7420757064617465206368616c6c656e67652077696e646f7720775f8201520152565b61257b6039604092610b6b565b61258481612521565b0190565b61259d9060208101905f81830391015261256e565b90565b156125a757565b6125af610144565b62461bcd60e51b8152806125c560048201612588565b0390fd5b60401b90565b906125ea6fffffffffffffffff0000000000000000916125c9565b9181191691161790565b90612609612604612610926111dd565b6111f9565b82546125cf565b9055565b6126449061263d6126256008610732565b6126376126315f610dba565b916104c2565b146125a0565b600a6125f4565b565b61264f9061250e565b565b6126629061265d612758565b612664565b565b6126896126716008610732565b61268361267d5f610dba565b916104c2565b14611c44565b612696815f600101610e09565b6126a26001800161023a565b7fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec916126d86126cf610144565b92839283610e38565b0390a1565b6126e690612651565b565b6126f9906126f4612758565b6126fb565b565b8061271661271061270b5f610c3b565b61060e565b9161060e565b1461272657612724906127f0565b565b6127496127325f610c3b565b5f918291631e4fbdf760e01b835260048301610627565b0390fd5b612756906126e8565b565b6127606117ec565b61277961277361276e612a73565b61060e565b9161060e565b0361278057565b6127a261278b612a73565b5f91829163118cdaa760e01b835260048301610627565b0390fd5b906127b760018060a01b0391610dd6565b9181191691161790565b6127ca906101af565b90565b90565b906127e56127e06127ec926127c1565b6127cd565b82546127a6565b9055565b6127f95f6117df565b612803825f6127d0565b906128376128317f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936127c1565b916127c1565b91612840610144565b8061284a8161051c565b0390a3565b6020939261286e8583612866829561287697611d9e565b018092611d9e565b018092611d9e565b0190565b612882610efd565b506128cf6128915f83016118e0565b6128c06128ac60406128a5602087016118e0565b95016118e0565b6128b4610144565b9485936020850161284f565b60208201810382520382610c69565b6128e16128db82611dd7565b91611dd1565b2090565b6128ed610efd565b5061293a6128fc5f830161023a565b61292b61291760026129106001870161023a565b950161023a565b61291f610144565b9485936020850161284f565b60208201810382520382610c69565b61294c61294682611dd7565b91611dd1565b2090565b9461299e6020809998959661299682809961298e826129a69a6129866129ae9f8061297e859e928693611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b0190565b6129ba610efd565b50612a3b6129c95f830161023a565b612a2c6129d86001850161023a565b936129e56002820161023a565b906129f26003820161023a565b6129fe6004830161023a565b90612a176006612a106005860161023a565b940161023a565b93612a20610144565b98899760208901612950565b60208201810382520382610c69565b612a4d612a4782611dd7565b91611dd1565b2090565b612a7091612a6791612a616117bc565b50612aa4565b90929192612ba1565b90565b612a7b6117bc565b503390565b5f90565b612a98612a93612a9d926104c2565b610dd6565b6102a4565b90565b5f90565b919091612aaf6117bc565b50612ab8612a80565b50612ac1610efd565b50612acb83611dd7565b612ade612ad86041611cfa565b916104c2565b145f14612b2557612b1e9192612af2610efd565b50612afb610efd565b50612b04612aa0565b506020810151606060408301519201515f1a909192612cfe565b9192909190565b50612b2f5f610c3b565b90612b43612b3e600294611dd7565b612a84565b91929190565b634e487b7160e01b5f52602160045260245ffd5b60041115612b6757565b612b49565b90612b7682612b5d565b565b9190612b8b905f602085019401906102a7565b565b612b99612b9e9161021e565b612097565b90565b80612bb4612bae5f612b6c565b91612b6c565b145f14612bbf575050565b80612bd3612bcd6001612b6c565b91612b6c565b145f14612bf6575f63f645eedf60e01b815280612bf26004820161051c565b0390fd5b80612c0a612c046002612b6c565b91612b6c565b145f14612c3857612c34612c1d83612b8d565b5f91829163fce698f760e01b8352600483016104d2565b0390fd5b612c4b612c456003612b6c565b91612b6c565b14612c535750565b612c6e905f9182916335e2f38360e21b835260048301612b78565b0390fd5b90565b612c89612c84612c8e92612c72565b610190565b6104c2565b90565b60ff1690565b612ca090612c91565b9052565b612cd9612ce094612ccf606094989795612cc5608086019a5f8701906102a7565b6020850190612c97565b60408301906102a7565b01906102a7565b565b612cf6612cf1612cfb92610c1c565b610dd6565b6102a4565b90565b939293612d096117bc565b50612d12612a80565b50612d1b610efd565b50612d2585612b8d565b612d57612d517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612c75565b916104c2565b11612de45790612d7a602094955f94939293612d71610144565b94859485612ca4565b838052039060015afa15612ddf57612d925f51610dd6565b80612dad612da7612da25f610c3b565b61060e565b9161060e565b14612dc3575f91612dbd5f612ce2565b91929190565b50612dcd5f610c3b565b600191612dd95f612ce2565b91929190565b610cc5565b505050612df05f610c3b565b906003929192919056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\0`@R4a\0\x99Wa\0'a\0\x15a\x02\xCAV[\x98\x97\x90\x97\x96\x91\x96\x95\x92\x95\x94\x93\x94a\x07\xE1V[a\0/a\0\x9EV[a-\xFAa\x17\0\x829`\x80Q\x81\x81\x81a\x05\x89\x01Ra\x16\r\x01R`\xA0Q\x81\x81\x81a\t\x87\x01R\x81\x81a\x12\xE2\x01Ra\x13\x15\x01R`\xC0Q\x81\x81\x81a\x03Z\x01R\x81\x81a\x12H\x01R\x81\x81a\x13\xD4\x01R\x81\x81a\x14\xA9\x01Ra\x16\xF5\x01R`\xE0Q\x81\x81\x81a\x01c\x01Ra\"\x86\x01Ra-\xFA\x90\xF3[a\0\xA4V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xD0\x90a\0\xA8V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\xE8W`@RV[a\0\xB2V[\x90a\x01\0a\0\xF9a\0\x9EV[\x92\x83a\0\xC6V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x1A\x90a\x01\x06V[\x90V[a\x01&\x90a\x01\x11V[\x90V[a\x012\x81a\x01\x1DV[\x03a\x019WV[_\x80\xFD[\x90PQ\x90a\x01J\x82a\x01)V[V[a\x01U\x90a\x01\x11V[\x90V[a\x01a\x81a\x01LV[\x03a\x01hWV[_\x80\xFD[\x90PQ\x90a\x01y\x82a\x01XV[V[\x90V[a\x01\x87\x81a\x01{V[\x03a\x01\x8EWV[_\x80\xFD[\x90PQ\x90a\x01\x9F\x82a\x01~V[V[a\x01\xAA\x90a\x01\x11V[\x90V[a\x01\xB6\x81a\x01\xA1V[\x03a\x01\xBDWV[_\x80\xFD[\x90PQ\x90a\x01\xCE\x82a\x01\xADV[V[`\x01\x80`@\x1B\x03\x16\x90V[a\x01\xE4\x81a\x01\xD0V[\x03a\x01\xEBWV[_\x80\xFD[\x90PQ\x90a\x01\xFC\x82a\x01\xDBV[V[a\x02\x07\x90a\x01\x11V[\x90V[a\x02\x13\x81a\x01\xFEV[\x03a\x02\x1AWV[_\x80\xFD[\x90PQ\x90a\x02+\x82a\x02\nV[V[a\x01@\x81\x83\x03\x12a\x02\xC5Wa\x02D\x82_\x83\x01a\x01=V[\x92a\x02R\x83` \x84\x01a\x01lV[\x92a\x02`\x81`@\x85\x01a\x01\x92V[\x92a\x02n\x82``\x83\x01a\x01\x92V[\x92a\x02|\x83`\x80\x84\x01a\x01\x92V[\x92a\x02\x8A\x81`\xA0\x85\x01a\x01\x92V[\x92a\x02\x98\x82`\xC0\x83\x01a\x01\x92V[\x92a\x02\xC2a\x02\xA9\x84`\xE0\x85\x01a\x01\xC1V[\x93a\x02\xB8\x81a\x01\0\x86\x01a\x01\xEFV[\x93a\x01 \x01a\x02\x1EV[\x90V[a\x01\x02V[a\x02\xE8aD\xFA\x808\x03\x80a\x02\xDD\x81a\0\xEDV[\x92\x839\x81\x01\x90a\x02-V[\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99V[`@\x1B\x90V[\x90a\x03\x14h\x01\0\0\0\0\0\0\0\0`\x01`\x80\x1B\x03\x91a\x02\xF4V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x035a\x030a\x03:\x92a\x01\xD0V[a\x03\x1EV[a\x01\xD0V[\x90V[\x90V[\x90a\x03Ua\x03Pa\x03\\\x92a\x03!V[a\x03=V[\x82Ta\x02\xFAV[\x90UV[a\x03ta\x03oa\x03y\x92a\x01\x06V[a\x03\x1EV[a\x01\x06V[\x90V[a\x03\x85\x90a\x03`V[\x90V[a\x03\x91\x90a\x03|V[\x90V[\x90V[a\x03\xABa\x03\xA6a\x03\xB0\x92a\x03\x94V[a\x03\x1EV[a\x01\x06V[\x90V[a\x03\xBC\x90a\x03\x97V[\x90V[_\x80\xFD[`\xE0\x1B\x90V[\x90` \x82\x82\x03\x12a\x03\xE2Wa\x03\xDF\x91_\x01a\x01\xEFV[\x90V[a\x01\x02V[_\x01\x90V[a\x03\xF4a\0\x9EV[=_\x82>=\x90\xFD[a\x04\x10a\x04\x0Ba\x04\x15\x92a\x03\x94V[a\x03\x1EV[a\x01\xD0V[\x90V[\x90` \x82\x82\x03\x12a\x041Wa\x04.\x91_\x01a\x01\x92V[\x90V[a\x01\x02V[_\x1B\x90V[a\x04Oa\x04Ja\x04T\x92a\x03\x94V[a\x046V[a\x01{V[\x90V[` \x91\x81R\x01\x90V[_\x7Fl1 contract invalid\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\x94`\x13` \x92a\x04WV[a\x04\x9D\x81a\x04`V[\x01\x90V[a\x04\xB6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\x87V[\x90V[\x15a\x04\xC0WV[a\x04\xC8a\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\xDE`\x04\x82\x01a\x04\xA1V[\x03\x90\xFD[a\x04\xEB\x90a\x03|V[\x90V[\x90V[a\x05\x05a\x05\0a\x05\n\x92a\x03\x94V[a\x03\x1EV[a\x04\xEEV[\x90V[` \x7F code\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fposter address does not have any_\x82\x01R\x01RV[a\x05g`%`@\x92a\x04WV[a\x05p\x81a\x05\rV[\x01\x90V[a\x05\x89\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05ZV[\x90V[\x15a\x05\x93WV[a\x05\x9Ba\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05\xB1`\x04\x82\x01a\x05tV[\x03\x90\xFD[a\x05\xBE\x90a\x03|V[\x90V[a\x05\xCA\x81a\x04\xEEV[\x03a\x05\xD1WV[_\x80\xFD[\x90PQ\x90a\x05\xE2\x82a\x05\xC1V[V[\x90` \x82\x82\x03\x12a\x05\xFDWa\x05\xFA\x91_\x01a\x05\xD5V[\x90V[a\x01\x02V[` \x7F bridge\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Finsufficient delayed messages in_\x82\x01R\x01RV[a\x06\\`'`@\x92a\x04WV[a\x06e\x81a\x06\x02V[\x01\x90V[a\x06~\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06OV[\x90V[\x15a\x06\x88WV[a\x06\x90a\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xA6`\x04\x82\x01a\x06iV[\x03\x90\xFD[a\x06\xB3\x90a\x03|V[\x90V[` \x7Fave any code\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FteeKeyManager address does not h_\x82\x01R\x01RV[a\x07\x10`,`@\x92a\x04WV[a\x07\x19\x81a\x06\xB6V[\x01\x90V[a\x072\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x07\x03V[\x90V[\x15a\x07<WV[a\x07Da\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x07Z`\x04\x82\x01a\x07\x1DV[\x03\x90\xFD[\x90a\x07j_\x19\x91a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07}\x90a\x01{V[\x90V[_\x1C\x90V[a\x07\x8E\x90a\x07\x80V[\x90V[\x90a\x07\xA6a\x07\xA1a\x07\xAD\x92a\x07tV[a\x07\x85V[\x82Ta\x07^V[\x90UV[a\x07\xBA\x90a\x01{V[\x90RV[\x91` a\x07\xDF\x92\x94\x93a\x07\xD8`@\x82\x01\x96_\x83\x01\x90a\x07\xB1V[\x01\x90a\x07\xB1V[V[\x90\x91\x93\x95\x97a\x07\xFF\x90\x99\x93\x95\x97\x99a\x07\xF83a\x0BHV[`\na\x03@V[a\x08\x08\x89a\x03\x88V[a\x08\"a\x08\x1Ca\x08\x17_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14\x80\x15a\t\xE2W[\x98a\x087a\x08\x83\x9Aa\x04\xB9V[`\xC0Ra\x08_a\x08F\x82a\x04\xE2V[;a\x08Ya\x08S_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x05\x8CV[`\x80R` a\x08m\x82a\x05\xB5V[c\xEC\xA0g\xAD\x90a\x08{a\0\x9EV[\x9A\x8B\x92a\x03\xC3V[\x82R\x81\x80a\x08\x93`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x97\x88\x15a\t\xDDWa\t\xA5\x98a\x08\xC6\x91_\x91a\t\xAFW[Pa\x08\xC0a\x08\xBA_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x06\x81V[`\xA0Ra\x08\xEEa\x08\xD5\x82a\x06\xAAV[;a\x08\xE8a\x08\xE2_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x075V[`\xE0Ra\x08\xFE\x81_`\x01\x01a\x07\x91V[a\t\x0B\x82`\x01\x80\x01a\x07\x91V[\x90\x7F\xC9\x85\xBC\xCB\xD0\xC9\x0E\x19\x7FJss\x02\n3\xBAo\xF8d\xD09\x9F\xD7\xD6\\\\|2\xFF\xB0\x15\xEC\x91a\tBa\t9a\0\x9EV[\x92\x83\x92\x83a\x07\xBEV[\x03\x90\xA1a\tS\x81`\x02`\x01\x01a\x07\x91V[a\ta\x82`\x03`\x01\x01a\x07\x91V[\x90\x7F\xB9\xEB \xB3/\xAC\x96X\x84\xCBX2a\x02%|\xAE`E\x04\xF0\xA3l\xD1\0\x8A2\x84Z\xD5\xC2\x9B\x91a\t\x98a\t\x8Fa\0\x9EV[\x92\x83\x92\x83a\x07\xBEV[\x03\x90\xA1`\x05`\x01\x01a\x07\x91V[a\t\xADa\x11ZV[V[a\t\xD0\x91P` =\x81\x11a\t\xD6W[a\t\xC8\x81\x83a\0\xC6V[\x81\x01\x90a\x05\xE4V[_a\x08\xADV[P=a\t\xBEV[a\x03\xECV[Pa\n\x07` a\t\xF1\x8Ba\x03\x88V[c\xB8\x07w\xEA\x90a\t\xFFa\0\x9EV[\x93\x84\x92a\x03\xC3V[\x82R\x81\x80a\n\x17`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x90\x81\x15a\x0B!W_\x91a\n\xF3W[Pa\n<a\n6_a\x03\xFCV[\x91a\x01\xD0V[\x11\x98\x89a\nTW[a\x087a\x08\x83\x9A\x91\x9APPa\x08*V[a\nz\x99P` a\nd\x82a\x03\x88V[c\t\xBDZ`\x90a\nra\0\x9EV[\x9C\x8D\x92a\x03\xC3V[\x82R\x81\x80a\n\x8A`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x99\x8A\x15a\n\xEEWa\x08\x83\x9Aa\x087\x91_\x91a\n\xC0W[Pa\n\xB7a\n\xB1_a\x04;V[\x91a\x01{V[\x11\x9APPa\nDV[a\n\xE1\x91P` =\x81\x11a\n\xE7W[a\n\xD9\x81\x83a\0\xC6V[\x81\x01\x90a\x04\x18V[_a\n\xA4V[P=a\n\xCFV[a\x03\xECV[a\x0B\x14\x91P` =\x81\x11a\x0B\x1AW[a\x0B\x0C\x81\x83a\0\xC6V[\x81\x01\x90a\x03\xC9V[_a\n)V[P=a\x0B\x02V[a\x03\xECV[a\x0B/\x90a\x01\x11V[\x90RV[\x91\x90a\x0BF\x90_` \x85\x01\x94\x01\x90a\x0B&V[V[\x80a\x0Bca\x0B]a\x0BX_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14a\x0BsWa\x0Bq\x90a\x16\xA0V[V[a\x0B\x96a\x0B\x7F_a\x03\xB3V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x0B3V[\x03\x90\xFD[T\x90V[\x90V[a\x0B\xB5a\x0B\xB0a\x0B\xBA\x92a\x0B\x9EV[a\x03\x1EV[a\x04\xEEV[\x90V[` \x7Ftoo many assertions\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x0C\x17`3`@\x92a\x04WV[a\x0C \x81a\x0B\xBDV[\x01\x90V[a\x0C9\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\nV[\x90V[\x15a\x0CCWV[a\x0CKa\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0Ca`\x04\x82\x01a\x0C$V[\x03\x90\xFD[a\x0Co\x90Qa\x01\xA1V[\x90V[a\x0C\x86a\x0C\x81a\x0C\x8B\x92a\x04\xEEV[a\x03\x1EV[a\x01\xD0V[\x90V[`\x01\x80`@\x1B\x03\x16\x90V[a\x0C\xA5a\x0C\xAA\x91a\x07\x80V[a\x0C\x8EV[\x90V[a\x0C\xB7\x90Ta\x0C\x99V[\x90V[` \x7Finsufficient time has passed\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\r\x14`<`@\x92a\x04WV[a\r\x1D\x81a\x0C\xBAV[\x01\x90V[a\r6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r\x07V[\x90V[\x15a\r@WV[a\rHa\0\x9EV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r^`\x04\x82\x01a\r!V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_R` _ \x90V[a\r\x88\x81a\x0B\x9AV[\x82\x10\x15a\r\xA2Wa\r\x9A`\x03\x91a\rvV[\x91\x02\x01\x90_\x90V[a\rbV[\x90V[a\r\xB6a\r\xBB\x91a\x07\x80V[a\r\xA7V[\x90V[a\r\xC8\x90Ta\r\xAAV[\x90V[a\r\xD5\x90Qa\x01\x1DV[\x90V[_\x91\x03\x12a\r\xE2WV[a\x01\x02V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0E\na\x0E\x10\x91\x93\x92\x93a\x04\xEEV[\x92a\x04\xEEV[\x91a\x0E\x1C\x83\x82\x02a\x04\xEEV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x0E+WV[a\r\xE7V[a\x0E;\x90`\x03a\r\xFBV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0E]\x91\x02\x91a\x0EW_\x19\x84a\x0E>V[\x92a\x0E>V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0E}a\x0Exa\x0E\x85\x93a\x07tV[a\x07\x85V[\x90\x83Ta\x0EBV[\x90UV[_\x90V[a\x0E\x9F\x91a\x0E\x99a\x0E\x89V[\x91a\x0EgV[V[_`\x02a\x0E\xC7\x92a\x0E\xB4\x83\x80\x83\x01a\x0E\x8DV[a\x0E\xC1\x83`\x01\x83\x01a\x0E\x8DV[\x01a\x0E\x8DV[V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x0E\xEEWa\x0E\xEC\x90a\x0E\xA1V[V[a\x0E\xC9V[[\x81\x81\x10a\x0E\xFFWPPV[\x80a\x0F\x0C_`\x03\x93a\x0E\xDCV[\x01a\x0E\xF4V[\x90\x91\x82\x81\x10a\x0F!W[PPPV[a\x0F?a\x0F9a\x0F3a\x0FJ\x95a\x0E0V[\x92a\x0E0V[\x92a\rvV[\x91\x82\x01\x91\x01\x90a\x0E\xF3V[_\x80\x80a\x0F\x1CV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x0F{W\x81a\x0Fpa\x0Fy\x93a\x0B\x9AV[\x90\x82\x81Ua\x0F\x12V[V[a\0\xB2V[_a\x0F\x8A\x91a\x0FRV[V[\x90_\x03a\x0F\x9EWa\x0F\x9C\x90a\x0F\x80V[V[a\x0E\xC9V[a\x0F\xAD\x90Qa\x01LV[\x90V[a\x0F\xBFa\x0F\xC5\x91\x93\x92\x93a\x04\xEEV[\x92a\x04\xEEV[\x82\x03\x91\x82\x11a\x0F\xD0WV[a\r\xE7V[a\x0F\xDE\x90a\x04\xEEV[\x90RV[\x91\x90a\x0F\xF5\x90_` \x85\x01\x94\x01\x90a\x0F\xD5V[V[a\x10\0\x90a\x01{V[\x90RV[\x90`\xC0a\x10\xB1`\x06a\x10\xB9\x94a\x10(a\x10\x1F_\x83\x01Ta\r\xAAV[_\x87\x01\x90a\x0F\xF7V[a\x10Ba\x108`\x01\x83\x01Ta\r\xAAV[` \x87\x01\x90a\x0F\xF7V[a\x10\\a\x10R`\x02\x83\x01Ta\r\xAAV[`@\x87\x01\x90a\x0F\xF7V[a\x10va\x10l`\x03\x83\x01Ta\r\xAAV[``\x87\x01\x90a\x0F\xF7V[a\x10\x90a\x10\x86`\x04\x83\x01Ta\r\xAAV[`\x80\x87\x01\x90a\x0F\xF7V[a\x10\xAAa\x10\xA0`\x05\x83\x01Ta\r\xAAV[`\xA0\x87\x01\x90a\x0F\xF7V[\x01Ta\r\xAAV[\x91\x01\x90a\x0F\xF7V[V[\x91\x90a\x10\xCE\x90_`\xE0\x85\x01\x94\x01\x90a\x10\x04V[V[`@\x1C\x90V[a\x10\xE2a\x10\xE7\x91a\x10\xD0V[a\x0C\x8EV[\x90V[a\x10\xF4\x90Ta\x10\xD6V[\x90V[a\x11\x03a\x11\t\x91a\x01\xD0V[\x91a\x01\xD0V[\x01\x90`\x01\x80`@\x1B\x03\x82\x11a\x11\x1AWV[a\r\xE7V[\x90a\x110`\x01\x80`@\x1B\x03\x91a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x11Oa\x11Ja\x11V\x92a\x03!V[a\x03=V[\x82Ta\x11\x1FV[\x90UV[a\x11\x81a\x11g`\x08a\x0B\x9AV[a\x11za\x11t`\x01a\x0B\xA1V[\x91a\x04\xEEV[\x11\x15a\x0C<V[a\x11\x93a\x11\x8E`\xC0a\x0CeV[a\x03\x88V[a\x11\xADa\x11\xA7a\x11\xA2_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14_\x14a\x15\x9FWa\x11\xE2a\x11\xC0Ba\x0CrV[[a\x11\xDCa\x11\xD6a\x11\xD1`\na\x0C\xADV[a\x01\xD0V[\x91a\x01\xD0V[\x11a\r9V[a\x11\xEC`\x08a\x0B\x9AV[a\x11\xFEa\x11\xF8_a\x04\xF1V[\x91a\x04\xEEV[\x11a\x14qW[a\x12\x16a\x12\x11`\xA0a\x0F\xA3V[a\x05\xB5V[a\x12Hc\xD5q\x9D\xC2` a\x122a\x12-`\xA0a\x0F\xA3V[a\x05\xB5V[c\xEC\xA0g\xAD\x90a\x12@a\0\x9EV[\x94\x85\x92a\x03\xC3V[\x82R\x81\x80a\x12X`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x92\x83\x15a\x14lWa\x12\x9Da\x12\x88a\x12\xA8\x95` \x95_\x91a\x14?W[Pa\x12\x82`\x01a\x0B\xA1V[\x90a\x0F\xB0V[\x92a\x12\x91a\0\x9EV[\x95\x86\x94\x85\x93\x84\x93a\x03\xC3V[\x83R`\x04\x83\x01a\x0F\xE2V[\x03\x91Z\xFA\x80\x15a\x14:Wa\x12\xC8\x91_\x91a\x14\x0CW[P`\x04`\x01\x01a\x07\x91V[a\x12\xDAa\x12\xD5`\xC0a\x0CeV[a\x03\x88V[a\x12\xF4a\x12\xEEa\x12\xE9_a\x03\xB3V[a\x01\x11V[\x91a\x01\x11V[\x14_\x14a\x13\x81Wa\x13\x1Ea\x13\x12Ca\x13\x0C`\x01a\x0B\xA1V[\x90a\x0F\xB0V[@[`\x06`\x01\x01a\x07\x91V[`\x01a\x13V\x7F\x91\t+\xCFU\t!\xE3\x81\xE8\x1F\x06i3 SK\x14J~V\x1C_\xC0\x8F\x19@\xD5\x08\xA8\\\xDC\x91a\x13Ma\0\x9EV[\x91\x82\x91\x82a\x10\xBBV[\x03\x90\xA1a\x13\x7Fa\x13xa\x13hBa\x0CrV[a\x13r`\na\x10\xEAV[\x90a\x10\xF7V[`\na\x11:V[V[a\x13\xAE` a\x13\x98a\x13\x93`\xC0a\x0CeV[a\x03\x88V[c\t\xBDZ`\x90a\x13\xA6a\0\x9EV[\x93\x84\x92a\x03\xC3V[\x82R\x81\x80a\x13\xBE`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x80\x15a\x14\x07Wa\x13\x1E\x91_\x91a\x13\xD9W[Pa\x13\x14V[a\x13\xFA\x91P` =\x81\x11a\x14\0W[a\x13\xF2\x81\x83a\0\xC6V[\x81\x01\x90a\x04\x18V[_a\x13\xD3V[P=a\x13\xE8V[a\x03\xECV[a\x14-\x91P` =\x81\x11a\x143W[a\x14%\x81\x83a\0\xC6V[\x81\x01\x90a\x04\x18V[_a\x12\xBDV[P=a\x14\x1BV[a\x03\xECV[a\x14_\x91P\x86=\x81\x11a\x14eW[a\x14W\x81\x83a\0\xC6V[\x81\x01\x90a\x05\xE4V[_a\x12wV[P=a\x14MV[a\x03\xECV[a\x14\x94a\x14\x8B_a\x14\x84`\x08\x82\x90a\r\x7FV[P\x01a\r\xBEV[`\x01\x80\x01a\x07\x91V[a\x14\xB9a\x14\xAF`\x02a\x14\xA8`\x08_\x90a\r\x7FV[P\x01a\r\xBEV[`\x03`\x01\x01a\x07\x91V[a\x14\xD3a\x14\xC9`\x06`\x01\x01a\r\xBEV[`\x05`\x01\x01a\x07\x91V[a\x14\xE5a\x14\xE0`\x80a\r\xCBV[a\x04\xE2V[c\xDA\xEA\xB4\x12a\x15\x01_a\x14\xFA`\x08\x82\x90a\r\x7FV[P\x01a\r\xBEV[a\x15\x19`\x01a\x15\x12`\x08_\x90a\r\x7FV[P\x01a\r\xBEV[\x92\x80;\x15a\x15\x9AWa\x15>_\x80\x94a\x15Ia\x152a\0\x9EV[\x97\x88\x96\x87\x95\x86\x94a\x03\xC3V[\x84R`\x04\x84\x01a\x07\xBEV[\x03\x92Z\xF1\x80\x15a\x15\x95Wa\x15iW[Pa\x15d_`\x08a\x0F\x8CV[a\x12\x04V[a\x15\x88\x90_=\x81\x11a\x15\x8EW[a\x15\x80\x81\x83a\0\xC6V[\x81\x01\x90a\r\xD8V[_a\x15XV[P=a\x15vV[a\x03\xECV[a\x03\xBFV[a\x15\xCC` a\x15\xB6a\x15\xB1`\xC0a\x0CeV[a\x03\x88V[c\xB8\x07w\xEA\x90a\x15\xC4a\0\x9EV[\x93\x84\x92a\x03\xC3V[\x82R\x81\x80a\x15\xDC`\x04\x82\x01a\x03\xE7V[\x03\x91Z\xFA\x80\x15a\x16%Wa\x11\xE2\x91_\x91a\x15\xF7W[Pa\x11\xC1V[a\x16\x18\x91P` =\x81\x11a\x16\x1EW[a\x16\x10\x81\x83a\0\xC6V[\x81\x01\x90a\x03\xC9V[_a\x15\xF1V[P=a\x16\x06V[a\x03\xECV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16Aa\x16F\x91a\x07\x80V[a\x16*V[\x90V[a\x16S\x90Ta\x165V[\x90V[\x90a\x16g`\x01\x80`\xA0\x1B\x03\x91a\x046V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x16z\x90a\x03|V[\x90V[\x90V[\x90a\x16\x95a\x16\x90a\x16\x9C\x92a\x16qV[a\x16}V[\x82Ta\x16VV[\x90UV[a\x16\xA9_a\x16IV[a\x16\xB3\x82_a\x16\x80V[\x90a\x16\xE7a\x16\xE1\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x16qV[\x91a\x16qV[\x91a\x16\xF0a\0\x9EV[\x80a\x16\xFA\x81a\x03\xE7V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\x0BHW\0[a\0\x1F_5a\x01>V[\x80c:\0\x9A\x06\x14a\x019W\x80c<\xEA\xAE}\x14a\x014W\x80cB\x0C\xAF:\x14a\x01/W\x80cK\xD1g\xC9\x14a\x01*W\x80ci{^b\x14a\x01%W\x80clL `\x14a\x01 W\x80cqP\x18\xA6\x14a\x01\x1BW\x80c\x80\x95\x97!\x14a\x01\x16W\x80c\x8D\xA5\xCB[\x14a\x01\x11W\x80c\x8F\xEDU\xA3\x14a\x01\x0CW\x80c\xA5n\xC6\xCD\x14a\x01\x07W\x80c\xC3\xF2\xDB\xD3\x14a\x01\x02W\x80c\xE5\x0CaV\x14a\0\xFDW\x80c\xE7\x8C\xEA\x92\x14a\0\xF8W\x80c\xEB`U:\x14a\0\xF3W\x80c\xEE\x1C(\xB8\x14a\0\xEEW\x80c\xF2#\x05\\\x14a\0\xE9Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x15V[a\n\xC4V[a\n\x8FV[a\nMV[a\t\xD7V[a\tNV[a\x08ZV[a\x07\xE1V[a\x06\xAAV[a\x06<V[a\x05\xD9V[a\x05TV[a\x05!V[a\x04\xE7V[a\x04UV[a\x03\xAAV[a\x03\x1CV[a\x01\xE9V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01\\WV[a\x01NV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\xA7a\x01\xA2a\x01\xAC\x92a\x01\x85V[a\x01\x90V[a\x01\x85V[\x90V[a\x01\xB8\x90a\x01\x93V[\x90V[a\x01\xC4\x90a\x01\xAFV[\x90V[a\x01\xD0\x90a\x01\xBBV[\x90RV[\x91\x90a\x01\xE7\x90_` \x85\x01\x94\x01\x90a\x01\xC7V[V[4a\x02\x19Wa\x01\xF96`\x04a\x01RV[a\x02\x15a\x02\x04a\x01aV[a\x02\x0Ca\x01DV[\x91\x82\x91\x82a\x01\xD4V[\x03\x90\xF3[a\x01JV[_\x1C\x90V[\x90V[a\x022a\x027\x91a\x02\x1EV[a\x02#V[\x90V[a\x02D\x90Ta\x02&V[\x90V[`\x01a\x02T_\x82\x01a\x02:V[\x91a\x02a`\x01\x83\x01a\x02:V[\x91a\x02n`\x02\x82\x01a\x02:V[\x91a\x02{`\x03\x83\x01a\x02:V[\x91a\x02\x88`\x04\x82\x01a\x02:V[\x91a\x02\xA1`\x06a\x02\x9A`\x05\x85\x01a\x02:V[\x93\x01a\x02:V[\x90V[\x90V[a\x02\xB0\x90a\x02\xA4V[\x90RV[\x94\x92\x90\x97\x96\x95\x93\x91`\xE0\x86\x01\x98_\x87\x01a\x02\xCD\x91a\x02\xA7V[` \x86\x01a\x02\xDA\x91a\x02\xA7V[`@\x85\x01a\x02\xE7\x91a\x02\xA7V[``\x84\x01a\x02\xF4\x91a\x02\xA7V[`\x80\x83\x01a\x03\x01\x91a\x02\xA7V[`\xA0\x82\x01a\x03\x0E\x91a\x02\xA7V[`\xC0\x01a\x03\x1A\x91a\x02\xA7V[V[4a\x03SWa\x03,6`\x04a\x01RV[a\x03Oa\x037a\x02GV[\x93a\x03F\x97\x95\x97\x93\x91\x93a\x01DV[\x97\x88\x97\x88a\x02\xB4V[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x03\x85\x90a\x01\xAFV[\x90V[a\x03\x91\x90a\x03|V[\x90RV[\x91\x90a\x03\xA8\x90_` \x85\x01\x94\x01\x90a\x03\x88V[V[4a\x03\xDAWa\x03\xBA6`\x04a\x01RV[a\x03\xD6a\x03\xC5a\x03XV[a\x03\xCDa\x01DV[\x91\x82\x91\x82a\x03\x95V[\x03\x90\xF3[a\x01JV[\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\0\x90`\x08a\x04\x05\x93\x02a\x03\xDFV[a\x03\xE3V[\x90V[\x90a\x04\x13\x91Ta\x03\xF0V[\x90V[a\x04#`\n`\x08\x90a\x04\x08V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04<\x90a\x04&V[\x90RV[\x91\x90a\x04S\x90_` \x85\x01\x94\x01\x90a\x043V[V[4a\x04\x85Wa\x04e6`\x04a\x01RV[a\x04\x81a\x04pa\x04\x16V[a\x04xa\x01DV[\x91\x82\x91\x82a\x04@V[\x03\x90\xF3[a\x01JV[\x90V[a\x04\x9D\x90`\x08a\x04\xA2\x93\x02a\x03\xDFV[a\x04\x8AV[\x90V[\x90a\x04\xB0\x91Ta\x04\x8DV[\x90V[a\x04\xBF`\t_\x90a\x04\xA5V[\x90V[\x90V[a\x04\xCE\x90a\x04\xC2V[\x90RV[\x91\x90a\x04\xE5\x90_` \x85\x01\x94\x01\x90a\x04\xC5V[V[4a\x05\x17Wa\x04\xF76`\x04a\x01RV[a\x05\x13a\x05\x02a\x04\xB3V[a\x05\na\x01DV[\x91\x82\x91\x82a\x04\xD2V[\x03\x90\xF3[a\x01JV[_\x01\x90V[4a\x05OWa\x0516`\x04a\x01RV[a\x059a\x12\x1CV[a\x05Aa\x01DV[\x80a\x05K\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[4a\x05\x82Wa\x05d6`\x04a\x01RV[a\x05la\x17\xB2V[a\x05ta\x01DV[\x80a\x05~\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x05\xB4\x90a\x01\xAFV[\x90V[a\x05\xC0\x90a\x05\xABV[\x90RV[\x91\x90a\x05\xD7\x90_` \x85\x01\x94\x01\x90a\x05\xB7V[V[4a\x06\tWa\x05\xE96`\x04a\x01RV[a\x06\x05a\x05\xF4a\x05\x87V[a\x05\xFCa\x01DV[\x91\x82\x91\x82a\x05\xC4V[\x03\x90\xF3[a\x01JV[a\x06\x17\x90a\x01\x85V[\x90V[a\x06#\x90a\x06\x0EV[\x90RV[\x91\x90a\x06:\x90_` \x85\x01\x94\x01\x90a\x06\x1AV[V[4a\x06lWa\x06L6`\x04a\x01RV[a\x06ha\x06Wa\x17\xECV[a\x06_a\x01DV[\x91\x82\x91\x82a\x06'V[\x03\x90\xF3[a\x01JV[_\x80\xFD[_\x80\xFD[\x90\x81``\x91\x03\x12a\x06\x87W\x90V[a\x06uV[\x90``\x82\x82\x03\x12a\x06\xA5Wa\x06\xA2\x91_\x01a\x06yV[\x90V[a\x01NV[4a\x06\xD8Wa\x06\xC2a\x06\xBD6`\x04a\x06\x8CV[a\x1B\xA7V[a\x06\xCAa\x01DV[\x80a\x06\xD4\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[a\x06\xE6\x81a\x04\xC2V[\x03a\x06\xEDWV[_\x80\xFD[\x90P5\x90a\x06\xFE\x82a\x06\xDDV[V[\x90` \x82\x82\x03\x12a\x07\x19Wa\x07\x16\x91_\x01a\x06\xF1V[\x90V[a\x01NV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x07H\x81a\x072V[\x82\x10\x15a\x07bWa\x07Z`\x03\x91a\x076V[\x91\x02\x01\x90_\x90V[a\x07\x1EV[`\x08\x90a\x07s\x82a\x072V[\x81\x10\x15a\x07\xABWa\x07\x83\x91a\x07?V[Pa\x07\x8F_\x82\x01a\x02:V[\x91a\x07\xA8`\x02a\x07\xA1`\x01\x85\x01a\x02:V[\x93\x01a\x02:V[\x90V[_\x80\xFD[`@\x90a\x07\xD8a\x07\xDF\x94\x96\x95\x93\x96a\x07\xCE``\x84\x01\x98_\x85\x01\x90a\x02\xA7V[` \x83\x01\x90a\x02\xA7V[\x01\x90a\x02\xA7V[V[4a\x08\x14Wa\x08\x10a\x07\xFCa\x07\xF76`\x04a\x07\0V[a\x07gV[a\x08\x07\x93\x91\x93a\x01DV[\x93\x84\x93\x84a\x07\xAFV[\x03\x90\xF3[a\x01JV[a\x08\"\x81a\x02\xA4V[\x03a\x08)WV[_\x80\xFD[\x90P5\x90a\x08:\x82a\x08\x19V[V[\x90` \x82\x82\x03\x12a\x08UWa\x08R\x91_\x01a\x08-V[\x90V[a\x01NV[4a\x08\x88Wa\x08ra\x08m6`\x04a\x08<V[a\x1C\xE8V[a\x08za\x01DV[\x80a\x08\x84\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x08\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x08\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x08\xC9WV[a\x08\x95V[a\x08\x91V[a\x08\x8DV[a\x08\xE1\x81a\x06\x0EV[\x03a\x08\xE8WV[_\x80\xFD[\x90P5\x90a\x08\xF9\x82a\x08\xD8V[V[\x90`\xA0\x82\x82\x03\x12a\tIWa\t\x12\x81_\x84\x01a\x06yV[\x92``\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\tDWa\t6\x83a\tA\x92\x86\x01a\x08\x99V[\x93\x90\x94`\x80\x01a\x08\xECV[\x90V[a\x06qV[a\x01NV[4a\t\x80Wa\tja\ta6`\x04a\x08\xFBV[\x92\x91\x90\x91a!\xEDV[a\tra\x01DV[\x80a\t|\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t\xB2\x90a\x01\xAFV[\x90V[a\t\xBE\x90a\t\xA9V[\x90RV[\x91\x90a\t\xD5\x90_` \x85\x01\x94\x01\x90a\t\xB5V[V[4a\n\x07Wa\t\xE76`\x04a\x01RV[a\n\x03a\t\xF2a\t\x85V[a\t\xFAa\x01DV[\x91\x82\x91\x82a\t\xC2V[\x03\x90\xF3[a\x01JV[a\n\x15\x81a\x04&V[\x03a\n\x1CWV[_\x80\xFD[\x90P5\x90a\n-\x82a\n\x0CV[V[\x90` \x82\x82\x03\x12a\nHWa\nE\x91_\x01a\n V[\x90V[a\x01NV[4a\n{Wa\nea\n`6`\x04a\n/V[a&FV[a\nma\x01DV[\x80a\nw\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[a\n\x8C`\n_\x90a\x04\x08V[\x90V[4a\n\xBFWa\n\x9F6`\x04a\x01RV[a\n\xBBa\n\xAAa\n\x80V[a\n\xB2a\x01DV[\x91\x82\x91\x82a\x04@V[\x03\x90\xF3[a\x01JV[4a\n\xF2Wa\n\xDCa\n\xD76`\x04a\x08<V[a&\xDDV[a\n\xE4a\x01DV[\x80a\n\xEE\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[\x90` \x82\x82\x03\x12a\x0B\x10Wa\x0B\r\x91_\x01a\x08\xECV[\x90V[a\x01NV[4a\x0BCWa\x0B-a\x0B(6`\x04a\n\xF7V[a'MV[a\x0B5a\x01DV[\x80a\x0B?\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[_\x80\xFD[\x90V[a\x0Bca\x0B^a\x0Bh\x92a\x0BLV[a\x01\x90V[a\x04\xC2V[\x90V[` \x91\x81R\x01\x90V[` \x7Ftoo many assertions\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x0B\xCE`3`@\x92a\x0BkV[a\x0B\xD7\x81a\x0BtV[\x01\x90V[a\x0B\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xC1V[\x90V[\x15a\x0B\xFAWV[a\x0C\x02a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\x18`\x04\x82\x01a\x0B\xDBV[\x03\x90\xFD[\x90V[a\x0C3a\x0C.a\x0C8\x92a\x0C\x1CV[a\x01\x90V[a\x01\x85V[\x90V[a\x0CD\x90a\x0C\x1FV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0Cs\x90a\x0CKV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\x8DW`@RV[a\x0CUV[`\xE0\x1B\x90V[\x90PQ\x90a\x0C\xA5\x82a\n\x0CV[V[\x90` \x82\x82\x03\x12a\x0C\xC0Wa\x0C\xBD\x91_\x01a\x0C\x98V[\x90V[a\x01NV[a\x0C\xCDa\x01DV[=_\x82>=\x90\xFD[a\x0C\xE9a\x0C\xE4a\x0C\xEE\x92a\x04\xC2V[a\x01\x90V[a\x04&V[\x90V[a\x0C\xFDa\r\x02\x91a\x02\x1EV[a\x03\xE3V[\x90V[a\r\x0F\x90Ta\x0C\xF1V[\x90V[` \x7Finsufficient time has passed\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\rl`<`@\x92a\x0BkV[a\ru\x81a\r\x12V[\x01\x90V[a\r\x8E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r_V[\x90V[\x15a\r\x98WV[a\r\xA0a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xB6`\x04\x82\x01a\ryV[\x03\x90\xFD[a\r\xCEa\r\xC9a\r\xD3\x92a\x0C\x1CV[a\x01\x90V[a\x04\xC2V[\x90V[_\x1B\x90V[\x90a\r\xE7_\x19\x91a\r\xD6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\xFA\x90a\x02\xA4V[\x90V[a\x0E\x06\x90a\x02\x1EV[\x90V[\x90a\x0E\x1Ea\x0E\x19a\x0E%\x92a\r\xF1V[a\r\xFDV[\x82Ta\r\xDBV[\x90UV[_\x91\x03\x12a\x0E3WV[a\x01NV[\x91` a\x0EY\x92\x94\x93a\x0ER`@\x82\x01\x96_\x83\x01\x90a\x02\xA7V[\x01\x90a\x02\xA7V[V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0E~a\x0E\x84\x91\x93\x92\x93a\x04\xC2V[\x92a\x04\xC2V[\x91a\x0E\x90\x83\x82\x02a\x04\xC2V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x0E\x9FWV[a\x0E[V[a\x0E\xAF\x90`\x03a\x0EoV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xD1\x91\x02\x91a\x0E\xCB_\x19\x84a\x0E\xB2V[\x92a\x0E\xB2V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0E\xF1a\x0E\xECa\x0E\xF9\x93a\r\xF1V[a\r\xFDV[\x90\x83Ta\x0E\xB6V[\x90UV[_\x90V[a\x0F\x13\x91a\x0F\ra\x0E\xFDV[\x91a\x0E\xDBV[V[_`\x02a\x0F;\x92a\x0F(\x83\x80\x83\x01a\x0F\x01V[a\x0F5\x83`\x01\x83\x01a\x0F\x01V[\x01a\x0F\x01V[V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x0FbWa\x0F`\x90a\x0F\x15V[V[a\x0F=V[[\x81\x81\x10a\x0FsWPPV[\x80a\x0F\x80_`\x03\x93a\x0FPV[\x01a\x0FhV[\x90\x91\x82\x81\x10a\x0F\x95W[PPPV[a\x0F\xB3a\x0F\xADa\x0F\xA7a\x0F\xBE\x95a\x0E\xA4V[\x92a\x0E\xA4V[\x92a\x076V[\x91\x82\x01\x91\x01\x90a\x0FgV[_\x80\x80a\x0F\x90V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x0F\xEFW\x81a\x0F\xE4a\x0F\xED\x93a\x072V[\x90\x82\x81Ua\x0F\x86V[V[a\x0CUV[_a\x0F\xFE\x91a\x0F\xC6V[V[\x90_\x03a\x10\x12Wa\x10\x10\x90a\x0F\xF4V[V[a\x0F=V[\x90PQ\x90a\x10$\x82a\x06\xDDV[V[\x90` \x82\x82\x03\x12a\x10?Wa\x10<\x91_\x01a\x10\x17V[\x90V[a\x01NV[a\x10Sa\x10Y\x91\x93\x92\x93a\x04\xC2V[\x92a\x04\xC2V[\x82\x03\x91\x82\x11a\x10dWV[a\x0E[V[\x90PQ\x90a\x10v\x82a\x08\x19V[V[\x90` \x82\x82\x03\x12a\x10\x91Wa\x10\x8E\x91_\x01a\x10iV[\x90V[a\x01NV[a\x10\x9F\x90a\x02\xA4V[\x90RV[\x90`\xC0a\x11P`\x06a\x11X\x94a\x10\xC7a\x10\xBE_\x83\x01Ta\x02&V[_\x87\x01\x90a\x10\x96V[a\x10\xE1a\x10\xD7`\x01\x83\x01Ta\x02&V[` \x87\x01\x90a\x10\x96V[a\x10\xFBa\x10\xF1`\x02\x83\x01Ta\x02&V[`@\x87\x01\x90a\x10\x96V[a\x11\x15a\x11\x0B`\x03\x83\x01Ta\x02&V[``\x87\x01\x90a\x10\x96V[a\x11/a\x11%`\x04\x83\x01Ta\x02&V[`\x80\x87\x01\x90a\x10\x96V[a\x11Ia\x11?`\x05\x83\x01Ta\x02&V[`\xA0\x87\x01\x90a\x10\x96V[\x01Ta\x02&V[\x91\x01\x90a\x10\x96V[V[\x91\x90a\x11m\x90_`\xE0\x85\x01\x94\x01\x90a\x10\xA3V[V[`@\x1C\x90V[a\x11\x81a\x11\x86\x91a\x11oV[a\x03\xE3V[\x90V[a\x11\x93\x90Ta\x11uV[\x90V[a\x11\xA2a\x11\xA8\x91a\x04&V[\x91a\x04&V[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11\xBBWV[a\x0E[V[\x90a\x11\xD3g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\r\xD6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xF1a\x11\xECa\x11\xF6\x92a\x04&V[a\x01\x90V[a\x04&V[\x90V[\x90V[\x90a\x12\x11a\x12\x0Ca\x12\x18\x92a\x11\xDDV[a\x11\xF9V[\x82Ta\x11\xC0V[\x90UV[a\x12Ca\x12)`\x08a\x072V[a\x12<a\x126`\x01a\x0BOV[\x91a\x04\xC2V[\x11\x15a\x0B\xF3V[a\x12l\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[a\x12\x86a\x12\x80a\x12{_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14_\x14a\x16\xEBWa\x12\xBBa\x12\x99Ba\x0C\xD5V[[a\x12\xB5a\x12\xAFa\x12\xAA`\na\r\x05V[a\x04&V[\x91a\x04&V[\x11a\r\x91V[a\x12\xC5`\x08a\x072V[a\x12\xD7a\x12\xD1_a\r\xBAV[\x91a\x04\xC2V[\x11a\x15\xA6W[a\x13\x06\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xA9V[a\x13Oc\xD5q\x9D\xC2` a\x139\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xA9V[c\xEC\xA0g\xAD\x90a\x13Ga\x01DV[\x94\x85\x92a\x0C\x92V[\x82R\x81\x80a\x13_`\x04\x82\x01a\x05\x1CV[\x03\x91Z\xFA\x92\x83\x15a\x15\xA1Wa\x13\xA4a\x13\x8Fa\x13\xAF\x95` \x95_\x91a\x15tW[Pa\x13\x89`\x01a\x0BOV[\x90a\x10DV[\x92a\x13\x98a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\x0C\x92V[\x83R`\x04\x83\x01a\x04\xD2V[\x03\x91Z\xFA\x80\x15a\x15oWa\x13\xCF\x91_\x91a\x15AW[P`\x04`\x01\x01a\x0E\tV[a\x13\xF8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[a\x14\x12a\x14\x0Ca\x14\x07_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14_\x14a\x14\x9FWa\x14<a\x140Ca\x14*`\x01a\x0BOV[\x90a\x10DV[@[`\x06`\x01\x01a\x0E\tV[`\x01a\x14t\x7F\x91\t+\xCFU\t!\xE3\x81\xE8\x1F\x06i3 SK\x14J~V\x1C_\xC0\x8F\x19@\xD5\x08\xA8\\\xDC\x91a\x14ka\x01DV[\x91\x82\x91\x82a\x11ZV[\x03\x90\xA1a\x14\x9Da\x14\x96a\x14\x86Ba\x0C\xD5V[a\x14\x90`\na\x11\x89V[\x90a\x11\x96V[`\na\x11\xFCV[V[a\x14\xE3` a\x14\xCD\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[c\t\xBDZ`\x90a\x14\xDBa\x01DV[\x93\x84\x92a\x0C\x92V[\x82R\x81\x80a\x14\xF3`\x04\x82\x01a\x05\x1CV[\x03\x91Z\xFA\x80\x15a\x15<Wa\x14<\x91_\x91a\x15\x0EW[Pa\x142V[a\x15/\x91P` =\x81\x11a\x155W[a\x15'\x81\x83a\x0CiV[\x81\x01\x90a\x10xV[_a\x15\x08V[P=a\x15\x1DV[a\x0C\xC5V[a\x15b\x91P` =\x81\x11a\x15hW[a\x15Z\x81\x83a\x0CiV[\x81\x01\x90a\x10xV[_a\x13\xC4V[P=a\x15PV[a\x0C\xC5V[a\x15\x94\x91P\x86=\x81\x11a\x15\x9AW[a\x15\x8C\x81\x83a\x0CiV[\x81\x01\x90a\x10&V[_a\x13~V[P=a\x15\x82V[a\x0C\xC5V[a\x15\xC9a\x15\xC0_a\x15\xB9`\x08\x82\x90a\x07?V[P\x01a\x02:V[`\x01\x80\x01a\x0E\tV[a\x15\xEEa\x15\xE4`\x02a\x15\xDD`\x08_\x90a\x07?V[P\x01a\x02:V[`\x03`\x01\x01a\x0E\tV[a\x16\x08a\x15\xFE`\x06`\x01\x01a\x02:V[`\x05`\x01\x01a\x0E\tV[a\x161\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x05\xABV[c\xDA\xEA\xB4\x12a\x16M_a\x16F`\x08\x82\x90a\x07?V[P\x01a\x02:V[a\x16e`\x01a\x16^`\x08_\x90a\x07?V[P\x01a\x02:V[\x92\x80;\x15a\x16\xE6Wa\x16\x8A_\x80\x94a\x16\x95a\x16~a\x01DV[\x97\x88\x96\x87\x95\x86\x94a\x0C\x92V[\x84R`\x04\x84\x01a\x0E8V[\x03\x92Z\xF1\x80\x15a\x16\xE1Wa\x16\xB5W[Pa\x16\xB0_`\x08a\x10\0V[a\x12\xDDV[a\x16\xD4\x90_=\x81\x11a\x16\xDAW[a\x16\xCC\x81\x83a\x0CiV[\x81\x01\x90a\x0E)V[_a\x16\xA4V[P=a\x16\xC2V[a\x0C\xC5V[a\x0CGV[a\x17/` a\x17\x19\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[c\xB8\x07w\xEA\x90a\x17'a\x01DV[\x93\x84\x92a\x0C\x92V[\x82R\x81\x80a\x17?`\x04\x82\x01a\x05\x1CV[\x03\x91Z\xFA\x80\x15a\x17\x88Wa\x12\xBB\x91_\x91a\x17ZW[Pa\x12\x9AV[a\x17{\x91P` =\x81\x11a\x17\x81W[a\x17s\x81\x83a\x0CiV[\x81\x01\x90a\x0C\xA7V[_a\x17TV[P=a\x17iV[a\x0C\xC5V[a\x17\x95a'XV[a\x17\x9Da\x17\x9FV[V[a\x17\xB0a\x17\xAB_a\x0C;V[a'\xF0V[V[a\x17\xBAa\x17\x8DV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x17\xD7a\x17\xDC\x91a\x02\x1EV[a\x17\xC0V[\x90V[a\x17\xE9\x90Ta\x17\xCBV[\x90V[a\x17\xF4a\x17\xBCV[Pa\x17\xFE_a\x17\xDFV[\x90V[a\x18\x12\x90a\x18\ra'XV[a\x1AoV[V[_\x7Fchallenge does not exist\0\0\0\0\0\0\0\0\x91\x01RV[a\x18H`\x18` \x92a\x0BkV[a\x18Q\x81a\x18\x14V[\x01\x90V[a\x18j\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18;V[\x90V[\x15a\x18tWV[a\x18|a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\x92`\x04\x82\x01a\x18UV[\x03\x90\xFD[`\x01a\x18\xA2\x91\x01a\x04\xC2V[\x90V[\x90V[\x90V[_R` _ \x90V[T\x90V[a\x18\xC1\x81a\x18\xB4V[\x82\x10\x15a\x18\xDBWa\x18\xD3`\x03\x91a\x18\xABV[\x91\x02\x01\x90_\x90V[a\x07\x1EV[5a\x18\xEA\x81a\x08\x19V[\x90V[\x90a\x191`@`\x02a\x197\x94a\x19\x10_\x82\x01a\x19\n_\x88\x01a\x18\xE0V[\x90a\x0E\tV[a\x19)`\x01\x82\x01a\x19#` \x88\x01a\x18\xE0V[\x90a\x0E\tV[\x01\x92\x01a\x18\xE0V[\x90a\x0E\tV[V[\x91\x90a\x19JWa\x19H\x91a\x18\xEDV[V[a\x0F=V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x19\x7FW\x82a\x19w\x91`\x01a\x19}\x95\x01\x81Ua\x18\xB8V[\x90a\x199V[V[a\x0CUV[a\x19\x98a\x19\x93a\x19\x9D\x92a\x0C\x1CV[a\x01\x90V[a\x04&V[\x90V[Pa\x19\xAF\x90` \x81\x01\x90a\x08-V[\x90V[\x90`@a\x19\xF7a\x19\xFF\x93a\x19\xD4a\x19\xCB_\x83\x01\x83a\x19\xA0V[_\x86\x01\x90a\x10\x96V[a\x19\xEEa\x19\xE4` \x83\x01\x83a\x19\xA0V[` \x86\x01\x90a\x10\x96V[\x82\x81\x01\x90a\x19\xA0V[\x91\x01\x90a\x10\x96V[V[\x91\x90a\x1A\x14\x90_``\x85\x01\x94\x01\x90a\x19\xB2V[V[_\x7Fassertion not found\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1AJ`\x13` \x92a\x0BkV[a\x1AS\x81a\x1A\x16V[\x01\x90V[a\x1Al\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1A=V[\x90V[a\x1A\x95a\x1A|`\x08a\x072V[a\x1A\x8Fa\x1A\x89`\x01a\x0BOV[\x91a\x04\xC2V[\x11a\x18mV[a\x1A\x9E\x81a(zV[\x90a\x1A\xA8_a\r\xBAV[[\x80a\x1A\xC5a\x1A\xBFa\x1A\xBA`\x08a\x072V[a\x04\xC2V[\x91a\x04\xC2V[\x10\x15a\x1B\x85W\x82a\x1A\xFAa\x1A\xF4a\x1A\xEFa\x1A\xEAa\x1A\xE4`\x08\x87\x90a\x07?V[Pa\x18\xA5V[a(\xE5V[a\x02\xA4V[\x91a\x02\xA4V[\x14a\x1B\rWa\x1B\x08\x90a\x18\x96V[a\x1A\xA9V[P\x90Pa\x1B\x1B_`\x08a\x10\0V[a\x1B/a\x1B(`\x08a\x18\xA8V[\x82\x90a\x19OV[a\x1BBa\x1B;_a\x19\x84V[`\na\x11\xFCV[a\x1BJa\x12\x1CV[a\x1B\x80\x7F\xE4.\xAF\x077\xE2G\x8A_Z\xED:\x06\x10\xAE{\t\xA2|\xBA\xC9\xADj\\\xC4\xD6\x8Fx\xAF\xD1B[\x91a\x1Bwa\x01DV[\x91\x82\x91\x82a\x1A\x01V[\x03\x90\xA1V[a\x1B\x8Da\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1B\xA3`\x04\x82\x01a\x1AWV[\x03\x90\xFD[a\x1B\xB0\x90a\x18\x01V[V[a\x1B\xC3\x90a\x1B\xBEa'XV[a\x1CmV[V[` \x7Fassertions are pending\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot update config hash while _\x82\x01R\x01RV[a\x1C\x1F`6`@\x92a\x0BkV[a\x1C(\x81a\x1B\xC5V[\x01\x90V[a\x1CA\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1C\x12V[\x90V[\x15a\x1CKWV[a\x1CSa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1Ci`\x04\x82\x01a\x1C,V[\x03\x90\xFD[a\x1C\x92a\x1Cz`\x08a\x072V[a\x1C\x8Ca\x1C\x86_a\r\xBAV[\x91a\x04\xC2V[\x14a\x1CDV[a\x1C\xA0\x81`\x02`\x01\x01a\x0E\tV[a\x1C\xAD`\x03`\x01\x01a\x02:V[\x7F\xB9\xEB \xB3/\xAC\x96X\x84\xCBX2a\x02%|\xAE`E\x04\xF0\xA3l\xD1\0\x8A2\x84Z\xD5\xC2\x9B\x91a\x1C\xE3a\x1C\xDAa\x01DV[\x92\x83\x92\x83a\x0E8V[\x03\x90\xA1V[a\x1C\xF1\x90a\x1B\xB2V[V[P\x90V[\x90V[a\x1D\x0Ea\x1D\ta\x1D\x13\x92a\x1C\xF7V[a\x01\x90V[a\x04\xC2V[\x90V[_\x7Finvalid signature length\0\0\0\0\0\0\0\0\x91\x01RV[a\x1DJ`\x18` \x92a\x0BkV[a\x1DS\x81a\x1D\x16V[\x01\x90V[a\x1Dl\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1D=V[\x90V[\x15a\x1DvWV[a\x1D~a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1D\x94`\x04\x82\x01a\x1DWV[\x03\x90\xFD[\x90V[\x90V[a\x1D\xAAa\x1D\xAF\x91a\x02\xA4V[a\x1D\x9BV[\x90RV[` \x81a\x1D\xC5a\x1D\xCD\x93\x83\x96\x95a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x90V[` \x01\x90V[Q\x90V[_\x80\xFD[\x90a\x1D\xF2a\x1D\xEBa\x01DV[\x92\x83a\x0CiV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1E\x12Wa\x1E\x0E` \x91a\x0CKV[\x01\x90V[a\x0CUV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x1E7a\x1E2\x82a\x1D\xF4V[a\x1D\xDFV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x1ESWa\x1EQ\x92a\x1E\x17V[V[a\x1D\xDBV[a\x1Ec\x916\x91a\x1E\"V[\x90V[\x15\x15\x90V[a\x1Et\x81a\x1EfV[\x03a\x1E{WV[_\x80\xFD[\x90PQ\x90a\x1E\x8C\x82a\x1EkV[V[\x90` \x82\x82\x03\x12a\x1E\xA7Wa\x1E\xA4\x91_\x01a\x1E\x7FV[\x90V[a\x01NV[_\x7Finvalid tee signature\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1E\xE0`\x15` \x92a\x0BkV[a\x1E\xE9\x81a\x1E\xACV[\x01\x90V[a\x1F\x02\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1E\xD3V[\x90V[\x15a\x1F\x0CWV[a\x1F\x14a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1F*`\x04\x82\x01a\x1E\xEDV[\x03\x90\xFD[_\x7Fappchain block hash unchanged\0\0\0\x91\x01RV[a\x1Fb`\x1D` \x92a\x0BkV[a\x1Fk\x81a\x1F.V[\x01\x90V[a\x1F\x84\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1FUV[\x90V[\x15a\x1F\x8EWV[a\x1F\x96a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1F\xAC`\x04\x82\x01a\x1FoV[\x03\x90\xFD[_\x7Fassertion already exists\0\0\0\0\0\0\0\0\x91\x01RV[a\x1F\xE4`\x18` \x92a\x0BkV[a\x1F\xED\x81a\x1F\xB0V[\x01\x90V[a \x06\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1F\xD7V[\x90V[\x15a \x10WV[a \x18a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a .`\x04\x82\x01a\x1F\xF1V[\x03\x90\xFD[\x90V[a Ia Da N\x92a 2V[a\x01\x90V[a\x04\xC2V[\x90V[a ]a b\x91a\x02\x1EV[a\x04\x8AV[\x90V[a o\x90Ta QV[\x90V[a \x81a \x87\x91\x93\x92\x93a\x04\xC2V[\x92a\x04\xC2V[\x82\x01\x80\x92\x11a \x92WV[a\x0E[V[a \xABa \xA6a \xB0\x92a\x04\xC2V[a\x01\x90V[a\x04\xC2V[\x90V[\x90V[\x90a \xCBa \xC6a \xD2\x92a \x97V[a \xB3V[\x82Ta\r\xDBV[\x90UV[a \xDF\x90a\x01\x93V[\x90V[a \xEB\x90a \xD6V[\x90V[a \xF7\x90a\x01\xAFV[\x90V[a!\x03\x90a\x01\xAFV[\x90V[\x90P\x90V[a!\x16_\x80\x92a!\x06V[\x01\x90V[a!#\x90a!\x0BV[\x90V[\x90a!8a!3\x83a\x1D\xF4V[a\x1D\xDFV[\x91\x82RV[``\x90V[=_\x14a!]Wa!R=a!&V[\x90=_` \x84\x01>[V[a!ea!=V[\x90a![V[_\x7Fpayment failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a!\x9F`\x0E` \x92a\x0BkV[a!\xA8\x81a!kV[\x01\x90V[a!\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra!\x92V[\x90V[\x15a!\xCBWV[a!\xD3a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a!\xE9`\x04\x82\x01a!\xACV[\x03\x90\xFD[\x92\x90` a\"\xDD\x91\x95\x93\x95a\"\x1Fa\"\x06\x82\x89\x90a\x1C\xF3V[a\"\x19a\"\x13`Aa\x1C\xFAV[\x91a\x04\xC2V[\x14a\x1DoV[a\"(\x86a(zV[\x96a\"\xD2a\"\xBDa\"Aa\"<`\x01a\x1D\x98V[a)\xB2V[a\"j\x8B\x91a\"\\a\"Qa\x01DV[\x93\x84\x92\x8A\x84\x01a\x1D\xB3V[\x88\x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a\"|a\"v\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x93a\"\xB7a\"\xAA\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\xBBV[\x94cr\x17\xEF\xCD\x96\x92a\x1EXV[\x90a*QV[\x92a\"\xC6a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\x0C\x92V[\x83R`\x04\x83\x01a\x06'V[\x03\x91Z\xFA\x80\x15a%\tWa\"\xF8\x91_\x91a$\xDBW[Pa\x1F\x05V[a#*a#\x06_\x85\x01a\x18\xE0V[a##a#\x1Da#\x18`\x01\x80\x01a\x02:V[a\x02\xA4V[\x91a\x02\xA4V[\x14\x15a\x1F\x87V[a#3_a\r\xBAV[[\x80a#Pa#Ja#E`\x08a\x072V[a\x04\xC2V[\x91a\x04\xC2V[\x10\x15a#\x9DWa#\x98\x90a#\x93\x86a#\x8Ca#\x86a#\x81a#|a#v`\x08\x88\x90a\x07?V[Pa\x18\xA5V[a(\xE5V[a\x02\xA4V[\x91a\x02\xA4V[\x14\x15a \tV[a\x18\x96V[a#4V[P\x91a#\xD6\x91\x93Pa#\xAF`\x08a\x072V[a#\xC1a#\xBB_a\r\xBAV[\x91a\x04\xC2V[\x14a$\xB0W[a#\xD1`\x08a\x18\xA8V[a\x19OV[a#\xE0`\x08a\x072V[a#\xF3a#\xED`\x02a 5V[\x91a\x04\xC2V[\x14a#\xFCW[PV[_\x80a${a$va$\xAA\x94a$.a$'a$\x18`\x01a\x0BOV[a$\"`\ta eV[a rV[`\ta \xB6V[a$8`\ta eV[a$n\x7F7\xE8\xAD\xD6\x94\xC5\x92mVN\x97\x11`\xF5\x97A\x03\xCB\xBB\xC7\xC9\x07G\xC4\xC6\xF8\x02\x03\x1D5g\xA7\x91a$ea\x01DV[\x91\x82\x91\x82a\x04\xD2V[\x03\x90\xA1a \xE2V[a \xEEV[a$\x840a \xFAV[1a$\x8Da\x01DV[\x90\x81a$\x98\x81a!\x1AV[\x03\x92Z\xF1a$\xA4a!BV[Pa!\xC4V[_a#\xF9V[a$\xD6a$\xCFa$\xBFBa\x0C\xD5V[a$\xC9`\na\x11\x89V[\x90a\x11\x96V[`\na\x11\xFCV[a#\xC7V[a$\xFC\x91P` =\x81\x11a%\x02W[a$\xF4\x81\x83a\x0CiV[\x81\x01\x90a\x1E\x8EV[_a\"\xF2V[P=a$\xEAV[a\x0C\xC5V[a%\x1F\x90a%\x1Aa'XV[a&\x14V[V[` \x7Fhile assertion is pending\0\0\0\0\0\0\0\x91\x7Fcannot update challenge window w_\x82\x01R\x01RV[a%{`9`@\x92a\x0BkV[a%\x84\x81a%!V[\x01\x90V[a%\x9D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra%nV[\x90V[\x15a%\xA7WV[a%\xAFa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a%\xC5`\x04\x82\x01a%\x88V[\x03\x90\xFD[`@\x1B\x90V[\x90a%\xEAo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x91a%\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a&\ta&\x04a&\x10\x92a\x11\xDDV[a\x11\xF9V[\x82Ta%\xCFV[\x90UV[a&D\x90a&=a&%`\x08a\x072V[a&7a&1_a\r\xBAV[\x91a\x04\xC2V[\x14a%\xA0V[`\na%\xF4V[V[a&O\x90a%\x0EV[V[a&b\x90a&]a'XV[a&dV[V[a&\x89a&q`\x08a\x072V[a&\x83a&}_a\r\xBAV[\x91a\x04\xC2V[\x14a\x1CDV[a&\x96\x81_`\x01\x01a\x0E\tV[a&\xA2`\x01\x80\x01a\x02:V[\x7F\xC9\x85\xBC\xCB\xD0\xC9\x0E\x19\x7FJss\x02\n3\xBAo\xF8d\xD09\x9F\xD7\xD6\\\\|2\xFF\xB0\x15\xEC\x91a&\xD8a&\xCFa\x01DV[\x92\x83\x92\x83a\x0E8V[\x03\x90\xA1V[a&\xE6\x90a&QV[V[a&\xF9\x90a&\xF4a'XV[a&\xFBV[V[\x80a'\x16a'\x10a'\x0B_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14a'&Wa'$\x90a'\xF0V[V[a'Ia'2_a\x0C;V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06'V[\x03\x90\xFD[a'V\x90a&\xE8V[V[a'`a\x17\xECV[a'ya'sa'na*sV[a\x06\x0EV[\x91a\x06\x0EV[\x03a'\x80WV[a'\xA2a'\x8Ba*sV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06'V[\x03\x90\xFD[\x90a'\xB7`\x01\x80`\xA0\x1B\x03\x91a\r\xD6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a'\xCA\x90a\x01\xAFV[\x90V[\x90V[\x90a'\xE5a'\xE0a'\xEC\x92a'\xC1V[a'\xCDV[\x82Ta'\xA6V[\x90UV[a'\xF9_a\x17\xDFV[a(\x03\x82_a'\xD0V[\x90a(7a(1\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a'\xC1V[\x91a'\xC1V[\x91a(@a\x01DV[\x80a(J\x81a\x05\x1CV[\x03\x90\xA3V[` \x93\x92a(n\x85\x83a(f\x82\x95a(v\x97a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x90V[a(\x82a\x0E\xFDV[Pa(\xCFa(\x91_\x83\x01a\x18\xE0V[a(\xC0a(\xAC`@a(\xA5` \x87\x01a\x18\xE0V[\x95\x01a\x18\xE0V[a(\xB4a\x01DV[\x94\x85\x93` \x85\x01a(OV[` \x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a(\xE1a(\xDB\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x90V[a(\xEDa\x0E\xFDV[Pa):a(\xFC_\x83\x01a\x02:V[a)+a)\x17`\x02a)\x10`\x01\x87\x01a\x02:V[\x95\x01a\x02:V[a)\x1Fa\x01DV[\x94\x85\x93` \x85\x01a(OV[` \x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a)La)F\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x90V[\x94a)\x9E` \x80\x99\x98\x95\x96a)\x96\x82\x80\x99a)\x8E\x82a)\xA6\x9Aa)\x86a)\xAE\x9F\x80a)~\x85\x9E\x92\x86\x93a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x90V[a)\xBAa\x0E\xFDV[Pa*;a)\xC9_\x83\x01a\x02:V[a*,a)\xD8`\x01\x85\x01a\x02:V[\x93a)\xE5`\x02\x82\x01a\x02:V[\x90a)\xF2`\x03\x82\x01a\x02:V[a)\xFE`\x04\x83\x01a\x02:V[\x90a*\x17`\x06a*\x10`\x05\x86\x01a\x02:V[\x94\x01a\x02:V[\x93a* a\x01DV[\x98\x89\x97` \x89\x01a)PV[` \x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a*Ma*G\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x90V[a*p\x91a*g\x91a*aa\x17\xBCV[Pa*\xA4V[\x90\x92\x91\x92a+\xA1V[\x90V[a*{a\x17\xBCV[P3\x90V[_\x90V[a*\x98a*\x93a*\x9D\x92a\x04\xC2V[a\r\xD6V[a\x02\xA4V[\x90V[_\x90V[\x91\x90\x91a*\xAFa\x17\xBCV[Pa*\xB8a*\x80V[Pa*\xC1a\x0E\xFDV[Pa*\xCB\x83a\x1D\xD7V[a*\xDEa*\xD8`Aa\x1C\xFAV[\x91a\x04\xC2V[\x14_\x14a+%Wa+\x1E\x91\x92a*\xF2a\x0E\xFDV[Pa*\xFBa\x0E\xFDV[Pa+\x04a*\xA0V[P` \x81\x01Q```@\x83\x01Q\x92\x01Q_\x1A\x90\x91\x92a,\xFEV[\x91\x92\x90\x91\x90V[Pa+/_a\x0C;V[\x90a+Ca+>`\x02\x94a\x1D\xD7V[a*\x84V[\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15a+gWV[a+IV[\x90a+v\x82a+]V[V[\x91\x90a+\x8B\x90_` \x85\x01\x94\x01\x90a\x02\xA7V[V[a+\x99a+\x9E\x91a\x02\x1EV[a \x97V[\x90V[\x80a+\xB4a+\xAE_a+lV[\x91a+lV[\x14_\x14a+\xBFWPPV[\x80a+\xD3a+\xCD`\x01a+lV[\x91a+lV[\x14_\x14a+\xF6W_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80a+\xF2`\x04\x82\x01a\x05\x1CV[\x03\x90\xFD[\x80a,\na,\x04`\x02a+lV[\x91a+lV[\x14_\x14a,8Wa,4a,\x1D\x83a+\x8DV[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04\xD2V[\x03\x90\xFD[a,Ka,E`\x03a+lV[\x91a+lV[\x14a,SWPV[a,n\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a+xV[\x03\x90\xFD[\x90V[a,\x89a,\x84a,\x8E\x92a,rV[a\x01\x90V[a\x04\xC2V[\x90V[`\xFF\x16\x90V[a,\xA0\x90a,\x91V[\x90RV[a,\xD9a,\xE0\x94a,\xCF``\x94\x98\x97\x95a,\xC5`\x80\x86\x01\x9A_\x87\x01\x90a\x02\xA7V[` \x85\x01\x90a,\x97V[`@\x83\x01\x90a\x02\xA7V[\x01\x90a\x02\xA7V[V[a,\xF6a,\xF1a,\xFB\x92a\x0C\x1CV[a\r\xD6V[a\x02\xA4V[\x90V[\x93\x92\x93a-\ta\x17\xBCV[Pa-\x12a*\x80V[Pa-\x1Ba\x0E\xFDV[Pa-%\x85a+\x8DV[a-Wa-Q\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a,uV[\x91a\x04\xC2V[\x11a-\xE4W\x90a-z` \x94\x95_\x94\x93\x92\x93a-qa\x01DV[\x94\x85\x94\x85a,\xA4V[\x83\x80R\x03\x90`\x01Z\xFA\x15a-\xDFWa-\x92_Qa\r\xD6V[\x80a-\xADa-\xA7a-\xA2_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14a-\xC3W_\x91a-\xBD_a,\xE2V[\x91\x92\x91\x90V[Pa-\xCD_a\x0C;V[`\x01\x91a-\xD9_a,\xE2V[\x91\x92\x91\x90V[a\x0C\xC5V[PPPa-\xF0_a\x0C;V[\x90`\x03\x92\x91\x92\x91\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b36610b4857005b61001f5f3561013e565b80633a009a06146101395780633ceaae7d14610134578063420caf3a1461012f5780634bd167c91461012a578063697b5e62146101255780636c4c206014610120578063715018a61461011b57806380959721146101165780638da5cb5b146101115780638fed55a31461010c578063a56ec6cd14610107578063c3f2dbd314610102578063e50c6156146100fd578063e78cea92146100f8578063eb60553a146100f3578063ee1c28b8146100ee578063f223055c146100e95763f2fde38b0361000e57610b15565b610ac4565b610a8f565b610a4d565b6109d7565b61094e565b61085a565b6107e1565b6106aa565b61063c565b6105d9565b610554565b610521565b6104e7565b610455565b6103aa565b61031c565b6101e9565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261015c57565b61014e565b7f000000000000000000000000000000000000000000000000000000000000000090565b60018060a01b031690565b90565b6101a76101a26101ac92610185565b610190565b610185565b90565b6101b890610193565b90565b6101c4906101af565b90565b6101d0906101bb565b9052565b91906101e7905f602085019401906101c7565b565b34610219576101f9366004610152565b610215610204610161565b61020c610144565b918291826101d4565b0390f35b61014a565b5f1c90565b90565b6102326102379161021e565b610223565b90565b6102449054610226565b90565b60016102545f820161023a565b916102616001830161023a565b9161026e6002820161023a565b9161027b6003830161023a565b916102886004820161023a565b916102a1600661029a6005850161023a565b930161023a565b90565b90565b6102b0906102a4565b9052565b949290979695939160e08601985f87016102cd916102a7565b602086016102da916102a7565b604085016102e7916102a7565b606084016102f4916102a7565b60808301610301916102a7565b60a0820161030e916102a7565b60c00161031a916102a7565b565b346103535761032c366004610152565b61034f610337610247565b93610346979597939193610144565b978897886102b4565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b610385906101af565b90565b6103919061037c565b9052565b91906103a8905f60208501940190610388565b565b346103da576103ba366004610152565b6103d66103c5610358565b6103cd610144565b91829182610395565b0390f35b61014a565b1c90565b67ffffffffffffffff1690565b61040090600861040593026103df565b6103e3565b90565b9061041391546103f0565b90565b610423600a600890610408565b90565b67ffffffffffffffff1690565b61043c90610426565b9052565b9190610453905f60208501940190610433565b565b3461048557610465366004610152565b610481610470610416565b610478610144565b91829182610440565b0390f35b61014a565b90565b61049d9060086104a293026103df565b61048a565b90565b906104b0915461048d565b90565b6104bf60095f906104a5565b90565b90565b6104ce906104c2565b9052565b91906104e5905f602085019401906104c5565b565b34610517576104f7366004610152565b6105136105026104b3565b61050a610144565b918291826104d2565b0390f35b61014a565b5f0190565b3461054f57610531366004610152565b61053961121c565b610541610144565b8061054b8161051c565b0390f35b61014a565b3461058257610564366004610152565b61056c6117b2565b610574610144565b8061057e8161051c565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6105b4906101af565b90565b6105c0906105ab565b9052565b91906105d7905f602085019401906105b7565b565b34610609576105e9366004610152565b6106056105f4610587565b6105fc610144565b918291826105c4565b0390f35b61014a565b61061790610185565b90565b6106239061060e565b9052565b919061063a905f6020850194019061061a565b565b3461066c5761064c366004610152565b6106686106576117ec565b61065f610144565b91829182610627565b0390f35b61014a565b5f80fd5b5f80fd5b908160609103126106875790565b610675565b906060828203126106a5576106a2915f01610679565b90565b61014e565b346106d8576106c26106bd36600461068c565b611ba7565b6106ca610144565b806106d48161051c565b0390f35b61014a565b6106e6816104c2565b036106ed57565b5f80fd5b905035906106fe826106dd565b565b9060208282031261071957610716915f016106f1565b90565b61014e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61074881610732565b8210156107625761075a600391610736565b910201905f90565b61071e565b60089061077382610732565b8110156107ab576107839161073f565b5061078f5f820161023a565b916107a860026107a16001850161023a565b930161023a565b90565b5f80fd5b6040906107d86107df94969593966107ce60608401985f8501906102a7565b60208301906102a7565b01906102a7565b565b34610814576108106107fc6107f7366004610700565b610767565b610807939193610144565b938493846107af565b0390f35b61014a565b610822816102a4565b0361082957565b5f80fd5b9050359061083a82610819565b565b9060208282031261085557610852915f0161082d565b90565b61014e565b346108885761087261086d36600461083c565b611ce8565b61087a610144565b806108848161051c565b0390f35b61014a565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156108d35781359167ffffffffffffffff83116108ce5760200192600183028401116108c957565b610895565b610891565b61088d565b6108e18161060e565b036108e857565b5f80fd5b905035906108f9826108d8565b565b9060a08282031261094957610912815f8401610679565b92606083013567ffffffffffffffff81116109445761093683610941928601610899565b9390946080016108ec565b90565b610671565b61014e565b346109805761096a6109613660046108fb565b929190916121ed565b610972610144565b8061097c8161051c565b0390f35b61014a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6109b2906101af565b90565b6109be906109a9565b9052565b91906109d5905f602085019401906109b5565b565b34610a07576109e7366004610152565b610a036109f2610985565b6109fa610144565b918291826109c2565b0390f35b61014a565b610a1581610426565b03610a1c57565b5f80fd5b90503590610a2d82610a0c565b565b90602082820312610a4857610a45915f01610a20565b90565b61014e565b34610a7b57610a65610a60366004610a2f565b612646565b610a6d610144565b80610a778161051c565b0390f35b61014a565b610a8c600a5f90610408565b90565b34610abf57610a9f366004610152565b610abb610aaa610a80565b610ab2610144565b91829182610440565b0390f35b61014a565b34610af257610adc610ad736600461083c565b6126dd565b610ae4610144565b80610aee8161051c565b0390f35b61014a565b90602082820312610b1057610b0d915f016108ec565b90565b61014e565b34610b4357610b2d610b28366004610af7565b61274d565b610b35610144565b80610b3f8161051c565b0390f35b61014a565b5f80fd5b90565b610b63610b5e610b6892610b4c565b610190565b6104c2565b90565b60209181520190565b60207f746f6f206d616e7920617373657274696f6e7300000000000000000000000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610bce6033604092610b6b565b610bd781610b74565b0190565b610bf09060208101905f818303910152610bc1565b90565b15610bfa57565b610c02610144565b62461bcd60e51b815280610c1860048201610bdb565b0390fd5b90565b610c33610c2e610c3892610c1c565b610190565b610185565b90565b610c4490610c1f565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610c7390610c4b565b810190811067ffffffffffffffff821117610c8d57604052565b610c55565b60e01b90565b90505190610ca582610a0c565b565b90602082820312610cc057610cbd915f01610c98565b90565b61014e565b610ccd610144565b3d5f823e3d90fd5b610ce9610ce4610cee926104c2565b610190565b610426565b90565b610cfd610d029161021e565b6103e3565b90565b610d0f9054610cf1565b90565b60207f696e73756666696369656e742074696d65206861732070617373656400000000917f63616e6e6f7420636c6f7365206368616c6c656e67652077696e646f77202d205f8201520152565b610d6c603c604092610b6b565b610d7581610d12565b0190565b610d8e9060208101905f818303910152610d5f565b90565b15610d9857565b610da0610144565b62461bcd60e51b815280610db660048201610d79565b0390fd5b610dce610dc9610dd392610c1c565b610190565b6104c2565b90565b5f1b90565b90610de75f1991610dd6565b9181191691161790565b610dfa906102a4565b90565b610e069061021e565b90565b90610e1e610e19610e2592610df1565b610dfd565b8254610ddb565b9055565b5f910312610e3357565b61014e565b916020610e59929493610e5260408201965f8301906102a7565b01906102a7565b565b634e487b7160e01b5f52601160045260245ffd5b610e7e610e84919392936104c2565b926104c2565b91610e908382026104c2565b928184041490151715610e9f57565b610e5b565b610eaf906003610e6f565b90565b1b90565b91906008610ed1910291610ecb5f1984610eb2565b92610eb2565b9181191691161790565b9190610ef1610eec610ef993610df1565b610dfd565b908354610eb6565b9055565b5f90565b610f1391610f0d610efd565b91610edb565b565b5f6002610f3b92610f2883808301610f01565b610f358360018301610f01565b01610f01565b565b634e487b7160e01b5f525f60045260245ffd5b905f03610f6257610f6090610f15565b565b610f3d565b5b818110610f73575050565b80610f805f600393610f50565b01610f68565b9091828110610f95575b505050565b610fb3610fad610fa7610fbe95610ea4565b92610ea4565b92610736565b918201910190610f67565b5f8080610f90565b90680100000000000000008111610fef5781610fe4610fed93610732565b90828155610f86565b565b610c55565b5f610ffe91610fc6565b565b905f036110125761101090610ff4565b565b610f3d565b90505190611024826106dd565b565b9060208282031261103f5761103c915f01611017565b90565b61014e565b611053611059919392936104c2565b926104c2565b820391821161106457565b610e5b565b9050519061107682610819565b565b906020828203126110915761108e915f01611069565b90565b61014e565b61109f906102a4565b9052565b9060c06111506006611158946110c76110be5f830154610226565b5f870190611096565b6110e16110d76001830154610226565b6020870190611096565b6110fb6110f16002830154610226565b6040870190611096565b61111561110b6003830154610226565b6060870190611096565b61112f6111256004830154610226565b6080870190611096565b61114961113f6005830154610226565b60a0870190611096565b0154610226565b910190611096565b565b919061116d905f60e085019401906110a3565b565b60401c90565b6111816111869161116f565b6103e3565b90565b6111939054611175565b90565b6111a26111a891610426565b91610426565b019067ffffffffffffffff82116111bb57565b610e5b565b906111d367ffffffffffffffff91610dd6565b9181191691161790565b6111f16111ec6111f692610426565b610190565b610426565b90565b90565b9061121161120c611218926111dd565b6111f9565b82546111c0565b9055565b6112436112296008610732565b61123c6112366001610b4f565b916104c2565b1115610bf3565b61126c7f000000000000000000000000000000000000000000000000000000000000000061037c565b61128661128061127b5f610c3b565b61060e565b9161060e565b145f146116eb576112bb61129942610cd5565b5b6112b56112af6112aa600a610d05565b610426565b91610426565b11610d91565b6112c56008610732565b6112d76112d15f610dba565b916104c2565b116115a6575b6113067f00000000000000000000000000000000000000000000000000000000000000006109a9565b61134f63d5719dc260206113397f00000000000000000000000000000000000000000000000000000000000000006109a9565b63eca067ad90611347610144565b948592610c92565b8252818061135f6004820161051c565b03915afa9283156115a1576113a461138f6113af956020955f91611574575b506113896001610b4f565b90611044565b92611398610144565b95869485938493610c92565b8352600483016104d2565b03915afa801561156f576113cf915f91611541575b506004600101610e09565b6113f87f000000000000000000000000000000000000000000000000000000000000000061037c565b61141261140c6114075f610c3b565b61060e565b9161060e565b145f1461149f5761143c6114304361142a6001610b4f565b90611044565b405b6006600101610e09565b60016114747f91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc9161146b610144565b9182918261115a565b0390a161149d61149661148642610cd5565b611490600a611189565b90611196565b600a6111fc565b565b6114e360206114cd7f000000000000000000000000000000000000000000000000000000000000000061037c565b6309bd5a60906114db610144565b938492610c92565b825281806114f36004820161051c565b03915afa801561153c5761143c915f9161150e575b50611432565b61152f915060203d8111611535575b6115278183610c69565b810190611078565b5f611508565b503d61151d565b610cc5565b611562915060203d8111611568575b61155a8183610c69565b810190611078565b5f6113c4565b503d611550565b610cc5565b6115949150863d811161159a575b61158c8183610c69565b810190611026565b5f61137e565b503d611582565b610cc5565b6115c96115c05f6115b96008829061073f565b500161023a565b60018001610e09565b6115ee6115e460026115dd60085f9061073f565b500161023a565b6003600101610e09565b6116086115fe600660010161023a565b6005600101610e09565b6116317f00000000000000000000000000000000000000000000000000000000000000006105ab565b63daeab41261164d5f6116466008829061073f565b500161023a565b611665600161165e60085f9061073f565b500161023a565b92803b156116e65761168a5f809461169561167e610144565b97889687958694610c92565b845260048401610e38565b03925af180156116e1576116b5575b506116b05f6008611000565b6112dd565b6116d4905f3d81116116da575b6116cc8183610c69565b810190610e29565b5f6116a4565b503d6116c2565b610cc5565b610c47565b61172f60206117197f000000000000000000000000000000000000000000000000000000000000000061037c565b63b80777ea90611727610144565b938492610c92565b8252818061173f6004820161051c565b03915afa8015611788576112bb915f9161175a575b5061129a565b61177b915060203d8111611781575b6117738183610c69565b810190610ca7565b5f611754565b503d611769565b610cc5565b611795612758565b61179d61179f565b565b6117b06117ab5f610c3b565b6127f0565b565b6117ba61178d565b565b5f90565b60018060a01b031690565b6117d76117dc9161021e565b6117c0565b90565b6117e990546117cb565b90565b6117f46117bc565b506117fe5f6117df565b90565b6118129061180d612758565b611a6f565b565b5f7f6368616c6c656e676520646f6573206e6f742065786973740000000000000000910152565b6118486018602092610b6b565b61185181611814565b0190565b61186a9060208101905f81830391015261183b565b90565b1561187457565b61187c610144565b62461bcd60e51b81528061189260048201611855565b0390fd5b60016118a291016104c2565b90565b90565b90565b5f5260205f2090565b5490565b6118c1816118b4565b8210156118db576118d36003916118ab565b910201905f90565b61071e565b356118ea81610819565b90565b9061193160406002611937946119105f820161190a5f88016118e0565b90610e09565b61192960018201611923602088016118e0565b90610e09565b0192016118e0565b90610e09565b565b919061194a57611948916118ed565b565b610f3d565b908154916801000000000000000083101561197f578261197791600161197d950181556118b8565b90611939565b565b610c55565b61199861199361199d92610c1c565b610190565b610426565b90565b506119af90602081019061082d565b90565b9060406119f76119ff936119d46119cb5f8301836119a0565b5f860190611096565b6119ee6119e460208301836119a0565b6020860190611096565b828101906119a0565b910190611096565b565b9190611a14905f606085019401906119b2565b565b5f7f617373657274696f6e206e6f7420666f756e6400000000000000000000000000910152565b611a4a6013602092610b6b565b611a5381611a16565b0190565b611a6c9060208101905f818303910152611a3d565b90565b611a95611a7c6008610732565b611a8f611a896001610b4f565b916104c2565b1161186d565b611a9e8161287a565b90611aa85f610dba565b5b80611ac5611abf611aba6008610732565b6104c2565b916104c2565b1015611b855782611afa611af4611aef611aea611ae46008879061073f565b506118a5565b6128e5565b6102a4565b916102a4565b14611b0d57611b0890611896565b611aa9565b509050611b1b5f6008611000565b611b2f611b2860086118a8565b829061194f565b611b42611b3b5f611984565b600a6111fc565b611b4a61121c565b611b807fe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b91611b77610144565b91829182611a01565b0390a1565b611b8d610144565b62461bcd60e51b815280611ba360048201611a57565b0390fd5b611bb090611801565b565b611bc390611bbe612758565b611c6d565b565b60207f617373657274696f6e73206172652070656e64696e6700000000000000000000917f63616e6e6f742075706461746520636f6e6669672068617368207768696c65205f8201520152565b611c1f6036604092610b6b565b611c2881611bc5565b0190565b611c419060208101905f818303910152611c12565b90565b15611c4b57565b611c53610144565b62461bcd60e51b815280611c6960048201611c2c565b0390fd5b611c92611c7a6008610732565b611c8c611c865f610dba565b916104c2565b14611c44565b611ca0816002600101610e09565b611cad600360010161023a565b7fb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b91611ce3611cda610144565b92839283610e38565b0390a1565b611cf190611bb2565b565b5090565b90565b611d0e611d09611d1392611cf7565b610190565b6104c2565b90565b5f7f696e76616c6964207369676e6174757265206c656e6774680000000000000000910152565b611d4a6018602092610b6b565b611d5381611d16565b0190565b611d6c9060208101905f818303910152611d3d565b90565b15611d7657565b611d7e610144565b62461bcd60e51b815280611d9460048201611d57565b0390fd5b90565b90565b611daa611daf916102a4565b611d9b565b9052565b602081611dc5611dcd93839695611d9e565b018092611d9e565b0190565b60200190565b5190565b5f80fd5b90611df2611deb610144565b9283610c69565b565b67ffffffffffffffff8111611e1257611e0e602091610c4b565b0190565b610c55565b90825f939282370152565b90929192611e37611e3282611df4565b611ddf565b93818552602085019082840111611e5357611e5192611e17565b565b611ddb565b611e63913691611e22565b90565b151590565b611e7481611e66565b03611e7b57565b5f80fd5b90505190611e8c82611e6b565b565b90602082820312611ea757611ea4915f01611e7f565b90565b61014e565b5f7f696e76616c696420746565207369676e61747572650000000000000000000000910152565b611ee06015602092610b6b565b611ee981611eac565b0190565b611f029060208101905f818303910152611ed3565b90565b15611f0c57565b611f14610144565b62461bcd60e51b815280611f2a60048201611eed565b0390fd5b5f7f617070636861696e20626c6f636b206861736820756e6368616e676564000000910152565b611f62601d602092610b6b565b611f6b81611f2e565b0190565b611f849060208101905f818303910152611f55565b90565b15611f8e57565b611f96610144565b62461bcd60e51b815280611fac60048201611f6f565b0390fd5b5f7f617373657274696f6e20616c7265616479206578697374730000000000000000910152565b611fe46018602092610b6b565b611fed81611fb0565b0190565b6120069060208101905f818303910152611fd7565b90565b1561201057565b612018610144565b62461bcd60e51b81528061202e60048201611ff1565b0390fd5b90565b61204961204461204e92612032565b610190565b6104c2565b90565b61205d6120629161021e565b61048a565b90565b61206f9054612051565b90565b612081612087919392936104c2565b926104c2565b820180921161209257565b610e5b565b6120ab6120a66120b0926104c2565b610190565b6104c2565b90565b90565b906120cb6120c66120d292612097565b6120b3565b8254610ddb565b9055565b6120df90610193565b90565b6120eb906120d6565b90565b6120f7906101af565b90565b612103906101af565b90565b905090565b6121165f8092612106565b0190565b6121239061210b565b90565b9061213861213383611df4565b611ddf565b918252565b606090565b3d5f1461215d576121523d612126565b903d5f602084013e5b565b61216561213d565b9061215b565b5f7f7061796d656e74206661696c6564000000000000000000000000000000000000910152565b61219f600e602092610b6b565b6121a88161216b565b0190565b6121c19060208101905f818303910152612192565b90565b156121cb57565b6121d3610144565b62461bcd60e51b8152806121e9600482016121ac565b0390fd5b929060206122dd9195939561221f612206828990611cf3565b6122196122136041611cfa565b916104c2565b14611d6f565b6122288661287a565b966122d26122bd61224161223c6001611d98565b6129b2565b61226a8b9161225c612251610144565b9384928a8401611db3565b888201810382520382610c69565b61227c61227682611dd7565b91611dd1565b20936122b76122aa7f00000000000000000000000000000000000000000000000000000000000000006101bb565b94637217efcd9692611e58565b90612a51565b926122c6610144565b95869485938493610c92565b835260048301610627565b03915afa8015612509576122f8915f916124db575b50611f05565b61232a6123065f85016118e0565b61232361231d6123186001800161023a565b6102a4565b916102a4565b1415611f87565b6123335f610dba565b5b8061235061234a6123456008610732565b6104c2565b916104c2565b101561239d57612398906123938661238c61238661238161237c6123766008889061073f565b506118a5565b6128e5565b6102a4565b916102a4565b1415612009565b611896565b612334565b50916123d69193506123af6008610732565b6123c16123bb5f610dba565b916104c2565b146124b0575b6123d160086118a8565b61194f565b6123e06008610732565b6123f36123ed6002612035565b916104c2565b146123fc575b50565b5f8061247b6124766124aa9461242e6124276124186001610b4f565b6124226009612065565b612072565b60096120b6565b6124386009612065565b61246e7f37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a791612465610144565b918291826104d2565b0390a16120e2565b6120ee565b612484306120fa565b3161248d610144565b90816124988161211a565b03925af16124a4612142565b506121c4565b5f6123f9565b6124d66124cf6124bf42610cd5565b6124c9600a611189565b90611196565b600a6111fc565b6123c7565b6124fc915060203d8111612502575b6124f48183610c69565b810190611e8e565b5f6122f2565b503d6124ea565b610cc5565b61251f9061251a612758565b612614565b565b60207f68696c6520617373657274696f6e2069732070656e64696e6700000000000000917f63616e6e6f7420757064617465206368616c6c656e67652077696e646f7720775f8201520152565b61257b6039604092610b6b565b61258481612521565b0190565b61259d9060208101905f81830391015261256e565b90565b156125a757565b6125af610144565b62461bcd60e51b8152806125c560048201612588565b0390fd5b60401b90565b906125ea6fffffffffffffffff0000000000000000916125c9565b9181191691161790565b90612609612604612610926111dd565b6111f9565b82546125cf565b9055565b6126449061263d6126256008610732565b6126376126315f610dba565b916104c2565b146125a0565b600a6125f4565b565b61264f9061250e565b565b6126629061265d612758565b612664565b565b6126896126716008610732565b61268361267d5f610dba565b916104c2565b14611c44565b612696815f600101610e09565b6126a26001800161023a565b7fc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec916126d86126cf610144565b92839283610e38565b0390a1565b6126e690612651565b565b6126f9906126f4612758565b6126fb565b565b8061271661271061270b5f610c3b565b61060e565b9161060e565b1461272657612724906127f0565b565b6127496127325f610c3b565b5f918291631e4fbdf760e01b835260048301610627565b0390fd5b612756906126e8565b565b6127606117ec565b61277961277361276e612a73565b61060e565b9161060e565b0361278057565b6127a261278b612a73565b5f91829163118cdaa760e01b835260048301610627565b0390fd5b906127b760018060a01b0391610dd6565b9181191691161790565b6127ca906101af565b90565b90565b906127e56127e06127ec926127c1565b6127cd565b82546127a6565b9055565b6127f95f6117df565b612803825f6127d0565b906128376128317f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936127c1565b916127c1565b91612840610144565b8061284a8161051c565b0390a3565b6020939261286e8583612866829561287697611d9e565b018092611d9e565b018092611d9e565b0190565b612882610efd565b506128cf6128915f83016118e0565b6128c06128ac60406128a5602087016118e0565b95016118e0565b6128b4610144565b9485936020850161284f565b60208201810382520382610c69565b6128e16128db82611dd7565b91611dd1565b2090565b6128ed610efd565b5061293a6128fc5f830161023a565b61292b61291760026129106001870161023a565b950161023a565b61291f610144565b9485936020850161284f565b60208201810382520382610c69565b61294c61294682611dd7565b91611dd1565b2090565b9461299e6020809998959661299682809961298e826129a69a6129866129ae9f8061297e859e928693611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b018092611d9e565b0190565b6129ba610efd565b50612a3b6129c95f830161023a565b612a2c6129d86001850161023a565b936129e56002820161023a565b906129f26003820161023a565b6129fe6004830161023a565b90612a176006612a106005860161023a565b940161023a565b93612a20610144565b98899760208901612950565b60208201810382520382610c69565b612a4d612a4782611dd7565b91611dd1565b2090565b612a7091612a6791612a616117bc565b50612aa4565b90929192612ba1565b90565b612a7b6117bc565b503390565b5f90565b612a98612a93612a9d926104c2565b610dd6565b6102a4565b90565b5f90565b919091612aaf6117bc565b50612ab8612a80565b50612ac1610efd565b50612acb83611dd7565b612ade612ad86041611cfa565b916104c2565b145f14612b2557612b1e9192612af2610efd565b50612afb610efd565b50612b04612aa0565b506020810151606060408301519201515f1a909192612cfe565b9192909190565b50612b2f5f610c3b565b90612b43612b3e600294611dd7565b612a84565b91929190565b634e487b7160e01b5f52602160045260245ffd5b60041115612b6757565b612b49565b90612b7682612b5d565b565b9190612b8b905f602085019401906102a7565b565b612b99612b9e9161021e565b612097565b90565b80612bb4612bae5f612b6c565b91612b6c565b145f14612bbf575050565b80612bd3612bcd6001612b6c565b91612b6c565b145f14612bf6575f63f645eedf60e01b815280612bf26004820161051c565b0390fd5b80612c0a612c046002612b6c565b91612b6c565b145f14612c3857612c34612c1d83612b8d565b5f91829163fce698f760e01b8352600483016104d2565b0390fd5b612c4b612c456003612b6c565b91612b6c565b14612c535750565b612c6e905f9182916335e2f38360e21b835260048301612b78565b0390fd5b90565b612c89612c84612c8e92612c72565b610190565b6104c2565b90565b60ff1690565b612ca090612c91565b9052565b612cd9612ce094612ccf606094989795612cc5608086019a5f8701906102a7565b6020850190612c97565b60408301906102a7565b01906102a7565b565b612cf6612cf1612cfb92610c1c565b610dd6565b6102a4565b90565b939293612d096117bc565b50612d12612a80565b50612d1b610efd565b50612d2585612b8d565b612d57612d517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0612c75565b916104c2565b11612de45790612d7a602094955f94939293612d71610144565b94859485612ca4565b838052039060015afa15612ddf57612d925f51610dd6565b80612dad612da7612da25f610c3b565b61060e565b9161060e565b14612dc3575f91612dbd5f612ce2565b91929190565b50612dcd5f610c3b565b600191612dd95f612ce2565b91929190565b610cc5565b505050612df05f610c3b565b906003929192919056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\x0BHW\0[a\0\x1F_5a\x01>V[\x80c:\0\x9A\x06\x14a\x019W\x80c<\xEA\xAE}\x14a\x014W\x80cB\x0C\xAF:\x14a\x01/W\x80cK\xD1g\xC9\x14a\x01*W\x80ci{^b\x14a\x01%W\x80clL `\x14a\x01 W\x80cqP\x18\xA6\x14a\x01\x1BW\x80c\x80\x95\x97!\x14a\x01\x16W\x80c\x8D\xA5\xCB[\x14a\x01\x11W\x80c\x8F\xEDU\xA3\x14a\x01\x0CW\x80c\xA5n\xC6\xCD\x14a\x01\x07W\x80c\xC3\xF2\xDB\xD3\x14a\x01\x02W\x80c\xE5\x0CaV\x14a\0\xFDW\x80c\xE7\x8C\xEA\x92\x14a\0\xF8W\x80c\xEB`U:\x14a\0\xF3W\x80c\xEE\x1C(\xB8\x14a\0\xEEW\x80c\xF2#\x05\\\x14a\0\xE9Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x15V[a\n\xC4V[a\n\x8FV[a\nMV[a\t\xD7V[a\tNV[a\x08ZV[a\x07\xE1V[a\x06\xAAV[a\x06<V[a\x05\xD9V[a\x05TV[a\x05!V[a\x04\xE7V[a\x04UV[a\x03\xAAV[a\x03\x1CV[a\x01\xE9V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01\\WV[a\x01NV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x01\xA7a\x01\xA2a\x01\xAC\x92a\x01\x85V[a\x01\x90V[a\x01\x85V[\x90V[a\x01\xB8\x90a\x01\x93V[\x90V[a\x01\xC4\x90a\x01\xAFV[\x90V[a\x01\xD0\x90a\x01\xBBV[\x90RV[\x91\x90a\x01\xE7\x90_` \x85\x01\x94\x01\x90a\x01\xC7V[V[4a\x02\x19Wa\x01\xF96`\x04a\x01RV[a\x02\x15a\x02\x04a\x01aV[a\x02\x0Ca\x01DV[\x91\x82\x91\x82a\x01\xD4V[\x03\x90\xF3[a\x01JV[_\x1C\x90V[\x90V[a\x022a\x027\x91a\x02\x1EV[a\x02#V[\x90V[a\x02D\x90Ta\x02&V[\x90V[`\x01a\x02T_\x82\x01a\x02:V[\x91a\x02a`\x01\x83\x01a\x02:V[\x91a\x02n`\x02\x82\x01a\x02:V[\x91a\x02{`\x03\x83\x01a\x02:V[\x91a\x02\x88`\x04\x82\x01a\x02:V[\x91a\x02\xA1`\x06a\x02\x9A`\x05\x85\x01a\x02:V[\x93\x01a\x02:V[\x90V[\x90V[a\x02\xB0\x90a\x02\xA4V[\x90RV[\x94\x92\x90\x97\x96\x95\x93\x91`\xE0\x86\x01\x98_\x87\x01a\x02\xCD\x91a\x02\xA7V[` \x86\x01a\x02\xDA\x91a\x02\xA7V[`@\x85\x01a\x02\xE7\x91a\x02\xA7V[``\x84\x01a\x02\xF4\x91a\x02\xA7V[`\x80\x83\x01a\x03\x01\x91a\x02\xA7V[`\xA0\x82\x01a\x03\x0E\x91a\x02\xA7V[`\xC0\x01a\x03\x1A\x91a\x02\xA7V[V[4a\x03SWa\x03,6`\x04a\x01RV[a\x03Oa\x037a\x02GV[\x93a\x03F\x97\x95\x97\x93\x91\x93a\x01DV[\x97\x88\x97\x88a\x02\xB4V[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x03\x85\x90a\x01\xAFV[\x90V[a\x03\x91\x90a\x03|V[\x90RV[\x91\x90a\x03\xA8\x90_` \x85\x01\x94\x01\x90a\x03\x88V[V[4a\x03\xDAWa\x03\xBA6`\x04a\x01RV[a\x03\xD6a\x03\xC5a\x03XV[a\x03\xCDa\x01DV[\x91\x82\x91\x82a\x03\x95V[\x03\x90\xF3[a\x01JV[\x1C\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\0\x90`\x08a\x04\x05\x93\x02a\x03\xDFV[a\x03\xE3V[\x90V[\x90a\x04\x13\x91Ta\x03\xF0V[\x90V[a\x04#`\n`\x08\x90a\x04\x08V[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04<\x90a\x04&V[\x90RV[\x91\x90a\x04S\x90_` \x85\x01\x94\x01\x90a\x043V[V[4a\x04\x85Wa\x04e6`\x04a\x01RV[a\x04\x81a\x04pa\x04\x16V[a\x04xa\x01DV[\x91\x82\x91\x82a\x04@V[\x03\x90\xF3[a\x01JV[\x90V[a\x04\x9D\x90`\x08a\x04\xA2\x93\x02a\x03\xDFV[a\x04\x8AV[\x90V[\x90a\x04\xB0\x91Ta\x04\x8DV[\x90V[a\x04\xBF`\t_\x90a\x04\xA5V[\x90V[\x90V[a\x04\xCE\x90a\x04\xC2V[\x90RV[\x91\x90a\x04\xE5\x90_` \x85\x01\x94\x01\x90a\x04\xC5V[V[4a\x05\x17Wa\x04\xF76`\x04a\x01RV[a\x05\x13a\x05\x02a\x04\xB3V[a\x05\na\x01DV[\x91\x82\x91\x82a\x04\xD2V[\x03\x90\xF3[a\x01JV[_\x01\x90V[4a\x05OWa\x0516`\x04a\x01RV[a\x059a\x12\x1CV[a\x05Aa\x01DV[\x80a\x05K\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[4a\x05\x82Wa\x05d6`\x04a\x01RV[a\x05la\x17\xB2V[a\x05ta\x01DV[\x80a\x05~\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x05\xB4\x90a\x01\xAFV[\x90V[a\x05\xC0\x90a\x05\xABV[\x90RV[\x91\x90a\x05\xD7\x90_` \x85\x01\x94\x01\x90a\x05\xB7V[V[4a\x06\tWa\x05\xE96`\x04a\x01RV[a\x06\x05a\x05\xF4a\x05\x87V[a\x05\xFCa\x01DV[\x91\x82\x91\x82a\x05\xC4V[\x03\x90\xF3[a\x01JV[a\x06\x17\x90a\x01\x85V[\x90V[a\x06#\x90a\x06\x0EV[\x90RV[\x91\x90a\x06:\x90_` \x85\x01\x94\x01\x90a\x06\x1AV[V[4a\x06lWa\x06L6`\x04a\x01RV[a\x06ha\x06Wa\x17\xECV[a\x06_a\x01DV[\x91\x82\x91\x82a\x06'V[\x03\x90\xF3[a\x01JV[_\x80\xFD[_\x80\xFD[\x90\x81``\x91\x03\x12a\x06\x87W\x90V[a\x06uV[\x90``\x82\x82\x03\x12a\x06\xA5Wa\x06\xA2\x91_\x01a\x06yV[\x90V[a\x01NV[4a\x06\xD8Wa\x06\xC2a\x06\xBD6`\x04a\x06\x8CV[a\x1B\xA7V[a\x06\xCAa\x01DV[\x80a\x06\xD4\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[a\x06\xE6\x81a\x04\xC2V[\x03a\x06\xEDWV[_\x80\xFD[\x90P5\x90a\x06\xFE\x82a\x06\xDDV[V[\x90` \x82\x82\x03\x12a\x07\x19Wa\x07\x16\x91_\x01a\x06\xF1V[\x90V[a\x01NV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x07H\x81a\x072V[\x82\x10\x15a\x07bWa\x07Z`\x03\x91a\x076V[\x91\x02\x01\x90_\x90V[a\x07\x1EV[`\x08\x90a\x07s\x82a\x072V[\x81\x10\x15a\x07\xABWa\x07\x83\x91a\x07?V[Pa\x07\x8F_\x82\x01a\x02:V[\x91a\x07\xA8`\x02a\x07\xA1`\x01\x85\x01a\x02:V[\x93\x01a\x02:V[\x90V[_\x80\xFD[`@\x90a\x07\xD8a\x07\xDF\x94\x96\x95\x93\x96a\x07\xCE``\x84\x01\x98_\x85\x01\x90a\x02\xA7V[` \x83\x01\x90a\x02\xA7V[\x01\x90a\x02\xA7V[V[4a\x08\x14Wa\x08\x10a\x07\xFCa\x07\xF76`\x04a\x07\0V[a\x07gV[a\x08\x07\x93\x91\x93a\x01DV[\x93\x84\x93\x84a\x07\xAFV[\x03\x90\xF3[a\x01JV[a\x08\"\x81a\x02\xA4V[\x03a\x08)WV[_\x80\xFD[\x90P5\x90a\x08:\x82a\x08\x19V[V[\x90` \x82\x82\x03\x12a\x08UWa\x08R\x91_\x01a\x08-V[\x90V[a\x01NV[4a\x08\x88Wa\x08ra\x08m6`\x04a\x08<V[a\x1C\xE8V[a\x08za\x01DV[\x80a\x08\x84\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x08\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x08\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x08\xC9WV[a\x08\x95V[a\x08\x91V[a\x08\x8DV[a\x08\xE1\x81a\x06\x0EV[\x03a\x08\xE8WV[_\x80\xFD[\x90P5\x90a\x08\xF9\x82a\x08\xD8V[V[\x90`\xA0\x82\x82\x03\x12a\tIWa\t\x12\x81_\x84\x01a\x06yV[\x92``\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\tDWa\t6\x83a\tA\x92\x86\x01a\x08\x99V[\x93\x90\x94`\x80\x01a\x08\xECV[\x90V[a\x06qV[a\x01NV[4a\t\x80Wa\tja\ta6`\x04a\x08\xFBV[\x92\x91\x90\x91a!\xEDV[a\tra\x01DV[\x80a\t|\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\t\xB2\x90a\x01\xAFV[\x90V[a\t\xBE\x90a\t\xA9V[\x90RV[\x91\x90a\t\xD5\x90_` \x85\x01\x94\x01\x90a\t\xB5V[V[4a\n\x07Wa\t\xE76`\x04a\x01RV[a\n\x03a\t\xF2a\t\x85V[a\t\xFAa\x01DV[\x91\x82\x91\x82a\t\xC2V[\x03\x90\xF3[a\x01JV[a\n\x15\x81a\x04&V[\x03a\n\x1CWV[_\x80\xFD[\x90P5\x90a\n-\x82a\n\x0CV[V[\x90` \x82\x82\x03\x12a\nHWa\nE\x91_\x01a\n V[\x90V[a\x01NV[4a\n{Wa\nea\n`6`\x04a\n/V[a&FV[a\nma\x01DV[\x80a\nw\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[a\n\x8C`\n_\x90a\x04\x08V[\x90V[4a\n\xBFWa\n\x9F6`\x04a\x01RV[a\n\xBBa\n\xAAa\n\x80V[a\n\xB2a\x01DV[\x91\x82\x91\x82a\x04@V[\x03\x90\xF3[a\x01JV[4a\n\xF2Wa\n\xDCa\n\xD76`\x04a\x08<V[a&\xDDV[a\n\xE4a\x01DV[\x80a\n\xEE\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[\x90` \x82\x82\x03\x12a\x0B\x10Wa\x0B\r\x91_\x01a\x08\xECV[\x90V[a\x01NV[4a\x0BCWa\x0B-a\x0B(6`\x04a\n\xF7V[a'MV[a\x0B5a\x01DV[\x80a\x0B?\x81a\x05\x1CV[\x03\x90\xF3[a\x01JV[_\x80\xFD[\x90V[a\x0Bca\x0B^a\x0Bh\x92a\x0BLV[a\x01\x90V[a\x04\xC2V[\x90V[` \x91\x81R\x01\x90V[` \x7Ftoo many assertions\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\x0B\xCE`3`@\x92a\x0BkV[a\x0B\xD7\x81a\x0BtV[\x01\x90V[a\x0B\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xC1V[\x90V[\x15a\x0B\xFAWV[a\x0C\x02a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\x18`\x04\x82\x01a\x0B\xDBV[\x03\x90\xFD[\x90V[a\x0C3a\x0C.a\x0C8\x92a\x0C\x1CV[a\x01\x90V[a\x01\x85V[\x90V[a\x0CD\x90a\x0C\x1FV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0Cs\x90a\x0CKV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0C\x8DW`@RV[a\x0CUV[`\xE0\x1B\x90V[\x90PQ\x90a\x0C\xA5\x82a\n\x0CV[V[\x90` \x82\x82\x03\x12a\x0C\xC0Wa\x0C\xBD\x91_\x01a\x0C\x98V[\x90V[a\x01NV[a\x0C\xCDa\x01DV[=_\x82>=\x90\xFD[a\x0C\xE9a\x0C\xE4a\x0C\xEE\x92a\x04\xC2V[a\x01\x90V[a\x04&V[\x90V[a\x0C\xFDa\r\x02\x91a\x02\x1EV[a\x03\xE3V[\x90V[a\r\x0F\x90Ta\x0C\xF1V[\x90V[` \x7Finsufficient time has passed\0\0\0\0\x91\x7Fcannot close challenge window - _\x82\x01R\x01RV[a\rl`<`@\x92a\x0BkV[a\ru\x81a\r\x12V[\x01\x90V[a\r\x8E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\r_V[\x90V[\x15a\r\x98WV[a\r\xA0a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xB6`\x04\x82\x01a\ryV[\x03\x90\xFD[a\r\xCEa\r\xC9a\r\xD3\x92a\x0C\x1CV[a\x01\x90V[a\x04\xC2V[\x90V[_\x1B\x90V[\x90a\r\xE7_\x19\x91a\r\xD6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\xFA\x90a\x02\xA4V[\x90V[a\x0E\x06\x90a\x02\x1EV[\x90V[\x90a\x0E\x1Ea\x0E\x19a\x0E%\x92a\r\xF1V[a\r\xFDV[\x82Ta\r\xDBV[\x90UV[_\x91\x03\x12a\x0E3WV[a\x01NV[\x91` a\x0EY\x92\x94\x93a\x0ER`@\x82\x01\x96_\x83\x01\x90a\x02\xA7V[\x01\x90a\x02\xA7V[V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0E~a\x0E\x84\x91\x93\x92\x93a\x04\xC2V[\x92a\x04\xC2V[\x91a\x0E\x90\x83\x82\x02a\x04\xC2V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x0E\x9FWV[a\x0E[V[a\x0E\xAF\x90`\x03a\x0EoV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xD1\x91\x02\x91a\x0E\xCB_\x19\x84a\x0E\xB2V[\x92a\x0E\xB2V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0E\xF1a\x0E\xECa\x0E\xF9\x93a\r\xF1V[a\r\xFDV[\x90\x83Ta\x0E\xB6V[\x90UV[_\x90V[a\x0F\x13\x91a\x0F\ra\x0E\xFDV[\x91a\x0E\xDBV[V[_`\x02a\x0F;\x92a\x0F(\x83\x80\x83\x01a\x0F\x01V[a\x0F5\x83`\x01\x83\x01a\x0F\x01V[\x01a\x0F\x01V[V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x0FbWa\x0F`\x90a\x0F\x15V[V[a\x0F=V[[\x81\x81\x10a\x0FsWPPV[\x80a\x0F\x80_`\x03\x93a\x0FPV[\x01a\x0FhV[\x90\x91\x82\x81\x10a\x0F\x95W[PPPV[a\x0F\xB3a\x0F\xADa\x0F\xA7a\x0F\xBE\x95a\x0E\xA4V[\x92a\x0E\xA4V[\x92a\x076V[\x91\x82\x01\x91\x01\x90a\x0FgV[_\x80\x80a\x0F\x90V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x0F\xEFW\x81a\x0F\xE4a\x0F\xED\x93a\x072V[\x90\x82\x81Ua\x0F\x86V[V[a\x0CUV[_a\x0F\xFE\x91a\x0F\xC6V[V[\x90_\x03a\x10\x12Wa\x10\x10\x90a\x0F\xF4V[V[a\x0F=V[\x90PQ\x90a\x10$\x82a\x06\xDDV[V[\x90` \x82\x82\x03\x12a\x10?Wa\x10<\x91_\x01a\x10\x17V[\x90V[a\x01NV[a\x10Sa\x10Y\x91\x93\x92\x93a\x04\xC2V[\x92a\x04\xC2V[\x82\x03\x91\x82\x11a\x10dWV[a\x0E[V[\x90PQ\x90a\x10v\x82a\x08\x19V[V[\x90` \x82\x82\x03\x12a\x10\x91Wa\x10\x8E\x91_\x01a\x10iV[\x90V[a\x01NV[a\x10\x9F\x90a\x02\xA4V[\x90RV[\x90`\xC0a\x11P`\x06a\x11X\x94a\x10\xC7a\x10\xBE_\x83\x01Ta\x02&V[_\x87\x01\x90a\x10\x96V[a\x10\xE1a\x10\xD7`\x01\x83\x01Ta\x02&V[` \x87\x01\x90a\x10\x96V[a\x10\xFBa\x10\xF1`\x02\x83\x01Ta\x02&V[`@\x87\x01\x90a\x10\x96V[a\x11\x15a\x11\x0B`\x03\x83\x01Ta\x02&V[``\x87\x01\x90a\x10\x96V[a\x11/a\x11%`\x04\x83\x01Ta\x02&V[`\x80\x87\x01\x90a\x10\x96V[a\x11Ia\x11?`\x05\x83\x01Ta\x02&V[`\xA0\x87\x01\x90a\x10\x96V[\x01Ta\x02&V[\x91\x01\x90a\x10\x96V[V[\x91\x90a\x11m\x90_`\xE0\x85\x01\x94\x01\x90a\x10\xA3V[V[`@\x1C\x90V[a\x11\x81a\x11\x86\x91a\x11oV[a\x03\xE3V[\x90V[a\x11\x93\x90Ta\x11uV[\x90V[a\x11\xA2a\x11\xA8\x91a\x04&V[\x91a\x04&V[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x11\xBBWV[a\x0E[V[\x90a\x11\xD3g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\r\xD6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\xF1a\x11\xECa\x11\xF6\x92a\x04&V[a\x01\x90V[a\x04&V[\x90V[\x90V[\x90a\x12\x11a\x12\x0Ca\x12\x18\x92a\x11\xDDV[a\x11\xF9V[\x82Ta\x11\xC0V[\x90UV[a\x12Ca\x12)`\x08a\x072V[a\x12<a\x126`\x01a\x0BOV[\x91a\x04\xC2V[\x11\x15a\x0B\xF3V[a\x12l\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[a\x12\x86a\x12\x80a\x12{_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14_\x14a\x16\xEBWa\x12\xBBa\x12\x99Ba\x0C\xD5V[[a\x12\xB5a\x12\xAFa\x12\xAA`\na\r\x05V[a\x04&V[\x91a\x04&V[\x11a\r\x91V[a\x12\xC5`\x08a\x072V[a\x12\xD7a\x12\xD1_a\r\xBAV[\x91a\x04\xC2V[\x11a\x15\xA6W[a\x13\x06\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xA9V[a\x13Oc\xD5q\x9D\xC2` a\x139\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\t\xA9V[c\xEC\xA0g\xAD\x90a\x13Ga\x01DV[\x94\x85\x92a\x0C\x92V[\x82R\x81\x80a\x13_`\x04\x82\x01a\x05\x1CV[\x03\x91Z\xFA\x92\x83\x15a\x15\xA1Wa\x13\xA4a\x13\x8Fa\x13\xAF\x95` \x95_\x91a\x15tW[Pa\x13\x89`\x01a\x0BOV[\x90a\x10DV[\x92a\x13\x98a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\x0C\x92V[\x83R`\x04\x83\x01a\x04\xD2V[\x03\x91Z\xFA\x80\x15a\x15oWa\x13\xCF\x91_\x91a\x15AW[P`\x04`\x01\x01a\x0E\tV[a\x13\xF8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[a\x14\x12a\x14\x0Ca\x14\x07_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14_\x14a\x14\x9FWa\x14<a\x140Ca\x14*`\x01a\x0BOV[\x90a\x10DV[@[`\x06`\x01\x01a\x0E\tV[`\x01a\x14t\x7F\x91\t+\xCFU\t!\xE3\x81\xE8\x1F\x06i3 SK\x14J~V\x1C_\xC0\x8F\x19@\xD5\x08\xA8\\\xDC\x91a\x14ka\x01DV[\x91\x82\x91\x82a\x11ZV[\x03\x90\xA1a\x14\x9Da\x14\x96a\x14\x86Ba\x0C\xD5V[a\x14\x90`\na\x11\x89V[\x90a\x11\x96V[`\na\x11\xFCV[V[a\x14\xE3` a\x14\xCD\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[c\t\xBDZ`\x90a\x14\xDBa\x01DV[\x93\x84\x92a\x0C\x92V[\x82R\x81\x80a\x14\xF3`\x04\x82\x01a\x05\x1CV[\x03\x91Z\xFA\x80\x15a\x15<Wa\x14<\x91_\x91a\x15\x0EW[Pa\x142V[a\x15/\x91P` =\x81\x11a\x155W[a\x15'\x81\x83a\x0CiV[\x81\x01\x90a\x10xV[_a\x15\x08V[P=a\x15\x1DV[a\x0C\xC5V[a\x15b\x91P` =\x81\x11a\x15hW[a\x15Z\x81\x83a\x0CiV[\x81\x01\x90a\x10xV[_a\x13\xC4V[P=a\x15PV[a\x0C\xC5V[a\x15\x94\x91P\x86=\x81\x11a\x15\x9AW[a\x15\x8C\x81\x83a\x0CiV[\x81\x01\x90a\x10&V[_a\x13~V[P=a\x15\x82V[a\x0C\xC5V[a\x15\xC9a\x15\xC0_a\x15\xB9`\x08\x82\x90a\x07?V[P\x01a\x02:V[`\x01\x80\x01a\x0E\tV[a\x15\xEEa\x15\xE4`\x02a\x15\xDD`\x08_\x90a\x07?V[P\x01a\x02:V[`\x03`\x01\x01a\x0E\tV[a\x16\x08a\x15\xFE`\x06`\x01\x01a\x02:V[`\x05`\x01\x01a\x0E\tV[a\x161\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x05\xABV[c\xDA\xEA\xB4\x12a\x16M_a\x16F`\x08\x82\x90a\x07?V[P\x01a\x02:V[a\x16e`\x01a\x16^`\x08_\x90a\x07?V[P\x01a\x02:V[\x92\x80;\x15a\x16\xE6Wa\x16\x8A_\x80\x94a\x16\x95a\x16~a\x01DV[\x97\x88\x96\x87\x95\x86\x94a\x0C\x92V[\x84R`\x04\x84\x01a\x0E8V[\x03\x92Z\xF1\x80\x15a\x16\xE1Wa\x16\xB5W[Pa\x16\xB0_`\x08a\x10\0V[a\x12\xDDV[a\x16\xD4\x90_=\x81\x11a\x16\xDAW[a\x16\xCC\x81\x83a\x0CiV[\x81\x01\x90a\x0E)V[_a\x16\xA4V[P=a\x16\xC2V[a\x0C\xC5V[a\x0CGV[a\x17/` a\x17\x19\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x03|V[c\xB8\x07w\xEA\x90a\x17'a\x01DV[\x93\x84\x92a\x0C\x92V[\x82R\x81\x80a\x17?`\x04\x82\x01a\x05\x1CV[\x03\x91Z\xFA\x80\x15a\x17\x88Wa\x12\xBB\x91_\x91a\x17ZW[Pa\x12\x9AV[a\x17{\x91P` =\x81\x11a\x17\x81W[a\x17s\x81\x83a\x0CiV[\x81\x01\x90a\x0C\xA7V[_a\x17TV[P=a\x17iV[a\x0C\xC5V[a\x17\x95a'XV[a\x17\x9Da\x17\x9FV[V[a\x17\xB0a\x17\xAB_a\x0C;V[a'\xF0V[V[a\x17\xBAa\x17\x8DV[V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x17\xD7a\x17\xDC\x91a\x02\x1EV[a\x17\xC0V[\x90V[a\x17\xE9\x90Ta\x17\xCBV[\x90V[a\x17\xF4a\x17\xBCV[Pa\x17\xFE_a\x17\xDFV[\x90V[a\x18\x12\x90a\x18\ra'XV[a\x1AoV[V[_\x7Fchallenge does not exist\0\0\0\0\0\0\0\0\x91\x01RV[a\x18H`\x18` \x92a\x0BkV[a\x18Q\x81a\x18\x14V[\x01\x90V[a\x18j\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x18;V[\x90V[\x15a\x18tWV[a\x18|a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x18\x92`\x04\x82\x01a\x18UV[\x03\x90\xFD[`\x01a\x18\xA2\x91\x01a\x04\xC2V[\x90V[\x90V[\x90V[_R` _ \x90V[T\x90V[a\x18\xC1\x81a\x18\xB4V[\x82\x10\x15a\x18\xDBWa\x18\xD3`\x03\x91a\x18\xABV[\x91\x02\x01\x90_\x90V[a\x07\x1EV[5a\x18\xEA\x81a\x08\x19V[\x90V[\x90a\x191`@`\x02a\x197\x94a\x19\x10_\x82\x01a\x19\n_\x88\x01a\x18\xE0V[\x90a\x0E\tV[a\x19)`\x01\x82\x01a\x19#` \x88\x01a\x18\xE0V[\x90a\x0E\tV[\x01\x92\x01a\x18\xE0V[\x90a\x0E\tV[V[\x91\x90a\x19JWa\x19H\x91a\x18\xEDV[V[a\x0F=V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x19\x7FW\x82a\x19w\x91`\x01a\x19}\x95\x01\x81Ua\x18\xB8V[\x90a\x199V[V[a\x0CUV[a\x19\x98a\x19\x93a\x19\x9D\x92a\x0C\x1CV[a\x01\x90V[a\x04&V[\x90V[Pa\x19\xAF\x90` \x81\x01\x90a\x08-V[\x90V[\x90`@a\x19\xF7a\x19\xFF\x93a\x19\xD4a\x19\xCB_\x83\x01\x83a\x19\xA0V[_\x86\x01\x90a\x10\x96V[a\x19\xEEa\x19\xE4` \x83\x01\x83a\x19\xA0V[` \x86\x01\x90a\x10\x96V[\x82\x81\x01\x90a\x19\xA0V[\x91\x01\x90a\x10\x96V[V[\x91\x90a\x1A\x14\x90_``\x85\x01\x94\x01\x90a\x19\xB2V[V[_\x7Fassertion not found\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1AJ`\x13` \x92a\x0BkV[a\x1AS\x81a\x1A\x16V[\x01\x90V[a\x1Al\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1A=V[\x90V[a\x1A\x95a\x1A|`\x08a\x072V[a\x1A\x8Fa\x1A\x89`\x01a\x0BOV[\x91a\x04\xC2V[\x11a\x18mV[a\x1A\x9E\x81a(zV[\x90a\x1A\xA8_a\r\xBAV[[\x80a\x1A\xC5a\x1A\xBFa\x1A\xBA`\x08a\x072V[a\x04\xC2V[\x91a\x04\xC2V[\x10\x15a\x1B\x85W\x82a\x1A\xFAa\x1A\xF4a\x1A\xEFa\x1A\xEAa\x1A\xE4`\x08\x87\x90a\x07?V[Pa\x18\xA5V[a(\xE5V[a\x02\xA4V[\x91a\x02\xA4V[\x14a\x1B\rWa\x1B\x08\x90a\x18\x96V[a\x1A\xA9V[P\x90Pa\x1B\x1B_`\x08a\x10\0V[a\x1B/a\x1B(`\x08a\x18\xA8V[\x82\x90a\x19OV[a\x1BBa\x1B;_a\x19\x84V[`\na\x11\xFCV[a\x1BJa\x12\x1CV[a\x1B\x80\x7F\xE4.\xAF\x077\xE2G\x8A_Z\xED:\x06\x10\xAE{\t\xA2|\xBA\xC9\xADj\\\xC4\xD6\x8Fx\xAF\xD1B[\x91a\x1Bwa\x01DV[\x91\x82\x91\x82a\x1A\x01V[\x03\x90\xA1V[a\x1B\x8Da\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1B\xA3`\x04\x82\x01a\x1AWV[\x03\x90\xFD[a\x1B\xB0\x90a\x18\x01V[V[a\x1B\xC3\x90a\x1B\xBEa'XV[a\x1CmV[V[` \x7Fassertions are pending\0\0\0\0\0\0\0\0\0\0\x91\x7Fcannot update config hash while _\x82\x01R\x01RV[a\x1C\x1F`6`@\x92a\x0BkV[a\x1C(\x81a\x1B\xC5V[\x01\x90V[a\x1CA\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1C\x12V[\x90V[\x15a\x1CKWV[a\x1CSa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1Ci`\x04\x82\x01a\x1C,V[\x03\x90\xFD[a\x1C\x92a\x1Cz`\x08a\x072V[a\x1C\x8Ca\x1C\x86_a\r\xBAV[\x91a\x04\xC2V[\x14a\x1CDV[a\x1C\xA0\x81`\x02`\x01\x01a\x0E\tV[a\x1C\xAD`\x03`\x01\x01a\x02:V[\x7F\xB9\xEB \xB3/\xAC\x96X\x84\xCBX2a\x02%|\xAE`E\x04\xF0\xA3l\xD1\0\x8A2\x84Z\xD5\xC2\x9B\x91a\x1C\xE3a\x1C\xDAa\x01DV[\x92\x83\x92\x83a\x0E8V[\x03\x90\xA1V[a\x1C\xF1\x90a\x1B\xB2V[V[P\x90V[\x90V[a\x1D\x0Ea\x1D\ta\x1D\x13\x92a\x1C\xF7V[a\x01\x90V[a\x04\xC2V[\x90V[_\x7Finvalid signature length\0\0\0\0\0\0\0\0\x91\x01RV[a\x1DJ`\x18` \x92a\x0BkV[a\x1DS\x81a\x1D\x16V[\x01\x90V[a\x1Dl\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1D=V[\x90V[\x15a\x1DvWV[a\x1D~a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1D\x94`\x04\x82\x01a\x1DWV[\x03\x90\xFD[\x90V[\x90V[a\x1D\xAAa\x1D\xAF\x91a\x02\xA4V[a\x1D\x9BV[\x90RV[` \x81a\x1D\xC5a\x1D\xCD\x93\x83\x96\x95a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x90V[` \x01\x90V[Q\x90V[_\x80\xFD[\x90a\x1D\xF2a\x1D\xEBa\x01DV[\x92\x83a\x0CiV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x1E\x12Wa\x1E\x0E` \x91a\x0CKV[\x01\x90V[a\x0CUV[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x1E7a\x1E2\x82a\x1D\xF4V[a\x1D\xDFV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x1ESWa\x1EQ\x92a\x1E\x17V[V[a\x1D\xDBV[a\x1Ec\x916\x91a\x1E\"V[\x90V[\x15\x15\x90V[a\x1Et\x81a\x1EfV[\x03a\x1E{WV[_\x80\xFD[\x90PQ\x90a\x1E\x8C\x82a\x1EkV[V[\x90` \x82\x82\x03\x12a\x1E\xA7Wa\x1E\xA4\x91_\x01a\x1E\x7FV[\x90V[a\x01NV[_\x7Finvalid tee signature\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x1E\xE0`\x15` \x92a\x0BkV[a\x1E\xE9\x81a\x1E\xACV[\x01\x90V[a\x1F\x02\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1E\xD3V[\x90V[\x15a\x1F\x0CWV[a\x1F\x14a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1F*`\x04\x82\x01a\x1E\xEDV[\x03\x90\xFD[_\x7Fappchain block hash unchanged\0\0\0\x91\x01RV[a\x1Fb`\x1D` \x92a\x0BkV[a\x1Fk\x81a\x1F.V[\x01\x90V[a\x1F\x84\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1FUV[\x90V[\x15a\x1F\x8EWV[a\x1F\x96a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x1F\xAC`\x04\x82\x01a\x1FoV[\x03\x90\xFD[_\x7Fassertion already exists\0\0\0\0\0\0\0\0\x91\x01RV[a\x1F\xE4`\x18` \x92a\x0BkV[a\x1F\xED\x81a\x1F\xB0V[\x01\x90V[a \x06\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x1F\xD7V[\x90V[\x15a \x10WV[a \x18a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a .`\x04\x82\x01a\x1F\xF1V[\x03\x90\xFD[\x90V[a Ia Da N\x92a 2V[a\x01\x90V[a\x04\xC2V[\x90V[a ]a b\x91a\x02\x1EV[a\x04\x8AV[\x90V[a o\x90Ta QV[\x90V[a \x81a \x87\x91\x93\x92\x93a\x04\xC2V[\x92a\x04\xC2V[\x82\x01\x80\x92\x11a \x92WV[a\x0E[V[a \xABa \xA6a \xB0\x92a\x04\xC2V[a\x01\x90V[a\x04\xC2V[\x90V[\x90V[\x90a \xCBa \xC6a \xD2\x92a \x97V[a \xB3V[\x82Ta\r\xDBV[\x90UV[a \xDF\x90a\x01\x93V[\x90V[a \xEB\x90a \xD6V[\x90V[a \xF7\x90a\x01\xAFV[\x90V[a!\x03\x90a\x01\xAFV[\x90V[\x90P\x90V[a!\x16_\x80\x92a!\x06V[\x01\x90V[a!#\x90a!\x0BV[\x90V[\x90a!8a!3\x83a\x1D\xF4V[a\x1D\xDFV[\x91\x82RV[``\x90V[=_\x14a!]Wa!R=a!&V[\x90=_` \x84\x01>[V[a!ea!=V[\x90a![V[_\x7Fpayment failed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a!\x9F`\x0E` \x92a\x0BkV[a!\xA8\x81a!kV[\x01\x90V[a!\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra!\x92V[\x90V[\x15a!\xCBWV[a!\xD3a\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a!\xE9`\x04\x82\x01a!\xACV[\x03\x90\xFD[\x92\x90` a\"\xDD\x91\x95\x93\x95a\"\x1Fa\"\x06\x82\x89\x90a\x1C\xF3V[a\"\x19a\"\x13`Aa\x1C\xFAV[\x91a\x04\xC2V[\x14a\x1DoV[a\"(\x86a(zV[\x96a\"\xD2a\"\xBDa\"Aa\"<`\x01a\x1D\x98V[a)\xB2V[a\"j\x8B\x91a\"\\a\"Qa\x01DV[\x93\x84\x92\x8A\x84\x01a\x1D\xB3V[\x88\x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a\"|a\"v\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x93a\"\xB7a\"\xAA\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x01\xBBV[\x94cr\x17\xEF\xCD\x96\x92a\x1EXV[\x90a*QV[\x92a\"\xC6a\x01DV[\x95\x86\x94\x85\x93\x84\x93a\x0C\x92V[\x83R`\x04\x83\x01a\x06'V[\x03\x91Z\xFA\x80\x15a%\tWa\"\xF8\x91_\x91a$\xDBW[Pa\x1F\x05V[a#*a#\x06_\x85\x01a\x18\xE0V[a##a#\x1Da#\x18`\x01\x80\x01a\x02:V[a\x02\xA4V[\x91a\x02\xA4V[\x14\x15a\x1F\x87V[a#3_a\r\xBAV[[\x80a#Pa#Ja#E`\x08a\x072V[a\x04\xC2V[\x91a\x04\xC2V[\x10\x15a#\x9DWa#\x98\x90a#\x93\x86a#\x8Ca#\x86a#\x81a#|a#v`\x08\x88\x90a\x07?V[Pa\x18\xA5V[a(\xE5V[a\x02\xA4V[\x91a\x02\xA4V[\x14\x15a \tV[a\x18\x96V[a#4V[P\x91a#\xD6\x91\x93Pa#\xAF`\x08a\x072V[a#\xC1a#\xBB_a\r\xBAV[\x91a\x04\xC2V[\x14a$\xB0W[a#\xD1`\x08a\x18\xA8V[a\x19OV[a#\xE0`\x08a\x072V[a#\xF3a#\xED`\x02a 5V[\x91a\x04\xC2V[\x14a#\xFCW[PV[_\x80a${a$va$\xAA\x94a$.a$'a$\x18`\x01a\x0BOV[a$\"`\ta eV[a rV[`\ta \xB6V[a$8`\ta eV[a$n\x7F7\xE8\xAD\xD6\x94\xC5\x92mVN\x97\x11`\xF5\x97A\x03\xCB\xBB\xC7\xC9\x07G\xC4\xC6\xF8\x02\x03\x1D5g\xA7\x91a$ea\x01DV[\x91\x82\x91\x82a\x04\xD2V[\x03\x90\xA1a \xE2V[a \xEEV[a$\x840a \xFAV[1a$\x8Da\x01DV[\x90\x81a$\x98\x81a!\x1AV[\x03\x92Z\xF1a$\xA4a!BV[Pa!\xC4V[_a#\xF9V[a$\xD6a$\xCFa$\xBFBa\x0C\xD5V[a$\xC9`\na\x11\x89V[\x90a\x11\x96V[`\na\x11\xFCV[a#\xC7V[a$\xFC\x91P` =\x81\x11a%\x02W[a$\xF4\x81\x83a\x0CiV[\x81\x01\x90a\x1E\x8EV[_a\"\xF2V[P=a$\xEAV[a\x0C\xC5V[a%\x1F\x90a%\x1Aa'XV[a&\x14V[V[` \x7Fhile assertion is pending\0\0\0\0\0\0\0\x91\x7Fcannot update challenge window w_\x82\x01R\x01RV[a%{`9`@\x92a\x0BkV[a%\x84\x81a%!V[\x01\x90V[a%\x9D\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra%nV[\x90V[\x15a%\xA7WV[a%\xAFa\x01DV[bF\x1B\xCD`\xE5\x1B\x81R\x80a%\xC5`\x04\x82\x01a%\x88V[\x03\x90\xFD[`@\x1B\x90V[\x90a%\xEAo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x91a%\xC9V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a&\ta&\x04a&\x10\x92a\x11\xDDV[a\x11\xF9V[\x82Ta%\xCFV[\x90UV[a&D\x90a&=a&%`\x08a\x072V[a&7a&1_a\r\xBAV[\x91a\x04\xC2V[\x14a%\xA0V[`\na%\xF4V[V[a&O\x90a%\x0EV[V[a&b\x90a&]a'XV[a&dV[V[a&\x89a&q`\x08a\x072V[a&\x83a&}_a\r\xBAV[\x91a\x04\xC2V[\x14a\x1CDV[a&\x96\x81_`\x01\x01a\x0E\tV[a&\xA2`\x01\x80\x01a\x02:V[\x7F\xC9\x85\xBC\xCB\xD0\xC9\x0E\x19\x7FJss\x02\n3\xBAo\xF8d\xD09\x9F\xD7\xD6\\\\|2\xFF\xB0\x15\xEC\x91a&\xD8a&\xCFa\x01DV[\x92\x83\x92\x83a\x0E8V[\x03\x90\xA1V[a&\xE6\x90a&QV[V[a&\xF9\x90a&\xF4a'XV[a&\xFBV[V[\x80a'\x16a'\x10a'\x0B_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14a'&Wa'$\x90a'\xF0V[V[a'Ia'2_a\x0C;V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x06'V[\x03\x90\xFD[a'V\x90a&\xE8V[V[a'`a\x17\xECV[a'ya'sa'na*sV[a\x06\x0EV[\x91a\x06\x0EV[\x03a'\x80WV[a'\xA2a'\x8Ba*sV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x06'V[\x03\x90\xFD[\x90a'\xB7`\x01\x80`\xA0\x1B\x03\x91a\r\xD6V[\x91\x81\x19\x16\x91\x16\x17\x90V[a'\xCA\x90a\x01\xAFV[\x90V[\x90V[\x90a'\xE5a'\xE0a'\xEC\x92a'\xC1V[a'\xCDV[\x82Ta'\xA6V[\x90UV[a'\xF9_a\x17\xDFV[a(\x03\x82_a'\xD0V[\x90a(7a(1\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a'\xC1V[\x91a'\xC1V[\x91a(@a\x01DV[\x80a(J\x81a\x05\x1CV[\x03\x90\xA3V[` \x93\x92a(n\x85\x83a(f\x82\x95a(v\x97a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x90V[a(\x82a\x0E\xFDV[Pa(\xCFa(\x91_\x83\x01a\x18\xE0V[a(\xC0a(\xAC`@a(\xA5` \x87\x01a\x18\xE0V[\x95\x01a\x18\xE0V[a(\xB4a\x01DV[\x94\x85\x93` \x85\x01a(OV[` \x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a(\xE1a(\xDB\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x90V[a(\xEDa\x0E\xFDV[Pa):a(\xFC_\x83\x01a\x02:V[a)+a)\x17`\x02a)\x10`\x01\x87\x01a\x02:V[\x95\x01a\x02:V[a)\x1Fa\x01DV[\x94\x85\x93` \x85\x01a(OV[` \x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a)La)F\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x90V[\x94a)\x9E` \x80\x99\x98\x95\x96a)\x96\x82\x80\x99a)\x8E\x82a)\xA6\x9Aa)\x86a)\xAE\x9F\x80a)~\x85\x9E\x92\x86\x93a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x80\x92a\x1D\x9EV[\x01\x90V[a)\xBAa\x0E\xFDV[Pa*;a)\xC9_\x83\x01a\x02:V[a*,a)\xD8`\x01\x85\x01a\x02:V[\x93a)\xE5`\x02\x82\x01a\x02:V[\x90a)\xF2`\x03\x82\x01a\x02:V[a)\xFE`\x04\x83\x01a\x02:V[\x90a*\x17`\x06a*\x10`\x05\x86\x01a\x02:V[\x94\x01a\x02:V[\x93a* a\x01DV[\x98\x89\x97` \x89\x01a)PV[` \x82\x01\x81\x03\x82R\x03\x82a\x0CiV[a*Ma*G\x82a\x1D\xD7V[\x91a\x1D\xD1V[ \x90V[a*p\x91a*g\x91a*aa\x17\xBCV[Pa*\xA4V[\x90\x92\x91\x92a+\xA1V[\x90V[a*{a\x17\xBCV[P3\x90V[_\x90V[a*\x98a*\x93a*\x9D\x92a\x04\xC2V[a\r\xD6V[a\x02\xA4V[\x90V[_\x90V[\x91\x90\x91a*\xAFa\x17\xBCV[Pa*\xB8a*\x80V[Pa*\xC1a\x0E\xFDV[Pa*\xCB\x83a\x1D\xD7V[a*\xDEa*\xD8`Aa\x1C\xFAV[\x91a\x04\xC2V[\x14_\x14a+%Wa+\x1E\x91\x92a*\xF2a\x0E\xFDV[Pa*\xFBa\x0E\xFDV[Pa+\x04a*\xA0V[P` \x81\x01Q```@\x83\x01Q\x92\x01Q_\x1A\x90\x91\x92a,\xFEV[\x91\x92\x90\x91\x90V[Pa+/_a\x0C;V[\x90a+Ca+>`\x02\x94a\x1D\xD7V[a*\x84V[\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15a+gWV[a+IV[\x90a+v\x82a+]V[V[\x91\x90a+\x8B\x90_` \x85\x01\x94\x01\x90a\x02\xA7V[V[a+\x99a+\x9E\x91a\x02\x1EV[a \x97V[\x90V[\x80a+\xB4a+\xAE_a+lV[\x91a+lV[\x14_\x14a+\xBFWPPV[\x80a+\xD3a+\xCD`\x01a+lV[\x91a+lV[\x14_\x14a+\xF6W_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80a+\xF2`\x04\x82\x01a\x05\x1CV[\x03\x90\xFD[\x80a,\na,\x04`\x02a+lV[\x91a+lV[\x14_\x14a,8Wa,4a,\x1D\x83a+\x8DV[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x04\xD2V[\x03\x90\xFD[a,Ka,E`\x03a+lV[\x91a+lV[\x14a,SWPV[a,n\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a+xV[\x03\x90\xFD[\x90V[a,\x89a,\x84a,\x8E\x92a,rV[a\x01\x90V[a\x04\xC2V[\x90V[`\xFF\x16\x90V[a,\xA0\x90a,\x91V[\x90RV[a,\xD9a,\xE0\x94a,\xCF``\x94\x98\x97\x95a,\xC5`\x80\x86\x01\x9A_\x87\x01\x90a\x02\xA7V[` \x85\x01\x90a,\x97V[`@\x83\x01\x90a\x02\xA7V[\x01\x90a\x02\xA7V[V[a,\xF6a,\xF1a,\xFB\x92a\x0C\x1CV[a\r\xD6V[a\x02\xA4V[\x90V[\x93\x92\x93a-\ta\x17\xBCV[Pa-\x12a*\x80V[Pa-\x1Ba\x0E\xFDV[Pa-%\x85a+\x8DV[a-Wa-Q\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a,uV[\x91a\x04\xC2V[\x11a-\xE4W\x90a-z` \x94\x95_\x94\x93\x92\x93a-qa\x01DV[\x94\x85\x94\x85a,\xA4V[\x83\x80R\x03\x90`\x01Z\xFA\x15a-\xDFWa-\x92_Qa\r\xD6V[\x80a-\xADa-\xA7a-\xA2_a\x0C;V[a\x06\x0EV[\x91a\x06\x0EV[\x14a-\xC3W_\x91a-\xBD_a,\xE2V[\x91\x92\x91\x90V[Pa-\xCD_a\x0C;V[`\x01\x91a-\xD9_a,\xE2V[\x91\x92\x91\x90V[a\x0C\xC5V[PPPa-\xF0_a\x0C;V[\x90`\x03\x92\x91\x92\x91\x90V",
    );
    /**```solidity
struct PendingAssertion { bytes32 blockHash; bytes32 sendRoot; bytes32 seqBlockHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PendingAssertion {
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sendRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PendingAssertion> for UnderlyingRustTuple<'_> {
            fn from(value: PendingAssertion) -> Self {
                (value.blockHash, value.sendRoot, value.seqBlockHash)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PendingAssertion {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    blockHash: tuple.0,
                    sendRoot: tuple.1,
                    seqBlockHash: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PendingAssertion {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PendingAssertion {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.sendRoot),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqBlockHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PendingAssertion {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PendingAssertion {
            const NAME: &'static str = "PendingAssertion";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PendingAssertion(bytes32 blockHash,bytes32 sendRoot,bytes32 seqBlockHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.blockHash)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.sendRoot)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.seqBlockHash)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PendingAssertion {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.blockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.sendRoot,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.seqBlockHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.blockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.sendRoot,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.seqBlockHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct TeeTrustedInput { bytes32 appchainConfigHash; bytes32 appchainStartBlockHash; bytes32 seqConfigHash; bytes32 seqStartBlockHash; bytes32 setDelayedMessageAcc; bytes32 l1StartBlockHash; bytes32 l1EndBlockHash; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TeeTrustedInput {
        #[allow(missing_docs)]
        pub appchainConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub appchainStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub setDelayedMessageAcc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1StartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1EndBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TeeTrustedInput> for UnderlyingRustTuple<'_> {
            fn from(value: TeeTrustedInput) -> Self {
                (
                    value.appchainConfigHash,
                    value.appchainStartBlockHash,
                    value.seqConfigHash,
                    value.seqStartBlockHash,
                    value.setDelayedMessageAcc,
                    value.l1StartBlockHash,
                    value.l1EndBlockHash,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TeeTrustedInput {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    appchainConfigHash: tuple.0,
                    appchainStartBlockHash: tuple.1,
                    seqConfigHash: tuple.2,
                    seqStartBlockHash: tuple.3,
                    setDelayedMessageAcc: tuple.4,
                    l1StartBlockHash: tuple.5,
                    l1EndBlockHash: tuple.6,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for TeeTrustedInput {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for TeeTrustedInput {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainConfigHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.appchainStartBlockHash,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqConfigHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqStartBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.setDelayedMessageAcc),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1StartBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1EndBlockHash),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for TeeTrustedInput {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for TeeTrustedInput {
            const NAME: &'static str = "TeeTrustedInput";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "TeeTrustedInput(bytes32 appchainConfigHash,bytes32 appchainStartBlockHash,bytes32 seqConfigHash,bytes32 seqStartBlockHash,bytes32 setDelayedMessageAcc,bytes32 l1StartBlockHash,bytes32 l1EndBlockHash)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.appchainConfigHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.appchainStartBlockHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.seqConfigHash)
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.seqStartBlockHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.setDelayedMessageAcc,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.l1StartBlockHash,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.l1EndBlockHash,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for TeeTrustedInput {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.appchainConfigHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.appchainStartBlockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.seqConfigHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.seqStartBlockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.setDelayedMessageAcc,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.l1StartBlockHash,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.l1EndBlockHash,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.appchainConfigHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.appchainStartBlockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.seqConfigHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.seqStartBlockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.setDelayedMessageAcc,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.l1StartBlockHash,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.l1EndBlockHash,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignature()` and selector `0xf645eedf`.
```solidity
error ECDSAInvalidSignature();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignature {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignature()";
            const SELECTOR: [u8; 4] = [246u8, 69u8, 238u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignatureLength(uint256)` and selector `0xfce698f7`.
```solidity
error ECDSAInvalidSignatureLength(uint256 length);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureLength {
        #[allow(missing_docs)]
        pub length: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureLength>
        for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureLength) -> Self {
                (value.length,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ECDSAInvalidSignatureLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { length: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureLength(uint256)";
            const SELECTOR: [u8; 4] = [252u8, 230u8, 152u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                )
            }
        }
    };
    /**Custom error with signature `ECDSAInvalidSignatureS(bytes32)` and selector `0xd78bce0c`.
```solidity
error ECDSAInvalidSignatureS(bytes32 s);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureS {
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureS> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureS) -> Self {
                (value.s,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignatureS {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { s: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureS {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureS(bytes32)";
            const SELECTOR: [u8; 4] = [215u8, 139u8, 206u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `ChallengeResolved((bytes32,bytes32,bytes32))` and selector `0xe42eaf0737e2478a5f5aed3a0610ae7b09a27cbac9ad6a5cc4d68f78afd1425b`.
```solidity
event ChallengeResolved(PendingAssertion);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ChallengeResolved {
        #[allow(missing_docs)]
        pub _0: <PendingAssertion as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ChallengeResolved {
            type DataTuple<'a> = (PendingAssertion,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ChallengeResolved((bytes32,bytes32,bytes32))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8,
                46u8,
                175u8,
                7u8,
                55u8,
                226u8,
                71u8,
                138u8,
                95u8,
                90u8,
                237u8,
                58u8,
                6u8,
                16u8,
                174u8,
                123u8,
                9u8,
                162u8,
                124u8,
                186u8,
                201u8,
                173u8,
                106u8,
                92u8,
                196u8,
                214u8,
                143u8,
                120u8,
                175u8,
                209u8,
                66u8,
                91u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<PendingAssertion as alloy_sol_types::SolType>::tokenize(&self._0),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ChallengeResolved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ChallengeResolved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ChallengeResolved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeAppchainConfigHash(bytes32,bytes32)` and selector `0xc985bccbd0c90e197f4a7373020a33ba6ff864d0399fd7d65c5c7c32ffb015ec`.
```solidity
event TeeAppchainConfigHash(bytes32 configHash, bytes32 blockHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeAppchainConfigHash {
        #[allow(missing_docs)]
        pub configHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeAppchainConfigHash {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeAppchainConfigHash(bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                201u8,
                133u8,
                188u8,
                203u8,
                208u8,
                201u8,
                14u8,
                25u8,
                127u8,
                74u8,
                115u8,
                115u8,
                2u8,
                10u8,
                51u8,
                186u8,
                111u8,
                248u8,
                100u8,
                208u8,
                57u8,
                159u8,
                215u8,
                214u8,
                92u8,
                92u8,
                124u8,
                50u8,
                255u8,
                176u8,
                21u8,
                236u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    configHash: data.0,
                    blockHash: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.configHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockHash),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeAppchainConfigHash {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeAppchainConfigHash> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeAppchainConfigHash) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeHacked(uint256)` and selector `0x37e8add694c5926d564e971160f5974103cbbbc7c90747c4c6f802031d3567a7`.
```solidity
event TeeHacked(uint256);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeHacked {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeHacked {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeHacked(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                55u8,
                232u8,
                173u8,
                214u8,
                148u8,
                197u8,
                146u8,
                109u8,
                86u8,
                78u8,
                151u8,
                17u8,
                96u8,
                245u8,
                151u8,
                65u8,
                3u8,
                203u8,
                187u8,
                199u8,
                201u8,
                7u8,
                71u8,
                196u8,
                198u8,
                248u8,
                2u8,
                3u8,
                29u8,
                53u8,
                103u8,
                167u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { _0: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeHacked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeHacked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeHacked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32))` and selector `0x91092bcf550921e381e81f06693320534b144a7e561c5fc08f1940d508a85cdc`.
```solidity
event TeeInput(TeeTrustedInput input);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeInput {
        #[allow(missing_docs)]
        pub input: <TeeTrustedInput as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeInput {
            type DataTuple<'a> = (TeeTrustedInput,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeInput((bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                145u8,
                9u8,
                43u8,
                207u8,
                85u8,
                9u8,
                33u8,
                227u8,
                129u8,
                232u8,
                31u8,
                6u8,
                105u8,
                51u8,
                32u8,
                83u8,
                75u8,
                20u8,
                74u8,
                126u8,
                86u8,
                28u8,
                95u8,
                192u8,
                143u8,
                25u8,
                64u8,
                213u8,
                8u8,
                168u8,
                92u8,
                220u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { input: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<TeeTrustedInput as alloy_sol_types::SolType>::tokenize(&self.input),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeInput {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeInput> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeInput) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TeeSeqConfigHash(bytes32,bytes32)` and selector `0xb9eb20b32fac965884cb58326102257cae604504f0a36cd1008a32845ad5c29b`.
```solidity
event TeeSeqConfigHash(bytes32 configHash, bytes32 blockHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TeeSeqConfigHash {
        #[allow(missing_docs)]
        pub configHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TeeSeqConfigHash {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "TeeSeqConfigHash(bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                185u8,
                235u8,
                32u8,
                179u8,
                47u8,
                172u8,
                150u8,
                88u8,
                132u8,
                203u8,
                88u8,
                50u8,
                97u8,
                2u8,
                37u8,
                124u8,
                174u8,
                96u8,
                69u8,
                4u8,
                240u8,
                163u8,
                108u8,
                209u8,
                0u8,
                138u8,
                50u8,
                132u8,
                90u8,
                213u8,
                194u8,
                155u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    configHash: data.0,
                    blockHash: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.configHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockHash),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TeeSeqConfigHash {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TeeSeqConfigHash> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TeeSeqConfigHash) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address poster_, address bridge_, bytes32 appchainConfigHash_, bytes32 appchainStartBlockHash_, bytes32 seqConfigHash_, bytes32 seqStartBlockHash_, bytes32 l1StartBlockHash_, address l1block_, uint64 challengeWindowDuration_, address teeKeyManager_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub poster_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bridge_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1block_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub challengeWindowDuration_: u64,
        #[allow(missing_docs)]
        pub teeKeyManager_: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
                u64,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.poster_,
                        value.bridge_,
                        value.appchainConfigHash_,
                        value.appchainStartBlockHash_,
                        value.seqConfigHash_,
                        value.seqStartBlockHash_,
                        value.l1StartBlockHash_,
                        value.l1block_,
                        value.challengeWindowDuration_,
                        value.teeKeyManager_,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        poster_: tuple.0,
                        bridge_: tuple.1,
                        appchainConfigHash_: tuple.2,
                        appchainStartBlockHash_: tuple.3,
                        seqConfigHash_: tuple.4,
                        seqStartBlockHash_: tuple.5,
                        l1StartBlockHash_: tuple.6,
                        l1block_: tuple.7,
                        challengeWindowDuration_: tuple.8,
                        teeKeyManager_: tuple.9,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<64>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.poster_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge_,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainConfigHash_),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.appchainStartBlockHash_,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqConfigHash_),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqStartBlockHash_),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l1StartBlockHash_),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l1block_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.challengeWindowDuration_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.teeKeyManager_,
                    ),
                )
            }
        }
    };
    /**Function with signature `bridge()` and selector `0xe78cea92`.
```solidity
function bridge() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeCall {}
    ///Container type for the return parameters of the [`bridge()`](bridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridge()";
            const SELECTOR: [u8; 4] = [231u8, 140u8, 234u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `challengeWindowDuration()` and selector `0x4bd167c9`.
```solidity
function challengeWindowDuration() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowDurationCall {}
    ///Container type for the return parameters of the [`challengeWindowDuration()`](challengeWindowDurationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowDurationReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowDurationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowDurationCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowDurationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowDurationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowDurationReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowDurationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for challengeWindowDurationCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = challengeWindowDurationReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "challengeWindowDuration()";
            const SELECTOR: [u8; 4] = [75u8, 209u8, 103u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `challengeWindowEnd()` and selector `0xee1c28b8`.
```solidity
function challengeWindowEnd() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowEndCall {}
    ///Container type for the return parameters of the [`challengeWindowEnd()`](challengeWindowEndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct challengeWindowEndReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowEndCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowEndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowEndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<challengeWindowEndReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: challengeWindowEndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for challengeWindowEndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for challengeWindowEndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = challengeWindowEndReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "challengeWindowEnd()";
            const SELECTOR: [u8; 4] = [238u8, 28u8, 40u8, 184u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `closeChallengeWindow()` and selector `0x6c4c2060`.
```solidity
function closeChallengeWindow() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct closeChallengeWindowCall {}
    ///Container type for the return parameters of the [`closeChallengeWindow()`](closeChallengeWindowCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct closeChallengeWindowReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<closeChallengeWindowCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: closeChallengeWindowCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for closeChallengeWindowCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<closeChallengeWindowReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: closeChallengeWindowReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for closeChallengeWindowReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for closeChallengeWindowCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = closeChallengeWindowReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "closeChallengeWindow()";
            const SELECTOR: [u8; 4] = [108u8, 76u8, 32u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l1block()` and selector `0x420caf3a`.
```solidity
function l1block() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l1blockCall {}
    ///Container type for the return parameters of the [`l1block()`](l1blockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l1blockReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l1blockCall> for UnderlyingRustTuple<'_> {
                fn from(value: l1blockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l1blockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l1blockReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l1blockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l1blockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l1blockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l1blockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l1block()";
            const SELECTOR: [u8; 4] = [66u8, 12u8, 175u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pendingAssertions(uint256)` and selector `0xa56ec6cd`.
```solidity
function pendingAssertions(uint256) external view returns (bytes32 blockHash, bytes32 sendRoot, bytes32 seqBlockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingAssertionsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`pendingAssertions(uint256)`](pendingAssertionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingAssertionsReturn {
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub sendRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingAssertionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: pendingAssertionsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for pendingAssertionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingAssertionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: pendingAssertionsReturn) -> Self {
                    (value.blockHash, value.sendRoot, value.seqBlockHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for pendingAssertionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        blockHash: tuple.0,
                        sendRoot: tuple.1,
                        seqBlockHash: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pendingAssertionsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pendingAssertionsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pendingAssertions(uint256)";
            const SELECTOR: [u8; 4] = [165u8, 110u8, 198u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `poster()` and selector `0x80959721`.
```solidity
function poster() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct posterCall {}
    ///Container type for the return parameters of the [`poster()`](posterCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct posterReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<posterCall> for UnderlyingRustTuple<'_> {
                fn from(value: posterCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for posterCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<posterReturn> for UnderlyingRustTuple<'_> {
                fn from(value: posterReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for posterReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for posterCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = posterReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "poster()";
            const SELECTOR: [u8; 4] = [128u8, 149u8, 151u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `resolveChallenge((bytes32,bytes32,bytes32))` and selector `0x8fed55a3`.
```solidity
function resolveChallenge(PendingAssertion memory assertion) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resolveChallengeCall {
        #[allow(missing_docs)]
        pub assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`resolveChallenge((bytes32,bytes32,bytes32))`](resolveChallengeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct resolveChallengeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PendingAssertion,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PendingAssertion as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resolveChallengeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: resolveChallengeCall) -> Self {
                    (value.assertion,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for resolveChallengeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { assertion: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<resolveChallengeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: resolveChallengeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for resolveChallengeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for resolveChallengeCall {
            type Parameters<'a> = (PendingAssertion,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = resolveChallengeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "resolveChallenge((bytes32,bytes32,bytes32))";
            const SELECTOR: [u8; 4] = [143u8, 237u8, 85u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PendingAssertion as alloy_sol_types::SolType>::tokenize(
                        &self.assertion,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAppchainConfigHash(bytes32)` and selector `0xf223055c`.
```solidity
function setAppchainConfigHash(bytes32 hash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAppchainConfigHashCall {
        #[allow(missing_docs)]
        pub hash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setAppchainConfigHash(bytes32)`](setAppchainConfigHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAppchainConfigHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAppchainConfigHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAppchainConfigHashCall) -> Self {
                    (value.hash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAppchainConfigHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { hash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAppchainConfigHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAppchainConfigHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAppchainConfigHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAppchainConfigHashCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAppchainConfigHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAppchainConfigHash(bytes32)";
            const SELECTOR: [u8; 4] = [242u8, 35u8, 5u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.hash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setChallengeWindowDuration(uint64)` and selector `0xeb60553a`.
```solidity
function setChallengeWindowDuration(uint64 duration) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setChallengeWindowDurationCall {
        #[allow(missing_docs)]
        pub duration: u64,
    }
    ///Container type for the return parameters of the [`setChallengeWindowDuration(uint64)`](setChallengeWindowDurationCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setChallengeWindowDurationReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setChallengeWindowDurationCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setChallengeWindowDurationCall) -> Self {
                    (value.duration,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setChallengeWindowDurationCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { duration: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setChallengeWindowDurationReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setChallengeWindowDurationReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setChallengeWindowDurationReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setChallengeWindowDurationCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setChallengeWindowDurationReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setChallengeWindowDuration(uint64)";
            const SELECTOR: [u8; 4] = [235u8, 96u8, 85u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.duration),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setSeqConfigHash(bytes32)` and selector `0xc3f2dbd3`.
```solidity
function setSeqConfigHash(bytes32 hash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSeqConfigHashCall {
        #[allow(missing_docs)]
        pub hash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setSeqConfigHash(bytes32)`](setSeqConfigHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setSeqConfigHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSeqConfigHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSeqConfigHashCall) -> Self {
                    (value.hash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSeqConfigHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { hash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setSeqConfigHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setSeqConfigHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setSeqConfigHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setSeqConfigHashCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setSeqConfigHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setSeqConfigHash(bytes32)";
            const SELECTOR: [u8; 4] = [195u8, 242u8, 219u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.hash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `submitAssertion((bytes32,bytes32,bytes32),bytes,address)` and selector `0xe50c6156`.
```solidity
function submitAssertion(PendingAssertion memory assertion, bytes memory signature, address rewardAddr) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitAssertionCall {
        #[allow(missing_docs)]
        pub assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub signature: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub rewardAddr: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`submitAssertion((bytes32,bytes32,bytes32),bytes,address)`](submitAssertionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitAssertionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                PendingAssertion,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PendingAssertion as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitAssertionCall> for UnderlyingRustTuple<'_> {
                fn from(value: submitAssertionCall) -> Self {
                    (value.assertion, value.signature, value.rewardAddr)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for submitAssertionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        assertion: tuple.0,
                        signature: tuple.1,
                        rewardAddr: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitAssertionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: submitAssertionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for submitAssertionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for submitAssertionCall {
            type Parameters<'a> = (
                PendingAssertion,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = submitAssertionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "submitAssertion((bytes32,bytes32,bytes32),bytes,address)";
            const SELECTOR: [u8; 4] = [229u8, 12u8, 97u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <PendingAssertion as alloy_sol_types::SolType>::tokenize(
                        &self.assertion,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.signature,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.rewardAddr,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `teeHackCount()` and selector `0x697b5e62`.
```solidity
function teeHackCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeHackCountCall {}
    ///Container type for the return parameters of the [`teeHackCount()`](teeHackCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeHackCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeHackCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: teeHackCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeHackCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeHackCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: teeHackCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeHackCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for teeHackCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = teeHackCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "teeHackCount()";
            const SELECTOR: [u8; 4] = [105u8, 123u8, 94u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `teeKeyManager()` and selector `0x3a009a06`.
```solidity
function teeKeyManager() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeKeyManagerCall {}
    ///Container type for the return parameters of the [`teeKeyManager()`](teeKeyManagerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeKeyManagerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeKeyManagerCall> for UnderlyingRustTuple<'_> {
                fn from(value: teeKeyManagerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeKeyManagerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeKeyManagerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: teeKeyManagerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeKeyManagerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for teeKeyManagerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = teeKeyManagerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "teeKeyManager()";
            const SELECTOR: [u8; 4] = [58u8, 0u8, 154u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `teeTrustedInput()` and selector `0x3ceaae7d`.
```solidity
function teeTrustedInput() external view returns (bytes32 appchainConfigHash, bytes32 appchainStartBlockHash, bytes32 seqConfigHash, bytes32 seqStartBlockHash, bytes32 setDelayedMessageAcc, bytes32 l1StartBlockHash, bytes32 l1EndBlockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeTrustedInputCall {}
    ///Container type for the return parameters of the [`teeTrustedInput()`](teeTrustedInputCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct teeTrustedInputReturn {
        #[allow(missing_docs)]
        pub appchainConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub appchainStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqConfigHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub seqStartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub setDelayedMessageAcc: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1StartBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub l1EndBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeTrustedInputCall> for UnderlyingRustTuple<'_> {
                fn from(value: teeTrustedInputCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for teeTrustedInputCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<teeTrustedInputReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: teeTrustedInputReturn) -> Self {
                    (
                        value.appchainConfigHash,
                        value.appchainStartBlockHash,
                        value.seqConfigHash,
                        value.seqStartBlockHash,
                        value.setDelayedMessageAcc,
                        value.l1StartBlockHash,
                        value.l1EndBlockHash,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for teeTrustedInputReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        appchainConfigHash: tuple.0,
                        appchainStartBlockHash: tuple.1,
                        seqConfigHash: tuple.2,
                        seqStartBlockHash: tuple.3,
                        setDelayedMessageAcc: tuple.4,
                        l1StartBlockHash: tuple.5,
                        l1EndBlockHash: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for teeTrustedInputCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = teeTrustedInputReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "teeTrustedInput()";
            const SELECTOR: [u8; 4] = [60u8, 234u8, 174u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TeeModule`](self) function calls.
    pub enum TeeModuleCalls {
        #[allow(missing_docs)]
        bridge(bridgeCall),
        #[allow(missing_docs)]
        challengeWindowDuration(challengeWindowDurationCall),
        #[allow(missing_docs)]
        challengeWindowEnd(challengeWindowEndCall),
        #[allow(missing_docs)]
        closeChallengeWindow(closeChallengeWindowCall),
        #[allow(missing_docs)]
        l1block(l1blockCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        pendingAssertions(pendingAssertionsCall),
        #[allow(missing_docs)]
        poster(posterCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        resolveChallenge(resolveChallengeCall),
        #[allow(missing_docs)]
        setAppchainConfigHash(setAppchainConfigHashCall),
        #[allow(missing_docs)]
        setChallengeWindowDuration(setChallengeWindowDurationCall),
        #[allow(missing_docs)]
        setSeqConfigHash(setSeqConfigHashCall),
        #[allow(missing_docs)]
        submitAssertion(submitAssertionCall),
        #[allow(missing_docs)]
        teeHackCount(teeHackCountCall),
        #[allow(missing_docs)]
        teeKeyManager(teeKeyManagerCall),
        #[allow(missing_docs)]
        teeTrustedInput(teeTrustedInputCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl TeeModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [58u8, 0u8, 154u8, 6u8],
            [60u8, 234u8, 174u8, 125u8],
            [66u8, 12u8, 175u8, 58u8],
            [75u8, 209u8, 103u8, 201u8],
            [105u8, 123u8, 94u8, 98u8],
            [108u8, 76u8, 32u8, 96u8],
            [113u8, 80u8, 24u8, 166u8],
            [128u8, 149u8, 151u8, 33u8],
            [141u8, 165u8, 203u8, 91u8],
            [143u8, 237u8, 85u8, 163u8],
            [165u8, 110u8, 198u8, 205u8],
            [195u8, 242u8, 219u8, 211u8],
            [229u8, 12u8, 97u8, 86u8],
            [231u8, 140u8, 234u8, 146u8],
            [235u8, 96u8, 85u8, 58u8],
            [238u8, 28u8, 40u8, 184u8],
            [242u8, 35u8, 5u8, 92u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeModuleCalls {
        const NAME: &'static str = "TeeModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::bridge(_) => <bridgeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::challengeWindowDuration(_) => {
                    <challengeWindowDurationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::challengeWindowEnd(_) => {
                    <challengeWindowEndCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::closeChallengeWindow(_) => {
                    <closeChallengeWindowCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::l1block(_) => <l1blockCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pendingAssertions(_) => {
                    <pendingAssertionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::poster(_) => <posterCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::resolveChallenge(_) => {
                    <resolveChallengeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAppchainConfigHash(_) => {
                    <setAppchainConfigHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setChallengeWindowDuration(_) => {
                    <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setSeqConfigHash(_) => {
                    <setSeqConfigHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::submitAssertion(_) => {
                    <submitAssertionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::teeHackCount(_) => {
                    <teeHackCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::teeKeyManager(_) => {
                    <teeKeyManagerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::teeTrustedInput(_) => {
                    <teeTrustedInputCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TeeModuleCalls>] = &[
                {
                    fn teeKeyManager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <teeKeyManagerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::teeKeyManager)
                    }
                    teeKeyManager
                },
                {
                    fn teeTrustedInput(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <teeTrustedInputCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::teeTrustedInput)
                    }
                    teeTrustedInput
                },
                {
                    fn l1block(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <l1blockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::l1block)
                    }
                    l1block
                },
                {
                    fn challengeWindowDuration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <challengeWindowDurationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::challengeWindowDuration)
                    }
                    challengeWindowDuration
                },
                {
                    fn teeHackCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <teeHackCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::teeHackCount)
                    }
                    teeHackCount
                },
                {
                    fn closeChallengeWindow(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <closeChallengeWindowCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::closeChallengeWindow)
                    }
                    closeChallengeWindow
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn poster(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <posterCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::poster)
                    }
                    poster
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn resolveChallenge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <resolveChallengeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::resolveChallenge)
                    }
                    resolveChallenge
                },
                {
                    fn pendingAssertions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <pendingAssertionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::pendingAssertions)
                    }
                    pendingAssertions
                },
                {
                    fn setSeqConfigHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <setSeqConfigHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::setSeqConfigHash)
                    }
                    setSeqConfigHash
                },
                {
                    fn submitAssertion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <submitAssertionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::submitAssertion)
                    }
                    submitAssertion
                },
                {
                    fn bridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <bridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::bridge)
                    }
                    bridge
                },
                {
                    fn setChallengeWindowDuration(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::setChallengeWindowDuration)
                    }
                    setChallengeWindowDuration
                },
                {
                    fn challengeWindowEnd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <challengeWindowEndCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::challengeWindowEnd)
                    }
                    challengeWindowEnd
                },
                {
                    fn setAppchainConfigHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <setAppchainConfigHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::setAppchainConfigHash)
                    }
                    setAppchainConfigHash
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::bridge(inner) => {
                    <bridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::challengeWindowDuration(inner) => {
                    <challengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::challengeWindowEnd(inner) => {
                    <challengeWindowEndCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::closeChallengeWindow(inner) => {
                    <closeChallengeWindowCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::l1block(inner) => {
                    <l1blockCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pendingAssertions(inner) => {
                    <pendingAssertionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::poster(inner) => {
                    <posterCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::resolveChallenge(inner) => {
                    <resolveChallengeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setAppchainConfigHash(inner) => {
                    <setAppchainConfigHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setChallengeWindowDuration(inner) => {
                    <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setSeqConfigHash(inner) => {
                    <setSeqConfigHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::submitAssertion(inner) => {
                    <submitAssertionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::teeHackCount(inner) => {
                    <teeHackCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::teeKeyManager(inner) => {
                    <teeKeyManagerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::teeTrustedInput(inner) => {
                    <teeTrustedInputCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::bridge(inner) => {
                    <bridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::challengeWindowDuration(inner) => {
                    <challengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::challengeWindowEnd(inner) => {
                    <challengeWindowEndCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::closeChallengeWindow(inner) => {
                    <closeChallengeWindowCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::l1block(inner) => {
                    <l1blockCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pendingAssertions(inner) => {
                    <pendingAssertionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::poster(inner) => {
                    <posterCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::resolveChallenge(inner) => {
                    <resolveChallengeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAppchainConfigHash(inner) => {
                    <setAppchainConfigHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setChallengeWindowDuration(inner) => {
                    <setChallengeWindowDurationCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setSeqConfigHash(inner) => {
                    <setSeqConfigHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::submitAssertion(inner) => {
                    <submitAssertionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::teeHackCount(inner) => {
                    <teeHackCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::teeKeyManager(inner) => {
                    <teeKeyManagerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::teeTrustedInput(inner) => {
                    <teeTrustedInputCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeModule`](self) custom errors.
    pub enum TeeModuleErrors {
        #[allow(missing_docs)]
        ECDSAInvalidSignature(ECDSAInvalidSignature),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureLength(ECDSAInvalidSignatureLength),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureS(ECDSAInvalidSignatureS),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl TeeModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [215u8, 139u8, 206u8, 12u8],
            [246u8, 69u8, 238u8, 223u8],
            [252u8, 230u8, 152u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeModuleErrors {
        const NAME: &'static str = "TeeModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ECDSAInvalidSignature(_) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureLength(_) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureS(_) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TeeModuleErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn ECDSAInvalidSignatureS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::ECDSAInvalidSignatureS)
                    }
                    ECDSAInvalidSignatureS
                },
                {
                    fn ECDSAInvalidSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::ECDSAInvalidSignature)
                    }
                    ECDSAInvalidSignature
                },
                {
                    fn ECDSAInvalidSignatureLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeModuleErrors> {
                        <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeModuleErrors::ECDSAInvalidSignatureLength)
                    }
                    ECDSAInvalidSignatureLength
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeModule`](self) events.
    pub enum TeeModuleEvents {
        #[allow(missing_docs)]
        ChallengeResolved(ChallengeResolved),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        TeeAppchainConfigHash(TeeAppchainConfigHash),
        #[allow(missing_docs)]
        TeeHacked(TeeHacked),
        #[allow(missing_docs)]
        TeeInput(TeeInput),
        #[allow(missing_docs)]
        TeeSeqConfigHash(TeeSeqConfigHash),
    }
    #[automatically_derived]
    impl TeeModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                55u8,
                232u8,
                173u8,
                214u8,
                148u8,
                197u8,
                146u8,
                109u8,
                86u8,
                78u8,
                151u8,
                17u8,
                96u8,
                245u8,
                151u8,
                65u8,
                3u8,
                203u8,
                187u8,
                199u8,
                201u8,
                7u8,
                71u8,
                196u8,
                198u8,
                248u8,
                2u8,
                3u8,
                29u8,
                53u8,
                103u8,
                167u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                145u8,
                9u8,
                43u8,
                207u8,
                85u8,
                9u8,
                33u8,
                227u8,
                129u8,
                232u8,
                31u8,
                6u8,
                105u8,
                51u8,
                32u8,
                83u8,
                75u8,
                20u8,
                74u8,
                126u8,
                86u8,
                28u8,
                95u8,
                192u8,
                143u8,
                25u8,
                64u8,
                213u8,
                8u8,
                168u8,
                92u8,
                220u8,
            ],
            [
                185u8,
                235u8,
                32u8,
                179u8,
                47u8,
                172u8,
                150u8,
                88u8,
                132u8,
                203u8,
                88u8,
                50u8,
                97u8,
                2u8,
                37u8,
                124u8,
                174u8,
                96u8,
                69u8,
                4u8,
                240u8,
                163u8,
                108u8,
                209u8,
                0u8,
                138u8,
                50u8,
                132u8,
                90u8,
                213u8,
                194u8,
                155u8,
            ],
            [
                201u8,
                133u8,
                188u8,
                203u8,
                208u8,
                201u8,
                14u8,
                25u8,
                127u8,
                74u8,
                115u8,
                115u8,
                2u8,
                10u8,
                51u8,
                186u8,
                111u8,
                248u8,
                100u8,
                208u8,
                57u8,
                159u8,
                215u8,
                214u8,
                92u8,
                92u8,
                124u8,
                50u8,
                255u8,
                176u8,
                21u8,
                236u8,
            ],
            [
                228u8,
                46u8,
                175u8,
                7u8,
                55u8,
                226u8,
                71u8,
                138u8,
                95u8,
                90u8,
                237u8,
                58u8,
                6u8,
                16u8,
                174u8,
                123u8,
                9u8,
                162u8,
                124u8,
                186u8,
                201u8,
                173u8,
                106u8,
                92u8,
                196u8,
                214u8,
                143u8,
                120u8,
                175u8,
                209u8,
                66u8,
                91u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for TeeModuleEvents {
        const NAME: &'static str = "TeeModuleEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ChallengeResolved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ChallengeResolved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ChallengeResolved)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <TeeAppchainConfigHash as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TeeAppchainConfigHash as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeAppchainConfigHash)
                }
                Some(<TeeHacked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TeeHacked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeHacked)
                }
                Some(<TeeInput as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TeeInput as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeInput)
                }
                Some(<TeeSeqConfigHash as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TeeSeqConfigHash as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TeeSeqConfigHash)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for TeeModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChallengeResolved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeAppchainConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeHacked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeInput(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TeeSeqConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ChallengeResolved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeAppchainConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeHacked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeInput(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TeeSeqConfigHash(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TeeModule`](self) contract instance.

See the [wrapper's documentation](`TeeModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TeeModuleInstance<T, P, N> {
        TeeModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        poster_: alloy::sol_types::private::Address,
        bridge_: alloy::sol_types::private::Address,
        appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1block_: alloy::sol_types::private::Address,
        challengeWindowDuration_: u64,
        teeKeyManager_: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TeeModuleInstance<T, P, N>>,
    > {
        TeeModuleInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            poster_,
            bridge_,
            appchainConfigHash_,
            appchainStartBlockHash_,
            seqConfigHash_,
            seqStartBlockHash_,
            l1StartBlockHash_,
            l1block_,
            challengeWindowDuration_,
            teeKeyManager_,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        poster_: alloy::sol_types::private::Address,
        bridge_: alloy::sol_types::private::Address,
        appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
        seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
        l1block_: alloy::sol_types::private::Address,
        challengeWindowDuration_: u64,
        teeKeyManager_: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TeeModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            poster_,
            bridge_,
            appchainConfigHash_,
            appchainStartBlockHash_,
            seqConfigHash_,
            seqStartBlockHash_,
            l1StartBlockHash_,
            l1block_,
            challengeWindowDuration_,
            teeKeyManager_,
        )
    }
    /**A [`TeeModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TeeModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TeeModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TeeModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TeeModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TeeModule`](self) contract instance.

See the [wrapper's documentation](`TeeModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            poster_: alloy::sol_types::private::Address,
            bridge_: alloy::sol_types::private::Address,
            appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1block_: alloy::sol_types::private::Address,
            challengeWindowDuration_: u64,
            teeKeyManager_: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<TeeModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                poster_,
                bridge_,
                appchainConfigHash_,
                appchainStartBlockHash_,
                seqConfigHash_,
                seqStartBlockHash_,
                l1StartBlockHash_,
                l1block_,
                challengeWindowDuration_,
                teeKeyManager_,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            poster_: alloy::sol_types::private::Address,
            bridge_: alloy::sol_types::private::Address,
            appchainConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            appchainStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            seqConfigHash_: alloy::sol_types::private::FixedBytes<32>,
            seqStartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1StartBlockHash_: alloy::sol_types::private::FixedBytes<32>,
            l1block_: alloy::sol_types::private::Address,
            challengeWindowDuration_: u64,
            teeKeyManager_: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            poster_,
                            bridge_,
                            appchainConfigHash_,
                            appchainStartBlockHash_,
                            seqConfigHash_,
                            seqStartBlockHash_,
                            l1StartBlockHash_,
                            l1block_,
                            challengeWindowDuration_,
                            teeKeyManager_,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TeeModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TeeModuleInstance<T, P, N> {
            TeeModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`bridge`] function.
        pub fn bridge(&self) -> alloy_contract::SolCallBuilder<T, &P, bridgeCall, N> {
            self.call_builder(&bridgeCall {})
        }
        ///Creates a new call builder for the [`challengeWindowDuration`] function.
        pub fn challengeWindowDuration(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, challengeWindowDurationCall, N> {
            self.call_builder(&challengeWindowDurationCall {})
        }
        ///Creates a new call builder for the [`challengeWindowEnd`] function.
        pub fn challengeWindowEnd(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, challengeWindowEndCall, N> {
            self.call_builder(&challengeWindowEndCall {})
        }
        ///Creates a new call builder for the [`closeChallengeWindow`] function.
        pub fn closeChallengeWindow(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, closeChallengeWindowCall, N> {
            self.call_builder(&closeChallengeWindowCall {})
        }
        ///Creates a new call builder for the [`l1block`] function.
        pub fn l1block(&self) -> alloy_contract::SolCallBuilder<T, &P, l1blockCall, N> {
            self.call_builder(&l1blockCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`pendingAssertions`] function.
        pub fn pendingAssertions(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, pendingAssertionsCall, N> {
            self.call_builder(&pendingAssertionsCall { _0 })
        }
        ///Creates a new call builder for the [`poster`] function.
        pub fn poster(&self) -> alloy_contract::SolCallBuilder<T, &P, posterCall, N> {
            self.call_builder(&posterCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`resolveChallenge`] function.
        pub fn resolveChallenge(
            &self,
            assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, resolveChallengeCall, N> {
            self.call_builder(&resolveChallengeCall { assertion })
        }
        ///Creates a new call builder for the [`setAppchainConfigHash`] function.
        pub fn setAppchainConfigHash(
            &self,
            hash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAppchainConfigHashCall, N> {
            self.call_builder(&setAppchainConfigHashCall { hash })
        }
        ///Creates a new call builder for the [`setChallengeWindowDuration`] function.
        pub fn setChallengeWindowDuration(
            &self,
            duration: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, setChallengeWindowDurationCall, N> {
            self.call_builder(
                &setChallengeWindowDurationCall {
                    duration,
                },
            )
        }
        ///Creates a new call builder for the [`setSeqConfigHash`] function.
        pub fn setSeqConfigHash(
            &self,
            hash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, setSeqConfigHashCall, N> {
            self.call_builder(&setSeqConfigHashCall { hash })
        }
        ///Creates a new call builder for the [`submitAssertion`] function.
        pub fn submitAssertion(
            &self,
            assertion: <PendingAssertion as alloy::sol_types::SolType>::RustType,
            signature: alloy::sol_types::private::Bytes,
            rewardAddr: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, submitAssertionCall, N> {
            self.call_builder(
                &submitAssertionCall {
                    assertion,
                    signature,
                    rewardAddr,
                },
            )
        }
        ///Creates a new call builder for the [`teeHackCount`] function.
        pub fn teeHackCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, teeHackCountCall, N> {
            self.call_builder(&teeHackCountCall {})
        }
        ///Creates a new call builder for the [`teeKeyManager`] function.
        pub fn teeKeyManager(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, teeKeyManagerCall, N> {
            self.call_builder(&teeKeyManagerCall {})
        }
        ///Creates a new call builder for the [`teeTrustedInput`] function.
        pub fn teeTrustedInput(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, teeTrustedInputCall, N> {
            self.call_builder(&teeTrustedInputCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ChallengeResolved`] event.
        pub fn ChallengeResolved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ChallengeResolved, N> {
            self.event_filter::<ChallengeResolved>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`TeeAppchainConfigHash`] event.
        pub fn TeeAppchainConfigHash_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TeeAppchainConfigHash, N> {
            self.event_filter::<TeeAppchainConfigHash>()
        }
        ///Creates a new event filter for the [`TeeHacked`] event.
        pub fn TeeHacked_filter(&self) -> alloy_contract::Event<T, &P, TeeHacked, N> {
            self.event_filter::<TeeHacked>()
        }
        ///Creates a new event filter for the [`TeeInput`] event.
        pub fn TeeInput_filter(&self) -> alloy_contract::Event<T, &P, TeeInput, N> {
            self.event_filter::<TeeInput>()
        }
        ///Creates a new event filter for the [`TeeSeqConfigHash`] event.
        pub fn TeeSeqConfigHash_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TeeSeqConfigHash, N> {
            self.event_filter::<TeeSeqConfigHash>()
        }
    }
}
