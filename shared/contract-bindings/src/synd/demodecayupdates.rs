/**

Generated by the following Solidity interface...
```solidity
interface DemoDecayUpdates {
    function IS_SCRIPT() external view returns (bool);
    function run() external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DemoDecayUpdates {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b611112610106823961111290f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610a44565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b5f1c90565b90565b90565b61015661015161015b9261013c565b61013f565b61013c565b90565b61016a61016f91610137565b610142565b90565b60018060a01b031690565b61019161018c6101969261013c565b61013f565b610172565b90565b6101ad6101a86101b292610172565b61013f565b610172565b90565b6101be90610199565b90565b6101fa6101f56101f07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61015e565b61017d565b6101b5565b90565b61020690610199565b90565b610212906101fd565b90565b6102256102206101c1565b610209565b90565b610231906101b5565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061025c90610234565b810190811067ffffffffffffffff82111761027657604052565b61023e565b60e01b90565b61028a90610172565b90565b61029681610281565b0361029d57565b5f80fd5b905051906102ae8261028d565b565b906020828203126102c9576102c6915f016102a1565b90565b61004c565b60209181520190565b5f7f43414c43554c41544f525f414444520000000000000000000000000000000000910152565b61030b600f6020926102ce565b610314816102d7565b0190565b61032d9060208101905f8183039101526102fe565b90565b610338610042565b3d5f823e3d90fd5b90565b61035761035261035c92610340565b61013f565b610172565b90565b61036890610343565b90565b5f7f43414c43554c41544f525f41444452206e6f7420736574000000000000000000910152565b61039f60176020926102ce565b6103a88161036b565b0190565b6103c19060208101905f818303910152610392565b90565b156103cb57565b6103d3610042565b62461bcd60e51b8152806103e9600482016103ac565b0390fd5b6103f690610199565b90565b610402906103ed565b90565b90610418610411610042565b9283610252565b565b67ffffffffffffffff811161043857610434602091610234565b0190565b61023e565b9061044f61044a8361041a565b610405565b918252565b60207f3d00000000000000000000000000000000000000000000000000000000000000917f3d3d3d20456d697373696f6e732043616c63756c61746f722044656d6f203d3d5f8201520152565b6104ab602161043d565b906104b860208301610454565b565b6104c26104a1565b90565b5f7f43616c63756c61746f7220616464726573733a00000000000000000000000000910152565b6104f6601361043d565b90610503602083016104c5565b565b61050d6104ec565b90565b610519906101b5565b90565b6105258161013c565b0361052c57565b5f80fd5b9050519061053d8261051c565b565b9060208282031261055857610555915f01610530565b90565b61004c565b5f7f43757272656e742065706f63683a000000000000000000000000000000000000910152565b61058e600e61043d565b9061059b6020830161055d565b565b6105a5610584565b90565b5f7f546f74616c20656d69747465643a000000000000000000000000000000000000910152565b6105d9600e61043d565b906105e6602083016105a8565b565b6105f06105cf565b90565b5f7f52656d61696e696e6720737570706c793a000000000000000000000000000000910152565b610624601161043d565b90610631602083016105f3565b565b61063b61061a565b90565b610647816100d7565b0361064e57565b5f80fd5b9050519061065f8261063e565b565b9060208282031261067a57610677915f01610652565b90565b61004c565b5f7f497320636f6d706c657465643a00000000000000000000000000000000000000910152565b6106b0600d61043d565b906106bd6020830161067f565b565b6106c76106a6565b90565b5f7f4e65787420656d697373696f6e20707265766965773a00000000000000000000910152565b6106fb601661043d565b90610708602083016106ca565b565b6107126106f1565b90565b61072961072461072e92610340565b61013f565b61013c565b90565b61073a90610715565b9052565b9190610751905f60208501940190610731565b565b5f7f43756d756c61746976652070726f6475637420505f303a000000000000000000910152565b610784601761043d565b9061079160208301610753565b565b61079b61077a565b90565b60207f203d3d3d00000000000000000000000000000000000000000000000000000000917f3d3d3d204578616d706c6520446563617920466163746f7220557064617465735f8201520152565b6107f5602461043d565b906108026020830161079e565b565b61080c6107eb565b90565b5f7f546f207365742065706f636820313020746f203930252064656361793a000000910152565b610840601d61043d565b9061084d6020830161080f565b565b610857610836565b90565b60207f3930653138290000000000000000000000000000000000000000000000000000917f63616c63756c61746f722e7365744465636179466163746f722831302c20302e5f8201520152565b6108b1602661043d565b906108be6020830161085a565b565b6108c86108a7565b90565b60207f2064656361793a00000000000000000000000000000000000000000000000000917f546f207365742065706f6368732032302d323520776974682076617279696e675f8201520152565b610922602761043d565b9061092f602083016108cb565b565b610939610918565b90565b60407f2e36356531382c20302e36306531385d3b000000000000000000000000000000917f75696e743235365b5d206d656d6f727920646563617973203d205b302e3835655f8201527f31382c20302e38306531382c20302e37356531382c20302e37306531382c203060208201520152565b6109b9605161043d565b906109c66020830161093c565b565b6109d06109af565b90565b60207f6563617973293b00000000000000000000000000000000000000000000000000917f63616c63756c61746f722e7365744465636179466163746f72732832302c20645f8201520152565b610a2a602761043d565b90610a37602083016109d3565b565b610a41610a20565b90565b610a6f6020610a59610a54610215565b610228565b63350d56bf90610a67610042565b93849261027b565b82528180610a7f60048201610318565b03915afa908115610eb1575f91610e83575b50610ab781610ab0610aaa610aa55f61035f565b610281565b91610281565b14156103c4565b610ae1610ac3826103f9565b91610ad4610acf6104ba565b610f0e565b610adc610505565b610f82565b610b056020610aef83610510565b637667180890610afd610042565b93849261027b565b82528180610b156004820161005f565b03915afa8015610e7e57610b38915f91610e50575b50610b3361059d565b610ff7565b610b5c6020610b4683610510565b63df0244b190610b54610042565b93849261027b565b82528180610b6c6004820161005f565b03915afa8015610e4b57610b8f915f91610e1d575b50610b8a6105e8565b610ff7565b610bb36020610b9d83610510565b63e4b7fb7390610bab610042565b93849261027b565b82528180610bc36004820161005f565b03915afa8015610e1857610be6915f91610dea575b50610be1610633565b610ff7565b610c0a6020610bf483610510565b63fa391c6490610c02610042565b93849261027b565b82528180610c1a6004820161005f565b03915afa8015610de557610c3d915f91610db7575b50610c386106bf565b61105f565b610c616020610c4b83610510565b6380572f1890610c59610042565b93849261027b565b82528180610c716004820161005f565b03915afa8015610db257610ccd92610c9e610ca3926020945f91610d85575b50610c9961070a565b610ff7565b610510565b63236640b990610cc25f92610cb6610042565b9586948593849361027b565b83526004830161073e565b03915afa8015610d8057610cf0915f91610d52575b50610ceb610793565b610ff7565b610d00610cfb610804565b610f0e565b610d10610d0b61084f565b610f0e565b610d20610d1b6108c0565b610f0e565b610d30610d2b610931565b610f0e565b610d40610d3b6109c8565b610f0e565b610d50610d4b610a39565b610f0e565b565b610d73915060203d8111610d79575b610d6b8183610252565b81019061053f565b5f610ce2565b503d610d61565b610330565b610da59150853d8111610dab575b610d9d8183610252565b81019061053f565b5f610c90565b503d610d93565b610330565b610dd8915060203d8111610dde575b610dd08183610252565b810190610661565b5f610c2f565b503d610dc6565b610330565b610e0b915060203d8111610e11575b610e038183610252565b81019061053f565b5f610bd8565b503d610df9565b610330565b610e3e915060203d8111610e44575b610e368183610252565b81019061053f565b5f610b81565b503d610e2c565b610330565b610e71915060203d8111610e77575b610e698183610252565b81019061053f565b5f610b2a565b503d610e5f565b610330565b610ea4915060203d8111610eaa575b610e9c8183610252565b8101906102b0565b5f610a91565b503d610e92565b610330565b5190565b90825f9392825e0152565b610ee4610eed602093610ef293610edb81610eb6565b938480936102ce565b95869101610eba565b610234565b0190565b610f0b9160208201915f818403910152610ec5565b90565b610f39610f48610f4d92610f20610042565b92839160046020840163104c13eb60e21b815201610ef6565b60208201810382520382610252565b6110a1565b565b610f5890610281565b9052565b92916020610f78610f809360408701908782035f890152610ec5565b940190610f4f565b565b90610fbd610fc292610fae610f95610042565b93849260046020850163319af33360e01b815201610f5c565b60208201810382520382610252565b6110a1565b565b610fcd9061013c565b9052565b92916020610fed610ff59360408701908782035f890152610ec5565b940190610fc4565b565b906110326110379261102361100a610042565b938492600460208501632d839cb360e21b815201610fd1565b60208201810382520382610252565b6110a1565b565b9291602061105561105d9360408701908782035f890152610ec5565b9401906100dc565b565b9061109a61109f9261108b611072610042565b93849260046020850163c3b5563560e01b815201611039565b60208201810382520382610252565b6110a1565b565b6110b4906110af60016110e0565b611100565b565b6a636f6e736f6c652e6c6f6790565b5f80916110d06110b6565b602082519201905afa50565b5f90565b6110e86110dc565b5090565b634e487b7160e01b5f52605160045260245ffd5b6001036110ec57611110906110c5565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x11\x12a\x01\x06\x829a\x11\x12\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\nDV[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1C\x90V[\x90V[\x90V[a\x01Va\x01Qa\x01[\x92a\x01<V[a\x01?V[a\x01<V[\x90V[a\x01ja\x01o\x91a\x017V[a\x01BV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x91a\x01\x8Ca\x01\x96\x92a\x01<V[a\x01?V[a\x01rV[\x90V[a\x01\xADa\x01\xA8a\x01\xB2\x92a\x01rV[a\x01?V[a\x01rV[\x90V[a\x01\xBE\x90a\x01\x99V[\x90V[a\x01\xFAa\x01\xF5a\x01\xF0\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x01^V[a\x01}V[a\x01\xB5V[\x90V[a\x02\x06\x90a\x01\x99V[\x90V[a\x02\x12\x90a\x01\xFDV[\x90V[a\x02%a\x02 a\x01\xC1V[a\x02\tV[\x90V[a\x021\x90a\x01\xB5V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\\\x90a\x024V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02vW`@RV[a\x02>V[`\xE0\x1B\x90V[a\x02\x8A\x90a\x01rV[\x90V[a\x02\x96\x81a\x02\x81V[\x03a\x02\x9DWV[_\x80\xFD[\x90PQ\x90a\x02\xAE\x82a\x02\x8DV[V[\x90` \x82\x82\x03\x12a\x02\xC9Wa\x02\xC6\x91_\x01a\x02\xA1V[\x90V[a\0LV[` \x91\x81R\x01\x90V[_\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x0B`\x0F` \x92a\x02\xCEV[a\x03\x14\x81a\x02\xD7V[\x01\x90V[a\x03-\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xFEV[\x90V[a\x038a\0BV[=_\x82>=\x90\xFD[\x90V[a\x03Wa\x03Ra\x03\\\x92a\x03@V[a\x01?V[a\x01rV[\x90V[a\x03h\x90a\x03CV[\x90V[_\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x9F`\x17` \x92a\x02\xCEV[a\x03\xA8\x81a\x03kV[\x01\x90V[a\x03\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\x92V[\x90V[\x15a\x03\xCBWV[a\x03\xD3a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xE9`\x04\x82\x01a\x03\xACV[\x03\x90\xFD[a\x03\xF6\x90a\x01\x99V[\x90V[a\x04\x02\x90a\x03\xEDV[\x90V[\x90a\x04\x18a\x04\x11a\0BV[\x92\x83a\x02RV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x048Wa\x044` \x91a\x024V[\x01\x90V[a\x02>V[\x90a\x04Oa\x04J\x83a\x04\x1AV[a\x04\x05V[\x91\x82RV[` \x7F=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7F=== Emissions Calculator Demo ==_\x82\x01R\x01RV[a\x04\xAB`!a\x04=V[\x90a\x04\xB8` \x83\x01a\x04TV[V[a\x04\xC2a\x04\xA1V[\x90V[_\x7FCalculator address:\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xF6`\x13a\x04=V[\x90a\x05\x03` \x83\x01a\x04\xC5V[V[a\x05\ra\x04\xECV[\x90V[a\x05\x19\x90a\x01\xB5V[\x90V[a\x05%\x81a\x01<V[\x03a\x05,WV[_\x80\xFD[\x90PQ\x90a\x05=\x82a\x05\x1CV[V[\x90` \x82\x82\x03\x12a\x05XWa\x05U\x91_\x01a\x050V[\x90V[a\0LV[_\x7FCurrent epoch:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\x8E`\x0Ea\x04=V[\x90a\x05\x9B` \x83\x01a\x05]V[V[a\x05\xA5a\x05\x84V[\x90V[_\x7FTotal emitted:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xD9`\x0Ea\x04=V[\x90a\x05\xE6` \x83\x01a\x05\xA8V[V[a\x05\xF0a\x05\xCFV[\x90V[_\x7FRemaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06$`\x11a\x04=V[\x90a\x061` \x83\x01a\x05\xF3V[V[a\x06;a\x06\x1AV[\x90V[a\x06G\x81a\0\xD7V[\x03a\x06NWV[_\x80\xFD[\x90PQ\x90a\x06_\x82a\x06>V[V[\x90` \x82\x82\x03\x12a\x06zWa\x06w\x91_\x01a\x06RV[\x90V[a\0LV[_\x7FIs completed:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xB0`\ra\x04=V[\x90a\x06\xBD` \x83\x01a\x06\x7FV[V[a\x06\xC7a\x06\xA6V[\x90V[_\x7FNext emission preview:\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xFB`\x16a\x04=V[\x90a\x07\x08` \x83\x01a\x06\xCAV[V[a\x07\x12a\x06\xF1V[\x90V[a\x07)a\x07$a\x07.\x92a\x03@V[a\x01?V[a\x01<V[\x90V[a\x07:\x90a\x07\x15V[\x90RV[\x91\x90a\x07Q\x90_` \x85\x01\x94\x01\x90a\x071V[V[_\x7FCumulative product P_0:\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\x84`\x17a\x04=V[\x90a\x07\x91` \x83\x01a\x07SV[V[a\x07\x9Ba\x07zV[\x90V[` \x7F ===\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7F=== Example Decay Factor Updates_\x82\x01R\x01RV[a\x07\xF5`$a\x04=V[\x90a\x08\x02` \x83\x01a\x07\x9EV[V[a\x08\x0Ca\x07\xEBV[\x90V[_\x7FTo set epoch 10 to 90% decay:\0\0\0\x91\x01RV[a\x08@`\x1Da\x04=V[\x90a\x08M` \x83\x01a\x08\x0FV[V[a\x08Wa\x086V[\x90V[` \x7F90e18)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcalculator.setDecayFactor(10, 0._\x82\x01R\x01RV[a\x08\xB1`&a\x04=V[\x90a\x08\xBE` \x83\x01a\x08ZV[V[a\x08\xC8a\x08\xA7V[\x90V[` \x7F decay:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTo set epochs 20-25 with varying_\x82\x01R\x01RV[a\t\"`'a\x04=V[\x90a\t/` \x83\x01a\x08\xCBV[V[a\t9a\t\x18V[\x90V[`@\x7F.65e18, 0.60e18];\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fuint256[] memory decays = [0.85e_\x82\x01R\x7F18, 0.80e18, 0.75e18, 0.70e18, 0` \x82\x01R\x01RV[a\t\xB9`Qa\x04=V[\x90a\t\xC6` \x83\x01a\t<V[V[a\t\xD0a\t\xAFV[\x90V[` \x7Fecays);\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcalculator.setDecayFactors(20, d_\x82\x01R\x01RV[a\n*`'a\x04=V[\x90a\n7` \x83\x01a\t\xD3V[V[a\nAa\n V[\x90V[a\no` a\nYa\nTa\x02\x15V[a\x02(V[c5\rV\xBF\x90a\nga\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\n\x7F`\x04\x82\x01a\x03\x18V[\x03\x91Z\xFA\x90\x81\x15a\x0E\xB1W_\x91a\x0E\x83W[Pa\n\xB7\x81a\n\xB0a\n\xAAa\n\xA5_a\x03_V[a\x02\x81V[\x91a\x02\x81V[\x14\x15a\x03\xC4V[a\n\xE1a\n\xC3\x82a\x03\xF9V[\x91a\n\xD4a\n\xCFa\x04\xBAV[a\x0F\x0EV[a\n\xDCa\x05\x05V[a\x0F\x82V[a\x0B\x05` a\n\xEF\x83a\x05\x10V[cvg\x18\x08\x90a\n\xFDa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0B\x15`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0E~Wa\x0B8\x91_\x91a\x0EPW[Pa\x0B3a\x05\x9DV[a\x0F\xF7V[a\x0B\\` a\x0BF\x83a\x05\x10V[c\xDF\x02D\xB1\x90a\x0BTa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0Bl`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0EKWa\x0B\x8F\x91_\x91a\x0E\x1DW[Pa\x0B\x8Aa\x05\xE8V[a\x0F\xF7V[a\x0B\xB3` a\x0B\x9D\x83a\x05\x10V[c\xE4\xB7\xFBs\x90a\x0B\xABa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0B\xC3`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0E\x18Wa\x0B\xE6\x91_\x91a\r\xEAW[Pa\x0B\xE1a\x063V[a\x0F\xF7V[a\x0C\n` a\x0B\xF4\x83a\x05\x10V[c\xFA9\x1Cd\x90a\x0C\x02a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0C\x1A`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\r\xE5Wa\x0C=\x91_\x91a\r\xB7W[Pa\x0C8a\x06\xBFV[a\x10_V[a\x0Ca` a\x0CK\x83a\x05\x10V[c\x80W/\x18\x90a\x0CYa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0Cq`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\r\xB2Wa\x0C\xCD\x92a\x0C\x9Ea\x0C\xA3\x92` \x94_\x91a\r\x85W[Pa\x0C\x99a\x07\nV[a\x0F\xF7V[a\x05\x10V[c#f@\xB9\x90a\x0C\xC2_\x92a\x0C\xB6a\0BV[\x95\x86\x94\x85\x93\x84\x93a\x02{V[\x83R`\x04\x83\x01a\x07>V[\x03\x91Z\xFA\x80\x15a\r\x80Wa\x0C\xF0\x91_\x91a\rRW[Pa\x0C\xEBa\x07\x93V[a\x0F\xF7V[a\r\0a\x0C\xFBa\x08\x04V[a\x0F\x0EV[a\r\x10a\r\x0Ba\x08OV[a\x0F\x0EV[a\r a\r\x1Ba\x08\xC0V[a\x0F\x0EV[a\r0a\r+a\t1V[a\x0F\x0EV[a\r@a\r;a\t\xC8V[a\x0F\x0EV[a\rPa\rKa\n9V[a\x0F\x0EV[V[a\rs\x91P` =\x81\x11a\ryW[a\rk\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0C\xE2V[P=a\raV[a\x030V[a\r\xA5\x91P\x85=\x81\x11a\r\xABW[a\r\x9D\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0C\x90V[P=a\r\x93V[a\x030V[a\r\xD8\x91P` =\x81\x11a\r\xDEW[a\r\xD0\x81\x83a\x02RV[\x81\x01\x90a\x06aV[_a\x0C/V[P=a\r\xC6V[a\x030V[a\x0E\x0B\x91P` =\x81\x11a\x0E\x11W[a\x0E\x03\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0B\xD8V[P=a\r\xF9V[a\x030V[a\x0E>\x91P` =\x81\x11a\x0EDW[a\x0E6\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0B\x81V[P=a\x0E,V[a\x030V[a\x0Eq\x91P` =\x81\x11a\x0EwW[a\x0Ei\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0B*V[P=a\x0E_V[a\x030V[a\x0E\xA4\x91P` =\x81\x11a\x0E\xAAW[a\x0E\x9C\x81\x83a\x02RV[\x81\x01\x90a\x02\xB0V[_a\n\x91V[P=a\x0E\x92V[a\x030V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0E\xE4a\x0E\xED` \x93a\x0E\xF2\x93a\x0E\xDB\x81a\x0E\xB6V[\x93\x84\x80\x93a\x02\xCEV[\x95\x86\x91\x01a\x0E\xBAV[a\x024V[\x01\x90V[a\x0F\x0B\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0E\xC5V[\x90V[a\x0F9a\x0FHa\x0FM\x92a\x0F a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x0E\xF6V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[a\x0FX\x90a\x02\x81V[\x90RV[\x92\x91` a\x0Fxa\x0F\x80\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0E\xC5V[\x94\x01\x90a\x0FOV[V[\x90a\x0F\xBDa\x0F\xC2\x92a\x0F\xAEa\x0F\x95a\0BV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x0F\\V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[a\x0F\xCD\x90a\x01<V[\x90RV[\x92\x91` a\x0F\xEDa\x0F\xF5\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0E\xC5V[\x94\x01\x90a\x0F\xC4V[V[\x90a\x102a\x107\x92a\x10#a\x10\na\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x0F\xD1V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[\x92\x91` a\x10Ua\x10]\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0E\xC5V[\x94\x01\x90a\0\xDCV[V[\x90a\x10\x9Aa\x10\x9F\x92a\x10\x8Ba\x10ra\0BV[\x93\x84\x92`\x04` \x85\x01c\xC3\xB5V5`\xE0\x1B\x81R\x01a\x109V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[a\x10\xB4\x90a\x10\xAF`\x01a\x10\xE0V[a\x11\0V[V[jconsole.log\x90V[_\x80\x91a\x10\xD0a\x10\xB6V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x10\xE8a\x10\xDCV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x10\xECWa\x11\x10\x90a\x10\xC5V[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610133565b61001d5f3561003c565b8063c0406226146100375763f8ccbf470361000e576100fe565b610064565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261005a57565b61004c565b5f0190565b3461009257610074366004610050565b61007c610a44565b610084610042565b8061008e8161005f565b0390f35b610048565b1c90565b60ff1690565b6100b19060086100b69302610097565b61009b565b90565b906100c491546100a1565b90565b6100d4600c6002906100b9565b90565b151590565b6100e5906100d7565b9052565b91906100fc905f602085019401906100dc565b565b3461012e5761010e366004610050565b61012a6101196100c7565b610121610042565b918291826100e9565b0390f35b610048565b5f80fd5b5f1c90565b90565b90565b61015661015161015b9261013c565b61013f565b61013c565b90565b61016a61016f91610137565b610142565b90565b60018060a01b031690565b61019161018c6101969261013c565b61013f565b610172565b90565b6101ad6101a86101b292610172565b61013f565b610172565b90565b6101be90610199565b90565b6101fa6101f56101f07f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d61015e565b61017d565b6101b5565b90565b61020690610199565b90565b610212906101fd565b90565b6102256102206101c1565b610209565b90565b610231906101b5565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061025c90610234565b810190811067ffffffffffffffff82111761027657604052565b61023e565b60e01b90565b61028a90610172565b90565b61029681610281565b0361029d57565b5f80fd5b905051906102ae8261028d565b565b906020828203126102c9576102c6915f016102a1565b90565b61004c565b60209181520190565b5f7f43414c43554c41544f525f414444520000000000000000000000000000000000910152565b61030b600f6020926102ce565b610314816102d7565b0190565b61032d9060208101905f8183039101526102fe565b90565b610338610042565b3d5f823e3d90fd5b90565b61035761035261035c92610340565b61013f565b610172565b90565b61036890610343565b90565b5f7f43414c43554c41544f525f41444452206e6f7420736574000000000000000000910152565b61039f60176020926102ce565b6103a88161036b565b0190565b6103c19060208101905f818303910152610392565b90565b156103cb57565b6103d3610042565b62461bcd60e51b8152806103e9600482016103ac565b0390fd5b6103f690610199565b90565b610402906103ed565b90565b90610418610411610042565b9283610252565b565b67ffffffffffffffff811161043857610434602091610234565b0190565b61023e565b9061044f61044a8361041a565b610405565b918252565b60207f3d00000000000000000000000000000000000000000000000000000000000000917f3d3d3d20456d697373696f6e732043616c63756c61746f722044656d6f203d3d5f8201520152565b6104ab602161043d565b906104b860208301610454565b565b6104c26104a1565b90565b5f7f43616c63756c61746f7220616464726573733a00000000000000000000000000910152565b6104f6601361043d565b90610503602083016104c5565b565b61050d6104ec565b90565b610519906101b5565b90565b6105258161013c565b0361052c57565b5f80fd5b9050519061053d8261051c565b565b9060208282031261055857610555915f01610530565b90565b61004c565b5f7f43757272656e742065706f63683a000000000000000000000000000000000000910152565b61058e600e61043d565b9061059b6020830161055d565b565b6105a5610584565b90565b5f7f546f74616c20656d69747465643a000000000000000000000000000000000000910152565b6105d9600e61043d565b906105e6602083016105a8565b565b6105f06105cf565b90565b5f7f52656d61696e696e6720737570706c793a000000000000000000000000000000910152565b610624601161043d565b90610631602083016105f3565b565b61063b61061a565b90565b610647816100d7565b0361064e57565b5f80fd5b9050519061065f8261063e565b565b9060208282031261067a57610677915f01610652565b90565b61004c565b5f7f497320636f6d706c657465643a00000000000000000000000000000000000000910152565b6106b0600d61043d565b906106bd6020830161067f565b565b6106c76106a6565b90565b5f7f4e65787420656d697373696f6e20707265766965773a00000000000000000000910152565b6106fb601661043d565b90610708602083016106ca565b565b6107126106f1565b90565b61072961072461072e92610340565b61013f565b61013c565b90565b61073a90610715565b9052565b9190610751905f60208501940190610731565b565b5f7f43756d756c61746976652070726f6475637420505f303a000000000000000000910152565b610784601761043d565b9061079160208301610753565b565b61079b61077a565b90565b60207f203d3d3d00000000000000000000000000000000000000000000000000000000917f3d3d3d204578616d706c6520446563617920466163746f7220557064617465735f8201520152565b6107f5602461043d565b906108026020830161079e565b565b61080c6107eb565b90565b5f7f546f207365742065706f636820313020746f203930252064656361793a000000910152565b610840601d61043d565b9061084d6020830161080f565b565b610857610836565b90565b60207f3930653138290000000000000000000000000000000000000000000000000000917f63616c63756c61746f722e7365744465636179466163746f722831302c20302e5f8201520152565b6108b1602661043d565b906108be6020830161085a565b565b6108c86108a7565b90565b60207f2064656361793a00000000000000000000000000000000000000000000000000917f546f207365742065706f6368732032302d323520776974682076617279696e675f8201520152565b610922602761043d565b9061092f602083016108cb565b565b610939610918565b90565b60407f2e36356531382c20302e36306531385d3b000000000000000000000000000000917f75696e743235365b5d206d656d6f727920646563617973203d205b302e3835655f8201527f31382c20302e38306531382c20302e37356531382c20302e37306531382c203060208201520152565b6109b9605161043d565b906109c66020830161093c565b565b6109d06109af565b90565b60207f6563617973293b00000000000000000000000000000000000000000000000000917f63616c63756c61746f722e7365744465636179466163746f72732832302c20645f8201520152565b610a2a602761043d565b90610a37602083016109d3565b565b610a41610a20565b90565b610a6f6020610a59610a54610215565b610228565b63350d56bf90610a67610042565b93849261027b565b82528180610a7f60048201610318565b03915afa908115610eb1575f91610e83575b50610ab781610ab0610aaa610aa55f61035f565b610281565b91610281565b14156103c4565b610ae1610ac3826103f9565b91610ad4610acf6104ba565b610f0e565b610adc610505565b610f82565b610b056020610aef83610510565b637667180890610afd610042565b93849261027b565b82528180610b156004820161005f565b03915afa8015610e7e57610b38915f91610e50575b50610b3361059d565b610ff7565b610b5c6020610b4683610510565b63df0244b190610b54610042565b93849261027b565b82528180610b6c6004820161005f565b03915afa8015610e4b57610b8f915f91610e1d575b50610b8a6105e8565b610ff7565b610bb36020610b9d83610510565b63e4b7fb7390610bab610042565b93849261027b565b82528180610bc36004820161005f565b03915afa8015610e1857610be6915f91610dea575b50610be1610633565b610ff7565b610c0a6020610bf483610510565b63fa391c6490610c02610042565b93849261027b565b82528180610c1a6004820161005f565b03915afa8015610de557610c3d915f91610db7575b50610c386106bf565b61105f565b610c616020610c4b83610510565b6380572f1890610c59610042565b93849261027b565b82528180610c716004820161005f565b03915afa8015610db257610ccd92610c9e610ca3926020945f91610d85575b50610c9961070a565b610ff7565b610510565b63236640b990610cc25f92610cb6610042565b9586948593849361027b565b83526004830161073e565b03915afa8015610d8057610cf0915f91610d52575b50610ceb610793565b610ff7565b610d00610cfb610804565b610f0e565b610d10610d0b61084f565b610f0e565b610d20610d1b6108c0565b610f0e565b610d30610d2b610931565b610f0e565b610d40610d3b6109c8565b610f0e565b610d50610d4b610a39565b610f0e565b565b610d73915060203d8111610d79575b610d6b8183610252565b81019061053f565b5f610ce2565b503d610d61565b610330565b610da59150853d8111610dab575b610d9d8183610252565b81019061053f565b5f610c90565b503d610d93565b610330565b610dd8915060203d8111610dde575b610dd08183610252565b810190610661565b5f610c2f565b503d610dc6565b610330565b610e0b915060203d8111610e11575b610e038183610252565b81019061053f565b5f610bd8565b503d610df9565b610330565b610e3e915060203d8111610e44575b610e368183610252565b81019061053f565b5f610b81565b503d610e2c565b610330565b610e71915060203d8111610e77575b610e698183610252565b81019061053f565b5f610b2a565b503d610e5f565b610330565b610ea4915060203d8111610eaa575b610e9c8183610252565b8101906102b0565b5f610a91565b503d610e92565b610330565b5190565b90825f9392825e0152565b610ee4610eed602093610ef293610edb81610eb6565b938480936102ce565b95869101610eba565b610234565b0190565b610f0b9160208201915f818403910152610ec5565b90565b610f39610f48610f4d92610f20610042565b92839160046020840163104c13eb60e21b815201610ef6565b60208201810382520382610252565b6110a1565b565b610f5890610281565b9052565b92916020610f78610f809360408701908782035f890152610ec5565b940190610f4f565b565b90610fbd610fc292610fae610f95610042565b93849260046020850163319af33360e01b815201610f5c565b60208201810382520382610252565b6110a1565b565b610fcd9061013c565b9052565b92916020610fed610ff59360408701908782035f890152610ec5565b940190610fc4565b565b906110326110379261102361100a610042565b938492600460208501632d839cb360e21b815201610fd1565b60208201810382520382610252565b6110a1565b565b9291602061105561105d9360408701908782035f890152610ec5565b9401906100dc565b565b9061109a61109f9261108b611072610042565b93849260046020850163c3b5563560e01b815201611039565b60208201810382520382610252565b6110a1565b565b6110b4906110af60016110e0565b611100565b565b6a636f6e736f6c652e6c6f6790565b5f80916110d06110b6565b602082519201905afa50565b5f90565b6110e86110dc565b5090565b634e487b7160e01b5f52605160045260245ffd5b6001036110ec57611110906110c5565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x013V[a\0\x1D_5a\0<V[\x80c\xC0@b&\x14a\x007Wc\xF8\xCC\xBFG\x03a\0\x0EWa\0\xFEV[a\0dV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0ZWV[a\0LV[_\x01\x90V[4a\0\x92Wa\0t6`\x04a\0PV[a\0|a\nDV[a\0\x84a\0BV[\x80a\0\x8E\x81a\0_V[\x03\x90\xF3[a\0HV[\x1C\x90V[`\xFF\x16\x90V[a\0\xB1\x90`\x08a\0\xB6\x93\x02a\0\x97V[a\0\x9BV[\x90V[\x90a\0\xC4\x91Ta\0\xA1V[\x90V[a\0\xD4`\x0C`\x02\x90a\0\xB9V[\x90V[\x15\x15\x90V[a\0\xE5\x90a\0\xD7V[\x90RV[\x91\x90a\0\xFC\x90_` \x85\x01\x94\x01\x90a\0\xDCV[V[4a\x01.Wa\x01\x0E6`\x04a\0PV[a\x01*a\x01\x19a\0\xC7V[a\x01!a\0BV[\x91\x82\x91\x82a\0\xE9V[\x03\x90\xF3[a\0HV[_\x80\xFD[_\x1C\x90V[\x90V[\x90V[a\x01Va\x01Qa\x01[\x92a\x01<V[a\x01?V[a\x01<V[\x90V[a\x01ja\x01o\x91a\x017V[a\x01BV[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x91a\x01\x8Ca\x01\x96\x92a\x01<V[a\x01?V[a\x01rV[\x90V[a\x01\xADa\x01\xA8a\x01\xB2\x92a\x01rV[a\x01?V[a\x01rV[\x90V[a\x01\xBE\x90a\x01\x99V[\x90V[a\x01\xFAa\x01\xF5a\x01\xF0\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x01^V[a\x01}V[a\x01\xB5V[\x90V[a\x02\x06\x90a\x01\x99V[\x90V[a\x02\x12\x90a\x01\xFDV[\x90V[a\x02%a\x02 a\x01\xC1V[a\x02\tV[\x90V[a\x021\x90a\x01\xB5V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x02\\\x90a\x024V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x02vW`@RV[a\x02>V[`\xE0\x1B\x90V[a\x02\x8A\x90a\x01rV[\x90V[a\x02\x96\x81a\x02\x81V[\x03a\x02\x9DWV[_\x80\xFD[\x90PQ\x90a\x02\xAE\x82a\x02\x8DV[V[\x90` \x82\x82\x03\x12a\x02\xC9Wa\x02\xC6\x91_\x01a\x02\xA1V[\x90V[a\0LV[` \x91\x81R\x01\x90V[_\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x0B`\x0F` \x92a\x02\xCEV[a\x03\x14\x81a\x02\xD7V[\x01\x90V[a\x03-\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xFEV[\x90V[a\x038a\0BV[=_\x82>=\x90\xFD[\x90V[a\x03Wa\x03Ra\x03\\\x92a\x03@V[a\x01?V[a\x01rV[\x90V[a\x03h\x90a\x03CV[\x90V[_\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x9F`\x17` \x92a\x02\xCEV[a\x03\xA8\x81a\x03kV[\x01\x90V[a\x03\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\x92V[\x90V[\x15a\x03\xCBWV[a\x03\xD3a\0BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xE9`\x04\x82\x01a\x03\xACV[\x03\x90\xFD[a\x03\xF6\x90a\x01\x99V[\x90V[a\x04\x02\x90a\x03\xEDV[\x90V[\x90a\x04\x18a\x04\x11a\0BV[\x92\x83a\x02RV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x048Wa\x044` \x91a\x024V[\x01\x90V[a\x02>V[\x90a\x04Oa\x04J\x83a\x04\x1AV[a\x04\x05V[\x91\x82RV[` \x7F=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7F=== Emissions Calculator Demo ==_\x82\x01R\x01RV[a\x04\xAB`!a\x04=V[\x90a\x04\xB8` \x83\x01a\x04TV[V[a\x04\xC2a\x04\xA1V[\x90V[_\x7FCalculator address:\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xF6`\x13a\x04=V[\x90a\x05\x03` \x83\x01a\x04\xC5V[V[a\x05\ra\x04\xECV[\x90V[a\x05\x19\x90a\x01\xB5V[\x90V[a\x05%\x81a\x01<V[\x03a\x05,WV[_\x80\xFD[\x90PQ\x90a\x05=\x82a\x05\x1CV[V[\x90` \x82\x82\x03\x12a\x05XWa\x05U\x91_\x01a\x050V[\x90V[a\0LV[_\x7FCurrent epoch:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\x8E`\x0Ea\x04=V[\x90a\x05\x9B` \x83\x01a\x05]V[V[a\x05\xA5a\x05\x84V[\x90V[_\x7FTotal emitted:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xD9`\x0Ea\x04=V[\x90a\x05\xE6` \x83\x01a\x05\xA8V[V[a\x05\xF0a\x05\xCFV[\x90V[_\x7FRemaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06$`\x11a\x04=V[\x90a\x061` \x83\x01a\x05\xF3V[V[a\x06;a\x06\x1AV[\x90V[a\x06G\x81a\0\xD7V[\x03a\x06NWV[_\x80\xFD[\x90PQ\x90a\x06_\x82a\x06>V[V[\x90` \x82\x82\x03\x12a\x06zWa\x06w\x91_\x01a\x06RV[\x90V[a\0LV[_\x7FIs completed:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xB0`\ra\x04=V[\x90a\x06\xBD` \x83\x01a\x06\x7FV[V[a\x06\xC7a\x06\xA6V[\x90V[_\x7FNext emission preview:\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xFB`\x16a\x04=V[\x90a\x07\x08` \x83\x01a\x06\xCAV[V[a\x07\x12a\x06\xF1V[\x90V[a\x07)a\x07$a\x07.\x92a\x03@V[a\x01?V[a\x01<V[\x90V[a\x07:\x90a\x07\x15V[\x90RV[\x91\x90a\x07Q\x90_` \x85\x01\x94\x01\x90a\x071V[V[_\x7FCumulative product P_0:\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07\x84`\x17a\x04=V[\x90a\x07\x91` \x83\x01a\x07SV[V[a\x07\x9Ba\x07zV[\x90V[` \x7F ===\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7F=== Example Decay Factor Updates_\x82\x01R\x01RV[a\x07\xF5`$a\x04=V[\x90a\x08\x02` \x83\x01a\x07\x9EV[V[a\x08\x0Ca\x07\xEBV[\x90V[_\x7FTo set epoch 10 to 90% decay:\0\0\0\x91\x01RV[a\x08@`\x1Da\x04=V[\x90a\x08M` \x83\x01a\x08\x0FV[V[a\x08Wa\x086V[\x90V[` \x7F90e18)\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcalculator.setDecayFactor(10, 0._\x82\x01R\x01RV[a\x08\xB1`&a\x04=V[\x90a\x08\xBE` \x83\x01a\x08ZV[V[a\x08\xC8a\x08\xA7V[\x90V[` \x7F decay:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTo set epochs 20-25 with varying_\x82\x01R\x01RV[a\t\"`'a\x04=V[\x90a\t/` \x83\x01a\x08\xCBV[V[a\t9a\t\x18V[\x90V[`@\x7F.65e18, 0.60e18];\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fuint256[] memory decays = [0.85e_\x82\x01R\x7F18, 0.80e18, 0.75e18, 0.70e18, 0` \x82\x01R\x01RV[a\t\xB9`Qa\x04=V[\x90a\t\xC6` \x83\x01a\t<V[V[a\t\xD0a\t\xAFV[\x90V[` \x7Fecays);\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7Fcalculator.setDecayFactors(20, d_\x82\x01R\x01RV[a\n*`'a\x04=V[\x90a\n7` \x83\x01a\t\xD3V[V[a\nAa\n V[\x90V[a\no` a\nYa\nTa\x02\x15V[a\x02(V[c5\rV\xBF\x90a\nga\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\n\x7F`\x04\x82\x01a\x03\x18V[\x03\x91Z\xFA\x90\x81\x15a\x0E\xB1W_\x91a\x0E\x83W[Pa\n\xB7\x81a\n\xB0a\n\xAAa\n\xA5_a\x03_V[a\x02\x81V[\x91a\x02\x81V[\x14\x15a\x03\xC4V[a\n\xE1a\n\xC3\x82a\x03\xF9V[\x91a\n\xD4a\n\xCFa\x04\xBAV[a\x0F\x0EV[a\n\xDCa\x05\x05V[a\x0F\x82V[a\x0B\x05` a\n\xEF\x83a\x05\x10V[cvg\x18\x08\x90a\n\xFDa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0B\x15`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0E~Wa\x0B8\x91_\x91a\x0EPW[Pa\x0B3a\x05\x9DV[a\x0F\xF7V[a\x0B\\` a\x0BF\x83a\x05\x10V[c\xDF\x02D\xB1\x90a\x0BTa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0Bl`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0EKWa\x0B\x8F\x91_\x91a\x0E\x1DW[Pa\x0B\x8Aa\x05\xE8V[a\x0F\xF7V[a\x0B\xB3` a\x0B\x9D\x83a\x05\x10V[c\xE4\xB7\xFBs\x90a\x0B\xABa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0B\xC3`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\x0E\x18Wa\x0B\xE6\x91_\x91a\r\xEAW[Pa\x0B\xE1a\x063V[a\x0F\xF7V[a\x0C\n` a\x0B\xF4\x83a\x05\x10V[c\xFA9\x1Cd\x90a\x0C\x02a\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0C\x1A`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\r\xE5Wa\x0C=\x91_\x91a\r\xB7W[Pa\x0C8a\x06\xBFV[a\x10_V[a\x0Ca` a\x0CK\x83a\x05\x10V[c\x80W/\x18\x90a\x0CYa\0BV[\x93\x84\x92a\x02{V[\x82R\x81\x80a\x0Cq`\x04\x82\x01a\0_V[\x03\x91Z\xFA\x80\x15a\r\xB2Wa\x0C\xCD\x92a\x0C\x9Ea\x0C\xA3\x92` \x94_\x91a\r\x85W[Pa\x0C\x99a\x07\nV[a\x0F\xF7V[a\x05\x10V[c#f@\xB9\x90a\x0C\xC2_\x92a\x0C\xB6a\0BV[\x95\x86\x94\x85\x93\x84\x93a\x02{V[\x83R`\x04\x83\x01a\x07>V[\x03\x91Z\xFA\x80\x15a\r\x80Wa\x0C\xF0\x91_\x91a\rRW[Pa\x0C\xEBa\x07\x93V[a\x0F\xF7V[a\r\0a\x0C\xFBa\x08\x04V[a\x0F\x0EV[a\r\x10a\r\x0Ba\x08OV[a\x0F\x0EV[a\r a\r\x1Ba\x08\xC0V[a\x0F\x0EV[a\r0a\r+a\t1V[a\x0F\x0EV[a\r@a\r;a\t\xC8V[a\x0F\x0EV[a\rPa\rKa\n9V[a\x0F\x0EV[V[a\rs\x91P` =\x81\x11a\ryW[a\rk\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0C\xE2V[P=a\raV[a\x030V[a\r\xA5\x91P\x85=\x81\x11a\r\xABW[a\r\x9D\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0C\x90V[P=a\r\x93V[a\x030V[a\r\xD8\x91P` =\x81\x11a\r\xDEW[a\r\xD0\x81\x83a\x02RV[\x81\x01\x90a\x06aV[_a\x0C/V[P=a\r\xC6V[a\x030V[a\x0E\x0B\x91P` =\x81\x11a\x0E\x11W[a\x0E\x03\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0B\xD8V[P=a\r\xF9V[a\x030V[a\x0E>\x91P` =\x81\x11a\x0EDW[a\x0E6\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0B\x81V[P=a\x0E,V[a\x030V[a\x0Eq\x91P` =\x81\x11a\x0EwW[a\x0Ei\x81\x83a\x02RV[\x81\x01\x90a\x05?V[_a\x0B*V[P=a\x0E_V[a\x030V[a\x0E\xA4\x91P` =\x81\x11a\x0E\xAAW[a\x0E\x9C\x81\x83a\x02RV[\x81\x01\x90a\x02\xB0V[_a\n\x91V[P=a\x0E\x92V[a\x030V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0E\xE4a\x0E\xED` \x93a\x0E\xF2\x93a\x0E\xDB\x81a\x0E\xB6V[\x93\x84\x80\x93a\x02\xCEV[\x95\x86\x91\x01a\x0E\xBAV[a\x024V[\x01\x90V[a\x0F\x0B\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0E\xC5V[\x90V[a\x0F9a\x0FHa\x0FM\x92a\x0F a\0BV[\x92\x83\x91`\x04` \x84\x01c\x10L\x13\xEB`\xE2\x1B\x81R\x01a\x0E\xF6V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[a\x0FX\x90a\x02\x81V[\x90RV[\x92\x91` a\x0Fxa\x0F\x80\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0E\xC5V[\x94\x01\x90a\x0FOV[V[\x90a\x0F\xBDa\x0F\xC2\x92a\x0F\xAEa\x0F\x95a\0BV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x0F\\V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[a\x0F\xCD\x90a\x01<V[\x90RV[\x92\x91` a\x0F\xEDa\x0F\xF5\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0E\xC5V[\x94\x01\x90a\x0F\xC4V[V[\x90a\x102a\x107\x92a\x10#a\x10\na\0BV[\x93\x84\x92`\x04` \x85\x01c-\x83\x9C\xB3`\xE2\x1B\x81R\x01a\x0F\xD1V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[\x92\x91` a\x10Ua\x10]\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\x0E\xC5V[\x94\x01\x90a\0\xDCV[V[\x90a\x10\x9Aa\x10\x9F\x92a\x10\x8Ba\x10ra\0BV[\x93\x84\x92`\x04` \x85\x01c\xC3\xB5V5`\xE0\x1B\x81R\x01a\x109V[` \x82\x01\x81\x03\x82R\x03\x82a\x02RV[a\x10\xA1V[V[a\x10\xB4\x90a\x10\xAF`\x01a\x10\xE0V[a\x11\0V[V[jconsole.log\x90V[_\x80\x91a\x10\xD0a\x10\xB6V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x10\xE8a\x10\xDCV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x10\xECWa\x11\x10\x90a\x10\xC5V[V",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DemoDecayUpdates`](self) function calls.
    pub enum DemoDecayUpdatesCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl DemoDecayUpdatesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DemoDecayUpdatesCalls {
        const NAME: &'static str = "DemoDecayUpdatesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DemoDecayUpdatesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DemoDecayUpdatesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DemoDecayUpdatesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DemoDecayUpdates`](self) contract instance.

See the [wrapper's documentation](`DemoDecayUpdatesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DemoDecayUpdatesInstance<T, P, N> {
        DemoDecayUpdatesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DemoDecayUpdatesInstance<T, P, N>>,
    > {
        DemoDecayUpdatesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DemoDecayUpdatesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`DemoDecayUpdates`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DemoDecayUpdates`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DemoDecayUpdatesInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DemoDecayUpdatesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DemoDecayUpdatesInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DemoDecayUpdatesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DemoDecayUpdates`](self) contract instance.

See the [wrapper's documentation](`DemoDecayUpdatesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DemoDecayUpdatesInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DemoDecayUpdatesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DemoDecayUpdatesInstance<T, P, N> {
            DemoDecayUpdatesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DemoDecayUpdatesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DemoDecayUpdatesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
