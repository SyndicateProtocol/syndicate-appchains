/**

Generated by the following Solidity interface...
```solidity
interface OptimismBridgeProxy {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error BridgeCallFailed(string reason);
    error BridgeNotActive();
    error ExcessiveAmount();
    error ReentrancyGuardReentrantCall();
    error SafeERC20FailedOperation(address token);
    error UnauthorizedCaller();
    error ZeroAddress();
    error ZeroAmount();

    event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
    event BridgeStatusUpdated(bool active);
    event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
    event DailyLimitReset(uint256 day, uint256 previousUsed);
    event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
    event OptimismConfigUpdated(address l2Token, address recipient, uint32 l2Gas);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _l2Token, address _recipient, uint32 _l2Gas);

    function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
    function BRIDGE_CALLER_ROLE() external view returns (bytes32);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function bridgeActive() external view returns (bool);
    function bridgeName() external view returns (string memory);
    function bridgeTarget() external view returns (address);
    function dailyLimit() external view returns (uint256);
    function dailyUsed() external view returns (uint256);
    function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
    function getBridgeInfo() external view returns (string memory name, address target, bool active);
    function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
    function getOptimismConfig() external view returns (address l2TokenAddr, address recipientAddr, uint32 gasLimit);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function l2Gas() external view returns (uint32);
    function l2Token() external view returns (address);
    function lastResetDay() external view returns (uint256);
    function maxSingleTransfer() external view returns (uint256);
    function recipient() external view returns (address);
    function recoverTokens(address token, uint256 amount, address to) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function setBridgeActive(bool active) external;
    function setBridgeTarget(address target) external;
    function setDailyLimit(uint256 limit) external;
    function setMaxSingleTransfer(uint256 amount) external;
    function setOptimismConfig(address _l2Token, address _recipient, uint32 _l2Gas) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "caller",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_bridgeTarget",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_maxSingleTransfer",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_dailyLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_l2Token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_l2Gas",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "BRIDGE_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "BRIDGE_CALLER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeActive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeName",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeTarget",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "dailyLimit",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "dailyUsed",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "executeBridge",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dynamicData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getBridgeInfo",
    "inputs": [],
    "outputs": [
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getDailyUsage",
    "inputs": [],
    "outputs": [
      {
        "name": "used",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "remaining",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getOptimismConfig",
    "inputs": [],
    "outputs": [
      {
        "name": "l2TokenAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "recipientAddr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "gasLimit",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l2Gas",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "l2Token",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastResetDay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxSingleTransfer",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recipient",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "recoverTokens",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeActive",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeTarget",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setDailyLimit",
    "inputs": [
      {
        "name": "limit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setMaxSingleTransfer",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setOptimismConfig",
    "inputs": [
      {
        "name": "_l2Token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_recipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_l2Gas",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "BridgeExecuted",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "target",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeStatusUpdated",
    "inputs": [
      {
        "name": "active",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeTargetUpdated",
    "inputs": [
      {
        "name": "oldTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newTarget",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitReset",
    "inputs": [
      {
        "name": "day",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "previousUsed",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DailyLimitUpdated",
    "inputs": [
      {
        "name": "oldLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OptimismConfigUpdated",
    "inputs": [
      {
        "name": "l2Token",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "recipient",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "l2Gas",
        "type": "uint32",
        "indexed": false,
        "internalType": "uint32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeCallFailed",
    "inputs": [
      {
        "name": "reason",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeNotActive",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExcessiveAmount",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ReentrancyGuardReentrantCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeERC20FailedOperation",
    "inputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnauthorizedCaller",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAmount",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OptimismBridgeProxy {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234610039576100236100146101b3565b96959095949194939293610339565b61002b61003e565b6123de610a0682396123de90f35b610044565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007090610048565b810190811060018060401b0382111761008857604052565b610052565b906100a061009961003e565b9283610066565b565b5f80fd5b60018060a01b031690565b6100ba906100a6565b90565b6100c6816100b1565b036100cd57565b5f80fd5b905051906100de826100bd565b565b90565b6100ec816100e0565b036100f357565b5f80fd5b90505190610104826100e3565b565b63ffffffff1690565b61011881610106565b0361011f57565b5f80fd5b905051906101308261010f565b565b9190610100838203126101ae5761014b815f85016100d1565b9261015982602083016100d1565b9261016783604084016100d1565b9261017581606085016100f7565b9261018382608083016100f7565b926101ab6101948460a085016100d1565b936101a28160c086016100d1565b9360e001610123565b90565b6100a2565b6101d1612de4803803806101c68161008d565b928339810190610132565b9091929394959697565b60018060401b0381116101f7576101f3602091610048565b0190565b610052565b9061020e610209836101db565b61008d565b918252565b5f7f4f7074696d69736d204272696467650000000000000000000000000000000000910152565b610244600f6101fc565b9061025160208301610213565b565b61025b61023a565b90565b5f1b90565b9061027460018060a01b039161025e565b9181191691161790565b90565b61029561029061029a926100a6565b61027e565b6100a6565b90565b6102a690610281565b90565b6102b29061029d565b90565b90565b906102cd6102c86102d4926102a9565b6102b5565b8254610263565b9055565b60a01b90565b906102f063ffffffff60a01b916102d8565b9181191691161790565b61030e61030961031392610106565b61027e565b610106565b90565b90565b9061032e610329610335926102fa565b610316565b82546102de565b9055565b906103749796946103669461036d979461035f9493610356610253565b91929394610742565b60086102b8565b60096102b8565b6009610319565b565b90565b61038d61038861039292610376565b61027e565b6100a6565b90565b61039e90610379565b90565b5f0190565b90565b6103bd6103b86103c292610376565b61025e565b6103a6565b90565b6103ce5f6103a9565b90565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b5190565b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610451575b602083101461044c57565b61041d565b91607f1691610441565b5f5260205f2090565b601f602091010490565b1b90565b9190600861048d9102916104875f198461046e565b9261046e565b9181191691161790565b6104ab6104a66104b0926100e0565b61027e565b6100e0565b90565b90565b91906104cc6104c76104d493610497565b6104b3565b908354610472565b9055565b5f90565b6104ee916104e86104d8565b916104b6565b565b5b8181106104fc575050565b806105095f6001936104dc565b016104f1565b9190601f811161051f575b505050565b61052b6105509361045b565b90602061053784610464565b83019310610558575b61054990610464565b01906104f0565b5f808061051a565b915061054981929050610540565b1c90565b9061057a905f1990600802610566565b191690565b816105899161056a565b906002021790565b9061059b81610419565b9060018060401b038211610659576105bd826105b78554610431565b8561050f565b602090601f83116001146105f1579180916105e0935f926105e5575b505061057f565b90555b565b90915001515f806105d9565b601f198316916106008561045b565b925f5b81811061064157509160029391856001969410610627575b505050020190556105e3565b610637910151601f84169061056a565b90555f808061061b565b91936020600181928787015181550195019201610603565b610052565b9061066891610591565b565b906106765f199161025e565b9181191691161790565b9061069561069061069c92610497565b6104b3565b825461066a565b9055565b906106af60ff60a01b916102d8565b9181191691161790565b151590565b6106c7906106b9565b90565b90565b906106e26106dd6106e9926106be565b6106ca565b82546106a0565b9055565b90565b6107046106ff610709926106ed565b61027e565b6100e0565b90565b634e487b7160e01b5f52601260045260245ffd5b61072c610732916100e0565b916100e0565b90811561073d570490565b61070c565b909493919261074f61086e565b8161076a61076461075f5f610395565b6100b1565b916100b1565b148015610820575b610804576107c16107cf946107b96107d6986107ab6107c89661079d6107966103c5565b82906108f4565b506107a66103d1565b6108f4565b506107b46103f5565b6108f4565b50600761065e565b60026102b8565b6003610680565b6004610680565b6107e2600160026106cd565b6108026107fb426107f5620151806106f0565b90610720565b6006610680565b565b5f63d92e233d60e01b81528061081c600482016103a1565b0390fd5b508561083c6108366108315f610395565b6100b1565b916100b1565b14610772565b90565b61085961085461085e92610842565b61027e565b6100e0565b90565b61086b6001610845565b90565b610880610879610861565b6001610680565b565b5f90565b61088f906103a6565b90565b9061089c90610886565b5f5260205260405f2090565b906108b2906102a9565b5f5260205260405f2090565b906108ca60ff9161025e565b9181191691161790565b906108e96108e46108f0926106be565b6106ca565b82546108be565b9055565b6108fc610882565b5061091161090b8284906109cb565b156106b9565b5f146109995761093860016109335f61092b818690610892565b0185906108a8565b6108d4565b906109416109f8565b9061097e6109786109727f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610886565b926102a9565b926102a9565b9261098761003e565b80610991816103a1565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b6109b66109bb9161099f565b6109a4565b90565b6109c890546109aa565b90565b6109f1915f6109e66109ec936109df610882565b5082610892565b016108a8565b6109be565b90565b5f90565b610a006109f4565b50339056fe60806040526004361015610013575b611000565b61001d5f356101ec565b806301ffc9a7146101e75780631033b4cc146101e2578063118c38c7146101dd5780631259a5c8146101d857806318b68b8c146101d3578063248a9ca3146101ce5780632f2ff15d146101c957806332d4f504146101c45780633462fac3146101bf57806336568abe146101ba57806336b089d8146101b55780633cbb6979146101b057806356eff267146101ab5780635ab1d61c146101a657806361b0a56e146101a1578063632214901461019c57806365d7a3c91461019757806366d003ac1461019257806367eeba0c1461018d5780636bcc8c141461018857806385931b741461018357806391d148541461017e578063a217fddf14610179578063b20d30a914610174578063c9f5b63e1461016f578063d547741f1461016a578063ead93c8f14610165578063ede7cebd146101605763fb8c4b510361000e57610fc8565b610f5e565b610ef4565b610e84565b610e4f565b610e0d565b610dd8565b610d67565b610d33565b610ca3565b610c50565b610c0c565b610bc8565b6109a8565b610956565b6108e9565b610873565b6107e9565b610760565b61071d565b6106e8565b610681565b6105f8565b610596565b61051e565b6103ea565b6103a6565b61031d565b610278565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61021981610204565b0361022057565b5f80fd5b9050359061023182610210565b565b9060208282031261024c57610249915f01610224565b90565b6101fc565b151590565b61025f90610251565b9052565b9190610276905f60208501940190610256565b565b346102a8576102a461029361028e366004610233565b611008565b61029b6101f2565b91829182610263565b0390f35b6101f8565b5f9103126102b757565b6101fc565b1c90565b90565b6102d39060086102d893026102bc565b6102c0565b90565b906102e691546102c3565b90565b6102f560055f906102db565b90565b90565b610304906102f8565b9052565b919061031b905f602085019401906102fb565b565b3461034d5761032d3660046102ad565b6103496103386102e9565b6103406101f2565b91829182610308565b0390f35b6101f8565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61037e610352565b90565b90565b61038d90610381565b9052565b91906103a4905f60208501940190610384565b565b346103d6576103b63660046102ad565b6103d26103c1610376565b6103c96101f2565b91829182610391565b0390f35b6101f8565b6103e760065f906102db565b90565b3461041a576103fa3660046102ad565b6104166104056103db565b61040d6101f2565b91829182610308565b0390f35b6101f8565b60018060a01b031690565b6104339061041f565b90565b61043f8161042a565b0361044657565b5f80fd5b9050359061045782610436565b565b610462816102f8565b0361046957565b5f80fd5b9050359061047a82610459565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104c25781359167ffffffffffffffff83116104bd5760200192600183028401116104b857565b610484565b610480565b61047c565b91606083830312610514576104de825f850161044a565b926104ec836020830161046d565b92604082013567ffffffffffffffff811161050f5761050b9201610488565b9091565b610200565b6101fc565b5f0190565b346105505761053a6105313660046104c7565b92919091611436565b6105426101f2565b8061054c81610519565b0390f35b6101f8565b61055e81610381565b0361056557565b5f80fd5b9050359061057682610555565b565b906020828203126105915761058e915f01610569565b90565b6101fc565b346105c6576105c26105b16105ac366004610578565b61148e565b6105b96101f2565b91829182610391565b0390f35b6101f8565b91906040838203126105f357806105e76105f0925f8601610569565b9360200161044a565b90565b6101fc565b346106275761061161060b3660046105cb565b906114d9565b6106196101f2565b8061062381610519565b0390f35b6101f8565b6106359061042a565b9052565b63ffffffff1690565b61064b90610639565b9052565b60409061067861067f949695939661066e60608401985f85019061062c565b602083019061062c565b0190610642565b565b346106b4576106913660046102ad565b6106b061069c61150e565b6106a79391936101f2565b9384938461064f565b0390f35b6101f8565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b6106e56106b9565b90565b34610718576106f83660046102ad565b6107146107036106dd565b61070b6101f2565b91829182610391565b0390f35b6101f8565b3461074c576107366107303660046105cb565b9061154e565b61073e6101f2565b8061074881610519565b0390f35b6101f8565b61075d60035f906102db565b90565b34610790576107703660046102ad565b61078c61077b610751565b6107836101f2565b91829182610308565b0390f35b6101f8565b63ffffffff1690565b6107ae9060086107b393026102bc565b610795565b90565b906107c1915461079e565b90565b6107d160096014906107b6565b90565b91906107e7905f60208501940190610642565b565b34610819576107f93660046102ad565b6108156108046107c4565b61080c6101f2565b918291826107d4565b0390f35b6101f8565b60018060a01b031690565b61083990600861083e93026102bc565b61081e565b90565b9061084c9154610829565b90565b61085b60085f90610841565b90565b9190610871905f6020850194019061062c565b565b346108a3576108833660046102ad565b61089f61088e61084f565b6108966101f2565b9182918261085e565b0390f35b6101f8565b6108b181610251565b036108b857565b5f80fd5b905035906108c9826108a8565b565b906020828203126108e4576108e1915f016108bc565b90565b6101fc565b34610917576109016108fc3660046108cb565b611645565b6109096101f2565b8061091381610519565b0390f35b6101f8565b90916060828403126109515761094e610937845f850161044a565b93610945816020860161046d565b9360400161044a565b90565b6101fc565b346109855761096f61096936600461091c565b916116c1565b6109776101f2565b8061098181610519565b0390f35b6101f8565b906020828203126109a3576109a0915f0161046d565b90565b6101fc565b346109d6576109c06109bb36600461098a565b6116f6565b6109c86101f2565b806109d281610519565b0390f35b6101f8565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610a22575b6020831014610a1d57565b6109ee565b91607f1691610a12565b60209181520190565b5f5260205f2090565b905f9291805490610a58610a5183610a02565b8094610a2c565b916001811690815f14610aaf5750600114610a73575b505050565b610a809192939450610a35565b915f925b818410610a9757505001905f8080610a6e565b60018160209295939554848601520191019290610a84565b92949550505060ff19168252151560200201905f8080610a6e565b90610ad491610a3e565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610aff90610ad7565b810190811067ffffffffffffffff821117610b1957604052565b610ae1565b90610b3e610b3792610b2e6101f2565b93848092610aca565b0383610af5565b565b905f10610b5357610b5090610b1e565b90565b6109db565b610b6460075f90610b40565b90565b5190565b60209181520190565b90825f9392825e0152565b610b9e610ba7602093610bac93610b9581610b67565b93848093610b6b565b95869101610b74565b610ad7565b0190565b610bc59160208201915f818403910152610b7f565b90565b34610bf857610bd83660046102ad565b610bf4610be3610b58565b610beb6101f2565b91829182610bb0565b0390f35b6101f8565b610c0960095f90610841565b90565b34610c3c57610c1c3660046102ad565b610c38610c27610bfd565b610c2f6101f2565b9182918261085e565b0390f35b6101f8565b610c4d60045f906102db565b90565b34610c8057610c603660046102ad565b610c7c610c6b610c41565b610c736101f2565b91829182610308565b0390f35b6101f8565b90602082820312610c9e57610c9b915f0161044a565b90565b6101fc565b34610cd157610cbb610cb6366004610c85565b6117f7565b610cc36101f2565b80610ccd81610519565b0390f35b6101f8565b610cdf81610639565b03610ce657565b5f80fd5b90503590610cf782610cd6565b565b9091606082840312610d2e57610d2b610d14845f850161044a565b93610d22816020860161044a565b93604001610cea565b90565b6101fc565b34610d6257610d4c610d46366004610cf9565b916118dc565b610d546101f2565b80610d5e81610519565b0390f35b6101f8565b34610d9857610d94610d83610d7d3660046105cb565b90611920565b610d8b6101f2565b91829182610263565b0390f35b6101f8565b90565b5f1b90565b610db9610db4610dbe92610d9d565b610da0565b610381565b90565b610dca5f610da5565b90565b610dd5610dc1565b90565b34610e0857610de83660046102ad565b610e04610df3610dcd565b610dfb6101f2565b91829182610391565b0390f35b6101f8565b34610e3b57610e25610e2036600461098a565b6119d8565b610e2d6101f2565b80610e3781610519565b0390f35b6101f8565b610e4c60025f90610841565b90565b34610e7f57610e5f3660046102ad565b610e7b610e6a610e40565b610e726101f2565b9182918261085e565b0390f35b6101f8565b34610eb357610e9d610e973660046105cb565b90611a0d565b610ea56101f2565b80610eaf81610519565b0390f35b6101f8565b60ff1690565b610ece906008610ed393026102bc565b610eb8565b90565b90610ee19154610ebe565b90565b610ef16002601490610ed6565b90565b34610f2457610f043660046102ad565b610f20610f0f610ee4565b610f176101f2565b91829182610263565b0390f35b6101f8565b604090610f55610f4a610f5c9597969460608401908482035f860152610b7f565b96602083019061062c565b0190610256565b565b34610f9157610f6e3660046102ad565b610f8d610f79611a2a565b610f849391936101f2565b93849384610f29565b0390f35b6101f8565b604090610fbf610fc69496959396610fb560608401985f8501906102fb565b60208301906102fb565b01906102fb565b565b34610ffb57610fd83660046102ad565b610ff7610fe3611a93565b610fee9391936101f2565b93849384610f96565b0390f35b6101f8565b5f80fd5b5f90565b611010611004565b508061102b611025637965db0b60e01b610204565b91610204565b14908115611038575b5090565b6110429150611b21565b5f611034565b9061105c939291611057611b73565b61108d565b611064611bf7565b565b60a01c90565b61107861107d91611066565b610eb8565b90565b61108a905461106c565b90565b9291906110a361109d6002611080565b15610251565b6110b2576110b0936110ce565b565b5f633df5105960e11b8152806110ca60048201610519565b0390fd5b9291906110ec6110e66110df6106b9565b3390611920565b15610251565b6110fb576110f99361128b565b565b5f635c427cd960e01b81528061111360048201610519565b0390fd5b90565b61112e61112961113392610d9d565b611117565b61041f565b90565b61113f9061111a565b90565b61115661115161115b92610d9d565b611117565b6102f8565b90565b5f1c90565b61116f6111749161115e565b6102c0565b90565b6111819054611163565b90565b634e487b7160e01b5f52601160045260245ffd5b6111a76111ad919392936102f8565b926102f8565b82018092116111b857565b611184565b6111d16111cc6111d69261041f565b611117565b61041f565b90565b6111e2906111bd565b90565b6111ee906111d9565b90565b6111fa906111bd565b90565b611206906111f1565b90565b906112155f1991610da0565b9181191691161790565b61123361122e611238926102f8565b611117565b6102f8565b90565b90565b9061125361124e61125a9261121f565b61123b565b8254611209565b9055565b61126a61126f9161115e565b61081e565b90565b61127c905461125e565b90565b611288906111f1565b90565b91929092826112aa6112a461129f5f611136565b61042a565b9161042a565b1461141a57836112c26112bc5f611142565b916102f8565b146113fe57836112e36112dd6112d86003611177565b6102f8565b916102f8565b116113e2576112f0611c60565b6113046112fd6005611177565b8590611198565b61131f6113196113146004611177565b6102f8565b916102f8565b116113c65761135191611346611334856111e5565b3361133e306111fd565b908892611d63565b839185909192611f44565b61136e611367836113626005611177565b611198565b600561123e565b6113786002611272565b906113c16113af6113a97f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e89361127f565b9361127f565b936113b86101f2565b91829182610308565b0390a3565b5f631c345a2f60e21b8152806113de60048201610519565b0390fd5b5f631c345a2f60e21b8152806113fa60048201610519565b0390fd5b5f631f2a200560e01b81528061141660048201610519565b0390fd5b5f63d92e233d60e01b81528061143260048201610519565b0390fd5b90611442939291611048565b565b5f90565b61145190610381565b90565b9061145e90611448565b5f5260205260405f2090565b90565b61147961147e9161115e565b61146a565b90565b61148b905461146d565b90565b60016114a66114ac9261149f611444565b505f611454565b01611481565b90565b906114ca916114c56114c08261148e565b6120db565b6114cc565b565b906114d691612125565b50565b906114e3916114af565b565b5f90565b5f90565b6114f96114fe91611066565b610795565b90565b61150b90546114ed565b90565b6115166114e5565b5061151f6114e5565b506115286114e9565b506115336008611272565b61153d6009611272565b916115486009611501565b91929190565b908061156961156361155e6121d0565b61042a565b9161042a565b0361157a57611577916121dd565b50565b5f63334bd91960e11b81528061159260048201610519565b0390fd5b6115af906115aa6115a5610352565b6120db565b6115ff565b565b60a01b90565b906115c660ff60a01b916115b1565b9181191691161790565b6115d990610251565b90565b90565b906115f46115ef6115fb926115d0565b6115dc565b82546115b7565b9055565b61160a8160026115df565b6116407fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d5916116376101f2565b91829182610263565b0390a1565b61164e90611596565b565b9061166b9291611666611661610dc1565b6120db565b61166d565b565b91908161168a61168461167f5f611136565b61042a565b9161042a565b146116a55761169b6116a3936111e5565b91909161227e565b565b5f63d92e233d60e01b8152806116bd60048201610519565b0390fd5b906116cc9291611650565b565b6116e7906116e26116dd610352565b6120db565b6116e9565b565b6116f490600361123e565b565b6116ff906116ce565b565b61171a90611715611710610352565b6120db565b61175a565b565b9061172d60018060a01b0391610da0565b9181191691161790565b90565b9061174f61174a6117569261127f565b611737565b825461171c565b9055565b8061177561176f61176a5f611136565b61042a565b9161042a565b146117db576117846002611272565b61178f82600261173a565b906117c36117bd7fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd1082980699361127f565b9161127f565b916117cc6101f2565b806117d681610519565b0390a3565b5f63d92e233d60e01b8152806117f360048201610519565b0390fd5b61180090611701565b565b9061181d9291611818611813610352565b6120db565b61187a565b565b9061183163ffffffff60a01b916115b1565b9181191691161790565b61184f61184a61185492610639565b611117565b610639565b90565b90565b9061186f61186a6118769261183b565b611857565b825461181f565b9055565b91909161188881600861173a565b61189383600961173a565b61189e82600961185a565b9190916118d77f802b8c7b24709b6c9c56179dceeb977cc7ac6fa4f15f84c99a8627abfd97cc35936118ce6101f2565b9384938461064f565b0390a1565b906118e79291611802565b565b906118f39061127f565b5f5260205260405f2090565b61190b6119109161115e565b610eb8565b90565b61191d90546118ff565b90565b611946915f61193b61194193611934611004565b5082611454565b016118e9565b611913565b90565b6119629061195d611958610352565b6120db565b611987565b565b91602061198592949361197e60408201965f8301906102fb565b01906102fb565b565b6119916004611177565b61199c82600461123e565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf916119d36119ca6101f2565b92839283611964565b0390a1565b6119e190611949565b565b906119fe916119f96119f48261148e565b6120db565b611a00565b565b90611a0a916121dd565b50565b90611a17916119e3565b565b606090565b611a2790610b1e565b90565b611a32611a19565b50611a3b6114e5565b50611a44611004565b506007611a516002611272565b91611a65611a5f6002611080565b92611a1e565b929190565b5f90565b611a7d611a83919392936102f8565b926102f8565b8203918211611a8e57565b611184565b611a9b611a6a565b50611aa4611a6a565b50611aad611a6a565b50611ab86005611177565b611ac26004611177565b91611acd6004611177565b611ae8611ae2611add6005611177565b6102f8565b916102f8565b115f14611b1357611b0c611afc6004611177565b611b066005611177565b90611a6e565b5b91929190565b611b1c5f611142565b611b0d565b611b29611004565b50611b43611b3d6301ffc9a760e01b610204565b91610204565b1490565b90565b611b5e611b59611b6392611b47565b611117565b6102f8565b90565b611b706002611b4a565b90565b611b7d6001611177565b611b96611b90611b8b611b66565b6102f8565b916102f8565b14611baf57611bad611ba6611b66565b600161123e565b565b5f633ee5aeb560e01b815280611bc760048201610519565b0390fd5b90565b611be2611bdd611be792611bcb565b611117565b6102f8565b90565b611bf46001611bce565b90565b611c09611c02611bea565b600161123e565b565b90565b611c22611c1d611c2792611c0b565b611117565b6102f8565b90565b634e487b7160e01b5f52601260045260245ffd5b611c4a611c50916102f8565b916102f8565b908115611c5b570490565b611c2a565b611c7642611c7062015180611c0e565b90611c3e565b80611c92611c8c611c876006611177565b6102f8565b916102f8565b11611c9b575b50565b80611cfd91611caa6005611177565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab91611ce0611cd76101f2565b92839283611964565b0390a1611cf6611cef5f611142565b600561123e565b600661123e565b5f611c98565b611d0c906111f1565b90565b60e01b90565b611d29611d24611d2e92610639565b611d0f565b610204565b90565b604090611d5a611d619496959396611d5060608401985f85019061062c565b602083019061062c565b01906102fb565b565b600492611d9d611db19593611dac9394611d846323b872dd92949192611d15565b93611d8d6101f2565b9788956020870190815201611d31565b60208201810382520383610af5565b6122cc565b565b5090565b611dc09061041f565b90565b611dcc81611db7565b03611dd357565b5f80fd5b90503590611de482611dc3565b565b9190604083820312611e0e5780611e02611e0b925f8601611dd7565b93602001610cea565b90565b6101fc565b611e1c906111f1565b90565b611e2e611e3491939293611e13565b9261183b565b90565b5f80fd5b90505190611e48826108a8565b565b90602082820312611e6357611e60915f01611e3b565b90565b6101fc565b916020611e89929493611e8260408201965f83019061062c565b01906102fb565b565b611e936101f2565b3d5f823e3d90fd5b611ea4906111bd565b90565b611eb090611e9b565b90565b611ebc906111f1565b90565b5f910312611ec957565b6101fc565b60209181520190565b611ee25f8092611ece565b0190565b92611f41959194611f20611f2a92611f16611f3496611f0c60c08a019a5f8b019061062c565b602089019061062c565b604087019061062c565b60608501906102fb565b6080830190610642565b60a0818303910152611ed7565b90565b929091611f52818390611db3565b611f64611f5e5f611142565b916102f8565b115f146120be57611f8291611f7c9190810190611de6565b90611e1f565b92905b9290611f98611f93826111e5565b611d03565b602063095ea7b391611faa6002611272565b90611fc85f8895611fd3611fbc6101f2565b97889687958694611d0f565b845260048401611e68565b03925af180156120b95761208d575b50611ffd611ff8611ff36002611272565b611ea7565b611eb3565b9063838b2520909261200f6008611272565b95949091833b156120885761204561203a935f9793889461202e6101f2565b9a8b998a988997611d0f565b875260048701611ee6565b03925af1801561208357612057575b50565b612076905f3d811161207c575b61206e8183610af5565b810190611ebf565b5f612054565b503d612064565b611e8b565b611e37565b6120ad9060203d81116120b2575b6120a58183610af5565b810190611e4a565b611fe2565b503d61209b565b611e8b565b50506120ca6009611272565b916120d56009611501565b92611f85565b6120ed906120e76121d0565b906123a3565b565b906120fb60ff91610da0565b9181191691161790565b9061211a612115612121926115d0565b6115dc565b82546120ef565b9055565b61212d611004565b5061214261213c828490611920565b15610251565b5f146121ca5761216960016121645f61215c818690611454565b0185906118e9565b612105565b906121726121d0565b906121af6121a96121a37f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611448565b9261127f565b9261127f565b926121b86101f2565b806121c281610519565b0390a4600190565b50505f90565b6121d86114e5565b503390565b6121e5611004565b506121f1818390611920565b5f14612278576122175f6122125f61220a818690611454565b0185906118e9565b612105565b906122206121d0565b9061225d6122576122517ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611448565b9261127f565b9261127f565b926122666101f2565b8061227081610519565b0390a4600190565b50505f90565b906122c56122ca936122b66004949361229d63a9059cbb919391611d15565b926122a66101f2565b9687946020860190815201611e68565b60208201810382520383610af5565b6122cc565b565b905f6020916122d9611a6a565b506122e2611a6a565b50828151910182855af115612375573d5f51906123076123015f611142565b916102f8565b145f1461235b575061231881611d03565b3b61232b6123255f611142565b916102f8565b145b6123345750565b61234061235791611d03565b5f918291635274afe760e01b83526004830161085e565b0390fd5b61236e6123686001611bce565b916102f8565b141561232d565b6040513d5f823e3d90fd5b9160206123a192949361239a60408201965f83019061062c565b0190610384565b565b906123b86123b2838390611920565b15610251565b6123c0575050565b6123da5f92839263e2517d3f60e01b845260048401612380565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\09Wa\0#a\0\x14a\x01\xB3V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x039V[a\0+a\0>V[a#\xDEa\n\x06\x829a#\xDE\x90\xF3[a\0DV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0p\x90a\0HV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x88W`@RV[a\0RV[\x90a\0\xA0a\0\x99a\0>V[\x92\x83a\0fV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xBA\x90a\0\xA6V[\x90V[a\0\xC6\x81a\0\xB1V[\x03a\0\xCDWV[_\x80\xFD[\x90PQ\x90a\0\xDE\x82a\0\xBDV[V[\x90V[a\0\xEC\x81a\0\xE0V[\x03a\0\xF3WV[_\x80\xFD[\x90PQ\x90a\x01\x04\x82a\0\xE3V[V[c\xFF\xFF\xFF\xFF\x16\x90V[a\x01\x18\x81a\x01\x06V[\x03a\x01\x1FWV[_\x80\xFD[\x90PQ\x90a\x010\x82a\x01\x0FV[V[\x91\x90a\x01\0\x83\x82\x03\x12a\x01\xAEWa\x01K\x81_\x85\x01a\0\xD1V[\x92a\x01Y\x82` \x83\x01a\0\xD1V[\x92a\x01g\x83`@\x84\x01a\0\xD1V[\x92a\x01u\x81``\x85\x01a\0\xF7V[\x92a\x01\x83\x82`\x80\x83\x01a\0\xF7V[\x92a\x01\xABa\x01\x94\x84`\xA0\x85\x01a\0\xD1V[\x93a\x01\xA2\x81`\xC0\x86\x01a\0\xD1V[\x93`\xE0\x01a\x01#V[\x90V[a\0\xA2V[a\x01\xD1a-\xE4\x808\x03\x80a\x01\xC6\x81a\0\x8DV[\x92\x839\x81\x01\x90a\x012V[\x90\x91\x92\x93\x94\x95\x96\x97V[`\x01\x80`@\x1B\x03\x81\x11a\x01\xF7Wa\x01\xF3` \x91a\0HV[\x01\x90V[a\0RV[\x90a\x02\x0Ea\x02\t\x83a\x01\xDBV[a\0\x8DV[\x91\x82RV[_\x7FOptimism Bridge\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02D`\x0Fa\x01\xFCV[\x90a\x02Q` \x83\x01a\x02\x13V[V[a\x02[a\x02:V[\x90V[_\x1B\x90V[\x90a\x02t`\x01\x80`\xA0\x1B\x03\x91a\x02^V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x02\x95a\x02\x90a\x02\x9A\x92a\0\xA6V[a\x02~V[a\0\xA6V[\x90V[a\x02\xA6\x90a\x02\x81V[\x90V[a\x02\xB2\x90a\x02\x9DV[\x90V[\x90V[\x90a\x02\xCDa\x02\xC8a\x02\xD4\x92a\x02\xA9V[a\x02\xB5V[\x82Ta\x02cV[\x90UV[`\xA0\x1B\x90V[\x90a\x02\xF0c\xFF\xFF\xFF\xFF`\xA0\x1B\x91a\x02\xD8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x0Ea\x03\ta\x03\x13\x92a\x01\x06V[a\x02~V[a\x01\x06V[\x90V[\x90V[\x90a\x03.a\x03)a\x035\x92a\x02\xFAV[a\x03\x16V[\x82Ta\x02\xDEV[\x90UV[\x90a\x03t\x97\x96\x94a\x03f\x94a\x03m\x97\x94a\x03_\x94\x93a\x03Va\x02SV[\x91\x92\x93\x94a\x07BV[`\x08a\x02\xB8V[`\ta\x02\xB8V[`\ta\x03\x19V[V[\x90V[a\x03\x8Da\x03\x88a\x03\x92\x92a\x03vV[a\x02~V[a\0\xA6V[\x90V[a\x03\x9E\x90a\x03yV[\x90V[_\x01\x90V[\x90V[a\x03\xBDa\x03\xB8a\x03\xC2\x92a\x03vV[a\x02^V[a\x03\xA6V[\x90V[a\x03\xCE_a\x03\xA9V[\x90V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04QW[` \x83\x10\x14a\x04LWV[a\x04\x1DV[\x91`\x7F\x16\x91a\x04AV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x04\x8D\x91\x02\x91a\x04\x87_\x19\x84a\x04nV[\x92a\x04nV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xABa\x04\xA6a\x04\xB0\x92a\0\xE0V[a\x02~V[a\0\xE0V[\x90V[\x90V[\x91\x90a\x04\xCCa\x04\xC7a\x04\xD4\x93a\x04\x97V[a\x04\xB3V[\x90\x83Ta\x04rV[\x90UV[_\x90V[a\x04\xEE\x91a\x04\xE8a\x04\xD8V[\x91a\x04\xB6V[V[[\x81\x81\x10a\x04\xFCWPPV[\x80a\x05\t_`\x01\x93a\x04\xDCV[\x01a\x04\xF1V[\x91\x90`\x1F\x81\x11a\x05\x1FW[PPPV[a\x05+a\x05P\x93a\x04[V[\x90` a\x057\x84a\x04dV[\x83\x01\x93\x10a\x05XW[a\x05I\x90a\x04dV[\x01\x90a\x04\xF0V[_\x80\x80a\x05\x1AV[\x91Pa\x05I\x81\x92\x90Pa\x05@V[\x1C\x90V[\x90a\x05z\x90_\x19\x90`\x08\x02a\x05fV[\x19\x16\x90V[\x81a\x05\x89\x91a\x05jV[\x90`\x02\x02\x17\x90V[\x90a\x05\x9B\x81a\x04\x19V[\x90`\x01\x80`@\x1B\x03\x82\x11a\x06YWa\x05\xBD\x82a\x05\xB7\x85Ta\x041V[\x85a\x05\x0FV[` \x90`\x1F\x83\x11`\x01\x14a\x05\xF1W\x91\x80\x91a\x05\xE0\x93_\x92a\x05\xE5W[PPa\x05\x7FV[\x90U[V[\x90\x91P\x01Q_\x80a\x05\xD9V[`\x1F\x19\x83\x16\x91a\x06\0\x85a\x04[V[\x92_[\x81\x81\x10a\x06AWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x06'W[PPP\x02\x01\x90Ua\x05\xE3V[a\x067\x91\x01Q`\x1F\x84\x16\x90a\x05jV[\x90U_\x80\x80a\x06\x1BV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x06\x03V[a\0RV[\x90a\x06h\x91a\x05\x91V[V[\x90a\x06v_\x19\x91a\x02^V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x06\x95a\x06\x90a\x06\x9C\x92a\x04\x97V[a\x04\xB3V[\x82Ta\x06jV[\x90UV[\x90a\x06\xAF`\xFF`\xA0\x1B\x91a\x02\xD8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x06\xC7\x90a\x06\xB9V[\x90V[\x90V[\x90a\x06\xE2a\x06\xDDa\x06\xE9\x92a\x06\xBEV[a\x06\xCAV[\x82Ta\x06\xA0V[\x90UV[\x90V[a\x07\x04a\x06\xFFa\x07\t\x92a\x06\xEDV[a\x02~V[a\0\xE0V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x07,a\x072\x91a\0\xE0V[\x91a\0\xE0V[\x90\x81\x15a\x07=W\x04\x90V[a\x07\x0CV[\x90\x94\x93\x91\x92a\x07Oa\x08nV[\x81a\x07ja\x07da\x07__a\x03\x95V[a\0\xB1V[\x91a\0\xB1V[\x14\x80\x15a\x08 W[a\x08\x04Wa\x07\xC1a\x07\xCF\x94a\x07\xB9a\x07\xD6\x98a\x07\xABa\x07\xC8\x96a\x07\x9Da\x07\x96a\x03\xC5V[\x82\x90a\x08\xF4V[Pa\x07\xA6a\x03\xD1V[a\x08\xF4V[Pa\x07\xB4a\x03\xF5V[a\x08\xF4V[P`\x07a\x06^V[`\x02a\x02\xB8V[`\x03a\x06\x80V[`\x04a\x06\x80V[a\x07\xE2`\x01`\x02a\x06\xCDV[a\x08\x02a\x07\xFBBa\x07\xF5b\x01Q\x80a\x06\xF0V[\x90a\x07 V[`\x06a\x06\x80V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x08\x1C`\x04\x82\x01a\x03\xA1V[\x03\x90\xFD[P\x85a\x08<a\x086a\x081_a\x03\x95V[a\0\xB1V[\x91a\0\xB1V[\x14a\x07rV[\x90V[a\x08Ya\x08Ta\x08^\x92a\x08BV[a\x02~V[a\0\xE0V[\x90V[a\x08k`\x01a\x08EV[\x90V[a\x08\x80a\x08ya\x08aV[`\x01a\x06\x80V[V[_\x90V[a\x08\x8F\x90a\x03\xA6V[\x90V[\x90a\x08\x9C\x90a\x08\x86V[_R` R`@_ \x90V[\x90a\x08\xB2\x90a\x02\xA9V[_R` R`@_ \x90V[\x90a\x08\xCA`\xFF\x91a\x02^V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08\xE9a\x08\xE4a\x08\xF0\x92a\x06\xBEV[a\x06\xCAV[\x82Ta\x08\xBEV[\x90UV[a\x08\xFCa\x08\x82V[Pa\t\x11a\t\x0B\x82\x84\x90a\t\xCBV[\x15a\x06\xB9V[_\x14a\t\x99Wa\t8`\x01a\t3_a\t+\x81\x86\x90a\x08\x92V[\x01\x85\x90a\x08\xA8V[a\x08\xD4V[\x90a\tAa\t\xF8V[\x90a\t~a\txa\tr\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x08\x86V[\x92a\x02\xA9V[\x92a\x02\xA9V[\x92a\t\x87a\0>V[\x80a\t\x91\x81a\x03\xA1V[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\t\xB6a\t\xBB\x91a\t\x9FV[a\t\xA4V[\x90V[a\t\xC8\x90Ta\t\xAAV[\x90V[a\t\xF1\x91_a\t\xE6a\t\xEC\x93a\t\xDFa\x08\x82V[P\x82a\x08\x92V[\x01a\x08\xA8V[a\t\xBEV[\x90V[_\x90V[a\n\0a\t\xF4V[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x10\0V[a\0\x1D_5a\x01\xECV[\x80c\x01\xFF\xC9\xA7\x14a\x01\xE7W\x80c\x103\xB4\xCC\x14a\x01\xE2W\x80c\x11\x8C8\xC7\x14a\x01\xDDW\x80c\x12Y\xA5\xC8\x14a\x01\xD8W\x80c\x18\xB6\x8B\x8C\x14a\x01\xD3W\x80c$\x8A\x9C\xA3\x14a\x01\xCEW\x80c//\xF1]\x14a\x01\xC9W\x80c2\xD4\xF5\x04\x14a\x01\xC4W\x80c4b\xFA\xC3\x14a\x01\xBFW\x80c6V\x8A\xBE\x14a\x01\xBAW\x80c6\xB0\x89\xD8\x14a\x01\xB5W\x80c<\xBBiy\x14a\x01\xB0W\x80cV\xEF\xF2g\x14a\x01\xABW\x80cZ\xB1\xD6\x1C\x14a\x01\xA6W\x80ca\xB0\xA5n\x14a\x01\xA1W\x80cc\"\x14\x90\x14a\x01\x9CW\x80ce\xD7\xA3\xC9\x14a\x01\x97W\x80cf\xD0\x03\xAC\x14a\x01\x92W\x80cg\xEE\xBA\x0C\x14a\x01\x8DW\x80ck\xCC\x8C\x14\x14a\x01\x88W\x80c\x85\x93\x1Bt\x14a\x01\x83W\x80c\x91\xD1HT\x14a\x01~W\x80c\xA2\x17\xFD\xDF\x14a\x01yW\x80c\xB2\r0\xA9\x14a\x01tW\x80c\xC9\xF5\xB6>\x14a\x01oW\x80c\xD5Gt\x1F\x14a\x01jW\x80c\xEA\xD9<\x8F\x14a\x01eW\x80c\xED\xE7\xCE\xBD\x14a\x01`Wc\xFB\x8CKQ\x03a\0\x0EWa\x0F\xC8V[a\x0F^V[a\x0E\xF4V[a\x0E\x84V[a\x0EOV[a\x0E\rV[a\r\xD8V[a\rgV[a\r3V[a\x0C\xA3V[a\x0CPV[a\x0C\x0CV[a\x0B\xC8V[a\t\xA8V[a\tVV[a\x08\xE9V[a\x08sV[a\x07\xE9V[a\x07`V[a\x07\x1DV[a\x06\xE8V[a\x06\x81V[a\x05\xF8V[a\x05\x96V[a\x05\x1EV[a\x03\xEAV[a\x03\xA6V[a\x03\x1DV[a\x02xV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02\x19\x81a\x02\x04V[\x03a\x02 WV[_\x80\xFD[\x90P5\x90a\x021\x82a\x02\x10V[V[\x90` \x82\x82\x03\x12a\x02LWa\x02I\x91_\x01a\x02$V[\x90V[a\x01\xFCV[\x15\x15\x90V[a\x02_\x90a\x02QV[\x90RV[\x91\x90a\x02v\x90_` \x85\x01\x94\x01\x90a\x02VV[V[4a\x02\xA8Wa\x02\xA4a\x02\x93a\x02\x8E6`\x04a\x023V[a\x10\x08V[a\x02\x9Ba\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xF3[a\x01\xF8V[_\x91\x03\x12a\x02\xB7WV[a\x01\xFCV[\x1C\x90V[\x90V[a\x02\xD3\x90`\x08a\x02\xD8\x93\x02a\x02\xBCV[a\x02\xC0V[\x90V[\x90a\x02\xE6\x91Ta\x02\xC3V[\x90V[a\x02\xF5`\x05_\x90a\x02\xDBV[\x90V[\x90V[a\x03\x04\x90a\x02\xF8V[\x90RV[\x91\x90a\x03\x1B\x90_` \x85\x01\x94\x01\x90a\x02\xFBV[V[4a\x03MWa\x03-6`\x04a\x02\xADV[a\x03Ia\x038a\x02\xE9V[a\x03@a\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x03~a\x03RV[\x90V[\x90V[a\x03\x8D\x90a\x03\x81V[\x90RV[\x91\x90a\x03\xA4\x90_` \x85\x01\x94\x01\x90a\x03\x84V[V[4a\x03\xD6Wa\x03\xB66`\x04a\x02\xADV[a\x03\xD2a\x03\xC1a\x03vV[a\x03\xC9a\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[a\x03\xE7`\x06_\x90a\x02\xDBV[\x90V[4a\x04\x1AWa\x03\xFA6`\x04a\x02\xADV[a\x04\x16a\x04\x05a\x03\xDBV[a\x04\ra\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x043\x90a\x04\x1FV[\x90V[a\x04?\x81a\x04*V[\x03a\x04FWV[_\x80\xFD[\x90P5\x90a\x04W\x82a\x046V[V[a\x04b\x81a\x02\xF8V[\x03a\x04iWV[_\x80\xFD[\x90P5\x90a\x04z\x82a\x04YV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04\xC2W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xBDW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xB8WV[a\x04\x84V[a\x04\x80V[a\x04|V[\x91``\x83\x83\x03\x12a\x05\x14Wa\x04\xDE\x82_\x85\x01a\x04JV[\x92a\x04\xEC\x83` \x83\x01a\x04mV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x0FWa\x05\x0B\x92\x01a\x04\x88V[\x90\x91V[a\x02\0V[a\x01\xFCV[_\x01\x90V[4a\x05PWa\x05:a\x0516`\x04a\x04\xC7V[\x92\x91\x90\x91a\x146V[a\x05Ba\x01\xF2V[\x80a\x05L\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x05^\x81a\x03\x81V[\x03a\x05eWV[_\x80\xFD[\x90P5\x90a\x05v\x82a\x05UV[V[\x90` \x82\x82\x03\x12a\x05\x91Wa\x05\x8E\x91_\x01a\x05iV[\x90V[a\x01\xFCV[4a\x05\xC6Wa\x05\xC2a\x05\xB1a\x05\xAC6`\x04a\x05xV[a\x14\x8EV[a\x05\xB9a\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[\x91\x90`@\x83\x82\x03\x12a\x05\xF3W\x80a\x05\xE7a\x05\xF0\x92_\x86\x01a\x05iV[\x93` \x01a\x04JV[\x90V[a\x01\xFCV[4a\x06'Wa\x06\x11a\x06\x0B6`\x04a\x05\xCBV[\x90a\x14\xD9V[a\x06\x19a\x01\xF2V[\x80a\x06#\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x065\x90a\x04*V[\x90RV[c\xFF\xFF\xFF\xFF\x16\x90V[a\x06K\x90a\x069V[\x90RV[`@\x90a\x06xa\x06\x7F\x94\x96\x95\x93\x96a\x06n``\x84\x01\x98_\x85\x01\x90a\x06,V[` \x83\x01\x90a\x06,V[\x01\x90a\x06BV[V[4a\x06\xB4Wa\x06\x916`\x04a\x02\xADV[a\x06\xB0a\x06\x9Ca\x15\x0EV[a\x06\xA7\x93\x91\x93a\x01\xF2V[\x93\x84\x93\x84a\x06OV[\x03\x90\xF3[a\x01\xF8V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x06\xE5a\x06\xB9V[\x90V[4a\x07\x18Wa\x06\xF86`\x04a\x02\xADV[a\x07\x14a\x07\x03a\x06\xDDV[a\x07\x0Ba\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[4a\x07LWa\x076a\x0706`\x04a\x05\xCBV[\x90a\x15NV[a\x07>a\x01\xF2V[\x80a\x07H\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x07]`\x03_\x90a\x02\xDBV[\x90V[4a\x07\x90Wa\x07p6`\x04a\x02\xADV[a\x07\x8Ca\x07{a\x07QV[a\x07\x83a\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[c\xFF\xFF\xFF\xFF\x16\x90V[a\x07\xAE\x90`\x08a\x07\xB3\x93\x02a\x02\xBCV[a\x07\x95V[\x90V[\x90a\x07\xC1\x91Ta\x07\x9EV[\x90V[a\x07\xD1`\t`\x14\x90a\x07\xB6V[\x90V[\x91\x90a\x07\xE7\x90_` \x85\x01\x94\x01\x90a\x06BV[V[4a\x08\x19Wa\x07\xF96`\x04a\x02\xADV[a\x08\x15a\x08\x04a\x07\xC4V[a\x08\x0Ca\x01\xF2V[\x91\x82\x91\x82a\x07\xD4V[\x03\x90\xF3[a\x01\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x089\x90`\x08a\x08>\x93\x02a\x02\xBCV[a\x08\x1EV[\x90V[\x90a\x08L\x91Ta\x08)V[\x90V[a\x08[`\x08_\x90a\x08AV[\x90V[\x91\x90a\x08q\x90_` \x85\x01\x94\x01\x90a\x06,V[V[4a\x08\xA3Wa\x08\x836`\x04a\x02\xADV[a\x08\x9Fa\x08\x8Ea\x08OV[a\x08\x96a\x01\xF2V[\x91\x82\x91\x82a\x08^V[\x03\x90\xF3[a\x01\xF8V[a\x08\xB1\x81a\x02QV[\x03a\x08\xB8WV[_\x80\xFD[\x90P5\x90a\x08\xC9\x82a\x08\xA8V[V[\x90` \x82\x82\x03\x12a\x08\xE4Wa\x08\xE1\x91_\x01a\x08\xBCV[\x90V[a\x01\xFCV[4a\t\x17Wa\t\x01a\x08\xFC6`\x04a\x08\xCBV[a\x16EV[a\t\ta\x01\xF2V[\x80a\t\x13\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[\x90\x91``\x82\x84\x03\x12a\tQWa\tNa\t7\x84_\x85\x01a\x04JV[\x93a\tE\x81` \x86\x01a\x04mV[\x93`@\x01a\x04JV[\x90V[a\x01\xFCV[4a\t\x85Wa\toa\ti6`\x04a\t\x1CV[\x91a\x16\xC1V[a\twa\x01\xF2V[\x80a\t\x81\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[\x90` \x82\x82\x03\x12a\t\xA3Wa\t\xA0\x91_\x01a\x04mV[\x90V[a\x01\xFCV[4a\t\xD6Wa\t\xC0a\t\xBB6`\x04a\t\x8AV[a\x16\xF6V[a\t\xC8a\x01\xF2V[\x80a\t\xD2\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\n\"W[` \x83\x10\x14a\n\x1DWV[a\t\xEEV[\x91`\x7F\x16\x91a\n\x12V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\nXa\nQ\x83a\n\x02V[\x80\x94a\n,V[\x91`\x01\x81\x16\x90\x81_\x14a\n\xAFWP`\x01\x14a\nsW[PPPV[a\n\x80\x91\x92\x93\x94Pa\n5V[\x91_\x92[\x81\x84\x10a\n\x97WPP\x01\x90_\x80\x80a\nnV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\n\x84V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\nnV[\x90a\n\xD4\x91a\n>V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xFF\x90a\n\xD7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\x19W`@RV[a\n\xE1V[\x90a\x0B>a\x0B7\x92a\x0B.a\x01\xF2V[\x93\x84\x80\x92a\n\xCAV[\x03\x83a\n\xF5V[V[\x90_\x10a\x0BSWa\x0BP\x90a\x0B\x1EV[\x90V[a\t\xDBV[a\x0Bd`\x07_\x90a\x0B@V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0B\x9Ea\x0B\xA7` \x93a\x0B\xAC\x93a\x0B\x95\x81a\x0BgV[\x93\x84\x80\x93a\x0BkV[\x95\x86\x91\x01a\x0BtV[a\n\xD7V[\x01\x90V[a\x0B\xC5\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0B\x7FV[\x90V[4a\x0B\xF8Wa\x0B\xD86`\x04a\x02\xADV[a\x0B\xF4a\x0B\xE3a\x0BXV[a\x0B\xEBa\x01\xF2V[\x91\x82\x91\x82a\x0B\xB0V[\x03\x90\xF3[a\x01\xF8V[a\x0C\t`\t_\x90a\x08AV[\x90V[4a\x0C<Wa\x0C\x1C6`\x04a\x02\xADV[a\x0C8a\x0C'a\x0B\xFDV[a\x0C/a\x01\xF2V[\x91\x82\x91\x82a\x08^V[\x03\x90\xF3[a\x01\xF8V[a\x0CM`\x04_\x90a\x02\xDBV[\x90V[4a\x0C\x80Wa\x0C`6`\x04a\x02\xADV[a\x0C|a\x0Cka\x0CAV[a\x0Csa\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[\x90` \x82\x82\x03\x12a\x0C\x9EWa\x0C\x9B\x91_\x01a\x04JV[\x90V[a\x01\xFCV[4a\x0C\xD1Wa\x0C\xBBa\x0C\xB66`\x04a\x0C\x85V[a\x17\xF7V[a\x0C\xC3a\x01\xF2V[\x80a\x0C\xCD\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x0C\xDF\x81a\x069V[\x03a\x0C\xE6WV[_\x80\xFD[\x90P5\x90a\x0C\xF7\x82a\x0C\xD6V[V[\x90\x91``\x82\x84\x03\x12a\r.Wa\r+a\r\x14\x84_\x85\x01a\x04JV[\x93a\r\"\x81` \x86\x01a\x04JV[\x93`@\x01a\x0C\xEAV[\x90V[a\x01\xFCV[4a\rbWa\rLa\rF6`\x04a\x0C\xF9V[\x91a\x18\xDCV[a\rTa\x01\xF2V[\x80a\r^\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[4a\r\x98Wa\r\x94a\r\x83a\r}6`\x04a\x05\xCBV[\x90a\x19 V[a\r\x8Ba\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xF3[a\x01\xF8V[\x90V[_\x1B\x90V[a\r\xB9a\r\xB4a\r\xBE\x92a\r\x9DV[a\r\xA0V[a\x03\x81V[\x90V[a\r\xCA_a\r\xA5V[\x90V[a\r\xD5a\r\xC1V[\x90V[4a\x0E\x08Wa\r\xE86`\x04a\x02\xADV[a\x0E\x04a\r\xF3a\r\xCDV[a\r\xFBa\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[4a\x0E;Wa\x0E%a\x0E 6`\x04a\t\x8AV[a\x19\xD8V[a\x0E-a\x01\xF2V[\x80a\x0E7\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x0EL`\x02_\x90a\x08AV[\x90V[4a\x0E\x7FWa\x0E_6`\x04a\x02\xADV[a\x0E{a\x0Eja\x0E@V[a\x0Era\x01\xF2V[\x91\x82\x91\x82a\x08^V[\x03\x90\xF3[a\x01\xF8V[4a\x0E\xB3Wa\x0E\x9Da\x0E\x976`\x04a\x05\xCBV[\x90a\x1A\rV[a\x0E\xA5a\x01\xF2V[\x80a\x0E\xAF\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[`\xFF\x16\x90V[a\x0E\xCE\x90`\x08a\x0E\xD3\x93\x02a\x02\xBCV[a\x0E\xB8V[\x90V[\x90a\x0E\xE1\x91Ta\x0E\xBEV[\x90V[a\x0E\xF1`\x02`\x14\x90a\x0E\xD6V[\x90V[4a\x0F$Wa\x0F\x046`\x04a\x02\xADV[a\x0F a\x0F\x0Fa\x0E\xE4V[a\x0F\x17a\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xF3[a\x01\xF8V[`@\x90a\x0FUa\x0FJa\x0F\\\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0B\x7FV[\x96` \x83\x01\x90a\x06,V[\x01\x90a\x02VV[V[4a\x0F\x91Wa\x0Fn6`\x04a\x02\xADV[a\x0F\x8Da\x0Fya\x1A*V[a\x0F\x84\x93\x91\x93a\x01\xF2V[\x93\x84\x93\x84a\x0F)V[\x03\x90\xF3[a\x01\xF8V[`@\x90a\x0F\xBFa\x0F\xC6\x94\x96\x95\x93\x96a\x0F\xB5``\x84\x01\x98_\x85\x01\x90a\x02\xFBV[` \x83\x01\x90a\x02\xFBV[\x01\x90a\x02\xFBV[V[4a\x0F\xFBWa\x0F\xD86`\x04a\x02\xADV[a\x0F\xF7a\x0F\xE3a\x1A\x93V[a\x0F\xEE\x93\x91\x93a\x01\xF2V[\x93\x84\x93\x84a\x0F\x96V[\x03\x90\xF3[a\x01\xF8V[_\x80\xFD[_\x90V[a\x10\x10a\x10\x04V[P\x80a\x10+a\x10%cye\xDB\x0B`\xE0\x1Ba\x02\x04V[\x91a\x02\x04V[\x14\x90\x81\x15a\x108W[P\x90V[a\x10B\x91Pa\x1B!V[_a\x104V[\x90a\x10\\\x93\x92\x91a\x10Wa\x1BsV[a\x10\x8DV[a\x10da\x1B\xF7V[V[`\xA0\x1C\x90V[a\x10xa\x10}\x91a\x10fV[a\x0E\xB8V[\x90V[a\x10\x8A\x90Ta\x10lV[\x90V[\x92\x91\x90a\x10\xA3a\x10\x9D`\x02a\x10\x80V[\x15a\x02QV[a\x10\xB2Wa\x10\xB0\x93a\x10\xCEV[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x10\xCA`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x92\x91\x90a\x10\xECa\x10\xE6a\x10\xDFa\x06\xB9V[3\x90a\x19 V[\x15a\x02QV[a\x10\xFBWa\x10\xF9\x93a\x12\x8BV[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x11\x13`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90V[a\x11.a\x11)a\x113\x92a\r\x9DV[a\x11\x17V[a\x04\x1FV[\x90V[a\x11?\x90a\x11\x1AV[\x90V[a\x11Va\x11Qa\x11[\x92a\r\x9DV[a\x11\x17V[a\x02\xF8V[\x90V[_\x1C\x90V[a\x11oa\x11t\x91a\x11^V[a\x02\xC0V[\x90V[a\x11\x81\x90Ta\x11cV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x11\xA7a\x11\xAD\x91\x93\x92\x93a\x02\xF8V[\x92a\x02\xF8V[\x82\x01\x80\x92\x11a\x11\xB8WV[a\x11\x84V[a\x11\xD1a\x11\xCCa\x11\xD6\x92a\x04\x1FV[a\x11\x17V[a\x04\x1FV[\x90V[a\x11\xE2\x90a\x11\xBDV[\x90V[a\x11\xEE\x90a\x11\xD9V[\x90V[a\x11\xFA\x90a\x11\xBDV[\x90V[a\x12\x06\x90a\x11\xF1V[\x90V[\x90a\x12\x15_\x19\x91a\r\xA0V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x123a\x12.a\x128\x92a\x02\xF8V[a\x11\x17V[a\x02\xF8V[\x90V[\x90V[\x90a\x12Sa\x12Na\x12Z\x92a\x12\x1FV[a\x12;V[\x82Ta\x12\tV[\x90UV[a\x12ja\x12o\x91a\x11^V[a\x08\x1EV[\x90V[a\x12|\x90Ta\x12^V[\x90V[a\x12\x88\x90a\x11\xF1V[\x90V[\x91\x92\x90\x92\x82a\x12\xAAa\x12\xA4a\x12\x9F_a\x116V[a\x04*V[\x91a\x04*V[\x14a\x14\x1AW\x83a\x12\xC2a\x12\xBC_a\x11BV[\x91a\x02\xF8V[\x14a\x13\xFEW\x83a\x12\xE3a\x12\xDDa\x12\xD8`\x03a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11a\x13\xE2Wa\x12\xF0a\x1C`V[a\x13\x04a\x12\xFD`\x05a\x11wV[\x85\x90a\x11\x98V[a\x13\x1Fa\x13\x19a\x13\x14`\x04a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11a\x13\xC6Wa\x13Q\x91a\x13Fa\x134\x85a\x11\xE5V[3a\x13>0a\x11\xFDV[\x90\x88\x92a\x1DcV[\x83\x91\x85\x90\x91\x92a\x1FDV[a\x13na\x13g\x83a\x13b`\x05a\x11wV[a\x11\x98V[`\x05a\x12>V[a\x13x`\x02a\x12rV[\x90a\x13\xC1a\x13\xAFa\x13\xA9\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x12\x7FV[\x93a\x12\x7FV[\x93a\x13\xB8a\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x13\xDE`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x13\xFA`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x14\x16`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x142`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90a\x14B\x93\x92\x91a\x10HV[V[_\x90V[a\x14Q\x90a\x03\x81V[\x90V[\x90a\x14^\x90a\x14HV[_R` R`@_ \x90V[\x90V[a\x14ya\x14~\x91a\x11^V[a\x14jV[\x90V[a\x14\x8B\x90Ta\x14mV[\x90V[`\x01a\x14\xA6a\x14\xAC\x92a\x14\x9Fa\x14DV[P_a\x14TV[\x01a\x14\x81V[\x90V[\x90a\x14\xCA\x91a\x14\xC5a\x14\xC0\x82a\x14\x8EV[a \xDBV[a\x14\xCCV[V[\x90a\x14\xD6\x91a!%V[PV[\x90a\x14\xE3\x91a\x14\xAFV[V[_\x90V[_\x90V[a\x14\xF9a\x14\xFE\x91a\x10fV[a\x07\x95V[\x90V[a\x15\x0B\x90Ta\x14\xEDV[\x90V[a\x15\x16a\x14\xE5V[Pa\x15\x1Fa\x14\xE5V[Pa\x15(a\x14\xE9V[Pa\x153`\x08a\x12rV[a\x15=`\ta\x12rV[\x91a\x15H`\ta\x15\x01V[\x91\x92\x91\x90V[\x90\x80a\x15ia\x15ca\x15^a!\xD0V[a\x04*V[\x91a\x04*V[\x03a\x15zWa\x15w\x91a!\xDDV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x15\x92`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[a\x15\xAF\x90a\x15\xAAa\x15\xA5a\x03RV[a \xDBV[a\x15\xFFV[V[`\xA0\x1B\x90V[\x90a\x15\xC6`\xFF`\xA0\x1B\x91a\x15\xB1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\xD9\x90a\x02QV[\x90V[\x90V[\x90a\x15\xF4a\x15\xEFa\x15\xFB\x92a\x15\xD0V[a\x15\xDCV[\x82Ta\x15\xB7V[\x90UV[a\x16\n\x81`\x02a\x15\xDFV[a\x16@\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x167a\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xA1V[a\x16N\x90a\x15\x96V[V[\x90a\x16k\x92\x91a\x16fa\x16aa\r\xC1V[a \xDBV[a\x16mV[V[\x91\x90\x81a\x16\x8Aa\x16\x84a\x16\x7F_a\x116V[a\x04*V[\x91a\x04*V[\x14a\x16\xA5Wa\x16\x9Ba\x16\xA3\x93a\x11\xE5V[\x91\x90\x91a\"~V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x16\xBD`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90a\x16\xCC\x92\x91a\x16PV[V[a\x16\xE7\x90a\x16\xE2a\x16\xDDa\x03RV[a \xDBV[a\x16\xE9V[V[a\x16\xF4\x90`\x03a\x12>V[V[a\x16\xFF\x90a\x16\xCEV[V[a\x17\x1A\x90a\x17\x15a\x17\x10a\x03RV[a \xDBV[a\x17ZV[V[\x90a\x17-`\x01\x80`\xA0\x1B\x03\x91a\r\xA0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x17Oa\x17Ja\x17V\x92a\x12\x7FV[a\x177V[\x82Ta\x17\x1CV[\x90UV[\x80a\x17ua\x17oa\x17j_a\x116V[a\x04*V[\x91a\x04*V[\x14a\x17\xDBWa\x17\x84`\x02a\x12rV[a\x17\x8F\x82`\x02a\x17:V[\x90a\x17\xC3a\x17\xBD\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x12\x7FV[\x91a\x12\x7FV[\x91a\x17\xCCa\x01\xF2V[\x80a\x17\xD6\x81a\x05\x19V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x17\xF3`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[a\x18\0\x90a\x17\x01V[V[\x90a\x18\x1D\x92\x91a\x18\x18a\x18\x13a\x03RV[a \xDBV[a\x18zV[V[\x90a\x181c\xFF\xFF\xFF\xFF`\xA0\x1B\x91a\x15\xB1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x18Oa\x18Ja\x18T\x92a\x069V[a\x11\x17V[a\x069V[\x90V[\x90V[\x90a\x18oa\x18ja\x18v\x92a\x18;V[a\x18WV[\x82Ta\x18\x1FV[\x90UV[\x91\x90\x91a\x18\x88\x81`\x08a\x17:V[a\x18\x93\x83`\ta\x17:V[a\x18\x9E\x82`\ta\x18ZV[\x91\x90\x91a\x18\xD7\x7F\x80+\x8C{$p\x9Bl\x9CV\x17\x9D\xCE\xEB\x97|\xC7\xACo\xA4\xF1_\x84\xC9\x9A\x86'\xAB\xFD\x97\xCC5\x93a\x18\xCEa\x01\xF2V[\x93\x84\x93\x84a\x06OV[\x03\x90\xA1V[\x90a\x18\xE7\x92\x91a\x18\x02V[V[\x90a\x18\xF3\x90a\x12\x7FV[_R` R`@_ \x90V[a\x19\x0Ba\x19\x10\x91a\x11^V[a\x0E\xB8V[\x90V[a\x19\x1D\x90Ta\x18\xFFV[\x90V[a\x19F\x91_a\x19;a\x19A\x93a\x194a\x10\x04V[P\x82a\x14TV[\x01a\x18\xE9V[a\x19\x13V[\x90V[a\x19b\x90a\x19]a\x19Xa\x03RV[a \xDBV[a\x19\x87V[V[\x91` a\x19\x85\x92\x94\x93a\x19~`@\x82\x01\x96_\x83\x01\x90a\x02\xFBV[\x01\x90a\x02\xFBV[V[a\x19\x91`\x04a\x11wV[a\x19\x9C\x82`\x04a\x12>V[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x19\xD3a\x19\xCAa\x01\xF2V[\x92\x83\x92\x83a\x19dV[\x03\x90\xA1V[a\x19\xE1\x90a\x19IV[V[\x90a\x19\xFE\x91a\x19\xF9a\x19\xF4\x82a\x14\x8EV[a \xDBV[a\x1A\0V[V[\x90a\x1A\n\x91a!\xDDV[PV[\x90a\x1A\x17\x91a\x19\xE3V[V[``\x90V[a\x1A'\x90a\x0B\x1EV[\x90V[a\x1A2a\x1A\x19V[Pa\x1A;a\x14\xE5V[Pa\x1ADa\x10\x04V[P`\x07a\x1AQ`\x02a\x12rV[\x91a\x1Aea\x1A_`\x02a\x10\x80V[\x92a\x1A\x1EV[\x92\x91\x90V[_\x90V[a\x1A}a\x1A\x83\x91\x93\x92\x93a\x02\xF8V[\x92a\x02\xF8V[\x82\x03\x91\x82\x11a\x1A\x8EWV[a\x11\x84V[a\x1A\x9Ba\x1AjV[Pa\x1A\xA4a\x1AjV[Pa\x1A\xADa\x1AjV[Pa\x1A\xB8`\x05a\x11wV[a\x1A\xC2`\x04a\x11wV[\x91a\x1A\xCD`\x04a\x11wV[a\x1A\xE8a\x1A\xE2a\x1A\xDD`\x05a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11_\x14a\x1B\x13Wa\x1B\x0Ca\x1A\xFC`\x04a\x11wV[a\x1B\x06`\x05a\x11wV[\x90a\x1AnV[[\x91\x92\x91\x90V[a\x1B\x1C_a\x11BV[a\x1B\rV[a\x1B)a\x10\x04V[Pa\x1BCa\x1B=c\x01\xFF\xC9\xA7`\xE0\x1Ba\x02\x04V[\x91a\x02\x04V[\x14\x90V[\x90V[a\x1B^a\x1BYa\x1Bc\x92a\x1BGV[a\x11\x17V[a\x02\xF8V[\x90V[a\x1Bp`\x02a\x1BJV[\x90V[a\x1B}`\x01a\x11wV[a\x1B\x96a\x1B\x90a\x1B\x8Ba\x1BfV[a\x02\xF8V[\x91a\x02\xF8V[\x14a\x1B\xAFWa\x1B\xADa\x1B\xA6a\x1BfV[`\x01a\x12>V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a\x1B\xC7`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90V[a\x1B\xE2a\x1B\xDDa\x1B\xE7\x92a\x1B\xCBV[a\x11\x17V[a\x02\xF8V[\x90V[a\x1B\xF4`\x01a\x1B\xCEV[\x90V[a\x1C\ta\x1C\x02a\x1B\xEAV[`\x01a\x12>V[V[\x90V[a\x1C\"a\x1C\x1Da\x1C'\x92a\x1C\x0BV[a\x11\x17V[a\x02\xF8V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1CJa\x1CP\x91a\x02\xF8V[\x91a\x02\xF8V[\x90\x81\x15a\x1C[W\x04\x90V[a\x1C*V[a\x1CvBa\x1Cpb\x01Q\x80a\x1C\x0EV[\x90a\x1C>V[\x80a\x1C\x92a\x1C\x8Ca\x1C\x87`\x06a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11a\x1C\x9BW[PV[\x80a\x1C\xFD\x91a\x1C\xAA`\x05a\x11wV[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a\x1C\xE0a\x1C\xD7a\x01\xF2V[\x92\x83\x92\x83a\x19dV[\x03\x90\xA1a\x1C\xF6a\x1C\xEF_a\x11BV[`\x05a\x12>V[`\x06a\x12>V[_a\x1C\x98V[a\x1D\x0C\x90a\x11\xF1V[\x90V[`\xE0\x1B\x90V[a\x1D)a\x1D$a\x1D.\x92a\x069V[a\x1D\x0FV[a\x02\x04V[\x90V[`@\x90a\x1DZa\x1Da\x94\x96\x95\x93\x96a\x1DP``\x84\x01\x98_\x85\x01\x90a\x06,V[` \x83\x01\x90a\x06,V[\x01\x90a\x02\xFBV[V[`\x04\x92a\x1D\x9Da\x1D\xB1\x95\x93a\x1D\xAC\x93\x94a\x1D\x84c#\xB8r\xDD\x92\x94\x91\x92a\x1D\x15V[\x93a\x1D\x8Da\x01\xF2V[\x97\x88\x95` \x87\x01\x90\x81R\x01a\x1D1V[` \x82\x01\x81\x03\x82R\x03\x83a\n\xF5V[a\"\xCCV[V[P\x90V[a\x1D\xC0\x90a\x04\x1FV[\x90V[a\x1D\xCC\x81a\x1D\xB7V[\x03a\x1D\xD3WV[_\x80\xFD[\x90P5\x90a\x1D\xE4\x82a\x1D\xC3V[V[\x91\x90`@\x83\x82\x03\x12a\x1E\x0EW\x80a\x1E\x02a\x1E\x0B\x92_\x86\x01a\x1D\xD7V[\x93` \x01a\x0C\xEAV[\x90V[a\x01\xFCV[a\x1E\x1C\x90a\x11\xF1V[\x90V[a\x1E.a\x1E4\x91\x93\x92\x93a\x1E\x13V[\x92a\x18;V[\x90V[_\x80\xFD[\x90PQ\x90a\x1EH\x82a\x08\xA8V[V[\x90` \x82\x82\x03\x12a\x1EcWa\x1E`\x91_\x01a\x1E;V[\x90V[a\x01\xFCV[\x91` a\x1E\x89\x92\x94\x93a\x1E\x82`@\x82\x01\x96_\x83\x01\x90a\x06,V[\x01\x90a\x02\xFBV[V[a\x1E\x93a\x01\xF2V[=_\x82>=\x90\xFD[a\x1E\xA4\x90a\x11\xBDV[\x90V[a\x1E\xB0\x90a\x1E\x9BV[\x90V[a\x1E\xBC\x90a\x11\xF1V[\x90V[_\x91\x03\x12a\x1E\xC9WV[a\x01\xFCV[` \x91\x81R\x01\x90V[a\x1E\xE2_\x80\x92a\x1E\xCEV[\x01\x90V[\x92a\x1FA\x95\x91\x94a\x1F a\x1F*\x92a\x1F\x16a\x1F4\x96a\x1F\x0C`\xC0\x8A\x01\x9A_\x8B\x01\x90a\x06,V[` \x89\x01\x90a\x06,V[`@\x87\x01\x90a\x06,V[``\x85\x01\x90a\x02\xFBV[`\x80\x83\x01\x90a\x06BV[`\xA0\x81\x83\x03\x91\x01Ra\x1E\xD7V[\x90V[\x92\x90\x91a\x1FR\x81\x83\x90a\x1D\xB3V[a\x1Fda\x1F^_a\x11BV[\x91a\x02\xF8V[\x11_\x14a \xBEWa\x1F\x82\x91a\x1F|\x91\x90\x81\x01\x90a\x1D\xE6V[\x90a\x1E\x1FV[\x92\x90[\x92\x90a\x1F\x98a\x1F\x93\x82a\x11\xE5V[a\x1D\x03V[` c\t^\xA7\xB3\x91a\x1F\xAA`\x02a\x12rV[\x90a\x1F\xC8_\x88\x95a\x1F\xD3a\x1F\xBCa\x01\xF2V[\x97\x88\x96\x87\x95\x86\x94a\x1D\x0FV[\x84R`\x04\x84\x01a\x1EhV[\x03\x92Z\xF1\x80\x15a \xB9Wa \x8DW[Pa\x1F\xFDa\x1F\xF8a\x1F\xF3`\x02a\x12rV[a\x1E\xA7V[a\x1E\xB3V[\x90c\x83\x8B% \x90\x92a \x0F`\x08a\x12rV[\x95\x94\x90\x91\x83;\x15a \x88Wa Ea :\x93_\x97\x93\x88\x94a .a\x01\xF2V[\x9A\x8B\x99\x8A\x98\x89\x97a\x1D\x0FV[\x87R`\x04\x87\x01a\x1E\xE6V[\x03\x92Z\xF1\x80\x15a \x83Wa WW[PV[a v\x90_=\x81\x11a |W[a n\x81\x83a\n\xF5V[\x81\x01\x90a\x1E\xBFV[_a TV[P=a dV[a\x1E\x8BV[a\x1E7V[a \xAD\x90` =\x81\x11a \xB2W[a \xA5\x81\x83a\n\xF5V[\x81\x01\x90a\x1EJV[a\x1F\xE2V[P=a \x9BV[a\x1E\x8BV[PPa \xCA`\ta\x12rV[\x91a \xD5`\ta\x15\x01V[\x92a\x1F\x85V[a \xED\x90a \xE7a!\xD0V[\x90a#\xA3V[V[\x90a \xFB`\xFF\x91a\r\xA0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a!\x1Aa!\x15a!!\x92a\x15\xD0V[a\x15\xDCV[\x82Ta \xEFV[\x90UV[a!-a\x10\x04V[Pa!Ba!<\x82\x84\x90a\x19 V[\x15a\x02QV[_\x14a!\xCAWa!i`\x01a!d_a!\\\x81\x86\x90a\x14TV[\x01\x85\x90a\x18\xE9V[a!\x05V[\x90a!ra!\xD0V[\x90a!\xAFa!\xA9a!\xA3\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x14HV[\x92a\x12\x7FV[\x92a\x12\x7FV[\x92a!\xB8a\x01\xF2V[\x80a!\xC2\x81a\x05\x19V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a!\xD8a\x14\xE5V[P3\x90V[a!\xE5a\x10\x04V[Pa!\xF1\x81\x83\x90a\x19 V[_\x14a\"xWa\"\x17_a\"\x12_a\"\n\x81\x86\x90a\x14TV[\x01\x85\x90a\x18\xE9V[a!\x05V[\x90a\" a!\xD0V[\x90a\"]a\"Wa\"Q\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x14HV[\x92a\x12\x7FV[\x92a\x12\x7FV[\x92a\"fa\x01\xF2V[\x80a\"p\x81a\x05\x19V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x90a\"\xC5a\"\xCA\x93a\"\xB6`\x04\x94\x93a\"\x9Dc\xA9\x05\x9C\xBB\x91\x93\x91a\x1D\x15V[\x92a\"\xA6a\x01\xF2V[\x96\x87\x94` \x86\x01\x90\x81R\x01a\x1EhV[` \x82\x01\x81\x03\x82R\x03\x83a\n\xF5V[a\"\xCCV[V[\x90_` \x91a\"\xD9a\x1AjV[Pa\"\xE2a\x1AjV[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a#uW=_Q\x90a#\x07a#\x01_a\x11BV[\x91a\x02\xF8V[\x14_\x14a#[WPa#\x18\x81a\x1D\x03V[;a#+a#%_a\x11BV[\x91a\x02\xF8V[\x14[a#4WPV[a#@a#W\x91a\x1D\x03V[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\x08^V[\x03\x90\xFD[a#na#h`\x01a\x1B\xCEV[\x91a\x02\xF8V[\x14\x15a#-V[`@Q=_\x82>=\x90\xFD[\x91` a#\xA1\x92\x94\x93a#\x9A`@\x82\x01\x96_\x83\x01\x90a\x06,V[\x01\x90a\x03\x84V[V[\x90a#\xB8a#\xB2\x83\x83\x90a\x19 V[\x15a\x02QV[a#\xC0WPPV[a#\xDA_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a#\x80V[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b611000565b61001d5f356101ec565b806301ffc9a7146101e75780631033b4cc146101e2578063118c38c7146101dd5780631259a5c8146101d857806318b68b8c146101d3578063248a9ca3146101ce5780632f2ff15d146101c957806332d4f504146101c45780633462fac3146101bf57806336568abe146101ba57806336b089d8146101b55780633cbb6979146101b057806356eff267146101ab5780635ab1d61c146101a657806361b0a56e146101a1578063632214901461019c57806365d7a3c91461019757806366d003ac1461019257806367eeba0c1461018d5780636bcc8c141461018857806385931b741461018357806391d148541461017e578063a217fddf14610179578063b20d30a914610174578063c9f5b63e1461016f578063d547741f1461016a578063ead93c8f14610165578063ede7cebd146101605763fb8c4b510361000e57610fc8565b610f5e565b610ef4565b610e84565b610e4f565b610e0d565b610dd8565b610d67565b610d33565b610ca3565b610c50565b610c0c565b610bc8565b6109a8565b610956565b6108e9565b610873565b6107e9565b610760565b61071d565b6106e8565b610681565b6105f8565b610596565b61051e565b6103ea565b6103a6565b61031d565b610278565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61021981610204565b0361022057565b5f80fd5b9050359061023182610210565b565b9060208282031261024c57610249915f01610224565b90565b6101fc565b151590565b61025f90610251565b9052565b9190610276905f60208501940190610256565b565b346102a8576102a461029361028e366004610233565b611008565b61029b6101f2565b91829182610263565b0390f35b6101f8565b5f9103126102b757565b6101fc565b1c90565b90565b6102d39060086102d893026102bc565b6102c0565b90565b906102e691546102c3565b90565b6102f560055f906102db565b90565b90565b610304906102f8565b9052565b919061031b905f602085019401906102fb565b565b3461034d5761032d3660046102ad565b6103496103386102e9565b6103406101f2565b91829182610308565b0390f35b6101f8565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf90565b61037e610352565b90565b90565b61038d90610381565b9052565b91906103a4905f60208501940190610384565b565b346103d6576103b63660046102ad565b6103d26103c1610376565b6103c96101f2565b91829182610391565b0390f35b6101f8565b6103e760065f906102db565b90565b3461041a576103fa3660046102ad565b6104166104056103db565b61040d6101f2565b91829182610308565b0390f35b6101f8565b60018060a01b031690565b6104339061041f565b90565b61043f8161042a565b0361044657565b5f80fd5b9050359061045782610436565b565b610462816102f8565b0361046957565b5f80fd5b9050359061047a82610459565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104c25781359167ffffffffffffffff83116104bd5760200192600183028401116104b857565b610484565b610480565b61047c565b91606083830312610514576104de825f850161044a565b926104ec836020830161046d565b92604082013567ffffffffffffffff811161050f5761050b9201610488565b9091565b610200565b6101fc565b5f0190565b346105505761053a6105313660046104c7565b92919091611436565b6105426101f2565b8061054c81610519565b0390f35b6101f8565b61055e81610381565b0361056557565b5f80fd5b9050359061057682610555565b565b906020828203126105915761058e915f01610569565b90565b6101fc565b346105c6576105c26105b16105ac366004610578565b61148e565b6105b96101f2565b91829182610391565b0390f35b6101f8565b91906040838203126105f357806105e76105f0925f8601610569565b9360200161044a565b90565b6101fc565b346106275761061161060b3660046105cb565b906114d9565b6106196101f2565b8061062381610519565b0390f35b6101f8565b6106359061042a565b9052565b63ffffffff1690565b61064b90610639565b9052565b60409061067861067f949695939661066e60608401985f85019061062c565b602083019061062c565b0190610642565b565b346106b4576106913660046102ad565b6106b061069c61150e565b6106a79391936101f2565b9384938461064f565b0390f35b6101f8565b7fc074beb46b251f73c0fec16eba75d6bc0042d09ee17a740ebbee308dbf87f82f90565b6106e56106b9565b90565b34610718576106f83660046102ad565b6107146107036106dd565b61070b6101f2565b91829182610391565b0390f35b6101f8565b3461074c576107366107303660046105cb565b9061154e565b61073e6101f2565b8061074881610519565b0390f35b6101f8565b61075d60035f906102db565b90565b34610790576107703660046102ad565b61078c61077b610751565b6107836101f2565b91829182610308565b0390f35b6101f8565b63ffffffff1690565b6107ae9060086107b393026102bc565b610795565b90565b906107c1915461079e565b90565b6107d160096014906107b6565b90565b91906107e7905f60208501940190610642565b565b34610819576107f93660046102ad565b6108156108046107c4565b61080c6101f2565b918291826107d4565b0390f35b6101f8565b60018060a01b031690565b61083990600861083e93026102bc565b61081e565b90565b9061084c9154610829565b90565b61085b60085f90610841565b90565b9190610871905f6020850194019061062c565b565b346108a3576108833660046102ad565b61089f61088e61084f565b6108966101f2565b9182918261085e565b0390f35b6101f8565b6108b181610251565b036108b857565b5f80fd5b905035906108c9826108a8565b565b906020828203126108e4576108e1915f016108bc565b90565b6101fc565b34610917576109016108fc3660046108cb565b611645565b6109096101f2565b8061091381610519565b0390f35b6101f8565b90916060828403126109515761094e610937845f850161044a565b93610945816020860161046d565b9360400161044a565b90565b6101fc565b346109855761096f61096936600461091c565b916116c1565b6109776101f2565b8061098181610519565b0390f35b6101f8565b906020828203126109a3576109a0915f0161046d565b90565b6101fc565b346109d6576109c06109bb36600461098a565b6116f6565b6109c86101f2565b806109d281610519565b0390f35b6101f8565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610a22575b6020831014610a1d57565b6109ee565b91607f1691610a12565b60209181520190565b5f5260205f2090565b905f9291805490610a58610a5183610a02565b8094610a2c565b916001811690815f14610aaf5750600114610a73575b505050565b610a809192939450610a35565b915f925b818410610a9757505001905f8080610a6e565b60018160209295939554848601520191019290610a84565b92949550505060ff19168252151560200201905f8080610a6e565b90610ad491610a3e565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610aff90610ad7565b810190811067ffffffffffffffff821117610b1957604052565b610ae1565b90610b3e610b3792610b2e6101f2565b93848092610aca565b0383610af5565b565b905f10610b5357610b5090610b1e565b90565b6109db565b610b6460075f90610b40565b90565b5190565b60209181520190565b90825f9392825e0152565b610b9e610ba7602093610bac93610b9581610b67565b93848093610b6b565b95869101610b74565b610ad7565b0190565b610bc59160208201915f818403910152610b7f565b90565b34610bf857610bd83660046102ad565b610bf4610be3610b58565b610beb6101f2565b91829182610bb0565b0390f35b6101f8565b610c0960095f90610841565b90565b34610c3c57610c1c3660046102ad565b610c38610c27610bfd565b610c2f6101f2565b9182918261085e565b0390f35b6101f8565b610c4d60045f906102db565b90565b34610c8057610c603660046102ad565b610c7c610c6b610c41565b610c736101f2565b91829182610308565b0390f35b6101f8565b90602082820312610c9e57610c9b915f0161044a565b90565b6101fc565b34610cd157610cbb610cb6366004610c85565b6117f7565b610cc36101f2565b80610ccd81610519565b0390f35b6101f8565b610cdf81610639565b03610ce657565b5f80fd5b90503590610cf782610cd6565b565b9091606082840312610d2e57610d2b610d14845f850161044a565b93610d22816020860161044a565b93604001610cea565b90565b6101fc565b34610d6257610d4c610d46366004610cf9565b916118dc565b610d546101f2565b80610d5e81610519565b0390f35b6101f8565b34610d9857610d94610d83610d7d3660046105cb565b90611920565b610d8b6101f2565b91829182610263565b0390f35b6101f8565b90565b5f1b90565b610db9610db4610dbe92610d9d565b610da0565b610381565b90565b610dca5f610da5565b90565b610dd5610dc1565b90565b34610e0857610de83660046102ad565b610e04610df3610dcd565b610dfb6101f2565b91829182610391565b0390f35b6101f8565b34610e3b57610e25610e2036600461098a565b6119d8565b610e2d6101f2565b80610e3781610519565b0390f35b6101f8565b610e4c60025f90610841565b90565b34610e7f57610e5f3660046102ad565b610e7b610e6a610e40565b610e726101f2565b9182918261085e565b0390f35b6101f8565b34610eb357610e9d610e973660046105cb565b90611a0d565b610ea56101f2565b80610eaf81610519565b0390f35b6101f8565b60ff1690565b610ece906008610ed393026102bc565b610eb8565b90565b90610ee19154610ebe565b90565b610ef16002601490610ed6565b90565b34610f2457610f043660046102ad565b610f20610f0f610ee4565b610f176101f2565b91829182610263565b0390f35b6101f8565b604090610f55610f4a610f5c9597969460608401908482035f860152610b7f565b96602083019061062c565b0190610256565b565b34610f9157610f6e3660046102ad565b610f8d610f79611a2a565b610f849391936101f2565b93849384610f29565b0390f35b6101f8565b604090610fbf610fc69496959396610fb560608401985f8501906102fb565b60208301906102fb565b01906102fb565b565b34610ffb57610fd83660046102ad565b610ff7610fe3611a93565b610fee9391936101f2565b93849384610f96565b0390f35b6101f8565b5f80fd5b5f90565b611010611004565b508061102b611025637965db0b60e01b610204565b91610204565b14908115611038575b5090565b6110429150611b21565b5f611034565b9061105c939291611057611b73565b61108d565b611064611bf7565b565b60a01c90565b61107861107d91611066565b610eb8565b90565b61108a905461106c565b90565b9291906110a361109d6002611080565b15610251565b6110b2576110b0936110ce565b565b5f633df5105960e11b8152806110ca60048201610519565b0390fd5b9291906110ec6110e66110df6106b9565b3390611920565b15610251565b6110fb576110f99361128b565b565b5f635c427cd960e01b81528061111360048201610519565b0390fd5b90565b61112e61112961113392610d9d565b611117565b61041f565b90565b61113f9061111a565b90565b61115661115161115b92610d9d565b611117565b6102f8565b90565b5f1c90565b61116f6111749161115e565b6102c0565b90565b6111819054611163565b90565b634e487b7160e01b5f52601160045260245ffd5b6111a76111ad919392936102f8565b926102f8565b82018092116111b857565b611184565b6111d16111cc6111d69261041f565b611117565b61041f565b90565b6111e2906111bd565b90565b6111ee906111d9565b90565b6111fa906111bd565b90565b611206906111f1565b90565b906112155f1991610da0565b9181191691161790565b61123361122e611238926102f8565b611117565b6102f8565b90565b90565b9061125361124e61125a9261121f565b61123b565b8254611209565b9055565b61126a61126f9161115e565b61081e565b90565b61127c905461125e565b90565b611288906111f1565b90565b91929092826112aa6112a461129f5f611136565b61042a565b9161042a565b1461141a57836112c26112bc5f611142565b916102f8565b146113fe57836112e36112dd6112d86003611177565b6102f8565b916102f8565b116113e2576112f0611c60565b6113046112fd6005611177565b8590611198565b61131f6113196113146004611177565b6102f8565b916102f8565b116113c65761135191611346611334856111e5565b3361133e306111fd565b908892611d63565b839185909192611f44565b61136e611367836113626005611177565b611198565b600561123e565b6113786002611272565b906113c16113af6113a97f3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e89361127f565b9361127f565b936113b86101f2565b91829182610308565b0390a3565b5f631c345a2f60e21b8152806113de60048201610519565b0390fd5b5f631c345a2f60e21b8152806113fa60048201610519565b0390fd5b5f631f2a200560e01b81528061141660048201610519565b0390fd5b5f63d92e233d60e01b81528061143260048201610519565b0390fd5b90611442939291611048565b565b5f90565b61145190610381565b90565b9061145e90611448565b5f5260205260405f2090565b90565b61147961147e9161115e565b61146a565b90565b61148b905461146d565b90565b60016114a66114ac9261149f611444565b505f611454565b01611481565b90565b906114ca916114c56114c08261148e565b6120db565b6114cc565b565b906114d691612125565b50565b906114e3916114af565b565b5f90565b5f90565b6114f96114fe91611066565b610795565b90565b61150b90546114ed565b90565b6115166114e5565b5061151f6114e5565b506115286114e9565b506115336008611272565b61153d6009611272565b916115486009611501565b91929190565b908061156961156361155e6121d0565b61042a565b9161042a565b0361157a57611577916121dd565b50565b5f63334bd91960e11b81528061159260048201610519565b0390fd5b6115af906115aa6115a5610352565b6120db565b6115ff565b565b60a01b90565b906115c660ff60a01b916115b1565b9181191691161790565b6115d990610251565b90565b90565b906115f46115ef6115fb926115d0565b6115dc565b82546115b7565b9055565b61160a8160026115df565b6116407fb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d5916116376101f2565b91829182610263565b0390a1565b61164e90611596565b565b9061166b9291611666611661610dc1565b6120db565b61166d565b565b91908161168a61168461167f5f611136565b61042a565b9161042a565b146116a55761169b6116a3936111e5565b91909161227e565b565b5f63d92e233d60e01b8152806116bd60048201610519565b0390fd5b906116cc9291611650565b565b6116e7906116e26116dd610352565b6120db565b6116e9565b565b6116f490600361123e565b565b6116ff906116ce565b565b61171a90611715611710610352565b6120db565b61175a565b565b9061172d60018060a01b0391610da0565b9181191691161790565b90565b9061174f61174a6117569261127f565b611737565b825461171c565b9055565b8061177561176f61176a5f611136565b61042a565b9161042a565b146117db576117846002611272565b61178f82600261173a565b906117c36117bd7fb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd1082980699361127f565b9161127f565b916117cc6101f2565b806117d681610519565b0390a3565b5f63d92e233d60e01b8152806117f360048201610519565b0390fd5b61180090611701565b565b9061181d9291611818611813610352565b6120db565b61187a565b565b9061183163ffffffff60a01b916115b1565b9181191691161790565b61184f61184a61185492610639565b611117565b610639565b90565b90565b9061186f61186a6118769261183b565b611857565b825461181f565b9055565b91909161188881600861173a565b61189383600961173a565b61189e82600961185a565b9190916118d77f802b8c7b24709b6c9c56179dceeb977cc7ac6fa4f15f84c99a8627abfd97cc35936118ce6101f2565b9384938461064f565b0390a1565b906118e79291611802565b565b906118f39061127f565b5f5260205260405f2090565b61190b6119109161115e565b610eb8565b90565b61191d90546118ff565b90565b611946915f61193b61194193611934611004565b5082611454565b016118e9565b611913565b90565b6119629061195d611958610352565b6120db565b611987565b565b91602061198592949361197e60408201965f8301906102fb565b01906102fb565b565b6119916004611177565b61199c82600461123e565b907f207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf916119d36119ca6101f2565b92839283611964565b0390a1565b6119e190611949565b565b906119fe916119f96119f48261148e565b6120db565b611a00565b565b90611a0a916121dd565b50565b90611a17916119e3565b565b606090565b611a2790610b1e565b90565b611a32611a19565b50611a3b6114e5565b50611a44611004565b506007611a516002611272565b91611a65611a5f6002611080565b92611a1e565b929190565b5f90565b611a7d611a83919392936102f8565b926102f8565b8203918211611a8e57565b611184565b611a9b611a6a565b50611aa4611a6a565b50611aad611a6a565b50611ab86005611177565b611ac26004611177565b91611acd6004611177565b611ae8611ae2611add6005611177565b6102f8565b916102f8565b115f14611b1357611b0c611afc6004611177565b611b066005611177565b90611a6e565b5b91929190565b611b1c5f611142565b611b0d565b611b29611004565b50611b43611b3d6301ffc9a760e01b610204565b91610204565b1490565b90565b611b5e611b59611b6392611b47565b611117565b6102f8565b90565b611b706002611b4a565b90565b611b7d6001611177565b611b96611b90611b8b611b66565b6102f8565b916102f8565b14611baf57611bad611ba6611b66565b600161123e565b565b5f633ee5aeb560e01b815280611bc760048201610519565b0390fd5b90565b611be2611bdd611be792611bcb565b611117565b6102f8565b90565b611bf46001611bce565b90565b611c09611c02611bea565b600161123e565b565b90565b611c22611c1d611c2792611c0b565b611117565b6102f8565b90565b634e487b7160e01b5f52601260045260245ffd5b611c4a611c50916102f8565b916102f8565b908115611c5b570490565b611c2a565b611c7642611c7062015180611c0e565b90611c3e565b80611c92611c8c611c876006611177565b6102f8565b916102f8565b11611c9b575b50565b80611cfd91611caa6005611177565b7fda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab91611ce0611cd76101f2565b92839283611964565b0390a1611cf6611cef5f611142565b600561123e565b600661123e565b5f611c98565b611d0c906111f1565b90565b60e01b90565b611d29611d24611d2e92610639565b611d0f565b610204565b90565b604090611d5a611d619496959396611d5060608401985f85019061062c565b602083019061062c565b01906102fb565b565b600492611d9d611db19593611dac9394611d846323b872dd92949192611d15565b93611d8d6101f2565b9788956020870190815201611d31565b60208201810382520383610af5565b6122cc565b565b5090565b611dc09061041f565b90565b611dcc81611db7565b03611dd357565b5f80fd5b90503590611de482611dc3565b565b9190604083820312611e0e5780611e02611e0b925f8601611dd7565b93602001610cea565b90565b6101fc565b611e1c906111f1565b90565b611e2e611e3491939293611e13565b9261183b565b90565b5f80fd5b90505190611e48826108a8565b565b90602082820312611e6357611e60915f01611e3b565b90565b6101fc565b916020611e89929493611e8260408201965f83019061062c565b01906102fb565b565b611e936101f2565b3d5f823e3d90fd5b611ea4906111bd565b90565b611eb090611e9b565b90565b611ebc906111f1565b90565b5f910312611ec957565b6101fc565b60209181520190565b611ee25f8092611ece565b0190565b92611f41959194611f20611f2a92611f16611f3496611f0c60c08a019a5f8b019061062c565b602089019061062c565b604087019061062c565b60608501906102fb565b6080830190610642565b60a0818303910152611ed7565b90565b929091611f52818390611db3565b611f64611f5e5f611142565b916102f8565b115f146120be57611f8291611f7c9190810190611de6565b90611e1f565b92905b9290611f98611f93826111e5565b611d03565b602063095ea7b391611faa6002611272565b90611fc85f8895611fd3611fbc6101f2565b97889687958694611d0f565b845260048401611e68565b03925af180156120b95761208d575b50611ffd611ff8611ff36002611272565b611ea7565b611eb3565b9063838b2520909261200f6008611272565b95949091833b156120885761204561203a935f9793889461202e6101f2565b9a8b998a988997611d0f565b875260048701611ee6565b03925af1801561208357612057575b50565b612076905f3d811161207c575b61206e8183610af5565b810190611ebf565b5f612054565b503d612064565b611e8b565b611e37565b6120ad9060203d81116120b2575b6120a58183610af5565b810190611e4a565b611fe2565b503d61209b565b611e8b565b50506120ca6009611272565b916120d56009611501565b92611f85565b6120ed906120e76121d0565b906123a3565b565b906120fb60ff91610da0565b9181191691161790565b9061211a612115612121926115d0565b6115dc565b82546120ef565b9055565b61212d611004565b5061214261213c828490611920565b15610251565b5f146121ca5761216960016121645f61215c818690611454565b0185906118e9565b612105565b906121726121d0565b906121af6121a96121a37f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95611448565b9261127f565b9261127f565b926121b86101f2565b806121c281610519565b0390a4600190565b50505f90565b6121d86114e5565b503390565b6121e5611004565b506121f1818390611920565b5f14612278576122175f6122125f61220a818690611454565b0185906118e9565b612105565b906122206121d0565b9061225d6122576122517ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95611448565b9261127f565b9261127f565b926122666101f2565b8061227081610519565b0390a4600190565b50505f90565b906122c56122ca936122b66004949361229d63a9059cbb919391611d15565b926122a66101f2565b9687946020860190815201611e68565b60208201810382520383610af5565b6122cc565b565b905f6020916122d9611a6a565b506122e2611a6a565b50828151910182855af115612375573d5f51906123076123015f611142565b916102f8565b145f1461235b575061231881611d03565b3b61232b6123255f611142565b916102f8565b145b6123345750565b61234061235791611d03565b5f918291635274afe760e01b83526004830161085e565b0390fd5b61236e6123686001611bce565b916102f8565b141561232d565b6040513d5f823e3d90fd5b9160206123a192949361239a60408201965f83019061062c565b0190610384565b565b906123b86123b2838390611920565b15610251565b6123c0575050565b6123da5f92839263e2517d3f60e01b845260048401612380565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x10\0V[a\0\x1D_5a\x01\xECV[\x80c\x01\xFF\xC9\xA7\x14a\x01\xE7W\x80c\x103\xB4\xCC\x14a\x01\xE2W\x80c\x11\x8C8\xC7\x14a\x01\xDDW\x80c\x12Y\xA5\xC8\x14a\x01\xD8W\x80c\x18\xB6\x8B\x8C\x14a\x01\xD3W\x80c$\x8A\x9C\xA3\x14a\x01\xCEW\x80c//\xF1]\x14a\x01\xC9W\x80c2\xD4\xF5\x04\x14a\x01\xC4W\x80c4b\xFA\xC3\x14a\x01\xBFW\x80c6V\x8A\xBE\x14a\x01\xBAW\x80c6\xB0\x89\xD8\x14a\x01\xB5W\x80c<\xBBiy\x14a\x01\xB0W\x80cV\xEF\xF2g\x14a\x01\xABW\x80cZ\xB1\xD6\x1C\x14a\x01\xA6W\x80ca\xB0\xA5n\x14a\x01\xA1W\x80cc\"\x14\x90\x14a\x01\x9CW\x80ce\xD7\xA3\xC9\x14a\x01\x97W\x80cf\xD0\x03\xAC\x14a\x01\x92W\x80cg\xEE\xBA\x0C\x14a\x01\x8DW\x80ck\xCC\x8C\x14\x14a\x01\x88W\x80c\x85\x93\x1Bt\x14a\x01\x83W\x80c\x91\xD1HT\x14a\x01~W\x80c\xA2\x17\xFD\xDF\x14a\x01yW\x80c\xB2\r0\xA9\x14a\x01tW\x80c\xC9\xF5\xB6>\x14a\x01oW\x80c\xD5Gt\x1F\x14a\x01jW\x80c\xEA\xD9<\x8F\x14a\x01eW\x80c\xED\xE7\xCE\xBD\x14a\x01`Wc\xFB\x8CKQ\x03a\0\x0EWa\x0F\xC8V[a\x0F^V[a\x0E\xF4V[a\x0E\x84V[a\x0EOV[a\x0E\rV[a\r\xD8V[a\rgV[a\r3V[a\x0C\xA3V[a\x0CPV[a\x0C\x0CV[a\x0B\xC8V[a\t\xA8V[a\tVV[a\x08\xE9V[a\x08sV[a\x07\xE9V[a\x07`V[a\x07\x1DV[a\x06\xE8V[a\x06\x81V[a\x05\xF8V[a\x05\x96V[a\x05\x1EV[a\x03\xEAV[a\x03\xA6V[a\x03\x1DV[a\x02xV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x02\x19\x81a\x02\x04V[\x03a\x02 WV[_\x80\xFD[\x90P5\x90a\x021\x82a\x02\x10V[V[\x90` \x82\x82\x03\x12a\x02LWa\x02I\x91_\x01a\x02$V[\x90V[a\x01\xFCV[\x15\x15\x90V[a\x02_\x90a\x02QV[\x90RV[\x91\x90a\x02v\x90_` \x85\x01\x94\x01\x90a\x02VV[V[4a\x02\xA8Wa\x02\xA4a\x02\x93a\x02\x8E6`\x04a\x023V[a\x10\x08V[a\x02\x9Ba\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xF3[a\x01\xF8V[_\x91\x03\x12a\x02\xB7WV[a\x01\xFCV[\x1C\x90V[\x90V[a\x02\xD3\x90`\x08a\x02\xD8\x93\x02a\x02\xBCV[a\x02\xC0V[\x90V[\x90a\x02\xE6\x91Ta\x02\xC3V[\x90V[a\x02\xF5`\x05_\x90a\x02\xDBV[\x90V[\x90V[a\x03\x04\x90a\x02\xF8V[\x90RV[\x91\x90a\x03\x1B\x90_` \x85\x01\x94\x01\x90a\x02\xFBV[V[4a\x03MWa\x03-6`\x04a\x02\xADV[a\x03Ia\x038a\x02\xE9V[a\x03@a\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[\x7Fu\x1By]$\xB9.=\x92\xD1\xD0\xD8\xF2\x88_N\x9C\x9C&\x9D\xA3P\xAF6\xAEkI\x06\x9B\xAB\xF4\xBF\x90V[a\x03~a\x03RV[\x90V[\x90V[a\x03\x8D\x90a\x03\x81V[\x90RV[\x91\x90a\x03\xA4\x90_` \x85\x01\x94\x01\x90a\x03\x84V[V[4a\x03\xD6Wa\x03\xB66`\x04a\x02\xADV[a\x03\xD2a\x03\xC1a\x03vV[a\x03\xC9a\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[a\x03\xE7`\x06_\x90a\x02\xDBV[\x90V[4a\x04\x1AWa\x03\xFA6`\x04a\x02\xADV[a\x04\x16a\x04\x05a\x03\xDBV[a\x04\ra\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x043\x90a\x04\x1FV[\x90V[a\x04?\x81a\x04*V[\x03a\x04FWV[_\x80\xFD[\x90P5\x90a\x04W\x82a\x046V[V[a\x04b\x81a\x02\xF8V[\x03a\x04iWV[_\x80\xFD[\x90P5\x90a\x04z\x82a\x04YV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04\xC2W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xBDW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xB8WV[a\x04\x84V[a\x04\x80V[a\x04|V[\x91``\x83\x83\x03\x12a\x05\x14Wa\x04\xDE\x82_\x85\x01a\x04JV[\x92a\x04\xEC\x83` \x83\x01a\x04mV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05\x0FWa\x05\x0B\x92\x01a\x04\x88V[\x90\x91V[a\x02\0V[a\x01\xFCV[_\x01\x90V[4a\x05PWa\x05:a\x0516`\x04a\x04\xC7V[\x92\x91\x90\x91a\x146V[a\x05Ba\x01\xF2V[\x80a\x05L\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x05^\x81a\x03\x81V[\x03a\x05eWV[_\x80\xFD[\x90P5\x90a\x05v\x82a\x05UV[V[\x90` \x82\x82\x03\x12a\x05\x91Wa\x05\x8E\x91_\x01a\x05iV[\x90V[a\x01\xFCV[4a\x05\xC6Wa\x05\xC2a\x05\xB1a\x05\xAC6`\x04a\x05xV[a\x14\x8EV[a\x05\xB9a\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[\x91\x90`@\x83\x82\x03\x12a\x05\xF3W\x80a\x05\xE7a\x05\xF0\x92_\x86\x01a\x05iV[\x93` \x01a\x04JV[\x90V[a\x01\xFCV[4a\x06'Wa\x06\x11a\x06\x0B6`\x04a\x05\xCBV[\x90a\x14\xD9V[a\x06\x19a\x01\xF2V[\x80a\x06#\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x065\x90a\x04*V[\x90RV[c\xFF\xFF\xFF\xFF\x16\x90V[a\x06K\x90a\x069V[\x90RV[`@\x90a\x06xa\x06\x7F\x94\x96\x95\x93\x96a\x06n``\x84\x01\x98_\x85\x01\x90a\x06,V[` \x83\x01\x90a\x06,V[\x01\x90a\x06BV[V[4a\x06\xB4Wa\x06\x916`\x04a\x02\xADV[a\x06\xB0a\x06\x9Ca\x15\x0EV[a\x06\xA7\x93\x91\x93a\x01\xF2V[\x93\x84\x93\x84a\x06OV[\x03\x90\xF3[a\x01\xF8V[\x7F\xC0t\xBE\xB4k%\x1Fs\xC0\xFE\xC1n\xBAu\xD6\xBC\0B\xD0\x9E\xE1zt\x0E\xBB\xEE0\x8D\xBF\x87\xF8/\x90V[a\x06\xE5a\x06\xB9V[\x90V[4a\x07\x18Wa\x06\xF86`\x04a\x02\xADV[a\x07\x14a\x07\x03a\x06\xDDV[a\x07\x0Ba\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[4a\x07LWa\x076a\x0706`\x04a\x05\xCBV[\x90a\x15NV[a\x07>a\x01\xF2V[\x80a\x07H\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x07]`\x03_\x90a\x02\xDBV[\x90V[4a\x07\x90Wa\x07p6`\x04a\x02\xADV[a\x07\x8Ca\x07{a\x07QV[a\x07\x83a\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[c\xFF\xFF\xFF\xFF\x16\x90V[a\x07\xAE\x90`\x08a\x07\xB3\x93\x02a\x02\xBCV[a\x07\x95V[\x90V[\x90a\x07\xC1\x91Ta\x07\x9EV[\x90V[a\x07\xD1`\t`\x14\x90a\x07\xB6V[\x90V[\x91\x90a\x07\xE7\x90_` \x85\x01\x94\x01\x90a\x06BV[V[4a\x08\x19Wa\x07\xF96`\x04a\x02\xADV[a\x08\x15a\x08\x04a\x07\xC4V[a\x08\x0Ca\x01\xF2V[\x91\x82\x91\x82a\x07\xD4V[\x03\x90\xF3[a\x01\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x089\x90`\x08a\x08>\x93\x02a\x02\xBCV[a\x08\x1EV[\x90V[\x90a\x08L\x91Ta\x08)V[\x90V[a\x08[`\x08_\x90a\x08AV[\x90V[\x91\x90a\x08q\x90_` \x85\x01\x94\x01\x90a\x06,V[V[4a\x08\xA3Wa\x08\x836`\x04a\x02\xADV[a\x08\x9Fa\x08\x8Ea\x08OV[a\x08\x96a\x01\xF2V[\x91\x82\x91\x82a\x08^V[\x03\x90\xF3[a\x01\xF8V[a\x08\xB1\x81a\x02QV[\x03a\x08\xB8WV[_\x80\xFD[\x90P5\x90a\x08\xC9\x82a\x08\xA8V[V[\x90` \x82\x82\x03\x12a\x08\xE4Wa\x08\xE1\x91_\x01a\x08\xBCV[\x90V[a\x01\xFCV[4a\t\x17Wa\t\x01a\x08\xFC6`\x04a\x08\xCBV[a\x16EV[a\t\ta\x01\xF2V[\x80a\t\x13\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[\x90\x91``\x82\x84\x03\x12a\tQWa\tNa\t7\x84_\x85\x01a\x04JV[\x93a\tE\x81` \x86\x01a\x04mV[\x93`@\x01a\x04JV[\x90V[a\x01\xFCV[4a\t\x85Wa\toa\ti6`\x04a\t\x1CV[\x91a\x16\xC1V[a\twa\x01\xF2V[\x80a\t\x81\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[\x90` \x82\x82\x03\x12a\t\xA3Wa\t\xA0\x91_\x01a\x04mV[\x90V[a\x01\xFCV[4a\t\xD6Wa\t\xC0a\t\xBB6`\x04a\t\x8AV[a\x16\xF6V[a\t\xC8a\x01\xF2V[\x80a\t\xD2\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\n\"W[` \x83\x10\x14a\n\x1DWV[a\t\xEEV[\x91`\x7F\x16\x91a\n\x12V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\nXa\nQ\x83a\n\x02V[\x80\x94a\n,V[\x91`\x01\x81\x16\x90\x81_\x14a\n\xAFWP`\x01\x14a\nsW[PPPV[a\n\x80\x91\x92\x93\x94Pa\n5V[\x91_\x92[\x81\x84\x10a\n\x97WPP\x01\x90_\x80\x80a\nnV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\n\x84V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\nnV[\x90a\n\xD4\x91a\n>V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xFF\x90a\n\xD7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0B\x19W`@RV[a\n\xE1V[\x90a\x0B>a\x0B7\x92a\x0B.a\x01\xF2V[\x93\x84\x80\x92a\n\xCAV[\x03\x83a\n\xF5V[V[\x90_\x10a\x0BSWa\x0BP\x90a\x0B\x1EV[\x90V[a\t\xDBV[a\x0Bd`\x07_\x90a\x0B@V[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0B\x9Ea\x0B\xA7` \x93a\x0B\xAC\x93a\x0B\x95\x81a\x0BgV[\x93\x84\x80\x93a\x0BkV[\x95\x86\x91\x01a\x0BtV[a\n\xD7V[\x01\x90V[a\x0B\xC5\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0B\x7FV[\x90V[4a\x0B\xF8Wa\x0B\xD86`\x04a\x02\xADV[a\x0B\xF4a\x0B\xE3a\x0BXV[a\x0B\xEBa\x01\xF2V[\x91\x82\x91\x82a\x0B\xB0V[\x03\x90\xF3[a\x01\xF8V[a\x0C\t`\t_\x90a\x08AV[\x90V[4a\x0C<Wa\x0C\x1C6`\x04a\x02\xADV[a\x0C8a\x0C'a\x0B\xFDV[a\x0C/a\x01\xF2V[\x91\x82\x91\x82a\x08^V[\x03\x90\xF3[a\x01\xF8V[a\x0CM`\x04_\x90a\x02\xDBV[\x90V[4a\x0C\x80Wa\x0C`6`\x04a\x02\xADV[a\x0C|a\x0Cka\x0CAV[a\x0Csa\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xF3[a\x01\xF8V[\x90` \x82\x82\x03\x12a\x0C\x9EWa\x0C\x9B\x91_\x01a\x04JV[\x90V[a\x01\xFCV[4a\x0C\xD1Wa\x0C\xBBa\x0C\xB66`\x04a\x0C\x85V[a\x17\xF7V[a\x0C\xC3a\x01\xF2V[\x80a\x0C\xCD\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x0C\xDF\x81a\x069V[\x03a\x0C\xE6WV[_\x80\xFD[\x90P5\x90a\x0C\xF7\x82a\x0C\xD6V[V[\x90\x91``\x82\x84\x03\x12a\r.Wa\r+a\r\x14\x84_\x85\x01a\x04JV[\x93a\r\"\x81` \x86\x01a\x04JV[\x93`@\x01a\x0C\xEAV[\x90V[a\x01\xFCV[4a\rbWa\rLa\rF6`\x04a\x0C\xF9V[\x91a\x18\xDCV[a\rTa\x01\xF2V[\x80a\r^\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[4a\r\x98Wa\r\x94a\r\x83a\r}6`\x04a\x05\xCBV[\x90a\x19 V[a\r\x8Ba\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xF3[a\x01\xF8V[\x90V[_\x1B\x90V[a\r\xB9a\r\xB4a\r\xBE\x92a\r\x9DV[a\r\xA0V[a\x03\x81V[\x90V[a\r\xCA_a\r\xA5V[\x90V[a\r\xD5a\r\xC1V[\x90V[4a\x0E\x08Wa\r\xE86`\x04a\x02\xADV[a\x0E\x04a\r\xF3a\r\xCDV[a\r\xFBa\x01\xF2V[\x91\x82\x91\x82a\x03\x91V[\x03\x90\xF3[a\x01\xF8V[4a\x0E;Wa\x0E%a\x0E 6`\x04a\t\x8AV[a\x19\xD8V[a\x0E-a\x01\xF2V[\x80a\x0E7\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[a\x0EL`\x02_\x90a\x08AV[\x90V[4a\x0E\x7FWa\x0E_6`\x04a\x02\xADV[a\x0E{a\x0Eja\x0E@V[a\x0Era\x01\xF2V[\x91\x82\x91\x82a\x08^V[\x03\x90\xF3[a\x01\xF8V[4a\x0E\xB3Wa\x0E\x9Da\x0E\x976`\x04a\x05\xCBV[\x90a\x1A\rV[a\x0E\xA5a\x01\xF2V[\x80a\x0E\xAF\x81a\x05\x19V[\x03\x90\xF3[a\x01\xF8V[`\xFF\x16\x90V[a\x0E\xCE\x90`\x08a\x0E\xD3\x93\x02a\x02\xBCV[a\x0E\xB8V[\x90V[\x90a\x0E\xE1\x91Ta\x0E\xBEV[\x90V[a\x0E\xF1`\x02`\x14\x90a\x0E\xD6V[\x90V[4a\x0F$Wa\x0F\x046`\x04a\x02\xADV[a\x0F a\x0F\x0Fa\x0E\xE4V[a\x0F\x17a\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xF3[a\x01\xF8V[`@\x90a\x0FUa\x0FJa\x0F\\\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0B\x7FV[\x96` \x83\x01\x90a\x06,V[\x01\x90a\x02VV[V[4a\x0F\x91Wa\x0Fn6`\x04a\x02\xADV[a\x0F\x8Da\x0Fya\x1A*V[a\x0F\x84\x93\x91\x93a\x01\xF2V[\x93\x84\x93\x84a\x0F)V[\x03\x90\xF3[a\x01\xF8V[`@\x90a\x0F\xBFa\x0F\xC6\x94\x96\x95\x93\x96a\x0F\xB5``\x84\x01\x98_\x85\x01\x90a\x02\xFBV[` \x83\x01\x90a\x02\xFBV[\x01\x90a\x02\xFBV[V[4a\x0F\xFBWa\x0F\xD86`\x04a\x02\xADV[a\x0F\xF7a\x0F\xE3a\x1A\x93V[a\x0F\xEE\x93\x91\x93a\x01\xF2V[\x93\x84\x93\x84a\x0F\x96V[\x03\x90\xF3[a\x01\xF8V[_\x80\xFD[_\x90V[a\x10\x10a\x10\x04V[P\x80a\x10+a\x10%cye\xDB\x0B`\xE0\x1Ba\x02\x04V[\x91a\x02\x04V[\x14\x90\x81\x15a\x108W[P\x90V[a\x10B\x91Pa\x1B!V[_a\x104V[\x90a\x10\\\x93\x92\x91a\x10Wa\x1BsV[a\x10\x8DV[a\x10da\x1B\xF7V[V[`\xA0\x1C\x90V[a\x10xa\x10}\x91a\x10fV[a\x0E\xB8V[\x90V[a\x10\x8A\x90Ta\x10lV[\x90V[\x92\x91\x90a\x10\xA3a\x10\x9D`\x02a\x10\x80V[\x15a\x02QV[a\x10\xB2Wa\x10\xB0\x93a\x10\xCEV[V[_c=\xF5\x10Y`\xE1\x1B\x81R\x80a\x10\xCA`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x92\x91\x90a\x10\xECa\x10\xE6a\x10\xDFa\x06\xB9V[3\x90a\x19 V[\x15a\x02QV[a\x10\xFBWa\x10\xF9\x93a\x12\x8BV[V[_c\\B|\xD9`\xE0\x1B\x81R\x80a\x11\x13`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90V[a\x11.a\x11)a\x113\x92a\r\x9DV[a\x11\x17V[a\x04\x1FV[\x90V[a\x11?\x90a\x11\x1AV[\x90V[a\x11Va\x11Qa\x11[\x92a\r\x9DV[a\x11\x17V[a\x02\xF8V[\x90V[_\x1C\x90V[a\x11oa\x11t\x91a\x11^V[a\x02\xC0V[\x90V[a\x11\x81\x90Ta\x11cV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x11\xA7a\x11\xAD\x91\x93\x92\x93a\x02\xF8V[\x92a\x02\xF8V[\x82\x01\x80\x92\x11a\x11\xB8WV[a\x11\x84V[a\x11\xD1a\x11\xCCa\x11\xD6\x92a\x04\x1FV[a\x11\x17V[a\x04\x1FV[\x90V[a\x11\xE2\x90a\x11\xBDV[\x90V[a\x11\xEE\x90a\x11\xD9V[\x90V[a\x11\xFA\x90a\x11\xBDV[\x90V[a\x12\x06\x90a\x11\xF1V[\x90V[\x90a\x12\x15_\x19\x91a\r\xA0V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x123a\x12.a\x128\x92a\x02\xF8V[a\x11\x17V[a\x02\xF8V[\x90V[\x90V[\x90a\x12Sa\x12Na\x12Z\x92a\x12\x1FV[a\x12;V[\x82Ta\x12\tV[\x90UV[a\x12ja\x12o\x91a\x11^V[a\x08\x1EV[\x90V[a\x12|\x90Ta\x12^V[\x90V[a\x12\x88\x90a\x11\xF1V[\x90V[\x91\x92\x90\x92\x82a\x12\xAAa\x12\xA4a\x12\x9F_a\x116V[a\x04*V[\x91a\x04*V[\x14a\x14\x1AW\x83a\x12\xC2a\x12\xBC_a\x11BV[\x91a\x02\xF8V[\x14a\x13\xFEW\x83a\x12\xE3a\x12\xDDa\x12\xD8`\x03a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11a\x13\xE2Wa\x12\xF0a\x1C`V[a\x13\x04a\x12\xFD`\x05a\x11wV[\x85\x90a\x11\x98V[a\x13\x1Fa\x13\x19a\x13\x14`\x04a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11a\x13\xC6Wa\x13Q\x91a\x13Fa\x134\x85a\x11\xE5V[3a\x13>0a\x11\xFDV[\x90\x88\x92a\x1DcV[\x83\x91\x85\x90\x91\x92a\x1FDV[a\x13na\x13g\x83a\x13b`\x05a\x11wV[a\x11\x98V[`\x05a\x12>V[a\x13x`\x02a\x12rV[\x90a\x13\xC1a\x13\xAFa\x13\xA9\x7F=\xBA@\x1D\xC1\xAB\xBF\x01p\x86\x86K3\xBA\x81_S\xAB<\xDB\xB96k\xA6\xBC\xD8\xEC4-\xDD\x98\xE8\x93a\x12\x7FV[\x93a\x12\x7FV[\x93a\x13\xB8a\x01\xF2V[\x91\x82\x91\x82a\x03\x08V[\x03\x90\xA3V[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x13\xDE`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[_c\x1C4Z/`\xE2\x1B\x81R\x80a\x13\xFA`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a\x14\x16`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x142`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90a\x14B\x93\x92\x91a\x10HV[V[_\x90V[a\x14Q\x90a\x03\x81V[\x90V[\x90a\x14^\x90a\x14HV[_R` R`@_ \x90V[\x90V[a\x14ya\x14~\x91a\x11^V[a\x14jV[\x90V[a\x14\x8B\x90Ta\x14mV[\x90V[`\x01a\x14\xA6a\x14\xAC\x92a\x14\x9Fa\x14DV[P_a\x14TV[\x01a\x14\x81V[\x90V[\x90a\x14\xCA\x91a\x14\xC5a\x14\xC0\x82a\x14\x8EV[a \xDBV[a\x14\xCCV[V[\x90a\x14\xD6\x91a!%V[PV[\x90a\x14\xE3\x91a\x14\xAFV[V[_\x90V[_\x90V[a\x14\xF9a\x14\xFE\x91a\x10fV[a\x07\x95V[\x90V[a\x15\x0B\x90Ta\x14\xEDV[\x90V[a\x15\x16a\x14\xE5V[Pa\x15\x1Fa\x14\xE5V[Pa\x15(a\x14\xE9V[Pa\x153`\x08a\x12rV[a\x15=`\ta\x12rV[\x91a\x15H`\ta\x15\x01V[\x91\x92\x91\x90V[\x90\x80a\x15ia\x15ca\x15^a!\xD0V[a\x04*V[\x91a\x04*V[\x03a\x15zWa\x15w\x91a!\xDDV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x15\x92`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[a\x15\xAF\x90a\x15\xAAa\x15\xA5a\x03RV[a \xDBV[a\x15\xFFV[V[`\xA0\x1B\x90V[\x90a\x15\xC6`\xFF`\xA0\x1B\x91a\x15\xB1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x15\xD9\x90a\x02QV[\x90V[\x90V[\x90a\x15\xF4a\x15\xEFa\x15\xFB\x92a\x15\xD0V[a\x15\xDCV[\x82Ta\x15\xB7V[\x90UV[a\x16\n\x81`\x02a\x15\xDFV[a\x16@\x7F\xB3A\x89\x89\xD0h5\xB5\xC2\x15\xEE\xBBMT\xEDk\xE7\xBB\xB6n\xB4\x80qdt\n.\x08/\xA7\x82\xD5\x91a\x167a\x01\xF2V[\x91\x82\x91\x82a\x02cV[\x03\x90\xA1V[a\x16N\x90a\x15\x96V[V[\x90a\x16k\x92\x91a\x16fa\x16aa\r\xC1V[a \xDBV[a\x16mV[V[\x91\x90\x81a\x16\x8Aa\x16\x84a\x16\x7F_a\x116V[a\x04*V[\x91a\x04*V[\x14a\x16\xA5Wa\x16\x9Ba\x16\xA3\x93a\x11\xE5V[\x91\x90\x91a\"~V[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x16\xBD`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90a\x16\xCC\x92\x91a\x16PV[V[a\x16\xE7\x90a\x16\xE2a\x16\xDDa\x03RV[a \xDBV[a\x16\xE9V[V[a\x16\xF4\x90`\x03a\x12>V[V[a\x16\xFF\x90a\x16\xCEV[V[a\x17\x1A\x90a\x17\x15a\x17\x10a\x03RV[a \xDBV[a\x17ZV[V[\x90a\x17-`\x01\x80`\xA0\x1B\x03\x91a\r\xA0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x17Oa\x17Ja\x17V\x92a\x12\x7FV[a\x177V[\x82Ta\x17\x1CV[\x90UV[\x80a\x17ua\x17oa\x17j_a\x116V[a\x04*V[\x91a\x04*V[\x14a\x17\xDBWa\x17\x84`\x02a\x12rV[a\x17\x8F\x82`\x02a\x17:V[\x90a\x17\xC3a\x17\xBD\x7F\xB0\x7F\x8B\x1B\x85\x04-t\x02,\x86|\x83n\xDE\xB0\xBC\xD7\x0E\x13[\0B9\r+\x1F\xD1\x08)\x80i\x93a\x12\x7FV[\x91a\x12\x7FV[\x91a\x17\xCCa\x01\xF2V[\x80a\x17\xD6\x81a\x05\x19V[\x03\x90\xA3V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x17\xF3`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[a\x18\0\x90a\x17\x01V[V[\x90a\x18\x1D\x92\x91a\x18\x18a\x18\x13a\x03RV[a \xDBV[a\x18zV[V[\x90a\x181c\xFF\xFF\xFF\xFF`\xA0\x1B\x91a\x15\xB1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x18Oa\x18Ja\x18T\x92a\x069V[a\x11\x17V[a\x069V[\x90V[\x90V[\x90a\x18oa\x18ja\x18v\x92a\x18;V[a\x18WV[\x82Ta\x18\x1FV[\x90UV[\x91\x90\x91a\x18\x88\x81`\x08a\x17:V[a\x18\x93\x83`\ta\x17:V[a\x18\x9E\x82`\ta\x18ZV[\x91\x90\x91a\x18\xD7\x7F\x80+\x8C{$p\x9Bl\x9CV\x17\x9D\xCE\xEB\x97|\xC7\xACo\xA4\xF1_\x84\xC9\x9A\x86'\xAB\xFD\x97\xCC5\x93a\x18\xCEa\x01\xF2V[\x93\x84\x93\x84a\x06OV[\x03\x90\xA1V[\x90a\x18\xE7\x92\x91a\x18\x02V[V[\x90a\x18\xF3\x90a\x12\x7FV[_R` R`@_ \x90V[a\x19\x0Ba\x19\x10\x91a\x11^V[a\x0E\xB8V[\x90V[a\x19\x1D\x90Ta\x18\xFFV[\x90V[a\x19F\x91_a\x19;a\x19A\x93a\x194a\x10\x04V[P\x82a\x14TV[\x01a\x18\xE9V[a\x19\x13V[\x90V[a\x19b\x90a\x19]a\x19Xa\x03RV[a \xDBV[a\x19\x87V[V[\x91` a\x19\x85\x92\x94\x93a\x19~`@\x82\x01\x96_\x83\x01\x90a\x02\xFBV[\x01\x90a\x02\xFBV[V[a\x19\x91`\x04a\x11wV[a\x19\x9C\x82`\x04a\x12>V[\x90\x7F |L\xBD\xF5^\xC3\x15\xA1?\r^\x04w2\xEC]\x94}\xA0V\xE7\x06Y:\xA5\t\x90\x99A\xCE\xDF\x91a\x19\xD3a\x19\xCAa\x01\xF2V[\x92\x83\x92\x83a\x19dV[\x03\x90\xA1V[a\x19\xE1\x90a\x19IV[V[\x90a\x19\xFE\x91a\x19\xF9a\x19\xF4\x82a\x14\x8EV[a \xDBV[a\x1A\0V[V[\x90a\x1A\n\x91a!\xDDV[PV[\x90a\x1A\x17\x91a\x19\xE3V[V[``\x90V[a\x1A'\x90a\x0B\x1EV[\x90V[a\x1A2a\x1A\x19V[Pa\x1A;a\x14\xE5V[Pa\x1ADa\x10\x04V[P`\x07a\x1AQ`\x02a\x12rV[\x91a\x1Aea\x1A_`\x02a\x10\x80V[\x92a\x1A\x1EV[\x92\x91\x90V[_\x90V[a\x1A}a\x1A\x83\x91\x93\x92\x93a\x02\xF8V[\x92a\x02\xF8V[\x82\x03\x91\x82\x11a\x1A\x8EWV[a\x11\x84V[a\x1A\x9Ba\x1AjV[Pa\x1A\xA4a\x1AjV[Pa\x1A\xADa\x1AjV[Pa\x1A\xB8`\x05a\x11wV[a\x1A\xC2`\x04a\x11wV[\x91a\x1A\xCD`\x04a\x11wV[a\x1A\xE8a\x1A\xE2a\x1A\xDD`\x05a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11_\x14a\x1B\x13Wa\x1B\x0Ca\x1A\xFC`\x04a\x11wV[a\x1B\x06`\x05a\x11wV[\x90a\x1AnV[[\x91\x92\x91\x90V[a\x1B\x1C_a\x11BV[a\x1B\rV[a\x1B)a\x10\x04V[Pa\x1BCa\x1B=c\x01\xFF\xC9\xA7`\xE0\x1Ba\x02\x04V[\x91a\x02\x04V[\x14\x90V[\x90V[a\x1B^a\x1BYa\x1Bc\x92a\x1BGV[a\x11\x17V[a\x02\xF8V[\x90V[a\x1Bp`\x02a\x1BJV[\x90V[a\x1B}`\x01a\x11wV[a\x1B\x96a\x1B\x90a\x1B\x8Ba\x1BfV[a\x02\xF8V[\x91a\x02\xF8V[\x14a\x1B\xAFWa\x1B\xADa\x1B\xA6a\x1BfV[`\x01a\x12>V[V[_c>\xE5\xAE\xB5`\xE0\x1B\x81R\x80a\x1B\xC7`\x04\x82\x01a\x05\x19V[\x03\x90\xFD[\x90V[a\x1B\xE2a\x1B\xDDa\x1B\xE7\x92a\x1B\xCBV[a\x11\x17V[a\x02\xF8V[\x90V[a\x1B\xF4`\x01a\x1B\xCEV[\x90V[a\x1C\ta\x1C\x02a\x1B\xEAV[`\x01a\x12>V[V[\x90V[a\x1C\"a\x1C\x1Da\x1C'\x92a\x1C\x0BV[a\x11\x17V[a\x02\xF8V[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a\x1CJa\x1CP\x91a\x02\xF8V[\x91a\x02\xF8V[\x90\x81\x15a\x1C[W\x04\x90V[a\x1C*V[a\x1CvBa\x1Cpb\x01Q\x80a\x1C\x0EV[\x90a\x1C>V[\x80a\x1C\x92a\x1C\x8Ca\x1C\x87`\x06a\x11wV[a\x02\xF8V[\x91a\x02\xF8V[\x11a\x1C\x9BW[PV[\x80a\x1C\xFD\x91a\x1C\xAA`\x05a\x11wV[\x7F\xDAN9\xDDV\xD7,.\xE3\xD12\xE0\x14k\xC3\x9E\x90^x\xE3\xBCd\xC4\x01\x90B\x1C{+\xCE\xF2\xAB\x91a\x1C\xE0a\x1C\xD7a\x01\xF2V[\x92\x83\x92\x83a\x19dV[\x03\x90\xA1a\x1C\xF6a\x1C\xEF_a\x11BV[`\x05a\x12>V[`\x06a\x12>V[_a\x1C\x98V[a\x1D\x0C\x90a\x11\xF1V[\x90V[`\xE0\x1B\x90V[a\x1D)a\x1D$a\x1D.\x92a\x069V[a\x1D\x0FV[a\x02\x04V[\x90V[`@\x90a\x1DZa\x1Da\x94\x96\x95\x93\x96a\x1DP``\x84\x01\x98_\x85\x01\x90a\x06,V[` \x83\x01\x90a\x06,V[\x01\x90a\x02\xFBV[V[`\x04\x92a\x1D\x9Da\x1D\xB1\x95\x93a\x1D\xAC\x93\x94a\x1D\x84c#\xB8r\xDD\x92\x94\x91\x92a\x1D\x15V[\x93a\x1D\x8Da\x01\xF2V[\x97\x88\x95` \x87\x01\x90\x81R\x01a\x1D1V[` \x82\x01\x81\x03\x82R\x03\x83a\n\xF5V[a\"\xCCV[V[P\x90V[a\x1D\xC0\x90a\x04\x1FV[\x90V[a\x1D\xCC\x81a\x1D\xB7V[\x03a\x1D\xD3WV[_\x80\xFD[\x90P5\x90a\x1D\xE4\x82a\x1D\xC3V[V[\x91\x90`@\x83\x82\x03\x12a\x1E\x0EW\x80a\x1E\x02a\x1E\x0B\x92_\x86\x01a\x1D\xD7V[\x93` \x01a\x0C\xEAV[\x90V[a\x01\xFCV[a\x1E\x1C\x90a\x11\xF1V[\x90V[a\x1E.a\x1E4\x91\x93\x92\x93a\x1E\x13V[\x92a\x18;V[\x90V[_\x80\xFD[\x90PQ\x90a\x1EH\x82a\x08\xA8V[V[\x90` \x82\x82\x03\x12a\x1EcWa\x1E`\x91_\x01a\x1E;V[\x90V[a\x01\xFCV[\x91` a\x1E\x89\x92\x94\x93a\x1E\x82`@\x82\x01\x96_\x83\x01\x90a\x06,V[\x01\x90a\x02\xFBV[V[a\x1E\x93a\x01\xF2V[=_\x82>=\x90\xFD[a\x1E\xA4\x90a\x11\xBDV[\x90V[a\x1E\xB0\x90a\x1E\x9BV[\x90V[a\x1E\xBC\x90a\x11\xF1V[\x90V[_\x91\x03\x12a\x1E\xC9WV[a\x01\xFCV[` \x91\x81R\x01\x90V[a\x1E\xE2_\x80\x92a\x1E\xCEV[\x01\x90V[\x92a\x1FA\x95\x91\x94a\x1F a\x1F*\x92a\x1F\x16a\x1F4\x96a\x1F\x0C`\xC0\x8A\x01\x9A_\x8B\x01\x90a\x06,V[` \x89\x01\x90a\x06,V[`@\x87\x01\x90a\x06,V[``\x85\x01\x90a\x02\xFBV[`\x80\x83\x01\x90a\x06BV[`\xA0\x81\x83\x03\x91\x01Ra\x1E\xD7V[\x90V[\x92\x90\x91a\x1FR\x81\x83\x90a\x1D\xB3V[a\x1Fda\x1F^_a\x11BV[\x91a\x02\xF8V[\x11_\x14a \xBEWa\x1F\x82\x91a\x1F|\x91\x90\x81\x01\x90a\x1D\xE6V[\x90a\x1E\x1FV[\x92\x90[\x92\x90a\x1F\x98a\x1F\x93\x82a\x11\xE5V[a\x1D\x03V[` c\t^\xA7\xB3\x91a\x1F\xAA`\x02a\x12rV[\x90a\x1F\xC8_\x88\x95a\x1F\xD3a\x1F\xBCa\x01\xF2V[\x97\x88\x96\x87\x95\x86\x94a\x1D\x0FV[\x84R`\x04\x84\x01a\x1EhV[\x03\x92Z\xF1\x80\x15a \xB9Wa \x8DW[Pa\x1F\xFDa\x1F\xF8a\x1F\xF3`\x02a\x12rV[a\x1E\xA7V[a\x1E\xB3V[\x90c\x83\x8B% \x90\x92a \x0F`\x08a\x12rV[\x95\x94\x90\x91\x83;\x15a \x88Wa Ea :\x93_\x97\x93\x88\x94a .a\x01\xF2V[\x9A\x8B\x99\x8A\x98\x89\x97a\x1D\x0FV[\x87R`\x04\x87\x01a\x1E\xE6V[\x03\x92Z\xF1\x80\x15a \x83Wa WW[PV[a v\x90_=\x81\x11a |W[a n\x81\x83a\n\xF5V[\x81\x01\x90a\x1E\xBFV[_a TV[P=a dV[a\x1E\x8BV[a\x1E7V[a \xAD\x90` =\x81\x11a \xB2W[a \xA5\x81\x83a\n\xF5V[\x81\x01\x90a\x1EJV[a\x1F\xE2V[P=a \x9BV[a\x1E\x8BV[PPa \xCA`\ta\x12rV[\x91a \xD5`\ta\x15\x01V[\x92a\x1F\x85V[a \xED\x90a \xE7a!\xD0V[\x90a#\xA3V[V[\x90a \xFB`\xFF\x91a\r\xA0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a!\x1Aa!\x15a!!\x92a\x15\xD0V[a\x15\xDCV[\x82Ta \xEFV[\x90UV[a!-a\x10\x04V[Pa!Ba!<\x82\x84\x90a\x19 V[\x15a\x02QV[_\x14a!\xCAWa!i`\x01a!d_a!\\\x81\x86\x90a\x14TV[\x01\x85\x90a\x18\xE9V[a!\x05V[\x90a!ra!\xD0V[\x90a!\xAFa!\xA9a!\xA3\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x14HV[\x92a\x12\x7FV[\x92a\x12\x7FV[\x92a!\xB8a\x01\xF2V[\x80a!\xC2\x81a\x05\x19V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a!\xD8a\x14\xE5V[P3\x90V[a!\xE5a\x10\x04V[Pa!\xF1\x81\x83\x90a\x19 V[_\x14a\"xWa\"\x17_a\"\x12_a\"\n\x81\x86\x90a\x14TV[\x01\x85\x90a\x18\xE9V[a!\x05V[\x90a\" a!\xD0V[\x90a\"]a\"Wa\"Q\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x14HV[\x92a\x12\x7FV[\x92a\x12\x7FV[\x92a\"fa\x01\xF2V[\x80a\"p\x81a\x05\x19V[\x03\x90\xA4`\x01\x90V[PP_\x90V[\x90a\"\xC5a\"\xCA\x93a\"\xB6`\x04\x94\x93a\"\x9Dc\xA9\x05\x9C\xBB\x91\x93\x91a\x1D\x15V[\x92a\"\xA6a\x01\xF2V[\x96\x87\x94` \x86\x01\x90\x81R\x01a\x1EhV[` \x82\x01\x81\x03\x82R\x03\x83a\n\xF5V[a\"\xCCV[V[\x90_` \x91a\"\xD9a\x1AjV[Pa\"\xE2a\x1AjV[P\x82\x81Q\x91\x01\x82\x85Z\xF1\x15a#uW=_Q\x90a#\x07a#\x01_a\x11BV[\x91a\x02\xF8V[\x14_\x14a#[WPa#\x18\x81a\x1D\x03V[;a#+a#%_a\x11BV[\x91a\x02\xF8V[\x14[a#4WPV[a#@a#W\x91a\x1D\x03V[_\x91\x82\x91cRt\xAF\xE7`\xE0\x1B\x83R`\x04\x83\x01a\x08^V[\x03\x90\xFD[a#na#h`\x01a\x1B\xCEV[\x91a\x02\xF8V[\x14\x15a#-V[`@Q=_\x82>=\x90\xFD[\x91` a#\xA1\x92\x94\x93a#\x9A`@\x82\x01\x96_\x83\x01\x90a\x06,V[\x01\x90a\x03\x84V[V[\x90a#\xB8a#\xB2\x83\x83\x90a\x19 V[\x15a\x02QV[a#\xC0WPPV[a#\xDA_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a#\x80V[\x03\x90\xFD",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `BridgeCallFailed(string)` and selector `0xd245b2d3`.
```solidity
error BridgeCallFailed(string reason);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeCallFailed {
        #[allow(missing_docs)]
        pub reason: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeCallFailed> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeCallFailed) -> Self {
                (value.reason,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeCallFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { reason: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeCallFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeCallFailed(string)";
            const SELECTOR: [u8; 4] = [210u8, 69u8, 178u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.reason,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `BridgeNotActive()` and selector `0x7bea20b2`.
```solidity
error BridgeNotActive();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeNotActive {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeNotActive) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeNotActive()";
            const SELECTOR: [u8; 4] = [123u8, 234u8, 32u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ExcessiveAmount()` and selector `0x70d168bc`.
```solidity
error ExcessiveAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExcessiveAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExcessiveAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ExcessiveAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExcessiveAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExcessiveAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExcessiveAmount()";
            const SELECTOR: [u8; 4] = [112u8, 209u8, 104u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ReentrancyGuardReentrantCall()` and selector `0x3ee5aeb5`.
```solidity
error ReentrancyGuardReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrancyGuardReentrantCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrancyGuardReentrantCall>
        for UnderlyingRustTuple<'_> {
            fn from(value: ReentrancyGuardReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ReentrancyGuardReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrancyGuardReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrancyGuardReentrantCall()";
            const SELECTOR: [u8; 4] = [62u8, 229u8, 174u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `SafeERC20FailedOperation(address)` and selector `0x5274afe7`.
```solidity
error SafeERC20FailedOperation(address token);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeERC20FailedOperation {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeERC20FailedOperation>
        for UnderlyingRustTuple<'_> {
            fn from(value: SafeERC20FailedOperation) -> Self {
                (value.token,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SafeERC20FailedOperation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { token: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeERC20FailedOperation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeERC20FailedOperation(address)";
            const SELECTOR: [u8; 4] = [82u8, 116u8, 175u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `UnauthorizedCaller()` and selector `0x5c427cd9`.
```solidity
error UnauthorizedCaller();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnauthorizedCaller {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorizedCaller> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorizedCaller) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorizedCaller {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorizedCaller {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorizedCaller()";
            const SELECTOR: [u8; 4] = [92u8, 66u8, 124u8, 217u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroAmount()` and selector `0x1f2a2005`.
```solidity
error ZeroAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAmount {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAmount()";
            const SELECTOR: [u8; 4] = [31u8, 42u8, 32u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `BridgeExecuted(address,uint256,address)` and selector `0x3dba401dc1abbf017086864b33ba815f53ab3cdbb9366ba6bcd8ec342ddd98e8`.
```solidity
event BridgeExecuted(address indexed token, uint256 amount, address indexed target);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeExecuted {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeExecuted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeExecuted(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    token: topics.1,
                    amount: data.0,
                    target: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.token.clone(), self.target.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.token,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.target,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeStatusUpdated(bool)` and selector `0xb3418989d06835b5c215eebb4d54ed6be7bbb66eb4807164740a2e082fa782d5`.
```solidity
event BridgeStatusUpdated(bool active);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeStatusUpdated {
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeStatusUpdated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "BridgeStatusUpdated(bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { active: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeStatusUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeStatusUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeStatusUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `BridgeTargetUpdated(address,address)` and selector `0xb07f8b1b85042d74022c867c836edeb0bcd70e135b0042390d2b1fd108298069`.
```solidity
event BridgeTargetUpdated(address indexed oldTarget, address indexed newTarget);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeTargetUpdated {
        #[allow(missing_docs)]
        pub oldTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newTarget: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeTargetUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeTargetUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldTarget: topics.1,
                    newTarget: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldTarget.clone(),
                    self.newTarget.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldTarget,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newTarget,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeTargetUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeTargetUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeTargetUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitReset(uint256,uint256)` and selector `0xda4e39dd56d72c2ee3d132e0146bc39e905e78e3bc64c40190421c7b2bcef2ab`.
```solidity
event DailyLimitReset(uint256 day, uint256 previousUsed);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitReset {
        #[allow(missing_docs)]
        pub day: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousUsed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitReset {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitReset(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    day: data.0,
                    previousUsed: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.day),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousUsed),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitReset {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitReset> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitReset) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DailyLimitUpdated(uint256,uint256)` and selector `0x207c4cbdf55ec315a13f0d5e047732ec5d947da056e706593aa509909941cedf`.
```solidity
event DailyLimitUpdated(uint256 oldLimit, uint256 newLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DailyLimitUpdated {
        #[allow(missing_docs)]
        pub oldLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DailyLimitUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DailyLimitUpdated(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldLimit: data.0,
                    newLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DailyLimitUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DailyLimitUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DailyLimitUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OptimismConfigUpdated(address,address,uint32)` and selector `0x802b8c7b24709b6c9c56179dceeb977cc7ac6fa4f15f84c99a8627abfd97cc35`.
```solidity
event OptimismConfigUpdated(address l2Token, address recipient, uint32 l2Gas);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OptimismConfigUpdated {
        #[allow(missing_docs)]
        pub l2Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub l2Gas: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OptimismConfigUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "OptimismConfigUpdated(address,address,uint32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                128u8,
                43u8,
                140u8,
                123u8,
                36u8,
                112u8,
                155u8,
                108u8,
                156u8,
                86u8,
                23u8,
                157u8,
                206u8,
                235u8,
                151u8,
                124u8,
                199u8,
                172u8,
                111u8,
                164u8,
                241u8,
                95u8,
                132u8,
                201u8,
                154u8,
                134u8,
                39u8,
                171u8,
                253u8,
                151u8,
                204u8,
                53u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    l2Token: data.0,
                    recipient: data.1,
                    l2Gas: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l2Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Gas),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OptimismConfigUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OptimismConfigUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OptimismConfigUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin, address caller, address _bridgeTarget, uint256 _maxSingleTransfer, uint256 _dailyLimit, address _l2Token, address _recipient, uint32 _l2Gas);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub caller: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _bridgeTarget: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _l2Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _l2Gas: u32,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                u32,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.admin,
                        value.caller,
                        value._bridgeTarget,
                        value._maxSingleTransfer,
                        value._dailyLimit,
                        value._l2Token,
                        value._recipient,
                        value._l2Gas,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        caller: tuple.1,
                        _bridgeTarget: tuple.2,
                        _maxSingleTransfer: tuple.3,
                        _dailyLimit: tuple.4,
                        _l2Token: tuple.5,
                        _recipient: tuple.6,
                        _l2Gas: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.caller,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._bridgeTarget,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxSingleTransfer),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._dailyLimit),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._l2Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._l2Gas),
                )
            }
        }
    };
    /**Function with signature `BRIDGE_ADMIN_ROLE()` and selector `0x118c38c7`.
```solidity
function BRIDGE_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_ADMIN_ROLE()`](BRIDGE_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 56u8, 199u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `BRIDGE_CALLER_ROLE()` and selector `0x3462fac3`.
```solidity
function BRIDGE_CALLER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLECall {}
    ///Container type for the return parameters of the [`BRIDGE_CALLER_ROLE()`](BRIDGE_CALLER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_CALLER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_CALLER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_CALLER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_CALLER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_CALLER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = BRIDGE_CALLER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_CALLER_ROLE()";
            const SELECTOR: [u8; 4] = [52u8, 98u8, 250u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeActive()` and selector `0xead93c8f`.
```solidity
function bridgeActive() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveCall {}
    ///Container type for the return parameters of the [`bridgeActive()`](bridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeActiveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeActiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeActiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeActiveReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeActive()";
            const SELECTOR: [u8; 4] = [234u8, 217u8, 60u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeName()` and selector `0x65d7a3c9`.
```solidity
function bridgeName() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameCall {}
    ///Container type for the return parameters of the [`bridgeName()`](bridgeNameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeNameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeNameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeNameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeNameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeNameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeNameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeName()";
            const SELECTOR: [u8; 4] = [101u8, 215u8, 163u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `bridgeTarget()` and selector `0xc9f5b63e`.
```solidity
function bridgeTarget() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetCall {}
    ///Container type for the return parameters of the [`bridgeTarget()`](bridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeTargetReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeTargetReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeTargetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeTargetCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeTargetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeTarget()";
            const SELECTOR: [u8; 4] = [201u8, 245u8, 182u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyLimit()` and selector `0x67eeba0c`.
```solidity
function dailyLimit() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitCall {}
    ///Container type for the return parameters of the [`dailyLimit()`](dailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyLimitReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyLimitReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyLimitCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyLimitReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyLimit()";
            const SELECTOR: [u8; 4] = [103u8, 238u8, 186u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `dailyUsed()` and selector `0x1033b4cc`.
```solidity
function dailyUsed() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedCall {}
    ///Container type for the return parameters of the [`dailyUsed()`](dailyUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct dailyUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedCall> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<dailyUsedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: dailyUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for dailyUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for dailyUsedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = dailyUsedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "dailyUsed()";
            const SELECTOR: [u8; 4] = [16u8, 51u8, 180u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `executeBridge(address,uint256,bytes)` and selector `0x18b68b8c`.
```solidity
function executeBridge(address token, uint256 amount, bytes memory dynamicData) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dynamicData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`executeBridge(address,uint256,bytes)`](executeBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeBridgeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeCall) -> Self {
                    (value.token, value.amount, value.dynamicData)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        dynamicData: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeBridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeBridgeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeBridgeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeBridgeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "executeBridge(address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [24u8, 182u8, 139u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.dynamicData,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getBridgeInfo()` and selector `0xede7cebd`.
```solidity
function getBridgeInfo() external view returns (string memory name, address target, bool active);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoCall {}
    ///Container type for the return parameters of the [`getBridgeInfo()`](getBridgeInfoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeInfoReturn {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub active: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeInfoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeInfoReturn) -> Self {
                    (value.name, value.target, value.active)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeInfoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name: tuple.0,
                        target: tuple.1,
                        active: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeInfoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getBridgeInfoReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeInfo()";
            const SELECTOR: [u8; 4] = [237u8, 231u8, 206u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getDailyUsage()` and selector `0xfb8c4b51`.
```solidity
function getDailyUsage() external view returns (uint256 used, uint256 limit, uint256 remaining);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageCall {}
    ///Container type for the return parameters of the [`getDailyUsage()`](getDailyUsageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDailyUsageReturn {
        #[allow(missing_docs)]
        pub used: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub remaining: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageCall> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDailyUsageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getDailyUsageReturn) -> Self {
                    (value.used, value.limit, value.remaining)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getDailyUsageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        used: tuple.0,
                        limit: tuple.1,
                        remaining: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getDailyUsageCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getDailyUsageReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getDailyUsage()";
            const SELECTOR: [u8; 4] = [251u8, 140u8, 75u8, 81u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getOptimismConfig()` and selector `0x32d4f504`.
```solidity
function getOptimismConfig() external view returns (address l2TokenAddr, address recipientAddr, uint32 gasLimit);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOptimismConfigCall {}
    ///Container type for the return parameters of the [`getOptimismConfig()`](getOptimismConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getOptimismConfigReturn {
        #[allow(missing_docs)]
        pub l2TokenAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub recipientAddr: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub gasLimit: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOptimismConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOptimismConfigCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOptimismConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                u32,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getOptimismConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getOptimismConfigReturn) -> Self {
                    (value.l2TokenAddr, value.recipientAddr, value.gasLimit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getOptimismConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        l2TokenAddr: tuple.0,
                        recipientAddr: tuple.1,
                        gasLimit: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getOptimismConfigCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getOptimismConfigReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getOptimismConfig()";
            const SELECTOR: [u8; 4] = [50u8, 212u8, 245u8, 4u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2Gas()` and selector `0x3cbb6979`.
```solidity
function l2Gas() external view returns (uint32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2GasCall {}
    ///Container type for the return parameters of the [`l2Gas()`](l2GasCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2GasReturn {
        #[allow(missing_docs)]
        pub _0: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2GasCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2GasCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2GasCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2GasReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l2GasReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2GasReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2GasCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2GasReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2Gas()";
            const SELECTOR: [u8; 4] = [60u8, 187u8, 105u8, 121u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `l2Token()` and selector `0x56eff267`.
```solidity
function l2Token() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2TokenCall {}
    ///Container type for the return parameters of the [`l2Token()`](l2TokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct l2TokenReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2TokenCall> for UnderlyingRustTuple<'_> {
                fn from(value: l2TokenCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2TokenCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<l2TokenReturn> for UnderlyingRustTuple<'_> {
                fn from(value: l2TokenReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for l2TokenReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for l2TokenCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = l2TokenReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "l2Token()";
            const SELECTOR: [u8; 4] = [86u8, 239u8, 242u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `lastResetDay()` and selector `0x1259a5c8`.
```solidity
function lastResetDay() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayCall {}
    ///Container type for the return parameters of the [`lastResetDay()`](lastResetDayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastResetDayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayCall> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastResetDayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: lastResetDayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lastResetDayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastResetDayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastResetDayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastResetDay()";
            const SELECTOR: [u8; 4] = [18u8, 89u8, 165u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `maxSingleTransfer()` and selector `0x36b089d8`.
```solidity
function maxSingleTransfer() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferCall {}
    ///Container type for the return parameters of the [`maxSingleTransfer()`](maxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxSingleTransferReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxSingleTransferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxSingleTransferCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxSingleTransferReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxSingleTransfer()";
            const SELECTOR: [u8; 4] = [54u8, 176u8, 137u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recipient()` and selector `0x66d003ac`.
```solidity
function recipient() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientCall {}
    ///Container type for the return parameters of the [`recipient()`](recipientCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recipientReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientCall> for UnderlyingRustTuple<'_> {
                fn from(value: recipientCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recipientReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recipientReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recipientReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recipientCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recipientReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recipient()";
            const SELECTOR: [u8; 4] = [102u8, 208u8, 3u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `recoverTokens(address,uint256,address)` and selector `0x61b0a56e`.
```solidity
function recoverTokens(address token, uint256 amount, address to) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`recoverTokens(address,uint256,address)`](recoverTokensCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct recoverTokensReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensCall> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensCall) -> Self {
                    (value.token, value.amount, value.to)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        amount: tuple.1,
                        to: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<recoverTokensReturn> for UnderlyingRustTuple<'_> {
                fn from(value: recoverTokensReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for recoverTokensReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for recoverTokensCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = recoverTokensReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "recoverTokens(address,uint256,address)";
            const SELECTOR: [u8; 4] = [97u8, 176u8, 165u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeActive(bool)` and selector `0x5ab1d61c`.
```solidity
function setBridgeActive(bool active) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveCall {
        #[allow(missing_docs)]
        pub active: bool,
    }
    ///Container type for the return parameters of the [`setBridgeActive(bool)`](setBridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveCall) -> Self {
                    (value.active,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { active: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeActiveCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeActive(bool)";
            const SELECTOR: [u8; 4] = [90u8, 177u8, 214u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.active,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBridgeTarget(address)` and selector `0x6bcc8c14`.
```solidity
function setBridgeTarget(address target) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetCall {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setBridgeTarget(address)`](setBridgeTargetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeTargetReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetCall) -> Self {
                    (value.target,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeTargetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { target: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeTargetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeTargetReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeTargetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeTargetCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeTargetReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeTarget(address)";
            const SELECTOR: [u8; 4] = [107u8, 204u8, 140u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setDailyLimit(uint256)` and selector `0xb20d30a9`.
```solidity
function setDailyLimit(uint256 limit) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitCall {
        #[allow(missing_docs)]
        pub limit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setDailyLimit(uint256)`](setDailyLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setDailyLimitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitCall> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitCall) -> Self {
                    (value.limit,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { limit: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setDailyLimitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setDailyLimitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setDailyLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setDailyLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setDailyLimitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setDailyLimit(uint256)";
            const SELECTOR: [u8; 4] = [178u8, 13u8, 48u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.limit),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setMaxSingleTransfer(uint256)` and selector `0x63221490`.
```solidity
function setMaxSingleTransfer(uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferCall {
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setMaxSingleTransfer(uint256)`](setMaxSingleTransferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setMaxSingleTransferReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferCall) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setMaxSingleTransferReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setMaxSingleTransferReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setMaxSingleTransferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setMaxSingleTransferCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setMaxSingleTransferReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setMaxSingleTransfer(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 34u8, 20u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setOptimismConfig(address,address,uint32)` and selector `0x85931b74`.
```solidity
function setOptimismConfig(address _l2Token, address _recipient, uint32 _l2Gas) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setOptimismConfigCall {
        #[allow(missing_docs)]
        pub _l2Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _recipient: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _l2Gas: u32,
    }
    ///Container type for the return parameters of the [`setOptimismConfig(address,address,uint32)`](setOptimismConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setOptimismConfigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                u32,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOptimismConfigCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setOptimismConfigCall) -> Self {
                    (value._l2Token, value._recipient, value._l2Gas)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setOptimismConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _l2Token: tuple.0,
                        _recipient: tuple.1,
                        _l2Gas: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setOptimismConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setOptimismConfigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setOptimismConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setOptimismConfigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setOptimismConfigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setOptimismConfig(address,address,uint32)";
            const SELECTOR: [u8; 4] = [133u8, 147u8, 27u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._l2Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._recipient,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._l2Gas),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OptimismBridgeProxy`](self) function calls.
    pub enum OptimismBridgeProxyCalls {
        #[allow(missing_docs)]
        BRIDGE_ADMIN_ROLE(BRIDGE_ADMIN_ROLECall),
        #[allow(missing_docs)]
        BRIDGE_CALLER_ROLE(BRIDGE_CALLER_ROLECall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        bridgeActive(bridgeActiveCall),
        #[allow(missing_docs)]
        bridgeName(bridgeNameCall),
        #[allow(missing_docs)]
        bridgeTarget(bridgeTargetCall),
        #[allow(missing_docs)]
        dailyLimit(dailyLimitCall),
        #[allow(missing_docs)]
        dailyUsed(dailyUsedCall),
        #[allow(missing_docs)]
        executeBridge(executeBridgeCall),
        #[allow(missing_docs)]
        getBridgeInfo(getBridgeInfoCall),
        #[allow(missing_docs)]
        getDailyUsage(getDailyUsageCall),
        #[allow(missing_docs)]
        getOptimismConfig(getOptimismConfigCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        l2Gas(l2GasCall),
        #[allow(missing_docs)]
        l2Token(l2TokenCall),
        #[allow(missing_docs)]
        lastResetDay(lastResetDayCall),
        #[allow(missing_docs)]
        maxSingleTransfer(maxSingleTransferCall),
        #[allow(missing_docs)]
        recipient(recipientCall),
        #[allow(missing_docs)]
        recoverTokens(recoverTokensCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        setBridgeActive(setBridgeActiveCall),
        #[allow(missing_docs)]
        setBridgeTarget(setBridgeTargetCall),
        #[allow(missing_docs)]
        setDailyLimit(setDailyLimitCall),
        #[allow(missing_docs)]
        setMaxSingleTransfer(setMaxSingleTransferCall),
        #[allow(missing_docs)]
        setOptimismConfig(setOptimismConfigCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
    }
    #[automatically_derived]
    impl OptimismBridgeProxyCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [16u8, 51u8, 180u8, 204u8],
            [17u8, 140u8, 56u8, 199u8],
            [18u8, 89u8, 165u8, 200u8],
            [24u8, 182u8, 139u8, 140u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [50u8, 212u8, 245u8, 4u8],
            [52u8, 98u8, 250u8, 195u8],
            [54u8, 86u8, 138u8, 190u8],
            [54u8, 176u8, 137u8, 216u8],
            [60u8, 187u8, 105u8, 121u8],
            [86u8, 239u8, 242u8, 103u8],
            [90u8, 177u8, 214u8, 28u8],
            [97u8, 176u8, 165u8, 110u8],
            [99u8, 34u8, 20u8, 144u8],
            [101u8, 215u8, 163u8, 201u8],
            [102u8, 208u8, 3u8, 172u8],
            [103u8, 238u8, 186u8, 12u8],
            [107u8, 204u8, 140u8, 20u8],
            [133u8, 147u8, 27u8, 116u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [178u8, 13u8, 48u8, 169u8],
            [201u8, 245u8, 182u8, 62u8],
            [213u8, 71u8, 116u8, 31u8],
            [234u8, 217u8, 60u8, 143u8],
            [237u8, 231u8, 206u8, 189u8],
            [251u8, 140u8, 75u8, 81u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OptimismBridgeProxyCalls {
        const NAME: &'static str = "OptimismBridgeProxyCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 29usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::BRIDGE_ADMIN_ROLE(_) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::BRIDGE_CALLER_ROLE(_) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeActive(_) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeName(_) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeTarget(_) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyLimit(_) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::dailyUsed(_) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::executeBridge(_) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeInfo(_) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getDailyUsage(_) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getOptimismConfig(_) => {
                    <getOptimismConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::l2Gas(_) => <l2GasCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::l2Token(_) => <l2TokenCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::lastResetDay(_) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxSingleTransfer(_) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recipient(_) => {
                    <recipientCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::recoverTokens(_) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeActive(_) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeTarget(_) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setDailyLimit(_) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setMaxSingleTransfer(_) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setOptimismConfig(_) => {
                    <setOptimismConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn dailyUsed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <dailyUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::dailyUsed)
                    }
                    dailyUsed
                },
                {
                    fn BRIDGE_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::BRIDGE_ADMIN_ROLE)
                    }
                    BRIDGE_ADMIN_ROLE
                },
                {
                    fn lastResetDay(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <lastResetDayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::lastResetDay)
                    }
                    lastResetDay
                },
                {
                    fn executeBridge(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <executeBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::executeBridge)
                    }
                    executeBridge
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn getOptimismConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <getOptimismConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::getOptimismConfig)
                    }
                    getOptimismConfig
                },
                {
                    fn BRIDGE_CALLER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::BRIDGE_CALLER_ROLE)
                    }
                    BRIDGE_CALLER_ROLE
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn maxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::maxSingleTransfer)
                    }
                    maxSingleTransfer
                },
                {
                    fn l2Gas(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <l2GasCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::l2Gas)
                    }
                    l2Gas
                },
                {
                    fn l2Token(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <l2TokenCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::l2Token)
                    }
                    l2Token
                },
                {
                    fn setBridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::setBridgeActive)
                    }
                    setBridgeActive
                },
                {
                    fn recoverTokens(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <recoverTokensCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::recoverTokens)
                    }
                    recoverTokens
                },
                {
                    fn setMaxSingleTransfer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::setMaxSingleTransfer)
                    }
                    setMaxSingleTransfer
                },
                {
                    fn bridgeName(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <bridgeNameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::bridgeName)
                    }
                    bridgeName
                },
                {
                    fn recipient(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <recipientCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::recipient)
                    }
                    recipient
                },
                {
                    fn dailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <dailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::dailyLimit)
                    }
                    dailyLimit
                },
                {
                    fn setBridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::setBridgeTarget)
                    }
                    setBridgeTarget
                },
                {
                    fn setOptimismConfig(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <setOptimismConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::setOptimismConfig)
                    }
                    setOptimismConfig
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn setDailyLimit(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <setDailyLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::setDailyLimit)
                    }
                    setDailyLimit
                },
                {
                    fn bridgeTarget(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <bridgeTargetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::bridgeTarget)
                    }
                    bridgeTarget
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn bridgeActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <bridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::bridgeActive)
                    }
                    bridgeActive
                },
                {
                    fn getBridgeInfo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::getBridgeInfo)
                    }
                    getBridgeInfo
                },
                {
                    fn getDailyUsage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyCalls> {
                        <getDailyUsageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyCalls::getDailyUsage)
                    }
                    getDailyUsage
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getOptimismConfig(inner) => {
                    <getOptimismConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::l2Gas(inner) => {
                    <l2GasCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::l2Token(inner) => {
                    <l2TokenCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setOptimismConfig(inner) => {
                    <setOptimismConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::BRIDGE_ADMIN_ROLE(inner) => {
                    <BRIDGE_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BRIDGE_CALLER_ROLE(inner) => {
                    <BRIDGE_CALLER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeActive(inner) => {
                    <bridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeName(inner) => {
                    <bridgeNameCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeTarget(inner) => {
                    <bridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyLimit(inner) => {
                    <dailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::dailyUsed(inner) => {
                    <dailyUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::executeBridge(inner) => {
                    <executeBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeInfo(inner) => {
                    <getBridgeInfoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getDailyUsage(inner) => {
                    <getDailyUsageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getOptimismConfig(inner) => {
                    <getOptimismConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::l2Gas(inner) => {
                    <l2GasCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::l2Token(inner) => {
                    <l2TokenCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::lastResetDay(inner) => {
                    <lastResetDayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxSingleTransfer(inner) => {
                    <maxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recipient(inner) => {
                    <recipientCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::recoverTokens(inner) => {
                    <recoverTokensCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeTarget(inner) => {
                    <setBridgeTargetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setDailyLimit(inner) => {
                    <setDailyLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setMaxSingleTransfer(inner) => {
                    <setMaxSingleTransferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setOptimismConfig(inner) => {
                    <setOptimismConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`OptimismBridgeProxy`](self) custom errors.
    pub enum OptimismBridgeProxyErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        BridgeCallFailed(BridgeCallFailed),
        #[allow(missing_docs)]
        BridgeNotActive(BridgeNotActive),
        #[allow(missing_docs)]
        ExcessiveAmount(ExcessiveAmount),
        #[allow(missing_docs)]
        ReentrancyGuardReentrantCall(ReentrancyGuardReentrantCall),
        #[allow(missing_docs)]
        SafeERC20FailedOperation(SafeERC20FailedOperation),
        #[allow(missing_docs)]
        UnauthorizedCaller(UnauthorizedCaller),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroAmount(ZeroAmount),
    }
    #[automatically_derived]
    impl OptimismBridgeProxyErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [31u8, 42u8, 32u8, 5u8],
            [62u8, 229u8, 174u8, 181u8],
            [82u8, 116u8, 175u8, 231u8],
            [92u8, 66u8, 124u8, 217u8],
            [102u8, 151u8, 178u8, 50u8],
            [112u8, 209u8, 104u8, 188u8],
            [123u8, 234u8, 32u8, 178u8],
            [210u8, 69u8, 178u8, 211u8],
            [217u8, 46u8, 35u8, 61u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OptimismBridgeProxyErrors {
        const NAME: &'static str = "OptimismBridgeProxyErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 10usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeCallFailed(_) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeNotActive(_) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExcessiveAmount(_) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrancyGuardReentrantCall(_) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeERC20FailedOperation(_) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorizedCaller(_) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAmount(_) => {
                    <ZeroAmount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors>] = &[
                {
                    fn ZeroAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn ReentrancyGuardReentrantCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::ReentrancyGuardReentrantCall)
                    }
                    ReentrancyGuardReentrantCall
                },
                {
                    fn SafeERC20FailedOperation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::SafeERC20FailedOperation)
                    }
                    SafeERC20FailedOperation
                },
                {
                    fn UnauthorizedCaller(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <UnauthorizedCaller as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::UnauthorizedCaller)
                    }
                    UnauthorizedCaller
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExcessiveAmount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <ExcessiveAmount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::ExcessiveAmount)
                    }
                    ExcessiveAmount
                },
                {
                    fn BridgeNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <BridgeNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::BridgeNotActive)
                    }
                    BridgeNotActive
                },
                {
                    fn BridgeCallFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <BridgeCallFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::BridgeCallFailed)
                    }
                    BridgeCallFailed
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OptimismBridgeProxyErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OptimismBridgeProxyErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                OptimismBridgeProxyErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeCallFailed(inner) => {
                    <BridgeCallFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExcessiveAmount(inner) => {
                    <ExcessiveAmount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ReentrancyGuardReentrantCall(inner) => {
                    <ReentrancyGuardReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeERC20FailedOperation(inner) => {
                    <SafeERC20FailedOperation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnauthorizedCaller(inner) => {
                    <UnauthorizedCaller as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`OptimismBridgeProxy`](self) events.
    pub enum OptimismBridgeProxyEvents {
        #[allow(missing_docs)]
        BridgeExecuted(BridgeExecuted),
        #[allow(missing_docs)]
        BridgeStatusUpdated(BridgeStatusUpdated),
        #[allow(missing_docs)]
        BridgeTargetUpdated(BridgeTargetUpdated),
        #[allow(missing_docs)]
        DailyLimitReset(DailyLimitReset),
        #[allow(missing_docs)]
        DailyLimitUpdated(DailyLimitUpdated),
        #[allow(missing_docs)]
        OptimismConfigUpdated(OptimismConfigUpdated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl OptimismBridgeProxyEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                32u8,
                124u8,
                76u8,
                189u8,
                245u8,
                94u8,
                195u8,
                21u8,
                161u8,
                63u8,
                13u8,
                94u8,
                4u8,
                119u8,
                50u8,
                236u8,
                93u8,
                148u8,
                125u8,
                160u8,
                86u8,
                231u8,
                6u8,
                89u8,
                58u8,
                165u8,
                9u8,
                144u8,
                153u8,
                65u8,
                206u8,
                223u8,
            ],
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                61u8,
                186u8,
                64u8,
                29u8,
                193u8,
                171u8,
                191u8,
                1u8,
                112u8,
                134u8,
                134u8,
                75u8,
                51u8,
                186u8,
                129u8,
                95u8,
                83u8,
                171u8,
                60u8,
                219u8,
                185u8,
                54u8,
                107u8,
                166u8,
                188u8,
                216u8,
                236u8,
                52u8,
                45u8,
                221u8,
                152u8,
                232u8,
            ],
            [
                128u8,
                43u8,
                140u8,
                123u8,
                36u8,
                112u8,
                155u8,
                108u8,
                156u8,
                86u8,
                23u8,
                157u8,
                206u8,
                235u8,
                151u8,
                124u8,
                199u8,
                172u8,
                111u8,
                164u8,
                241u8,
                95u8,
                132u8,
                201u8,
                154u8,
                134u8,
                39u8,
                171u8,
                253u8,
                151u8,
                204u8,
                53u8,
            ],
            [
                176u8,
                127u8,
                139u8,
                27u8,
                133u8,
                4u8,
                45u8,
                116u8,
                2u8,
                44u8,
                134u8,
                124u8,
                131u8,
                110u8,
                222u8,
                176u8,
                188u8,
                215u8,
                14u8,
                19u8,
                91u8,
                0u8,
                66u8,
                57u8,
                13u8,
                43u8,
                31u8,
                209u8,
                8u8,
                41u8,
                128u8,
                105u8,
            ],
            [
                179u8,
                65u8,
                137u8,
                137u8,
                208u8,
                104u8,
                53u8,
                181u8,
                194u8,
                21u8,
                238u8,
                187u8,
                77u8,
                84u8,
                237u8,
                107u8,
                231u8,
                187u8,
                182u8,
                110u8,
                180u8,
                128u8,
                113u8,
                100u8,
                116u8,
                10u8,
                46u8,
                8u8,
                47u8,
                167u8,
                130u8,
                213u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                218u8,
                78u8,
                57u8,
                221u8,
                86u8,
                215u8,
                44u8,
                46u8,
                227u8,
                209u8,
                50u8,
                224u8,
                20u8,
                107u8,
                195u8,
                158u8,
                144u8,
                94u8,
                120u8,
                227u8,
                188u8,
                100u8,
                196u8,
                1u8,
                144u8,
                66u8,
                28u8,
                123u8,
                43u8,
                206u8,
                242u8,
                171u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for OptimismBridgeProxyEvents {
        const NAME: &'static str = "OptimismBridgeProxyEvents";
        const COUNT: usize = 9usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BridgeExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeExecuted)
                }
                Some(
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeStatusUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeStatusUpdated)
                }
                Some(
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeTargetUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BridgeTargetUpdated)
                }
                Some(<DailyLimitReset as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DailyLimitReset as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitReset)
                }
                Some(
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DailyLimitUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DailyLimitUpdated)
                }
                Some(
                    <OptimismConfigUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OptimismConfigUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OptimismConfigUpdated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for OptimismBridgeProxyEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OptimismConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BridgeExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeStatusUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeTargetUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitReset(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DailyLimitUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OptimismConfigUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OptimismBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`OptimismBridgeProxyInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OptimismBridgeProxyInstance<T, P, N> {
        OptimismBridgeProxyInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _l2Token: alloy::sol_types::private::Address,
        _recipient: alloy::sol_types::private::Address,
        _l2Gas: u32,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OptimismBridgeProxyInstance<T, P, N>>,
    > {
        OptimismBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _l2Token,
            _recipient,
            _l2Gas,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        caller: alloy::sol_types::private::Address,
        _bridgeTarget: alloy::sol_types::private::Address,
        _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
        _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
        _l2Token: alloy::sol_types::private::Address,
        _recipient: alloy::sol_types::private::Address,
        _l2Gas: u32,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        OptimismBridgeProxyInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            admin,
            caller,
            _bridgeTarget,
            _maxSingleTransfer,
            _dailyLimit,
            _l2Token,
            _recipient,
            _l2Gas,
        )
    }
    /**A [`OptimismBridgeProxy`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OptimismBridgeProxy`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OptimismBridgeProxyInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OptimismBridgeProxyInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OptimismBridgeProxyInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptimismBridgeProxyInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OptimismBridgeProxy`](self) contract instance.

See the [wrapper's documentation](`OptimismBridgeProxyInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _l2Token: alloy::sol_types::private::Address,
            _recipient: alloy::sol_types::private::Address,
            _l2Gas: u32,
        ) -> alloy_contract::Result<OptimismBridgeProxyInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                admin,
                caller,
                _bridgeTarget,
                _maxSingleTransfer,
                _dailyLimit,
                _l2Token,
                _recipient,
                _l2Gas,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
            caller: alloy::sol_types::private::Address,
            _bridgeTarget: alloy::sol_types::private::Address,
            _maxSingleTransfer: alloy::sol_types::private::primitives::aliases::U256,
            _dailyLimit: alloy::sol_types::private::primitives::aliases::U256,
            _l2Token: alloy::sol_types::private::Address,
            _recipient: alloy::sol_types::private::Address,
            _l2Gas: u32,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            admin,
                            caller,
                            _bridgeTarget,
                            _maxSingleTransfer,
                            _dailyLimit,
                            _l2Token,
                            _recipient,
                            _l2Gas,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OptimismBridgeProxyInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OptimismBridgeProxyInstance<T, P, N> {
            OptimismBridgeProxyInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptimismBridgeProxyInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`BRIDGE_ADMIN_ROLE`] function.
        pub fn BRIDGE_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_ADMIN_ROLECall, N> {
            self.call_builder(&BRIDGE_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`BRIDGE_CALLER_ROLE`] function.
        pub fn BRIDGE_CALLER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, BRIDGE_CALLER_ROLECall, N> {
            self.call_builder(&BRIDGE_CALLER_ROLECall {})
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`bridgeActive`] function.
        pub fn bridgeActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeActiveCall, N> {
            self.call_builder(&bridgeActiveCall {})
        }
        ///Creates a new call builder for the [`bridgeName`] function.
        pub fn bridgeName(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeNameCall, N> {
            self.call_builder(&bridgeNameCall {})
        }
        ///Creates a new call builder for the [`bridgeTarget`] function.
        pub fn bridgeTarget(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeTargetCall, N> {
            self.call_builder(&bridgeTargetCall {})
        }
        ///Creates a new call builder for the [`dailyLimit`] function.
        pub fn dailyLimit(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyLimitCall, N> {
            self.call_builder(&dailyLimitCall {})
        }
        ///Creates a new call builder for the [`dailyUsed`] function.
        pub fn dailyUsed(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, dailyUsedCall, N> {
            self.call_builder(&dailyUsedCall {})
        }
        ///Creates a new call builder for the [`executeBridge`] function.
        pub fn executeBridge(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            dynamicData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeBridgeCall, N> {
            self.call_builder(
                &executeBridgeCall {
                    token,
                    amount,
                    dynamicData,
                },
            )
        }
        ///Creates a new call builder for the [`getBridgeInfo`] function.
        pub fn getBridgeInfo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getBridgeInfoCall, N> {
            self.call_builder(&getBridgeInfoCall {})
        }
        ///Creates a new call builder for the [`getDailyUsage`] function.
        pub fn getDailyUsage(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getDailyUsageCall, N> {
            self.call_builder(&getDailyUsageCall {})
        }
        ///Creates a new call builder for the [`getOptimismConfig`] function.
        pub fn getOptimismConfig(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getOptimismConfigCall, N> {
            self.call_builder(&getOptimismConfigCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`l2Gas`] function.
        pub fn l2Gas(&self) -> alloy_contract::SolCallBuilder<T, &P, l2GasCall, N> {
            self.call_builder(&l2GasCall {})
        }
        ///Creates a new call builder for the [`l2Token`] function.
        pub fn l2Token(&self) -> alloy_contract::SolCallBuilder<T, &P, l2TokenCall, N> {
            self.call_builder(&l2TokenCall {})
        }
        ///Creates a new call builder for the [`lastResetDay`] function.
        pub fn lastResetDay(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastResetDayCall, N> {
            self.call_builder(&lastResetDayCall {})
        }
        ///Creates a new call builder for the [`maxSingleTransfer`] function.
        pub fn maxSingleTransfer(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxSingleTransferCall, N> {
            self.call_builder(&maxSingleTransferCall {})
        }
        ///Creates a new call builder for the [`recipient`] function.
        pub fn recipient(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, recipientCall, N> {
            self.call_builder(&recipientCall {})
        }
        ///Creates a new call builder for the [`recoverTokens`] function.
        pub fn recoverTokens(
            &self,
            token: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
            to: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, recoverTokensCall, N> {
            self.call_builder(
                &recoverTokensCall {
                    token,
                    amount,
                    to,
                },
            )
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`setBridgeActive`] function.
        pub fn setBridgeActive(
            &self,
            active: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeActiveCall, N> {
            self.call_builder(&setBridgeActiveCall { active })
        }
        ///Creates a new call builder for the [`setBridgeTarget`] function.
        pub fn setBridgeTarget(
            &self,
            target: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBridgeTargetCall, N> {
            self.call_builder(&setBridgeTargetCall { target })
        }
        ///Creates a new call builder for the [`setDailyLimit`] function.
        pub fn setDailyLimit(
            &self,
            limit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setDailyLimitCall, N> {
            self.call_builder(&setDailyLimitCall { limit })
        }
        ///Creates a new call builder for the [`setMaxSingleTransfer`] function.
        pub fn setMaxSingleTransfer(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setMaxSingleTransferCall, N> {
            self.call_builder(&setMaxSingleTransferCall { amount })
        }
        ///Creates a new call builder for the [`setOptimismConfig`] function.
        pub fn setOptimismConfig(
            &self,
            _l2Token: alloy::sol_types::private::Address,
            _recipient: alloy::sol_types::private::Address,
            _l2Gas: u32,
        ) -> alloy_contract::SolCallBuilder<T, &P, setOptimismConfigCall, N> {
            self.call_builder(
                &setOptimismConfigCall {
                    _l2Token,
                    _recipient,
                    _l2Gas,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OptimismBridgeProxyInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BridgeExecuted`] event.
        pub fn BridgeExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeExecuted, N> {
            self.event_filter::<BridgeExecuted>()
        }
        ///Creates a new event filter for the [`BridgeStatusUpdated`] event.
        pub fn BridgeStatusUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeStatusUpdated, N> {
            self.event_filter::<BridgeStatusUpdated>()
        }
        ///Creates a new event filter for the [`BridgeTargetUpdated`] event.
        pub fn BridgeTargetUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BridgeTargetUpdated, N> {
            self.event_filter::<BridgeTargetUpdated>()
        }
        ///Creates a new event filter for the [`DailyLimitReset`] event.
        pub fn DailyLimitReset_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitReset, N> {
            self.event_filter::<DailyLimitReset>()
        }
        ///Creates a new event filter for the [`DailyLimitUpdated`] event.
        pub fn DailyLimitUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DailyLimitUpdated, N> {
            self.event_filter::<DailyLimitUpdated>()
        }
        ///Creates a new event filter for the [`OptimismConfigUpdated`] event.
        pub fn OptimismConfigUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OptimismConfigUpdated, N> {
            self.event_filter::<OptimismConfigUpdated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
