/**

Generated by the following Solidity interface...
```solidity
interface GasArchive {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error AccountDoesNotExistInProof();
    error AlreadySubmitted();
    error CannotSubmitProofForSettlementChain();
    error ChainIDNotFound();
    error EmptyDataHash();
    error EmptySlot();
    error EpochAlreadyCompleted();
    error InvalidData();
    error InvalidEthereumBlockHeader();
    error InvalidProof();
    error InvalidSeqChainBlockHeader();
    error NotArchivedEpoch();
    error NotBlockHashSender();
    error OldSettlementChainBlockNumber();
    error SequencingChainAlreadyExists();
    error ZeroAddress();
    error ZeroLengthArray();

    event EpochCompleted(uint256 indexed epoch);
    event EpochDataValidated(uint256 indexed epoch, uint256 indexed seqChainID, bytes32 dataHash);
    event EpochExpectedChainsUpdated(uint256 indexed epoch, uint256[] chainIds);
    event GasAggregatorAddressUpdated(address indexed oldAddress, address indexed newAddress);
    event LastKnownBlockHashesUpdated(bytes32 ethBlockHash, bytes32 settlementBlockHash, uint256 settlementBlockNumber);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor(address _blockHashSender, uint256 _settlementChainID, address admin);

    function AGGREGATED_EPOCH_DATA_HASH_SLOT() external view returns (uint256);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function HEADER_STATE_ROOT_INDEX() external view returns (uint256);
    function STORAGE_ROOT_ACCOUNT_FIELDS_INDEX() external view returns (uint256);
    function addSequencingChain(uint256 chainID, address aggregatorAddress, address bridgeAddress, uint256 storageSlotIndex) external;
    function appchainLatestEpoch(uint256 appchainId) external view returns (uint256 latestEpoch);
    function blockHashSender() external view returns (address);
    function confirmEpochDataHash(uint256 epoch, uint256 seqChainID, bytes memory seqChainBlockHeader, bytes[] memory seqChainAccountProof, bytes[] memory seqChainStorageProof) external;
    function confirmSequencingChainBlockHash(uint256 seqChainID, bytes32 sendRoot, bytes memory ethereumBlockHeader, bytes[] memory ethereumAccountProof, bytes[] memory ethereumStorageProof) external;
    function epochAppchainEmissionsReceiver(uint256 epoch, uint256 appchainId) external view returns (address receiver);
    function epochAppchainIDs(uint256 epoch, uint256) external view returns (uint256 appchainIds);
    function epochAppchainTokensUsed(uint256 epoch, uint256 appchainId) external view returns (uint256 tokens);
    function epochChainDataSubmitted(uint256 epoch, uint256 chainId) external view returns (bool submitted);
    function epochCompleted(uint256 epoch) external view returns (bool completed);
    function epochExpectedChains(uint256 epoch, uint256) external view returns (uint256 chainIds);
    function epochTotalTokensUsed(uint256 epoch) external view returns (uint256 totalTokens);
    function epochVerifiedDataHash(uint256 epoch, uint256 seqChainID) external view returns (bytes32 dataHash);
    function getActiveAppchainIds(uint256 epochIndex) external view returns (uint256[] memory _chainIDs);
    function getAppchainGasFees(uint256 epochIndex, uint256 appchainId) external view returns (uint256);
    function getAppchainRewardsReceiver(uint256 appchainId) external view returns (address);
    function getEpochExpectedChains(uint256 epochIndex) external view returns (uint256[] memory);
    function getEpochProgress(uint256 epochIndex) external view returns (bool completed, uint256 totalExpected, uint256 totalSubmitted);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function getTotalGasFees(uint256 epochIndex) external view returns (uint256);
    function grantRole(bytes32 role, address account) external;
    function hasChainSubmittedForEpoch(uint256 epochIndex, uint256 chainId) external view returns (bool);
    function hasRole(bytes32 role, address account) external view returns (bool);
    function lastKnownEthereumBlockHash() external view returns (bytes32);
    function lastKnownSeqChainBlockHashes(uint256 chainId) external view returns (bytes32 blockHash);
    function lastKnownSettlementChainBlockHash() external view returns (bytes32);
    function lastKnownSettlementChainBlockNumber() external view returns (uint256);
    function removeSeqChain(uint256 chainID) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function seqChainEthOutbox(uint256 chainId) external view returns (address outboxAddress);
    function seqChainEthSendRootStorageSlot(uint256 chainId) external view returns (uint256 sendRootStorageSlotIndex);
    function seqChainGasAggregatorAddresses(uint256 chainId) external view returns (address aggregatorAddress);
    function seqChainIDs(uint256) external view returns (uint256);
    function setBlockHashSender(address newBlockHashSender) external;
    function setEpochExpectedChains(uint256 epoch, uint256[] memory chainIds) external;
    function setLastKnownBlockHashes(bytes32 ethBlockHash, bytes32 settlementBlockHash, uint256 settlementBlockNumber) external;
    function settlementChainID() external view returns (uint256);
    function submitEpochPreImageData(uint256 epoch, uint256 seqChainID, uint256[] memory appchains, uint256[] memory tokens, address[] memory emissionsReceivers) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_blockHashSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_settlementChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "AGGREGATED_EPOCH_DATA_HASH_SLOT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "HEADER_STATE_ROOT_INDEX",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "STORAGE_ROOT_ACCOUNT_FIELDS_INDEX",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addSequencingChain",
    "inputs": [
      {
        "name": "chainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "aggregatorAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "bridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "storageSlotIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "appchainLatestEpoch",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "latestEpoch",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "blockHashSender",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "confirmEpochDataHash",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainBlockHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "seqChainAccountProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "seqChainStorageProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "confirmSequencingChainBlockHash",
    "inputs": [
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sendRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "ethereumBlockHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "ethereumAccountProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "ethereumStorageProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "epochAppchainEmissionsReceiver",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochAppchainIDs",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "appchainIds",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochAppchainTokensUsed",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "tokens",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochChainDataSubmitted",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "submitted",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochCompleted",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "completed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochExpectedChains",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "chainIds",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochTotalTokensUsed",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "totalTokens",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochVerifiedDataHash",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "dataHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveAppchainIds",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "_chainIDs",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppchainGasFees",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppchainRewardsReceiver",
    "inputs": [
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getEpochExpectedChains",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getEpochProgress",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "completed",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "totalExpected",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "totalSubmitted",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTotalGasFees",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasChainSubmittedForEpoch",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownEthereumBlockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownSeqChainBlockHashes",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownSettlementChainBlockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownSettlementChainBlockNumber",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeSeqChain",
    "inputs": [
      {
        "name": "chainID",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "seqChainEthOutbox",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "outboxAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainEthSendRootStorageSlot",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "sendRootStorageSlotIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainGasAggregatorAddresses",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "aggregatorAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainIDs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setBlockHashSender",
    "inputs": [
      {
        "name": "newBlockHashSender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setEpochExpectedChains",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "chainIds",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setLastKnownBlockHashes",
    "inputs": [
      {
        "name": "ethBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "settlementBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "settlementBlockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "settlementChainID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "submitEpochPreImageData",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchains",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "tokens",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "emissionsReceivers",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "EpochCompleted",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EpochDataValidated",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "dataHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EpochExpectedChainsUpdated",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "chainIds",
        "type": "uint256[]",
        "indexed": false,
        "internalType": "uint256[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "GasAggregatorAddressUpdated",
    "inputs": [
      {
        "name": "oldAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "LastKnownBlockHashesUpdated",
    "inputs": [
      {
        "name": "ethBlockHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "settlementBlockHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      },
      {
        "name": "settlementBlockNumber",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AccountDoesNotExistInProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AlreadySubmitted",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CannotSubmitProofForSettlementChain",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ChainIDNotFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyDataHash",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptySlot",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EpochAlreadyCompleted",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidData",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidEthereumBlockHeader",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidSeqChainBlockHeader",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotArchivedEpoch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotBlockHashSender",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OldSettlementChainBlockNumber",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SequencingChainAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroLengthArray",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GasArchive {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0346100e057601f6132bf38819003918201601f19168301916001600160401b038311848410176100e4578084926060946040528339810103126100e057610047816100f8565b6100586040602084015193016100f8565b6001600160a01b039091169182156100d1576001600160a01b038216156100d1576100959260018060a01b0319600454161760045560805261010c565b50604051613109908161019682396080518181816107160152818161140a0152818161168101528181611bdc01528181611d5901526125160152f35b63d92e233d60e01b5f5260045ffd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036100e057565b6001600160a01b0381165f9081525f51602061329f5f395f51905f52602052604090205460ff16610190576001600160a01b03165f8181525f51602061329f5f395f51905f5260205260408120805460ff191660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f9056fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a7146102cf5780630344571f146102ca5780630cc46212146102c5578063133bf89f146102c057806319771640146102bb5780631bf4951c146102b657806322623897146102b157806323afb0ff146102ac578063248a9ca3146102a7578063285f2446146102a25780632cd078b81461029d5780632f2ff15d1461029857806330c709b614610293578063362b81541461028e57806336568abe1461028957806347dff69d146102845780634e6da2a41461027f578063529f4b561461027a57806355fcc556146102755780635a6330801461022f5780635b1817e8146102705780635d579a611461026b578063650e1312146102665780636b4d17ad146102615780636ba3d17f1461025c5780636f4e22f5146102575780637a7f34e8146102525780637c6edb3e1461024d5780637c715094146102485780637c901d7b146102435780638d935e1d1461023e5780638dd50eee1461023957806391d148541461023457806395814bf51461022f578063a217fddf1461022a578063ce537c9f14610225578063d26bcc8014610220578063d547741f1461021b578063e18b4dae14610216578063e8c46c2814610211578063ef5122211461020c578063fd79d3e114610207578063fdd54123146102025763ff87c18c146101fd575f80fd5b611172565b611132565b611108565b6110eb565b6110d0565b6110b5565b611075565b611025565b610fe6565b610fcc565b610bc1565b610f6d565b610f2d565b610f10565b610e89565b610e21565b610dbd565b610d93565b610d69565b610d31565b610d16565b610cf2565b610cab565b610bfe565b610b89565b610b02565b610a08565b6109de565b610970565b61093d565b61090e565b6108c9565b610844565b610788565b610756565b610739565b6106ff565b610678565b610563565b610522565b6104ad565b6103a5565b34610370576020600319360112610370576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361037057807f7965db0b0000000000000000000000000000000000000000000000000000000060209214908115610346575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150145f61033b565b5f80fd5b9181601f840112156103705782359167ffffffffffffffff8311610370576020808501948460051b01011161037057565b346103705760406003193601126103705760043560243567ffffffffffffffff8111610370576103d9903690600401610374565b91906103e3611e82565b815f52600c60205260ff60405f20541661048557815f52600d60205261040b60405f20611286565b5f5b83811061045557507fa0fea12a5dfdb3ebf0b7c49a7ddd5ffdd3e5b2d7574ff16b0a1032edc19d658b61045393839261044b6040519283928361138e565b0390a2611f57565b005b60019061047f61046d855f52600d60205260405f2090565b6104788388876112b6565b3590611314565b0161040d565b7ffd93c15f000000000000000000000000000000000000000000000000000000005f5260045ffd5b3461037057602060031936011261037057600435805f52601260205260405f20545f52601160205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff81160361037057565b346103705760806003193601126103705761045360043560243561054581610504565b6044359061055282610504565b6064359261055e611e82565b6113a2565b34610370576060600319360112610370576004356024356044359173ffffffffffffffffffffffffffffffffffffffff600454163303610622576003548311156105fa576105f57f78722ed9742b4dcda705d010fff7460a351e906f8223cff2d23a55b44b66427c93826001558360025580600355604051938493846040919493926060820195825260208201520152565b0390a1005b7fc36ba423000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f24b2e7fd000000000000000000000000000000000000000000000000000000005f5260045ffd5b9181601f840112156103705782359167ffffffffffffffff8311610370576020838186019501011161037057565b346103705760a06003193601126103705760043560243560443567ffffffffffffffff8111610370576106af90369060040161064a565b60649391933567ffffffffffffffff8111610370576106d2903690600401610374565b916084359567ffffffffffffffff8711610370576106f7610453973690600401610374565b9690956115d0565b34610370575f6003193601126103705760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610370575f600319360112610370576020600154604051908152f35b346103705760206003193601126103705760206107806004355f525f602052600160405f20015490565b604051908152f35b346103705760406003193601126103705760043560243590805f52600c60205260ff60405f205416156107e3575f52601060205260405f20905f526020526107df60405f2054604051918291829190602083019252565b0390f35b7fc5b14571000000000000000000000000000000000000000000000000000000005f5260045ffd5b60206040818301928281528451809452019201905f5b81811061082e5750505090565b8251845260209384019390920191600101610821565b3461037057602060031936011261037057600435805f52600c60205260ff60405f205416156107e3575f52600f60205260405f206040519081602082549182815201915f5260205f20905f5b8181106108b3576107df856108a78187038261155b565b6040519182918261080b565b8254845260209093019260019283019201610890565b34610370576040600319360112610370576104536024356004356108ec82610504565b610909610904825f525f602052600160405f20015490565b611eea565b61226e565b34610370576020600319360112610370576004355f52600c602052602060ff60405f2054166040519015158152f35b34610370575f60031936011261037057602073ffffffffffffffffffffffffffffffffffffffff60045416604051908152f35b346103705760406003193601126103705760043560243561099081610504565b3373ffffffffffffffffffffffffffffffffffffffff8216036109b6576104539161234b565b7f6697b232000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610370576020600319360112610370576004355f52600e602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f815f52600c60205260ff60405f20541690825f52600d60205260405f2092604051808560208297549384815201905f5260205f20925f5b818110610ae9575050610a699250038561155b565b83515f5b8551811015610acd57610aac610aa5610a8e855f52600a60205260405f2090565b610a98848a61175b565b515f5260205260405f2090565b5460ff1690565b610ab9575b600101610a6d565b92610ac560019161176f565b939050610ab1565b5060408051851515815260208101929092528101839052606090f35b8454835260019485019489945060209093019201610a54565b346103705760a06003193601126103705760043560243560443567ffffffffffffffff811161037057610b39903690600401610374565b60649391933567ffffffffffffffff811161037057610b5c903690600401610374565b916084359567ffffffffffffffff871161037057610b81610453973690600401610374565b969095611866565b3461037057604060031936011261037057600435602435905f52601060205260405f20905f52602052602060405f2054604051908152f35b3461037057604060031936011261037057600435602435905f52600a60205260405f20905f52602052602060ff60405f2054166040519015158152f35b3461037057604060031936011261037057600435602435905f52601160205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600554811015610c915760055f5260205f2001905f90565b610c4c565b8054821015610c91575f5260205f2001905f90565b3461037057604060031936011261037057600435602435905f52600d60205260405f20805482101561037057602091610ce391610c96565b90549060031b1c604051908152f35b3461037057602060031936011261037057610453600435610d11611e82565b611bda565b34610370575f60031936011261037057602060405160028152f35b3461037057604060031936011261037057600435602435905f52600b60205260405f20905f52602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f526012602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f526009602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f52600d60205260405f206040519081602082549182815201915f5260205f20905f5b818110610e0b576107df856108a78187038261155b565b8254845260209093019260019283019201610df4565b346103705760206003193601126103705773ffffffffffffffffffffffffffffffffffffffff600435610e5381610504565b610e5b611e82565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060045416176004555f80f35b346103705760a06003193601126103705760043560243560443567ffffffffffffffff811161037057610ec090369060040161064a565b60649391933567ffffffffffffffff811161037057610ee3903690600401610374565b916084359567ffffffffffffffff871161037057610f08610453973690600401610374565b969095611d06565b34610370575f600319360112610370576020600354604051908152f35b34610370576020600319360112610370576004355f526006602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461037057604060031936011261037057602060ff610fc0602435600435610f9482610504565b5f525f845260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54166040519015158152f35b34610370575f6003193601126103705760206040515f8152f35b3461037057602060031936011261037057600435805f52600c60205260ff60405f205416156107e3575f52600e602052602060405f2054604051908152f35b34610370576020600319360112610370576004356005548110156103705760209060055f527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154604051908152f35b346103705760406003193601126103705761045360243560043561109882610504565b6110b0610904825f525f602052600160405f20015490565b61234b565b34610370575f60031936011261037057602060405160038152f35b34610370575f60031936011261037057602060405160078152f35b34610370575f600319360112610370576020600254604051908152f35b34610370576020600319360112610370576004355f526008602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f526007602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461037057604060031936011261037057600435602435905f52600f60205260405f20805482101561037057602091610ce391610c96565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b908160011b918083046002149015171561121a57565b6111d7565b91611238918354905f199060031b92831b921b19161790565b9055565b906801000000000000000081116112815781549181815582821061125f57505050565b5f5260205f2091820191015b818110611276575050565b5f815560010161126b565b6111aa565b8054905f815581611295575050565b5f5260205f20908101905b8181106112ab575050565b5f81556001016112a0565b9190811015610c915760051b0190565b600554680100000000000000008110156112815760018101600555600554811015610c915760055f527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b80549068010000000000000000821015611281578161133b91600161123894018155610c96565b81939154905f199060031b92831b921b19161790565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116103705760209260051b809284830137010190565b91602061139f938181520191611351565b90565b9073ffffffffffffffffffffffffffffffffffffffff6113e76113cd845f52600660205260405f2090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b166115175773ffffffffffffffffffffffffffffffffffffffff8116156114d4577f000000000000000000000000000000000000000000000000000000000000000082146114fc5773ffffffffffffffffffffffffffffffffffffffff8316156114d4576114d1926114b16114c39261145f856112c6565b611471855f52600660205260405f2090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b611471835f52600760205260405f2090565b5f52600860205260405f2090565b55565b7fd92e233d000000000000000000000000000000000000000000000000000000005f5260045ffd5b91506115159250611471905f52600660205260405f2090565b565b7fdf650a00000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040810190811067ffffffffffffffff82111761128157604052565b90601f601f19910116810190811067ffffffffffffffff82111761128157604052565b67ffffffffffffffff811161128157601f01601f191660200190565b9291926115a68261157e565b916115b4604051938461155b565b829481845281830111610370578281602093845f960137010152565b969390949195926115e236828961159a565b60208151910120600154036116f55773ffffffffffffffffffffffffffffffffffffffff611618895f52600760205260405f2090565b54169573ffffffffffffffffffffffffffffffffffffffff87161561167e579161166a6114d19896949261166461166f99979561165d8d5f52600860205260405f2090565b549061202c565b97612052565b612119565b915f52600960205260405f2090565b887f0000000000000000000000000000000000000000000000000000000000000000146116cd577f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fda261280000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fefb64cf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b805160021015610c915760600190565b805160101015610c91576102200190565b805115610c915760200190565b805160011015610c915760400190565b8051821015610c915760209160051b010190565b5f19811461121a5760010190565b92909361179b6020956117a894989798606087526060870191611351565b9184830386860152611351565b9060408183039101528281520191905f5b8181106117c65750505090565b90919260208060019273ffffffffffffffffffffffffffffffffffffffff87356117ef81610504565b1681520194019291016117b9565b9067ffffffffffffffff831161128157611817838361123c565b905f5260205f205f5b83811061182d5750505050565b600190602084359401938184015501611820565b906001820180921161121a57565b9190820180921161121a57565b3561139f81610504565b95979697949392919094611896610aa5876118898a5f52600a60205260405f2090565b905f5260205260405f2090565b611ad6576118b086611889895f52600b60205260405f2090565b54896040516118da816118cc6020820194878c8c8c8c8a61177d565b03601f19810183528261155b565b51902003611aae5797939291905f9861190583836119008b5f52600f60205260405f2090565b6117fd565b5f945b83861061198f57505050505050506119895f916115159495611932855f52600e60205260405f2090565b5561197761194c82611889875f52600a60205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b611889845f52600b60205260405f2090565b55611f57565b909192939495996119a18783886112b6565b356119ab9161184f565b956119b78183886112b6565b356119ca8a5f52601060205260405f2090565b6119d58388886112b6565b356119e791905f5260205260405f2090565b908154906119f49161184f565b9055611a01818c856112b6565b611a0a9061185c565b611a1c8a5f52601160205260405f2090565b611a278388886112b6565b35611a3991905f5260205260405f2090565b90611a7e919073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b88611a8a8287876112b6565b35611a9d905f52601260205260405f2090565b556001019493929190999599611908565b7f5cb045db000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9fbfc589000000000000000000000000000000000000000000000000000000005f5260045ffd5b905f19820191821161121a57565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40820191821161121a57565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80820191821161121a57565b602003906020821161121a57565b9190820391821161121a57565b6005548015611bad575f19810190600554821015610c91575f195f916005835260208320010155600555565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f00000000000000000000000000000000000000000000000000000000000000008114611cf15760055480915f5b838110611ccf575b50828214611ca757611c4d6114d192611c47611c41611c37611c325f98611afe565b610c79565b90549060031b1c90565b91610c79565b9061121f565b611c55611b81565b611c92611c6a825f52600660205260405f2090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b6114c3611c6a825f52600760205260405f2090565b7f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b81611cdc611c3783610c79565b14611ce957600101611c08565b91505f611c10565b611c6a611515915f52600660205260405f2090565b9693909592949194611d27610aa5886118898b5f52600a60205260405f2090565b8015611e63575b611ad657611d3d36828861159a565b60208151910120611d56885f52600960205260405f2090565b547f00000000000000000000000000000000000000000000000000000000000000008914611e5a575b03611e3257611d8f958789612420565b908115611e0a5780611de591847f2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e60405180611dd088829190602083019252565b0390a3611889845f52600b60205260405f2090565b55611df8815f52600d60205260405f2090565b5415611e015750565b61151590612500565b7f9a0cce53000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9d8cbacd000000000000000000000000000000000000000000000000000000005f5260045ffd5b50600254611d7f565b50611e7a876118898a5f52600b60205260405f2090565b541515611d2e565b335f9081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff1615611eba57565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f52336004525f60245260445ffd5b805f525f60205260ff611f1e3360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541615611f285750565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f523360045260245260445ffd5b805f52600d60205260405f20604051808260208294549384815201905f5260205f20925f5b818110612013575050611f919250038261155b565b5f5b8151811015611fd657611fc5611fc1610aa5611fb7865f52600a60205260405f2090565b610a98858761175b565b1590565b611fd157600101611f93565b505050565b5050611fed61194c825f52600c60205260405f2090565b7f78df938181afcb28eaa7d099235bbf9877832d6faafe36d1ea70916f3ace33e05f80a2565b8454835260019485019486945060209093019201611f7c565b90604051906020820192835260408201526040815261204c60608261155b565b51902090565b6120646120699161206e93369161159a565b61258c565b612607565b805160031015610c9157608061139f9101516126b4565b67ffffffffffffffff81116112815760051b60200190565b9291926120a982612085565b936120b7604051958661155b565b602085848152019260051b8201918183116103705780935b8385106120dd575050505050565b843567ffffffffffffffff811161037057820183601f820112156103705760209161210e858385809535910161159a565b8152019401936120cf565b909161219361218e6120649461219996989997996040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b1682526014815261216b60348261155b565b519020936040519460208601526020855261218760408661155b565b369161209d565b6126f6565b916127a0565b918251156122465761219361218e6122009261220e966121876121cf6121c96121c46120649a612607565b61171d565b516126b4565b966040516121ea816118cc6020820194859190602083019252565b5190206040519687916020830160209181520190565b03601f19810187528661155b565b80511561221e5761139f906126b4565b7f3477dcda000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f547706af000000000000000000000000000000000000000000000000000000005f5260045ffd5b805f525f60205260ff6122a28360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541661234557805f525f6020526122da8260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b805f525f60205260ff61237f8360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54161561234557805f525f6020526123b88260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905573ffffffffffffffffffffffffffffffffffffffff339216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b95929693909491945f52600660205273ffffffffffffffffffffffffffffffffffffffff60405f205416948515611ca75761139f9761245e91612052565b9560405160208101918252600760408201526040815261247f60608261155b565b51902095612119565b600581146124fd576005549067ffffffffffffffff8211611281576124ad828261123c565b5f908152602081207f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db080545b8484106124e7575050505050565b60018091920193845492818501550192906124d9565b50565b805f52600d60205261251460405f20612488565b7f0000000000000000000000000000000000000000000000000000000000000000805f52600660205273ffffffffffffffffffffffffffffffffffffffff60405f205416612560575050565b611515915f52600d60205260405f20611314565b604051906125818261153f565b5f6020838281520152565b612594612574565b506020815191604051926125a78461153f565b835201602082015290565b1561037057565b906125c382612085565b6125d0604051918261155b565b828152601f196125e08294612085565b01905f5b8281106125f057505050565b6020906125fb612574565b828285010152016125e4565b9061261182612ad6565b156103705761261f82612afa565b91612629836125b9565b9060208101805161263981612b5b565b810180911161121a57945f905b80821061266857505061139f929394612660915190611b74565b9051146125b2565b90956126ac81612679600193612bc6565b9060405161268860408261155b565b82815281602082015261269b8b8a61175b565b526126a68a8961175b565b5061184f565b960190612646565b805180151590816126ea575b5015610370576126cf90612c80565b905190602081106126de575090565b6020036101000a900490565b6021915011155f6126c0565b61270081516125b9565b905f5b815181101561273e578061272261271c6001938561175b565b5161258c565b61272c828661175b565b52612737818561175b565b5001612703565b505090565b6040519061275260208361155b565b5f808352366020840137565b906127688261157e565b612775604051918261155b565b828152601f19612785829461157e565b0190602036910137565b908151811015610c91570160200190565b906127aa90612ce0565b5f915f6127b5612574565b50845115612a9d57935f915b8151831015612a3e5782158080612a28575b610370571580612a0c575b610370576127f56127ef848461175b565b51612607565b958651600281145f146128f657505061281e6128196128138861173e565b51612f28565b612f76565b9561283461282d888884612fe3565b809261184f565b9651116128d8571561286b575061284b9051611afe565b116103705751116128625761281361139f9161174b565b5061139f612743565b9190946128788651611afe565b82146103705780612896611fc161289060019461174b565b51612ad6565b156128b9576128a76128ad9161174b565b51612f68565b915b01919490946127c1565b6128c56128d29161174b565b5160208101519051902090565b916128af565b5050915092506128e9915051611afe565b116103705761139f612743565b601190979193979492941461290f575b506001906128af565b959380925094929094518314155f146129ee5760ff61296961296361295d612937878761278f565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b94611841565b9316601081101561037057612987612981828961175b565b51612f52565b156129a9575050505061299c91925051611afe565b036103705761139f612743565b866129c1611fc161289084600196989a97999b61175b565b156129db576129d3916128a79161175b565b915b90612906565b6129e8916128c59161175b565b916129d5565b5050506129fb9051611afe565b036103705761281361139f9161172d565b50612a20612a1a848461175b565b51612ef1565b8614156127de565b50612a366128c5858561175b565b8214156127d3565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964204d50542070726f6f660000000000000000000000000000006044820152606490fd5b509050612ace92507f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4219150146125b2565b61139f612743565b805115612af557602060c0910151515f1a10612af157600190565b5f90565b505f90565b805115612af5575f9060208101908151612b1381612b5b565b810180911161121a5791519051810180911161121a5791905b828110612b395750905090565b612b4281612bc6565b810180911161121a57612b55909161176f565b90612b2c565b515f1a6080811015612b6c57505f90565b60b881108015612bb0575b15612b825750600190565b60c0811015612ba15761139f90612b9c9060b75b90611b74565b611841565b61139f90612b9c9060f7612b96565b5060c08110158015612b77575060f88110612b77565b80515f1a906080821015612bdb575050600190565b60b8821015612bf15750612b9c61139f91611b39565b60c0821015612c325760010151602082900360b7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4a0190565b60f8821015612c485750612b9c61139f91611b0c565b60010151602082900360f7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0190565b906020820191612c908351612b5b565b92519083820180921161121a575192830392831161121a579190565b15612cb357565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b90612d095f612cfa8451612cf58115156125b2565b611204565b612d0460016125b2565b611b74565b90612d138261275e565b925f91825b612d22855f61184f565b841015612de257612d9d612963612d2292612d3d8760011690565b612da5577f0f00000000000000000000000000000000000000000000000000000000000000612d87612d7e61295d612937612d788c60011c90565b8b61278f565b60041c600f1690565b60f81b165f1a612d97828b61278f565b53611841565b939050612d18565b7f0f00000000000000000000000000000000000000000000000000000000000000612d87612ddc61295d612937612d788c60011c90565b60ff1690565b915092506115159150835114612cac565b612e1382612e078351612cf58115156125b2565b612d04818311156125b2565b90612e1d8261275e565b9383925f5b612e2c828761184f565b851015612edf5790612e9f612e99612e2c93612e488860011690565b612ea8577f0f00000000000000000000000000000000000000000000000000000000000000612e89612d7e61295d612937612e838d60011c90565b8c61278f565b60f81b165f1a612d97828c61278f565b95611841565b94909150612e22565b7f0f00000000000000000000000000000000000000000000000000000000000000612e89612ddc61295d612937612e838d60011c90565b92505092506115159150835114612cac565b80516020811015612f09575060208101519051902090565b906020015120604051602081019182526020815261204c60408261155b565b80511561037057612f3b61139f91612c80565b612f478193929361275e565b928360200190613096565b6001815103612af55760200151515f1a60801490565b612f7190612c80565b902090565b9081511561037057600f612f92612d7e61295d6129378661173e565b1680612fa5575061139f60025f93612df3565b60018103612fba575061139f60015f93612df3565b60028103612fd0575061139f6002600193612df3565b6003036103705761139f60018093612df3565b91905f5b83810180821161121a57825181108061307d575b156130755761302b7fff00000000000000000000000000000000000000000000000000000000000000918461278f565b51167fff00000000000000000000000000000000000000000000000000000000000000613058838661278f565b5116900361306e576130699061176f565b612fe7565b9250505090565b509250505090565b5083518210612ffb565b601f811161121a576101000a90565b90918015611fd1575b60208110156130d957806130b257505050565b6130c66130c16130cb92611b66565b613087565b611afe565b905182518216911916179052565b9190805182526020810180911161121a57906020810180911161121a5791601f1981019081111561309f576111d756ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA04a\0\xE0W`\x1Fa2\xBF8\x81\x90\x03\x91\x82\x01`\x1F\x19\x16\x83\x01\x91`\x01`\x01`@\x1B\x03\x83\x11\x84\x84\x10\x17a\0\xE4W\x80\x84\x92``\x94`@R\x839\x81\x01\x03\x12a\0\xE0Wa\0G\x81a\0\xF8V[a\0X`@` \x84\x01Q\x93\x01a\0\xF8V[`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x91\x82\x15a\0\xD1W`\x01`\x01`\xA0\x1B\x03\x82\x16\x15a\0\xD1Wa\0\x95\x92`\x01\x80`\xA0\x1B\x03\x19`\x04T\x16\x17`\x04U`\x80Ra\x01\x0CV[P`@Qa1\t\x90\x81a\x01\x96\x829`\x80Q\x81\x81\x81a\x07\x16\x01R\x81\x81a\x14\n\x01R\x81\x81a\x16\x81\x01R\x81\x81a\x1B\xDC\x01R\x81\x81a\x1DY\x01Ra%\x16\x01R\xF3[c\xD9.#=`\xE0\x1B_R`\x04_\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a\0\xE0WV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R_Q` a2\x9F_9_Q\x90_R` R`@\x90 T`\xFF\x16a\x01\x90W`\x01`\x01`\xA0\x1B\x03\x16_\x81\x81R_Q` a2\x9F_9_Q\x90_R` R`@\x81 \x80T`\xFF\x19\x16`\x01\x17\x90U3\x91\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x81\x80\xA4`\x01\x90V[P_\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x01\xFF\xC9\xA7\x14a\x02\xCFW\x80c\x03DW\x1F\x14a\x02\xCAW\x80c\x0C\xC4b\x12\x14a\x02\xC5W\x80c\x13;\xF8\x9F\x14a\x02\xC0W\x80c\x19w\x16@\x14a\x02\xBBW\x80c\x1B\xF4\x95\x1C\x14a\x02\xB6W\x80c\"b8\x97\x14a\x02\xB1W\x80c#\xAF\xB0\xFF\x14a\x02\xACW\x80c$\x8A\x9C\xA3\x14a\x02\xA7W\x80c(_$F\x14a\x02\xA2W\x80c,\xD0x\xB8\x14a\x02\x9DW\x80c//\xF1]\x14a\x02\x98W\x80c0\xC7\t\xB6\x14a\x02\x93W\x80c6+\x81T\x14a\x02\x8EW\x80c6V\x8A\xBE\x14a\x02\x89W\x80cG\xDF\xF6\x9D\x14a\x02\x84W\x80cNm\xA2\xA4\x14a\x02\x7FW\x80cR\x9FKV\x14a\x02zW\x80cU\xFC\xC5V\x14a\x02uW\x80cZc0\x80\x14a\x02/W\x80c[\x18\x17\xE8\x14a\x02pW\x80c]W\x9Aa\x14a\x02kW\x80ce\x0E\x13\x12\x14a\x02fW\x80ckM\x17\xAD\x14a\x02aW\x80ck\xA3\xD1\x7F\x14a\x02\\W\x80coN\"\xF5\x14a\x02WW\x80cz\x7F4\xE8\x14a\x02RW\x80c|n\xDB>\x14a\x02MW\x80c|qP\x94\x14a\x02HW\x80c|\x90\x1D{\x14a\x02CW\x80c\x8D\x93^\x1D\x14a\x02>W\x80c\x8D\xD5\x0E\xEE\x14a\x029W\x80c\x91\xD1HT\x14a\x024W\x80c\x95\x81K\xF5\x14a\x02/W\x80c\xA2\x17\xFD\xDF\x14a\x02*W\x80c\xCES|\x9F\x14a\x02%W\x80c\xD2k\xCC\x80\x14a\x02 W\x80c\xD5Gt\x1F\x14a\x02\x1BW\x80c\xE1\x8BM\xAE\x14a\x02\x16W\x80c\xE8\xC4l(\x14a\x02\x11W\x80c\xEFQ\"!\x14a\x02\x0CW\x80c\xFDy\xD3\xE1\x14a\x02\x07W\x80c\xFD\xD5A#\x14a\x02\x02Wc\xFF\x87\xC1\x8C\x14a\x01\xFDW_\x80\xFD[a\x11rV[a\x112V[a\x11\x08V[a\x10\xEBV[a\x10\xD0V[a\x10\xB5V[a\x10uV[a\x10%V[a\x0F\xE6V[a\x0F\xCCV[a\x0B\xC1V[a\x0FmV[a\x0F-V[a\x0F\x10V[a\x0E\x89V[a\x0E!V[a\r\xBDV[a\r\x93V[a\riV[a\r1V[a\r\x16V[a\x0C\xF2V[a\x0C\xABV[a\x0B\xFEV[a\x0B\x89V[a\x0B\x02V[a\n\x08V[a\t\xDEV[a\tpV[a\t=V[a\t\x0EV[a\x08\xC9V[a\x08DV[a\x07\x88V[a\x07VV[a\x079V[a\x06\xFFV[a\x06xV[a\x05cV[a\x05\"V[a\x04\xADV[a\x03\xA5V[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x80\x91\x03a\x03pW\x80\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x92\x14\x90\x81\x15a\x03FW[P`@Q\x90\x15\x15\x81R\xF3[\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91P\x14_a\x03;V[_\x80\xFD[\x91\x81`\x1F\x84\x01\x12\x15a\x03pW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03pW` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x03pWV[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x03\xD9\x906\x90`\x04\x01a\x03tV[\x91\x90a\x03\xE3a\x1E\x82V[\x81_R`\x0C` R`\xFF`@_ T\x16a\x04\x85W\x81_R`\r` Ra\x04\x0B`@_ a\x12\x86V[_[\x83\x81\x10a\x04UWP\x7F\xA0\xFE\xA1*]\xFD\xB3\xEB\xF0\xB7\xC4\x9A}\xDD_\xFD\xD3\xE5\xB2\xD7WO\xF1k\n\x102\xED\xC1\x9De\x8Ba\x04S\x93\x83\x92a\x04K`@Q\x92\x83\x92\x83a\x13\x8EV[\x03\x90\xA2a\x1FWV[\0[`\x01\x90a\x04\x7Fa\x04m\x85_R`\r` R`@_ \x90V[a\x04x\x83\x88\x87a\x12\xB6V[5\x90a\x13\x14V[\x01a\x04\rV[\x7F\xFD\x93\xC1_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x80_R`\x12` R`@_ T_R`\x11` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x03a\x03pWV[4a\x03pW`\x80`\x03\x196\x01\x12a\x03pWa\x04S`\x045`$5a\x05E\x81a\x05\x04V[`D5\x90a\x05R\x82a\x05\x04V[`d5\x92a\x05^a\x1E\x82V[a\x13\xA2V[4a\x03pW```\x03\x196\x01\x12a\x03pW`\x045`$5`D5\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x04T\x163\x03a\x06\"W`\x03T\x83\x11\x15a\x05\xFAWa\x05\xF5\x7Fxr.\xD9t+M\xCD\xA7\x05\xD0\x10\xFF\xF7F\n5\x1E\x90o\x82#\xCF\xF2\xD2:U\xB4KfB|\x93\x82`\x01U\x83`\x02U\x80`\x03U`@Q\x93\x84\x93\x84`@\x91\x94\x93\x92``\x82\x01\x95\x82R` \x82\x01R\x01RV[\x03\x90\xA1\0[\x7F\xC3k\xA4#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F$\xB2\xE7\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91\x81`\x1F\x84\x01\x12\x15a\x03pW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03pW` \x83\x81\x86\x01\x95\x01\x01\x11a\x03pWV[4a\x03pW`\xA0`\x03\x196\x01\x12a\x03pW`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x06\xAF\x906\x90`\x04\x01a\x06JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x06\xD2\x906\x90`\x04\x01a\x03tV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03pWa\x06\xF7a\x04S\x976\x90`\x04\x01a\x03tV[\x96\x90\x95a\x15\xD0V[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `\x01T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW` a\x07\x80`\x045_R_` R`\x01`@_ \x01T\x90V[`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90\x80_R`\x0C` R`\xFF`@_ T\x16\x15a\x07\xE3W_R`\x10` R`@_ \x90_R` Ra\x07\xDF`@_ T`@Q\x91\x82\x91\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xF3[\x7F\xC5\xB1Eq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[` `@\x81\x83\x01\x92\x82\x81R\x84Q\x80\x94R\x01\x92\x01\x90_[\x81\x81\x10a\x08.WPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x08!V[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x80_R`\x0C` R`\xFF`@_ T\x16\x15a\x07\xE3W_R`\x0F` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x08\xB3Wa\x07\xDF\x85a\x08\xA7\x81\x87\x03\x82a\x15[V[`@Q\x91\x82\x91\x82a\x08\x0BV[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x08\x90V[4a\x03pW`@`\x03\x196\x01\x12a\x03pWa\x04S`$5`\x045a\x08\xEC\x82a\x05\x04V[a\t\ta\t\x04\x82_R_` R`\x01`@_ \x01T\x90V[a\x1E\xEAV[a\"nV[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x0C` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x04T\x16`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5a\t\x90\x81a\x05\x04V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\t\xB6Wa\x04S\x91a#KV[\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x0E` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_\x81_R`\x0C` R`\xFF`@_ T\x16\x90\x82_R`\r` R`@_ \x92`@Q\x80\x85` \x82\x97T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a\n\xE9WPPa\ni\x92P\x03\x85a\x15[V[\x83Q_[\x85Q\x81\x10\x15a\n\xCDWa\n\xACa\n\xA5a\n\x8E\x85_R`\n` R`@_ \x90V[a\n\x98\x84\x8Aa\x17[V[Q_R` R`@_ \x90V[T`\xFF\x16\x90V[a\n\xB9W[`\x01\x01a\nmV[\x92a\n\xC5`\x01\x91a\x17oV[\x93\x90Pa\n\xB1V[P`@\x80Q\x85\x15\x15\x81R` \x81\x01\x92\x90\x92R\x81\x01\x83\x90R``\x90\xF3[\x84T\x83R`\x01\x94\x85\x01\x94\x89\x94P` \x90\x93\x01\x92\x01a\nTV[4a\x03pW`\xA0`\x03\x196\x01\x12a\x03pW`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0B9\x906\x90`\x04\x01a\x03tV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0B\\\x906\x90`\x04\x01a\x03tV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03pWa\x0B\x81a\x04S\x976\x90`\x04\x01a\x03tV[\x96\x90\x95a\x18fV[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x10` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\n` R`@_ \x90_R` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x11` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\x05T\x81\x10\x15a\x0C\x91W`\x05_R` _ \x01\x90_\x90V[a\x0CLV[\x80T\x82\x10\x15a\x0C\x91W_R` _ \x01\x90_\x90V[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\r` R`@_ \x80T\x82\x10\x15a\x03pW` \x91a\x0C\xE3\x91a\x0C\x96V[\x90T\x90`\x03\x1B\x1C`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pWa\x04S`\x045a\r\x11a\x1E\x82V[a\x1B\xDAV[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q`\x02\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x0B` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x12` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\t` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\r` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x0E\x0BWa\x07\xDF\x85a\x08\xA7\x81\x87\x03\x82a\x15[V[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\r\xF4V[4a\x03pW` `\x03\x196\x01\x12a\x03pWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045a\x0ES\x81a\x05\x04V[a\x0E[a\x1E\x82V[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04T\x16\x17`\x04U_\x80\xF3[4a\x03pW`\xA0`\x03\x196\x01\x12a\x03pW`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0E\xC0\x906\x90`\x04\x01a\x06JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0E\xE3\x906\x90`\x04\x01a\x03tV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03pWa\x0F\x08a\x04S\x976\x90`\x04\x01a\x03tV[\x96\x90\x95a\x1D\x06V[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `\x03T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x06` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW` `\xFFa\x0F\xC0`$5`\x045a\x0F\x94\x82a\x05\x04V[_R_\x84R`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q_\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x80_R`\x0C` R`\xFF`@_ T\x16\x15a\x07\xE3W_R`\x0E` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045`\x05T\x81\x10\x15a\x03pW` \x90`\x05_R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01T`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pWa\x04S`$5`\x045a\x10\x98\x82a\x05\x04V[a\x10\xB0a\t\x04\x82_R_` R`\x01`@_ \x01T\x90V[a#KV[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q`\x03\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q`\x07\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `\x02T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x08` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x07` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x0F` R`@_ \x80T\x82\x10\x15a\x03pW` \x91a\x0C\xE3\x91a\x0C\x96V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81`\x01\x1B\x91\x80\x83\x04`\x02\x14\x90\x15\x17\x15a\x12\x1AWV[a\x11\xD7V[\x91a\x128\x91\x83T\x90_\x19\x90`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90V[\x90UV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x12\x81W\x81T\x91\x81\x81U\x82\x82\x10a\x12_WPPPV[_R` _ \x91\x82\x01\x91\x01[\x81\x81\x10a\x12vWPPV[_\x81U`\x01\x01a\x12kV[a\x11\xAAV[\x80T\x90_\x81U\x81a\x12\x95WPPV[_R` _ \x90\x81\x01\x90[\x81\x81\x10a\x12\xABWPPV[_\x81U`\x01\x01a\x12\xA0V[\x91\x90\x81\x10\x15a\x0C\x91W`\x05\x1B\x01\x90V[`\x05Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x12\x81W`\x01\x81\x01`\x05U`\x05T\x81\x10\x15a\x0C\x91W`\x05_R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[\x80T\x90h\x01\0\0\0\0\0\0\0\0\x82\x10\x15a\x12\x81W\x81a\x13;\x91`\x01a\x128\x94\x01\x81Ua\x0C\x96V[\x81\x93\x91T\x90_\x19\x90`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90V[\x90\x91\x82\x81R\x7F\x07\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03pW` \x92`\x05\x1B\x80\x92\x84\x83\x017\x01\x01\x90V[\x91` a\x13\x9F\x93\x81\x81R\x01\x91a\x13QV[\x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x13\xE7a\x13\xCD\x84_R`\x06` R`@_ \x90V[Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16a\x15\x17Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15a\x14\xD4W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x14a\x14\xFCWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x14\xD4Wa\x14\xD1\x92a\x14\xB1a\x14\xC3\x92a\x14_\x85a\x12\xC6V[a\x14q\x85_R`\x06` R`@_ \x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[a\x14q\x83_R`\x07` R`@_ \x90V[_R`\x08` R`@_ \x90V[UV[\x7F\xD9.#=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91Pa\x15\x15\x92Pa\x14q\x90_R`\x06` R`@_ \x90V[V[\x7F\xDFe\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\x81W`@RV[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\x81W`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x12\x81W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x92\x91\x92a\x15\xA6\x82a\x15~V[\x91a\x15\xB4`@Q\x93\x84a\x15[V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x03pW\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x96\x93\x90\x94\x91\x95\x92a\x15\xE26\x82\x89a\x15\x9AV[` \x81Q\x91\x01 `\x01T\x03a\x16\xF5Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x16\x18\x89_R`\x07` R`@_ \x90V[T\x16\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15a\x16~W\x91a\x16ja\x14\xD1\x98\x96\x94\x92a\x16da\x16o\x99\x97\x95a\x16]\x8D_R`\x08` R`@_ \x90V[T\x90a ,V[\x97a RV[a!\x19V[\x91_R`\t` R`@_ \x90V[\x88\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14a\x16\xCDW\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xDA&\x12\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xEF\xB6L\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x80Q`\x02\x10\x15a\x0C\x91W``\x01\x90V[\x80Q`\x10\x10\x15a\x0C\x91Wa\x02 \x01\x90V[\x80Q\x15a\x0C\x91W` \x01\x90V[\x80Q`\x01\x10\x15a\x0C\x91W`@\x01\x90V[\x80Q\x82\x10\x15a\x0C\x91W` \x91`\x05\x1B\x01\x01\x90V[_\x19\x81\x14a\x12\x1AW`\x01\x01\x90V[\x92\x90\x93a\x17\x9B` \x95a\x17\xA8\x94\x98\x97\x98``\x87R``\x87\x01\x91a\x13QV[\x91\x84\x83\x03\x86\x86\x01Ra\x13QV[\x90`@\x81\x83\x03\x91\x01R\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x17\xC6WPPP\x90V[\x90\x91\x92` \x80`\x01\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x875a\x17\xEF\x81a\x05\x04V[\x16\x81R\x01\x94\x01\x92\x91\x01a\x17\xB9V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x12\x81Wa\x18\x17\x83\x83a\x12<V[\x90_R` _ _[\x83\x81\x10a\x18-WPPPPV[`\x01\x90` \x845\x94\x01\x93\x81\x84\x01U\x01a\x18 V[\x90`\x01\x82\x01\x80\x92\x11a\x12\x1AWV[\x91\x90\x82\x01\x80\x92\x11a\x12\x1AWV[5a\x13\x9F\x81a\x05\x04V[\x95\x97\x96\x97\x94\x93\x92\x91\x90\x94a\x18\x96a\n\xA5\x87a\x18\x89\x8A_R`\n` R`@_ \x90V[\x90_R` R`@_ \x90V[a\x1A\xD6Wa\x18\xB0\x86a\x18\x89\x89_R`\x0B` R`@_ \x90V[T\x89`@Qa\x18\xDA\x81a\x18\xCC` \x82\x01\x94\x87\x8C\x8C\x8C\x8C\x8Aa\x17}V[\x03`\x1F\x19\x81\x01\x83R\x82a\x15[V[Q\x90 \x03a\x1A\xAEW\x97\x93\x92\x91\x90_\x98a\x19\x05\x83\x83a\x19\0\x8B_R`\x0F` R`@_ \x90V[a\x17\xFDV[_\x94[\x83\x86\x10a\x19\x8FWPPPPPPPa\x19\x89_\x91a\x15\x15\x94\x95a\x192\x85_R`\x0E` R`@_ \x90V[Ua\x19wa\x19L\x82a\x18\x89\x87_R`\n` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90UV[a\x18\x89\x84_R`\x0B` R`@_ \x90V[Ua\x1FWV[\x90\x91\x92\x93\x94\x95\x99a\x19\xA1\x87\x83\x88a\x12\xB6V[5a\x19\xAB\x91a\x18OV[\x95a\x19\xB7\x81\x83\x88a\x12\xB6V[5a\x19\xCA\x8A_R`\x10` R`@_ \x90V[a\x19\xD5\x83\x88\x88a\x12\xB6V[5a\x19\xE7\x91\x90_R` R`@_ \x90V[\x90\x81T\x90a\x19\xF4\x91a\x18OV[\x90Ua\x1A\x01\x81\x8C\x85a\x12\xB6V[a\x1A\n\x90a\x18\\V[a\x1A\x1C\x8A_R`\x11` R`@_ \x90V[a\x1A'\x83\x88\x88a\x12\xB6V[5a\x1A9\x91\x90_R` R`@_ \x90V[\x90a\x1A~\x91\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[\x88a\x1A\x8A\x82\x87\x87a\x12\xB6V[5a\x1A\x9D\x90_R`\x12` R`@_ \x90V[U`\x01\x01\x94\x93\x92\x91\x90\x99\x95\x99a\x19\x08V[\x7F\\\xB0E\xDB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9F\xBF\xC5\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90_\x19\x82\x01\x91\x82\x11a\x12\x1AWV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF@\x82\x01\x91\x82\x11a\x12\x1AWV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x91\x82\x11a\x12\x1AWV[` \x03\x90` \x82\x11a\x12\x1AWV[\x91\x90\x82\x03\x91\x82\x11a\x12\x1AWV[`\x05T\x80\x15a\x1B\xADW_\x19\x81\x01\x90`\x05T\x82\x10\x15a\x0C\x91W_\x19_\x91`\x05\x83R` \x83 \x01\x01U`\x05UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x14a\x1C\xF1W`\x05T\x80\x91_[\x83\x81\x10a\x1C\xCFW[P\x82\x82\x14a\x1C\xA7Wa\x1CMa\x14\xD1\x92a\x1CGa\x1CAa\x1C7a\x1C2_\x98a\x1A\xFEV[a\x0CyV[\x90T\x90`\x03\x1B\x1C\x90V[\x91a\x0CyV[\x90a\x12\x1FV[a\x1CUa\x1B\x81V[a\x1C\x92a\x1Cj\x82_R`\x06` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81T\x16\x90UV[a\x14\xC3a\x1Cj\x82_R`\x07` R`@_ \x90V[\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x81a\x1C\xDCa\x1C7\x83a\x0CyV[\x14a\x1C\xE9W`\x01\x01a\x1C\x08V[\x91P_a\x1C\x10V[a\x1Cja\x15\x15\x91_R`\x06` R`@_ \x90V[\x96\x93\x90\x95\x92\x94\x91\x94a\x1D'a\n\xA5\x88a\x18\x89\x8B_R`\n` R`@_ \x90V[\x80\x15a\x1EcW[a\x1A\xD6Wa\x1D=6\x82\x88a\x15\x9AV[` \x81Q\x91\x01 a\x1DV\x88_R`\t` R`@_ \x90V[T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89\x14a\x1EZW[\x03a\x1E2Wa\x1D\x8F\x95\x87\x89a$ V[\x90\x81\x15a\x1E\nW\x80a\x1D\xE5\x91\x84\x7F,?D5\x99\xC6&\x8A\xCE\xD4s\xE7f\x0B@tn\xA3\x94\xD5\x19\x17\x9E\xA3\xF6\x0F8)t\xA2\xE7\x8E`@Q\x80a\x1D\xD0\x88\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xA3a\x18\x89\x84_R`\x0B` R`@_ \x90V[Ua\x1D\xF8\x81_R`\r` R`@_ \x90V[T\x15a\x1E\x01WPV[a\x15\x15\x90a%\0V[\x7F\x9A\x0C\xCES\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9D\x8C\xBA\xCD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P`\x02Ta\x1D\x7FV[Pa\x1Ez\x87a\x18\x89\x8A_R`\x0B` R`@_ \x90V[T\x15\x15a\x1D.V[3_\x90\x81R\x7F\xAD2(\xB6v\xF7\xD3\xCDB\x84\xA5D?\x17\xF1\x96+6\xE4\x91\xB3\n@\xB2@XI\xE5\x97\xBA_\xB5` R`@\x90 T`\xFF\x16\x15a\x1E\xBAWV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R_`$R`D_\xFD[\x80_R_` R`\xFFa\x1F\x1E3`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a\x1F(WPV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R`$R`D_\xFD[\x80_R`\r` R`@_ `@Q\x80\x82` \x82\x94T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a \x13WPPa\x1F\x91\x92P\x03\x82a\x15[V[_[\x81Q\x81\x10\x15a\x1F\xD6Wa\x1F\xC5a\x1F\xC1a\n\xA5a\x1F\xB7\x86_R`\n` R`@_ \x90V[a\n\x98\x85\x87a\x17[V[\x15\x90V[a\x1F\xD1W`\x01\x01a\x1F\x93V[PPPV[PPa\x1F\xEDa\x19L\x82_R`\x0C` R`@_ \x90V[\x7Fx\xDF\x93\x81\x81\xAF\xCB(\xEA\xA7\xD0\x99#[\xBF\x98w\x83-o\xAA\xFE6\xD1\xEAp\x91o:\xCE3\xE0_\x80\xA2V[\x84T\x83R`\x01\x94\x85\x01\x94\x86\x94P` \x90\x93\x01\x92\x01a\x1F|V[\x90`@Q\x90` \x82\x01\x92\x83R`@\x82\x01R`@\x81Ra L``\x82a\x15[V[Q\x90 \x90V[a da i\x91a n\x936\x91a\x15\x9AV[a%\x8CV[a&\x07V[\x80Q`\x03\x10\x15a\x0C\x91W`\x80a\x13\x9F\x91\x01Qa&\xB4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x12\x81W`\x05\x1B` \x01\x90V[\x92\x91\x92a \xA9\x82a \x85V[\x93a \xB7`@Q\x95\x86a\x15[V[` \x85\x84\x81R\x01\x92`\x05\x1B\x82\x01\x91\x81\x83\x11a\x03pW\x80\x93[\x83\x85\x10a \xDDWPPPPPV[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pW\x82\x01\x83`\x1F\x82\x01\x12\x15a\x03pW` \x91a!\x0E\x85\x83\x85\x80\x955\x91\x01a\x15\x9AV[\x81R\x01\x94\x01\x93a \xCFV[\x90\x91a!\x93a!\x8Ea d\x94a!\x99\x96\x98\x99\x97\x99`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01\x92``\x1B\x16\x82R`\x14\x81Ra!k`4\x82a\x15[V[Q\x90 \x93`@Q\x94` \x86\x01R` \x85Ra!\x87`@\x86a\x15[V[6\x91a \x9DV[a&\xF6V[\x91a'\xA0V[\x91\x82Q\x15a\"FWa!\x93a!\x8Ea\"\0\x92a\"\x0E\x96a!\x87a!\xCFa!\xC9a!\xC4a d\x9Aa&\x07V[a\x17\x1DV[Qa&\xB4V[\x96`@Qa!\xEA\x81a\x18\xCC` \x82\x01\x94\x85\x91\x90` \x83\x01\x92RV[Q\x90 `@Q\x96\x87\x91` \x83\x01` \x91\x81R\x01\x90V[\x03`\x1F\x19\x81\x01\x87R\x86a\x15[V[\x80Q\x15a\"\x1EWa\x13\x9F\x90a&\xB4V[\x7F4w\xDC\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7FTw\x06\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x80_R_` R`\xFFa\"\xA2\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16a#EW\x80_R_` Ra\"\xDA\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r_\x80\xA4`\x01\x90V[PP_\x90V[\x80_R_` R`\xFFa#\x7F\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a#EW\x80_R_` Ra#\xB8\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81T\x16\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B_\x80\xA4`\x01\x90V[\x95\x92\x96\x93\x90\x94\x91\x94_R`\x06` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16\x94\x85\x15a\x1C\xA7Wa\x13\x9F\x97a$^\x91a RV[\x95`@Q` \x81\x01\x91\x82R`\x07`@\x82\x01R`@\x81Ra$\x7F``\x82a\x15[V[Q\x90 \x95a!\x19V[`\x05\x81\x14a$\xFDW`\x05T\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12\x81Wa$\xAD\x82\x82a\x12<V[_\x90\x81R` \x81 \x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x80T[\x84\x84\x10a$\xE7WPPPPPV[`\x01\x80\x91\x92\x01\x93\x84T\x92\x81\x85\x01U\x01\x92\x90a$\xD9V[PV[\x80_R`\r` Ra%\x14`@_ a$\x88V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80_R`\x06` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16a%`WPPV[a\x15\x15\x91_R`\r` R`@_ a\x13\x14V[`@Q\x90a%\x81\x82a\x15?V[_` \x83\x82\x81R\x01RV[a%\x94a%tV[P` \x81Q\x91`@Q\x92a%\xA7\x84a\x15?V[\x83R\x01` \x82\x01R\x90V[\x15a\x03pWV[\x90a%\xC3\x82a \x85V[a%\xD0`@Q\x91\x82a\x15[V[\x82\x81R`\x1F\x19a%\xE0\x82\x94a \x85V[\x01\x90_[\x82\x81\x10a%\xF0WPPPV[` \x90a%\xFBa%tV[\x82\x82\x85\x01\x01R\x01a%\xE4V[\x90a&\x11\x82a*\xD6V[\x15a\x03pWa&\x1F\x82a*\xFAV[\x91a&)\x83a%\xB9V[\x90` \x81\x01\x80Qa&9\x81a+[V[\x81\x01\x80\x91\x11a\x12\x1AW\x94_\x90[\x80\x82\x10a&hWPPa\x13\x9F\x92\x93\x94a&`\x91Q\x90a\x1BtV[\x90Q\x14a%\xB2V[\x90\x95a&\xAC\x81a&y`\x01\x93a+\xC6V[\x90`@Qa&\x88`@\x82a\x15[V[\x82\x81R\x81` \x82\x01Ra&\x9B\x8B\x8Aa\x17[V[Ra&\xA6\x8A\x89a\x17[V[Pa\x18OV[\x96\x01\x90a&FV[\x80Q\x80\x15\x15\x90\x81a&\xEAW[P\x15a\x03pWa&\xCF\x90a,\x80V[\x90Q\x90` \x81\x10a&\xDEWP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a&\xC0V[a'\0\x81Qa%\xB9V[\x90_[\x81Q\x81\x10\x15a'>W\x80a'\"a'\x1C`\x01\x93\x85a\x17[V[Qa%\x8CV[a',\x82\x86a\x17[V[Ra'7\x81\x85a\x17[V[P\x01a'\x03V[PP\x90V[`@Q\x90a'R` \x83a\x15[V[_\x80\x83R6` \x84\x017V[\x90a'h\x82a\x15~V[a'u`@Q\x91\x82a\x15[V[\x82\x81R`\x1F\x19a'\x85\x82\x94a\x15~V[\x01\x90` 6\x91\x017V[\x90\x81Q\x81\x10\x15a\x0C\x91W\x01` \x01\x90V[\x90a'\xAA\x90a,\xE0V[_\x91_a'\xB5a%tV[P\x84Q\x15a*\x9DW\x93_\x91[\x81Q\x83\x10\x15a*>W\x82\x15\x80\x80a*(W[a\x03pW\x15\x80a*\x0CW[a\x03pWa'\xF5a'\xEF\x84\x84a\x17[V[Qa&\x07V[\x95\x86Q`\x02\x81\x14_\x14a(\xF6WPPa(\x1Ea(\x19a(\x13\x88a\x17>V[Qa/(V[a/vV[\x95a(4a(-\x88\x88\x84a/\xE3V[\x80\x92a\x18OV[\x96Q\x11a(\xD8W\x15a(kWPa(K\x90Qa\x1A\xFEV[\x11a\x03pWQ\x11a(bWa(\x13a\x13\x9F\x91a\x17KV[Pa\x13\x9Fa'CV[\x91\x90\x94a(x\x86Qa\x1A\xFEV[\x82\x14a\x03pW\x80a(\x96a\x1F\xC1a(\x90`\x01\x94a\x17KV[Qa*\xD6V[\x15a(\xB9Wa(\xA7a(\xAD\x91a\x17KV[Qa/hV[\x91[\x01\x91\x94\x90\x94a'\xC1V[a(\xC5a(\xD2\x91a\x17KV[Q` \x81\x01Q\x90Q\x90 \x90V[\x91a(\xAFV[PP\x91P\x92Pa(\xE9\x91PQa\x1A\xFEV[\x11a\x03pWa\x13\x9Fa'CV[`\x11\x90\x97\x91\x93\x97\x94\x92\x94\x14a)\x0FW[P`\x01\x90a(\xAFV[\x95\x93\x80\x92P\x94\x92\x90\x94Q\x83\x14\x15_\x14a)\xEEW`\xFFa)ia)ca)]a)7\x87\x87a'\x8FV[Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90V[`\xF8\x1C\x90V[\x94a\x18AV[\x93\x16`\x10\x81\x10\x15a\x03pWa)\x87a)\x81\x82\x89a\x17[V[Qa/RV[\x15a)\xA9WPPPPa)\x9C\x91\x92PQa\x1A\xFEV[\x03a\x03pWa\x13\x9Fa'CV[\x86a)\xC1a\x1F\xC1a(\x90\x84`\x01\x96\x98\x9A\x97\x99\x9Ba\x17[V[\x15a)\xDBWa)\xD3\x91a(\xA7\x91a\x17[V[\x91[\x90a)\x06V[a)\xE8\x91a(\xC5\x91a\x17[V[\x91a)\xD5V[PPPa)\xFB\x90Qa\x1A\xFEV[\x03a\x03pWa(\x13a\x13\x9F\x91a\x17-V[Pa* a*\x1A\x84\x84a\x17[V[Qa.\xF1V[\x86\x14\x15a'\xDEV[Pa*6a(\xC5\x85\x85a\x17[V[\x82\x14\x15a'\xD3V[`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FInvalid MPT proof\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[P\x90Pa*\xCE\x92P\x7FV\xE8\x1F\x17\x1B\xCCU\xA6\xFF\x83E\xE6\x92\xC0\xF8n[H\xE0\x1B\x99l\xAD\xC0\x01b/\xB5\xE3c\xB4!\x91P\x14a%\xB2V[a\x13\x9Fa'CV[\x80Q\x15a*\xF5W` `\xC0\x91\x01QQ_\x1A\x10a*\xF1W`\x01\x90V[_\x90V[P_\x90V[\x80Q\x15a*\xF5W_\x90` \x81\x01\x90\x81Qa+\x13\x81a+[V[\x81\x01\x80\x91\x11a\x12\x1AW\x91Q\x90Q\x81\x01\x80\x91\x11a\x12\x1AW\x91\x90[\x82\x81\x10a+9WP\x90P\x90V[a+B\x81a+\xC6V[\x81\x01\x80\x91\x11a\x12\x1AWa+U\x90\x91a\x17oV[\x90a+,V[Q_\x1A`\x80\x81\x10\x15a+lWP_\x90V[`\xB8\x81\x10\x80\x15a+\xB0W[\x15a+\x82WP`\x01\x90V[`\xC0\x81\x10\x15a+\xA1Wa\x13\x9F\x90a+\x9C\x90`\xB7[\x90a\x1BtV[a\x18AV[a\x13\x9F\x90a+\x9C\x90`\xF7a+\x96V[P`\xC0\x81\x10\x15\x80\x15a+wWP`\xF8\x81\x10a+wV[\x80Q_\x1A\x90`\x80\x82\x10\x15a+\xDBWPP`\x01\x90V[`\xB8\x82\x10\x15a+\xF1WPa+\x9Ca\x13\x9F\x91a\x1B9V[`\xC0\x82\x10\x15a,2W`\x01\x01Q` \x82\x90\x03`\xB7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFJ\x01\x90V[`\xF8\x82\x10\x15a,HWPa+\x9Ca\x13\x9F\x91a\x1B\x0CV[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\n\x01\x90V[\x90` \x82\x01\x91a,\x90\x83Qa+[V[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x12\x1AWQ\x92\x83\x03\x92\x83\x11a\x12\x1AW\x91\x90V[\x15a,\xB3WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD[\x90a-\t_a,\xFA\x84Qa,\xF5\x81\x15\x15a%\xB2V[a\x12\x04V[a-\x04`\x01a%\xB2V[a\x1BtV[\x90a-\x13\x82a'^V[\x92_\x91\x82[a-\"\x85_a\x18OV[\x84\x10\x15a-\xE2Wa-\x9Da)ca-\"\x92a-=\x87`\x01\x16\x90V[a-\xA5W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a-\x87a-~a)]a)7a-x\x8C`\x01\x1C\x90V[\x8Ba'\x8FV[`\x04\x1C`\x0F\x16\x90V[`\xF8\x1B\x16_\x1Aa-\x97\x82\x8Ba'\x8FV[Sa\x18AV[\x93\x90Pa-\x18V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a-\x87a-\xDCa)]a)7a-x\x8C`\x01\x1C\x90V[`\xFF\x16\x90V[\x91P\x92Pa\x15\x15\x91P\x83Q\x14a,\xACV[a.\x13\x82a.\x07\x83Qa,\xF5\x81\x15\x15a%\xB2V[a-\x04\x81\x83\x11\x15a%\xB2V[\x90a.\x1D\x82a'^V[\x93\x83\x92_[a.,\x82\x87a\x18OV[\x85\x10\x15a.\xDFW\x90a.\x9Fa.\x99a.,\x93a.H\x88`\x01\x16\x90V[a.\xA8W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a.\x89a-~a)]a)7a.\x83\x8D`\x01\x1C\x90V[\x8Ca'\x8FV[`\xF8\x1B\x16_\x1Aa-\x97\x82\x8Ca'\x8FV[\x95a\x18AV[\x94\x90\x91Pa.\"V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a.\x89a-\xDCa)]a)7a.\x83\x8D`\x01\x1C\x90V[\x92PP\x92Pa\x15\x15\x91P\x83Q\x14a,\xACV[\x80Q` \x81\x10\x15a/\tWP` \x81\x01Q\x90Q\x90 \x90V[\x90` \x01Q `@Q` \x81\x01\x91\x82R` \x81Ra L`@\x82a\x15[V[\x80Q\x15a\x03pWa/;a\x13\x9F\x91a,\x80V[a/G\x81\x93\x92\x93a'^V[\x92\x83` \x01\x90a0\x96V[`\x01\x81Q\x03a*\xF5W` \x01QQ_\x1A`\x80\x14\x90V[a/q\x90a,\x80V[\x90 \x90V[\x90\x81Q\x15a\x03pW`\x0Fa/\x92a-~a)]a)7\x86a\x17>V[\x16\x80a/\xA5WPa\x13\x9F`\x02_\x93a-\xF3V[`\x01\x81\x03a/\xBAWPa\x13\x9F`\x01_\x93a-\xF3V[`\x02\x81\x03a/\xD0WPa\x13\x9F`\x02`\x01\x93a-\xF3V[`\x03\x03a\x03pWa\x13\x9F`\x01\x80\x93a-\xF3V[\x91\x90_[\x83\x81\x01\x80\x82\x11a\x12\x1AW\x82Q\x81\x10\x80a0}W[\x15a0uWa0+\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x84a'\x8FV[Q\x16\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a0X\x83\x86a'\x8FV[Q\x16\x90\x03a0nWa0i\x90a\x17oV[a/\xE7V[\x92PPP\x90V[P\x92PPP\x90V[P\x83Q\x82\x10a/\xFBV[`\x1F\x81\x11a\x12\x1AWa\x01\0\n\x90V[\x90\x91\x80\x15a\x1F\xD1W[` \x81\x10\x15a0\xD9W\x80a0\xB2WPPPV[a0\xC6a0\xC1a0\xCB\x92a\x1BfV[a0\x87V[a\x1A\xFEV[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[\x91\x90\x80Q\x82R` \x81\x01\x80\x91\x11a\x12\x1AW\x90` \x81\x01\x80\x91\x11a\x12\x1AW\x91`\x1F\x19\x81\x01\x90\x81\x11\x15a0\x9FWa\x11\xD7V\xAD2(\xB6v\xF7\xD3\xCDB\x84\xA5D?\x17\xF1\x96+6\xE4\x91\xB3\n@\xB2@XI\xE5\x97\xBA_\xB5",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a7146102cf5780630344571f146102ca5780630cc46212146102c5578063133bf89f146102c057806319771640146102bb5780631bf4951c146102b657806322623897146102b157806323afb0ff146102ac578063248a9ca3146102a7578063285f2446146102a25780632cd078b81461029d5780632f2ff15d1461029857806330c709b614610293578063362b81541461028e57806336568abe1461028957806347dff69d146102845780634e6da2a41461027f578063529f4b561461027a57806355fcc556146102755780635a6330801461022f5780635b1817e8146102705780635d579a611461026b578063650e1312146102665780636b4d17ad146102615780636ba3d17f1461025c5780636f4e22f5146102575780637a7f34e8146102525780637c6edb3e1461024d5780637c715094146102485780637c901d7b146102435780638d935e1d1461023e5780638dd50eee1461023957806391d148541461023457806395814bf51461022f578063a217fddf1461022a578063ce537c9f14610225578063d26bcc8014610220578063d547741f1461021b578063e18b4dae14610216578063e8c46c2814610211578063ef5122211461020c578063fd79d3e114610207578063fdd54123146102025763ff87c18c146101fd575f80fd5b611172565b611132565b611108565b6110eb565b6110d0565b6110b5565b611075565b611025565b610fe6565b610fcc565b610bc1565b610f6d565b610f2d565b610f10565b610e89565b610e21565b610dbd565b610d93565b610d69565b610d31565b610d16565b610cf2565b610cab565b610bfe565b610b89565b610b02565b610a08565b6109de565b610970565b61093d565b61090e565b6108c9565b610844565b610788565b610756565b610739565b6106ff565b610678565b610563565b610522565b6104ad565b6103a5565b34610370576020600319360112610370576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361037057807f7965db0b0000000000000000000000000000000000000000000000000000000060209214908115610346575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150145f61033b565b5f80fd5b9181601f840112156103705782359167ffffffffffffffff8311610370576020808501948460051b01011161037057565b346103705760406003193601126103705760043560243567ffffffffffffffff8111610370576103d9903690600401610374565b91906103e3611e82565b815f52600c60205260ff60405f20541661048557815f52600d60205261040b60405f20611286565b5f5b83811061045557507fa0fea12a5dfdb3ebf0b7c49a7ddd5ffdd3e5b2d7574ff16b0a1032edc19d658b61045393839261044b6040519283928361138e565b0390a2611f57565b005b60019061047f61046d855f52600d60205260405f2090565b6104788388876112b6565b3590611314565b0161040d565b7ffd93c15f000000000000000000000000000000000000000000000000000000005f5260045ffd5b3461037057602060031936011261037057600435805f52601260205260405f20545f52601160205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff81160361037057565b346103705760806003193601126103705761045360043560243561054581610504565b6044359061055282610504565b6064359261055e611e82565b6113a2565b34610370576060600319360112610370576004356024356044359173ffffffffffffffffffffffffffffffffffffffff600454163303610622576003548311156105fa576105f57f78722ed9742b4dcda705d010fff7460a351e906f8223cff2d23a55b44b66427c93826001558360025580600355604051938493846040919493926060820195825260208201520152565b0390a1005b7fc36ba423000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f24b2e7fd000000000000000000000000000000000000000000000000000000005f5260045ffd5b9181601f840112156103705782359167ffffffffffffffff8311610370576020838186019501011161037057565b346103705760a06003193601126103705760043560243560443567ffffffffffffffff8111610370576106af90369060040161064a565b60649391933567ffffffffffffffff8111610370576106d2903690600401610374565b916084359567ffffffffffffffff8711610370576106f7610453973690600401610374565b9690956115d0565b34610370575f6003193601126103705760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610370575f600319360112610370576020600154604051908152f35b346103705760206003193601126103705760206107806004355f525f602052600160405f20015490565b604051908152f35b346103705760406003193601126103705760043560243590805f52600c60205260ff60405f205416156107e3575f52601060205260405f20905f526020526107df60405f2054604051918291829190602083019252565b0390f35b7fc5b14571000000000000000000000000000000000000000000000000000000005f5260045ffd5b60206040818301928281528451809452019201905f5b81811061082e5750505090565b8251845260209384019390920191600101610821565b3461037057602060031936011261037057600435805f52600c60205260ff60405f205416156107e3575f52600f60205260405f206040519081602082549182815201915f5260205f20905f5b8181106108b3576107df856108a78187038261155b565b6040519182918261080b565b8254845260209093019260019283019201610890565b34610370576040600319360112610370576104536024356004356108ec82610504565b610909610904825f525f602052600160405f20015490565b611eea565b61226e565b34610370576020600319360112610370576004355f52600c602052602060ff60405f2054166040519015158152f35b34610370575f60031936011261037057602073ffffffffffffffffffffffffffffffffffffffff60045416604051908152f35b346103705760406003193601126103705760043560243561099081610504565b3373ffffffffffffffffffffffffffffffffffffffff8216036109b6576104539161234b565b7f6697b232000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610370576020600319360112610370576004355f52600e602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f815f52600c60205260ff60405f20541690825f52600d60205260405f2092604051808560208297549384815201905f5260205f20925f5b818110610ae9575050610a699250038561155b565b83515f5b8551811015610acd57610aac610aa5610a8e855f52600a60205260405f2090565b610a98848a61175b565b515f5260205260405f2090565b5460ff1690565b610ab9575b600101610a6d565b92610ac560019161176f565b939050610ab1565b5060408051851515815260208101929092528101839052606090f35b8454835260019485019489945060209093019201610a54565b346103705760a06003193601126103705760043560243560443567ffffffffffffffff811161037057610b39903690600401610374565b60649391933567ffffffffffffffff811161037057610b5c903690600401610374565b916084359567ffffffffffffffff871161037057610b81610453973690600401610374565b969095611866565b3461037057604060031936011261037057600435602435905f52601060205260405f20905f52602052602060405f2054604051908152f35b3461037057604060031936011261037057600435602435905f52600a60205260405f20905f52602052602060ff60405f2054166040519015158152f35b3461037057604060031936011261037057600435602435905f52601160205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600554811015610c915760055f5260205f2001905f90565b610c4c565b8054821015610c91575f5260205f2001905f90565b3461037057604060031936011261037057600435602435905f52600d60205260405f20805482101561037057602091610ce391610c96565b90549060031b1c604051908152f35b3461037057602060031936011261037057610453600435610d11611e82565b611bda565b34610370575f60031936011261037057602060405160028152f35b3461037057604060031936011261037057600435602435905f52600b60205260405f20905f52602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f526012602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f526009602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f52600d60205260405f206040519081602082549182815201915f5260205f20905f5b818110610e0b576107df856108a78187038261155b565b8254845260209093019260019283019201610df4565b346103705760206003193601126103705773ffffffffffffffffffffffffffffffffffffffff600435610e5381610504565b610e5b611e82565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060045416176004555f80f35b346103705760a06003193601126103705760043560243560443567ffffffffffffffff811161037057610ec090369060040161064a565b60649391933567ffffffffffffffff811161037057610ee3903690600401610374565b916084359567ffffffffffffffff871161037057610f08610453973690600401610374565b969095611d06565b34610370575f600319360112610370576020600354604051908152f35b34610370576020600319360112610370576004355f526006602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461037057604060031936011261037057602060ff610fc0602435600435610f9482610504565b5f525f845260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54166040519015158152f35b34610370575f6003193601126103705760206040515f8152f35b3461037057602060031936011261037057600435805f52600c60205260ff60405f205416156107e3575f52600e602052602060405f2054604051908152f35b34610370576020600319360112610370576004356005548110156103705760209060055f527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154604051908152f35b346103705760406003193601126103705761045360243560043561109882610504565b6110b0610904825f525f602052600160405f20015490565b61234b565b34610370575f60031936011261037057602060405160038152f35b34610370575f60031936011261037057602060405160078152f35b34610370575f600319360112610370576020600254604051908152f35b34610370576020600319360112610370576004355f526008602052602060405f2054604051908152f35b34610370576020600319360112610370576004355f526007602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461037057604060031936011261037057600435602435905f52600f60205260405f20805482101561037057602091610ce391610c96565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b908160011b918083046002149015171561121a57565b6111d7565b91611238918354905f199060031b92831b921b19161790565b9055565b906801000000000000000081116112815781549181815582821061125f57505050565b5f5260205f2091820191015b818110611276575050565b5f815560010161126b565b6111aa565b8054905f815581611295575050565b5f5260205f20908101905b8181106112ab575050565b5f81556001016112a0565b9190811015610c915760051b0190565b600554680100000000000000008110156112815760018101600555600554811015610c915760055f527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00155565b80549068010000000000000000821015611281578161133b91600161123894018155610c96565b81939154905f199060031b92831b921b19161790565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116103705760209260051b809284830137010190565b91602061139f938181520191611351565b90565b9073ffffffffffffffffffffffffffffffffffffffff6113e76113cd845f52600660205260405f2090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b166115175773ffffffffffffffffffffffffffffffffffffffff8116156114d4577f000000000000000000000000000000000000000000000000000000000000000082146114fc5773ffffffffffffffffffffffffffffffffffffffff8316156114d4576114d1926114b16114c39261145f856112c6565b611471855f52600660205260405f2090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b611471835f52600760205260405f2090565b5f52600860205260405f2090565b55565b7fd92e233d000000000000000000000000000000000000000000000000000000005f5260045ffd5b91506115159250611471905f52600660205260405f2090565b565b7fdf650a00000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040810190811067ffffffffffffffff82111761128157604052565b90601f601f19910116810190811067ffffffffffffffff82111761128157604052565b67ffffffffffffffff811161128157601f01601f191660200190565b9291926115a68261157e565b916115b4604051938461155b565b829481845281830111610370578281602093845f960137010152565b969390949195926115e236828961159a565b60208151910120600154036116f55773ffffffffffffffffffffffffffffffffffffffff611618895f52600760205260405f2090565b54169573ffffffffffffffffffffffffffffffffffffffff87161561167e579161166a6114d19896949261166461166f99979561165d8d5f52600860205260405f2090565b549061202c565b97612052565b612119565b915f52600960205260405f2090565b887f0000000000000000000000000000000000000000000000000000000000000000146116cd577f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fda261280000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fefb64cf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b805160021015610c915760600190565b805160101015610c91576102200190565b805115610c915760200190565b805160011015610c915760400190565b8051821015610c915760209160051b010190565b5f19811461121a5760010190565b92909361179b6020956117a894989798606087526060870191611351565b9184830386860152611351565b9060408183039101528281520191905f5b8181106117c65750505090565b90919260208060019273ffffffffffffffffffffffffffffffffffffffff87356117ef81610504565b1681520194019291016117b9565b9067ffffffffffffffff831161128157611817838361123c565b905f5260205f205f5b83811061182d5750505050565b600190602084359401938184015501611820565b906001820180921161121a57565b9190820180921161121a57565b3561139f81610504565b95979697949392919094611896610aa5876118898a5f52600a60205260405f2090565b905f5260205260405f2090565b611ad6576118b086611889895f52600b60205260405f2090565b54896040516118da816118cc6020820194878c8c8c8c8a61177d565b03601f19810183528261155b565b51902003611aae5797939291905f9861190583836119008b5f52600f60205260405f2090565b6117fd565b5f945b83861061198f57505050505050506119895f916115159495611932855f52600e60205260405f2090565b5561197761194c82611889875f52600a60205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b611889845f52600b60205260405f2090565b55611f57565b909192939495996119a18783886112b6565b356119ab9161184f565b956119b78183886112b6565b356119ca8a5f52601060205260405f2090565b6119d58388886112b6565b356119e791905f5260205260405f2090565b908154906119f49161184f565b9055611a01818c856112b6565b611a0a9061185c565b611a1c8a5f52601160205260405f2090565b611a278388886112b6565b35611a3991905f5260205260405f2090565b90611a7e919073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b88611a8a8287876112b6565b35611a9d905f52601260205260405f2090565b556001019493929190999599611908565b7f5cb045db000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9fbfc589000000000000000000000000000000000000000000000000000000005f5260045ffd5b905f19820191821161121a57565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40820191821161121a57565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80820191821161121a57565b602003906020821161121a57565b9190820391821161121a57565b6005548015611bad575f19810190600554821015610c91575f195f916005835260208320010155600555565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b7f00000000000000000000000000000000000000000000000000000000000000008114611cf15760055480915f5b838110611ccf575b50828214611ca757611c4d6114d192611c47611c41611c37611c325f98611afe565b610c79565b90549060031b1c90565b91610c79565b9061121f565b611c55611b81565b611c92611c6a825f52600660205260405f2090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b6114c3611c6a825f52600760205260405f2090565b7f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b81611cdc611c3783610c79565b14611ce957600101611c08565b91505f611c10565b611c6a611515915f52600660205260405f2090565b9693909592949194611d27610aa5886118898b5f52600a60205260405f2090565b8015611e63575b611ad657611d3d36828861159a565b60208151910120611d56885f52600960205260405f2090565b547f00000000000000000000000000000000000000000000000000000000000000008914611e5a575b03611e3257611d8f958789612420565b908115611e0a5780611de591847f2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e60405180611dd088829190602083019252565b0390a3611889845f52600b60205260405f2090565b55611df8815f52600d60205260405f2090565b5415611e015750565b61151590612500565b7f9a0cce53000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9d8cbacd000000000000000000000000000000000000000000000000000000005f5260045ffd5b50600254611d7f565b50611e7a876118898a5f52600b60205260405f2090565b541515611d2e565b335f9081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff1615611eba57565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f52336004525f60245260445ffd5b805f525f60205260ff611f1e3360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541615611f285750565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f523360045260245260445ffd5b805f52600d60205260405f20604051808260208294549384815201905f5260205f20925f5b818110612013575050611f919250038261155b565b5f5b8151811015611fd657611fc5611fc1610aa5611fb7865f52600a60205260405f2090565b610a98858761175b565b1590565b611fd157600101611f93565b505050565b5050611fed61194c825f52600c60205260405f2090565b7f78df938181afcb28eaa7d099235bbf9877832d6faafe36d1ea70916f3ace33e05f80a2565b8454835260019485019486945060209093019201611f7c565b90604051906020820192835260408201526040815261204c60608261155b565b51902090565b6120646120699161206e93369161159a565b61258c565b612607565b805160031015610c9157608061139f9101516126b4565b67ffffffffffffffff81116112815760051b60200190565b9291926120a982612085565b936120b7604051958661155b565b602085848152019260051b8201918183116103705780935b8385106120dd575050505050565b843567ffffffffffffffff811161037057820183601f820112156103705760209161210e858385809535910161159a565b8152019401936120cf565b909161219361218e6120649461219996989997996040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b1682526014815261216b60348261155b565b519020936040519460208601526020855261218760408661155b565b369161209d565b6126f6565b916127a0565b918251156122465761219361218e6122009261220e966121876121cf6121c96121c46120649a612607565b61171d565b516126b4565b966040516121ea816118cc6020820194859190602083019252565b5190206040519687916020830160209181520190565b03601f19810187528661155b565b80511561221e5761139f906126b4565b7f3477dcda000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f547706af000000000000000000000000000000000000000000000000000000005f5260045ffd5b805f525f60205260ff6122a28360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541661234557805f525f6020526122da8260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b805f525f60205260ff61237f8360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54161561234557805f525f6020526123b88260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905573ffffffffffffffffffffffffffffffffffffffff339216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b95929693909491945f52600660205273ffffffffffffffffffffffffffffffffffffffff60405f205416948515611ca75761139f9761245e91612052565b9560405160208101918252600760408201526040815261247f60608261155b565b51902095612119565b600581146124fd576005549067ffffffffffffffff8211611281576124ad828261123c565b5f908152602081207f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db080545b8484106124e7575050505050565b60018091920193845492818501550192906124d9565b50565b805f52600d60205261251460405f20612488565b7f0000000000000000000000000000000000000000000000000000000000000000805f52600660205273ffffffffffffffffffffffffffffffffffffffff60405f205416612560575050565b611515915f52600d60205260405f20611314565b604051906125818261153f565b5f6020838281520152565b612594612574565b506020815191604051926125a78461153f565b835201602082015290565b1561037057565b906125c382612085565b6125d0604051918261155b565b828152601f196125e08294612085565b01905f5b8281106125f057505050565b6020906125fb612574565b828285010152016125e4565b9061261182612ad6565b156103705761261f82612afa565b91612629836125b9565b9060208101805161263981612b5b565b810180911161121a57945f905b80821061266857505061139f929394612660915190611b74565b9051146125b2565b90956126ac81612679600193612bc6565b9060405161268860408261155b565b82815281602082015261269b8b8a61175b565b526126a68a8961175b565b5061184f565b960190612646565b805180151590816126ea575b5015610370576126cf90612c80565b905190602081106126de575090565b6020036101000a900490565b6021915011155f6126c0565b61270081516125b9565b905f5b815181101561273e578061272261271c6001938561175b565b5161258c565b61272c828661175b565b52612737818561175b565b5001612703565b505090565b6040519061275260208361155b565b5f808352366020840137565b906127688261157e565b612775604051918261155b565b828152601f19612785829461157e565b0190602036910137565b908151811015610c91570160200190565b906127aa90612ce0565b5f915f6127b5612574565b50845115612a9d57935f915b8151831015612a3e5782158080612a28575b610370571580612a0c575b610370576127f56127ef848461175b565b51612607565b958651600281145f146128f657505061281e6128196128138861173e565b51612f28565b612f76565b9561283461282d888884612fe3565b809261184f565b9651116128d8571561286b575061284b9051611afe565b116103705751116128625761281361139f9161174b565b5061139f612743565b9190946128788651611afe565b82146103705780612896611fc161289060019461174b565b51612ad6565b156128b9576128a76128ad9161174b565b51612f68565b915b01919490946127c1565b6128c56128d29161174b565b5160208101519051902090565b916128af565b5050915092506128e9915051611afe565b116103705761139f612743565b601190979193979492941461290f575b506001906128af565b959380925094929094518314155f146129ee5760ff61296961296361295d612937878761278f565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b94611841565b9316601081101561037057612987612981828961175b565b51612f52565b156129a9575050505061299c91925051611afe565b036103705761139f612743565b866129c1611fc161289084600196989a97999b61175b565b156129db576129d3916128a79161175b565b915b90612906565b6129e8916128c59161175b565b916129d5565b5050506129fb9051611afe565b036103705761281361139f9161172d565b50612a20612a1a848461175b565b51612ef1565b8614156127de565b50612a366128c5858561175b565b8214156127d3565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964204d50542070726f6f660000000000000000000000000000006044820152606490fd5b509050612ace92507f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4219150146125b2565b61139f612743565b805115612af557602060c0910151515f1a10612af157600190565b5f90565b505f90565b805115612af5575f9060208101908151612b1381612b5b565b810180911161121a5791519051810180911161121a5791905b828110612b395750905090565b612b4281612bc6565b810180911161121a57612b55909161176f565b90612b2c565b515f1a6080811015612b6c57505f90565b60b881108015612bb0575b15612b825750600190565b60c0811015612ba15761139f90612b9c9060b75b90611b74565b611841565b61139f90612b9c9060f7612b96565b5060c08110158015612b77575060f88110612b77565b80515f1a906080821015612bdb575050600190565b60b8821015612bf15750612b9c61139f91611b39565b60c0821015612c325760010151602082900360b7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4a0190565b60f8821015612c485750612b9c61139f91611b0c565b60010151602082900360f7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0190565b906020820191612c908351612b5b565b92519083820180921161121a575192830392831161121a579190565b15612cb357565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b90612d095f612cfa8451612cf58115156125b2565b611204565b612d0460016125b2565b611b74565b90612d138261275e565b925f91825b612d22855f61184f565b841015612de257612d9d612963612d2292612d3d8760011690565b612da5577f0f00000000000000000000000000000000000000000000000000000000000000612d87612d7e61295d612937612d788c60011c90565b8b61278f565b60041c600f1690565b60f81b165f1a612d97828b61278f565b53611841565b939050612d18565b7f0f00000000000000000000000000000000000000000000000000000000000000612d87612ddc61295d612937612d788c60011c90565b60ff1690565b915092506115159150835114612cac565b612e1382612e078351612cf58115156125b2565b612d04818311156125b2565b90612e1d8261275e565b9383925f5b612e2c828761184f565b851015612edf5790612e9f612e99612e2c93612e488860011690565b612ea8577f0f00000000000000000000000000000000000000000000000000000000000000612e89612d7e61295d612937612e838d60011c90565b8c61278f565b60f81b165f1a612d97828c61278f565b95611841565b94909150612e22565b7f0f00000000000000000000000000000000000000000000000000000000000000612e89612ddc61295d612937612e838d60011c90565b92505092506115159150835114612cac565b80516020811015612f09575060208101519051902090565b906020015120604051602081019182526020815261204c60408261155b565b80511561037057612f3b61139f91612c80565b612f478193929361275e565b928360200190613096565b6001815103612af55760200151515f1a60801490565b612f7190612c80565b902090565b9081511561037057600f612f92612d7e61295d6129378661173e565b1680612fa5575061139f60025f93612df3565b60018103612fba575061139f60015f93612df3565b60028103612fd0575061139f6002600193612df3565b6003036103705761139f60018093612df3565b91905f5b83810180821161121a57825181108061307d575b156130755761302b7fff00000000000000000000000000000000000000000000000000000000000000918461278f565b51167fff00000000000000000000000000000000000000000000000000000000000000613058838661278f565b5116900361306e576130699061176f565b612fe7565b9250505090565b509250505090565b5083518210612ffb565b601f811161121a576101000a90565b90918015611fd1575b60208110156130d957806130b257505050565b6130c66130c16130cb92611b66565b613087565b611afe565b905182518216911916179052565b9190805182526020810180911161121a57906020810180911161121a5791601f1981019081111561309f576111d756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x01\xFF\xC9\xA7\x14a\x02\xCFW\x80c\x03DW\x1F\x14a\x02\xCAW\x80c\x0C\xC4b\x12\x14a\x02\xC5W\x80c\x13;\xF8\x9F\x14a\x02\xC0W\x80c\x19w\x16@\x14a\x02\xBBW\x80c\x1B\xF4\x95\x1C\x14a\x02\xB6W\x80c\"b8\x97\x14a\x02\xB1W\x80c#\xAF\xB0\xFF\x14a\x02\xACW\x80c$\x8A\x9C\xA3\x14a\x02\xA7W\x80c(_$F\x14a\x02\xA2W\x80c,\xD0x\xB8\x14a\x02\x9DW\x80c//\xF1]\x14a\x02\x98W\x80c0\xC7\t\xB6\x14a\x02\x93W\x80c6+\x81T\x14a\x02\x8EW\x80c6V\x8A\xBE\x14a\x02\x89W\x80cG\xDF\xF6\x9D\x14a\x02\x84W\x80cNm\xA2\xA4\x14a\x02\x7FW\x80cR\x9FKV\x14a\x02zW\x80cU\xFC\xC5V\x14a\x02uW\x80cZc0\x80\x14a\x02/W\x80c[\x18\x17\xE8\x14a\x02pW\x80c]W\x9Aa\x14a\x02kW\x80ce\x0E\x13\x12\x14a\x02fW\x80ckM\x17\xAD\x14a\x02aW\x80ck\xA3\xD1\x7F\x14a\x02\\W\x80coN\"\xF5\x14a\x02WW\x80cz\x7F4\xE8\x14a\x02RW\x80c|n\xDB>\x14a\x02MW\x80c|qP\x94\x14a\x02HW\x80c|\x90\x1D{\x14a\x02CW\x80c\x8D\x93^\x1D\x14a\x02>W\x80c\x8D\xD5\x0E\xEE\x14a\x029W\x80c\x91\xD1HT\x14a\x024W\x80c\x95\x81K\xF5\x14a\x02/W\x80c\xA2\x17\xFD\xDF\x14a\x02*W\x80c\xCES|\x9F\x14a\x02%W\x80c\xD2k\xCC\x80\x14a\x02 W\x80c\xD5Gt\x1F\x14a\x02\x1BW\x80c\xE1\x8BM\xAE\x14a\x02\x16W\x80c\xE8\xC4l(\x14a\x02\x11W\x80c\xEFQ\"!\x14a\x02\x0CW\x80c\xFDy\xD3\xE1\x14a\x02\x07W\x80c\xFD\xD5A#\x14a\x02\x02Wc\xFF\x87\xC1\x8C\x14a\x01\xFDW_\x80\xFD[a\x11rV[a\x112V[a\x11\x08V[a\x10\xEBV[a\x10\xD0V[a\x10\xB5V[a\x10uV[a\x10%V[a\x0F\xE6V[a\x0F\xCCV[a\x0B\xC1V[a\x0FmV[a\x0F-V[a\x0F\x10V[a\x0E\x89V[a\x0E!V[a\r\xBDV[a\r\x93V[a\riV[a\r1V[a\r\x16V[a\x0C\xF2V[a\x0C\xABV[a\x0B\xFEV[a\x0B\x89V[a\x0B\x02V[a\n\x08V[a\t\xDEV[a\tpV[a\t=V[a\t\x0EV[a\x08\xC9V[a\x08DV[a\x07\x88V[a\x07VV[a\x079V[a\x06\xFFV[a\x06xV[a\x05cV[a\x05\"V[a\x04\xADV[a\x03\xA5V[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x80\x91\x03a\x03pW\x80\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x92\x14\x90\x81\x15a\x03FW[P`@Q\x90\x15\x15\x81R\xF3[\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91P\x14_a\x03;V[_\x80\xFD[\x91\x81`\x1F\x84\x01\x12\x15a\x03pW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03pW` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x03pWV[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x03\xD9\x906\x90`\x04\x01a\x03tV[\x91\x90a\x03\xE3a\x1E\x82V[\x81_R`\x0C` R`\xFF`@_ T\x16a\x04\x85W\x81_R`\r` Ra\x04\x0B`@_ a\x12\x86V[_[\x83\x81\x10a\x04UWP\x7F\xA0\xFE\xA1*]\xFD\xB3\xEB\xF0\xB7\xC4\x9A}\xDD_\xFD\xD3\xE5\xB2\xD7WO\xF1k\n\x102\xED\xC1\x9De\x8Ba\x04S\x93\x83\x92a\x04K`@Q\x92\x83\x92\x83a\x13\x8EV[\x03\x90\xA2a\x1FWV[\0[`\x01\x90a\x04\x7Fa\x04m\x85_R`\r` R`@_ \x90V[a\x04x\x83\x88\x87a\x12\xB6V[5\x90a\x13\x14V[\x01a\x04\rV[\x7F\xFD\x93\xC1_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x80_R`\x12` R`@_ T_R`\x11` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x03a\x03pWV[4a\x03pW`\x80`\x03\x196\x01\x12a\x03pWa\x04S`\x045`$5a\x05E\x81a\x05\x04V[`D5\x90a\x05R\x82a\x05\x04V[`d5\x92a\x05^a\x1E\x82V[a\x13\xA2V[4a\x03pW```\x03\x196\x01\x12a\x03pW`\x045`$5`D5\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x04T\x163\x03a\x06\"W`\x03T\x83\x11\x15a\x05\xFAWa\x05\xF5\x7Fxr.\xD9t+M\xCD\xA7\x05\xD0\x10\xFF\xF7F\n5\x1E\x90o\x82#\xCF\xF2\xD2:U\xB4KfB|\x93\x82`\x01U\x83`\x02U\x80`\x03U`@Q\x93\x84\x93\x84`@\x91\x94\x93\x92``\x82\x01\x95\x82R` \x82\x01R\x01RV[\x03\x90\xA1\0[\x7F\xC3k\xA4#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F$\xB2\xE7\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91\x81`\x1F\x84\x01\x12\x15a\x03pW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03pW` \x83\x81\x86\x01\x95\x01\x01\x11a\x03pWV[4a\x03pW`\xA0`\x03\x196\x01\x12a\x03pW`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x06\xAF\x906\x90`\x04\x01a\x06JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x06\xD2\x906\x90`\x04\x01a\x03tV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03pWa\x06\xF7a\x04S\x976\x90`\x04\x01a\x03tV[\x96\x90\x95a\x15\xD0V[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `\x01T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW` a\x07\x80`\x045_R_` R`\x01`@_ \x01T\x90V[`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90\x80_R`\x0C` R`\xFF`@_ T\x16\x15a\x07\xE3W_R`\x10` R`@_ \x90_R` Ra\x07\xDF`@_ T`@Q\x91\x82\x91\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xF3[\x7F\xC5\xB1Eq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[` `@\x81\x83\x01\x92\x82\x81R\x84Q\x80\x94R\x01\x92\x01\x90_[\x81\x81\x10a\x08.WPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x08!V[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x80_R`\x0C` R`\xFF`@_ T\x16\x15a\x07\xE3W_R`\x0F` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x08\xB3Wa\x07\xDF\x85a\x08\xA7\x81\x87\x03\x82a\x15[V[`@Q\x91\x82\x91\x82a\x08\x0BV[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x08\x90V[4a\x03pW`@`\x03\x196\x01\x12a\x03pWa\x04S`$5`\x045a\x08\xEC\x82a\x05\x04V[a\t\ta\t\x04\x82_R_` R`\x01`@_ \x01T\x90V[a\x1E\xEAV[a\"nV[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x0C` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x04T\x16`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5a\t\x90\x81a\x05\x04V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\t\xB6Wa\x04S\x91a#KV[\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x0E` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_\x81_R`\x0C` R`\xFF`@_ T\x16\x90\x82_R`\r` R`@_ \x92`@Q\x80\x85` \x82\x97T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a\n\xE9WPPa\ni\x92P\x03\x85a\x15[V[\x83Q_[\x85Q\x81\x10\x15a\n\xCDWa\n\xACa\n\xA5a\n\x8E\x85_R`\n` R`@_ \x90V[a\n\x98\x84\x8Aa\x17[V[Q_R` R`@_ \x90V[T`\xFF\x16\x90V[a\n\xB9W[`\x01\x01a\nmV[\x92a\n\xC5`\x01\x91a\x17oV[\x93\x90Pa\n\xB1V[P`@\x80Q\x85\x15\x15\x81R` \x81\x01\x92\x90\x92R\x81\x01\x83\x90R``\x90\xF3[\x84T\x83R`\x01\x94\x85\x01\x94\x89\x94P` \x90\x93\x01\x92\x01a\nTV[4a\x03pW`\xA0`\x03\x196\x01\x12a\x03pW`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0B9\x906\x90`\x04\x01a\x03tV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0B\\\x906\x90`\x04\x01a\x03tV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03pWa\x0B\x81a\x04S\x976\x90`\x04\x01a\x03tV[\x96\x90\x95a\x18fV[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x10` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\n` R`@_ \x90_R` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x11` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\x05T\x81\x10\x15a\x0C\x91W`\x05_R` _ \x01\x90_\x90V[a\x0CLV[\x80T\x82\x10\x15a\x0C\x91W_R` _ \x01\x90_\x90V[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\r` R`@_ \x80T\x82\x10\x15a\x03pW` \x91a\x0C\xE3\x91a\x0C\x96V[\x90T\x90`\x03\x1B\x1C`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pWa\x04S`\x045a\r\x11a\x1E\x82V[a\x1B\xDAV[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q`\x02\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x0B` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x12` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\t` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\r` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x0E\x0BWa\x07\xDF\x85a\x08\xA7\x81\x87\x03\x82a\x15[V[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\r\xF4V[4a\x03pW` `\x03\x196\x01\x12a\x03pWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045a\x0ES\x81a\x05\x04V[a\x0E[a\x1E\x82V[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04T\x16\x17`\x04U_\x80\xF3[4a\x03pW`\xA0`\x03\x196\x01\x12a\x03pW`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0E\xC0\x906\x90`\x04\x01a\x06JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pWa\x0E\xE3\x906\x90`\x04\x01a\x03tV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03pWa\x0F\x08a\x04S\x976\x90`\x04\x01a\x03tV[\x96\x90\x95a\x1D\x06V[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `\x03T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x06` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW` `\xFFa\x0F\xC0`$5`\x045a\x0F\x94\x82a\x05\x04V[_R_\x84R`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q_\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045\x80_R`\x0C` R`\xFF`@_ T\x16\x15a\x07\xE3W_R`\x0E` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045`\x05T\x81\x10\x15a\x03pW` \x90`\x05_R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01T`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pWa\x04S`$5`\x045a\x10\x98\x82a\x05\x04V[a\x10\xB0a\t\x04\x82_R_` R`\x01`@_ \x01T\x90V[a#KV[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q`\x03\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `@Q`\x07\x81R\xF3[4a\x03pW_`\x03\x196\x01\x12a\x03pW` `\x02T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x08` R` `@_ T`@Q\x90\x81R\xF3[4a\x03pW` `\x03\x196\x01\x12a\x03pW`\x045_R`\x07` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03pW`@`\x03\x196\x01\x12a\x03pW`\x045`$5\x90_R`\x0F` R`@_ \x80T\x82\x10\x15a\x03pW` \x91a\x0C\xE3\x91a\x0C\x96V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81`\x01\x1B\x91\x80\x83\x04`\x02\x14\x90\x15\x17\x15a\x12\x1AWV[a\x11\xD7V[\x91a\x128\x91\x83T\x90_\x19\x90`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90V[\x90UV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x12\x81W\x81T\x91\x81\x81U\x82\x82\x10a\x12_WPPPV[_R` _ \x91\x82\x01\x91\x01[\x81\x81\x10a\x12vWPPV[_\x81U`\x01\x01a\x12kV[a\x11\xAAV[\x80T\x90_\x81U\x81a\x12\x95WPPV[_R` _ \x90\x81\x01\x90[\x81\x81\x10a\x12\xABWPPV[_\x81U`\x01\x01a\x12\xA0V[\x91\x90\x81\x10\x15a\x0C\x91W`\x05\x1B\x01\x90V[`\x05Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x12\x81W`\x01\x81\x01`\x05U`\x05T\x81\x10\x15a\x0C\x91W`\x05_R\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x01UV[\x80T\x90h\x01\0\0\0\0\0\0\0\0\x82\x10\x15a\x12\x81W\x81a\x13;\x91`\x01a\x128\x94\x01\x81Ua\x0C\x96V[\x81\x93\x91T\x90_\x19\x90`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90V[\x90\x91\x82\x81R\x7F\x07\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03pW` \x92`\x05\x1B\x80\x92\x84\x83\x017\x01\x01\x90V[\x91` a\x13\x9F\x93\x81\x81R\x01\x91a\x13QV[\x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x13\xE7a\x13\xCD\x84_R`\x06` R`@_ \x90V[Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16a\x15\x17Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15a\x14\xD4W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x14a\x14\xFCWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x14\xD4Wa\x14\xD1\x92a\x14\xB1a\x14\xC3\x92a\x14_\x85a\x12\xC6V[a\x14q\x85_R`\x06` R`@_ \x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[a\x14q\x83_R`\x07` R`@_ \x90V[_R`\x08` R`@_ \x90V[UV[\x7F\xD9.#=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91Pa\x15\x15\x92Pa\x14q\x90_R`\x06` R`@_ \x90V[V[\x7F\xDFe\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\x81W`@RV[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12\x81W`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x12\x81W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x92\x91\x92a\x15\xA6\x82a\x15~V[\x91a\x15\xB4`@Q\x93\x84a\x15[V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x03pW\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x96\x93\x90\x94\x91\x95\x92a\x15\xE26\x82\x89a\x15\x9AV[` \x81Q\x91\x01 `\x01T\x03a\x16\xF5Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x16\x18\x89_R`\x07` R`@_ \x90V[T\x16\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15a\x16~W\x91a\x16ja\x14\xD1\x98\x96\x94\x92a\x16da\x16o\x99\x97\x95a\x16]\x8D_R`\x08` R`@_ \x90V[T\x90a ,V[\x97a RV[a!\x19V[\x91_R`\t` R`@_ \x90V[\x88\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14a\x16\xCDW\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xDA&\x12\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xEF\xB6L\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x80Q`\x02\x10\x15a\x0C\x91W``\x01\x90V[\x80Q`\x10\x10\x15a\x0C\x91Wa\x02 \x01\x90V[\x80Q\x15a\x0C\x91W` \x01\x90V[\x80Q`\x01\x10\x15a\x0C\x91W`@\x01\x90V[\x80Q\x82\x10\x15a\x0C\x91W` \x91`\x05\x1B\x01\x01\x90V[_\x19\x81\x14a\x12\x1AW`\x01\x01\x90V[\x92\x90\x93a\x17\x9B` \x95a\x17\xA8\x94\x98\x97\x98``\x87R``\x87\x01\x91a\x13QV[\x91\x84\x83\x03\x86\x86\x01Ra\x13QV[\x90`@\x81\x83\x03\x91\x01R\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x17\xC6WPPP\x90V[\x90\x91\x92` \x80`\x01\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x875a\x17\xEF\x81a\x05\x04V[\x16\x81R\x01\x94\x01\x92\x91\x01a\x17\xB9V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x12\x81Wa\x18\x17\x83\x83a\x12<V[\x90_R` _ _[\x83\x81\x10a\x18-WPPPPV[`\x01\x90` \x845\x94\x01\x93\x81\x84\x01U\x01a\x18 V[\x90`\x01\x82\x01\x80\x92\x11a\x12\x1AWV[\x91\x90\x82\x01\x80\x92\x11a\x12\x1AWV[5a\x13\x9F\x81a\x05\x04V[\x95\x97\x96\x97\x94\x93\x92\x91\x90\x94a\x18\x96a\n\xA5\x87a\x18\x89\x8A_R`\n` R`@_ \x90V[\x90_R` R`@_ \x90V[a\x1A\xD6Wa\x18\xB0\x86a\x18\x89\x89_R`\x0B` R`@_ \x90V[T\x89`@Qa\x18\xDA\x81a\x18\xCC` \x82\x01\x94\x87\x8C\x8C\x8C\x8C\x8Aa\x17}V[\x03`\x1F\x19\x81\x01\x83R\x82a\x15[V[Q\x90 \x03a\x1A\xAEW\x97\x93\x92\x91\x90_\x98a\x19\x05\x83\x83a\x19\0\x8B_R`\x0F` R`@_ \x90V[a\x17\xFDV[_\x94[\x83\x86\x10a\x19\x8FWPPPPPPPa\x19\x89_\x91a\x15\x15\x94\x95a\x192\x85_R`\x0E` R`@_ \x90V[Ua\x19wa\x19L\x82a\x18\x89\x87_R`\n` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90UV[a\x18\x89\x84_R`\x0B` R`@_ \x90V[Ua\x1FWV[\x90\x91\x92\x93\x94\x95\x99a\x19\xA1\x87\x83\x88a\x12\xB6V[5a\x19\xAB\x91a\x18OV[\x95a\x19\xB7\x81\x83\x88a\x12\xB6V[5a\x19\xCA\x8A_R`\x10` R`@_ \x90V[a\x19\xD5\x83\x88\x88a\x12\xB6V[5a\x19\xE7\x91\x90_R` R`@_ \x90V[\x90\x81T\x90a\x19\xF4\x91a\x18OV[\x90Ua\x1A\x01\x81\x8C\x85a\x12\xB6V[a\x1A\n\x90a\x18\\V[a\x1A\x1C\x8A_R`\x11` R`@_ \x90V[a\x1A'\x83\x88\x88a\x12\xB6V[5a\x1A9\x91\x90_R` R`@_ \x90V[\x90a\x1A~\x91\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[\x88a\x1A\x8A\x82\x87\x87a\x12\xB6V[5a\x1A\x9D\x90_R`\x12` R`@_ \x90V[U`\x01\x01\x94\x93\x92\x91\x90\x99\x95\x99a\x19\x08V[\x7F\\\xB0E\xDB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9F\xBF\xC5\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90_\x19\x82\x01\x91\x82\x11a\x12\x1AWV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF@\x82\x01\x91\x82\x11a\x12\x1AWV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x91\x82\x11a\x12\x1AWV[` \x03\x90` \x82\x11a\x12\x1AWV[\x91\x90\x82\x03\x91\x82\x11a\x12\x1AWV[`\x05T\x80\x15a\x1B\xADW_\x19\x81\x01\x90`\x05T\x82\x10\x15a\x0C\x91W_\x19_\x91`\x05\x83R` \x83 \x01\x01U`\x05UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x14a\x1C\xF1W`\x05T\x80\x91_[\x83\x81\x10a\x1C\xCFW[P\x82\x82\x14a\x1C\xA7Wa\x1CMa\x14\xD1\x92a\x1CGa\x1CAa\x1C7a\x1C2_\x98a\x1A\xFEV[a\x0CyV[\x90T\x90`\x03\x1B\x1C\x90V[\x91a\x0CyV[\x90a\x12\x1FV[a\x1CUa\x1B\x81V[a\x1C\x92a\x1Cj\x82_R`\x06` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81T\x16\x90UV[a\x14\xC3a\x1Cj\x82_R`\x07` R`@_ \x90V[\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x81a\x1C\xDCa\x1C7\x83a\x0CyV[\x14a\x1C\xE9W`\x01\x01a\x1C\x08V[\x91P_a\x1C\x10V[a\x1Cja\x15\x15\x91_R`\x06` R`@_ \x90V[\x96\x93\x90\x95\x92\x94\x91\x94a\x1D'a\n\xA5\x88a\x18\x89\x8B_R`\n` R`@_ \x90V[\x80\x15a\x1EcW[a\x1A\xD6Wa\x1D=6\x82\x88a\x15\x9AV[` \x81Q\x91\x01 a\x1DV\x88_R`\t` R`@_ \x90V[T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89\x14a\x1EZW[\x03a\x1E2Wa\x1D\x8F\x95\x87\x89a$ V[\x90\x81\x15a\x1E\nW\x80a\x1D\xE5\x91\x84\x7F,?D5\x99\xC6&\x8A\xCE\xD4s\xE7f\x0B@tn\xA3\x94\xD5\x19\x17\x9E\xA3\xF6\x0F8)t\xA2\xE7\x8E`@Q\x80a\x1D\xD0\x88\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xA3a\x18\x89\x84_R`\x0B` R`@_ \x90V[Ua\x1D\xF8\x81_R`\r` R`@_ \x90V[T\x15a\x1E\x01WPV[a\x15\x15\x90a%\0V[\x7F\x9A\x0C\xCES\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9D\x8C\xBA\xCD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P`\x02Ta\x1D\x7FV[Pa\x1Ez\x87a\x18\x89\x8A_R`\x0B` R`@_ \x90V[T\x15\x15a\x1D.V[3_\x90\x81R\x7F\xAD2(\xB6v\xF7\xD3\xCDB\x84\xA5D?\x17\xF1\x96+6\xE4\x91\xB3\n@\xB2@XI\xE5\x97\xBA_\xB5` R`@\x90 T`\xFF\x16\x15a\x1E\xBAWV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R_`$R`D_\xFD[\x80_R_` R`\xFFa\x1F\x1E3`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a\x1F(WPV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R`$R`D_\xFD[\x80_R`\r` R`@_ `@Q\x80\x82` \x82\x94T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a \x13WPPa\x1F\x91\x92P\x03\x82a\x15[V[_[\x81Q\x81\x10\x15a\x1F\xD6Wa\x1F\xC5a\x1F\xC1a\n\xA5a\x1F\xB7\x86_R`\n` R`@_ \x90V[a\n\x98\x85\x87a\x17[V[\x15\x90V[a\x1F\xD1W`\x01\x01a\x1F\x93V[PPPV[PPa\x1F\xEDa\x19L\x82_R`\x0C` R`@_ \x90V[\x7Fx\xDF\x93\x81\x81\xAF\xCB(\xEA\xA7\xD0\x99#[\xBF\x98w\x83-o\xAA\xFE6\xD1\xEAp\x91o:\xCE3\xE0_\x80\xA2V[\x84T\x83R`\x01\x94\x85\x01\x94\x86\x94P` \x90\x93\x01\x92\x01a\x1F|V[\x90`@Q\x90` \x82\x01\x92\x83R`@\x82\x01R`@\x81Ra L``\x82a\x15[V[Q\x90 \x90V[a da i\x91a n\x936\x91a\x15\x9AV[a%\x8CV[a&\x07V[\x80Q`\x03\x10\x15a\x0C\x91W`\x80a\x13\x9F\x91\x01Qa&\xB4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x12\x81W`\x05\x1B` \x01\x90V[\x92\x91\x92a \xA9\x82a \x85V[\x93a \xB7`@Q\x95\x86a\x15[V[` \x85\x84\x81R\x01\x92`\x05\x1B\x82\x01\x91\x81\x83\x11a\x03pW\x80\x93[\x83\x85\x10a \xDDWPPPPPV[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03pW\x82\x01\x83`\x1F\x82\x01\x12\x15a\x03pW` \x91a!\x0E\x85\x83\x85\x80\x955\x91\x01a\x15\x9AV[\x81R\x01\x94\x01\x93a \xCFV[\x90\x91a!\x93a!\x8Ea d\x94a!\x99\x96\x98\x99\x97\x99`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01\x92``\x1B\x16\x82R`\x14\x81Ra!k`4\x82a\x15[V[Q\x90 \x93`@Q\x94` \x86\x01R` \x85Ra!\x87`@\x86a\x15[V[6\x91a \x9DV[a&\xF6V[\x91a'\xA0V[\x91\x82Q\x15a\"FWa!\x93a!\x8Ea\"\0\x92a\"\x0E\x96a!\x87a!\xCFa!\xC9a!\xC4a d\x9Aa&\x07V[a\x17\x1DV[Qa&\xB4V[\x96`@Qa!\xEA\x81a\x18\xCC` \x82\x01\x94\x85\x91\x90` \x83\x01\x92RV[Q\x90 `@Q\x96\x87\x91` \x83\x01` \x91\x81R\x01\x90V[\x03`\x1F\x19\x81\x01\x87R\x86a\x15[V[\x80Q\x15a\"\x1EWa\x13\x9F\x90a&\xB4V[\x7F4w\xDC\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7FTw\x06\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x80_R_` R`\xFFa\"\xA2\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16a#EW\x80_R_` Ra\"\xDA\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r_\x80\xA4`\x01\x90V[PP_\x90V[\x80_R_` R`\xFFa#\x7F\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a#EW\x80_R_` Ra#\xB8\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81T\x16\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B_\x80\xA4`\x01\x90V[\x95\x92\x96\x93\x90\x94\x91\x94_R`\x06` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16\x94\x85\x15a\x1C\xA7Wa\x13\x9F\x97a$^\x91a RV[\x95`@Q` \x81\x01\x91\x82R`\x07`@\x82\x01R`@\x81Ra$\x7F``\x82a\x15[V[Q\x90 \x95a!\x19V[`\x05\x81\x14a$\xFDW`\x05T\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x12\x81Wa$\xAD\x82\x82a\x12<V[_\x90\x81R` \x81 \x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x80T[\x84\x84\x10a$\xE7WPPPPPV[`\x01\x80\x91\x92\x01\x93\x84T\x92\x81\x85\x01U\x01\x92\x90a$\xD9V[PV[\x80_R`\r` Ra%\x14`@_ a$\x88V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80_R`\x06` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16a%`WPPV[a\x15\x15\x91_R`\r` R`@_ a\x13\x14V[`@Q\x90a%\x81\x82a\x15?V[_` \x83\x82\x81R\x01RV[a%\x94a%tV[P` \x81Q\x91`@Q\x92a%\xA7\x84a\x15?V[\x83R\x01` \x82\x01R\x90V[\x15a\x03pWV[\x90a%\xC3\x82a \x85V[a%\xD0`@Q\x91\x82a\x15[V[\x82\x81R`\x1F\x19a%\xE0\x82\x94a \x85V[\x01\x90_[\x82\x81\x10a%\xF0WPPPV[` \x90a%\xFBa%tV[\x82\x82\x85\x01\x01R\x01a%\xE4V[\x90a&\x11\x82a*\xD6V[\x15a\x03pWa&\x1F\x82a*\xFAV[\x91a&)\x83a%\xB9V[\x90` \x81\x01\x80Qa&9\x81a+[V[\x81\x01\x80\x91\x11a\x12\x1AW\x94_\x90[\x80\x82\x10a&hWPPa\x13\x9F\x92\x93\x94a&`\x91Q\x90a\x1BtV[\x90Q\x14a%\xB2V[\x90\x95a&\xAC\x81a&y`\x01\x93a+\xC6V[\x90`@Qa&\x88`@\x82a\x15[V[\x82\x81R\x81` \x82\x01Ra&\x9B\x8B\x8Aa\x17[V[Ra&\xA6\x8A\x89a\x17[V[Pa\x18OV[\x96\x01\x90a&FV[\x80Q\x80\x15\x15\x90\x81a&\xEAW[P\x15a\x03pWa&\xCF\x90a,\x80V[\x90Q\x90` \x81\x10a&\xDEWP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a&\xC0V[a'\0\x81Qa%\xB9V[\x90_[\x81Q\x81\x10\x15a'>W\x80a'\"a'\x1C`\x01\x93\x85a\x17[V[Qa%\x8CV[a',\x82\x86a\x17[V[Ra'7\x81\x85a\x17[V[P\x01a'\x03V[PP\x90V[`@Q\x90a'R` \x83a\x15[V[_\x80\x83R6` \x84\x017V[\x90a'h\x82a\x15~V[a'u`@Q\x91\x82a\x15[V[\x82\x81R`\x1F\x19a'\x85\x82\x94a\x15~V[\x01\x90` 6\x91\x017V[\x90\x81Q\x81\x10\x15a\x0C\x91W\x01` \x01\x90V[\x90a'\xAA\x90a,\xE0V[_\x91_a'\xB5a%tV[P\x84Q\x15a*\x9DW\x93_\x91[\x81Q\x83\x10\x15a*>W\x82\x15\x80\x80a*(W[a\x03pW\x15\x80a*\x0CW[a\x03pWa'\xF5a'\xEF\x84\x84a\x17[V[Qa&\x07V[\x95\x86Q`\x02\x81\x14_\x14a(\xF6WPPa(\x1Ea(\x19a(\x13\x88a\x17>V[Qa/(V[a/vV[\x95a(4a(-\x88\x88\x84a/\xE3V[\x80\x92a\x18OV[\x96Q\x11a(\xD8W\x15a(kWPa(K\x90Qa\x1A\xFEV[\x11a\x03pWQ\x11a(bWa(\x13a\x13\x9F\x91a\x17KV[Pa\x13\x9Fa'CV[\x91\x90\x94a(x\x86Qa\x1A\xFEV[\x82\x14a\x03pW\x80a(\x96a\x1F\xC1a(\x90`\x01\x94a\x17KV[Qa*\xD6V[\x15a(\xB9Wa(\xA7a(\xAD\x91a\x17KV[Qa/hV[\x91[\x01\x91\x94\x90\x94a'\xC1V[a(\xC5a(\xD2\x91a\x17KV[Q` \x81\x01Q\x90Q\x90 \x90V[\x91a(\xAFV[PP\x91P\x92Pa(\xE9\x91PQa\x1A\xFEV[\x11a\x03pWa\x13\x9Fa'CV[`\x11\x90\x97\x91\x93\x97\x94\x92\x94\x14a)\x0FW[P`\x01\x90a(\xAFV[\x95\x93\x80\x92P\x94\x92\x90\x94Q\x83\x14\x15_\x14a)\xEEW`\xFFa)ia)ca)]a)7\x87\x87a'\x8FV[Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90V[`\xF8\x1C\x90V[\x94a\x18AV[\x93\x16`\x10\x81\x10\x15a\x03pWa)\x87a)\x81\x82\x89a\x17[V[Qa/RV[\x15a)\xA9WPPPPa)\x9C\x91\x92PQa\x1A\xFEV[\x03a\x03pWa\x13\x9Fa'CV[\x86a)\xC1a\x1F\xC1a(\x90\x84`\x01\x96\x98\x9A\x97\x99\x9Ba\x17[V[\x15a)\xDBWa)\xD3\x91a(\xA7\x91a\x17[V[\x91[\x90a)\x06V[a)\xE8\x91a(\xC5\x91a\x17[V[\x91a)\xD5V[PPPa)\xFB\x90Qa\x1A\xFEV[\x03a\x03pWa(\x13a\x13\x9F\x91a\x17-V[Pa* a*\x1A\x84\x84a\x17[V[Qa.\xF1V[\x86\x14\x15a'\xDEV[Pa*6a(\xC5\x85\x85a\x17[V[\x82\x14\x15a'\xD3V[`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FInvalid MPT proof\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[P\x90Pa*\xCE\x92P\x7FV\xE8\x1F\x17\x1B\xCCU\xA6\xFF\x83E\xE6\x92\xC0\xF8n[H\xE0\x1B\x99l\xAD\xC0\x01b/\xB5\xE3c\xB4!\x91P\x14a%\xB2V[a\x13\x9Fa'CV[\x80Q\x15a*\xF5W` `\xC0\x91\x01QQ_\x1A\x10a*\xF1W`\x01\x90V[_\x90V[P_\x90V[\x80Q\x15a*\xF5W_\x90` \x81\x01\x90\x81Qa+\x13\x81a+[V[\x81\x01\x80\x91\x11a\x12\x1AW\x91Q\x90Q\x81\x01\x80\x91\x11a\x12\x1AW\x91\x90[\x82\x81\x10a+9WP\x90P\x90V[a+B\x81a+\xC6V[\x81\x01\x80\x91\x11a\x12\x1AWa+U\x90\x91a\x17oV[\x90a+,V[Q_\x1A`\x80\x81\x10\x15a+lWP_\x90V[`\xB8\x81\x10\x80\x15a+\xB0W[\x15a+\x82WP`\x01\x90V[`\xC0\x81\x10\x15a+\xA1Wa\x13\x9F\x90a+\x9C\x90`\xB7[\x90a\x1BtV[a\x18AV[a\x13\x9F\x90a+\x9C\x90`\xF7a+\x96V[P`\xC0\x81\x10\x15\x80\x15a+wWP`\xF8\x81\x10a+wV[\x80Q_\x1A\x90`\x80\x82\x10\x15a+\xDBWPP`\x01\x90V[`\xB8\x82\x10\x15a+\xF1WPa+\x9Ca\x13\x9F\x91a\x1B9V[`\xC0\x82\x10\x15a,2W`\x01\x01Q` \x82\x90\x03`\xB7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFJ\x01\x90V[`\xF8\x82\x10\x15a,HWPa+\x9Ca\x13\x9F\x91a\x1B\x0CV[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\n\x01\x90V[\x90` \x82\x01\x91a,\x90\x83Qa+[V[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x12\x1AWQ\x92\x83\x03\x92\x83\x11a\x12\x1AW\x91\x90V[\x15a,\xB3WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD[\x90a-\t_a,\xFA\x84Qa,\xF5\x81\x15\x15a%\xB2V[a\x12\x04V[a-\x04`\x01a%\xB2V[a\x1BtV[\x90a-\x13\x82a'^V[\x92_\x91\x82[a-\"\x85_a\x18OV[\x84\x10\x15a-\xE2Wa-\x9Da)ca-\"\x92a-=\x87`\x01\x16\x90V[a-\xA5W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a-\x87a-~a)]a)7a-x\x8C`\x01\x1C\x90V[\x8Ba'\x8FV[`\x04\x1C`\x0F\x16\x90V[`\xF8\x1B\x16_\x1Aa-\x97\x82\x8Ba'\x8FV[Sa\x18AV[\x93\x90Pa-\x18V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a-\x87a-\xDCa)]a)7a-x\x8C`\x01\x1C\x90V[`\xFF\x16\x90V[\x91P\x92Pa\x15\x15\x91P\x83Q\x14a,\xACV[a.\x13\x82a.\x07\x83Qa,\xF5\x81\x15\x15a%\xB2V[a-\x04\x81\x83\x11\x15a%\xB2V[\x90a.\x1D\x82a'^V[\x93\x83\x92_[a.,\x82\x87a\x18OV[\x85\x10\x15a.\xDFW\x90a.\x9Fa.\x99a.,\x93a.H\x88`\x01\x16\x90V[a.\xA8W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a.\x89a-~a)]a)7a.\x83\x8D`\x01\x1C\x90V[\x8Ca'\x8FV[`\xF8\x1B\x16_\x1Aa-\x97\x82\x8Ca'\x8FV[\x95a\x18AV[\x94\x90\x91Pa.\"V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a.\x89a-\xDCa)]a)7a.\x83\x8D`\x01\x1C\x90V[\x92PP\x92Pa\x15\x15\x91P\x83Q\x14a,\xACV[\x80Q` \x81\x10\x15a/\tWP` \x81\x01Q\x90Q\x90 \x90V[\x90` \x01Q `@Q` \x81\x01\x91\x82R` \x81Ra L`@\x82a\x15[V[\x80Q\x15a\x03pWa/;a\x13\x9F\x91a,\x80V[a/G\x81\x93\x92\x93a'^V[\x92\x83` \x01\x90a0\x96V[`\x01\x81Q\x03a*\xF5W` \x01QQ_\x1A`\x80\x14\x90V[a/q\x90a,\x80V[\x90 \x90V[\x90\x81Q\x15a\x03pW`\x0Fa/\x92a-~a)]a)7\x86a\x17>V[\x16\x80a/\xA5WPa\x13\x9F`\x02_\x93a-\xF3V[`\x01\x81\x03a/\xBAWPa\x13\x9F`\x01_\x93a-\xF3V[`\x02\x81\x03a/\xD0WPa\x13\x9F`\x02`\x01\x93a-\xF3V[`\x03\x03a\x03pWa\x13\x9F`\x01\x80\x93a-\xF3V[\x91\x90_[\x83\x81\x01\x80\x82\x11a\x12\x1AW\x82Q\x81\x10\x80a0}W[\x15a0uWa0+\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x84a'\x8FV[Q\x16\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a0X\x83\x86a'\x8FV[Q\x16\x90\x03a0nWa0i\x90a\x17oV[a/\xE7V[\x92PPP\x90V[P\x92PPP\x90V[P\x83Q\x82\x10a/\xFBV[`\x1F\x81\x11a\x12\x1AWa\x01\0\n\x90V[\x90\x91\x80\x15a\x1F\xD1W[` \x81\x10\x15a0\xD9W\x80a0\xB2WPPPV[a0\xC6a0\xC1a0\xCB\x92a\x1BfV[a0\x87V[a\x1A\xFEV[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[\x91\x90\x80Q\x82R` \x81\x01\x80\x91\x11a\x12\x1AW\x90` \x81\x01\x80\x91\x11a\x12\x1AW\x91`\x1F\x19\x81\x01\x90\x81\x11\x15a0\x9FWa\x11\xD7V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccountDoesNotExistInProof()` and selector `0x547706af`.
```solidity
error AccountDoesNotExistInProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccountDoesNotExistInProof;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccountDoesNotExistInProof>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccountDoesNotExistInProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccountDoesNotExistInProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccountDoesNotExistInProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccountDoesNotExistInProof()";
            const SELECTOR: [u8; 4] = [84u8, 119u8, 6u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AlreadySubmitted()` and selector `0x9fbfc589`.
```solidity
error AlreadySubmitted();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadySubmitted;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadySubmitted> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadySubmitted) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadySubmitted {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadySubmitted {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadySubmitted()";
            const SELECTOR: [u8; 4] = [159u8, 191u8, 197u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CannotSubmitProofForSettlementChain()` and selector `0xda261280`.
```solidity
error CannotSubmitProofForSettlementChain();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CannotSubmitProofForSettlementChain;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CannotSubmitProofForSettlementChain>
        for UnderlyingRustTuple<'_> {
            fn from(value: CannotSubmitProofForSettlementChain) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CannotSubmitProofForSettlementChain {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CannotSubmitProofForSettlementChain {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CannotSubmitProofForSettlementChain()";
            const SELECTOR: [u8; 4] = [218u8, 38u8, 18u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ChainIDNotFound()` and selector `0x1242e9bb`.
```solidity
error ChainIDNotFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ChainIDNotFound;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ChainIDNotFound> for UnderlyingRustTuple<'_> {
            fn from(value: ChainIDNotFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ChainIDNotFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ChainIDNotFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ChainIDNotFound()";
            const SELECTOR: [u8; 4] = [18u8, 66u8, 233u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptyDataHash()` and selector `0x9a0cce53`.
```solidity
error EmptyDataHash();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyDataHash;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyDataHash> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyDataHash) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyDataHash {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyDataHash {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyDataHash()";
            const SELECTOR: [u8; 4] = [154u8, 12u8, 206u8, 83u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptySlot()` and selector `0x3477dcda`.
```solidity
error EmptySlot();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptySlot;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptySlot> for UnderlyingRustTuple<'_> {
            fn from(value: EmptySlot) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptySlot {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptySlot {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptySlot()";
            const SELECTOR: [u8; 4] = [52u8, 119u8, 220u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EpochAlreadyCompleted()` and selector `0xfd93c15f`.
```solidity
error EpochAlreadyCompleted();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EpochAlreadyCompleted;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EpochAlreadyCompleted> for UnderlyingRustTuple<'_> {
            fn from(value: EpochAlreadyCompleted) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EpochAlreadyCompleted {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EpochAlreadyCompleted {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EpochAlreadyCompleted()";
            const SELECTOR: [u8; 4] = [253u8, 147u8, 193u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidData()` and selector `0x5cb045db`.
```solidity
error InvalidData();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidData;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidData> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidData) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidData {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidData()";
            const SELECTOR: [u8; 4] = [92u8, 176u8, 69u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidEthereumBlockHeader()` and selector `0xefb64cf8`.
```solidity
error InvalidEthereumBlockHeader();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidEthereumBlockHeader;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidEthereumBlockHeader>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidEthereumBlockHeader) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidEthereumBlockHeader {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidEthereumBlockHeader {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidEthereumBlockHeader()";
            const SELECTOR: [u8; 4] = [239u8, 182u8, 76u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidProof()` and selector `0x09bde339`.
```solidity
error InvalidProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidProof;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidProof> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidProof()";
            const SELECTOR: [u8; 4] = [9u8, 189u8, 227u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidSeqChainBlockHeader()` and selector `0x9d8cbacd`.
```solidity
error InvalidSeqChainBlockHeader();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidSeqChainBlockHeader;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidSeqChainBlockHeader>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidSeqChainBlockHeader) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidSeqChainBlockHeader {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidSeqChainBlockHeader {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidSeqChainBlockHeader()";
            const SELECTOR: [u8; 4] = [157u8, 140u8, 186u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotArchivedEpoch()` and selector `0xc5b14571`.
```solidity
error NotArchivedEpoch();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotArchivedEpoch;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotArchivedEpoch> for UnderlyingRustTuple<'_> {
            fn from(value: NotArchivedEpoch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotArchivedEpoch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotArchivedEpoch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotArchivedEpoch()";
            const SELECTOR: [u8; 4] = [197u8, 177u8, 69u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotBlockHashSender()` and selector `0x24b2e7fd`.
```solidity
error NotBlockHashSender();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotBlockHashSender;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotBlockHashSender> for UnderlyingRustTuple<'_> {
            fn from(value: NotBlockHashSender) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotBlockHashSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotBlockHashSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotBlockHashSender()";
            const SELECTOR: [u8; 4] = [36u8, 178u8, 231u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OldSettlementChainBlockNumber()` and selector `0xc36ba423`.
```solidity
error OldSettlementChainBlockNumber();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OldSettlementChainBlockNumber;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OldSettlementChainBlockNumber>
        for UnderlyingRustTuple<'_> {
            fn from(value: OldSettlementChainBlockNumber) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OldSettlementChainBlockNumber {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OldSettlementChainBlockNumber {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OldSettlementChainBlockNumber()";
            const SELECTOR: [u8; 4] = [195u8, 107u8, 164u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SequencingChainAlreadyExists()` and selector `0xdf650a00`.
```solidity
error SequencingChainAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SequencingChainAlreadyExists;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SequencingChainAlreadyExists>
        for UnderlyingRustTuple<'_> {
            fn from(value: SequencingChainAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SequencingChainAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SequencingChainAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SequencingChainAlreadyExists()";
            const SELECTOR: [u8; 4] = [223u8, 101u8, 10u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroLengthArray()` and selector `0x0f59b9ff`.
```solidity
error ZeroLengthArray();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroLengthArray;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroLengthArray> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroLengthArray) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroLengthArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroLengthArray {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroLengthArray()";
            const SELECTOR: [u8; 4] = [15u8, 89u8, 185u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EpochCompleted(uint256)` and selector `0x78df938181afcb28eaa7d099235bbf9877832d6faafe36d1ea70916f3ace33e0`.
```solidity
event EpochCompleted(uint256 indexed epoch);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochCompleted {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochCompleted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochCompleted(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                120u8, 223u8, 147u8, 129u8, 129u8, 175u8, 203u8, 40u8, 234u8, 167u8,
                208u8, 153u8, 35u8, 91u8, 191u8, 152u8, 119u8, 131u8, 45u8, 111u8, 170u8,
                254u8, 54u8, 209u8, 234u8, 112u8, 145u8, 111u8, 58u8, 206u8, 51u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { epoch: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.epoch.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.epoch);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochCompleted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochCompleted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EpochCompleted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EpochDataValidated(uint256,uint256,bytes32)` and selector `0x2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e`.
```solidity
event EpochDataValidated(uint256 indexed epoch, uint256 indexed seqChainID, bytes32 dataHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochDataValidated {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dataHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochDataValidated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochDataValidated(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                44u8, 63u8, 68u8, 53u8, 153u8, 198u8, 38u8, 138u8, 206u8, 212u8, 115u8,
                231u8, 102u8, 11u8, 64u8, 116u8, 110u8, 163u8, 148u8, 213u8, 25u8, 23u8,
                158u8, 163u8, 246u8, 15u8, 56u8, 41u8, 116u8, 162u8, 231u8, 142u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    epoch: topics.1,
                    seqChainID: topics.2,
                    dataHash: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.dataHash),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.epoch.clone(),
                    self.seqChainID.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.epoch);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.seqChainID);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochDataValidated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochDataValidated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EpochDataValidated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EpochExpectedChainsUpdated(uint256,uint256[])` and selector `0xa0fea12a5dfdb3ebf0b7c49a7ddd5ffdd3e5b2d7574ff16b0a1032edc19d658b`.
```solidity
event EpochExpectedChainsUpdated(uint256 indexed epoch, uint256[] chainIds);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochExpectedChainsUpdated {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochExpectedChainsUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochExpectedChainsUpdated(uint256,uint256[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                160u8, 254u8, 161u8, 42u8, 93u8, 253u8, 179u8, 235u8, 240u8, 183u8,
                196u8, 154u8, 125u8, 221u8, 95u8, 253u8, 211u8, 229u8, 178u8, 215u8,
                87u8, 79u8, 241u8, 107u8, 10u8, 16u8, 50u8, 237u8, 193u8, 157u8, 101u8,
                139u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    epoch: topics.1,
                    chainIds: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainIds),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.epoch.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.epoch);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochExpectedChainsUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochExpectedChainsUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &EpochExpectedChainsUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `GasAggregatorAddressUpdated(address,address)` and selector `0x302f5435119022728eaef6d234319e11d908b504f90442eb3be6606fc9545757`.
```solidity
event GasAggregatorAddressUpdated(address indexed oldAddress, address indexed newAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct GasAggregatorAddressUpdated {
        #[allow(missing_docs)]
        pub oldAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for GasAggregatorAddressUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "GasAggregatorAddressUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                48u8, 47u8, 84u8, 53u8, 17u8, 144u8, 34u8, 114u8, 142u8, 174u8, 246u8,
                210u8, 52u8, 49u8, 158u8, 17u8, 217u8, 8u8, 181u8, 4u8, 249u8, 4u8, 66u8,
                235u8, 59u8, 230u8, 96u8, 111u8, 201u8, 84u8, 87u8, 87u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldAddress: topics.1,
                    newAddress: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldAddress.clone(),
                    self.newAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldAddress,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for GasAggregatorAddressUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&GasAggregatorAddressUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &GasAggregatorAddressUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `LastKnownBlockHashesUpdated(bytes32,bytes32,uint256)` and selector `0x78722ed9742b4dcda705d010fff7460a351e906f8223cff2d23a55b44b66427c`.
```solidity
event LastKnownBlockHashesUpdated(bytes32 ethBlockHash, bytes32 settlementBlockHash, uint256 settlementBlockNumber);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct LastKnownBlockHashesUpdated {
        #[allow(missing_docs)]
        pub ethBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub settlementBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub settlementBlockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for LastKnownBlockHashesUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "LastKnownBlockHashesUpdated(bytes32,bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                120u8, 114u8, 46u8, 217u8, 116u8, 43u8, 77u8, 205u8, 167u8, 5u8, 208u8,
                16u8, 255u8, 247u8, 70u8, 10u8, 53u8, 30u8, 144u8, 111u8, 130u8, 35u8,
                207u8, 242u8, 210u8, 58u8, 85u8, 180u8, 75u8, 102u8, 66u8, 124u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    ethBlockHash: data.0,
                    settlementBlockHash: data.1,
                    settlementBlockNumber: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementBlockHash),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementBlockNumber),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for LastKnownBlockHashesUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&LastKnownBlockHashesUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &LastKnownBlockHashesUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _blockHashSender, uint256 _settlementChainID, address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _blockHashSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._blockHashSender, value._settlementChainID, value.admin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _blockHashSender: tuple.0,
                        _settlementChainID: tuple.1,
                        admin: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._blockHashSender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._settlementChainID),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `AGGREGATED_EPOCH_DATA_HASH_SLOT()` and selector `0xe8c46c28`.
```solidity
function AGGREGATED_EPOCH_DATA_HASH_SLOT() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AGGREGATED_EPOCH_DATA_HASH_SLOTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`AGGREGATED_EPOCH_DATA_HASH_SLOT()`](AGGREGATED_EPOCH_DATA_HASH_SLOTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AGGREGATED_EPOCH_DATA_HASH_SLOTReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATED_EPOCH_DATA_HASH_SLOTCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATED_EPOCH_DATA_HASH_SLOTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATED_EPOCH_DATA_HASH_SLOTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATED_EPOCH_DATA_HASH_SLOTReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATED_EPOCH_DATA_HASH_SLOTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATED_EPOCH_DATA_HASH_SLOTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATED_EPOCH_DATA_HASH_SLOT()";
            const SELECTOR: [u8; 4] = [232u8, 196u8, 108u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `HEADER_STATE_ROOT_INDEX()` and selector `0xe18b4dae`.
```solidity
function HEADER_STATE_ROOT_INDEX() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEADER_STATE_ROOT_INDEXCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`HEADER_STATE_ROOT_INDEX()`](HEADER_STATE_ROOT_INDEXCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEADER_STATE_ROOT_INDEXReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEADER_STATE_ROOT_INDEXCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEADER_STATE_ROOT_INDEXCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEADER_STATE_ROOT_INDEXCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEADER_STATE_ROOT_INDEXReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEADER_STATE_ROOT_INDEXReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEADER_STATE_ROOT_INDEXReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for HEADER_STATE_ROOT_INDEXCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HEADER_STATE_ROOT_INDEX()";
            const SELECTOR: [u8; 4] = [225u8, 139u8, 77u8, 174u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: HEADER_STATE_ROOT_INDEXReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: HEADER_STATE_ROOT_INDEXReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()` and selector `0x6b4d17ad`.
```solidity
function STORAGE_ROOT_ACCOUNT_FIELDS_INDEX() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()`](STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()";
            const SELECTOR: [u8; 4] = [107u8, 77u8, 23u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addSequencingChain(uint256,address,address,uint256)` and selector `0x133bf89f`.
```solidity
function addSequencingChain(uint256 chainID, address aggregatorAddress, address bridgeAddress, uint256 storageSlotIndex) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencingChainCall {
        #[allow(missing_docs)]
        pub chainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub aggregatorAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub storageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`addSequencingChain(uint256,address,address,uint256)`](addSequencingChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencingChainReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencingChainCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencingChainCall) -> Self {
                    (
                        value.chainID,
                        value.aggregatorAddress,
                        value.bridgeAddress,
                        value.storageSlotIndex,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencingChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainID: tuple.0,
                        aggregatorAddress: tuple.1,
                        bridgeAddress: tuple.2,
                        storageSlotIndex: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencingChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencingChainReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencingChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addSequencingChainReturn {
            fn _tokenize(
                &self,
            ) -> <addSequencingChainCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addSequencingChainCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addSequencingChainReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addSequencingChain(uint256,address,address,uint256)";
            const SELECTOR: [u8; 4] = [19u8, 59u8, 248u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainID),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aggregatorAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.storageSlotIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addSequencingChainReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `appchainLatestEpoch(uint256)` and selector `0x6f4e22f5`.
```solidity
function appchainLatestEpoch(uint256 appchainId) external view returns (uint256 latestEpoch);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainLatestEpochCall {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`appchainLatestEpoch(uint256)`](appchainLatestEpochCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainLatestEpochReturn {
        #[allow(missing_docs)]
        pub latestEpoch: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainLatestEpochCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: appchainLatestEpochCall) -> Self {
                    (value.appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for appchainLatestEpochCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { appchainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainLatestEpochReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: appchainLatestEpochReturn) -> Self {
                    (value.latestEpoch,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for appchainLatestEpochReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { latestEpoch: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainLatestEpochCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainLatestEpoch(uint256)";
            const SELECTOR: [u8; 4] = [111u8, 78u8, 34u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: appchainLatestEpochReturn = r.into();
                        r.latestEpoch
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: appchainLatestEpochReturn = r.into();
                        r.latestEpoch
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `blockHashSender()` and selector `0x362b8154`.
```solidity
function blockHashSender() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashSenderCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`blockHashSender()`](blockHashSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashSenderReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashSenderCall> for UnderlyingRustTuple<'_> {
                fn from(value: blockHashSenderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockHashSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockHashSenderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockHashSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockHashSenderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockHashSender()";
            const SELECTOR: [u8; 4] = [54u8, 43u8, 129u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: blockHashSenderReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: blockHashSenderReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[])` and selector `0x7c901d7b`.
```solidity
function confirmEpochDataHash(uint256 epoch, uint256 seqChainID, bytes memory seqChainBlockHeader, bytes[] memory seqChainAccountProof, bytes[] memory seqChainStorageProof) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEpochDataHashCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainBlockHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub seqChainAccountProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub seqChainStorageProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
    }
    ///Container type for the return parameters of the [`confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[])`](confirmEpochDataHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEpochDataHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEpochDataHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEpochDataHashCall) -> Self {
                    (
                        value.epoch,
                        value.seqChainID,
                        value.seqChainBlockHeader,
                        value.seqChainAccountProof,
                        value.seqChainStorageProof,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEpochDataHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        seqChainID: tuple.1,
                        seqChainBlockHeader: tuple.2,
                        seqChainAccountProof: tuple.3,
                        seqChainStorageProof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEpochDataHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEpochDataHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEpochDataHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl confirmEpochDataHashReturn {
            fn _tokenize(
                &self,
            ) -> <confirmEpochDataHashCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmEpochDataHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmEpochDataHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[])";
            const SELECTOR: [u8; 4] = [124u8, 144u8, 29u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.seqChainBlockHeader,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainAccountProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainStorageProof),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                confirmEpochDataHashReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])` and selector `0x1bf4951c`.
```solidity
function confirmSequencingChainBlockHash(uint256 seqChainID, bytes32 sendRoot, bytes memory ethereumBlockHeader, bytes[] memory ethereumAccountProof, bytes[] memory ethereumStorageProof) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmSequencingChainBlockHashCall {
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sendRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub ethereumBlockHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub ethereumAccountProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub ethereumStorageProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
    }
    ///Container type for the return parameters of the [`confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])`](confirmSequencingChainBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmSequencingChainBlockHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmSequencingChainBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmSequencingChainBlockHashCall) -> Self {
                    (
                        value.seqChainID,
                        value.sendRoot,
                        value.ethereumBlockHeader,
                        value.ethereumAccountProof,
                        value.ethereumStorageProof,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmSequencingChainBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        seqChainID: tuple.0,
                        sendRoot: tuple.1,
                        ethereumBlockHeader: tuple.2,
                        ethereumAccountProof: tuple.3,
                        ethereumStorageProof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmSequencingChainBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmSequencingChainBlockHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmSequencingChainBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl confirmSequencingChainBlockHashReturn {
            fn _tokenize(
                &self,
            ) -> <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmSequencingChainBlockHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmSequencingChainBlockHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])";
            const SELECTOR: [u8; 4] = [27u8, 244u8, 149u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.sendRoot),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.ethereumBlockHeader,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethereumAccountProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethereumStorageProof),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                confirmSequencingChainBlockHashReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainEmissionsReceiver(uint256,uint256)` and selector `0x5b1817e8`.
```solidity
function epochAppchainEmissionsReceiver(uint256 epoch, uint256 appchainId) external view returns (address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainEmissionsReceiverCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainEmissionsReceiver(uint256,uint256)`](epochAppchainEmissionsReceiverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainEmissionsReceiverReturn {
        #[allow(missing_docs)]
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainEmissionsReceiverCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainEmissionsReceiverCall) -> Self {
                    (value.epoch, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainEmissionsReceiverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainEmissionsReceiverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainEmissionsReceiverReturn) -> Self {
                    (value.receiver,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainEmissionsReceiverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { receiver: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainEmissionsReceiverCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainEmissionsReceiver(uint256,uint256)";
            const SELECTOR: [u8; 4] = [91u8, 24u8, 23u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainEmissionsReceiverReturn = r.into();
                        r.receiver
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainEmissionsReceiverReturn = r.into();
                        r.receiver
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainIDs(uint256,uint256)` and selector `0xff87c18c`.
```solidity
function epochAppchainIDs(uint256 epoch, uint256) external view returns (uint256 appchainIds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainIDsCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainIDs(uint256,uint256)`](epochAppchainIDsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainIDsReturn {
        #[allow(missing_docs)]
        pub appchainIds: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainIDsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainIDsCall) -> Self {
                    (value.epoch, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainIDsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainIDsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainIDsReturn) -> Self {
                    (value.appchainIds,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainIDsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { appchainIds: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainIDsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainIDs(uint256,uint256)";
            const SELECTOR: [u8; 4] = [255u8, 135u8, 193u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainIDsReturn = r.into();
                        r.appchainIds
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainIDsReturn = r.into();
                        r.appchainIds
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainTokensUsed(uint256,uint256)` and selector `0x55fcc556`.
```solidity
function epochAppchainTokensUsed(uint256 epoch, uint256 appchainId) external view returns (uint256 tokens);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainTokensUsedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainTokensUsed(uint256,uint256)`](epochAppchainTokensUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainTokensUsedReturn {
        #[allow(missing_docs)]
        pub tokens: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainTokensUsedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainTokensUsedCall) -> Self {
                    (value.epoch, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainTokensUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainTokensUsedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainTokensUsedReturn) -> Self {
                    (value.tokens,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainTokensUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokens: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainTokensUsedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainTokensUsed(uint256,uint256)";
            const SELECTOR: [u8; 4] = [85u8, 252u8, 197u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainTokensUsedReturn = r.into();
                        r.tokens
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainTokensUsedReturn = r.into();
                        r.tokens
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochChainDataSubmitted(uint256,uint256)` and selector `0x5a633080`.
```solidity
function epochChainDataSubmitted(uint256 epoch, uint256 chainId) external view returns (bool submitted);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochChainDataSubmittedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochChainDataSubmitted(uint256,uint256)`](epochChainDataSubmittedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochChainDataSubmittedReturn {
        #[allow(missing_docs)]
        pub submitted: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochChainDataSubmittedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochChainDataSubmittedCall) -> Self {
                    (value.epoch, value.chainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochChainDataSubmittedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        chainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochChainDataSubmittedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochChainDataSubmittedReturn) -> Self {
                    (value.submitted,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochChainDataSubmittedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { submitted: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochChainDataSubmittedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochChainDataSubmitted(uint256,uint256)";
            const SELECTOR: [u8; 4] = [90u8, 99u8, 48u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochChainDataSubmittedReturn = r.into();
                        r.submitted
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochChainDataSubmittedReturn = r.into();
                        r.submitted
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochCompleted(uint256)` and selector `0x30c709b6`.
```solidity
function epochCompleted(uint256 epoch) external view returns (bool completed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochCompletedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochCompleted(uint256)`](epochCompletedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochCompletedReturn {
        #[allow(missing_docs)]
        pub completed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochCompletedCall> for UnderlyingRustTuple<'_> {
                fn from(value: epochCompletedCall) -> Self {
                    (value.epoch,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for epochCompletedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epoch: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochCompletedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochCompletedReturn) -> Self {
                    (value.completed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochCompletedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { completed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochCompletedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochCompleted(uint256)";
            const SELECTOR: [u8; 4] = [48u8, 199u8, 9u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochCompletedReturn = r.into();
                        r.completed
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochCompletedReturn = r.into();
                        r.completed
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochExpectedChains(uint256,uint256)` and selector `0x5d579a61`.
```solidity
function epochExpectedChains(uint256 epoch, uint256) external view returns (uint256 chainIds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochExpectedChainsCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochExpectedChains(uint256,uint256)`](epochExpectedChainsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochExpectedChainsReturn {
        #[allow(missing_docs)]
        pub chainIds: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochExpectedChainsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochExpectedChainsCall) -> Self {
                    (value.epoch, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochExpectedChainsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochExpectedChainsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochExpectedChainsReturn) -> Self {
                    (value.chainIds,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochExpectedChainsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainIds: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochExpectedChainsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochExpectedChains(uint256,uint256)";
            const SELECTOR: [u8; 4] = [93u8, 87u8, 154u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochExpectedChainsReturn = r.into();
                        r.chainIds
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochExpectedChainsReturn = r.into();
                        r.chainIds
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochTotalTokensUsed(uint256)` and selector `0x47dff69d`.
```solidity
function epochTotalTokensUsed(uint256 epoch) external view returns (uint256 totalTokens);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochTotalTokensUsedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochTotalTokensUsed(uint256)`](epochTotalTokensUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochTotalTokensUsedReturn {
        #[allow(missing_docs)]
        pub totalTokens: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochTotalTokensUsedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochTotalTokensUsedCall) -> Self {
                    (value.epoch,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochTotalTokensUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epoch: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochTotalTokensUsedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochTotalTokensUsedReturn) -> Self {
                    (value.totalTokens,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochTotalTokensUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { totalTokens: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochTotalTokensUsedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochTotalTokensUsed(uint256)";
            const SELECTOR: [u8; 4] = [71u8, 223u8, 246u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochTotalTokensUsedReturn = r.into();
                        r.totalTokens
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochTotalTokensUsedReturn = r.into();
                        r.totalTokens
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochVerifiedDataHash(uint256,uint256)` and selector `0x6ba3d17f`.
```solidity
function epochVerifiedDataHash(uint256 epoch, uint256 seqChainID) external view returns (bytes32 dataHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochVerifiedDataHashCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochVerifiedDataHash(uint256,uint256)`](epochVerifiedDataHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochVerifiedDataHashReturn {
        #[allow(missing_docs)]
        pub dataHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochVerifiedDataHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochVerifiedDataHashCall) -> Self {
                    (value.epoch, value.seqChainID)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochVerifiedDataHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        seqChainID: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochVerifiedDataHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochVerifiedDataHashReturn) -> Self {
                    (value.dataHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochVerifiedDataHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { dataHash: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochVerifiedDataHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochVerifiedDataHash(uint256,uint256)";
            const SELECTOR: [u8; 4] = [107u8, 163u8, 209u8, 127u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochVerifiedDataHashReturn = r.into();
                        r.dataHash
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochVerifiedDataHashReturn = r.into();
                        r.dataHash
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveAppchainIds(uint256)` and selector `0x2cd078b8`.
```solidity
function getActiveAppchainIds(uint256 epochIndex) external view returns (uint256[] memory _chainIDs);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveAppchainIdsCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveAppchainIds(uint256)`](getActiveAppchainIdsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveAppchainIdsReturn {
        #[allow(missing_docs)]
        pub _chainIDs: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveAppchainIdsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveAppchainIdsCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveAppchainIdsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveAppchainIdsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveAppchainIdsReturn) -> Self {
                    (value._chainIDs,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveAppchainIdsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _chainIDs: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveAppchainIdsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveAppchainIds(uint256)";
            const SELECTOR: [u8; 4] = [44u8, 208u8, 120u8, 184u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveAppchainIdsReturn = r.into();
                        r._chainIDs
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveAppchainIdsReturn = r.into();
                        r._chainIDs
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAppchainGasFees(uint256,uint256)` and selector `0x285f2446`.
```solidity
function getAppchainGasFees(uint256 epochIndex, uint256 appchainId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainGasFeesCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAppchainGasFees(uint256,uint256)`](getAppchainGasFeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainGasFeesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainGasFeesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainGasFeesCall) -> Self {
                    (value.epochIndex, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainGasFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochIndex: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainGasFeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainGasFeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainGasFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppchainGasFeesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppchainGasFees(uint256,uint256)";
            const SELECTOR: [u8; 4] = [40u8, 95u8, 36u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAppchainGasFeesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAppchainGasFeesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAppchainRewardsReceiver(uint256)` and selector `0x0cc46212`.
```solidity
function getAppchainRewardsReceiver(uint256 appchainId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainRewardsReceiverCall {
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAppchainRewardsReceiver(uint256)`](getAppchainRewardsReceiverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainRewardsReceiverReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainRewardsReceiverCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainRewardsReceiverCall) -> Self {
                    (value.appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainRewardsReceiverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { appchainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainRewardsReceiverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainRewardsReceiverReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainRewardsReceiverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppchainRewardsReceiverCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppchainRewardsReceiver(uint256)";
            const SELECTOR: [u8; 4] = [12u8, 196u8, 98u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAppchainRewardsReceiverReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAppchainRewardsReceiverReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getEpochExpectedChains(uint256)` and selector `0x7c6edb3e`.
```solidity
function getEpochExpectedChains(uint256 epochIndex) external view returns (uint256[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochExpectedChainsCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getEpochExpectedChains(uint256)`](getEpochExpectedChainsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochExpectedChainsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochExpectedChainsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochExpectedChainsCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochExpectedChainsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochExpectedChainsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochExpectedChainsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochExpectedChainsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getEpochExpectedChainsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getEpochExpectedChains(uint256)";
            const SELECTOR: [u8; 4] = [124u8, 110u8, 219u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getEpochExpectedChainsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getEpochExpectedChainsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getEpochProgress(uint256)` and selector `0x4e6da2a4`.
```solidity
function getEpochProgress(uint256 epochIndex) external view returns (bool completed, uint256 totalExpected, uint256 totalSubmitted);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochProgressCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getEpochProgress(uint256)`](getEpochProgressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochProgressReturn {
        #[allow(missing_docs)]
        pub completed: bool,
        #[allow(missing_docs)]
        pub totalExpected: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub totalSubmitted: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochProgressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochProgressCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochProgressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochProgressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochProgressReturn) -> Self {
                    (value.completed, value.totalExpected, value.totalSubmitted)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochProgressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        completed: tuple.0,
                        totalExpected: tuple.1,
                        totalSubmitted: tuple.2,
                    }
                }
            }
        }
        impl getEpochProgressReturn {
            fn _tokenize(
                &self,
            ) -> <getEpochProgressCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.completed,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.totalExpected),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.totalSubmitted),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getEpochProgressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getEpochProgressReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getEpochProgress(uint256)";
            const SELECTOR: [u8; 4] = [78u8, 109u8, 162u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                getEpochProgressReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getTotalGasFees(uint256)` and selector `0xce537c9f`.
```solidity
function getTotalGasFees(uint256 epochIndex) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalGasFeesCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getTotalGasFees(uint256)`](getTotalGasFeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalGasFeesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalGasFeesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getTotalGasFeesCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTotalGasFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalGasFeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTotalGasFeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTotalGasFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTotalGasFeesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTotalGasFees(uint256)";
            const SELECTOR: [u8; 4] = [206u8, 83u8, 124u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getTotalGasFeesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getTotalGasFeesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl grantRoleReturn {
            fn _tokenize(
                &self,
            ) -> <grantRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                grantRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasChainSubmittedForEpoch(uint256,uint256)` and selector `0x95814bf5`.
```solidity
function hasChainSubmittedForEpoch(uint256 epochIndex, uint256 chainId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasChainSubmittedForEpochCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasChainSubmittedForEpoch(uint256,uint256)`](hasChainSubmittedForEpochCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasChainSubmittedForEpochReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasChainSubmittedForEpochCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasChainSubmittedForEpochCall) -> Self {
                    (value.epochIndex, value.chainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasChainSubmittedForEpochCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochIndex: tuple.0,
                        chainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasChainSubmittedForEpochReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasChainSubmittedForEpochReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasChainSubmittedForEpochReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasChainSubmittedForEpochCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasChainSubmittedForEpoch(uint256,uint256)";
            const SELECTOR: [u8; 4] = [149u8, 129u8, 75u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasChainSubmittedForEpochReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasChainSubmittedForEpochReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownEthereumBlockHash()` and selector `0x23afb0ff`.
```solidity
function lastKnownEthereumBlockHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownEthereumBlockHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownEthereumBlockHash()`](lastKnownEthereumBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownEthereumBlockHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownEthereumBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownEthereumBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownEthereumBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownEthereumBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownEthereumBlockHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownEthereumBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownEthereumBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownEthereumBlockHash()";
            const SELECTOR: [u8; 4] = [35u8, 175u8, 176u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownEthereumBlockHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownEthereumBlockHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownSeqChainBlockHashes(uint256)` and selector `0x7a7f34e8`.
```solidity
function lastKnownSeqChainBlockHashes(uint256 chainId) external view returns (bytes32 blockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSeqChainBlockHashesCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownSeqChainBlockHashes(uint256)`](lastKnownSeqChainBlockHashesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSeqChainBlockHashesReturn {
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSeqChainBlockHashesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSeqChainBlockHashesCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSeqChainBlockHashesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSeqChainBlockHashesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSeqChainBlockHashesReturn) -> Self {
                    (value.blockHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSeqChainBlockHashesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blockHash: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownSeqChainBlockHashesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownSeqChainBlockHashes(uint256)";
            const SELECTOR: [u8; 4] = [122u8, 127u8, 52u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownSeqChainBlockHashesReturn = r.into();
                        r.blockHash
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownSeqChainBlockHashesReturn = r.into();
                        r.blockHash
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownSettlementChainBlockHash()` and selector `0xef512221`.
```solidity
function lastKnownSettlementChainBlockHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownSettlementChainBlockHash()`](lastKnownSettlementChainBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownSettlementChainBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownSettlementChainBlockHash()";
            const SELECTOR: [u8; 4] = [239u8, 81u8, 34u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownSettlementChainBlockNumber()` and selector `0x8d935e1d`.
```solidity
function lastKnownSettlementChainBlockNumber() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockNumberCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownSettlementChainBlockNumber()`](lastKnownSettlementChainBlockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockNumberReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockNumberCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockNumberCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockNumberReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockNumberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownSettlementChainBlockNumberCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownSettlementChainBlockNumber()";
            const SELECTOR: [u8; 4] = [141u8, 147u8, 94u8, 29u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockNumberReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockNumberReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `removeSeqChain(uint256)` and selector `0x650e1312`.
```solidity
function removeSeqChain(uint256 chainID) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeSeqChainCall {
        #[allow(missing_docs)]
        pub chainID: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`removeSeqChain(uint256)`](removeSeqChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeSeqChainReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeSeqChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeSeqChainCall) -> Self {
                    (value.chainID,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeSeqChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainID: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeSeqChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeSeqChainReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeSeqChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl removeSeqChainReturn {
            fn _tokenize(
                &self,
            ) -> <removeSeqChainCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeSeqChainCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeSeqChainReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeSeqChain(uint256)";
            const SELECTOR: [u8; 4] = [101u8, 14u8, 19u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainID),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                removeSeqChainReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceRoleReturn {
            fn _tokenize(
                &self,
            ) -> <renounceRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeRoleReturn {
            fn _tokenize(
                &self,
            ) -> <revokeRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainEthOutbox(uint256)` and selector `0xfdd54123`.
```solidity
function seqChainEthOutbox(uint256 chainId) external view returns (address outboxAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthOutboxCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainEthOutbox(uint256)`](seqChainEthOutboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthOutboxReturn {
        #[allow(missing_docs)]
        pub outboxAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthOutboxCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthOutboxCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthOutboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthOutboxReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthOutboxReturn) -> Self {
                    (value.outboxAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthOutboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { outboxAddress: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainEthOutboxCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainEthOutbox(uint256)";
            const SELECTOR: [u8; 4] = [253u8, 213u8, 65u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainEthOutboxReturn = r.into();
                        r.outboxAddress
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainEthOutboxReturn = r.into();
                        r.outboxAddress
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainEthSendRootStorageSlot(uint256)` and selector `0xfd79d3e1`.
```solidity
function seqChainEthSendRootStorageSlot(uint256 chainId) external view returns (uint256 sendRootStorageSlotIndex);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthSendRootStorageSlotCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainEthSendRootStorageSlot(uint256)`](seqChainEthSendRootStorageSlotCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthSendRootStorageSlotReturn {
        #[allow(missing_docs)]
        pub sendRootStorageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthSendRootStorageSlotCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthSendRootStorageSlotCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthSendRootStorageSlotCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthSendRootStorageSlotReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthSendRootStorageSlotReturn) -> Self {
                    (value.sendRootStorageSlotIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthSendRootStorageSlotReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sendRootStorageSlotIndex: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainEthSendRootStorageSlotCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainEthSendRootStorageSlot(uint256)";
            const SELECTOR: [u8; 4] = [253u8, 121u8, 211u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainEthSendRootStorageSlotReturn = r.into();
                        r.sendRootStorageSlotIndex
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainEthSendRootStorageSlotReturn = r.into();
                        r.sendRootStorageSlotIndex
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainGasAggregatorAddresses(uint256)` and selector `0x8dd50eee`.
```solidity
function seqChainGasAggregatorAddresses(uint256 chainId) external view returns (address aggregatorAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainGasAggregatorAddressesCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainGasAggregatorAddresses(uint256)`](seqChainGasAggregatorAddressesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainGasAggregatorAddressesReturn {
        #[allow(missing_docs)]
        pub aggregatorAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainGasAggregatorAddressesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainGasAggregatorAddressesCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainGasAggregatorAddressesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainGasAggregatorAddressesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainGasAggregatorAddressesReturn) -> Self {
                    (value.aggregatorAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainGasAggregatorAddressesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { aggregatorAddress: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainGasAggregatorAddressesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainGasAggregatorAddresses(uint256)";
            const SELECTOR: [u8; 4] = [141u8, 213u8, 14u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainGasAggregatorAddressesReturn = r.into();
                        r.aggregatorAddress
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainGasAggregatorAddressesReturn = r.into();
                        r.aggregatorAddress
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainIDs(uint256)` and selector `0xd26bcc80`.
```solidity
function seqChainIDs(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainIDsCall(pub alloy::sol_types::private::primitives::aliases::U256);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainIDs(uint256)`](seqChainIDsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainIDsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainIDsCall> for UnderlyingRustTuple<'_> {
                fn from(value: seqChainIDsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for seqChainIDsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainIDsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: seqChainIDsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for seqChainIDsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainIDsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainIDs(uint256)";
            const SELECTOR: [u8; 4] = [210u8, 107u8, 204u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainIDsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainIDsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setBlockHashSender(address)` and selector `0x7c715094`.
```solidity
function setBlockHashSender(address newBlockHashSender) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockHashSenderCall {
        #[allow(missing_docs)]
        pub newBlockHashSender: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setBlockHashSender(address)`](setBlockHashSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockHashSenderReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockHashSenderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBlockHashSenderCall) -> Self {
                    (value.newBlockHashSender,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBlockHashSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newBlockHashSender: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockHashSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBlockHashSenderReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBlockHashSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setBlockHashSenderReturn {
            fn _tokenize(
                &self,
            ) -> <setBlockHashSenderCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBlockHashSenderCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBlockHashSenderReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBlockHashSender(address)";
            const SELECTOR: [u8; 4] = [124u8, 113u8, 80u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newBlockHashSender,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setBlockHashSenderReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setEpochExpectedChains(uint256,uint256[])` and selector `0x0344571f`.
```solidity
function setEpochExpectedChains(uint256 epoch, uint256[] memory chainIds) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setEpochExpectedChainsCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`setEpochExpectedChains(uint256,uint256[])`](setEpochExpectedChainsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setEpochExpectedChainsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setEpochExpectedChainsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setEpochExpectedChainsCall) -> Self {
                    (value.epoch, value.chainIds)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setEpochExpectedChainsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        chainIds: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setEpochExpectedChainsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setEpochExpectedChainsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setEpochExpectedChainsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setEpochExpectedChainsReturn {
            fn _tokenize(
                &self,
            ) -> <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setEpochExpectedChainsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setEpochExpectedChainsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setEpochExpectedChains(uint256,uint256[])";
            const SELECTOR: [u8; 4] = [3u8, 68u8, 87u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainIds),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setEpochExpectedChainsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setLastKnownBlockHashes(bytes32,bytes32,uint256)` and selector `0x19771640`.
```solidity
function setLastKnownBlockHashes(bytes32 ethBlockHash, bytes32 settlementBlockHash, uint256 settlementBlockNumber) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLastKnownBlockHashesCall {
        #[allow(missing_docs)]
        pub ethBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub settlementBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub settlementBlockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setLastKnownBlockHashes(bytes32,bytes32,uint256)`](setLastKnownBlockHashesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLastKnownBlockHashesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLastKnownBlockHashesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLastKnownBlockHashesCall) -> Self {
                    (
                        value.ethBlockHash,
                        value.settlementBlockHash,
                        value.settlementBlockNumber,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLastKnownBlockHashesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        ethBlockHash: tuple.0,
                        settlementBlockHash: tuple.1,
                        settlementBlockNumber: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLastKnownBlockHashesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLastKnownBlockHashesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLastKnownBlockHashesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setLastKnownBlockHashesReturn {
            fn _tokenize(
                &self,
            ) -> <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setLastKnownBlockHashesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setLastKnownBlockHashesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setLastKnownBlockHashes(bytes32,bytes32,uint256)";
            const SELECTOR: [u8; 4] = [25u8, 119u8, 22u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementBlockHash),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementBlockNumber),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setLastKnownBlockHashesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `settlementChainID()` and selector `0x22623897`.
```solidity
function settlementChainID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`settlementChainID()`](settlementChainIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainIDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainIDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for settlementChainIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "settlementChainID()";
            const SELECTOR: [u8; 4] = [34u8, 98u8, 56u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: settlementChainIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: settlementChainIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `submitEpochPreImageData(uint256,uint256,uint256[],uint256[],address[])` and selector `0x529f4b56`.
```solidity
function submitEpochPreImageData(uint256 epoch, uint256 seqChainID, uint256[] memory appchains, uint256[] memory tokens, address[] memory emissionsReceivers) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitEpochPreImageDataCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchains: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub tokens: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub emissionsReceivers: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`submitEpochPreImageData(uint256,uint256,uint256[],uint256[],address[])`](submitEpochPreImageDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitEpochPreImageDataReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitEpochPreImageDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: submitEpochPreImageDataCall) -> Self {
                    (
                        value.epoch,
                        value.seqChainID,
                        value.appchains,
                        value.tokens,
                        value.emissionsReceivers,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for submitEpochPreImageDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        seqChainID: tuple.1,
                        appchains: tuple.2,
                        tokens: tuple.3,
                        emissionsReceivers: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitEpochPreImageDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: submitEpochPreImageDataReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for submitEpochPreImageDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl submitEpochPreImageDataReturn {
            fn _tokenize(
                &self,
            ) -> <submitEpochPreImageDataCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for submitEpochPreImageDataCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = submitEpochPreImageDataReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "submitEpochPreImageData(uint256,uint256,uint256[],uint256[],address[])";
            const SELECTOR: [u8; 4] = [82u8, 159u8, 75u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchains),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokens),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.emissionsReceivers),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                submitEpochPreImageDataReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`GasArchive`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum GasArchiveCalls {
        #[allow(missing_docs)]
        AGGREGATED_EPOCH_DATA_HASH_SLOT(AGGREGATED_EPOCH_DATA_HASH_SLOTCall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        HEADER_STATE_ROOT_INDEX(HEADER_STATE_ROOT_INDEXCall),
        #[allow(missing_docs)]
        STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall),
        #[allow(missing_docs)]
        addSequencingChain(addSequencingChainCall),
        #[allow(missing_docs)]
        appchainLatestEpoch(appchainLatestEpochCall),
        #[allow(missing_docs)]
        blockHashSender(blockHashSenderCall),
        #[allow(missing_docs)]
        confirmEpochDataHash(confirmEpochDataHashCall),
        #[allow(missing_docs)]
        confirmSequencingChainBlockHash(confirmSequencingChainBlockHashCall),
        #[allow(missing_docs)]
        epochAppchainEmissionsReceiver(epochAppchainEmissionsReceiverCall),
        #[allow(missing_docs)]
        epochAppchainIDs(epochAppchainIDsCall),
        #[allow(missing_docs)]
        epochAppchainTokensUsed(epochAppchainTokensUsedCall),
        #[allow(missing_docs)]
        epochChainDataSubmitted(epochChainDataSubmittedCall),
        #[allow(missing_docs)]
        epochCompleted(epochCompletedCall),
        #[allow(missing_docs)]
        epochExpectedChains(epochExpectedChainsCall),
        #[allow(missing_docs)]
        epochTotalTokensUsed(epochTotalTokensUsedCall),
        #[allow(missing_docs)]
        epochVerifiedDataHash(epochVerifiedDataHashCall),
        #[allow(missing_docs)]
        getActiveAppchainIds(getActiveAppchainIdsCall),
        #[allow(missing_docs)]
        getAppchainGasFees(getAppchainGasFeesCall),
        #[allow(missing_docs)]
        getAppchainRewardsReceiver(getAppchainRewardsReceiverCall),
        #[allow(missing_docs)]
        getEpochExpectedChains(getEpochExpectedChainsCall),
        #[allow(missing_docs)]
        getEpochProgress(getEpochProgressCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        getTotalGasFees(getTotalGasFeesCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasChainSubmittedForEpoch(hasChainSubmittedForEpochCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        lastKnownEthereumBlockHash(lastKnownEthereumBlockHashCall),
        #[allow(missing_docs)]
        lastKnownSeqChainBlockHashes(lastKnownSeqChainBlockHashesCall),
        #[allow(missing_docs)]
        lastKnownSettlementChainBlockHash(lastKnownSettlementChainBlockHashCall),
        #[allow(missing_docs)]
        lastKnownSettlementChainBlockNumber(lastKnownSettlementChainBlockNumberCall),
        #[allow(missing_docs)]
        removeSeqChain(removeSeqChainCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        seqChainEthOutbox(seqChainEthOutboxCall),
        #[allow(missing_docs)]
        seqChainEthSendRootStorageSlot(seqChainEthSendRootStorageSlotCall),
        #[allow(missing_docs)]
        seqChainGasAggregatorAddresses(seqChainGasAggregatorAddressesCall),
        #[allow(missing_docs)]
        seqChainIDs(seqChainIDsCall),
        #[allow(missing_docs)]
        setBlockHashSender(setBlockHashSenderCall),
        #[allow(missing_docs)]
        setEpochExpectedChains(setEpochExpectedChainsCall),
        #[allow(missing_docs)]
        setLastKnownBlockHashes(setLastKnownBlockHashesCall),
        #[allow(missing_docs)]
        settlementChainID(settlementChainIDCall),
        #[allow(missing_docs)]
        submitEpochPreImageData(submitEpochPreImageDataCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
    }
    #[automatically_derived]
    impl GasArchiveCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [3u8, 68u8, 87u8, 31u8],
            [12u8, 196u8, 98u8, 18u8],
            [19u8, 59u8, 248u8, 159u8],
            [25u8, 119u8, 22u8, 64u8],
            [27u8, 244u8, 149u8, 28u8],
            [34u8, 98u8, 56u8, 151u8],
            [35u8, 175u8, 176u8, 255u8],
            [36u8, 138u8, 156u8, 163u8],
            [40u8, 95u8, 36u8, 70u8],
            [44u8, 208u8, 120u8, 184u8],
            [47u8, 47u8, 241u8, 93u8],
            [48u8, 199u8, 9u8, 182u8],
            [54u8, 43u8, 129u8, 84u8],
            [54u8, 86u8, 138u8, 190u8],
            [71u8, 223u8, 246u8, 157u8],
            [78u8, 109u8, 162u8, 164u8],
            [82u8, 159u8, 75u8, 86u8],
            [85u8, 252u8, 197u8, 86u8],
            [90u8, 99u8, 48u8, 128u8],
            [91u8, 24u8, 23u8, 232u8],
            [93u8, 87u8, 154u8, 97u8],
            [101u8, 14u8, 19u8, 18u8],
            [107u8, 77u8, 23u8, 173u8],
            [107u8, 163u8, 209u8, 127u8],
            [111u8, 78u8, 34u8, 245u8],
            [122u8, 127u8, 52u8, 232u8],
            [124u8, 110u8, 219u8, 62u8],
            [124u8, 113u8, 80u8, 148u8],
            [124u8, 144u8, 29u8, 123u8],
            [141u8, 147u8, 94u8, 29u8],
            [141u8, 213u8, 14u8, 238u8],
            [145u8, 209u8, 72u8, 84u8],
            [149u8, 129u8, 75u8, 245u8],
            [162u8, 23u8, 253u8, 223u8],
            [206u8, 83u8, 124u8, 159u8],
            [210u8, 107u8, 204u8, 128u8],
            [213u8, 71u8, 116u8, 31u8],
            [225u8, 139u8, 77u8, 174u8],
            [232u8, 196u8, 108u8, 40u8],
            [239u8, 81u8, 34u8, 33u8],
            [253u8, 121u8, 211u8, 225u8],
            [253u8, 213u8, 65u8, 35u8],
            [255u8, 135u8, 193u8, 140u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasArchiveCalls {
        const NAME: &'static str = "GasArchiveCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 44usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(_) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::HEADER_STATE_ROOT_INDEX(_) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(_) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addSequencingChain(_) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainLatestEpoch(_) => {
                    <appchainLatestEpochCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blockHashSender(_) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmEpochDataHash(_) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmSequencingChainBlockHash(_) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainEmissionsReceiver(_) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainIDs(_) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainTokensUsed(_) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochChainDataSubmitted(_) => {
                    <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochCompleted(_) => {
                    <epochCompletedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochExpectedChains(_) => {
                    <epochExpectedChainsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochTotalTokensUsed(_) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochVerifiedDataHash(_) => {
                    <epochVerifiedDataHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveAppchainIds(_) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAppchainGasFees(_) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAppchainRewardsReceiver(_) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getEpochExpectedChains(_) => {
                    <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getEpochProgress(_) => {
                    <getEpochProgressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTotalGasFees(_) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasChainSubmittedForEpoch(_) => {
                    <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::lastKnownEthereumBlockHash(_) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownSeqChainBlockHashes(_) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownSettlementChainBlockHash(_) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownSettlementChainBlockNumber(_) => {
                    <lastKnownSettlementChainBlockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeSeqChain(_) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainEthOutbox(_) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainEthSendRootStorageSlot(_) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainGasAggregatorAddresses(_) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainIDs(_) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBlockHashSender(_) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setEpochExpectedChains(_) => {
                    <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setLastKnownBlockHashes(_) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::settlementChainID(_) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::submitEpochPreImageData(_) => {
                    <submitEpochPreImageDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn setEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setEpochExpectedChains)
                    }
                    setEpochExpectedChains
                },
                {
                    fn getAppchainRewardsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainRewardsReceiver)
                    }
                    getAppchainRewardsReceiver
                },
                {
                    fn addSequencingChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <addSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::addSequencingChain)
                    }
                    addSequencingChain
                },
                {
                    fn setLastKnownBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setLastKnownBlockHashes)
                    }
                    setLastKnownBlockHashes
                },
                {
                    fn confirmSequencingChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::confirmSequencingChainBlockHash)
                    }
                    confirmSequencingChainBlockHash
                },
                {
                    fn settlementChainID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <settlementChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::settlementChainID)
                    }
                    settlementChainID
                },
                {
                    fn lastKnownEthereumBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownEthereumBlockHash)
                    }
                    lastKnownEthereumBlockHash
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getAppchainGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainGasFees)
                    }
                    getAppchainGasFees
                },
                {
                    fn getActiveAppchainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getActiveAppchainIds)
                    }
                    getActiveAppchainIds
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(GasArchiveCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn epochCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochCompletedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochCompleted)
                    }
                    epochCompleted
                },
                {
                    fn blockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <blockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::blockHashSender)
                    }
                    blockHashSender
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn epochTotalTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochTotalTokensUsed)
                    }
                    epochTotalTokensUsed
                },
                {
                    fn getEpochProgress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochProgressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochProgress)
                    }
                    getEpochProgress
                },
                {
                    fn submitEpochPreImageData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <submitEpochPreImageDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::submitEpochPreImageData)
                    }
                    submitEpochPreImageData
                },
                {
                    fn epochAppchainTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainTokensUsed)
                    }
                    epochAppchainTokensUsed
                },
                {
                    fn epochChainDataSubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochChainDataSubmitted)
                    }
                    epochChainDataSubmitted
                },
                {
                    fn epochAppchainEmissionsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainEmissionsReceiver)
                    }
                    epochAppchainEmissionsReceiver
                },
                {
                    fn epochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochExpectedChains)
                    }
                    epochExpectedChains
                },
                {
                    fn removeSeqChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <removeSeqChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::removeSeqChain)
                    }
                    removeSeqChain
                },
                {
                    fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX)
                    }
                    STORAGE_ROOT_ACCOUNT_FIELDS_INDEX
                },
                {
                    fn epochVerifiedDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochVerifiedDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochVerifiedDataHash)
                    }
                    epochVerifiedDataHash
                },
                {
                    fn appchainLatestEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <appchainLatestEpochCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::appchainLatestEpoch)
                    }
                    appchainLatestEpoch
                },
                {
                    fn lastKnownSeqChainBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSeqChainBlockHashes)
                    }
                    lastKnownSeqChainBlockHashes
                },
                {
                    fn getEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochExpectedChains)
                    }
                    getEpochExpectedChains
                },
                {
                    fn setBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setBlockHashSender)
                    }
                    setBlockHashSender
                },
                {
                    fn confirmEpochDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::confirmEpochDataHash)
                    }
                    confirmEpochDataHash
                },
                {
                    fn lastKnownSettlementChainBlockNumber(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockNumber)
                    }
                    lastKnownSettlementChainBlockNumber
                },
                {
                    fn seqChainGasAggregatorAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainGasAggregatorAddresses)
                    }
                    seqChainGasAggregatorAddresses
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(GasArchiveCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn hasChainSubmittedForEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::hasChainSubmittedForEpoch)
                    }
                    hasChainSubmittedForEpoch
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn getTotalGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getTotalGasFees)
                    }
                    getTotalGasFees
                },
                {
                    fn seqChainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainIDs)
                    }
                    seqChainIDs
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn HEADER_STATE_ROOT_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::HEADER_STATE_ROOT_INDEX)
                    }
                    HEADER_STATE_ROOT_INDEX
                },
                {
                    fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::AGGREGATED_EPOCH_DATA_HASH_SLOT)
                    }
                    AGGREGATED_EPOCH_DATA_HASH_SLOT
                },
                {
                    fn lastKnownSettlementChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockHash)
                    }
                    lastKnownSettlementChainBlockHash
                },
                {
                    fn seqChainEthSendRootStorageSlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthSendRootStorageSlot)
                    }
                    seqChainEthSendRootStorageSlot
                },
                {
                    fn seqChainEthOutbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthOutbox)
                    }
                    seqChainEthOutbox
                },
                {
                    fn epochAppchainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainIDs)
                    }
                    epochAppchainIDs
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn setEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setEpochExpectedChains)
                    }
                    setEpochExpectedChains
                },
                {
                    fn getAppchainRewardsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainRewardsReceiver)
                    }
                    getAppchainRewardsReceiver
                },
                {
                    fn addSequencingChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <addSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::addSequencingChain)
                    }
                    addSequencingChain
                },
                {
                    fn setLastKnownBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setLastKnownBlockHashes)
                    }
                    setLastKnownBlockHashes
                },
                {
                    fn confirmSequencingChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::confirmSequencingChainBlockHash)
                    }
                    confirmSequencingChainBlockHash
                },
                {
                    fn settlementChainID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <settlementChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::settlementChainID)
                    }
                    settlementChainID
                },
                {
                    fn lastKnownEthereumBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownEthereumBlockHash)
                    }
                    lastKnownEthereumBlockHash
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getAppchainGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainGasFees)
                    }
                    getAppchainGasFees
                },
                {
                    fn getActiveAppchainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getActiveAppchainIds)
                    }
                    getActiveAppchainIds
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn epochCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochCompletedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochCompleted)
                    }
                    epochCompleted
                },
                {
                    fn blockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <blockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::blockHashSender)
                    }
                    blockHashSender
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn epochTotalTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochTotalTokensUsed)
                    }
                    epochTotalTokensUsed
                },
                {
                    fn getEpochProgress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochProgressCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochProgress)
                    }
                    getEpochProgress
                },
                {
                    fn submitEpochPreImageData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <submitEpochPreImageDataCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::submitEpochPreImageData)
                    }
                    submitEpochPreImageData
                },
                {
                    fn epochAppchainTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainTokensUsed)
                    }
                    epochAppchainTokensUsed
                },
                {
                    fn epochChainDataSubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochChainDataSubmitted)
                    }
                    epochChainDataSubmitted
                },
                {
                    fn epochAppchainEmissionsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainEmissionsReceiver)
                    }
                    epochAppchainEmissionsReceiver
                },
                {
                    fn epochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochExpectedChains)
                    }
                    epochExpectedChains
                },
                {
                    fn removeSeqChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <removeSeqChainCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::removeSeqChain)
                    }
                    removeSeqChain
                },
                {
                    fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX)
                    }
                    STORAGE_ROOT_ACCOUNT_FIELDS_INDEX
                },
                {
                    fn epochVerifiedDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochVerifiedDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochVerifiedDataHash)
                    }
                    epochVerifiedDataHash
                },
                {
                    fn appchainLatestEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <appchainLatestEpochCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::appchainLatestEpoch)
                    }
                    appchainLatestEpoch
                },
                {
                    fn lastKnownSeqChainBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSeqChainBlockHashes)
                    }
                    lastKnownSeqChainBlockHashes
                },
                {
                    fn getEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochExpectedChains)
                    }
                    getEpochExpectedChains
                },
                {
                    fn setBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setBlockHashSender)
                    }
                    setBlockHashSender
                },
                {
                    fn confirmEpochDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::confirmEpochDataHash)
                    }
                    confirmEpochDataHash
                },
                {
                    fn lastKnownSettlementChainBlockNumber(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockNumber)
                    }
                    lastKnownSettlementChainBlockNumber
                },
                {
                    fn seqChainGasAggregatorAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainGasAggregatorAddresses)
                    }
                    seqChainGasAggregatorAddresses
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn hasChainSubmittedForEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::hasChainSubmittedForEpoch)
                    }
                    hasChainSubmittedForEpoch
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn getTotalGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getTotalGasFees)
                    }
                    getTotalGasFees
                },
                {
                    fn seqChainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainIDs)
                    }
                    seqChainIDs
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn HEADER_STATE_ROOT_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::HEADER_STATE_ROOT_INDEX)
                    }
                    HEADER_STATE_ROOT_INDEX
                },
                {
                    fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::AGGREGATED_EPOCH_DATA_HASH_SLOT)
                    }
                    AGGREGATED_EPOCH_DATA_HASH_SLOT
                },
                {
                    fn lastKnownSettlementChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockHash)
                    }
                    lastKnownSettlementChainBlockHash
                },
                {
                    fn seqChainEthSendRootStorageSlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthSendRootStorageSlot)
                    }
                    seqChainEthSendRootStorageSlot
                },
                {
                    fn seqChainEthOutbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthOutbox)
                    }
                    seqChainEthOutbox
                },
                {
                    fn epochAppchainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainIDs)
                    }
                    epochAppchainIDs
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(inner) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::HEADER_STATE_ROOT_INDEX(inner) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(inner) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addSequencingChain(inner) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainLatestEpoch(inner) => {
                    <appchainLatestEpochCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blockHashSender(inner) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmEpochDataHash(inner) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmSequencingChainBlockHash(inner) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainEmissionsReceiver(inner) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainIDs(inner) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainTokensUsed(inner) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochChainDataSubmitted(inner) => {
                    <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochCompleted(inner) => {
                    <epochCompletedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochExpectedChains(inner) => {
                    <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochTotalTokensUsed(inner) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochVerifiedDataHash(inner) => {
                    <epochVerifiedDataHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveAppchainIds(inner) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAppchainGasFees(inner) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAppchainRewardsReceiver(inner) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getEpochExpectedChains(inner) => {
                    <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getEpochProgress(inner) => {
                    <getEpochProgressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTotalGasFees(inner) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasChainSubmittedForEpoch(inner) => {
                    <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::lastKnownEthereumBlockHash(inner) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastKnownSeqChainBlockHashes(inner) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastKnownSettlementChainBlockHash(inner) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastKnownSettlementChainBlockNumber(inner) => {
                    <lastKnownSettlementChainBlockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeSeqChain(inner) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::seqChainEthOutbox(inner) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainEthSendRootStorageSlot(inner) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainGasAggregatorAddresses(inner) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainIDs(inner) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBlockHashSender(inner) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setEpochExpectedChains(inner) => {
                    <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setLastKnownBlockHashes(inner) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::settlementChainID(inner) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::submitEpochPreImageData(inner) => {
                    <submitEpochPreImageDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(inner) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::HEADER_STATE_ROOT_INDEX(inner) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(inner) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addSequencingChain(inner) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainLatestEpoch(inner) => {
                    <appchainLatestEpochCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blockHashSender(inner) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmEpochDataHash(inner) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmSequencingChainBlockHash(inner) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainEmissionsReceiver(inner) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainIDs(inner) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainTokensUsed(inner) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochChainDataSubmitted(inner) => {
                    <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochCompleted(inner) => {
                    <epochCompletedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochExpectedChains(inner) => {
                    <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochTotalTokensUsed(inner) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochVerifiedDataHash(inner) => {
                    <epochVerifiedDataHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveAppchainIds(inner) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAppchainGasFees(inner) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAppchainRewardsReceiver(inner) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getEpochExpectedChains(inner) => {
                    <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getEpochProgress(inner) => {
                    <getEpochProgressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTotalGasFees(inner) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasChainSubmittedForEpoch(inner) => {
                    <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::lastKnownEthereumBlockHash(inner) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownSeqChainBlockHashes(inner) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownSettlementChainBlockHash(inner) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownSettlementChainBlockNumber(inner) => {
                    <lastKnownSettlementChainBlockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeSeqChain(inner) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainEthOutbox(inner) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainEthSendRootStorageSlot(inner) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainGasAggregatorAddresses(inner) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainIDs(inner) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBlockHashSender(inner) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setEpochExpectedChains(inner) => {
                    <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setLastKnownBlockHashes(inner) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::settlementChainID(inner) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::submitEpochPreImageData(inner) => {
                    <submitEpochPreImageDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasArchive`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum GasArchiveErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        AccountDoesNotExistInProof(AccountDoesNotExistInProof),
        #[allow(missing_docs)]
        AlreadySubmitted(AlreadySubmitted),
        #[allow(missing_docs)]
        CannotSubmitProofForSettlementChain(CannotSubmitProofForSettlementChain),
        #[allow(missing_docs)]
        ChainIDNotFound(ChainIDNotFound),
        #[allow(missing_docs)]
        EmptyDataHash(EmptyDataHash),
        #[allow(missing_docs)]
        EmptySlot(EmptySlot),
        #[allow(missing_docs)]
        EpochAlreadyCompleted(EpochAlreadyCompleted),
        #[allow(missing_docs)]
        InvalidData(InvalidData),
        #[allow(missing_docs)]
        InvalidEthereumBlockHeader(InvalidEthereumBlockHeader),
        #[allow(missing_docs)]
        InvalidProof(InvalidProof),
        #[allow(missing_docs)]
        InvalidSeqChainBlockHeader(InvalidSeqChainBlockHeader),
        #[allow(missing_docs)]
        NotArchivedEpoch(NotArchivedEpoch),
        #[allow(missing_docs)]
        NotBlockHashSender(NotBlockHashSender),
        #[allow(missing_docs)]
        OldSettlementChainBlockNumber(OldSettlementChainBlockNumber),
        #[allow(missing_docs)]
        SequencingChainAlreadyExists(SequencingChainAlreadyExists),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroLengthArray(ZeroLengthArray),
    }
    #[automatically_derived]
    impl GasArchiveErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 189u8, 227u8, 57u8],
            [15u8, 89u8, 185u8, 255u8],
            [18u8, 66u8, 233u8, 187u8],
            [36u8, 178u8, 231u8, 253u8],
            [52u8, 119u8, 220u8, 218u8],
            [84u8, 119u8, 6u8, 175u8],
            [92u8, 176u8, 69u8, 219u8],
            [102u8, 151u8, 178u8, 50u8],
            [154u8, 12u8, 206u8, 83u8],
            [157u8, 140u8, 186u8, 205u8],
            [159u8, 191u8, 197u8, 137u8],
            [195u8, 107u8, 164u8, 35u8],
            [197u8, 177u8, 69u8, 113u8],
            [217u8, 46u8, 35u8, 61u8],
            [218u8, 38u8, 18u8, 128u8],
            [223u8, 101u8, 10u8, 0u8],
            [226u8, 81u8, 125u8, 63u8],
            [239u8, 182u8, 76u8, 248u8],
            [253u8, 147u8, 193u8, 95u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasArchiveErrors {
        const NAME: &'static str = "GasArchiveErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccountDoesNotExistInProof(_) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AlreadySubmitted(_) => {
                    <AlreadySubmitted as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CannotSubmitProofForSettlementChain(_) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ChainIDNotFound(_) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyDataHash(_) => {
                    <EmptyDataHash as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptySlot(_) => <EmptySlot as alloy_sol_types::SolError>::SELECTOR,
                Self::EpochAlreadyCompleted(_) => {
                    <EpochAlreadyCompleted as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidData(_) => {
                    <InvalidData as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidEthereumBlockHeader(_) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidProof(_) => {
                    <InvalidProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidSeqChainBlockHeader(_) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotArchivedEpoch(_) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotBlockHashSender(_) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OldSettlementChainBlockNumber(_) => {
                    <OldSettlementChainBlockNumber as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SequencingChainAlreadyExists(_) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroLengthArray(_) => {
                    <ZeroLengthArray as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ZeroLengthArray(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroLengthArray as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::ZeroLengthArray)
                    }
                    ZeroLengthArray
                },
                {
                    fn ChainIDNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ChainIDNotFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::ChainIDNotFound)
                    }
                    ChainIDNotFound
                },
                {
                    fn NotBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotBlockHashSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotBlockHashSender)
                    }
                    NotBlockHashSender
                },
                {
                    fn EmptySlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptySlot as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::EmptySlot)
                    }
                    EmptySlot
                },
                {
                    fn AccountDoesNotExistInProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccountDoesNotExistInProof)
                    }
                    AccountDoesNotExistInProof
                },
                {
                    fn InvalidData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidData as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::InvalidData)
                    }
                    InvalidData
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn EmptyDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptyDataHash as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::EmptyDataHash)
                    }
                    EmptyDataHash
                },
                {
                    fn InvalidSeqChainBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidSeqChainBlockHeader)
                    }
                    InvalidSeqChainBlockHeader
                },
                {
                    fn AlreadySubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AlreadySubmitted as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AlreadySubmitted)
                    }
                    AlreadySubmitted
                },
                {
                    fn OldSettlementChainBlockNumber(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <OldSettlementChainBlockNumber as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::OldSettlementChainBlockNumber)
                    }
                    OldSettlementChainBlockNumber
                },
                {
                    fn NotArchivedEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotArchivedEpoch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotArchivedEpoch)
                    }
                    NotArchivedEpoch
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn CannotSubmitProofForSettlementChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::CannotSubmitProofForSettlementChain)
                    }
                    CannotSubmitProofForSettlementChain
                },
                {
                    fn SequencingChainAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::SequencingChainAlreadyExists)
                    }
                    SequencingChainAlreadyExists
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidEthereumBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidEthereumBlockHeader)
                    }
                    InvalidEthereumBlockHeader
                },
                {
                    fn EpochAlreadyCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::EpochAlreadyCompleted)
                    }
                    EpochAlreadyCompleted
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ZeroLengthArray(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroLengthArray as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ZeroLengthArray)
                    }
                    ZeroLengthArray
                },
                {
                    fn ChainIDNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ChainIDNotFound as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ChainIDNotFound)
                    }
                    ChainIDNotFound
                },
                {
                    fn NotBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotBlockHashSender as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotBlockHashSender)
                    }
                    NotBlockHashSender
                },
                {
                    fn EmptySlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptySlot as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::EmptySlot)
                    }
                    EmptySlot
                },
                {
                    fn AccountDoesNotExistInProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccountDoesNotExistInProof)
                    }
                    AccountDoesNotExistInProof
                },
                {
                    fn InvalidData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidData as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidData)
                    }
                    InvalidData
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn EmptyDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptyDataHash as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::EmptyDataHash)
                    }
                    EmptyDataHash
                },
                {
                    fn InvalidSeqChainBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidSeqChainBlockHeader)
                    }
                    InvalidSeqChainBlockHeader
                },
                {
                    fn AlreadySubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AlreadySubmitted as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AlreadySubmitted)
                    }
                    AlreadySubmitted
                },
                {
                    fn OldSettlementChainBlockNumber(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <OldSettlementChainBlockNumber as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::OldSettlementChainBlockNumber)
                    }
                    OldSettlementChainBlockNumber
                },
                {
                    fn NotArchivedEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotArchivedEpoch as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotArchivedEpoch)
                    }
                    NotArchivedEpoch
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn CannotSubmitProofForSettlementChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::CannotSubmitProofForSettlementChain)
                    }
                    CannotSubmitProofForSettlementChain
                },
                {
                    fn SequencingChainAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::SequencingChainAlreadyExists)
                    }
                    SequencingChainAlreadyExists
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidEthereumBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidEthereumBlockHeader)
                    }
                    InvalidEthereumBlockHeader
                },
                {
                    fn EpochAlreadyCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::EpochAlreadyCompleted)
                    }
                    EpochAlreadyCompleted
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccountDoesNotExistInProof(inner) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AlreadySubmitted(inner) => {
                    <AlreadySubmitted as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CannotSubmitProofForSettlementChain(inner) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ChainIDNotFound(inner) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyDataHash(inner) => {
                    <EmptyDataHash as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EmptySlot(inner) => {
                    <EmptySlot as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EpochAlreadyCompleted(inner) => {
                    <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidData(inner) => {
                    <InvalidData as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidEthereumBlockHeader(inner) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidSeqChainBlockHeader(inner) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotArchivedEpoch(inner) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotBlockHashSender(inner) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OldSettlementChainBlockNumber(inner) => {
                    <OldSettlementChainBlockNumber as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SequencingChainAlreadyExists(inner) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroLengthArray(inner) => {
                    <ZeroLengthArray as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccountDoesNotExistInProof(inner) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AlreadySubmitted(inner) => {
                    <AlreadySubmitted as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CannotSubmitProofForSettlementChain(inner) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ChainIDNotFound(inner) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyDataHash(inner) => {
                    <EmptyDataHash as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptySlot(inner) => {
                    <EmptySlot as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::EpochAlreadyCompleted(inner) => {
                    <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidData(inner) => {
                    <InvalidData as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidEthereumBlockHeader(inner) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidSeqChainBlockHeader(inner) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotArchivedEpoch(inner) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotBlockHashSender(inner) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OldSettlementChainBlockNumber(inner) => {
                    <OldSettlementChainBlockNumber as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SequencingChainAlreadyExists(inner) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroLengthArray(inner) => {
                    <ZeroLengthArray as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasArchive`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum GasArchiveEvents {
        #[allow(missing_docs)]
        EpochCompleted(EpochCompleted),
        #[allow(missing_docs)]
        EpochDataValidated(EpochDataValidated),
        #[allow(missing_docs)]
        EpochExpectedChainsUpdated(EpochExpectedChainsUpdated),
        #[allow(missing_docs)]
        GasAggregatorAddressUpdated(GasAggregatorAddressUpdated),
        #[allow(missing_docs)]
        LastKnownBlockHashesUpdated(LastKnownBlockHashesUpdated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl GasArchiveEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                44u8, 63u8, 68u8, 53u8, 153u8, 198u8, 38u8, 138u8, 206u8, 212u8, 115u8,
                231u8, 102u8, 11u8, 64u8, 116u8, 110u8, 163u8, 148u8, 213u8, 25u8, 23u8,
                158u8, 163u8, 246u8, 15u8, 56u8, 41u8, 116u8, 162u8, 231u8, 142u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                48u8, 47u8, 84u8, 53u8, 17u8, 144u8, 34u8, 114u8, 142u8, 174u8, 246u8,
                210u8, 52u8, 49u8, 158u8, 17u8, 217u8, 8u8, 181u8, 4u8, 249u8, 4u8, 66u8,
                235u8, 59u8, 230u8, 96u8, 111u8, 201u8, 84u8, 87u8, 87u8,
            ],
            [
                120u8, 114u8, 46u8, 217u8, 116u8, 43u8, 77u8, 205u8, 167u8, 5u8, 208u8,
                16u8, 255u8, 247u8, 70u8, 10u8, 53u8, 30u8, 144u8, 111u8, 130u8, 35u8,
                207u8, 242u8, 210u8, 58u8, 85u8, 180u8, 75u8, 102u8, 66u8, 124u8,
            ],
            [
                120u8, 223u8, 147u8, 129u8, 129u8, 175u8, 203u8, 40u8, 234u8, 167u8,
                208u8, 153u8, 35u8, 91u8, 191u8, 152u8, 119u8, 131u8, 45u8, 111u8, 170u8,
                254u8, 54u8, 209u8, 234u8, 112u8, 145u8, 111u8, 58u8, 206u8, 51u8, 224u8,
            ],
            [
                160u8, 254u8, 161u8, 42u8, 93u8, 253u8, 179u8, 235u8, 240u8, 183u8,
                196u8, 154u8, 125u8, 221u8, 95u8, 253u8, 211u8, 229u8, 178u8, 215u8,
                87u8, 79u8, 241u8, 107u8, 10u8, 16u8, 50u8, 237u8, 193u8, 157u8, 101u8,
                139u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for GasArchiveEvents {
        const NAME: &'static str = "GasArchiveEvents";
        const COUNT: usize = 8usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<EpochCompleted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <EpochCompleted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EpochCompleted)
                }
                Some(
                    <EpochDataValidated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EpochDataValidated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EpochDataValidated)
                }
                Some(
                    <EpochExpectedChainsUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EpochExpectedChainsUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EpochExpectedChainsUpdated)
                }
                Some(
                    <GasAggregatorAddressUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <GasAggregatorAddressUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::GasAggregatorAddressUpdated)
                }
                Some(
                    <LastKnownBlockHashesUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <LastKnownBlockHashesUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::LastKnownBlockHashesUpdated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for GasArchiveEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochCompleted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EpochDataValidated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EpochExpectedChainsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::GasAggregatorAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::LastKnownBlockHashesUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochCompleted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EpochDataValidated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EpochExpectedChainsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::GasAggregatorAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::LastKnownBlockHashesUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GasArchive`](self) contract instance.

See the [wrapper's documentation](`GasArchiveInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GasArchiveInstance<P, N> {
        GasArchiveInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _blockHashSender: alloy::sol_types::private::Address,
        _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GasArchiveInstance<P, N>>,
    > {
        GasArchiveInstance::<
            P,
            N,
        >::deploy(provider, _blockHashSender, _settlementChainID, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _blockHashSender: alloy::sol_types::private::Address,
        _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        GasArchiveInstance::<
            P,
            N,
        >::deploy_builder(provider, _blockHashSender, _settlementChainID, admin)
    }
    /**A [`GasArchive`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GasArchive`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GasArchiveInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for GasArchiveInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GasArchiveInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`GasArchive`](self) contract instance.

See the [wrapper's documentation](`GasArchiveInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _blockHashSender: alloy::sol_types::private::Address,
            _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<GasArchiveInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _blockHashSender,
                _settlementChainID,
                admin,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _blockHashSender: alloy::sol_types::private::Address,
            _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _blockHashSender,
                            _settlementChainID,
                            admin,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> GasArchiveInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GasArchiveInstance<P, N> {
            GasArchiveInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATED_EPOCH_DATA_HASH_SLOT`] function.
        pub fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, AGGREGATED_EPOCH_DATA_HASH_SLOTCall, N> {
            self.call_builder(&AGGREGATED_EPOCH_DATA_HASH_SLOTCall)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`HEADER_STATE_ROOT_INDEX`] function.
        pub fn HEADER_STATE_ROOT_INDEX(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, HEADER_STATE_ROOT_INDEXCall, N> {
            self.call_builder(&HEADER_STATE_ROOT_INDEXCall)
        }
        ///Creates a new call builder for the [`STORAGE_ROOT_ACCOUNT_FIELDS_INDEX`] function.
        pub fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall,
            N,
        > {
            self.call_builder(&STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall)
        }
        ///Creates a new call builder for the [`addSequencingChain`] function.
        pub fn addSequencingChain(
            &self,
            chainID: alloy::sol_types::private::primitives::aliases::U256,
            aggregatorAddress: alloy::sol_types::private::Address,
            bridgeAddress: alloy::sol_types::private::Address,
            storageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, addSequencingChainCall, N> {
            self.call_builder(
                &addSequencingChainCall {
                    chainID,
                    aggregatorAddress,
                    bridgeAddress,
                    storageSlotIndex,
                },
            )
        }
        ///Creates a new call builder for the [`appchainLatestEpoch`] function.
        pub fn appchainLatestEpoch(
            &self,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, appchainLatestEpochCall, N> {
            self.call_builder(
                &appchainLatestEpochCall {
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`blockHashSender`] function.
        pub fn blockHashSender(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, blockHashSenderCall, N> {
            self.call_builder(&blockHashSenderCall)
        }
        ///Creates a new call builder for the [`confirmEpochDataHash`] function.
        pub fn confirmEpochDataHash(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
            seqChainBlockHeader: alloy::sol_types::private::Bytes,
            seqChainAccountProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            seqChainStorageProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, confirmEpochDataHashCall, N> {
            self.call_builder(
                &confirmEpochDataHashCall {
                    epoch,
                    seqChainID,
                    seqChainBlockHeader,
                    seqChainAccountProof,
                    seqChainStorageProof,
                },
            )
        }
        ///Creates a new call builder for the [`confirmSequencingChainBlockHash`] function.
        pub fn confirmSequencingChainBlockHash(
            &self,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
            sendRoot: alloy::sol_types::private::FixedBytes<32>,
            ethereumBlockHeader: alloy::sol_types::private::Bytes,
            ethereumAccountProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            ethereumStorageProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, confirmSequencingChainBlockHashCall, N> {
            self.call_builder(
                &confirmSequencingChainBlockHashCall {
                    seqChainID,
                    sendRoot,
                    ethereumBlockHeader,
                    ethereumAccountProof,
                    ethereumStorageProof,
                },
            )
        }
        ///Creates a new call builder for the [`epochAppchainEmissionsReceiver`] function.
        pub fn epochAppchainEmissionsReceiver(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainEmissionsReceiverCall, N> {
            self.call_builder(
                &epochAppchainEmissionsReceiverCall {
                    epoch,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`epochAppchainIDs`] function.
        pub fn epochAppchainIDs(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainIDsCall, N> {
            self.call_builder(&epochAppchainIDsCall { epoch, _1 })
        }
        ///Creates a new call builder for the [`epochAppchainTokensUsed`] function.
        pub fn epochAppchainTokensUsed(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainTokensUsedCall, N> {
            self.call_builder(
                &epochAppchainTokensUsedCall {
                    epoch,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`epochChainDataSubmitted`] function.
        pub fn epochChainDataSubmitted(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochChainDataSubmittedCall, N> {
            self.call_builder(
                &epochChainDataSubmittedCall {
                    epoch,
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`epochCompleted`] function.
        pub fn epochCompleted(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochCompletedCall, N> {
            self.call_builder(&epochCompletedCall { epoch })
        }
        ///Creates a new call builder for the [`epochExpectedChains`] function.
        pub fn epochExpectedChains(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochExpectedChainsCall, N> {
            self.call_builder(
                &epochExpectedChainsCall {
                    epoch,
                    _1,
                },
            )
        }
        ///Creates a new call builder for the [`epochTotalTokensUsed`] function.
        pub fn epochTotalTokensUsed(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochTotalTokensUsedCall, N> {
            self.call_builder(&epochTotalTokensUsedCall { epoch })
        }
        ///Creates a new call builder for the [`epochVerifiedDataHash`] function.
        pub fn epochVerifiedDataHash(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochVerifiedDataHashCall, N> {
            self.call_builder(
                &epochVerifiedDataHashCall {
                    epoch,
                    seqChainID,
                },
            )
        }
        ///Creates a new call builder for the [`getActiveAppchainIds`] function.
        pub fn getActiveAppchainIds(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveAppchainIdsCall, N> {
            self.call_builder(
                &getActiveAppchainIdsCall {
                    epochIndex,
                },
            )
        }
        ///Creates a new call builder for the [`getAppchainGasFees`] function.
        pub fn getAppchainGasFees(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getAppchainGasFeesCall, N> {
            self.call_builder(
                &getAppchainGasFeesCall {
                    epochIndex,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`getAppchainRewardsReceiver`] function.
        pub fn getAppchainRewardsReceiver(
            &self,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getAppchainRewardsReceiverCall, N> {
            self.call_builder(
                &getAppchainRewardsReceiverCall {
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`getEpochExpectedChains`] function.
        pub fn getEpochExpectedChains(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getEpochExpectedChainsCall, N> {
            self.call_builder(
                &getEpochExpectedChainsCall {
                    epochIndex,
                },
            )
        }
        ///Creates a new call builder for the [`getEpochProgress`] function.
        pub fn getEpochProgress(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getEpochProgressCall, N> {
            self.call_builder(&getEpochProgressCall { epochIndex })
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`getTotalGasFees`] function.
        pub fn getTotalGasFees(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getTotalGasFeesCall, N> {
            self.call_builder(&getTotalGasFeesCall { epochIndex })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasChainSubmittedForEpoch`] function.
        pub fn hasChainSubmittedForEpoch(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, hasChainSubmittedForEpochCall, N> {
            self.call_builder(
                &hasChainSubmittedForEpochCall {
                    epochIndex,
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`lastKnownEthereumBlockHash`] function.
        pub fn lastKnownEthereumBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, lastKnownEthereumBlockHashCall, N> {
            self.call_builder(&lastKnownEthereumBlockHashCall)
        }
        ///Creates a new call builder for the [`lastKnownSeqChainBlockHashes`] function.
        pub fn lastKnownSeqChainBlockHashes(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, lastKnownSeqChainBlockHashesCall, N> {
            self.call_builder(
                &lastKnownSeqChainBlockHashesCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`lastKnownSettlementChainBlockHash`] function.
        pub fn lastKnownSettlementChainBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            lastKnownSettlementChainBlockHashCall,
            N,
        > {
            self.call_builder(&lastKnownSettlementChainBlockHashCall)
        }
        ///Creates a new call builder for the [`lastKnownSettlementChainBlockNumber`] function.
        pub fn lastKnownSettlementChainBlockNumber(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            lastKnownSettlementChainBlockNumberCall,
            N,
        > {
            self.call_builder(&lastKnownSettlementChainBlockNumberCall)
        }
        ///Creates a new call builder for the [`removeSeqChain`] function.
        pub fn removeSeqChain(
            &self,
            chainID: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, removeSeqChainCall, N> {
            self.call_builder(&removeSeqChainCall { chainID })
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`seqChainEthOutbox`] function.
        pub fn seqChainEthOutbox(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainEthOutboxCall, N> {
            self.call_builder(&seqChainEthOutboxCall { chainId })
        }
        ///Creates a new call builder for the [`seqChainEthSendRootStorageSlot`] function.
        pub fn seqChainEthSendRootStorageSlot(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainEthSendRootStorageSlotCall, N> {
            self.call_builder(
                &seqChainEthSendRootStorageSlotCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`seqChainGasAggregatorAddresses`] function.
        pub fn seqChainGasAggregatorAddresses(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainGasAggregatorAddressesCall, N> {
            self.call_builder(
                &seqChainGasAggregatorAddressesCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`seqChainIDs`] function.
        pub fn seqChainIDs(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainIDsCall, N> {
            self.call_builder(&seqChainIDsCall(_0))
        }
        ///Creates a new call builder for the [`setBlockHashSender`] function.
        pub fn setBlockHashSender(
            &self,
            newBlockHashSender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, setBlockHashSenderCall, N> {
            self.call_builder(
                &setBlockHashSenderCall {
                    newBlockHashSender,
                },
            )
        }
        ///Creates a new call builder for the [`setEpochExpectedChains`] function.
        pub fn setEpochExpectedChains(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            chainIds: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, setEpochExpectedChainsCall, N> {
            self.call_builder(
                &setEpochExpectedChainsCall {
                    epoch,
                    chainIds,
                },
            )
        }
        ///Creates a new call builder for the [`setLastKnownBlockHashes`] function.
        pub fn setLastKnownBlockHashes(
            &self,
            ethBlockHash: alloy::sol_types::private::FixedBytes<32>,
            settlementBlockHash: alloy::sol_types::private::FixedBytes<32>,
            settlementBlockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setLastKnownBlockHashesCall, N> {
            self.call_builder(
                &setLastKnownBlockHashesCall {
                    ethBlockHash,
                    settlementBlockHash,
                    settlementBlockNumber,
                },
            )
        }
        ///Creates a new call builder for the [`settlementChainID`] function.
        pub fn settlementChainID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, settlementChainIDCall, N> {
            self.call_builder(&settlementChainIDCall)
        }
        ///Creates a new call builder for the [`submitEpochPreImageData`] function.
        pub fn submitEpochPreImageData(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
            appchains: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            tokens: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            emissionsReceivers: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, submitEpochPreImageDataCall, N> {
            self.call_builder(
                &submitEpochPreImageDataCall {
                    epoch,
                    seqChainID,
                    appchains,
                    tokens,
                    emissionsReceivers,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`EpochCompleted`] event.
        pub fn EpochCompleted_filter(
            &self,
        ) -> alloy_contract::Event<&P, EpochCompleted, N> {
            self.event_filter::<EpochCompleted>()
        }
        ///Creates a new event filter for the [`EpochDataValidated`] event.
        pub fn EpochDataValidated_filter(
            &self,
        ) -> alloy_contract::Event<&P, EpochDataValidated, N> {
            self.event_filter::<EpochDataValidated>()
        }
        ///Creates a new event filter for the [`EpochExpectedChainsUpdated`] event.
        pub fn EpochExpectedChainsUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, EpochExpectedChainsUpdated, N> {
            self.event_filter::<EpochExpectedChainsUpdated>()
        }
        ///Creates a new event filter for the [`GasAggregatorAddressUpdated`] event.
        pub fn GasAggregatorAddressUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, GasAggregatorAddressUpdated, N> {
            self.event_filter::<GasAggregatorAddressUpdated>()
        }
        ///Creates a new event filter for the [`LastKnownBlockHashesUpdated`] event.
        pub fn LastKnownBlockHashesUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, LastKnownBlockHashesUpdated, N> {
            self.event_filter::<LastKnownBlockHashesUpdated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(&self) -> alloy_contract::Event<&P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(&self) -> alloy_contract::Event<&P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
