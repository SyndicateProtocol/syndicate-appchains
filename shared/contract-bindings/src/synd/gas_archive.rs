/**

Generated by the following Solidity interface...
```solidity
interface GasArchive {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error AccountDoesNotExistInProof();
    error AlreadySubmitted();
    error CannotSubmitProofForSettlementChain();
    error ChainIDNotFound();
    error EmptySlot();
    error EpochAlreadyCompleted();
    error InvalidData();
    error InvalidEthereumBlockHeader();
    error InvalidInitialization();
    error InvalidProof();
    error InvalidSeqChainBlockHeader();
    error NotArchivedEpoch();
    error NotBlockHashSender();
    error NotInitializing();
    error SequencingChainAlreadyExists();
    error ZeroAddress();
    error ZeroLengthArray();

    event EpochCompleted(uint256 indexed epoch);
    event EpochDataValidated(uint256 indexed epoch, uint256 indexed seqChainID, bytes32 dataHash);
    event EpochExpectedChainsUpdated(uint256 indexed epoch, uint256[] chainIds);
    event GasAggregatorAddressUpdated(address indexed oldAddress, address indexed newAddress);
    event Initialized(uint64 version);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor();

    function AGGREGATED_EPOCH_DATA_HASH_SLOT() external view returns (uint256);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function HEADER_STATE_ROOT_INDEX() external view returns (uint256);
    function STORAGE_ROOT_ACCOUNT_FIELDS_INDEX() external view returns (uint256);
    function addSequencingChain(uint256 chainID, address aggregatorAddress, address bridgeAddress, uint256 storageSlotIndex) external;
    function blockHashSender() external view returns (address);
    function confirmEpochDataHash(uint256 epoch, uint256 seqChainID, bytes memory seqChainBlockHeader, bytes[] memory seqChainAccountProof, bytes[] memory seqChainStorageProof, uint256[] memory appchains, uint256[] memory tokens, address[] memory emissionsReceivers) external;
    function confirmSequencingChainBlockHash(uint256 seqChainID, bytes32 sendRoot, bytes memory ethereumBlockHeader, bytes[] memory ethereumAccountProof, bytes[] memory ethereumStorageProof) external;
    function epochAppchainEmissionsReceiver(uint256 epoch, uint256 appchainId) external view returns (address receiver);
    function epochAppchainIDs(uint256 epoch, uint256) external view returns (uint256 appchainIds);
    function epochAppchainTokensUsed(uint256 epoch, uint256 appchainId) external view returns (uint256 tokens);
    function epochChainDataSubmitted(uint256 epoch, uint256 chainId) external view returns (bool submitted);
    function epochCompleted(uint256 epoch) external view returns (bool completed);
    function epochExpectedChains(uint256 epoch, uint256) external view returns (uint256 chainIds);
    function epochTotalTokensUsed(uint256 epoch) external view returns (uint256 totalTokens);
    function getActiveAppchainIds(uint256 epochIndex) external view returns (uint256[] memory _chainIDs);
    function getAppchainGasFees(uint256 epochIndex, uint256 appchainId) external view returns (uint256);
    function getAppchainRewardsReceiver(uint256 epochIndex, uint256 appchainId) external view returns (address);
    function getEpochExpectedChains(uint256 epochIndex) external view returns (uint256[] memory);
    function getEpochProgress(uint256 epochIndex) external view returns (bool completed, uint256 totalExpected, uint256 totalSubmitted);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function getTotalGasFees(uint256 epochIndex) external view returns (uint256);
    function grantRole(bytes32 role, address account) external;
    function hasChainSubmittedForEpoch(uint256 epochIndex, uint256 chainId) external view returns (bool);
    function hasRole(bytes32 role, address account) external view returns (bool);
    function initialize(address _blockHashSender, uint256 _settlementChainID, address admin) external;
    function lastKnownEthereumBlockHash() external view returns (bytes32);
    function lastKnownSeqChainBlockHashes(uint256 chainId) external view returns (bytes32 blockHash);
    function lastKnownSettlementChainBlockHash() external view returns (bytes32);
    function removeSeqChain(uint256 chainID) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function seqChainEthOutbox(uint256 chainId) external view returns (address outboxAddress);
    function seqChainEthSendRootStorageSlot(uint256 chainId) external view returns (uint256 sendRootStorageSlotIndex);
    function seqChainGasAggregatorAddresses(uint256 chainId) external view returns (address aggregatorAddress);
    function seqChainIDs(uint256) external view returns (uint256);
    function setBlockHashSender(address newBlockHashSender) external;
    function setEpochExpectedChains(uint256 epoch, uint256[] memory chainIds) external;
    function setLastKnownBlockHashes(bytes32 ethBlockHash, bytes32 settlementBlockHash) external;
    function settlementChainID() external view returns (uint256);
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "AGGREGATED_EPOCH_DATA_HASH_SLOT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "HEADER_STATE_ROOT_INDEX",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "STORAGE_ROOT_ACCOUNT_FIELDS_INDEX",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addSequencingChain",
    "inputs": [
      {
        "name": "chainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "aggregatorAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "bridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "storageSlotIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "blockHashSender",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "confirmEpochDataHash",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainBlockHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "seqChainAccountProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "seqChainStorageProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "appchains",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "tokens",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "emissionsReceivers",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "confirmSequencingChainBlockHash",
    "inputs": [
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sendRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "ethereumBlockHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "ethereumAccountProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "ethereumStorageProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "epochAppchainEmissionsReceiver",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochAppchainIDs",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "appchainIds",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochAppchainTokensUsed",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "tokens",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochChainDataSubmitted",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "submitted",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochCompleted",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "completed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochExpectedChains",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "chainIds",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochTotalTokensUsed",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "totalTokens",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveAppchainIds",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "_chainIDs",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppchainGasFees",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppchainRewardsReceiver",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getEpochExpectedChains",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getEpochProgress",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "completed",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "totalExpected",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "totalSubmitted",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTotalGasFees",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasChainSubmittedForEpoch",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_blockHashSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_settlementChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "lastKnownEthereumBlockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownSeqChainBlockHashes",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "blockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownSettlementChainBlockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeSeqChain",
    "inputs": [
      {
        "name": "chainID",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "seqChainEthOutbox",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "outboxAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainEthSendRootStorageSlot",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "sendRootStorageSlotIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainGasAggregatorAddresses",
    "inputs": [
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "aggregatorAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainIDs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setBlockHashSender",
    "inputs": [
      {
        "name": "newBlockHashSender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setEpochExpectedChains",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "chainIds",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setLastKnownBlockHashes",
    "inputs": [
      {
        "name": "ethBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "settlementBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "settlementChainID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "EpochCompleted",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EpochDataValidated",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "dataHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EpochExpectedChainsUpdated",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "chainIds",
        "type": "uint256[]",
        "indexed": false,
        "internalType": "uint256[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "GasAggregatorAddressUpdated",
    "inputs": [
      {
        "name": "oldAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AccountDoesNotExistInProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AlreadySubmitted",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CannotSubmitProofForSettlementChain",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ChainIDNotFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptySlot",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EpochAlreadyCompleted",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidData",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidEthereumBlockHeader",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidSeqChainBlockHeader",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotArchivedEpoch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotBlockHashSender",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SequencingChainAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroLengthArray",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GasArchive {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080806040523460aa575f5160206133e45f395f51905f525460ff8160401c16609b576002600160401b03196001600160401b038216016049575b60405161333590816100af8239f35b6001600160401b0319166001600160401b039081175f5160206133e45f395f51905f525581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f80603a565b63f92ee8a960e01b5f5260045ffd5b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a71461029f5780630344571f1461029a578063133bf89f146102955780631bf4951c14610290578063226238971461028b57806323afb0ff14610286578063248a9ca314610281578063285f24461461027c5780632cd078b8146102775780632f2ff15d1461027257806330c709b61461026d5780633271ba4914610268578063362b81541461026357806336568abe1461025e57806347dff69d146102595780634e6da2a41461025457806355fcc5561461024f5780635a633080146102185780635b1817e81461024a5780635d579a6114610245578063650e1312146102405780636b4d17ad1461023b5780637a7f34e8146102365780637c6edb3e146102315780637c7150941461022c57806384211ca9146102275780638dd50eee1461022257806391d148541461021d57806395814bf514610218578063a217fddf14610213578063c350a1b51461020e578063ce537c9f14610209578063d26bcc8014610204578063d547741f146101ff578063e18b4dae146101fa578063e8c46c28146101f5578063ec828a91146101f0578063ef512221146101eb578063fd79d3e1146101e6578063fdd54123146101e15763ff87c18c146101dc575f80fd5b61132e565b6112ee565b6112c4565b6112a7565b611222565b611207565b6111ec565b61118c565b61113c565b6110fd565b610e86565b610e6c565b610ae1565b610ded565b610dad565b610d47565b610cdf565b610c7b565b610c51565b610c36565b610c12565b610bcb565b610b1e565b610aa9565b6109af565b610985565b610917565b6108e4565b6107f1565b6107c2565b61075d565b6106d8565b61061c565b6105ca565b6105ae565b610591565b61050a565b61049b565b610375565b34610340576020600319360112610340576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361034057807f7965db0b0000000000000000000000000000000000000000000000000000000060209214908115610316575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150145f61030b565b5f80fd5b9181601f840112156103405782359167ffffffffffffffff8311610340576020808501948460051b01011161034057565b346103405760406003193601126103405760043560243567ffffffffffffffff8111610340576103a9903690600401610344565b91906103b3611f71565b815f52600a60205260ff60405f20541661045557815f52600b6020526103db60405f20611425565b5f5b83811061042557507fa0fea12a5dfdb3ebf0b7c49a7ddd5ffdd3e5b2d7574ff16b0a1032edc19d658b61042393839261041b60405192839283611531565b0390a2612066565b005b60019061044f61043d855f52600b60205260405f2090565b610448838887611455565b35906114b3565b016103dd565b7ffd93c15f000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff81160361034057565b34610340576080600319360112610340576104236004356024356104be8161047d565b604435906104cb8261047d565b606435926104d7611f71565b611545565b9181601f840112156103405782359167ffffffffffffffff8311610340576020838186019501011161034057565b346103405760a06003193601126103405760043560243560443567ffffffffffffffff8111610340576105419036906004016104dc565b60649391933567ffffffffffffffff811161034057610564903690600401610344565b916084359567ffffffffffffffff871161034057610589610423973690600401610344565b969095611753565b34610340575f600319360112610340576020600354604051908152f35b34610340575f6003193601126103405760205f54604051908152f35b346103405760206003193601126103405760206106146004355f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b604051908152f35b346103405760406003193601126103405760043560243590805f52600a60205260ff60405f20541615610677575f52600e60205260405f20905f5260205261067360405f2054604051918291829190602083019252565b0390f35b7fc5b14571000000000000000000000000000000000000000000000000000000005f5260045ffd5b60206040818301928281528451809452019201905f5b8181106106c25750505090565b82518452602093840193909201916001016106b5565b3461034057602060031936011261034057600435805f52600a60205260ff60405f20541615610677575f52600d60205260405f206040519081602082549182815201915f5260205f20905f5b818110610747576106738561073b818703826116de565b6040519182918261069f565b8254845260209093019260019283019201610724565b34610340576040600319360112610340576104236024356004356107808261047d565b6107bd6107b8825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b611fd9565b61243a565b34610340576020600319360112610340576004355f52600a602052602060ff60405f2054166040519015158152f35b34610340576101006003193601126103405760043560243560443567ffffffffffffffff8111610340576108299036906004016104dc565b60649391933567ffffffffffffffff81116103405761084c903690600401610344565b60849291923567ffffffffffffffff81116103405761086f903690600401610344565b60a49291923567ffffffffffffffff811161034057610892903690600401610344565b93909260c43567ffffffffffffffff8111610340576108b5903690600401610344565b97909660e4359b67ffffffffffffffff8d11610340576108dc6104239d3690600401610344565b9c909b611983565b34610340575f60031936011261034057602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b34610340576040600319360112610340576004356024356109378161047d565b3373ffffffffffffffffffffffffffffffffffffffff82160361095d576104239161268a565b7f6697b232000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610340576020600319360112610340576004355f52600c602052602060405f2054604051908152f35b34610340576020600319360112610340576004355f815f52600a60205260ff60405f20541690825f52600b60205260405f2092604051808560208297549384815201905f5260205f20925f5b818110610a90575050610a10925003856116de565b83515f5b8551811015610a7457610a53610a4c610a35855f52600960205260405f2090565b610a3f848a611ca6565b515f5260205260405f2090565b5460ff1690565b610a60575b600101610a14565b92610a6c600191611cba565b939050610a58565b5060408051851515815260208101929092528101839052606090f35b84548352600194850194899450602090930192016109fb565b3461034057604060031936011261034057600435602435905f52600e60205260405f20905f52602052602060405f2054604051908152f35b3461034057604060031936011261034057600435602435905f52600960205260405f20905f52602052602060ff60405f2054166040519015158152f35b3461034057604060031936011261034057600435602435905f52600f60205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600454811015610bb15760045f5260205f2001905f90565b610b6c565b8054821015610bb1575f5260205f2001905f90565b3461034057604060031936011261034057600435602435905f52600b60205260405f20805482101561034057602091610c0391610bb6565b90549060031b1c604051908152f35b3461034057602060031936011261034057610423600435610c31611f71565b611da4565b34610340575f60031936011261034057602060405160028152f35b34610340576020600319360112610340576004355f526008602052602060405f2054604051908152f35b34610340576020600319360112610340576004355f52600b60205260405f206040519081602082549182815201915f5260205f20905f5b818110610cc9576106738561073b818703826116de565b8254845260209093019260019283019201610cb2565b346103405760206003193601126103405773ffffffffffffffffffffffffffffffffffffffff600435610d118161047d565b610d19611f71565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002555f80f35b34610340576040600319360112610340576004356024359073ffffffffffffffffffffffffffffffffffffffff600254163303610d85575f55600155005b7f24b2e7fd000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610340576020600319360112610340576004355f526005602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461034057604060031936011261034057602060ff610e60602435600435610e148261047d565b5f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800845260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54166040519015158152f35b34610340575f6003193601126103405760206040515f8152f35b3461034057606060031936011261034057600435610ea38161047d565b60243590604435610eb38161047d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549267ffffffffffffffff610f0260ff604087901c1615610ef4565b1590565b9567ffffffffffffffff1690565b16801590816110f5575b60011490816110eb575b1590816110e2575b506110ba57610f9f9284610f9660017fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b61103f57611eac565b610fa557005b6110107fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b6110b5680100000000000000007fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b611eac565b7ff92ee8a9000000000000000000000000000000000000000000000000000000005f5260045ffd5b9050155f610f1e565b303b159150610f16565b859150610f0c565b3461034057602060031936011261034057600435805f52600a60205260ff60405f20541615610677575f52600c602052602060405f2054604051908152f35b34610340576020600319360112610340576004356004548110156103405760209060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0154604051908152f35b34610340576040600319360112610340576104236024356004356111af8261047d565b6111e76107b8825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b61268a565b34610340575f60031936011261034057602060405160038152f35b34610340575f60031936011261034057602060405160078152f35b346103405760406003193601126103405760043560243590805f52600a60205260ff60405f20541615610677575f52600f60205260405f20905f5260205261067373ffffffffffffffffffffffffffffffffffffffff60405f2054166040519182918291909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b34610340575f600319360112610340576020600154604051908152f35b34610340576020600319360112610340576004355f526007602052602060405f2054604051908152f35b34610340576020600319360112610340576004355f526006602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461034057604060031936011261034057600435602435905f52600d60205260405f20805482101561034057602091610c0391610bb6565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b908160011b91808304600214901517156113d657565b611393565b90680100000000000000008111611420578154918181558282106113fe57505050565b5f5260205f2091820191015b818110611415575050565b5f815560010161140a565b611366565b8054905f815581611434575050565b5f5260205f20908101905b81811061144a575050565b5f815560010161143f565b9190811015610bb15760051b0190565b600454680100000000000000008110156114205760018101600455600454811015610bb15760045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b908154916801000000000000000083101561142057826114db9160016114f295018155610bb6565b9091905f1983549160031b92831b921b1916179055565b565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116103405760209260051b809284830137010190565b9160206115429381815201916114f4565b90565b9073ffffffffffffffffffffffffffffffffffffffff61158a611570845f52600560205260405f2090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b1661169a5773ffffffffffffffffffffffffffffffffffffffff8116156116595760035482146116815773ffffffffffffffffffffffffffffffffffffffff8316156116595761165692611636611648926115e485611465565b6115f6855f52600560205260405f2090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6115f6835f52600660205260405f2090565b5f52600760205260405f2090565b55565b7fd92e233d000000000000000000000000000000000000000000000000000000005f5260045ffd5b91506114f292506115f6905f52600560205260405f2090565b7fdf650a00000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040810190811067ffffffffffffffff82111761142057604052565b90601f601f19910116810190811067ffffffffffffffff82111761142057604052565b67ffffffffffffffff811161142057601f01601f191660200190565b92919261172982611701565b9161173760405193846116de565b829481845281830111610340578281602093845f960137010152565b9693909491959261176536828961171d565b602081519101205f54036118725773ffffffffffffffffffffffffffffffffffffffff61179a895f52600660205260405f2090565b54169573ffffffffffffffffffffffffffffffffffffffff87161561181957916118056116569896949261180a9896946117dc8c5f52600760205260405f2090565b5460405190602082019283526040820152604081526117fc6060826116de565b51902097612137565b6121fe565b915f52600860205260405f2090565b886003541461184a577f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fda261280000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fefb64cf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b9290936118b86020956118c5949897986060875260608701916114f4565b91848303868601526114f4565b9060408183039101528281520191905f5b8181106118e35750505090565b90919260208060019273ffffffffffffffffffffffffffffffffffffffff873561190c8161047d565b1681520194019291016118d6565b9067ffffffffffffffff83116114205761193483836113db565b905f5260205f205f5b83811061194a5750505050565b60019060208435940193818401550161193d565b90600182018092116113d657565b919082018092116113d657565b356115428161047d565b9b9a999d9c96939095926119ba610a4c888f6119ad909d9c9d9996995f52600960205260405f2090565b905f5260205260405f2090565b611c40578815611c18576119cf36828861171d565b602081519101206119e8885f52600860205260405f2090565b546003548914611c0f575b03611be757611a0395878e612557565b8486611a2e8c611a20878c6040519586948c60208701998a61189a565b03601f1981018352826116de565b519020809103611bbf57604051908152611aad91611a829181908a907f2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e90602090a36119ad895f52600960205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b611abf865f52600b60205260405f2090565b5415611bb1575b939291905f94611ae88284611ae38a5f52600d60205260405f2090565b61191a565b5f945b828610611b16575050505050506114f2929350611b10825f52600c60205260405f2090565b55612066565b909192939495611b34600191611b2d89898e611455565b359061196c565b96611b4081888d611455565b35611b79611b71611b598c5f52600e60205260405f2090565b611b64858a8c611455565b355f5260205260405f2090565b91825461196c565b9055611ba6611b91611b8c838787611455565b611979565b6115f6611b598c5f52600f60205260405f2090565b019493929190611aeb565b611bba86612634565b611ac6565b7f5cb045db000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9d8cbacd000000000000000000000000000000000000000000000000000000005f5260045ffd5b506001546119f3565b7f0f59b9ff000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9fbfc589000000000000000000000000000000000000000000000000000000005f5260045ffd5b805160021015610bb15760600190565b805160101015610bb1576102200190565b805115610bb15760200190565b805160011015610bb15760400190565b8051821015610bb15760209160051b010190565b5f1981146113d65760010190565b905f1982019182116113d657565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4082019182116113d657565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082019182116113d657565b60200390602082116113d657565b919082039182116113d657565b6004548015611d77575f19810190600454821015610bb1575f195f916004835260208320010155600455565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b6003548114611e975760045480915f5b838110611e75575b50828214611e4d57611df3611656926114db611ded611de3611dde5f98611cc8565b610b99565b90549060031b1c90565b91610b99565b611dfb611d4b565b611e38611e10825f52600560205260405f2090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b611648611e10825f52600660205260405f2090565b7f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b81611e82611de383610b99565b14611e8f57600101611db4565b91505f611dbc565b611e106114f2915f52600560205260405f2090565b73ffffffffffffffffffffffffffffffffffffffff1680156116595773ffffffffffffffffffffffffffffffffffffffff831615611659577fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025560035560ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615611f4957611f4690612353565b50565b7fd7e6bcf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b335f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1615611fa957565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f52336004525f60245260445ffd5b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff61202d3360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b5416156120375750565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f523360045260245260445ffd5b805f52600b60205260405f20604051808260208294549384815201905f5260205f20925f5b81811061211e5750506120a0925003826116de565b5f5b81518110156120e1576120d0610ef0610a4c6120c6865f52600960205260405f2090565b610a3f8587611ca6565b6120dc576001016120a2565b505050565b50506120f8611a82825f52600a60205260405f2090565b7f78df938181afcb28eaa7d099235bbf9877832d6faafe36d1ea70916f3ace33e05f80a2565b845483526001948501948694506020909301920161208b565b61214961214e9161215393369161171d565b6127b7565b612832565b805160031015610bb15760806115429101516128df565b67ffffffffffffffff81116114205760051b60200190565b92919261218e8261216a565b9361219c60405195866116de565b602085848152019260051b8201918183116103405780935b8385106121c2575050505050565b843567ffffffffffffffff811161034057820183601f82011215610340576020916121f3858385809535910161171d565b8152019401936121b4565b90916122786122736121499461227e96989997996040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b168252601481526122506034826116de565b519020936040519460208601526020855261226c6040866116de565b3691612182565b612921565b916129cb565b9182511561232b576122786122736122e5926122f39661226c6122b46122ae6122a96121499a612832565b611c68565b516128df565b966040516122cf81611a206020820194859190602083019252565b5190206040519687916020830160209181520190565b03601f1981018752866116de565b80511561230357611542906128df565b7f3477dcda000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f547706af000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff81165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff166124355773ffffffffffffffffffffffffffffffffffffffff165f8181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff61248e8360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541661255157805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526124e68260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b95929693909491945f52600560205273ffffffffffffffffffffffffffffffffffffffff60405f205416948515611e4d576115429761259591612137565b956040516020810191825260076040820152604081526125b66060826116de565b519020956121fe565b60048114611f46576004549067ffffffffffffffff8211611420576125e482826113db565b5f908152602081207f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b80545b84841061261e575050505050565b6001809192019384549281850155019290612610565b805f52600b60205261264860405f206125bf565b600354805f52600560205273ffffffffffffffffffffffffffffffffffffffff60405f205416612676575050565b6114f2915f52600b60205260405f206114b3565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff6126de8360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54161561255157805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526127378260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905573ffffffffffffffffffffffffffffffffffffffff339216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b604051906127ac826116c2565b5f6020838281520152565b6127bf61279f565b506020815191604051926127d2846116c2565b835201602082015290565b1561034057565b906127ee8261216a565b6127fb60405191826116de565b828152601f1961280b829461216a565b01905f5b82811061281b57505050565b60209061282661279f565b8282850101520161280f565b9061283c82612d01565b156103405761284a82612d20565b91612854836127e4565b9060208101805161286481612d81565b81018091116113d657945f905b80821061289357505061154292939461288b915190611d3e565b9051146127dd565b90956128d7816128a4600193612dec565b906040516128b36040826116de565b8281528160208201526128c68b8a611ca6565b526128d18a89611ca6565b5061196c565b960190612871565b80518015159081612915575b5015610340576128fa90612ea6565b90519060208110612909575090565b6020036101000a900490565b6021915011155f6128eb565b61292b81516127e4565b905f5b8151811015612969578061294d61294760019385611ca6565b516127b7565b6129578286611ca6565b526129628185611ca6565b500161292e565b505090565b6040519061297d6020836116de565b5f808352366020840137565b9061299382611701565b6129a060405191826116de565b828152601f196129b08294611701565b0190602036910137565b908151811015610bb1570160200190565b906129d590612f06565b5f915f6129e061279f565b50845115612cc857935f915b8151831015612c695782158080612c53575b610340571580612c37575b61034057612a20612a1a8484611ca6565b51612832565b958651600281145f14612b21575050612a49612a44612a3e88611c89565b51613154565b6131a2565b95612a5f612a5888888461320f565b809261196c565b965111612b035715612a965750612a769051611cc8565b11610340575111612a8d57612a3e61154291611c96565b5061154261296e565b919094612aa38651611cc8565b82146103405780612ac1610ef0612abb600194611c96565b51612d01565b15612ae457612ad2612ad891611c96565b51613194565b915b01919490946129ec565b612af0612afd91611c96565b5160208101519051902090565b91612ada565b505091509250612b14915051611cc8565b116103405761154261296e565b6011909791939794929414612b3a575b50600190612ada565b959380925094929094518314155f14612c195760ff612b94612b8e612b88612b6287876129ba565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b9461195e565b9316601081101561034057612bb2612bac8289611ca6565b5161317e565b15612bd45750505050612bc791925051611cc8565b036103405761154261296e565b86612bec610ef0612abb84600196989a97999b611ca6565b15612c0657612bfe91612ad291611ca6565b915b90612b31565b612c1391612af091611ca6565b91612c00565b505050612c269051611cc8565b0361034057612a3e61154291611c78565b50612c4b612c458484611ca6565b51613117565b861415612a09565b50612c61612af08585611ca6565b8214156129fe565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964204d50542070726f6f660000000000000000000000000000006044820152606490fd5b509050612cf992507f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4219150146127dd565b61154261296e565b80511561243557602060c0910151515f1a10612d1c57600190565b5f90565b805115612435575f9060208101908151612d3981612d81565b81018091116113d6579151905181018091116113d65791905b828110612d5f5750905090565b612d6881612dec565b81018091116113d657612d7b9091611cba565b90612d52565b515f1a6080811015612d9257505f90565b60b881108015612dd6575b15612da85750600190565b60c0811015612dc75761154290612dc29060b75b90611d3e565b61195e565b61154290612dc29060f7612dbc565b5060c08110158015612d9d575060f88110612d9d565b80515f1a906080821015612e01575050600190565b60b8821015612e175750612dc261154291611d03565b60c0821015612e585760010151602082900360b7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4a0190565b60f8821015612e6e5750612dc261154291611cd6565b60010151602082900360f7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0190565b906020820191612eb68351612d81565b9251908382018092116113d657519283039283116113d6579190565b15612ed957565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b90612f2f5f612f208451612f1b8115156127dd565b6113c0565b612f2a60016127dd565b611d3e565b90612f3982612989565b925f91825b612f48855f61196c565b84101561300857612fc3612b8e612f4892612f638760011690565b612fcb577f0f00000000000000000000000000000000000000000000000000000000000000612fad612fa4612b88612b62612f9e8c60011c90565b8b6129ba565b60041c600f1690565b60f81b165f1a612fbd828b6129ba565b5361195e565b939050612f3e565b7f0f00000000000000000000000000000000000000000000000000000000000000612fad613002612b88612b62612f9e8c60011c90565b60ff1690565b915092506114f29150835114612ed2565b6130398261302d8351612f1b8115156127dd565b612f2a818311156127dd565b9061304382612989565b9383925f5b613052828761196c565b85101561310557906130c56130bf6130529361306e8860011690565b6130ce577f0f000000000000000000000000000000000000000000000000000000000000006130af612fa4612b88612b626130a98d60011c90565b8c6129ba565b60f81b165f1a612fbd828c6129ba565b9561195e565b94909150613048565b7f0f000000000000000000000000000000000000000000000000000000000000006130af613002612b88612b626130a98d60011c90565b92505092506114f29150835114612ed2565b8051602081101561312f575060208101519051902090565b906020015120604051602081019182526020815261314e6040826116de565b51902090565b8051156103405761316761154291612ea6565b61317381939293612989565b9283602001906132c2565b60018151036124355760200151515f1a60801490565b61319d90612ea6565b902090565b9081511561034057600f6131be612fa4612b88612b6286611c89565b16806131d1575061154260025f93613019565b600181036131e6575061154260015f93613019565b600281036131fc57506115426002600193613019565b6003036103405761154260018093613019565b91905f5b8381018082116113d65782518110806132a9575b156132a1576132577fff0000000000000000000000000000000000000000000000000000000000000091846129ba565b51167fff0000000000000000000000000000000000000000000000000000000000000061328483866129ba565b5116900361329a5761329590611cba565b613213565b9250505090565b509250505090565b5083518210613227565b601f81116113d6576101000a90565b909180156120dc575b602081101561330557806132de57505050565b6132f26132ed6132f792611d30565b6132b3565b611cc8565b905182518216911916179052565b919080518252602081018091116113d65790602081018091116113d65791601f198101908111156132cb5761139356f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\xAAW_Q` a3\xE4_9_Q\x90_RT`\xFF\x81`@\x1C\x16`\x9BW`\x02`\x01`@\x1B\x03\x19`\x01`\x01`@\x1B\x03\x82\x16\x01`IW[`@Qa35\x90\x81a\0\xAF\x829\xF3[`\x01`\x01`@\x1B\x03\x19\x16`\x01`\x01`@\x1B\x03\x90\x81\x17_Q` a3\xE4_9_Q\x90_RU\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x90\xA1_\x80`:V[c\xF9.\xE8\xA9`\xE0\x1B_R`\x04_\xFD[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x01\xFF\xC9\xA7\x14a\x02\x9FW\x80c\x03DW\x1F\x14a\x02\x9AW\x80c\x13;\xF8\x9F\x14a\x02\x95W\x80c\x1B\xF4\x95\x1C\x14a\x02\x90W\x80c\"b8\x97\x14a\x02\x8BW\x80c#\xAF\xB0\xFF\x14a\x02\x86W\x80c$\x8A\x9C\xA3\x14a\x02\x81W\x80c(_$F\x14a\x02|W\x80c,\xD0x\xB8\x14a\x02wW\x80c//\xF1]\x14a\x02rW\x80c0\xC7\t\xB6\x14a\x02mW\x80c2q\xBAI\x14a\x02hW\x80c6+\x81T\x14a\x02cW\x80c6V\x8A\xBE\x14a\x02^W\x80cG\xDF\xF6\x9D\x14a\x02YW\x80cNm\xA2\xA4\x14a\x02TW\x80cU\xFC\xC5V\x14a\x02OW\x80cZc0\x80\x14a\x02\x18W\x80c[\x18\x17\xE8\x14a\x02JW\x80c]W\x9Aa\x14a\x02EW\x80ce\x0E\x13\x12\x14a\x02@W\x80ckM\x17\xAD\x14a\x02;W\x80cz\x7F4\xE8\x14a\x026W\x80c|n\xDB>\x14a\x021W\x80c|qP\x94\x14a\x02,W\x80c\x84!\x1C\xA9\x14a\x02'W\x80c\x8D\xD5\x0E\xEE\x14a\x02\"W\x80c\x91\xD1HT\x14a\x02\x1DW\x80c\x95\x81K\xF5\x14a\x02\x18W\x80c\xA2\x17\xFD\xDF\x14a\x02\x13W\x80c\xC3P\xA1\xB5\x14a\x02\x0EW\x80c\xCES|\x9F\x14a\x02\tW\x80c\xD2k\xCC\x80\x14a\x02\x04W\x80c\xD5Gt\x1F\x14a\x01\xFFW\x80c\xE1\x8BM\xAE\x14a\x01\xFAW\x80c\xE8\xC4l(\x14a\x01\xF5W\x80c\xEC\x82\x8A\x91\x14a\x01\xF0W\x80c\xEFQ\"!\x14a\x01\xEBW\x80c\xFDy\xD3\xE1\x14a\x01\xE6W\x80c\xFD\xD5A#\x14a\x01\xE1Wc\xFF\x87\xC1\x8C\x14a\x01\xDCW_\x80\xFD[a\x13.V[a\x12\xEEV[a\x12\xC4V[a\x12\xA7V[a\x12\"V[a\x12\x07V[a\x11\xECV[a\x11\x8CV[a\x11<V[a\x10\xFDV[a\x0E\x86V[a\x0ElV[a\n\xE1V[a\r\xEDV[a\r\xADV[a\rGV[a\x0C\xDFV[a\x0C{V[a\x0CQV[a\x0C6V[a\x0C\x12V[a\x0B\xCBV[a\x0B\x1EV[a\n\xA9V[a\t\xAFV[a\t\x85V[a\t\x17V[a\x08\xE4V[a\x07\xF1V[a\x07\xC2V[a\x07]V[a\x06\xD8V[a\x06\x1CV[a\x05\xCAV[a\x05\xAEV[a\x05\x91V[a\x05\nV[a\x04\x9BV[a\x03uV[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x80\x91\x03a\x03@W\x80\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x92\x14\x90\x81\x15a\x03\x16W[P`@Q\x90\x15\x15\x81R\xF3[\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91P\x14_a\x03\x0BV[_\x80\xFD[\x91\x81`\x1F\x84\x01\x12\x15a\x03@W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x03@WV[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x03\xA9\x906\x90`\x04\x01a\x03DV[\x91\x90a\x03\xB3a\x1FqV[\x81_R`\n` R`\xFF`@_ T\x16a\x04UW\x81_R`\x0B` Ra\x03\xDB`@_ a\x14%V[_[\x83\x81\x10a\x04%WP\x7F\xA0\xFE\xA1*]\xFD\xB3\xEB\xF0\xB7\xC4\x9A}\xDD_\xFD\xD3\xE5\xB2\xD7WO\xF1k\n\x102\xED\xC1\x9De\x8Ba\x04#\x93\x83\x92a\x04\x1B`@Q\x92\x83\x92\x83a\x151V[\x03\x90\xA2a fV[\0[`\x01\x90a\x04Oa\x04=\x85_R`\x0B` R`@_ \x90V[a\x04H\x83\x88\x87a\x14UV[5\x90a\x14\xB3V[\x01a\x03\xDDV[\x7F\xFD\x93\xC1_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x03a\x03@WV[4a\x03@W`\x80`\x03\x196\x01\x12a\x03@Wa\x04#`\x045`$5a\x04\xBE\x81a\x04}V[`D5\x90a\x04\xCB\x82a\x04}V[`d5\x92a\x04\xD7a\x1FqV[a\x15EV[\x91\x81`\x1F\x84\x01\x12\x15a\x03@W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x83\x81\x86\x01\x95\x01\x01\x11a\x03@WV[4a\x03@W`\xA0`\x03\x196\x01\x12a\x03@W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x05A\x906\x90`\x04\x01a\x04\xDCV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x05d\x906\x90`\x04\x01a\x03DV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03@Wa\x05\x89a\x04#\x976\x90`\x04\x01a\x03DV[\x96\x90\x95a\x17SV[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `\x03T`@Q\x90\x81R\xF3[4a\x03@W_`\x03\x196\x01\x12a\x03@W` _T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W` a\x06\x14`\x045_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\x0E` R`@_ \x90_R` Ra\x06s`@_ T`@Q\x91\x82\x91\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xF3[\x7F\xC5\xB1Eq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[` `@\x81\x83\x01\x92\x82\x81R\x84Q\x80\x94R\x01\x92\x01\x90_[\x81\x81\x10a\x06\xC2WPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x06\xB5V[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\r` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x07GWa\x06s\x85a\x07;\x81\x87\x03\x82a\x16\xDEV[`@Q\x91\x82\x91\x82a\x06\x9FV[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x07$V[4a\x03@W`@`\x03\x196\x01\x12a\x03@Wa\x04#`$5`\x045a\x07\x80\x82a\x04}V[a\x07\xBDa\x07\xB8\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a\x1F\xD9V[a$:V[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\n` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03@Wa\x01\0`\x03\x196\x01\x12a\x03@W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08)\x906\x90`\x04\x01a\x04\xDCV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08L\x906\x90`\x04\x01a\x03DV[`\x84\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08o\x906\x90`\x04\x01a\x03DV[`\xA4\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08\x92\x906\x90`\x04\x01a\x03DV[\x93\x90\x92`\xC45g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08\xB5\x906\x90`\x04\x01a\x03DV[\x97\x90\x96`\xE45\x9Bg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8D\x11a\x03@Wa\x08\xDCa\x04#\x9D6\x90`\x04\x01a\x03DV[\x9C\x90\x9Ba\x19\x83V[4a\x03@W_`\x03\x196\x01\x12a\x03@W` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x16`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5a\t7\x81a\x04}V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\t]Wa\x04#\x91a&\x8AV[\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x0C` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_\x81_R`\n` R`\xFF`@_ T\x16\x90\x82_R`\x0B` R`@_ \x92`@Q\x80\x85` \x82\x97T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a\n\x90WPPa\n\x10\x92P\x03\x85a\x16\xDEV[\x83Q_[\x85Q\x81\x10\x15a\ntWa\nSa\nLa\n5\x85_R`\t` R`@_ \x90V[a\n?\x84\x8Aa\x1C\xA6V[Q_R` R`@_ \x90V[T`\xFF\x16\x90V[a\n`W[`\x01\x01a\n\x14V[\x92a\nl`\x01\x91a\x1C\xBAV[\x93\x90Pa\nXV[P`@\x80Q\x85\x15\x15\x81R` \x81\x01\x92\x90\x92R\x81\x01\x83\x90R``\x90\xF3[\x84T\x83R`\x01\x94\x85\x01\x94\x89\x94P` \x90\x93\x01\x92\x01a\t\xFBV[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\x0E` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\t` R`@_ \x90_R` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\x0F` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\x04T\x81\x10\x15a\x0B\xB1W`\x04_R` _ \x01\x90_\x90V[a\x0BlV[\x80T\x82\x10\x15a\x0B\xB1W_R` _ \x01\x90_\x90V[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\x0B` R`@_ \x80T\x82\x10\x15a\x03@W` \x91a\x0C\x03\x91a\x0B\xB6V[\x90T\x90`\x03\x1B\x1C`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@Wa\x04#`\x045a\x0C1a\x1FqV[a\x1D\xA4V[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q`\x02\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x08` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x0B` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x0C\xC9Wa\x06s\x85a\x07;\x81\x87\x03\x82a\x16\xDEV[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x0C\xB2V[4a\x03@W` `\x03\x196\x01\x12a\x03@Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045a\r\x11\x81a\x04}V[a\r\x19a\x1FqV[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U_\x80\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x163\x03a\r\x85W_U`\x01U\0[\x7F$\xB2\xE7\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x05` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W` `\xFFa\x0E``$5`\x045a\x0E\x14\x82a\x04}V[_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0\x84R`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q_\x81R\xF3[4a\x03@W```\x03\x196\x01\x12a\x03@W`\x045a\x0E\xA3\x81a\x04}V[`$5\x90`D5a\x0E\xB3\x81a\x04}V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0F\x02`\xFF`@\x87\x90\x1C\x16\x15a\x0E\xF4V[\x15\x90V[\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16\x80\x15\x90\x81a\x10\xF5W[`\x01\x14\x90\x81a\x10\xEBW[\x15\x90\x81a\x10\xE2W[Pa\x10\xBAWa\x0F\x9F\x92\x84a\x0F\x96`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x10?Wa\x1E\xACV[a\x0F\xA5W\0[a\x10\x10\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x90\xA1\0[a\x10\xB5h\x01\0\0\0\0\0\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x1E\xACV[\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90P\x15_a\x0F\x1EV[0;\x15\x91Pa\x0F\x16V[\x85\x91Pa\x0F\x0CV[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\x0C` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045`\x04T\x81\x10\x15a\x03@W` \x90`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01T`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@Wa\x04#`$5`\x045a\x11\xAF\x82a\x04}V[a\x11\xE7a\x07\xB8\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a&\x8AV[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q`\x03\x81R\xF3[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q`\x07\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\x0F` R`@_ \x90_R` Ra\x06ss\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x91\x82\x91\x82\x91\x90\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01\x93\x16\x90RV[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `\x01T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x07` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x06` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\r` R`@_ \x80T\x82\x10\x15a\x03@W` \x91a\x0C\x03\x91a\x0B\xB6V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81`\x01\x1B\x91\x80\x83\x04`\x02\x14\x90\x15\x17\x15a\x13\xD6WV[a\x13\x93V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x14 W\x81T\x91\x81\x81U\x82\x82\x10a\x13\xFEWPPPV[_R` _ \x91\x82\x01\x91\x01[\x81\x81\x10a\x14\x15WPPV[_\x81U`\x01\x01a\x14\nV[a\x13fV[\x80T\x90_\x81U\x81a\x144WPPV[_R` _ \x90\x81\x01\x90[\x81\x81\x10a\x14JWPPV[_\x81U`\x01\x01a\x14?V[\x91\x90\x81\x10\x15a\x0B\xB1W`\x05\x1B\x01\x90V[`\x04Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x14 W`\x01\x81\x01`\x04U`\x04T\x81\x10\x15a\x0B\xB1W`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01UV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x14 W\x82a\x14\xDB\x91`\x01a\x14\xF2\x95\x01\x81Ua\x0B\xB6V[\x90\x91\x90_\x19\x83T\x91`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90UV[V[\x90\x91\x82\x81R\x7F\x07\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x92`\x05\x1B\x80\x92\x84\x83\x017\x01\x01\x90V[\x91` a\x15B\x93\x81\x81R\x01\x91a\x14\xF4V[\x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x15\x8Aa\x15p\x84_R`\x05` R`@_ \x90V[Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16a\x16\x9AWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15a\x16YW`\x03T\x82\x14a\x16\x81Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x16YWa\x16V\x92a\x166a\x16H\x92a\x15\xE4\x85a\x14eV[a\x15\xF6\x85_R`\x05` R`@_ \x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[a\x15\xF6\x83_R`\x06` R`@_ \x90V[_R`\x07` R`@_ \x90V[UV[\x7F\xD9.#=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91Pa\x14\xF2\x92Pa\x15\xF6\x90_R`\x05` R`@_ \x90V[\x7F\xDFe\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x14 W`@RV[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x14 W`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x14 W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x92\x91\x92a\x17)\x82a\x17\x01V[\x91a\x177`@Q\x93\x84a\x16\xDEV[\x82\x94\x81\x84R\x81\x83\x01\x11a\x03@W\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x96\x93\x90\x94\x91\x95\x92a\x17e6\x82\x89a\x17\x1DV[` \x81Q\x91\x01 _T\x03a\x18rWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x17\x9A\x89_R`\x06` R`@_ \x90V[T\x16\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15a\x18\x19W\x91a\x18\x05a\x16V\x98\x96\x94\x92a\x18\n\x98\x96\x94a\x17\xDC\x8C_R`\x07` R`@_ \x90V[T`@Q\x90` \x82\x01\x92\x83R`@\x82\x01R`@\x81Ra\x17\xFC``\x82a\x16\xDEV[Q\x90 \x97a!7V[a!\xFEV[\x91_R`\x08` R`@_ \x90V[\x88`\x03T\x14a\x18JW\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xDA&\x12\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xEF\xB6L\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x92\x90\x93a\x18\xB8` \x95a\x18\xC5\x94\x98\x97\x98``\x87R``\x87\x01\x91a\x14\xF4V[\x91\x84\x83\x03\x86\x86\x01Ra\x14\xF4V[\x90`@\x81\x83\x03\x91\x01R\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x18\xE3WPPP\x90V[\x90\x91\x92` \x80`\x01\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x875a\x19\x0C\x81a\x04}V[\x16\x81R\x01\x94\x01\x92\x91\x01a\x18\xD6V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x14 Wa\x194\x83\x83a\x13\xDBV[\x90_R` _ _[\x83\x81\x10a\x19JWPPPPV[`\x01\x90` \x845\x94\x01\x93\x81\x84\x01U\x01a\x19=V[\x90`\x01\x82\x01\x80\x92\x11a\x13\xD6WV[\x91\x90\x82\x01\x80\x92\x11a\x13\xD6WV[5a\x15B\x81a\x04}V[\x9B\x9A\x99\x9D\x9C\x96\x93\x90\x95\x92a\x19\xBAa\nL\x88\x8Fa\x19\xAD\x90\x9D\x9C\x9D\x99\x96\x99_R`\t` R`@_ \x90V[\x90_R` R`@_ \x90V[a\x1C@W\x88\x15a\x1C\x18Wa\x19\xCF6\x82\x88a\x17\x1DV[` \x81Q\x91\x01 a\x19\xE8\x88_R`\x08` R`@_ \x90V[T`\x03T\x89\x14a\x1C\x0FW[\x03a\x1B\xE7Wa\x1A\x03\x95\x87\x8Ea%WV[\x84\x86a\x1A.\x8Ca\x1A \x87\x8C`@Q\x95\x86\x94\x8C` \x87\x01\x99\x8Aa\x18\x9AV[\x03`\x1F\x19\x81\x01\x83R\x82a\x16\xDEV[Q\x90 \x80\x91\x03a\x1B\xBFW`@Q\x90\x81Ra\x1A\xAD\x91a\x1A\x82\x91\x81\x90\x8A\x90\x7F,?D5\x99\xC6&\x8A\xCE\xD4s\xE7f\x0B@tn\xA3\x94\xD5\x19\x17\x9E\xA3\xF6\x0F8)t\xA2\xE7\x8E\x90` \x90\xA3a\x19\xAD\x89_R`\t` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90UV[a\x1A\xBF\x86_R`\x0B` R`@_ \x90V[T\x15a\x1B\xB1W[\x93\x92\x91\x90_\x94a\x1A\xE8\x82\x84a\x1A\xE3\x8A_R`\r` R`@_ \x90V[a\x19\x1AV[_\x94[\x82\x86\x10a\x1B\x16WPPPPPPa\x14\xF2\x92\x93Pa\x1B\x10\x82_R`\x0C` R`@_ \x90V[Ua fV[\x90\x91\x92\x93\x94\x95a\x1B4`\x01\x91a\x1B-\x89\x89\x8Ea\x14UV[5\x90a\x19lV[\x96a\x1B@\x81\x88\x8Da\x14UV[5a\x1Bya\x1Bqa\x1BY\x8C_R`\x0E` R`@_ \x90V[a\x1Bd\x85\x8A\x8Ca\x14UV[5_R` R`@_ \x90V[\x91\x82Ta\x19lV[\x90Ua\x1B\xA6a\x1B\x91a\x1B\x8C\x83\x87\x87a\x14UV[a\x19yV[a\x15\xF6a\x1BY\x8C_R`\x0F` R`@_ \x90V[\x01\x94\x93\x92\x91\x90a\x1A\xEBV[a\x1B\xBA\x86a&4V[a\x1A\xC6V[\x7F\\\xB0E\xDB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9D\x8C\xBA\xCD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P`\x01Ta\x19\xF3V[\x7F\x0FY\xB9\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9F\xBF\xC5\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x80Q`\x02\x10\x15a\x0B\xB1W``\x01\x90V[\x80Q`\x10\x10\x15a\x0B\xB1Wa\x02 \x01\x90V[\x80Q\x15a\x0B\xB1W` \x01\x90V[\x80Q`\x01\x10\x15a\x0B\xB1W`@\x01\x90V[\x80Q\x82\x10\x15a\x0B\xB1W` \x91`\x05\x1B\x01\x01\x90V[_\x19\x81\x14a\x13\xD6W`\x01\x01\x90V[\x90_\x19\x82\x01\x91\x82\x11a\x13\xD6WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF@\x82\x01\x91\x82\x11a\x13\xD6WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x91\x82\x11a\x13\xD6WV[` \x03\x90` \x82\x11a\x13\xD6WV[\x91\x90\x82\x03\x91\x82\x11a\x13\xD6WV[`\x04T\x80\x15a\x1DwW_\x19\x81\x01\x90`\x04T\x82\x10\x15a\x0B\xB1W_\x19_\x91`\x04\x83R` \x83 \x01\x01U`\x04UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[`\x03T\x81\x14a\x1E\x97W`\x04T\x80\x91_[\x83\x81\x10a\x1EuW[P\x82\x82\x14a\x1EMWa\x1D\xF3a\x16V\x92a\x14\xDBa\x1D\xEDa\x1D\xE3a\x1D\xDE_\x98a\x1C\xC8V[a\x0B\x99V[\x90T\x90`\x03\x1B\x1C\x90V[\x91a\x0B\x99V[a\x1D\xFBa\x1DKV[a\x1E8a\x1E\x10\x82_R`\x05` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81T\x16\x90UV[a\x16Ha\x1E\x10\x82_R`\x06` R`@_ \x90V[\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x81a\x1E\x82a\x1D\xE3\x83a\x0B\x99V[\x14a\x1E\x8FW`\x01\x01a\x1D\xB4V[\x91P_a\x1D\xBCV[a\x1E\x10a\x14\xF2\x91_R`\x05` R`@_ \x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x80\x15a\x16YWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x16YW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U`\x03U`\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T`@\x1C\x16\x15a\x1FIWa\x1FF\x90a#SV[PV[\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[3_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16\x15a\x1F\xA9WV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R_`$R`D_\xFD[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa -3`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a 7WPV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R`$R`D_\xFD[\x80_R`\x0B` R`@_ `@Q\x80\x82` \x82\x94T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a!\x1EWPPa \xA0\x92P\x03\x82a\x16\xDEV[_[\x81Q\x81\x10\x15a \xE1Wa \xD0a\x0E\xF0a\nLa \xC6\x86_R`\t` R`@_ \x90V[a\n?\x85\x87a\x1C\xA6V[a \xDCW`\x01\x01a \xA2V[PPPV[PPa \xF8a\x1A\x82\x82_R`\n` R`@_ \x90V[\x7Fx\xDF\x93\x81\x81\xAF\xCB(\xEA\xA7\xD0\x99#[\xBF\x98w\x83-o\xAA\xFE6\xD1\xEAp\x91o:\xCE3\xE0_\x80\xA2V[\x84T\x83R`\x01\x94\x85\x01\x94\x86\x94P` \x90\x93\x01\x92\x01a \x8BV[a!Ia!N\x91a!S\x936\x91a\x17\x1DV[a'\xB7V[a(2V[\x80Q`\x03\x10\x15a\x0B\xB1W`\x80a\x15B\x91\x01Qa(\xDFV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x14 W`\x05\x1B` \x01\x90V[\x92\x91\x92a!\x8E\x82a!jV[\x93a!\x9C`@Q\x95\x86a\x16\xDEV[` \x85\x84\x81R\x01\x92`\x05\x1B\x82\x01\x91\x81\x83\x11a\x03@W\x80\x93[\x83\x85\x10a!\xC2WPPPPPV[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@W\x82\x01\x83`\x1F\x82\x01\x12\x15a\x03@W` \x91a!\xF3\x85\x83\x85\x80\x955\x91\x01a\x17\x1DV[\x81R\x01\x94\x01\x93a!\xB4V[\x90\x91a\"xa\"sa!I\x94a\"~\x96\x98\x99\x97\x99`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01\x92``\x1B\x16\x82R`\x14\x81Ra\"P`4\x82a\x16\xDEV[Q\x90 \x93`@Q\x94` \x86\x01R` \x85Ra\"l`@\x86a\x16\xDEV[6\x91a!\x82V[a)!V[\x91a)\xCBV[\x91\x82Q\x15a#+Wa\"xa\"sa\"\xE5\x92a\"\xF3\x96a\"la\"\xB4a\"\xAEa\"\xA9a!I\x9Aa(2V[a\x1ChV[Qa(\xDFV[\x96`@Qa\"\xCF\x81a\x1A ` \x82\x01\x94\x85\x91\x90` \x83\x01\x92RV[Q\x90 `@Q\x96\x87\x91` \x83\x01` \x91\x81R\x01\x90V[\x03`\x1F\x19\x81\x01\x87R\x86a\x16\xDEV[\x80Q\x15a#\x03Wa\x15B\x90a(\xDFV[\x7F4w\xDC\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7FTw\x06\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16a$5Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x81\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x81 \x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16`\x01\x17\x90U3\x91\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x81\x80\xA4`\x01\x90V[P_\x90V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa$\x8E\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16a%QW\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra$\xE6\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r_\x80\xA4`\x01\x90V[PP_\x90V[\x95\x92\x96\x93\x90\x94\x91\x94_R`\x05` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16\x94\x85\x15a\x1EMWa\x15B\x97a%\x95\x91a!7V[\x95`@Q` \x81\x01\x91\x82R`\x07`@\x82\x01R`@\x81Ra%\xB6``\x82a\x16\xDEV[Q\x90 \x95a!\xFEV[`\x04\x81\x14a\x1FFW`\x04T\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x14 Wa%\xE4\x82\x82a\x13\xDBV[_\x90\x81R` \x81 \x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x80T[\x84\x84\x10a&\x1EWPPPPPV[`\x01\x80\x91\x92\x01\x93\x84T\x92\x81\x85\x01U\x01\x92\x90a&\x10V[\x80_R`\x0B` Ra&H`@_ a%\xBFV[`\x03T\x80_R`\x05` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16a&vWPPV[a\x14\xF2\x91_R`\x0B` R`@_ a\x14\xB3V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa&\xDE\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a%QW\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra'7\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81T\x16\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B_\x80\xA4`\x01\x90V[`@Q\x90a'\xAC\x82a\x16\xC2V[_` \x83\x82\x81R\x01RV[a'\xBFa'\x9FV[P` \x81Q\x91`@Q\x92a'\xD2\x84a\x16\xC2V[\x83R\x01` \x82\x01R\x90V[\x15a\x03@WV[\x90a'\xEE\x82a!jV[a'\xFB`@Q\x91\x82a\x16\xDEV[\x82\x81R`\x1F\x19a(\x0B\x82\x94a!jV[\x01\x90_[\x82\x81\x10a(\x1BWPPPV[` \x90a(&a'\x9FV[\x82\x82\x85\x01\x01R\x01a(\x0FV[\x90a(<\x82a-\x01V[\x15a\x03@Wa(J\x82a- V[\x91a(T\x83a'\xE4V[\x90` \x81\x01\x80Qa(d\x81a-\x81V[\x81\x01\x80\x91\x11a\x13\xD6W\x94_\x90[\x80\x82\x10a(\x93WPPa\x15B\x92\x93\x94a(\x8B\x91Q\x90a\x1D>V[\x90Q\x14a'\xDDV[\x90\x95a(\xD7\x81a(\xA4`\x01\x93a-\xECV[\x90`@Qa(\xB3`@\x82a\x16\xDEV[\x82\x81R\x81` \x82\x01Ra(\xC6\x8B\x8Aa\x1C\xA6V[Ra(\xD1\x8A\x89a\x1C\xA6V[Pa\x19lV[\x96\x01\x90a(qV[\x80Q\x80\x15\x15\x90\x81a)\x15W[P\x15a\x03@Wa(\xFA\x90a.\xA6V[\x90Q\x90` \x81\x10a)\tWP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a(\xEBV[a)+\x81Qa'\xE4V[\x90_[\x81Q\x81\x10\x15a)iW\x80a)Ma)G`\x01\x93\x85a\x1C\xA6V[Qa'\xB7V[a)W\x82\x86a\x1C\xA6V[Ra)b\x81\x85a\x1C\xA6V[P\x01a).V[PP\x90V[`@Q\x90a)}` \x83a\x16\xDEV[_\x80\x83R6` \x84\x017V[\x90a)\x93\x82a\x17\x01V[a)\xA0`@Q\x91\x82a\x16\xDEV[\x82\x81R`\x1F\x19a)\xB0\x82\x94a\x17\x01V[\x01\x90` 6\x91\x017V[\x90\x81Q\x81\x10\x15a\x0B\xB1W\x01` \x01\x90V[\x90a)\xD5\x90a/\x06V[_\x91_a)\xE0a'\x9FV[P\x84Q\x15a,\xC8W\x93_\x91[\x81Q\x83\x10\x15a,iW\x82\x15\x80\x80a,SW[a\x03@W\x15\x80a,7W[a\x03@Wa* a*\x1A\x84\x84a\x1C\xA6V[Qa(2V[\x95\x86Q`\x02\x81\x14_\x14a+!WPPa*Ia*Da*>\x88a\x1C\x89V[Qa1TV[a1\xA2V[\x95a*_a*X\x88\x88\x84a2\x0FV[\x80\x92a\x19lV[\x96Q\x11a+\x03W\x15a*\x96WPa*v\x90Qa\x1C\xC8V[\x11a\x03@WQ\x11a*\x8DWa*>a\x15B\x91a\x1C\x96V[Pa\x15Ba)nV[\x91\x90\x94a*\xA3\x86Qa\x1C\xC8V[\x82\x14a\x03@W\x80a*\xC1a\x0E\xF0a*\xBB`\x01\x94a\x1C\x96V[Qa-\x01V[\x15a*\xE4Wa*\xD2a*\xD8\x91a\x1C\x96V[Qa1\x94V[\x91[\x01\x91\x94\x90\x94a)\xECV[a*\xF0a*\xFD\x91a\x1C\x96V[Q` \x81\x01Q\x90Q\x90 \x90V[\x91a*\xDAV[PP\x91P\x92Pa+\x14\x91PQa\x1C\xC8V[\x11a\x03@Wa\x15Ba)nV[`\x11\x90\x97\x91\x93\x97\x94\x92\x94\x14a+:W[P`\x01\x90a*\xDAV[\x95\x93\x80\x92P\x94\x92\x90\x94Q\x83\x14\x15_\x14a,\x19W`\xFFa+\x94a+\x8Ea+\x88a+b\x87\x87a)\xBAV[Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90V[`\xF8\x1C\x90V[\x94a\x19^V[\x93\x16`\x10\x81\x10\x15a\x03@Wa+\xB2a+\xAC\x82\x89a\x1C\xA6V[Qa1~V[\x15a+\xD4WPPPPa+\xC7\x91\x92PQa\x1C\xC8V[\x03a\x03@Wa\x15Ba)nV[\x86a+\xECa\x0E\xF0a*\xBB\x84`\x01\x96\x98\x9A\x97\x99\x9Ba\x1C\xA6V[\x15a,\x06Wa+\xFE\x91a*\xD2\x91a\x1C\xA6V[\x91[\x90a+1V[a,\x13\x91a*\xF0\x91a\x1C\xA6V[\x91a,\0V[PPPa,&\x90Qa\x1C\xC8V[\x03a\x03@Wa*>a\x15B\x91a\x1CxV[Pa,Ka,E\x84\x84a\x1C\xA6V[Qa1\x17V[\x86\x14\x15a*\tV[Pa,aa*\xF0\x85\x85a\x1C\xA6V[\x82\x14\x15a)\xFEV[`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FInvalid MPT proof\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[P\x90Pa,\xF9\x92P\x7FV\xE8\x1F\x17\x1B\xCCU\xA6\xFF\x83E\xE6\x92\xC0\xF8n[H\xE0\x1B\x99l\xAD\xC0\x01b/\xB5\xE3c\xB4!\x91P\x14a'\xDDV[a\x15Ba)nV[\x80Q\x15a$5W` `\xC0\x91\x01QQ_\x1A\x10a-\x1CW`\x01\x90V[_\x90V[\x80Q\x15a$5W_\x90` \x81\x01\x90\x81Qa-9\x81a-\x81V[\x81\x01\x80\x91\x11a\x13\xD6W\x91Q\x90Q\x81\x01\x80\x91\x11a\x13\xD6W\x91\x90[\x82\x81\x10a-_WP\x90P\x90V[a-h\x81a-\xECV[\x81\x01\x80\x91\x11a\x13\xD6Wa-{\x90\x91a\x1C\xBAV[\x90a-RV[Q_\x1A`\x80\x81\x10\x15a-\x92WP_\x90V[`\xB8\x81\x10\x80\x15a-\xD6W[\x15a-\xA8WP`\x01\x90V[`\xC0\x81\x10\x15a-\xC7Wa\x15B\x90a-\xC2\x90`\xB7[\x90a\x1D>V[a\x19^V[a\x15B\x90a-\xC2\x90`\xF7a-\xBCV[P`\xC0\x81\x10\x15\x80\x15a-\x9DWP`\xF8\x81\x10a-\x9DV[\x80Q_\x1A\x90`\x80\x82\x10\x15a.\x01WPP`\x01\x90V[`\xB8\x82\x10\x15a.\x17WPa-\xC2a\x15B\x91a\x1D\x03V[`\xC0\x82\x10\x15a.XW`\x01\x01Q` \x82\x90\x03`\xB7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFJ\x01\x90V[`\xF8\x82\x10\x15a.nWPa-\xC2a\x15B\x91a\x1C\xD6V[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\n\x01\x90V[\x90` \x82\x01\x91a.\xB6\x83Qa-\x81V[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x13\xD6WQ\x92\x83\x03\x92\x83\x11a\x13\xD6W\x91\x90V[\x15a.\xD9WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD[\x90a//_a/ \x84Qa/\x1B\x81\x15\x15a'\xDDV[a\x13\xC0V[a/*`\x01a'\xDDV[a\x1D>V[\x90a/9\x82a)\x89V[\x92_\x91\x82[a/H\x85_a\x19lV[\x84\x10\x15a0\x08Wa/\xC3a+\x8Ea/H\x92a/c\x87`\x01\x16\x90V[a/\xCBW\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a/\xADa/\xA4a+\x88a+ba/\x9E\x8C`\x01\x1C\x90V[\x8Ba)\xBAV[`\x04\x1C`\x0F\x16\x90V[`\xF8\x1B\x16_\x1Aa/\xBD\x82\x8Ba)\xBAV[Sa\x19^V[\x93\x90Pa/>V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a/\xADa0\x02a+\x88a+ba/\x9E\x8C`\x01\x1C\x90V[`\xFF\x16\x90V[\x91P\x92Pa\x14\xF2\x91P\x83Q\x14a.\xD2V[a09\x82a0-\x83Qa/\x1B\x81\x15\x15a'\xDDV[a/*\x81\x83\x11\x15a'\xDDV[\x90a0C\x82a)\x89V[\x93\x83\x92_[a0R\x82\x87a\x19lV[\x85\x10\x15a1\x05W\x90a0\xC5a0\xBFa0R\x93a0n\x88`\x01\x16\x90V[a0\xCEW\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a0\xAFa/\xA4a+\x88a+ba0\xA9\x8D`\x01\x1C\x90V[\x8Ca)\xBAV[`\xF8\x1B\x16_\x1Aa/\xBD\x82\x8Ca)\xBAV[\x95a\x19^V[\x94\x90\x91Pa0HV[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a0\xAFa0\x02a+\x88a+ba0\xA9\x8D`\x01\x1C\x90V[\x92PP\x92Pa\x14\xF2\x91P\x83Q\x14a.\xD2V[\x80Q` \x81\x10\x15a1/WP` \x81\x01Q\x90Q\x90 \x90V[\x90` \x01Q `@Q` \x81\x01\x91\x82R` \x81Ra1N`@\x82a\x16\xDEV[Q\x90 \x90V[\x80Q\x15a\x03@Wa1ga\x15B\x91a.\xA6V[a1s\x81\x93\x92\x93a)\x89V[\x92\x83` \x01\x90a2\xC2V[`\x01\x81Q\x03a$5W` \x01QQ_\x1A`\x80\x14\x90V[a1\x9D\x90a.\xA6V[\x90 \x90V[\x90\x81Q\x15a\x03@W`\x0Fa1\xBEa/\xA4a+\x88a+b\x86a\x1C\x89V[\x16\x80a1\xD1WPa\x15B`\x02_\x93a0\x19V[`\x01\x81\x03a1\xE6WPa\x15B`\x01_\x93a0\x19V[`\x02\x81\x03a1\xFCWPa\x15B`\x02`\x01\x93a0\x19V[`\x03\x03a\x03@Wa\x15B`\x01\x80\x93a0\x19V[\x91\x90_[\x83\x81\x01\x80\x82\x11a\x13\xD6W\x82Q\x81\x10\x80a2\xA9W[\x15a2\xA1Wa2W\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x84a)\xBAV[Q\x16\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a2\x84\x83\x86a)\xBAV[Q\x16\x90\x03a2\x9AWa2\x95\x90a\x1C\xBAV[a2\x13V[\x92PPP\x90V[P\x92PPP\x90V[P\x83Q\x82\x10a2'V[`\x1F\x81\x11a\x13\xD6Wa\x01\0\n\x90V[\x90\x91\x80\x15a \xDCW[` \x81\x10\x15a3\x05W\x80a2\xDEWPPPV[a2\xF2a2\xEDa2\xF7\x92a\x1D0V[a2\xB3V[a\x1C\xC8V[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[\x91\x90\x80Q\x82R` \x81\x01\x80\x91\x11a\x13\xD6W\x90` \x81\x01\x80\x91\x11a\x13\xD6W\x91`\x1F\x19\x81\x01\x90\x81\x11\x15a2\xCBWa\x13\x93V\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a71461029f5780630344571f1461029a578063133bf89f146102955780631bf4951c14610290578063226238971461028b57806323afb0ff14610286578063248a9ca314610281578063285f24461461027c5780632cd078b8146102775780632f2ff15d1461027257806330c709b61461026d5780633271ba4914610268578063362b81541461026357806336568abe1461025e57806347dff69d146102595780634e6da2a41461025457806355fcc5561461024f5780635a633080146102185780635b1817e81461024a5780635d579a6114610245578063650e1312146102405780636b4d17ad1461023b5780637a7f34e8146102365780637c6edb3e146102315780637c7150941461022c57806384211ca9146102275780638dd50eee1461022257806391d148541461021d57806395814bf514610218578063a217fddf14610213578063c350a1b51461020e578063ce537c9f14610209578063d26bcc8014610204578063d547741f146101ff578063e18b4dae146101fa578063e8c46c28146101f5578063ec828a91146101f0578063ef512221146101eb578063fd79d3e1146101e6578063fdd54123146101e15763ff87c18c146101dc575f80fd5b61132e565b6112ee565b6112c4565b6112a7565b611222565b611207565b6111ec565b61118c565b61113c565b6110fd565b610e86565b610e6c565b610ae1565b610ded565b610dad565b610d47565b610cdf565b610c7b565b610c51565b610c36565b610c12565b610bcb565b610b1e565b610aa9565b6109af565b610985565b610917565b6108e4565b6107f1565b6107c2565b61075d565b6106d8565b61061c565b6105ca565b6105ae565b610591565b61050a565b61049b565b610375565b34610340576020600319360112610340576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361034057807f7965db0b0000000000000000000000000000000000000000000000000000000060209214908115610316575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150145f61030b565b5f80fd5b9181601f840112156103405782359167ffffffffffffffff8311610340576020808501948460051b01011161034057565b346103405760406003193601126103405760043560243567ffffffffffffffff8111610340576103a9903690600401610344565b91906103b3611f71565b815f52600a60205260ff60405f20541661045557815f52600b6020526103db60405f20611425565b5f5b83811061042557507fa0fea12a5dfdb3ebf0b7c49a7ddd5ffdd3e5b2d7574ff16b0a1032edc19d658b61042393839261041b60405192839283611531565b0390a2612066565b005b60019061044f61043d855f52600b60205260405f2090565b610448838887611455565b35906114b3565b016103dd565b7ffd93c15f000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff81160361034057565b34610340576080600319360112610340576104236004356024356104be8161047d565b604435906104cb8261047d565b606435926104d7611f71565b611545565b9181601f840112156103405782359167ffffffffffffffff8311610340576020838186019501011161034057565b346103405760a06003193601126103405760043560243560443567ffffffffffffffff8111610340576105419036906004016104dc565b60649391933567ffffffffffffffff811161034057610564903690600401610344565b916084359567ffffffffffffffff871161034057610589610423973690600401610344565b969095611753565b34610340575f600319360112610340576020600354604051908152f35b34610340575f6003193601126103405760205f54604051908152f35b346103405760206003193601126103405760206106146004355f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b604051908152f35b346103405760406003193601126103405760043560243590805f52600a60205260ff60405f20541615610677575f52600e60205260405f20905f5260205261067360405f2054604051918291829190602083019252565b0390f35b7fc5b14571000000000000000000000000000000000000000000000000000000005f5260045ffd5b60206040818301928281528451809452019201905f5b8181106106c25750505090565b82518452602093840193909201916001016106b5565b3461034057602060031936011261034057600435805f52600a60205260ff60405f20541615610677575f52600d60205260405f206040519081602082549182815201915f5260205f20905f5b818110610747576106738561073b818703826116de565b6040519182918261069f565b8254845260209093019260019283019201610724565b34610340576040600319360112610340576104236024356004356107808261047d565b6107bd6107b8825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b611fd9565b61243a565b34610340576020600319360112610340576004355f52600a602052602060ff60405f2054166040519015158152f35b34610340576101006003193601126103405760043560243560443567ffffffffffffffff8111610340576108299036906004016104dc565b60649391933567ffffffffffffffff81116103405761084c903690600401610344565b60849291923567ffffffffffffffff81116103405761086f903690600401610344565b60a49291923567ffffffffffffffff811161034057610892903690600401610344565b93909260c43567ffffffffffffffff8111610340576108b5903690600401610344565b97909660e4359b67ffffffffffffffff8d11610340576108dc6104239d3690600401610344565b9c909b611983565b34610340575f60031936011261034057602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b34610340576040600319360112610340576004356024356109378161047d565b3373ffffffffffffffffffffffffffffffffffffffff82160361095d576104239161268a565b7f6697b232000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610340576020600319360112610340576004355f52600c602052602060405f2054604051908152f35b34610340576020600319360112610340576004355f815f52600a60205260ff60405f20541690825f52600b60205260405f2092604051808560208297549384815201905f5260205f20925f5b818110610a90575050610a10925003856116de565b83515f5b8551811015610a7457610a53610a4c610a35855f52600960205260405f2090565b610a3f848a611ca6565b515f5260205260405f2090565b5460ff1690565b610a60575b600101610a14565b92610a6c600191611cba565b939050610a58565b5060408051851515815260208101929092528101839052606090f35b84548352600194850194899450602090930192016109fb565b3461034057604060031936011261034057600435602435905f52600e60205260405f20905f52602052602060405f2054604051908152f35b3461034057604060031936011261034057600435602435905f52600960205260405f20905f52602052602060ff60405f2054166040519015158152f35b3461034057604060031936011261034057600435602435905f52600f60205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600454811015610bb15760045f5260205f2001905f90565b610b6c565b8054821015610bb1575f5260205f2001905f90565b3461034057604060031936011261034057600435602435905f52600b60205260405f20805482101561034057602091610c0391610bb6565b90549060031b1c604051908152f35b3461034057602060031936011261034057610423600435610c31611f71565b611da4565b34610340575f60031936011261034057602060405160028152f35b34610340576020600319360112610340576004355f526008602052602060405f2054604051908152f35b34610340576020600319360112610340576004355f52600b60205260405f206040519081602082549182815201915f5260205f20905f5b818110610cc9576106738561073b818703826116de565b8254845260209093019260019283019201610cb2565b346103405760206003193601126103405773ffffffffffffffffffffffffffffffffffffffff600435610d118161047d565b610d19611f71565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002555f80f35b34610340576040600319360112610340576004356024359073ffffffffffffffffffffffffffffffffffffffff600254163303610d85575f55600155005b7f24b2e7fd000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610340576020600319360112610340576004355f526005602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461034057604060031936011261034057602060ff610e60602435600435610e148261047d565b5f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800845260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54166040519015158152f35b34610340575f6003193601126103405760206040515f8152f35b3461034057606060031936011261034057600435610ea38161047d565b60243590604435610eb38161047d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549267ffffffffffffffff610f0260ff604087901c1615610ef4565b1590565b9567ffffffffffffffff1690565b16801590816110f5575b60011490816110eb575b1590816110e2575b506110ba57610f9f9284610f9660017fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b61103f57611eac565b610fa557005b6110107fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b6110b5680100000000000000007fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b611eac565b7ff92ee8a9000000000000000000000000000000000000000000000000000000005f5260045ffd5b9050155f610f1e565b303b159150610f16565b859150610f0c565b3461034057602060031936011261034057600435805f52600a60205260ff60405f20541615610677575f52600c602052602060405f2054604051908152f35b34610340576020600319360112610340576004356004548110156103405760209060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0154604051908152f35b34610340576040600319360112610340576104236024356004356111af8261047d565b6111e76107b8825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b61268a565b34610340575f60031936011261034057602060405160038152f35b34610340575f60031936011261034057602060405160078152f35b346103405760406003193601126103405760043560243590805f52600a60205260ff60405f20541615610677575f52600f60205260405f20905f5260205261067373ffffffffffffffffffffffffffffffffffffffff60405f2054166040519182918291909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b34610340575f600319360112610340576020600154604051908152f35b34610340576020600319360112610340576004355f526007602052602060405f2054604051908152f35b34610340576020600319360112610340576004355f526006602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b3461034057604060031936011261034057600435602435905f52600d60205260405f20805482101561034057602091610c0391610bb6565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b908160011b91808304600214901517156113d657565b611393565b90680100000000000000008111611420578154918181558282106113fe57505050565b5f5260205f2091820191015b818110611415575050565b5f815560010161140a565b611366565b8054905f815581611434575050565b5f5260205f20908101905b81811061144a575050565b5f815560010161143f565b9190811015610bb15760051b0190565b600454680100000000000000008110156114205760018101600455600454811015610bb15760045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b908154916801000000000000000083101561142057826114db9160016114f295018155610bb6565b9091905f1983549160031b92831b921b1916179055565b565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116103405760209260051b809284830137010190565b9160206115429381815201916114f4565b90565b9073ffffffffffffffffffffffffffffffffffffffff61158a611570845f52600560205260405f2090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b1661169a5773ffffffffffffffffffffffffffffffffffffffff8116156116595760035482146116815773ffffffffffffffffffffffffffffffffffffffff8316156116595761165692611636611648926115e485611465565b6115f6855f52600560205260405f2090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6115f6835f52600660205260405f2090565b5f52600760205260405f2090565b55565b7fd92e233d000000000000000000000000000000000000000000000000000000005f5260045ffd5b91506114f292506115f6905f52600560205260405f2090565b7fdf650a00000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040810190811067ffffffffffffffff82111761142057604052565b90601f601f19910116810190811067ffffffffffffffff82111761142057604052565b67ffffffffffffffff811161142057601f01601f191660200190565b92919261172982611701565b9161173760405193846116de565b829481845281830111610340578281602093845f960137010152565b9693909491959261176536828961171d565b602081519101205f54036118725773ffffffffffffffffffffffffffffffffffffffff61179a895f52600660205260405f2090565b54169573ffffffffffffffffffffffffffffffffffffffff87161561181957916118056116569896949261180a9896946117dc8c5f52600760205260405f2090565b5460405190602082019283526040820152604081526117fc6060826116de565b51902097612137565b6121fe565b915f52600860205260405f2090565b886003541461184a577f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fda261280000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fefb64cf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b9290936118b86020956118c5949897986060875260608701916114f4565b91848303868601526114f4565b9060408183039101528281520191905f5b8181106118e35750505090565b90919260208060019273ffffffffffffffffffffffffffffffffffffffff873561190c8161047d565b1681520194019291016118d6565b9067ffffffffffffffff83116114205761193483836113db565b905f5260205f205f5b83811061194a5750505050565b60019060208435940193818401550161193d565b90600182018092116113d657565b919082018092116113d657565b356115428161047d565b9b9a999d9c96939095926119ba610a4c888f6119ad909d9c9d9996995f52600960205260405f2090565b905f5260205260405f2090565b611c40578815611c18576119cf36828861171d565b602081519101206119e8885f52600860205260405f2090565b546003548914611c0f575b03611be757611a0395878e612557565b8486611a2e8c611a20878c6040519586948c60208701998a61189a565b03601f1981018352826116de565b519020809103611bbf57604051908152611aad91611a829181908a907f2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e90602090a36119ad895f52600960205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b611abf865f52600b60205260405f2090565b5415611bb1575b939291905f94611ae88284611ae38a5f52600d60205260405f2090565b61191a565b5f945b828610611b16575050505050506114f2929350611b10825f52600c60205260405f2090565b55612066565b909192939495611b34600191611b2d89898e611455565b359061196c565b96611b4081888d611455565b35611b79611b71611b598c5f52600e60205260405f2090565b611b64858a8c611455565b355f5260205260405f2090565b91825461196c565b9055611ba6611b91611b8c838787611455565b611979565b6115f6611b598c5f52600f60205260405f2090565b019493929190611aeb565b611bba86612634565b611ac6565b7f5cb045db000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9d8cbacd000000000000000000000000000000000000000000000000000000005f5260045ffd5b506001546119f3565b7f0f59b9ff000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9fbfc589000000000000000000000000000000000000000000000000000000005f5260045ffd5b805160021015610bb15760600190565b805160101015610bb1576102200190565b805115610bb15760200190565b805160011015610bb15760400190565b8051821015610bb15760209160051b010190565b5f1981146113d65760010190565b905f1982019182116113d657565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4082019182116113d657565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082019182116113d657565b60200390602082116113d657565b919082039182116113d657565b6004548015611d77575f19810190600454821015610bb1575f195f916004835260208320010155600455565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b6003548114611e975760045480915f5b838110611e75575b50828214611e4d57611df3611656926114db611ded611de3611dde5f98611cc8565b610b99565b90549060031b1c90565b91610b99565b611dfb611d4b565b611e38611e10825f52600560205260405f2090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b611648611e10825f52600660205260405f2090565b7f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b81611e82611de383610b99565b14611e8f57600101611db4565b91505f611dbc565b611e106114f2915f52600560205260405f2090565b73ffffffffffffffffffffffffffffffffffffffff1680156116595773ffffffffffffffffffffffffffffffffffffffff831615611659577fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025560035560ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615611f4957611f4690612353565b50565b7fd7e6bcf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b335f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1615611fa957565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f52336004525f60245260445ffd5b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff61202d3360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b5416156120375750565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f523360045260245260445ffd5b805f52600b60205260405f20604051808260208294549384815201905f5260205f20925f5b81811061211e5750506120a0925003826116de565b5f5b81518110156120e1576120d0610ef0610a4c6120c6865f52600960205260405f2090565b610a3f8587611ca6565b6120dc576001016120a2565b505050565b50506120f8611a82825f52600a60205260405f2090565b7f78df938181afcb28eaa7d099235bbf9877832d6faafe36d1ea70916f3ace33e05f80a2565b845483526001948501948694506020909301920161208b565b61214961214e9161215393369161171d565b6127b7565b612832565b805160031015610bb15760806115429101516128df565b67ffffffffffffffff81116114205760051b60200190565b92919261218e8261216a565b9361219c60405195866116de565b602085848152019260051b8201918183116103405780935b8385106121c2575050505050565b843567ffffffffffffffff811161034057820183601f82011215610340576020916121f3858385809535910161171d565b8152019401936121b4565b90916122786122736121499461227e96989997996040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b168252601481526122506034826116de565b519020936040519460208601526020855261226c6040866116de565b3691612182565b612921565b916129cb565b9182511561232b576122786122736122e5926122f39661226c6122b46122ae6122a96121499a612832565b611c68565b516128df565b966040516122cf81611a206020820194859190602083019252565b5190206040519687916020830160209181520190565b03601f1981018752866116de565b80511561230357611542906128df565b7f3477dcda000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f547706af000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff81165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff166124355773ffffffffffffffffffffffffffffffffffffffff165f8181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff61248e8360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541661255157805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526124e68260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b95929693909491945f52600560205273ffffffffffffffffffffffffffffffffffffffff60405f205416948515611e4d576115429761259591612137565b956040516020810191825260076040820152604081526125b66060826116de565b519020956121fe565b60048114611f46576004549067ffffffffffffffff8211611420576125e482826113db565b5f908152602081207f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b80545b84841061261e575050505050565b6001809192019384549281850155019290612610565b805f52600b60205261264860405f206125bf565b600354805f52600560205273ffffffffffffffffffffffffffffffffffffffff60405f205416612676575050565b6114f2915f52600b60205260405f206114b3565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff6126de8360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54161561255157805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526127378260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905573ffffffffffffffffffffffffffffffffffffffff339216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b604051906127ac826116c2565b5f6020838281520152565b6127bf61279f565b506020815191604051926127d2846116c2565b835201602082015290565b1561034057565b906127ee8261216a565b6127fb60405191826116de565b828152601f1961280b829461216a565b01905f5b82811061281b57505050565b60209061282661279f565b8282850101520161280f565b9061283c82612d01565b156103405761284a82612d20565b91612854836127e4565b9060208101805161286481612d81565b81018091116113d657945f905b80821061289357505061154292939461288b915190611d3e565b9051146127dd565b90956128d7816128a4600193612dec565b906040516128b36040826116de565b8281528160208201526128c68b8a611ca6565b526128d18a89611ca6565b5061196c565b960190612871565b80518015159081612915575b5015610340576128fa90612ea6565b90519060208110612909575090565b6020036101000a900490565b6021915011155f6128eb565b61292b81516127e4565b905f5b8151811015612969578061294d61294760019385611ca6565b516127b7565b6129578286611ca6565b526129628185611ca6565b500161292e565b505090565b6040519061297d6020836116de565b5f808352366020840137565b9061299382611701565b6129a060405191826116de565b828152601f196129b08294611701565b0190602036910137565b908151811015610bb1570160200190565b906129d590612f06565b5f915f6129e061279f565b50845115612cc857935f915b8151831015612c695782158080612c53575b610340571580612c37575b61034057612a20612a1a8484611ca6565b51612832565b958651600281145f14612b21575050612a49612a44612a3e88611c89565b51613154565b6131a2565b95612a5f612a5888888461320f565b809261196c565b965111612b035715612a965750612a769051611cc8565b11610340575111612a8d57612a3e61154291611c96565b5061154261296e565b919094612aa38651611cc8565b82146103405780612ac1610ef0612abb600194611c96565b51612d01565b15612ae457612ad2612ad891611c96565b51613194565b915b01919490946129ec565b612af0612afd91611c96565b5160208101519051902090565b91612ada565b505091509250612b14915051611cc8565b116103405761154261296e565b6011909791939794929414612b3a575b50600190612ada565b959380925094929094518314155f14612c195760ff612b94612b8e612b88612b6287876129ba565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b9461195e565b9316601081101561034057612bb2612bac8289611ca6565b5161317e565b15612bd45750505050612bc791925051611cc8565b036103405761154261296e565b86612bec610ef0612abb84600196989a97999b611ca6565b15612c0657612bfe91612ad291611ca6565b915b90612b31565b612c1391612af091611ca6565b91612c00565b505050612c269051611cc8565b0361034057612a3e61154291611c78565b50612c4b612c458484611ca6565b51613117565b861415612a09565b50612c61612af08585611ca6565b8214156129fe565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964204d50542070726f6f660000000000000000000000000000006044820152606490fd5b509050612cf992507f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4219150146127dd565b61154261296e565b80511561243557602060c0910151515f1a10612d1c57600190565b5f90565b805115612435575f9060208101908151612d3981612d81565b81018091116113d6579151905181018091116113d65791905b828110612d5f5750905090565b612d6881612dec565b81018091116113d657612d7b9091611cba565b90612d52565b515f1a6080811015612d9257505f90565b60b881108015612dd6575b15612da85750600190565b60c0811015612dc75761154290612dc29060b75b90611d3e565b61195e565b61154290612dc29060f7612dbc565b5060c08110158015612d9d575060f88110612d9d565b80515f1a906080821015612e01575050600190565b60b8821015612e175750612dc261154291611d03565b60c0821015612e585760010151602082900360b7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4a0190565b60f8821015612e6e5750612dc261154291611cd6565b60010151602082900360f7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0190565b906020820191612eb68351612d81565b9251908382018092116113d657519283039283116113d6579190565b15612ed957565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b90612f2f5f612f208451612f1b8115156127dd565b6113c0565b612f2a60016127dd565b611d3e565b90612f3982612989565b925f91825b612f48855f61196c565b84101561300857612fc3612b8e612f4892612f638760011690565b612fcb577f0f00000000000000000000000000000000000000000000000000000000000000612fad612fa4612b88612b62612f9e8c60011c90565b8b6129ba565b60041c600f1690565b60f81b165f1a612fbd828b6129ba565b5361195e565b939050612f3e565b7f0f00000000000000000000000000000000000000000000000000000000000000612fad613002612b88612b62612f9e8c60011c90565b60ff1690565b915092506114f29150835114612ed2565b6130398261302d8351612f1b8115156127dd565b612f2a818311156127dd565b9061304382612989565b9383925f5b613052828761196c565b85101561310557906130c56130bf6130529361306e8860011690565b6130ce577f0f000000000000000000000000000000000000000000000000000000000000006130af612fa4612b88612b626130a98d60011c90565b8c6129ba565b60f81b165f1a612fbd828c6129ba565b9561195e565b94909150613048565b7f0f000000000000000000000000000000000000000000000000000000000000006130af613002612b88612b626130a98d60011c90565b92505092506114f29150835114612ed2565b8051602081101561312f575060208101519051902090565b906020015120604051602081019182526020815261314e6040826116de565b51902090565b8051156103405761316761154291612ea6565b61317381939293612989565b9283602001906132c2565b60018151036124355760200151515f1a60801490565b61319d90612ea6565b902090565b9081511561034057600f6131be612fa4612b88612b6286611c89565b16806131d1575061154260025f93613019565b600181036131e6575061154260015f93613019565b600281036131fc57506115426002600193613019565b6003036103405761154260018093613019565b91905f5b8381018082116113d65782518110806132a9575b156132a1576132577fff0000000000000000000000000000000000000000000000000000000000000091846129ba565b51167fff0000000000000000000000000000000000000000000000000000000000000061328483866129ba565b5116900361329a5761329590611cba565b613213565b9250505090565b509250505090565b5083518210613227565b601f81116113d6576101000a90565b909180156120dc575b602081101561330557806132de57505050565b6132f26132ed6132f792611d30565b6132b3565b611cc8565b905182518216911916179052565b919080518252602081018091116113d65790602081018091116113d65791601f198101908111156132cb5761139356
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x01\xFF\xC9\xA7\x14a\x02\x9FW\x80c\x03DW\x1F\x14a\x02\x9AW\x80c\x13;\xF8\x9F\x14a\x02\x95W\x80c\x1B\xF4\x95\x1C\x14a\x02\x90W\x80c\"b8\x97\x14a\x02\x8BW\x80c#\xAF\xB0\xFF\x14a\x02\x86W\x80c$\x8A\x9C\xA3\x14a\x02\x81W\x80c(_$F\x14a\x02|W\x80c,\xD0x\xB8\x14a\x02wW\x80c//\xF1]\x14a\x02rW\x80c0\xC7\t\xB6\x14a\x02mW\x80c2q\xBAI\x14a\x02hW\x80c6+\x81T\x14a\x02cW\x80c6V\x8A\xBE\x14a\x02^W\x80cG\xDF\xF6\x9D\x14a\x02YW\x80cNm\xA2\xA4\x14a\x02TW\x80cU\xFC\xC5V\x14a\x02OW\x80cZc0\x80\x14a\x02\x18W\x80c[\x18\x17\xE8\x14a\x02JW\x80c]W\x9Aa\x14a\x02EW\x80ce\x0E\x13\x12\x14a\x02@W\x80ckM\x17\xAD\x14a\x02;W\x80cz\x7F4\xE8\x14a\x026W\x80c|n\xDB>\x14a\x021W\x80c|qP\x94\x14a\x02,W\x80c\x84!\x1C\xA9\x14a\x02'W\x80c\x8D\xD5\x0E\xEE\x14a\x02\"W\x80c\x91\xD1HT\x14a\x02\x1DW\x80c\x95\x81K\xF5\x14a\x02\x18W\x80c\xA2\x17\xFD\xDF\x14a\x02\x13W\x80c\xC3P\xA1\xB5\x14a\x02\x0EW\x80c\xCES|\x9F\x14a\x02\tW\x80c\xD2k\xCC\x80\x14a\x02\x04W\x80c\xD5Gt\x1F\x14a\x01\xFFW\x80c\xE1\x8BM\xAE\x14a\x01\xFAW\x80c\xE8\xC4l(\x14a\x01\xF5W\x80c\xEC\x82\x8A\x91\x14a\x01\xF0W\x80c\xEFQ\"!\x14a\x01\xEBW\x80c\xFDy\xD3\xE1\x14a\x01\xE6W\x80c\xFD\xD5A#\x14a\x01\xE1Wc\xFF\x87\xC1\x8C\x14a\x01\xDCW_\x80\xFD[a\x13.V[a\x12\xEEV[a\x12\xC4V[a\x12\xA7V[a\x12\"V[a\x12\x07V[a\x11\xECV[a\x11\x8CV[a\x11<V[a\x10\xFDV[a\x0E\x86V[a\x0ElV[a\n\xE1V[a\r\xEDV[a\r\xADV[a\rGV[a\x0C\xDFV[a\x0C{V[a\x0CQV[a\x0C6V[a\x0C\x12V[a\x0B\xCBV[a\x0B\x1EV[a\n\xA9V[a\t\xAFV[a\t\x85V[a\t\x17V[a\x08\xE4V[a\x07\xF1V[a\x07\xC2V[a\x07]V[a\x06\xD8V[a\x06\x1CV[a\x05\xCAV[a\x05\xAEV[a\x05\x91V[a\x05\nV[a\x04\x9BV[a\x03uV[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x80\x91\x03a\x03@W\x80\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x92\x14\x90\x81\x15a\x03\x16W[P`@Q\x90\x15\x15\x81R\xF3[\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91P\x14_a\x03\x0BV[_\x80\xFD[\x91\x81`\x1F\x84\x01\x12\x15a\x03@W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x03@WV[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x03\xA9\x906\x90`\x04\x01a\x03DV[\x91\x90a\x03\xB3a\x1FqV[\x81_R`\n` R`\xFF`@_ T\x16a\x04UW\x81_R`\x0B` Ra\x03\xDB`@_ a\x14%V[_[\x83\x81\x10a\x04%WP\x7F\xA0\xFE\xA1*]\xFD\xB3\xEB\xF0\xB7\xC4\x9A}\xDD_\xFD\xD3\xE5\xB2\xD7WO\xF1k\n\x102\xED\xC1\x9De\x8Ba\x04#\x93\x83\x92a\x04\x1B`@Q\x92\x83\x92\x83a\x151V[\x03\x90\xA2a fV[\0[`\x01\x90a\x04Oa\x04=\x85_R`\x0B` R`@_ \x90V[a\x04H\x83\x88\x87a\x14UV[5\x90a\x14\xB3V[\x01a\x03\xDDV[\x7F\xFD\x93\xC1_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x03a\x03@WV[4a\x03@W`\x80`\x03\x196\x01\x12a\x03@Wa\x04#`\x045`$5a\x04\xBE\x81a\x04}V[`D5\x90a\x04\xCB\x82a\x04}V[`d5\x92a\x04\xD7a\x1FqV[a\x15EV[\x91\x81`\x1F\x84\x01\x12\x15a\x03@W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x83\x81\x86\x01\x95\x01\x01\x11a\x03@WV[4a\x03@W`\xA0`\x03\x196\x01\x12a\x03@W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x05A\x906\x90`\x04\x01a\x04\xDCV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x05d\x906\x90`\x04\x01a\x03DV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x03@Wa\x05\x89a\x04#\x976\x90`\x04\x01a\x03DV[\x96\x90\x95a\x17SV[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `\x03T`@Q\x90\x81R\xF3[4a\x03@W_`\x03\x196\x01\x12a\x03@W` _T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W` a\x06\x14`\x045_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\x0E` R`@_ \x90_R` Ra\x06s`@_ T`@Q\x91\x82\x91\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xF3[\x7F\xC5\xB1Eq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[` `@\x81\x83\x01\x92\x82\x81R\x84Q\x80\x94R\x01\x92\x01\x90_[\x81\x81\x10a\x06\xC2WPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x06\xB5V[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\r` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x07GWa\x06s\x85a\x07;\x81\x87\x03\x82a\x16\xDEV[`@Q\x91\x82\x91\x82a\x06\x9FV[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x07$V[4a\x03@W`@`\x03\x196\x01\x12a\x03@Wa\x04#`$5`\x045a\x07\x80\x82a\x04}V[a\x07\xBDa\x07\xB8\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a\x1F\xD9V[a$:V[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\n` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03@Wa\x01\0`\x03\x196\x01\x12a\x03@W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08)\x906\x90`\x04\x01a\x04\xDCV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08L\x906\x90`\x04\x01a\x03DV[`\x84\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08o\x906\x90`\x04\x01a\x03DV[`\xA4\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08\x92\x906\x90`\x04\x01a\x03DV[\x93\x90\x92`\xC45g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@Wa\x08\xB5\x906\x90`\x04\x01a\x03DV[\x97\x90\x96`\xE45\x9Bg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8D\x11a\x03@Wa\x08\xDCa\x04#\x9D6\x90`\x04\x01a\x03DV[\x9C\x90\x9Ba\x19\x83V[4a\x03@W_`\x03\x196\x01\x12a\x03@W` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x16`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5a\t7\x81a\x04}V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\t]Wa\x04#\x91a&\x8AV[\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x0C` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_\x81_R`\n` R`\xFF`@_ T\x16\x90\x82_R`\x0B` R`@_ \x92`@Q\x80\x85` \x82\x97T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a\n\x90WPPa\n\x10\x92P\x03\x85a\x16\xDEV[\x83Q_[\x85Q\x81\x10\x15a\ntWa\nSa\nLa\n5\x85_R`\t` R`@_ \x90V[a\n?\x84\x8Aa\x1C\xA6V[Q_R` R`@_ \x90V[T`\xFF\x16\x90V[a\n`W[`\x01\x01a\n\x14V[\x92a\nl`\x01\x91a\x1C\xBAV[\x93\x90Pa\nXV[P`@\x80Q\x85\x15\x15\x81R` \x81\x01\x92\x90\x92R\x81\x01\x83\x90R``\x90\xF3[\x84T\x83R`\x01\x94\x85\x01\x94\x89\x94P` \x90\x93\x01\x92\x01a\t\xFBV[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\x0E` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\t` R`@_ \x90_R` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\x0F` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\x04T\x81\x10\x15a\x0B\xB1W`\x04_R` _ \x01\x90_\x90V[a\x0BlV[\x80T\x82\x10\x15a\x0B\xB1W_R` _ \x01\x90_\x90V[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\x0B` R`@_ \x80T\x82\x10\x15a\x03@W` \x91a\x0C\x03\x91a\x0B\xB6V[\x90T\x90`\x03\x1B\x1C`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@Wa\x04#`\x045a\x0C1a\x1FqV[a\x1D\xA4V[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q`\x02\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x08` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x0B` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x0C\xC9Wa\x06s\x85a\x07;\x81\x87\x03\x82a\x16\xDEV[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x0C\xB2V[4a\x03@W` `\x03\x196\x01\x12a\x03@Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045a\r\x11\x81a\x04}V[a\r\x19a\x1FqV[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U_\x80\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x163\x03a\r\x85W_U`\x01U\0[\x7F$\xB2\xE7\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x05` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W` `\xFFa\x0E``$5`\x045a\x0E\x14\x82a\x04}V[_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0\x84R`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q_\x81R\xF3[4a\x03@W```\x03\x196\x01\x12a\x03@W`\x045a\x0E\xA3\x81a\x04}V[`$5\x90`D5a\x0E\xB3\x81a\x04}V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0F\x02`\xFF`@\x87\x90\x1C\x16\x15a\x0E\xF4V[\x15\x90V[\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16\x80\x15\x90\x81a\x10\xF5W[`\x01\x14\x90\x81a\x10\xEBW[\x15\x90\x81a\x10\xE2W[Pa\x10\xBAWa\x0F\x9F\x92\x84a\x0F\x96`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x10?Wa\x1E\xACV[a\x0F\xA5W\0[a\x10\x10\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x90\xA1\0[a\x10\xB5h\x01\0\0\0\0\0\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x1E\xACV[\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90P\x15_a\x0F\x1EV[0;\x15\x91Pa\x0F\x16V[\x85\x91Pa\x0F\x0CV[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\x0C` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045`\x04T\x81\x10\x15a\x03@W` \x90`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01T`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@Wa\x04#`$5`\x045a\x11\xAF\x82a\x04}V[a\x11\xE7a\x07\xB8\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a&\x8AV[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q`\x03\x81R\xF3[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `@Q`\x07\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90\x80_R`\n` R`\xFF`@_ T\x16\x15a\x06wW_R`\x0F` R`@_ \x90_R` Ra\x06ss\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x91\x82\x91\x82\x91\x90\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01\x93\x16\x90RV[4a\x03@W_`\x03\x196\x01\x12a\x03@W` `\x01T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x07` R` `@_ T`@Q\x90\x81R\xF3[4a\x03@W` `\x03\x196\x01\x12a\x03@W`\x045_R`\x06` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x03@W`@`\x03\x196\x01\x12a\x03@W`\x045`$5\x90_R`\r` R`@_ \x80T\x82\x10\x15a\x03@W` \x91a\x0C\x03\x91a\x0B\xB6V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81`\x01\x1B\x91\x80\x83\x04`\x02\x14\x90\x15\x17\x15a\x13\xD6WV[a\x13\x93V[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\x14 W\x81T\x91\x81\x81U\x82\x82\x10a\x13\xFEWPPPV[_R` _ \x91\x82\x01\x91\x01[\x81\x81\x10a\x14\x15WPPV[_\x81U`\x01\x01a\x14\nV[a\x13fV[\x80T\x90_\x81U\x81a\x144WPPV[_R` _ \x90\x81\x01\x90[\x81\x81\x10a\x14JWPPV[_\x81U`\x01\x01a\x14?V[\x91\x90\x81\x10\x15a\x0B\xB1W`\x05\x1B\x01\x90V[`\x04Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x14 W`\x01\x81\x01`\x04U`\x04T\x81\x10\x15a\x0B\xB1W`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01UV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x14 W\x82a\x14\xDB\x91`\x01a\x14\xF2\x95\x01\x81Ua\x0B\xB6V[\x90\x91\x90_\x19\x83T\x91`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90UV[V[\x90\x91\x82\x81R\x7F\x07\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x92`\x05\x1B\x80\x92\x84\x83\x017\x01\x01\x90V[\x91` a\x15B\x93\x81\x81R\x01\x91a\x14\xF4V[\x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x15\x8Aa\x15p\x84_R`\x05` R`@_ \x90V[Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16a\x16\x9AWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15a\x16YW`\x03T\x82\x14a\x16\x81Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x16YWa\x16V\x92a\x166a\x16H\x92a\x15\xE4\x85a\x14eV[a\x15\xF6\x85_R`\x05` R`@_ \x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[a\x15\xF6\x83_R`\x06` R`@_ \x90V[_R`\x07` R`@_ \x90V[UV[\x7F\xD9.#=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91Pa\x14\xF2\x92Pa\x15\xF6\x90_R`\x05` R`@_ \x90V[\x7F\xDFe\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x14 W`@RV[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x14 W`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x14 W`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x92\x91\x92a\x17)\x82a\x17\x01V[\x91a\x177`@Q\x93\x84a\x16\xDEV[\x82\x94\x81\x84R\x81\x83\x01\x11a\x03@W\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x96\x93\x90\x94\x91\x95\x92a\x17e6\x82\x89a\x17\x1DV[` \x81Q\x91\x01 _T\x03a\x18rWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x17\x9A\x89_R`\x06` R`@_ \x90V[T\x16\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15a\x18\x19W\x91a\x18\x05a\x16V\x98\x96\x94\x92a\x18\n\x98\x96\x94a\x17\xDC\x8C_R`\x07` R`@_ \x90V[T`@Q\x90` \x82\x01\x92\x83R`@\x82\x01R`@\x81Ra\x17\xFC``\x82a\x16\xDEV[Q\x90 \x97a!7V[a!\xFEV[\x91_R`\x08` R`@_ \x90V[\x88`\x03T\x14a\x18JW\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xDA&\x12\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xEF\xB6L\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x92\x90\x93a\x18\xB8` \x95a\x18\xC5\x94\x98\x97\x98``\x87R``\x87\x01\x91a\x14\xF4V[\x91\x84\x83\x03\x86\x86\x01Ra\x14\xF4V[\x90`@\x81\x83\x03\x91\x01R\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x18\xE3WPPP\x90V[\x90\x91\x92` \x80`\x01\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x875a\x19\x0C\x81a\x04}V[\x16\x81R\x01\x94\x01\x92\x91\x01a\x18\xD6V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x14 Wa\x194\x83\x83a\x13\xDBV[\x90_R` _ _[\x83\x81\x10a\x19JWPPPPV[`\x01\x90` \x845\x94\x01\x93\x81\x84\x01U\x01a\x19=V[\x90`\x01\x82\x01\x80\x92\x11a\x13\xD6WV[\x91\x90\x82\x01\x80\x92\x11a\x13\xD6WV[5a\x15B\x81a\x04}V[\x9B\x9A\x99\x9D\x9C\x96\x93\x90\x95\x92a\x19\xBAa\nL\x88\x8Fa\x19\xAD\x90\x9D\x9C\x9D\x99\x96\x99_R`\t` R`@_ \x90V[\x90_R` R`@_ \x90V[a\x1C@W\x88\x15a\x1C\x18Wa\x19\xCF6\x82\x88a\x17\x1DV[` \x81Q\x91\x01 a\x19\xE8\x88_R`\x08` R`@_ \x90V[T`\x03T\x89\x14a\x1C\x0FW[\x03a\x1B\xE7Wa\x1A\x03\x95\x87\x8Ea%WV[\x84\x86a\x1A.\x8Ca\x1A \x87\x8C`@Q\x95\x86\x94\x8C` \x87\x01\x99\x8Aa\x18\x9AV[\x03`\x1F\x19\x81\x01\x83R\x82a\x16\xDEV[Q\x90 \x80\x91\x03a\x1B\xBFW`@Q\x90\x81Ra\x1A\xAD\x91a\x1A\x82\x91\x81\x90\x8A\x90\x7F,?D5\x99\xC6&\x8A\xCE\xD4s\xE7f\x0B@tn\xA3\x94\xD5\x19\x17\x9E\xA3\xF6\x0F8)t\xA2\xE7\x8E\x90` \x90\xA3a\x19\xAD\x89_R`\t` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90UV[a\x1A\xBF\x86_R`\x0B` R`@_ \x90V[T\x15a\x1B\xB1W[\x93\x92\x91\x90_\x94a\x1A\xE8\x82\x84a\x1A\xE3\x8A_R`\r` R`@_ \x90V[a\x19\x1AV[_\x94[\x82\x86\x10a\x1B\x16WPPPPPPa\x14\xF2\x92\x93Pa\x1B\x10\x82_R`\x0C` R`@_ \x90V[Ua fV[\x90\x91\x92\x93\x94\x95a\x1B4`\x01\x91a\x1B-\x89\x89\x8Ea\x14UV[5\x90a\x19lV[\x96a\x1B@\x81\x88\x8Da\x14UV[5a\x1Bya\x1Bqa\x1BY\x8C_R`\x0E` R`@_ \x90V[a\x1Bd\x85\x8A\x8Ca\x14UV[5_R` R`@_ \x90V[\x91\x82Ta\x19lV[\x90Ua\x1B\xA6a\x1B\x91a\x1B\x8C\x83\x87\x87a\x14UV[a\x19yV[a\x15\xF6a\x1BY\x8C_R`\x0F` R`@_ \x90V[\x01\x94\x93\x92\x91\x90a\x1A\xEBV[a\x1B\xBA\x86a&4V[a\x1A\xC6V[\x7F\\\xB0E\xDB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9D\x8C\xBA\xCD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P`\x01Ta\x19\xF3V[\x7F\x0FY\xB9\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9F\xBF\xC5\x89\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x80Q`\x02\x10\x15a\x0B\xB1W``\x01\x90V[\x80Q`\x10\x10\x15a\x0B\xB1Wa\x02 \x01\x90V[\x80Q\x15a\x0B\xB1W` \x01\x90V[\x80Q`\x01\x10\x15a\x0B\xB1W`@\x01\x90V[\x80Q\x82\x10\x15a\x0B\xB1W` \x91`\x05\x1B\x01\x01\x90V[_\x19\x81\x14a\x13\xD6W`\x01\x01\x90V[\x90_\x19\x82\x01\x91\x82\x11a\x13\xD6WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF@\x82\x01\x91\x82\x11a\x13\xD6WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x91\x82\x11a\x13\xD6WV[` \x03\x90` \x82\x11a\x13\xD6WV[\x91\x90\x82\x03\x91\x82\x11a\x13\xD6WV[`\x04T\x80\x15a\x1DwW_\x19\x81\x01\x90`\x04T\x82\x10\x15a\x0B\xB1W_\x19_\x91`\x04\x83R` \x83 \x01\x01U`\x04UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[`\x03T\x81\x14a\x1E\x97W`\x04T\x80\x91_[\x83\x81\x10a\x1EuW[P\x82\x82\x14a\x1EMWa\x1D\xF3a\x16V\x92a\x14\xDBa\x1D\xEDa\x1D\xE3a\x1D\xDE_\x98a\x1C\xC8V[a\x0B\x99V[\x90T\x90`\x03\x1B\x1C\x90V[\x91a\x0B\x99V[a\x1D\xFBa\x1DKV[a\x1E8a\x1E\x10\x82_R`\x05` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81T\x16\x90UV[a\x16Ha\x1E\x10\x82_R`\x06` R`@_ \x90V[\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x81a\x1E\x82a\x1D\xE3\x83a\x0B\x99V[\x14a\x1E\x8FW`\x01\x01a\x1D\xB4V[\x91P_a\x1D\xBCV[a\x1E\x10a\x14\xF2\x91_R`\x05` R`@_ \x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x80\x15a\x16YWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x16YW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U`\x03U`\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T`@\x1C\x16\x15a\x1FIWa\x1FF\x90a#SV[PV[\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[3_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16\x15a\x1F\xA9WV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R_`$R`D_\xFD[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa -3`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a 7WPV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R`$R`D_\xFD[\x80_R`\x0B` R`@_ `@Q\x80\x82` \x82\x94T\x93\x84\x81R\x01\x90_R` _ \x92_[\x81\x81\x10a!\x1EWPPa \xA0\x92P\x03\x82a\x16\xDEV[_[\x81Q\x81\x10\x15a \xE1Wa \xD0a\x0E\xF0a\nLa \xC6\x86_R`\t` R`@_ \x90V[a\n?\x85\x87a\x1C\xA6V[a \xDCW`\x01\x01a \xA2V[PPPV[PPa \xF8a\x1A\x82\x82_R`\n` R`@_ \x90V[\x7Fx\xDF\x93\x81\x81\xAF\xCB(\xEA\xA7\xD0\x99#[\xBF\x98w\x83-o\xAA\xFE6\xD1\xEAp\x91o:\xCE3\xE0_\x80\xA2V[\x84T\x83R`\x01\x94\x85\x01\x94\x86\x94P` \x90\x93\x01\x92\x01a \x8BV[a!Ia!N\x91a!S\x936\x91a\x17\x1DV[a'\xB7V[a(2V[\x80Q`\x03\x10\x15a\x0B\xB1W`\x80a\x15B\x91\x01Qa(\xDFV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x14 W`\x05\x1B` \x01\x90V[\x92\x91\x92a!\x8E\x82a!jV[\x93a!\x9C`@Q\x95\x86a\x16\xDEV[` \x85\x84\x81R\x01\x92`\x05\x1B\x82\x01\x91\x81\x83\x11a\x03@W\x80\x93[\x83\x85\x10a!\xC2WPPPPPV[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03@W\x82\x01\x83`\x1F\x82\x01\x12\x15a\x03@W` \x91a!\xF3\x85\x83\x85\x80\x955\x91\x01a\x17\x1DV[\x81R\x01\x94\x01\x93a!\xB4V[\x90\x91a\"xa\"sa!I\x94a\"~\x96\x98\x99\x97\x99`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01\x92``\x1B\x16\x82R`\x14\x81Ra\"P`4\x82a\x16\xDEV[Q\x90 \x93`@Q\x94` \x86\x01R` \x85Ra\"l`@\x86a\x16\xDEV[6\x91a!\x82V[a)!V[\x91a)\xCBV[\x91\x82Q\x15a#+Wa\"xa\"sa\"\xE5\x92a\"\xF3\x96a\"la\"\xB4a\"\xAEa\"\xA9a!I\x9Aa(2V[a\x1ChV[Qa(\xDFV[\x96`@Qa\"\xCF\x81a\x1A ` \x82\x01\x94\x85\x91\x90` \x83\x01\x92RV[Q\x90 `@Q\x96\x87\x91` \x83\x01` \x91\x81R\x01\x90V[\x03`\x1F\x19\x81\x01\x87R\x86a\x16\xDEV[\x80Q\x15a#\x03Wa\x15B\x90a(\xDFV[\x7F4w\xDC\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7FTw\x06\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16a$5Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x81\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x81 \x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16`\x01\x17\x90U3\x91\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x81\x80\xA4`\x01\x90V[P_\x90V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa$\x8E\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16a%QW\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra$\xE6\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r_\x80\xA4`\x01\x90V[PP_\x90V[\x95\x92\x96\x93\x90\x94\x91\x94_R`\x05` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16\x94\x85\x15a\x1EMWa\x15B\x97a%\x95\x91a!7V[\x95`@Q` \x81\x01\x91\x82R`\x07`@\x82\x01R`@\x81Ra%\xB6``\x82a\x16\xDEV[Q\x90 \x95a!\xFEV[`\x04\x81\x14a\x1FFW`\x04T\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x14 Wa%\xE4\x82\x82a\x13\xDBV[_\x90\x81R` \x81 \x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x80T[\x84\x84\x10a&\x1EWPPPPPV[`\x01\x80\x91\x92\x01\x93\x84T\x92\x81\x85\x01U\x01\x92\x90a&\x10V[\x80_R`\x0B` Ra&H`@_ a%\xBFV[`\x03T\x80_R`\x05` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16a&vWPPV[a\x14\xF2\x91_R`\x0B` R`@_ a\x14\xB3V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa&\xDE\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a%QW\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra'7\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81T\x16\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B_\x80\xA4`\x01\x90V[`@Q\x90a'\xAC\x82a\x16\xC2V[_` \x83\x82\x81R\x01RV[a'\xBFa'\x9FV[P` \x81Q\x91`@Q\x92a'\xD2\x84a\x16\xC2V[\x83R\x01` \x82\x01R\x90V[\x15a\x03@WV[\x90a'\xEE\x82a!jV[a'\xFB`@Q\x91\x82a\x16\xDEV[\x82\x81R`\x1F\x19a(\x0B\x82\x94a!jV[\x01\x90_[\x82\x81\x10a(\x1BWPPPV[` \x90a(&a'\x9FV[\x82\x82\x85\x01\x01R\x01a(\x0FV[\x90a(<\x82a-\x01V[\x15a\x03@Wa(J\x82a- V[\x91a(T\x83a'\xE4V[\x90` \x81\x01\x80Qa(d\x81a-\x81V[\x81\x01\x80\x91\x11a\x13\xD6W\x94_\x90[\x80\x82\x10a(\x93WPPa\x15B\x92\x93\x94a(\x8B\x91Q\x90a\x1D>V[\x90Q\x14a'\xDDV[\x90\x95a(\xD7\x81a(\xA4`\x01\x93a-\xECV[\x90`@Qa(\xB3`@\x82a\x16\xDEV[\x82\x81R\x81` \x82\x01Ra(\xC6\x8B\x8Aa\x1C\xA6V[Ra(\xD1\x8A\x89a\x1C\xA6V[Pa\x19lV[\x96\x01\x90a(qV[\x80Q\x80\x15\x15\x90\x81a)\x15W[P\x15a\x03@Wa(\xFA\x90a.\xA6V[\x90Q\x90` \x81\x10a)\tWP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a(\xEBV[a)+\x81Qa'\xE4V[\x90_[\x81Q\x81\x10\x15a)iW\x80a)Ma)G`\x01\x93\x85a\x1C\xA6V[Qa'\xB7V[a)W\x82\x86a\x1C\xA6V[Ra)b\x81\x85a\x1C\xA6V[P\x01a).V[PP\x90V[`@Q\x90a)}` \x83a\x16\xDEV[_\x80\x83R6` \x84\x017V[\x90a)\x93\x82a\x17\x01V[a)\xA0`@Q\x91\x82a\x16\xDEV[\x82\x81R`\x1F\x19a)\xB0\x82\x94a\x17\x01V[\x01\x90` 6\x91\x017V[\x90\x81Q\x81\x10\x15a\x0B\xB1W\x01` \x01\x90V[\x90a)\xD5\x90a/\x06V[_\x91_a)\xE0a'\x9FV[P\x84Q\x15a,\xC8W\x93_\x91[\x81Q\x83\x10\x15a,iW\x82\x15\x80\x80a,SW[a\x03@W\x15\x80a,7W[a\x03@Wa* a*\x1A\x84\x84a\x1C\xA6V[Qa(2V[\x95\x86Q`\x02\x81\x14_\x14a+!WPPa*Ia*Da*>\x88a\x1C\x89V[Qa1TV[a1\xA2V[\x95a*_a*X\x88\x88\x84a2\x0FV[\x80\x92a\x19lV[\x96Q\x11a+\x03W\x15a*\x96WPa*v\x90Qa\x1C\xC8V[\x11a\x03@WQ\x11a*\x8DWa*>a\x15B\x91a\x1C\x96V[Pa\x15Ba)nV[\x91\x90\x94a*\xA3\x86Qa\x1C\xC8V[\x82\x14a\x03@W\x80a*\xC1a\x0E\xF0a*\xBB`\x01\x94a\x1C\x96V[Qa-\x01V[\x15a*\xE4Wa*\xD2a*\xD8\x91a\x1C\x96V[Qa1\x94V[\x91[\x01\x91\x94\x90\x94a)\xECV[a*\xF0a*\xFD\x91a\x1C\x96V[Q` \x81\x01Q\x90Q\x90 \x90V[\x91a*\xDAV[PP\x91P\x92Pa+\x14\x91PQa\x1C\xC8V[\x11a\x03@Wa\x15Ba)nV[`\x11\x90\x97\x91\x93\x97\x94\x92\x94\x14a+:W[P`\x01\x90a*\xDAV[\x95\x93\x80\x92P\x94\x92\x90\x94Q\x83\x14\x15_\x14a,\x19W`\xFFa+\x94a+\x8Ea+\x88a+b\x87\x87a)\xBAV[Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90V[`\xF8\x1C\x90V[\x94a\x19^V[\x93\x16`\x10\x81\x10\x15a\x03@Wa+\xB2a+\xAC\x82\x89a\x1C\xA6V[Qa1~V[\x15a+\xD4WPPPPa+\xC7\x91\x92PQa\x1C\xC8V[\x03a\x03@Wa\x15Ba)nV[\x86a+\xECa\x0E\xF0a*\xBB\x84`\x01\x96\x98\x9A\x97\x99\x9Ba\x1C\xA6V[\x15a,\x06Wa+\xFE\x91a*\xD2\x91a\x1C\xA6V[\x91[\x90a+1V[a,\x13\x91a*\xF0\x91a\x1C\xA6V[\x91a,\0V[PPPa,&\x90Qa\x1C\xC8V[\x03a\x03@Wa*>a\x15B\x91a\x1CxV[Pa,Ka,E\x84\x84a\x1C\xA6V[Qa1\x17V[\x86\x14\x15a*\tV[Pa,aa*\xF0\x85\x85a\x1C\xA6V[\x82\x14\x15a)\xFEV[`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FInvalid MPT proof\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[P\x90Pa,\xF9\x92P\x7FV\xE8\x1F\x17\x1B\xCCU\xA6\xFF\x83E\xE6\x92\xC0\xF8n[H\xE0\x1B\x99l\xAD\xC0\x01b/\xB5\xE3c\xB4!\x91P\x14a'\xDDV[a\x15Ba)nV[\x80Q\x15a$5W` `\xC0\x91\x01QQ_\x1A\x10a-\x1CW`\x01\x90V[_\x90V[\x80Q\x15a$5W_\x90` \x81\x01\x90\x81Qa-9\x81a-\x81V[\x81\x01\x80\x91\x11a\x13\xD6W\x91Q\x90Q\x81\x01\x80\x91\x11a\x13\xD6W\x91\x90[\x82\x81\x10a-_WP\x90P\x90V[a-h\x81a-\xECV[\x81\x01\x80\x91\x11a\x13\xD6Wa-{\x90\x91a\x1C\xBAV[\x90a-RV[Q_\x1A`\x80\x81\x10\x15a-\x92WP_\x90V[`\xB8\x81\x10\x80\x15a-\xD6W[\x15a-\xA8WP`\x01\x90V[`\xC0\x81\x10\x15a-\xC7Wa\x15B\x90a-\xC2\x90`\xB7[\x90a\x1D>V[a\x19^V[a\x15B\x90a-\xC2\x90`\xF7a-\xBCV[P`\xC0\x81\x10\x15\x80\x15a-\x9DWP`\xF8\x81\x10a-\x9DV[\x80Q_\x1A\x90`\x80\x82\x10\x15a.\x01WPP`\x01\x90V[`\xB8\x82\x10\x15a.\x17WPa-\xC2a\x15B\x91a\x1D\x03V[`\xC0\x82\x10\x15a.XW`\x01\x01Q` \x82\x90\x03`\xB7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFJ\x01\x90V[`\xF8\x82\x10\x15a.nWPa-\xC2a\x15B\x91a\x1C\xD6V[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\n\x01\x90V[\x90` \x82\x01\x91a.\xB6\x83Qa-\x81V[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x13\xD6WQ\x92\x83\x03\x92\x83\x11a\x13\xD6W\x91\x90V[\x15a.\xD9WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD[\x90a//_a/ \x84Qa/\x1B\x81\x15\x15a'\xDDV[a\x13\xC0V[a/*`\x01a'\xDDV[a\x1D>V[\x90a/9\x82a)\x89V[\x92_\x91\x82[a/H\x85_a\x19lV[\x84\x10\x15a0\x08Wa/\xC3a+\x8Ea/H\x92a/c\x87`\x01\x16\x90V[a/\xCBW\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a/\xADa/\xA4a+\x88a+ba/\x9E\x8C`\x01\x1C\x90V[\x8Ba)\xBAV[`\x04\x1C`\x0F\x16\x90V[`\xF8\x1B\x16_\x1Aa/\xBD\x82\x8Ba)\xBAV[Sa\x19^V[\x93\x90Pa/>V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a/\xADa0\x02a+\x88a+ba/\x9E\x8C`\x01\x1C\x90V[`\xFF\x16\x90V[\x91P\x92Pa\x14\xF2\x91P\x83Q\x14a.\xD2V[a09\x82a0-\x83Qa/\x1B\x81\x15\x15a'\xDDV[a/*\x81\x83\x11\x15a'\xDDV[\x90a0C\x82a)\x89V[\x93\x83\x92_[a0R\x82\x87a\x19lV[\x85\x10\x15a1\x05W\x90a0\xC5a0\xBFa0R\x93a0n\x88`\x01\x16\x90V[a0\xCEW\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a0\xAFa/\xA4a+\x88a+ba0\xA9\x8D`\x01\x1C\x90V[\x8Ca)\xBAV[`\xF8\x1B\x16_\x1Aa/\xBD\x82\x8Ca)\xBAV[\x95a\x19^V[\x94\x90\x91Pa0HV[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a0\xAFa0\x02a+\x88a+ba0\xA9\x8D`\x01\x1C\x90V[\x92PP\x92Pa\x14\xF2\x91P\x83Q\x14a.\xD2V[\x80Q` \x81\x10\x15a1/WP` \x81\x01Q\x90Q\x90 \x90V[\x90` \x01Q `@Q` \x81\x01\x91\x82R` \x81Ra1N`@\x82a\x16\xDEV[Q\x90 \x90V[\x80Q\x15a\x03@Wa1ga\x15B\x91a.\xA6V[a1s\x81\x93\x92\x93a)\x89V[\x92\x83` \x01\x90a2\xC2V[`\x01\x81Q\x03a$5W` \x01QQ_\x1A`\x80\x14\x90V[a1\x9D\x90a.\xA6V[\x90 \x90V[\x90\x81Q\x15a\x03@W`\x0Fa1\xBEa/\xA4a+\x88a+b\x86a\x1C\x89V[\x16\x80a1\xD1WPa\x15B`\x02_\x93a0\x19V[`\x01\x81\x03a1\xE6WPa\x15B`\x01_\x93a0\x19V[`\x02\x81\x03a1\xFCWPa\x15B`\x02`\x01\x93a0\x19V[`\x03\x03a\x03@Wa\x15B`\x01\x80\x93a0\x19V[\x91\x90_[\x83\x81\x01\x80\x82\x11a\x13\xD6W\x82Q\x81\x10\x80a2\xA9W[\x15a2\xA1Wa2W\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x84a)\xBAV[Q\x16\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a2\x84\x83\x86a)\xBAV[Q\x16\x90\x03a2\x9AWa2\x95\x90a\x1C\xBAV[a2\x13V[\x92PPP\x90V[P\x92PPP\x90V[P\x83Q\x82\x10a2'V[`\x1F\x81\x11a\x13\xD6Wa\x01\0\n\x90V[\x90\x91\x80\x15a \xDCW[` \x81\x10\x15a3\x05W\x80a2\xDEWPPPV[a2\xF2a2\xEDa2\xF7\x92a\x1D0V[a2\xB3V[a\x1C\xC8V[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[\x91\x90\x80Q\x82R` \x81\x01\x80\x91\x11a\x13\xD6W\x90` \x81\x01\x80\x91\x11a\x13\xD6W\x91`\x1F\x19\x81\x01\x90\x81\x11\x15a2\xCBWa\x13\x93V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccountDoesNotExistInProof()` and selector `0x547706af`.
```solidity
error AccountDoesNotExistInProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccountDoesNotExistInProof;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccountDoesNotExistInProof>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccountDoesNotExistInProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccountDoesNotExistInProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccountDoesNotExistInProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccountDoesNotExistInProof()";
            const SELECTOR: [u8; 4] = [84u8, 119u8, 6u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AlreadySubmitted()` and selector `0x9fbfc589`.
```solidity
error AlreadySubmitted();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadySubmitted;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadySubmitted> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadySubmitted) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadySubmitted {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadySubmitted {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadySubmitted()";
            const SELECTOR: [u8; 4] = [159u8, 191u8, 197u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CannotSubmitProofForSettlementChain()` and selector `0xda261280`.
```solidity
error CannotSubmitProofForSettlementChain();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CannotSubmitProofForSettlementChain;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CannotSubmitProofForSettlementChain>
        for UnderlyingRustTuple<'_> {
            fn from(value: CannotSubmitProofForSettlementChain) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CannotSubmitProofForSettlementChain {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CannotSubmitProofForSettlementChain {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CannotSubmitProofForSettlementChain()";
            const SELECTOR: [u8; 4] = [218u8, 38u8, 18u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ChainIDNotFound()` and selector `0x1242e9bb`.
```solidity
error ChainIDNotFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ChainIDNotFound;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ChainIDNotFound> for UnderlyingRustTuple<'_> {
            fn from(value: ChainIDNotFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ChainIDNotFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ChainIDNotFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ChainIDNotFound()";
            const SELECTOR: [u8; 4] = [18u8, 66u8, 233u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptySlot()` and selector `0x3477dcda`.
```solidity
error EmptySlot();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptySlot;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptySlot> for UnderlyingRustTuple<'_> {
            fn from(value: EmptySlot) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptySlot {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptySlot {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptySlot()";
            const SELECTOR: [u8; 4] = [52u8, 119u8, 220u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EpochAlreadyCompleted()` and selector `0xfd93c15f`.
```solidity
error EpochAlreadyCompleted();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EpochAlreadyCompleted;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EpochAlreadyCompleted> for UnderlyingRustTuple<'_> {
            fn from(value: EpochAlreadyCompleted) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EpochAlreadyCompleted {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EpochAlreadyCompleted {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EpochAlreadyCompleted()";
            const SELECTOR: [u8; 4] = [253u8, 147u8, 193u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidData()` and selector `0x5cb045db`.
```solidity
error InvalidData();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidData;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidData> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidData) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidData {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidData()";
            const SELECTOR: [u8; 4] = [92u8, 176u8, 69u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidEthereumBlockHeader()` and selector `0xefb64cf8`.
```solidity
error InvalidEthereumBlockHeader();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidEthereumBlockHeader;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidEthereumBlockHeader>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidEthereumBlockHeader) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidEthereumBlockHeader {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidEthereumBlockHeader {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidEthereumBlockHeader()";
            const SELECTOR: [u8; 4] = [239u8, 182u8, 76u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidProof()` and selector `0x09bde339`.
```solidity
error InvalidProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidProof;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidProof> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidProof()";
            const SELECTOR: [u8; 4] = [9u8, 189u8, 227u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidSeqChainBlockHeader()` and selector `0x9d8cbacd`.
```solidity
error InvalidSeqChainBlockHeader();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidSeqChainBlockHeader;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidSeqChainBlockHeader>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidSeqChainBlockHeader) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidSeqChainBlockHeader {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidSeqChainBlockHeader {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidSeqChainBlockHeader()";
            const SELECTOR: [u8; 4] = [157u8, 140u8, 186u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotArchivedEpoch()` and selector `0xc5b14571`.
```solidity
error NotArchivedEpoch();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotArchivedEpoch;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotArchivedEpoch> for UnderlyingRustTuple<'_> {
            fn from(value: NotArchivedEpoch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotArchivedEpoch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotArchivedEpoch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotArchivedEpoch()";
            const SELECTOR: [u8; 4] = [197u8, 177u8, 69u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotBlockHashSender()` and selector `0x24b2e7fd`.
```solidity
error NotBlockHashSender();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotBlockHashSender;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotBlockHashSender> for UnderlyingRustTuple<'_> {
            fn from(value: NotBlockHashSender) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotBlockHashSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotBlockHashSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotBlockHashSender()";
            const SELECTOR: [u8; 4] = [36u8, 178u8, 231u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SequencingChainAlreadyExists()` and selector `0xdf650a00`.
```solidity
error SequencingChainAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SequencingChainAlreadyExists;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SequencingChainAlreadyExists>
        for UnderlyingRustTuple<'_> {
            fn from(value: SequencingChainAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SequencingChainAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SequencingChainAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SequencingChainAlreadyExists()";
            const SELECTOR: [u8; 4] = [223u8, 101u8, 10u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroLengthArray()` and selector `0x0f59b9ff`.
```solidity
error ZeroLengthArray();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroLengthArray;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroLengthArray> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroLengthArray) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroLengthArray {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroLengthArray {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroLengthArray()";
            const SELECTOR: [u8; 4] = [15u8, 89u8, 185u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EpochCompleted(uint256)` and selector `0x78df938181afcb28eaa7d099235bbf9877832d6faafe36d1ea70916f3ace33e0`.
```solidity
event EpochCompleted(uint256 indexed epoch);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochCompleted {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochCompleted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochCompleted(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                120u8, 223u8, 147u8, 129u8, 129u8, 175u8, 203u8, 40u8, 234u8, 167u8,
                208u8, 153u8, 35u8, 91u8, 191u8, 152u8, 119u8, 131u8, 45u8, 111u8, 170u8,
                254u8, 54u8, 209u8, 234u8, 112u8, 145u8, 111u8, 58u8, 206u8, 51u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { epoch: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.epoch.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.epoch);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochCompleted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochCompleted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EpochCompleted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EpochDataValidated(uint256,uint256,bytes32)` and selector `0x2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e`.
```solidity
event EpochDataValidated(uint256 indexed epoch, uint256 indexed seqChainID, bytes32 dataHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochDataValidated {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dataHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochDataValidated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochDataValidated(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                44u8, 63u8, 68u8, 53u8, 153u8, 198u8, 38u8, 138u8, 206u8, 212u8, 115u8,
                231u8, 102u8, 11u8, 64u8, 116u8, 110u8, 163u8, 148u8, 213u8, 25u8, 23u8,
                158u8, 163u8, 246u8, 15u8, 56u8, 41u8, 116u8, 162u8, 231u8, 142u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    epoch: topics.1,
                    seqChainID: topics.2,
                    dataHash: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.dataHash),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.epoch.clone(),
                    self.seqChainID.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.epoch);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.seqChainID);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochDataValidated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochDataValidated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EpochDataValidated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EpochExpectedChainsUpdated(uint256,uint256[])` and selector `0xa0fea12a5dfdb3ebf0b7c49a7ddd5ffdd3e5b2d7574ff16b0a1032edc19d658b`.
```solidity
event EpochExpectedChainsUpdated(uint256 indexed epoch, uint256[] chainIds);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochExpectedChainsUpdated {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochExpectedChainsUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochExpectedChainsUpdated(uint256,uint256[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                160u8, 254u8, 161u8, 42u8, 93u8, 253u8, 179u8, 235u8, 240u8, 183u8,
                196u8, 154u8, 125u8, 221u8, 95u8, 253u8, 211u8, 229u8, 178u8, 215u8,
                87u8, 79u8, 241u8, 107u8, 10u8, 16u8, 50u8, 237u8, 193u8, 157u8, 101u8,
                139u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    epoch: topics.1,
                    chainIds: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainIds),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.epoch.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.epoch);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochExpectedChainsUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochExpectedChainsUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &EpochExpectedChainsUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `GasAggregatorAddressUpdated(address,address)` and selector `0x302f5435119022728eaef6d234319e11d908b504f90442eb3be6606fc9545757`.
```solidity
event GasAggregatorAddressUpdated(address indexed oldAddress, address indexed newAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct GasAggregatorAddressUpdated {
        #[allow(missing_docs)]
        pub oldAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for GasAggregatorAddressUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "GasAggregatorAddressUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                48u8, 47u8, 84u8, 53u8, 17u8, 144u8, 34u8, 114u8, 142u8, 174u8, 246u8,
                210u8, 52u8, 49u8, 158u8, 17u8, 217u8, 8u8, 181u8, 4u8, 249u8, 4u8, 66u8,
                235u8, 59u8, 230u8, 96u8, 111u8, 201u8, 84u8, 87u8, 87u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldAddress: topics.1,
                    newAddress: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldAddress.clone(),
                    self.newAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldAddress,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for GasAggregatorAddressUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&GasAggregatorAddressUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &GasAggregatorAddressUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `AGGREGATED_EPOCH_DATA_HASH_SLOT()` and selector `0xe8c46c28`.
```solidity
function AGGREGATED_EPOCH_DATA_HASH_SLOT() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AGGREGATED_EPOCH_DATA_HASH_SLOTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`AGGREGATED_EPOCH_DATA_HASH_SLOT()`](AGGREGATED_EPOCH_DATA_HASH_SLOTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AGGREGATED_EPOCH_DATA_HASH_SLOTReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATED_EPOCH_DATA_HASH_SLOTCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATED_EPOCH_DATA_HASH_SLOTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATED_EPOCH_DATA_HASH_SLOTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATED_EPOCH_DATA_HASH_SLOTReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATED_EPOCH_DATA_HASH_SLOTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATED_EPOCH_DATA_HASH_SLOTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATED_EPOCH_DATA_HASH_SLOT()";
            const SELECTOR: [u8; 4] = [232u8, 196u8, 108u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `HEADER_STATE_ROOT_INDEX()` and selector `0xe18b4dae`.
```solidity
function HEADER_STATE_ROOT_INDEX() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEADER_STATE_ROOT_INDEXCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`HEADER_STATE_ROOT_INDEX()`](HEADER_STATE_ROOT_INDEXCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEADER_STATE_ROOT_INDEXReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEADER_STATE_ROOT_INDEXCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEADER_STATE_ROOT_INDEXCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEADER_STATE_ROOT_INDEXCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEADER_STATE_ROOT_INDEXReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEADER_STATE_ROOT_INDEXReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEADER_STATE_ROOT_INDEXReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for HEADER_STATE_ROOT_INDEXCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HEADER_STATE_ROOT_INDEX()";
            const SELECTOR: [u8; 4] = [225u8, 139u8, 77u8, 174u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: HEADER_STATE_ROOT_INDEXReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: HEADER_STATE_ROOT_INDEXReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()` and selector `0x6b4d17ad`.
```solidity
function STORAGE_ROOT_ACCOUNT_FIELDS_INDEX() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()`](STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()";
            const SELECTOR: [u8; 4] = [107u8, 77u8, 23u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addSequencingChain(uint256,address,address,uint256)` and selector `0x133bf89f`.
```solidity
function addSequencingChain(uint256 chainID, address aggregatorAddress, address bridgeAddress, uint256 storageSlotIndex) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencingChainCall {
        #[allow(missing_docs)]
        pub chainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub aggregatorAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub storageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`addSequencingChain(uint256,address,address,uint256)`](addSequencingChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencingChainReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencingChainCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencingChainCall) -> Self {
                    (
                        value.chainID,
                        value.aggregatorAddress,
                        value.bridgeAddress,
                        value.storageSlotIndex,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencingChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainID: tuple.0,
                        aggregatorAddress: tuple.1,
                        bridgeAddress: tuple.2,
                        storageSlotIndex: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencingChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencingChainReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencingChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addSequencingChainReturn {
            fn _tokenize(
                &self,
            ) -> <addSequencingChainCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addSequencingChainCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addSequencingChainReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addSequencingChain(uint256,address,address,uint256)";
            const SELECTOR: [u8; 4] = [19u8, 59u8, 248u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainID),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aggregatorAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.storageSlotIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addSequencingChainReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `blockHashSender()` and selector `0x362b8154`.
```solidity
function blockHashSender() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashSenderCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`blockHashSender()`](blockHashSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashSenderReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashSenderCall> for UnderlyingRustTuple<'_> {
                fn from(value: blockHashSenderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockHashSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockHashSenderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockHashSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockHashSenderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockHashSender()";
            const SELECTOR: [u8; 4] = [54u8, 43u8, 129u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: blockHashSenderReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: blockHashSenderReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[],uint256[],uint256[],address[])` and selector `0x3271ba49`.
```solidity
function confirmEpochDataHash(uint256 epoch, uint256 seqChainID, bytes memory seqChainBlockHeader, bytes[] memory seqChainAccountProof, bytes[] memory seqChainStorageProof, uint256[] memory appchains, uint256[] memory tokens, address[] memory emissionsReceivers) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEpochDataHashCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainBlockHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub seqChainAccountProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub seqChainStorageProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub appchains: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub tokens: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub emissionsReceivers: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[],uint256[],uint256[],address[])`](confirmEpochDataHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEpochDataHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEpochDataHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEpochDataHashCall) -> Self {
                    (
                        value.epoch,
                        value.seqChainID,
                        value.seqChainBlockHeader,
                        value.seqChainAccountProof,
                        value.seqChainStorageProof,
                        value.appchains,
                        value.tokens,
                        value.emissionsReceivers,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEpochDataHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        seqChainID: tuple.1,
                        seqChainBlockHeader: tuple.2,
                        seqChainAccountProof: tuple.3,
                        seqChainStorageProof: tuple.4,
                        appchains: tuple.5,
                        tokens: tuple.6,
                        emissionsReceivers: tuple.7,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEpochDataHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEpochDataHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEpochDataHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl confirmEpochDataHashReturn {
            fn _tokenize(
                &self,
            ) -> <confirmEpochDataHashCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmEpochDataHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmEpochDataHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[],uint256[],uint256[],address[])";
            const SELECTOR: [u8; 4] = [50u8, 113u8, 186u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.seqChainBlockHeader,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainAccountProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainStorageProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchains),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokens),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.emissionsReceivers),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                confirmEpochDataHashReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])` and selector `0x1bf4951c`.
```solidity
function confirmSequencingChainBlockHash(uint256 seqChainID, bytes32 sendRoot, bytes memory ethereumBlockHeader, bytes[] memory ethereumAccountProof, bytes[] memory ethereumStorageProof) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmSequencingChainBlockHashCall {
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sendRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub ethereumBlockHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub ethereumAccountProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub ethereumStorageProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
    }
    ///Container type for the return parameters of the [`confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])`](confirmSequencingChainBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmSequencingChainBlockHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmSequencingChainBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmSequencingChainBlockHashCall) -> Self {
                    (
                        value.seqChainID,
                        value.sendRoot,
                        value.ethereumBlockHeader,
                        value.ethereumAccountProof,
                        value.ethereumStorageProof,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmSequencingChainBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        seqChainID: tuple.0,
                        sendRoot: tuple.1,
                        ethereumBlockHeader: tuple.2,
                        ethereumAccountProof: tuple.3,
                        ethereumStorageProof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmSequencingChainBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmSequencingChainBlockHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmSequencingChainBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl confirmSequencingChainBlockHashReturn {
            fn _tokenize(
                &self,
            ) -> <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmSequencingChainBlockHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmSequencingChainBlockHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])";
            const SELECTOR: [u8; 4] = [27u8, 244u8, 149u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.sendRoot),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.ethereumBlockHeader,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethereumAccountProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethereumStorageProof),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                confirmSequencingChainBlockHashReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainEmissionsReceiver(uint256,uint256)` and selector `0x5b1817e8`.
```solidity
function epochAppchainEmissionsReceiver(uint256 epoch, uint256 appchainId) external view returns (address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainEmissionsReceiverCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainEmissionsReceiver(uint256,uint256)`](epochAppchainEmissionsReceiverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainEmissionsReceiverReturn {
        #[allow(missing_docs)]
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainEmissionsReceiverCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainEmissionsReceiverCall) -> Self {
                    (value.epoch, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainEmissionsReceiverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainEmissionsReceiverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainEmissionsReceiverReturn) -> Self {
                    (value.receiver,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainEmissionsReceiverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { receiver: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainEmissionsReceiverCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainEmissionsReceiver(uint256,uint256)";
            const SELECTOR: [u8; 4] = [91u8, 24u8, 23u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainEmissionsReceiverReturn = r.into();
                        r.receiver
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainEmissionsReceiverReturn = r.into();
                        r.receiver
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainIDs(uint256,uint256)` and selector `0xff87c18c`.
```solidity
function epochAppchainIDs(uint256 epoch, uint256) external view returns (uint256 appchainIds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainIDsCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainIDs(uint256,uint256)`](epochAppchainIDsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainIDsReturn {
        #[allow(missing_docs)]
        pub appchainIds: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainIDsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainIDsCall) -> Self {
                    (value.epoch, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainIDsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainIDsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainIDsReturn) -> Self {
                    (value.appchainIds,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainIDsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { appchainIds: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainIDsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainIDs(uint256,uint256)";
            const SELECTOR: [u8; 4] = [255u8, 135u8, 193u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainIDsReturn = r.into();
                        r.appchainIds
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainIDsReturn = r.into();
                        r.appchainIds
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainTokensUsed(uint256,uint256)` and selector `0x55fcc556`.
```solidity
function epochAppchainTokensUsed(uint256 epoch, uint256 appchainId) external view returns (uint256 tokens);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainTokensUsedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainTokensUsed(uint256,uint256)`](epochAppchainTokensUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainTokensUsedReturn {
        #[allow(missing_docs)]
        pub tokens: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainTokensUsedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainTokensUsedCall) -> Self {
                    (value.epoch, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainTokensUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainTokensUsedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainTokensUsedReturn) -> Self {
                    (value.tokens,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainTokensUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokens: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainTokensUsedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainTokensUsed(uint256,uint256)";
            const SELECTOR: [u8; 4] = [85u8, 252u8, 197u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainTokensUsedReturn = r.into();
                        r.tokens
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainTokensUsedReturn = r.into();
                        r.tokens
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochChainDataSubmitted(uint256,uint256)` and selector `0x5a633080`.
```solidity
function epochChainDataSubmitted(uint256 epoch, uint256 chainId) external view returns (bool submitted);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochChainDataSubmittedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochChainDataSubmitted(uint256,uint256)`](epochChainDataSubmittedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochChainDataSubmittedReturn {
        #[allow(missing_docs)]
        pub submitted: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochChainDataSubmittedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochChainDataSubmittedCall) -> Self {
                    (value.epoch, value.chainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochChainDataSubmittedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        chainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochChainDataSubmittedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochChainDataSubmittedReturn) -> Self {
                    (value.submitted,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochChainDataSubmittedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { submitted: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochChainDataSubmittedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochChainDataSubmitted(uint256,uint256)";
            const SELECTOR: [u8; 4] = [90u8, 99u8, 48u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochChainDataSubmittedReturn = r.into();
                        r.submitted
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochChainDataSubmittedReturn = r.into();
                        r.submitted
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochCompleted(uint256)` and selector `0x30c709b6`.
```solidity
function epochCompleted(uint256 epoch) external view returns (bool completed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochCompletedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochCompleted(uint256)`](epochCompletedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochCompletedReturn {
        #[allow(missing_docs)]
        pub completed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochCompletedCall> for UnderlyingRustTuple<'_> {
                fn from(value: epochCompletedCall) -> Self {
                    (value.epoch,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for epochCompletedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epoch: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochCompletedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochCompletedReturn) -> Self {
                    (value.completed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochCompletedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { completed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochCompletedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochCompleted(uint256)";
            const SELECTOR: [u8; 4] = [48u8, 199u8, 9u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochCompletedReturn = r.into();
                        r.completed
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochCompletedReturn = r.into();
                        r.completed
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochExpectedChains(uint256,uint256)` and selector `0x5d579a61`.
```solidity
function epochExpectedChains(uint256 epoch, uint256) external view returns (uint256 chainIds);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochExpectedChainsCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochExpectedChains(uint256,uint256)`](epochExpectedChainsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochExpectedChainsReturn {
        #[allow(missing_docs)]
        pub chainIds: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochExpectedChainsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochExpectedChainsCall) -> Self {
                    (value.epoch, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochExpectedChainsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        _1: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochExpectedChainsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochExpectedChainsReturn) -> Self {
                    (value.chainIds,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochExpectedChainsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainIds: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochExpectedChainsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochExpectedChains(uint256,uint256)";
            const SELECTOR: [u8; 4] = [93u8, 87u8, 154u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochExpectedChainsReturn = r.into();
                        r.chainIds
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochExpectedChainsReturn = r.into();
                        r.chainIds
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochTotalTokensUsed(uint256)` and selector `0x47dff69d`.
```solidity
function epochTotalTokensUsed(uint256 epoch) external view returns (uint256 totalTokens);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochTotalTokensUsedCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochTotalTokensUsed(uint256)`](epochTotalTokensUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochTotalTokensUsedReturn {
        #[allow(missing_docs)]
        pub totalTokens: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochTotalTokensUsedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochTotalTokensUsedCall) -> Self {
                    (value.epoch,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochTotalTokensUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epoch: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochTotalTokensUsedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochTotalTokensUsedReturn) -> Self {
                    (value.totalTokens,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochTotalTokensUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { totalTokens: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochTotalTokensUsedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochTotalTokensUsed(uint256)";
            const SELECTOR: [u8; 4] = [71u8, 223u8, 246u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochTotalTokensUsedReturn = r.into();
                        r.totalTokens
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochTotalTokensUsedReturn = r.into();
                        r.totalTokens
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveAppchainIds(uint256)` and selector `0x2cd078b8`.
```solidity
function getActiveAppchainIds(uint256 epochIndex) external view returns (uint256[] memory _chainIDs);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveAppchainIdsCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveAppchainIds(uint256)`](getActiveAppchainIdsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveAppchainIdsReturn {
        #[allow(missing_docs)]
        pub _chainIDs: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveAppchainIdsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveAppchainIdsCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveAppchainIdsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveAppchainIdsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveAppchainIdsReturn) -> Self {
                    (value._chainIDs,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveAppchainIdsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _chainIDs: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveAppchainIdsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveAppchainIds(uint256)";
            const SELECTOR: [u8; 4] = [44u8, 208u8, 120u8, 184u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveAppchainIdsReturn = r.into();
                        r._chainIDs
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveAppchainIdsReturn = r.into();
                        r._chainIDs
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAppchainGasFees(uint256,uint256)` and selector `0x285f2446`.
```solidity
function getAppchainGasFees(uint256 epochIndex, uint256 appchainId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainGasFeesCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAppchainGasFees(uint256,uint256)`](getAppchainGasFeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainGasFeesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainGasFeesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainGasFeesCall) -> Self {
                    (value.epochIndex, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainGasFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochIndex: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainGasFeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainGasFeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainGasFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppchainGasFeesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppchainGasFees(uint256,uint256)";
            const SELECTOR: [u8; 4] = [40u8, 95u8, 36u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAppchainGasFeesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAppchainGasFeesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAppchainRewardsReceiver(uint256,uint256)` and selector `0xec828a91`.
```solidity
function getAppchainRewardsReceiver(uint256 epochIndex, uint256 appchainId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainRewardsReceiverCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAppchainRewardsReceiver(uint256,uint256)`](getAppchainRewardsReceiverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainRewardsReceiverReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainRewardsReceiverCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainRewardsReceiverCall) -> Self {
                    (value.epochIndex, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainRewardsReceiverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochIndex: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainRewardsReceiverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainRewardsReceiverReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainRewardsReceiverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppchainRewardsReceiverCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppchainRewardsReceiver(uint256,uint256)";
            const SELECTOR: [u8; 4] = [236u8, 130u8, 138u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAppchainRewardsReceiverReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAppchainRewardsReceiverReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getEpochExpectedChains(uint256)` and selector `0x7c6edb3e`.
```solidity
function getEpochExpectedChains(uint256 epochIndex) external view returns (uint256[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochExpectedChainsCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getEpochExpectedChains(uint256)`](getEpochExpectedChainsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochExpectedChainsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochExpectedChainsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochExpectedChainsCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochExpectedChainsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochExpectedChainsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochExpectedChainsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochExpectedChainsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getEpochExpectedChainsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getEpochExpectedChains(uint256)";
            const SELECTOR: [u8; 4] = [124u8, 110u8, 219u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getEpochExpectedChainsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getEpochExpectedChainsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getEpochProgress(uint256)` and selector `0x4e6da2a4`.
```solidity
function getEpochProgress(uint256 epochIndex) external view returns (bool completed, uint256 totalExpected, uint256 totalSubmitted);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochProgressCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getEpochProgress(uint256)`](getEpochProgressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEpochProgressReturn {
        #[allow(missing_docs)]
        pub completed: bool,
        #[allow(missing_docs)]
        pub totalExpected: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub totalSubmitted: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochProgressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochProgressCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochProgressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                bool,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEpochProgressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEpochProgressReturn) -> Self {
                    (value.completed, value.totalExpected, value.totalSubmitted)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEpochProgressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        completed: tuple.0,
                        totalExpected: tuple.1,
                        totalSubmitted: tuple.2,
                    }
                }
            }
        }
        impl getEpochProgressReturn {
            fn _tokenize(
                &self,
            ) -> <getEpochProgressCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.completed,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.totalExpected),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.totalSubmitted),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getEpochProgressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getEpochProgressReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getEpochProgress(uint256)";
            const SELECTOR: [u8; 4] = [78u8, 109u8, 162u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                getEpochProgressReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getTotalGasFees(uint256)` and selector `0xce537c9f`.
```solidity
function getTotalGasFees(uint256 epochIndex) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalGasFeesCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getTotalGasFees(uint256)`](getTotalGasFeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalGasFeesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalGasFeesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getTotalGasFeesCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTotalGasFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalGasFeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTotalGasFeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTotalGasFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTotalGasFeesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTotalGasFees(uint256)";
            const SELECTOR: [u8; 4] = [206u8, 83u8, 124u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getTotalGasFeesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getTotalGasFeesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl grantRoleReturn {
            fn _tokenize(
                &self,
            ) -> <grantRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                grantRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasChainSubmittedForEpoch(uint256,uint256)` and selector `0x95814bf5`.
```solidity
function hasChainSubmittedForEpoch(uint256 epochIndex, uint256 chainId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasChainSubmittedForEpochCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasChainSubmittedForEpoch(uint256,uint256)`](hasChainSubmittedForEpochCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasChainSubmittedForEpochReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasChainSubmittedForEpochCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasChainSubmittedForEpochCall) -> Self {
                    (value.epochIndex, value.chainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasChainSubmittedForEpochCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochIndex: tuple.0,
                        chainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasChainSubmittedForEpochReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hasChainSubmittedForEpochReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hasChainSubmittedForEpochReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasChainSubmittedForEpochCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasChainSubmittedForEpoch(uint256,uint256)";
            const SELECTOR: [u8; 4] = [149u8, 129u8, 75u8, 245u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasChainSubmittedForEpochReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasChainSubmittedForEpochReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initialize(address,uint256,address)` and selector `0xc350a1b5`.
```solidity
function initialize(address _blockHashSender, uint256 _settlementChainID, address admin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _blockHashSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value._blockHashSender, value._settlementChainID, value.admin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _blockHashSender: tuple.0,
                        _settlementChainID: tuple.1,
                        admin: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl initializeReturn {
            fn _tokenize(
                &self,
            ) -> <initializeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,address)";
            const SELECTOR: [u8; 4] = [195u8, 80u8, 161u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._blockHashSender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._settlementChainID),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                initializeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownEthereumBlockHash()` and selector `0x23afb0ff`.
```solidity
function lastKnownEthereumBlockHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownEthereumBlockHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownEthereumBlockHash()`](lastKnownEthereumBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownEthereumBlockHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownEthereumBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownEthereumBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownEthereumBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownEthereumBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownEthereumBlockHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownEthereumBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownEthereumBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownEthereumBlockHash()";
            const SELECTOR: [u8; 4] = [35u8, 175u8, 176u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownEthereumBlockHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownEthereumBlockHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownSeqChainBlockHashes(uint256)` and selector `0x7a7f34e8`.
```solidity
function lastKnownSeqChainBlockHashes(uint256 chainId) external view returns (bytes32 blockHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSeqChainBlockHashesCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownSeqChainBlockHashes(uint256)`](lastKnownSeqChainBlockHashesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSeqChainBlockHashesReturn {
        #[allow(missing_docs)]
        pub blockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSeqChainBlockHashesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSeqChainBlockHashesCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSeqChainBlockHashesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSeqChainBlockHashesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSeqChainBlockHashesReturn) -> Self {
                    (value.blockHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSeqChainBlockHashesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blockHash: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownSeqChainBlockHashesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownSeqChainBlockHashes(uint256)";
            const SELECTOR: [u8; 4] = [122u8, 127u8, 52u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownSeqChainBlockHashesReturn = r.into();
                        r.blockHash
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownSeqChainBlockHashesReturn = r.into();
                        r.blockHash
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownSettlementChainBlockHash()` and selector `0xef512221`.
```solidity
function lastKnownSettlementChainBlockHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownSettlementChainBlockHash()`](lastKnownSettlementChainBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownSettlementChainBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownSettlementChainBlockHash()";
            const SELECTOR: [u8; 4] = [239u8, 81u8, 34u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `removeSeqChain(uint256)` and selector `0x650e1312`.
```solidity
function removeSeqChain(uint256 chainID) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeSeqChainCall {
        #[allow(missing_docs)]
        pub chainID: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`removeSeqChain(uint256)`](removeSeqChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeSeqChainReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeSeqChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeSeqChainCall) -> Self {
                    (value.chainID,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeSeqChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainID: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeSeqChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeSeqChainReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeSeqChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl removeSeqChainReturn {
            fn _tokenize(
                &self,
            ) -> <removeSeqChainCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeSeqChainCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeSeqChainReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeSeqChain(uint256)";
            const SELECTOR: [u8; 4] = [101u8, 14u8, 19u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainID),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                removeSeqChainReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceRoleReturn {
            fn _tokenize(
                &self,
            ) -> <renounceRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeRoleReturn {
            fn _tokenize(
                &self,
            ) -> <revokeRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainEthOutbox(uint256)` and selector `0xfdd54123`.
```solidity
function seqChainEthOutbox(uint256 chainId) external view returns (address outboxAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthOutboxCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainEthOutbox(uint256)`](seqChainEthOutboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthOutboxReturn {
        #[allow(missing_docs)]
        pub outboxAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthOutboxCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthOutboxCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthOutboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthOutboxReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthOutboxReturn) -> Self {
                    (value.outboxAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthOutboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { outboxAddress: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainEthOutboxCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainEthOutbox(uint256)";
            const SELECTOR: [u8; 4] = [253u8, 213u8, 65u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainEthOutboxReturn = r.into();
                        r.outboxAddress
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainEthOutboxReturn = r.into();
                        r.outboxAddress
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainEthSendRootStorageSlot(uint256)` and selector `0xfd79d3e1`.
```solidity
function seqChainEthSendRootStorageSlot(uint256 chainId) external view returns (uint256 sendRootStorageSlotIndex);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthSendRootStorageSlotCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainEthSendRootStorageSlot(uint256)`](seqChainEthSendRootStorageSlotCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthSendRootStorageSlotReturn {
        #[allow(missing_docs)]
        pub sendRootStorageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthSendRootStorageSlotCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthSendRootStorageSlotCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthSendRootStorageSlotCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthSendRootStorageSlotReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthSendRootStorageSlotReturn) -> Self {
                    (value.sendRootStorageSlotIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthSendRootStorageSlotReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sendRootStorageSlotIndex: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainEthSendRootStorageSlotCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainEthSendRootStorageSlot(uint256)";
            const SELECTOR: [u8; 4] = [253u8, 121u8, 211u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainEthSendRootStorageSlotReturn = r.into();
                        r.sendRootStorageSlotIndex
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainEthSendRootStorageSlotReturn = r.into();
                        r.sendRootStorageSlotIndex
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainGasAggregatorAddresses(uint256)` and selector `0x8dd50eee`.
```solidity
function seqChainGasAggregatorAddresses(uint256 chainId) external view returns (address aggregatorAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainGasAggregatorAddressesCall {
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainGasAggregatorAddresses(uint256)`](seqChainGasAggregatorAddressesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainGasAggregatorAddressesReturn {
        #[allow(missing_docs)]
        pub aggregatorAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainGasAggregatorAddressesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainGasAggregatorAddressesCall) -> Self {
                    (value.chainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainGasAggregatorAddressesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainGasAggregatorAddressesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainGasAggregatorAddressesReturn) -> Self {
                    (value.aggregatorAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainGasAggregatorAddressesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { aggregatorAddress: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainGasAggregatorAddressesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainGasAggregatorAddresses(uint256)";
            const SELECTOR: [u8; 4] = [141u8, 213u8, 14u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainGasAggregatorAddressesReturn = r.into();
                        r.aggregatorAddress
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainGasAggregatorAddressesReturn = r.into();
                        r.aggregatorAddress
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainIDs(uint256)` and selector `0xd26bcc80`.
```solidity
function seqChainIDs(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainIDsCall(pub alloy::sol_types::private::primitives::aliases::U256);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainIDs(uint256)`](seqChainIDsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainIDsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainIDsCall> for UnderlyingRustTuple<'_> {
                fn from(value: seqChainIDsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for seqChainIDsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainIDsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: seqChainIDsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for seqChainIDsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainIDsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainIDs(uint256)";
            const SELECTOR: [u8; 4] = [210u8, 107u8, 204u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainIDsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainIDsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setBlockHashSender(address)` and selector `0x7c715094`.
```solidity
function setBlockHashSender(address newBlockHashSender) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockHashSenderCall {
        #[allow(missing_docs)]
        pub newBlockHashSender: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setBlockHashSender(address)`](setBlockHashSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockHashSenderReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockHashSenderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBlockHashSenderCall) -> Self {
                    (value.newBlockHashSender,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBlockHashSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newBlockHashSender: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockHashSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBlockHashSenderReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBlockHashSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setBlockHashSenderReturn {
            fn _tokenize(
                &self,
            ) -> <setBlockHashSenderCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBlockHashSenderCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBlockHashSenderReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBlockHashSender(address)";
            const SELECTOR: [u8; 4] = [124u8, 113u8, 80u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newBlockHashSender,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setBlockHashSenderReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setEpochExpectedChains(uint256,uint256[])` and selector `0x0344571f`.
```solidity
function setEpochExpectedChains(uint256 epoch, uint256[] memory chainIds) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setEpochExpectedChainsCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainIds: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`setEpochExpectedChains(uint256,uint256[])`](setEpochExpectedChainsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setEpochExpectedChainsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setEpochExpectedChainsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setEpochExpectedChainsCall) -> Self {
                    (value.epoch, value.chainIds)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setEpochExpectedChainsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        chainIds: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setEpochExpectedChainsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setEpochExpectedChainsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setEpochExpectedChainsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setEpochExpectedChainsReturn {
            fn _tokenize(
                &self,
            ) -> <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setEpochExpectedChainsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setEpochExpectedChainsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setEpochExpectedChains(uint256,uint256[])";
            const SELECTOR: [u8; 4] = [3u8, 68u8, 87u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainIds),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setEpochExpectedChainsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setLastKnownBlockHashes(bytes32,bytes32)` and selector `0x84211ca9`.
```solidity
function setLastKnownBlockHashes(bytes32 ethBlockHash, bytes32 settlementBlockHash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLastKnownBlockHashesCall {
        #[allow(missing_docs)]
        pub ethBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub settlementBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setLastKnownBlockHashes(bytes32,bytes32)`](setLastKnownBlockHashesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLastKnownBlockHashesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLastKnownBlockHashesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLastKnownBlockHashesCall) -> Self {
                    (value.ethBlockHash, value.settlementBlockHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLastKnownBlockHashesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        ethBlockHash: tuple.0,
                        settlementBlockHash: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLastKnownBlockHashesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLastKnownBlockHashesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLastKnownBlockHashesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setLastKnownBlockHashesReturn {
            fn _tokenize(
                &self,
            ) -> <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setLastKnownBlockHashesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setLastKnownBlockHashesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setLastKnownBlockHashes(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [132u8, 33u8, 28u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementBlockHash),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setLastKnownBlockHashesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `settlementChainID()` and selector `0x22623897`.
```solidity
function settlementChainID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`settlementChainID()`](settlementChainIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainIDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainIDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for settlementChainIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "settlementChainID()";
            const SELECTOR: [u8; 4] = [34u8, 98u8, 56u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: settlementChainIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: settlementChainIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`GasArchive`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum GasArchiveCalls {
        #[allow(missing_docs)]
        AGGREGATED_EPOCH_DATA_HASH_SLOT(AGGREGATED_EPOCH_DATA_HASH_SLOTCall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        HEADER_STATE_ROOT_INDEX(HEADER_STATE_ROOT_INDEXCall),
        #[allow(missing_docs)]
        STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall),
        #[allow(missing_docs)]
        addSequencingChain(addSequencingChainCall),
        #[allow(missing_docs)]
        blockHashSender(blockHashSenderCall),
        #[allow(missing_docs)]
        confirmEpochDataHash(confirmEpochDataHashCall),
        #[allow(missing_docs)]
        confirmSequencingChainBlockHash(confirmSequencingChainBlockHashCall),
        #[allow(missing_docs)]
        epochAppchainEmissionsReceiver(epochAppchainEmissionsReceiverCall),
        #[allow(missing_docs)]
        epochAppchainIDs(epochAppchainIDsCall),
        #[allow(missing_docs)]
        epochAppchainTokensUsed(epochAppchainTokensUsedCall),
        #[allow(missing_docs)]
        epochChainDataSubmitted(epochChainDataSubmittedCall),
        #[allow(missing_docs)]
        epochCompleted(epochCompletedCall),
        #[allow(missing_docs)]
        epochExpectedChains(epochExpectedChainsCall),
        #[allow(missing_docs)]
        epochTotalTokensUsed(epochTotalTokensUsedCall),
        #[allow(missing_docs)]
        getActiveAppchainIds(getActiveAppchainIdsCall),
        #[allow(missing_docs)]
        getAppchainGasFees(getAppchainGasFeesCall),
        #[allow(missing_docs)]
        getAppchainRewardsReceiver(getAppchainRewardsReceiverCall),
        #[allow(missing_docs)]
        getEpochExpectedChains(getEpochExpectedChainsCall),
        #[allow(missing_docs)]
        getEpochProgress(getEpochProgressCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        getTotalGasFees(getTotalGasFeesCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasChainSubmittedForEpoch(hasChainSubmittedForEpochCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        lastKnownEthereumBlockHash(lastKnownEthereumBlockHashCall),
        #[allow(missing_docs)]
        lastKnownSeqChainBlockHashes(lastKnownSeqChainBlockHashesCall),
        #[allow(missing_docs)]
        lastKnownSettlementChainBlockHash(lastKnownSettlementChainBlockHashCall),
        #[allow(missing_docs)]
        removeSeqChain(removeSeqChainCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        seqChainEthOutbox(seqChainEthOutboxCall),
        #[allow(missing_docs)]
        seqChainEthSendRootStorageSlot(seqChainEthSendRootStorageSlotCall),
        #[allow(missing_docs)]
        seqChainGasAggregatorAddresses(seqChainGasAggregatorAddressesCall),
        #[allow(missing_docs)]
        seqChainIDs(seqChainIDsCall),
        #[allow(missing_docs)]
        setBlockHashSender(setBlockHashSenderCall),
        #[allow(missing_docs)]
        setEpochExpectedChains(setEpochExpectedChainsCall),
        #[allow(missing_docs)]
        setLastKnownBlockHashes(setLastKnownBlockHashesCall),
        #[allow(missing_docs)]
        settlementChainID(settlementChainIDCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
    }
    #[automatically_derived]
    impl GasArchiveCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [3u8, 68u8, 87u8, 31u8],
            [19u8, 59u8, 248u8, 159u8],
            [27u8, 244u8, 149u8, 28u8],
            [34u8, 98u8, 56u8, 151u8],
            [35u8, 175u8, 176u8, 255u8],
            [36u8, 138u8, 156u8, 163u8],
            [40u8, 95u8, 36u8, 70u8],
            [44u8, 208u8, 120u8, 184u8],
            [47u8, 47u8, 241u8, 93u8],
            [48u8, 199u8, 9u8, 182u8],
            [50u8, 113u8, 186u8, 73u8],
            [54u8, 43u8, 129u8, 84u8],
            [54u8, 86u8, 138u8, 190u8],
            [71u8, 223u8, 246u8, 157u8],
            [78u8, 109u8, 162u8, 164u8],
            [85u8, 252u8, 197u8, 86u8],
            [90u8, 99u8, 48u8, 128u8],
            [91u8, 24u8, 23u8, 232u8],
            [93u8, 87u8, 154u8, 97u8],
            [101u8, 14u8, 19u8, 18u8],
            [107u8, 77u8, 23u8, 173u8],
            [122u8, 127u8, 52u8, 232u8],
            [124u8, 110u8, 219u8, 62u8],
            [124u8, 113u8, 80u8, 148u8],
            [132u8, 33u8, 28u8, 169u8],
            [141u8, 213u8, 14u8, 238u8],
            [145u8, 209u8, 72u8, 84u8],
            [149u8, 129u8, 75u8, 245u8],
            [162u8, 23u8, 253u8, 223u8],
            [195u8, 80u8, 161u8, 181u8],
            [206u8, 83u8, 124u8, 159u8],
            [210u8, 107u8, 204u8, 128u8],
            [213u8, 71u8, 116u8, 31u8],
            [225u8, 139u8, 77u8, 174u8],
            [232u8, 196u8, 108u8, 40u8],
            [236u8, 130u8, 138u8, 145u8],
            [239u8, 81u8, 34u8, 33u8],
            [253u8, 121u8, 211u8, 225u8],
            [253u8, 213u8, 65u8, 35u8],
            [255u8, 135u8, 193u8, 140u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasArchiveCalls {
        const NAME: &'static str = "GasArchiveCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 41usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(_) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::HEADER_STATE_ROOT_INDEX(_) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(_) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addSequencingChain(_) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blockHashSender(_) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmEpochDataHash(_) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmSequencingChainBlockHash(_) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainEmissionsReceiver(_) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainIDs(_) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainTokensUsed(_) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochChainDataSubmitted(_) => {
                    <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochCompleted(_) => {
                    <epochCompletedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochExpectedChains(_) => {
                    <epochExpectedChainsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochTotalTokensUsed(_) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveAppchainIds(_) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAppchainGasFees(_) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAppchainRewardsReceiver(_) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getEpochExpectedChains(_) => {
                    <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getEpochProgress(_) => {
                    <getEpochProgressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTotalGasFees(_) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasChainSubmittedForEpoch(_) => {
                    <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownEthereumBlockHash(_) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownSeqChainBlockHashes(_) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownSettlementChainBlockHash(_) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeSeqChain(_) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainEthOutbox(_) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainEthSendRootStorageSlot(_) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainGasAggregatorAddresses(_) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainIDs(_) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBlockHashSender(_) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setEpochExpectedChains(_) => {
                    <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setLastKnownBlockHashes(_) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::settlementChainID(_) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn setEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setEpochExpectedChains)
                    }
                    setEpochExpectedChains
                },
                {
                    fn addSequencingChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <addSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::addSequencingChain)
                    }
                    addSequencingChain
                },
                {
                    fn confirmSequencingChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::confirmSequencingChainBlockHash)
                    }
                    confirmSequencingChainBlockHash
                },
                {
                    fn settlementChainID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <settlementChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::settlementChainID)
                    }
                    settlementChainID
                },
                {
                    fn lastKnownEthereumBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownEthereumBlockHash)
                    }
                    lastKnownEthereumBlockHash
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getAppchainGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainGasFees)
                    }
                    getAppchainGasFees
                },
                {
                    fn getActiveAppchainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getActiveAppchainIds)
                    }
                    getActiveAppchainIds
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(GasArchiveCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn epochCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochCompletedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochCompleted)
                    }
                    epochCompleted
                },
                {
                    fn confirmEpochDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::confirmEpochDataHash)
                    }
                    confirmEpochDataHash
                },
                {
                    fn blockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <blockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::blockHashSender)
                    }
                    blockHashSender
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn epochTotalTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochTotalTokensUsed)
                    }
                    epochTotalTokensUsed
                },
                {
                    fn getEpochProgress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochProgressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochProgress)
                    }
                    getEpochProgress
                },
                {
                    fn epochAppchainTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainTokensUsed)
                    }
                    epochAppchainTokensUsed
                },
                {
                    fn epochChainDataSubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochChainDataSubmitted)
                    }
                    epochChainDataSubmitted
                },
                {
                    fn epochAppchainEmissionsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainEmissionsReceiver)
                    }
                    epochAppchainEmissionsReceiver
                },
                {
                    fn epochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochExpectedChains)
                    }
                    epochExpectedChains
                },
                {
                    fn removeSeqChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <removeSeqChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::removeSeqChain)
                    }
                    removeSeqChain
                },
                {
                    fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX)
                    }
                    STORAGE_ROOT_ACCOUNT_FIELDS_INDEX
                },
                {
                    fn lastKnownSeqChainBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSeqChainBlockHashes)
                    }
                    lastKnownSeqChainBlockHashes
                },
                {
                    fn getEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochExpectedChains)
                    }
                    getEpochExpectedChains
                },
                {
                    fn setBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setBlockHashSender)
                    }
                    setBlockHashSender
                },
                {
                    fn setLastKnownBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setLastKnownBlockHashes)
                    }
                    setLastKnownBlockHashes
                },
                {
                    fn seqChainGasAggregatorAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainGasAggregatorAddresses)
                    }
                    seqChainGasAggregatorAddresses
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(GasArchiveCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn hasChainSubmittedForEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::hasChainSubmittedForEpoch)
                    }
                    hasChainSubmittedForEpoch
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn initialize(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::initialize)
                    }
                    initialize
                },
                {
                    fn getTotalGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getTotalGasFees)
                    }
                    getTotalGasFees
                },
                {
                    fn seqChainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainIDs)
                    }
                    seqChainIDs
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn HEADER_STATE_ROOT_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::HEADER_STATE_ROOT_INDEX)
                    }
                    HEADER_STATE_ROOT_INDEX
                },
                {
                    fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::AGGREGATED_EPOCH_DATA_HASH_SLOT)
                    }
                    AGGREGATED_EPOCH_DATA_HASH_SLOT
                },
                {
                    fn getAppchainRewardsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainRewardsReceiver)
                    }
                    getAppchainRewardsReceiver
                },
                {
                    fn lastKnownSettlementChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockHash)
                    }
                    lastKnownSettlementChainBlockHash
                },
                {
                    fn seqChainEthSendRootStorageSlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthSendRootStorageSlot)
                    }
                    seqChainEthSendRootStorageSlot
                },
                {
                    fn seqChainEthOutbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthOutbox)
                    }
                    seqChainEthOutbox
                },
                {
                    fn epochAppchainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainIDs)
                    }
                    epochAppchainIDs
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn setEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setEpochExpectedChains)
                    }
                    setEpochExpectedChains
                },
                {
                    fn addSequencingChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <addSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::addSequencingChain)
                    }
                    addSequencingChain
                },
                {
                    fn confirmSequencingChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::confirmSequencingChainBlockHash)
                    }
                    confirmSequencingChainBlockHash
                },
                {
                    fn settlementChainID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <settlementChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::settlementChainID)
                    }
                    settlementChainID
                },
                {
                    fn lastKnownEthereumBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownEthereumBlockHash)
                    }
                    lastKnownEthereumBlockHash
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getAppchainGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainGasFees)
                    }
                    getAppchainGasFees
                },
                {
                    fn getActiveAppchainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getActiveAppchainIds)
                    }
                    getActiveAppchainIds
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn epochCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochCompletedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochCompleted)
                    }
                    epochCompleted
                },
                {
                    fn confirmEpochDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::confirmEpochDataHash)
                    }
                    confirmEpochDataHash
                },
                {
                    fn blockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <blockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::blockHashSender)
                    }
                    blockHashSender
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn epochTotalTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochTotalTokensUsed)
                    }
                    epochTotalTokensUsed
                },
                {
                    fn getEpochProgress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochProgressCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochProgress)
                    }
                    getEpochProgress
                },
                {
                    fn epochAppchainTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainTokensUsed)
                    }
                    epochAppchainTokensUsed
                },
                {
                    fn epochChainDataSubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochChainDataSubmitted)
                    }
                    epochChainDataSubmitted
                },
                {
                    fn epochAppchainEmissionsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainEmissionsReceiver)
                    }
                    epochAppchainEmissionsReceiver
                },
                {
                    fn epochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochExpectedChains)
                    }
                    epochExpectedChains
                },
                {
                    fn removeSeqChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <removeSeqChainCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::removeSeqChain)
                    }
                    removeSeqChain
                },
                {
                    fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX)
                    }
                    STORAGE_ROOT_ACCOUNT_FIELDS_INDEX
                },
                {
                    fn lastKnownSeqChainBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSeqChainBlockHashes)
                    }
                    lastKnownSeqChainBlockHashes
                },
                {
                    fn getEpochExpectedChains(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getEpochExpectedChains)
                    }
                    getEpochExpectedChains
                },
                {
                    fn setBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setBlockHashSender)
                    }
                    setBlockHashSender
                },
                {
                    fn setLastKnownBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setLastKnownBlockHashes)
                    }
                    setLastKnownBlockHashes
                },
                {
                    fn seqChainGasAggregatorAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainGasAggregatorAddresses)
                    }
                    seqChainGasAggregatorAddresses
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn hasChainSubmittedForEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::hasChainSubmittedForEpoch)
                    }
                    hasChainSubmittedForEpoch
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn initialize(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::initialize)
                    }
                    initialize
                },
                {
                    fn getTotalGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getTotalGasFees)
                    }
                    getTotalGasFees
                },
                {
                    fn seqChainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainIDs)
                    }
                    seqChainIDs
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn HEADER_STATE_ROOT_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::HEADER_STATE_ROOT_INDEX)
                    }
                    HEADER_STATE_ROOT_INDEX
                },
                {
                    fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::AGGREGATED_EPOCH_DATA_HASH_SLOT)
                    }
                    AGGREGATED_EPOCH_DATA_HASH_SLOT
                },
                {
                    fn getAppchainRewardsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainRewardsReceiver)
                    }
                    getAppchainRewardsReceiver
                },
                {
                    fn lastKnownSettlementChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockHash)
                    }
                    lastKnownSettlementChainBlockHash
                },
                {
                    fn seqChainEthSendRootStorageSlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthSendRootStorageSlot)
                    }
                    seqChainEthSendRootStorageSlot
                },
                {
                    fn seqChainEthOutbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthOutbox)
                    }
                    seqChainEthOutbox
                },
                {
                    fn epochAppchainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainIDs)
                    }
                    epochAppchainIDs
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(inner) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::HEADER_STATE_ROOT_INDEX(inner) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(inner) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addSequencingChain(inner) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blockHashSender(inner) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmEpochDataHash(inner) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmSequencingChainBlockHash(inner) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainEmissionsReceiver(inner) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainIDs(inner) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainTokensUsed(inner) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochChainDataSubmitted(inner) => {
                    <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochCompleted(inner) => {
                    <epochCompletedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochExpectedChains(inner) => {
                    <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochTotalTokensUsed(inner) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveAppchainIds(inner) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAppchainGasFees(inner) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAppchainRewardsReceiver(inner) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getEpochExpectedChains(inner) => {
                    <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getEpochProgress(inner) => {
                    <getEpochProgressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTotalGasFees(inner) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasChainSubmittedForEpoch(inner) => {
                    <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::lastKnownEthereumBlockHash(inner) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastKnownSeqChainBlockHashes(inner) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastKnownSettlementChainBlockHash(inner) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeSeqChain(inner) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::seqChainEthOutbox(inner) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainEthSendRootStorageSlot(inner) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainGasAggregatorAddresses(inner) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainIDs(inner) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBlockHashSender(inner) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setEpochExpectedChains(inner) => {
                    <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setLastKnownBlockHashes(inner) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::settlementChainID(inner) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(inner) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::HEADER_STATE_ROOT_INDEX(inner) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(inner) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addSequencingChain(inner) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blockHashSender(inner) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmEpochDataHash(inner) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmSequencingChainBlockHash(inner) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainEmissionsReceiver(inner) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainIDs(inner) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainTokensUsed(inner) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochChainDataSubmitted(inner) => {
                    <epochChainDataSubmittedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochCompleted(inner) => {
                    <epochCompletedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochExpectedChains(inner) => {
                    <epochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochTotalTokensUsed(inner) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveAppchainIds(inner) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAppchainGasFees(inner) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAppchainRewardsReceiver(inner) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getEpochExpectedChains(inner) => {
                    <getEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getEpochProgress(inner) => {
                    <getEpochProgressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTotalGasFees(inner) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasChainSubmittedForEpoch(inner) => {
                    <hasChainSubmittedForEpochCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownEthereumBlockHash(inner) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownSeqChainBlockHashes(inner) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownSettlementChainBlockHash(inner) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeSeqChain(inner) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainEthOutbox(inner) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainEthSendRootStorageSlot(inner) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainGasAggregatorAddresses(inner) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainIDs(inner) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBlockHashSender(inner) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setEpochExpectedChains(inner) => {
                    <setEpochExpectedChainsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setLastKnownBlockHashes(inner) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::settlementChainID(inner) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasArchive`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum GasArchiveErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        AccountDoesNotExistInProof(AccountDoesNotExistInProof),
        #[allow(missing_docs)]
        AlreadySubmitted(AlreadySubmitted),
        #[allow(missing_docs)]
        CannotSubmitProofForSettlementChain(CannotSubmitProofForSettlementChain),
        #[allow(missing_docs)]
        ChainIDNotFound(ChainIDNotFound),
        #[allow(missing_docs)]
        EmptySlot(EmptySlot),
        #[allow(missing_docs)]
        EpochAlreadyCompleted(EpochAlreadyCompleted),
        #[allow(missing_docs)]
        InvalidData(InvalidData),
        #[allow(missing_docs)]
        InvalidEthereumBlockHeader(InvalidEthereumBlockHeader),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        InvalidProof(InvalidProof),
        #[allow(missing_docs)]
        InvalidSeqChainBlockHeader(InvalidSeqChainBlockHeader),
        #[allow(missing_docs)]
        NotArchivedEpoch(NotArchivedEpoch),
        #[allow(missing_docs)]
        NotBlockHashSender(NotBlockHashSender),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        SequencingChainAlreadyExists(SequencingChainAlreadyExists),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroLengthArray(ZeroLengthArray),
    }
    #[automatically_derived]
    impl GasArchiveErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 189u8, 227u8, 57u8],
            [15u8, 89u8, 185u8, 255u8],
            [18u8, 66u8, 233u8, 187u8],
            [36u8, 178u8, 231u8, 253u8],
            [52u8, 119u8, 220u8, 218u8],
            [84u8, 119u8, 6u8, 175u8],
            [92u8, 176u8, 69u8, 219u8],
            [102u8, 151u8, 178u8, 50u8],
            [157u8, 140u8, 186u8, 205u8],
            [159u8, 191u8, 197u8, 137u8],
            [197u8, 177u8, 69u8, 113u8],
            [215u8, 230u8, 188u8, 248u8],
            [217u8, 46u8, 35u8, 61u8],
            [218u8, 38u8, 18u8, 128u8],
            [223u8, 101u8, 10u8, 0u8],
            [226u8, 81u8, 125u8, 63u8],
            [239u8, 182u8, 76u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
            [253u8, 147u8, 193u8, 95u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasArchiveErrors {
        const NAME: &'static str = "GasArchiveErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccountDoesNotExistInProof(_) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AlreadySubmitted(_) => {
                    <AlreadySubmitted as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CannotSubmitProofForSettlementChain(_) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ChainIDNotFound(_) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptySlot(_) => <EmptySlot as alloy_sol_types::SolError>::SELECTOR,
                Self::EpochAlreadyCompleted(_) => {
                    <EpochAlreadyCompleted as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidData(_) => {
                    <InvalidData as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidEthereumBlockHeader(_) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidProof(_) => {
                    <InvalidProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidSeqChainBlockHeader(_) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotArchivedEpoch(_) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotBlockHashSender(_) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SequencingChainAlreadyExists(_) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroLengthArray(_) => {
                    <ZeroLengthArray as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ZeroLengthArray(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroLengthArray as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::ZeroLengthArray)
                    }
                    ZeroLengthArray
                },
                {
                    fn ChainIDNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ChainIDNotFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::ChainIDNotFound)
                    }
                    ChainIDNotFound
                },
                {
                    fn NotBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotBlockHashSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotBlockHashSender)
                    }
                    NotBlockHashSender
                },
                {
                    fn EmptySlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptySlot as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::EmptySlot)
                    }
                    EmptySlot
                },
                {
                    fn AccountDoesNotExistInProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccountDoesNotExistInProof)
                    }
                    AccountDoesNotExistInProof
                },
                {
                    fn InvalidData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidData as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::InvalidData)
                    }
                    InvalidData
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn InvalidSeqChainBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidSeqChainBlockHeader)
                    }
                    InvalidSeqChainBlockHeader
                },
                {
                    fn AlreadySubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AlreadySubmitted as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AlreadySubmitted)
                    }
                    AlreadySubmitted
                },
                {
                    fn NotArchivedEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotArchivedEpoch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotArchivedEpoch)
                    }
                    NotArchivedEpoch
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn CannotSubmitProofForSettlementChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::CannotSubmitProofForSettlementChain)
                    }
                    CannotSubmitProofForSettlementChain
                },
                {
                    fn SequencingChainAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::SequencingChainAlreadyExists)
                    }
                    SequencingChainAlreadyExists
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidEthereumBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidEthereumBlockHeader)
                    }
                    InvalidEthereumBlockHeader
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
                {
                    fn EpochAlreadyCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::EpochAlreadyCompleted)
                    }
                    EpochAlreadyCompleted
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ZeroLengthArray(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroLengthArray as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ZeroLengthArray)
                    }
                    ZeroLengthArray
                },
                {
                    fn ChainIDNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ChainIDNotFound as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ChainIDNotFound)
                    }
                    ChainIDNotFound
                },
                {
                    fn NotBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotBlockHashSender as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotBlockHashSender)
                    }
                    NotBlockHashSender
                },
                {
                    fn EmptySlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptySlot as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::EmptySlot)
                    }
                    EmptySlot
                },
                {
                    fn AccountDoesNotExistInProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccountDoesNotExistInProof)
                    }
                    AccountDoesNotExistInProof
                },
                {
                    fn InvalidData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidData as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidData)
                    }
                    InvalidData
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn InvalidSeqChainBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidSeqChainBlockHeader)
                    }
                    InvalidSeqChainBlockHeader
                },
                {
                    fn AlreadySubmitted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AlreadySubmitted as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AlreadySubmitted)
                    }
                    AlreadySubmitted
                },
                {
                    fn NotArchivedEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotArchivedEpoch as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotArchivedEpoch)
                    }
                    NotArchivedEpoch
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn CannotSubmitProofForSettlementChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::CannotSubmitProofForSettlementChain)
                    }
                    CannotSubmitProofForSettlementChain
                },
                {
                    fn SequencingChainAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::SequencingChainAlreadyExists)
                    }
                    SequencingChainAlreadyExists
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidEthereumBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidEthereumBlockHeader)
                    }
                    InvalidEthereumBlockHeader
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
                {
                    fn EpochAlreadyCompleted(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::EpochAlreadyCompleted)
                    }
                    EpochAlreadyCompleted
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccountDoesNotExistInProof(inner) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AlreadySubmitted(inner) => {
                    <AlreadySubmitted as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CannotSubmitProofForSettlementChain(inner) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ChainIDNotFound(inner) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptySlot(inner) => {
                    <EmptySlot as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::EpochAlreadyCompleted(inner) => {
                    <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidData(inner) => {
                    <InvalidData as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidEthereumBlockHeader(inner) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidSeqChainBlockHeader(inner) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotArchivedEpoch(inner) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotBlockHashSender(inner) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SequencingChainAlreadyExists(inner) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroLengthArray(inner) => {
                    <ZeroLengthArray as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccountDoesNotExistInProof(inner) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AlreadySubmitted(inner) => {
                    <AlreadySubmitted as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CannotSubmitProofForSettlementChain(inner) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ChainIDNotFound(inner) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptySlot(inner) => {
                    <EmptySlot as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::EpochAlreadyCompleted(inner) => {
                    <EpochAlreadyCompleted as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidData(inner) => {
                    <InvalidData as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidEthereumBlockHeader(inner) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidSeqChainBlockHeader(inner) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotArchivedEpoch(inner) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotBlockHashSender(inner) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SequencingChainAlreadyExists(inner) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroLengthArray(inner) => {
                    <ZeroLengthArray as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasArchive`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum GasArchiveEvents {
        #[allow(missing_docs)]
        EpochCompleted(EpochCompleted),
        #[allow(missing_docs)]
        EpochDataValidated(EpochDataValidated),
        #[allow(missing_docs)]
        EpochExpectedChainsUpdated(EpochExpectedChainsUpdated),
        #[allow(missing_docs)]
        GasAggregatorAddressUpdated(GasAggregatorAddressUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl GasArchiveEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                44u8, 63u8, 68u8, 53u8, 153u8, 198u8, 38u8, 138u8, 206u8, 212u8, 115u8,
                231u8, 102u8, 11u8, 64u8, 116u8, 110u8, 163u8, 148u8, 213u8, 25u8, 23u8,
                158u8, 163u8, 246u8, 15u8, 56u8, 41u8, 116u8, 162u8, 231u8, 142u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                48u8, 47u8, 84u8, 53u8, 17u8, 144u8, 34u8, 114u8, 142u8, 174u8, 246u8,
                210u8, 52u8, 49u8, 158u8, 17u8, 217u8, 8u8, 181u8, 4u8, 249u8, 4u8, 66u8,
                235u8, 59u8, 230u8, 96u8, 111u8, 201u8, 84u8, 87u8, 87u8,
            ],
            [
                120u8, 223u8, 147u8, 129u8, 129u8, 175u8, 203u8, 40u8, 234u8, 167u8,
                208u8, 153u8, 35u8, 91u8, 191u8, 152u8, 119u8, 131u8, 45u8, 111u8, 170u8,
                254u8, 54u8, 209u8, 234u8, 112u8, 145u8, 111u8, 58u8, 206u8, 51u8, 224u8,
            ],
            [
                160u8, 254u8, 161u8, 42u8, 93u8, 253u8, 179u8, 235u8, 240u8, 183u8,
                196u8, 154u8, 125u8, 221u8, 95u8, 253u8, 211u8, 229u8, 178u8, 215u8,
                87u8, 79u8, 241u8, 107u8, 10u8, 16u8, 50u8, 237u8, 193u8, 157u8, 101u8,
                139u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for GasArchiveEvents {
        const NAME: &'static str = "GasArchiveEvents";
        const COUNT: usize = 8usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<EpochCompleted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <EpochCompleted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EpochCompleted)
                }
                Some(
                    <EpochDataValidated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EpochDataValidated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EpochDataValidated)
                }
                Some(
                    <EpochExpectedChainsUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EpochExpectedChainsUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EpochExpectedChainsUpdated)
                }
                Some(
                    <GasAggregatorAddressUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <GasAggregatorAddressUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::GasAggregatorAddressUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::Initialized)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for GasArchiveEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochCompleted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EpochDataValidated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EpochExpectedChainsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::GasAggregatorAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochCompleted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EpochDataValidated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EpochExpectedChainsUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::GasAggregatorAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GasArchive`](self) contract instance.

See the [wrapper's documentation](`GasArchiveInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GasArchiveInstance<P, N> {
        GasArchiveInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GasArchiveInstance<P, N>>,
    > {
        GasArchiveInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        GasArchiveInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`GasArchive`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GasArchive`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GasArchiveInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for GasArchiveInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GasArchiveInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`GasArchive`](self) contract instance.

See the [wrapper's documentation](`GasArchiveInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GasArchiveInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> GasArchiveInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GasArchiveInstance<P, N> {
            GasArchiveInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATED_EPOCH_DATA_HASH_SLOT`] function.
        pub fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, AGGREGATED_EPOCH_DATA_HASH_SLOTCall, N> {
            self.call_builder(&AGGREGATED_EPOCH_DATA_HASH_SLOTCall)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`HEADER_STATE_ROOT_INDEX`] function.
        pub fn HEADER_STATE_ROOT_INDEX(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, HEADER_STATE_ROOT_INDEXCall, N> {
            self.call_builder(&HEADER_STATE_ROOT_INDEXCall)
        }
        ///Creates a new call builder for the [`STORAGE_ROOT_ACCOUNT_FIELDS_INDEX`] function.
        pub fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall,
            N,
        > {
            self.call_builder(&STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall)
        }
        ///Creates a new call builder for the [`addSequencingChain`] function.
        pub fn addSequencingChain(
            &self,
            chainID: alloy::sol_types::private::primitives::aliases::U256,
            aggregatorAddress: alloy::sol_types::private::Address,
            bridgeAddress: alloy::sol_types::private::Address,
            storageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, addSequencingChainCall, N> {
            self.call_builder(
                &addSequencingChainCall {
                    chainID,
                    aggregatorAddress,
                    bridgeAddress,
                    storageSlotIndex,
                },
            )
        }
        ///Creates a new call builder for the [`blockHashSender`] function.
        pub fn blockHashSender(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, blockHashSenderCall, N> {
            self.call_builder(&blockHashSenderCall)
        }
        ///Creates a new call builder for the [`confirmEpochDataHash`] function.
        pub fn confirmEpochDataHash(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
            seqChainBlockHeader: alloy::sol_types::private::Bytes,
            seqChainAccountProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            seqChainStorageProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            appchains: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            tokens: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            emissionsReceivers: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, confirmEpochDataHashCall, N> {
            self.call_builder(
                &confirmEpochDataHashCall {
                    epoch,
                    seqChainID,
                    seqChainBlockHeader,
                    seqChainAccountProof,
                    seqChainStorageProof,
                    appchains,
                    tokens,
                    emissionsReceivers,
                },
            )
        }
        ///Creates a new call builder for the [`confirmSequencingChainBlockHash`] function.
        pub fn confirmSequencingChainBlockHash(
            &self,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
            sendRoot: alloy::sol_types::private::FixedBytes<32>,
            ethereumBlockHeader: alloy::sol_types::private::Bytes,
            ethereumAccountProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            ethereumStorageProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, confirmSequencingChainBlockHashCall, N> {
            self.call_builder(
                &confirmSequencingChainBlockHashCall {
                    seqChainID,
                    sendRoot,
                    ethereumBlockHeader,
                    ethereumAccountProof,
                    ethereumStorageProof,
                },
            )
        }
        ///Creates a new call builder for the [`epochAppchainEmissionsReceiver`] function.
        pub fn epochAppchainEmissionsReceiver(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainEmissionsReceiverCall, N> {
            self.call_builder(
                &epochAppchainEmissionsReceiverCall {
                    epoch,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`epochAppchainIDs`] function.
        pub fn epochAppchainIDs(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainIDsCall, N> {
            self.call_builder(&epochAppchainIDsCall { epoch, _1 })
        }
        ///Creates a new call builder for the [`epochAppchainTokensUsed`] function.
        pub fn epochAppchainTokensUsed(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainTokensUsedCall, N> {
            self.call_builder(
                &epochAppchainTokensUsedCall {
                    epoch,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`epochChainDataSubmitted`] function.
        pub fn epochChainDataSubmitted(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochChainDataSubmittedCall, N> {
            self.call_builder(
                &epochChainDataSubmittedCall {
                    epoch,
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`epochCompleted`] function.
        pub fn epochCompleted(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochCompletedCall, N> {
            self.call_builder(&epochCompletedCall { epoch })
        }
        ///Creates a new call builder for the [`epochExpectedChains`] function.
        pub fn epochExpectedChains(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochExpectedChainsCall, N> {
            self.call_builder(
                &epochExpectedChainsCall {
                    epoch,
                    _1,
                },
            )
        }
        ///Creates a new call builder for the [`epochTotalTokensUsed`] function.
        pub fn epochTotalTokensUsed(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochTotalTokensUsedCall, N> {
            self.call_builder(&epochTotalTokensUsedCall { epoch })
        }
        ///Creates a new call builder for the [`getActiveAppchainIds`] function.
        pub fn getActiveAppchainIds(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveAppchainIdsCall, N> {
            self.call_builder(
                &getActiveAppchainIdsCall {
                    epochIndex,
                },
            )
        }
        ///Creates a new call builder for the [`getAppchainGasFees`] function.
        pub fn getAppchainGasFees(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getAppchainGasFeesCall, N> {
            self.call_builder(
                &getAppchainGasFeesCall {
                    epochIndex,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`getAppchainRewardsReceiver`] function.
        pub fn getAppchainRewardsReceiver(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getAppchainRewardsReceiverCall, N> {
            self.call_builder(
                &getAppchainRewardsReceiverCall {
                    epochIndex,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`getEpochExpectedChains`] function.
        pub fn getEpochExpectedChains(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getEpochExpectedChainsCall, N> {
            self.call_builder(
                &getEpochExpectedChainsCall {
                    epochIndex,
                },
            )
        }
        ///Creates a new call builder for the [`getEpochProgress`] function.
        pub fn getEpochProgress(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getEpochProgressCall, N> {
            self.call_builder(&getEpochProgressCall { epochIndex })
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`getTotalGasFees`] function.
        pub fn getTotalGasFees(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getTotalGasFeesCall, N> {
            self.call_builder(&getTotalGasFeesCall { epochIndex })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasChainSubmittedForEpoch`] function.
        pub fn hasChainSubmittedForEpoch(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, hasChainSubmittedForEpochCall, N> {
            self.call_builder(
                &hasChainSubmittedForEpochCall {
                    epochIndex,
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _blockHashSender: alloy::sol_types::private::Address,
            _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _blockHashSender,
                    _settlementChainID,
                    admin,
                },
            )
        }
        ///Creates a new call builder for the [`lastKnownEthereumBlockHash`] function.
        pub fn lastKnownEthereumBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, lastKnownEthereumBlockHashCall, N> {
            self.call_builder(&lastKnownEthereumBlockHashCall)
        }
        ///Creates a new call builder for the [`lastKnownSeqChainBlockHashes`] function.
        pub fn lastKnownSeqChainBlockHashes(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, lastKnownSeqChainBlockHashesCall, N> {
            self.call_builder(
                &lastKnownSeqChainBlockHashesCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`lastKnownSettlementChainBlockHash`] function.
        pub fn lastKnownSettlementChainBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            lastKnownSettlementChainBlockHashCall,
            N,
        > {
            self.call_builder(&lastKnownSettlementChainBlockHashCall)
        }
        ///Creates a new call builder for the [`removeSeqChain`] function.
        pub fn removeSeqChain(
            &self,
            chainID: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, removeSeqChainCall, N> {
            self.call_builder(&removeSeqChainCall { chainID })
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`seqChainEthOutbox`] function.
        pub fn seqChainEthOutbox(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainEthOutboxCall, N> {
            self.call_builder(&seqChainEthOutboxCall { chainId })
        }
        ///Creates a new call builder for the [`seqChainEthSendRootStorageSlot`] function.
        pub fn seqChainEthSendRootStorageSlot(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainEthSendRootStorageSlotCall, N> {
            self.call_builder(
                &seqChainEthSendRootStorageSlotCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`seqChainGasAggregatorAddresses`] function.
        pub fn seqChainGasAggregatorAddresses(
            &self,
            chainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainGasAggregatorAddressesCall, N> {
            self.call_builder(
                &seqChainGasAggregatorAddressesCall {
                    chainId,
                },
            )
        }
        ///Creates a new call builder for the [`seqChainIDs`] function.
        pub fn seqChainIDs(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainIDsCall, N> {
            self.call_builder(&seqChainIDsCall(_0))
        }
        ///Creates a new call builder for the [`setBlockHashSender`] function.
        pub fn setBlockHashSender(
            &self,
            newBlockHashSender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, setBlockHashSenderCall, N> {
            self.call_builder(
                &setBlockHashSenderCall {
                    newBlockHashSender,
                },
            )
        }
        ///Creates a new call builder for the [`setEpochExpectedChains`] function.
        pub fn setEpochExpectedChains(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            chainIds: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, setEpochExpectedChainsCall, N> {
            self.call_builder(
                &setEpochExpectedChainsCall {
                    epoch,
                    chainIds,
                },
            )
        }
        ///Creates a new call builder for the [`setLastKnownBlockHashes`] function.
        pub fn setLastKnownBlockHashes(
            &self,
            ethBlockHash: alloy::sol_types::private::FixedBytes<32>,
            settlementBlockHash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, setLastKnownBlockHashesCall, N> {
            self.call_builder(
                &setLastKnownBlockHashesCall {
                    ethBlockHash,
                    settlementBlockHash,
                },
            )
        }
        ///Creates a new call builder for the [`settlementChainID`] function.
        pub fn settlementChainID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, settlementChainIDCall, N> {
            self.call_builder(&settlementChainIDCall)
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`EpochCompleted`] event.
        pub fn EpochCompleted_filter(
            &self,
        ) -> alloy_contract::Event<&P, EpochCompleted, N> {
            self.event_filter::<EpochCompleted>()
        }
        ///Creates a new event filter for the [`EpochDataValidated`] event.
        pub fn EpochDataValidated_filter(
            &self,
        ) -> alloy_contract::Event<&P, EpochDataValidated, N> {
            self.event_filter::<EpochDataValidated>()
        }
        ///Creates a new event filter for the [`EpochExpectedChainsUpdated`] event.
        pub fn EpochExpectedChainsUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, EpochExpectedChainsUpdated, N> {
            self.event_filter::<EpochExpectedChainsUpdated>()
        }
        ///Creates a new event filter for the [`GasAggregatorAddressUpdated`] event.
        pub fn GasAggregatorAddressUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, GasAggregatorAddressUpdated, N> {
            self.event_filter::<GasAggregatorAddressUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<&P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(&self) -> alloy_contract::Event<&P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(&self) -> alloy_contract::Event<&P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
