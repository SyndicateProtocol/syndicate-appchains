/**

Generated by the following Solidity interface...
```solidity
interface GasArchive {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error AccountDoesNotExistInProof();
    error CannotSubmitProofForSettlementChain();
    error ChainIDNotFound();
    error EmptySlot();
    error InvalidData();
    error InvalidEthereumBlockHeader();
    error InvalidInitialization();
    error InvalidProof();
    error InvalidSeqChainBlockHeader();
    error NotArchivedEpoch();
    error NotBlockHashSender();
    error NotInitializing();
    error SequencingChainAlreadyExists();
    error ZeroAddress();

    event EpochDataValidated(uint256 indexed epoch, uint256 indexed seqChainID, bytes32 dataHash);
    event GasAggregatorAddressUpdated(address indexed oldAddress, address indexed newAddress);
    event Initialized(uint64 version);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor();

    function AGGREGATED_EPOCH_DATA_HASH_SLOT() external view returns (uint256);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function HEADER_STATE_ROOT_INDEX() external view returns (uint256);
    function STORAGE_ROOT_ACCOUNT_FIELDS_INDEX() external view returns (uint256);
    function addSequencingChain(uint256 chainID, address aggregatorAddress, address bridgeAddress, uint256 storageSlotIndex) external;
    function archivedEpochData(uint256) external view returns (bool);
    function blockHashSender() external view returns (address);
    function confirmEpochDataHash(uint256 epoch, uint256 seqChainID, bytes memory seqChainBlockHeader, bytes[] memory seqChainAccountProof, bytes[] memory seqChainStorageProof, uint256[] memory appchains, uint256[] memory tokens, address[] memory emissionsReceivers) external;
    function confirmSequencingChainBlockHash(uint256 seqChainID, bytes32 sendRoot, bytes memory ethereumBlockHeader, bytes[] memory ethereumAccountProof, bytes[] memory ethereumStorageProof) external;
    function epochAppchainEmissionsReceiver(uint256, uint256) external view returns (address);
    function epochAppchainIDs(uint256, uint256) external view returns (uint256);
    function epochAppchainTokensUsed(uint256, uint256) external view returns (uint256);
    function epochTotalTokensUsed(uint256) external view returns (uint256);
    function getActiveAppchainIds(uint256 epochIndex) external view returns (uint256[] memory _chainIDs);
    function getAppchainGasFees(uint256 epochIndex, uint256 appchainId) external view returns (uint256);
    function getAppchainRewardsReceiver(uint256 epochIndex, uint256 appchainId) external view returns (address);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function getTotalGasFees(uint256 epochIndex) external view returns (uint256);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function initialize(address _blockHashSender, uint256 _settlementChainID, address admin) external;
    function lastKnownEthereumBlockHash() external view returns (bytes32);
    function lastKnownSeqChainBlockHashes(uint256) external view returns (bytes32);
    function lastKnownSettlementChainBlockHash() external view returns (bytes32);
    function removeSeqChain(uint256 chainID) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function seqChainEthOutbox(uint256) external view returns (address);
    function seqChainEthSendRootStorageSlot(uint256) external view returns (uint256);
    function seqChainGasAggregatorAddresses(uint256) external view returns (address);
    function seqChainIDs(uint256) external view returns (uint256);
    function setBlockHashSender(address newBlockHashSender) external;
    function setLastKnownBlockHashes(bytes32 ethBlockHash, bytes32 settlementBlockHash) external;
    function settlementChainID() external view returns (uint256);
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "AGGREGATED_EPOCH_DATA_HASH_SLOT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "HEADER_STATE_ROOT_INDEX",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "STORAGE_ROOT_ACCOUNT_FIELDS_INDEX",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addSequencingChain",
    "inputs": [
      {
        "name": "chainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "aggregatorAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "bridgeAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "storageSlotIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "archivedEpochData",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "blockHashSender",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "confirmEpochDataHash",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "seqChainBlockHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "seqChainAccountProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "seqChainStorageProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "appchains",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "tokens",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "emissionsReceivers",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "confirmSequencingChainBlockHash",
    "inputs": [
      {
        "name": "seqChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sendRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "ethereumBlockHeader",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "ethereumAccountProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "ethereumStorageProof",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "epochAppchainEmissionsReceiver",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochAppchainIDs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochAppchainTokensUsed",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "epochTotalTokensUsed",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveAppchainIds",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "_chainIDs",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppchainGasFees",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAppchainRewardsReceiver",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTotalGasFees",
    "inputs": [
      {
        "name": "epochIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "_blockHashSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_settlementChainID",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "lastKnownEthereumBlockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownSeqChainBlockHashes",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastKnownSettlementChainBlockHash",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removeSeqChain",
    "inputs": [
      {
        "name": "chainID",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "seqChainEthOutbox",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainEthSendRootStorageSlot",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainGasAggregatorAddresses",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "seqChainIDs",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setBlockHashSender",
    "inputs": [
      {
        "name": "newBlockHashSender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setLastKnownBlockHashes",
    "inputs": [
      {
        "name": "ethBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "settlementBlockHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "settlementChainID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "EpochDataValidated",
    "inputs": [
      {
        "name": "epoch",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "seqChainID",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "dataHash",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "GasAggregatorAddressUpdated",
    "inputs": [
      {
        "name": "oldAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAddress",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "AccountDoesNotExistInProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CannotSubmitProofForSettlementChain",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ChainIDNotFound",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptySlot",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidData",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidEthereumBlockHeader",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidSeqChainBlockHeader",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotArchivedEpoch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotBlockHashSender",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SequencingChainAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GasArchive {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080806040523460aa575f516020612de25f395f51905f525460ff8160401c16609b576002600160401b03196001600160401b038216016049575b604051612d3390816100af8239f35b6001600160401b0319166001600160401b039081175f516020612de25f395f51905f525581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f80603a565b63f92ee8a960e01b5f5260045ffd5b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a714610244578063133bf89f1461023f5780631bf4951c1461023a578063226238971461023557806323afb0ff14610230578063248a9ca31461022b578063285f2446146102265780632cd078b8146102215780632f2ff15d1461021c5780633271ba4914610217578063362b81541461021257806336568abe1461020d57806347dff69d1461020857806355fcc556146102035780635b1817e8146101fe578063650e1312146101f95780636a30acfa146101f45780636b4d17ad146101ef5780637a7f34e8146101ea5780637c715094146101e557806384211ca9146101e05780638dd50eee146101db57806391d14854146101d6578063a217fddf146101d1578063c350a1b5146101cc578063ce537c9f146101c7578063d26bcc80146101c2578063d547741f146101bd578063e18b4dae146101b8578063e8c46c28146101b3578063ec828a91146101ae578063ef512221146101a9578063fd79d3e1146101a4578063fdd541231461019f5763ff87c18c1461019a575f80fd5b610fd6565b610f96565b610f6c565b610f4f565b610eca565b610eaf565b610e94565b610e34565b610de4565b610d5b565b610ae4565b610aca565b610a4b565b610a0b565b6109a5565b61093d565b610913565b6108f8565b6108c9565b6108a5565b610857565b61081f565b6107f5565b610787565b610754565b610661565b6105fc565b610577565b6104bb565b610469565b61044d565b610430565b6103a9565b610307565b346102e55760206003193601126102e5576004357fffffffff0000000000000000000000000000000000000000000000000000000081168091036102e557807f7965db0b00000000000000000000000000000000000000000000000000000000602092149081156102bb575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150145f6102b0565b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036102e557565b346102e55760806003193601126102e55761034860043560243561032a816102e9565b60443590610337826102e9565b60643592610343611aa6565b6110a0565b005b9181601f840112156102e55782359167ffffffffffffffff83116102e557602083818601950101116102e557565b9181601f840112156102e55782359167ffffffffffffffff83116102e5576020808501948460051b0101116102e557565b346102e55760a06003193601126102e55760043560243560443567ffffffffffffffff81116102e5576103e090369060040161034a565b60649391933567ffffffffffffffff81116102e557610403903690600401610378565b916084359567ffffffffffffffff87116102e557610428610348973690600401610378565b9690956112b0565b346102e5575f6003193601126102e5576020600354604051908152f35b346102e5575f6003193601126102e55760205f54604051908152f35b346102e55760206003193601126102e55760206104b36004355f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b604051908152f35b346102e55760406003193601126102e55760043560243590805f52600960205260ff60405f20541615610516575f52600c60205260405f20905f5260205261051260405f2054604051918291829190602083019252565b0390f35b7fc5b14571000000000000000000000000000000000000000000000000000000005f5260045ffd5b60206040818301928281528451809452019201905f5b8181106105615750505090565b8251845260209384019390920191600101610554565b346102e55760206003193601126102e557600435805f52600960205260ff60405f20541615610516575f52600b60205260405f206040519081602082549182815201915f5260205f20905f5b8181106105e657610512856105da8187038261123b565b6040519182918261053e565b82548452602090930192600192830192016105c3565b346102e55760406003193601126102e55761034860243560043561061f826102e9565b61065c610657825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b611b0e565b611ef0565b346102e5576101006003193601126102e55760043560243560443567ffffffffffffffff81116102e55761069990369060040161034a565b60649391933567ffffffffffffffff81116102e5576106bc903690600401610378565b60849291923567ffffffffffffffff81116102e5576106df903690600401610378565b60a49291923567ffffffffffffffff81116102e557610702903690600401610378565b93909260c43567ffffffffffffffff81116102e557610725903690600401610378565b97909660e4359b67ffffffffffffffff8d116102e55761074c6103489d3690600401610378565b9c909b6115b9565b346102e5575f6003193601126102e557602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b346102e55760406003193601126102e5576004356024356107a7816102e9565b3373ffffffffffffffffffffffffffffffffffffffff8216036107cd5761034891612075565b7f6697b232000000000000000000000000000000000000000000000000000000005f5260045ffd5b346102e55760206003193601126102e5576004355f52600a602052602060405f2054604051908152f35b346102e55760406003193601126102e557600435602435905f52600c60205260405f20905f52602052602060405f2054604051908152f35b346102e55760406003193601126102e557600435602435905f52600d60205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b346102e55760206003193601126102e5576103486004356108c4611aa6565b6118c2565b346102e55760206003193601126102e5576004355f526009602052602060ff60405f2054166040519015158152f35b346102e5575f6003193601126102e557602060405160028152f35b346102e55760206003193601126102e5576004355f526008602052602060405f2054604051908152f35b346102e55760206003193601126102e55773ffffffffffffffffffffffffffffffffffffffff60043561096f816102e9565b610977611aa6565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002555f80f35b346102e55760406003193601126102e5576004356024359073ffffffffffffffffffffffffffffffffffffffff6002541633036109e3575f55600155005b7f24b2e7fd000000000000000000000000000000000000000000000000000000005f5260045ffd5b346102e55760206003193601126102e5576004355f526005602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b346102e55760406003193601126102e557602060ff610abe602435600435610a72826102e9565b5f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800845260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54166040519015158152f35b346102e5575f6003193601126102e55760206040515f8152f35b346102e55760606003193601126102e557600435610b01816102e9565b60243590604435610b11816102e9565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549267ffffffffffffffff610b6060ff604087901c1615610b52565b1590565b9567ffffffffffffffff1690565b1680159081610d53575b6001149081610d49575b159081610d40575b50610d1857610bfd9284610bf460017fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b610c9d576119e1565b610c0357005b610c6e7fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b610d13680100000000000000007fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b6119e1565b7ff92ee8a9000000000000000000000000000000000000000000000000000000005f5260045ffd5b9050155f610b7c565b303b159150610b74565b859150610b6a565b346102e55760206003193601126102e557600435805f52600960205260ff60405f20541615610516575f52600a602052602060405f2054604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600454811015610ddf5760045f5260205f2001905f90565b610d9a565b346102e55760206003193601126102e5576004356004548110156102e55760209060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0154604051908152f35b346102e55760406003193601126102e557610348602435600435610e57826102e9565b610e8f610657825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b612075565b346102e5575f6003193601126102e557602060405160038152f35b346102e5575f6003193601126102e557602060405160078152f35b346102e55760406003193601126102e55760043560243590805f52600960205260ff60405f20541615610516575f52600d60205260405f20905f5260205261051273ffffffffffffffffffffffffffffffffffffffff60405f2054166040519182918291909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b346102e5575f6003193601126102e5576020600154604051908152f35b346102e55760206003193601126102e5576004355f526007602052602060405f2054604051908152f35b346102e55760206003193601126102e5576004355f526006602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b346102e55760406003193601126102e557600435602435905f52600b60205260405f209081548110156102e5578154811015610ddf575f9182526020918290200154604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6004546801000000000000000081101561109b5760018101600455600454811015610ddf5760045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b611020565b9073ffffffffffffffffffffffffffffffffffffffff6110e56110cb845f52600560205260405f2090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b166111f75773ffffffffffffffffffffffffffffffffffffffff8116156111b45760035482146111dc5773ffffffffffffffffffffffffffffffffffffffff8316156111b4576111b1926111916111a39261113f8561104d565b611151855f52600560205260405f2090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b611151835f52600660205260405f2090565b5f52600760205260405f2090565b55565b7fd92e233d000000000000000000000000000000000000000000000000000000005f5260045ffd5b91506111f59250611151905f52600560205260405f2090565b565b7fdf650a00000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040810190811067ffffffffffffffff82111761109b57604052565b90601f601f19910116810190811067ffffffffffffffff82111761109b57604052565b67ffffffffffffffff811161109b57601f01601f191660200190565b9291926112868261125e565b91611294604051938461123b565b8294818452818301116102e5578281602093845f960137010152565b969390949195926112c236828961127a565b602081519101205f54036113cf5773ffffffffffffffffffffffffffffffffffffffff6112f7895f52600660205260405f2090565b54169573ffffffffffffffffffffffffffffffffffffffff87161561137657916113626111b1989694926113679896946113398c5f52600760205260405f2090565b54604051906020820192835260408201526040815261135960608261123b565b51902097611bed565b611cb4565b915f52600860205260405f2090565b88600354146113a7577f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fda261280000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fefb64cf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116102e55760209260051b809284830137010190565b92909361145260209561145f949897986060875260608701916113f7565b91848303868601526113f7565b9060408183039101528281520191905f5b81811061147d5750505090565b90919260208060019273ffffffffffffffffffffffffffffffffffffffff87356114a6816102e9565b168152019401929101611470565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b908160011b91808304600214901517156114f757565b6114b4565b9067ffffffffffffffff831161109b5768010000000000000000831161109b57815483835580841061155b575b5061153890915f5260205f2090565b5f5b8381106115475750505050565b60019060208435940193818401550161153a565b825f528360205f2091820191015b8181106115765750611529565b5f8155600101611569565b9190811015610ddf5760051b0190565b90600182018092116114f757565b919082018092116114f757565b356115b6816102e9565b90565b9c97999a9b96939095929491946115d136828861127a565b602081519101206115ea885f52600860205260405f2090565b5460035489146117dd575b036117b55761160595878f61200d565b604051602081019061162e8161162088888e8e8d8f8a611434565b03601f19810183528261123b565b51902080910361178d576040519081529196959493929188907f2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e90602090a35f9561168b83856116868b5f52600b60205260405f2090565b6114fc565b5f955b8387106116f05750505050505050816116c5916116b66111f5945f52600a60205260405f2090565b555f52600960205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b9091929394959661170f6001916117088a858b611581565b359061159f565b9761171b81848a611581565b3561175461174c6117348d5f52600c60205260405f2090565b61173f858b8d611581565b355f5260205260405f2090565b91825461159f565b905561178161176c611767838888611581565b6115ac565b6111516117348d5f52600d60205260405f2090565b0195949392919061168e565b7f5cb045db000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9d8cbacd000000000000000000000000000000000000000000000000000000005f5260045ffd5b506001546115f5565b905f1982019182116114f757565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4082019182116114f757565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082019182116114f757565b60200390602082116114f757565b919082039182116114f757565b6004548015611895575f19810190600454821015610ddf575f195f916004835260208320010155600455565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b60035481146119cc5760045480915f5b8381106119aa575b50828214611982576119286111b19261191161190b6119016118fc5f986117e6565b610dc7565b90549060031b1c90565b91610dc7565b9091905f1983549160031b92831b921b1916179055565b611930611869565b61196d611945825f52600560205260405f2090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b6111a3611945825f52600660205260405f2090565b7f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b816119b761190183610dc7565b146119c4576001016118d2565b91505f6118da565b6119456111f5915f52600560205260405f2090565b73ffffffffffffffffffffffffffffffffffffffff1680156111b45773ffffffffffffffffffffffffffffffffffffffff8316156111b4577fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025560035560ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615611a7e57611a7b90611e09565b50565b7fd7e6bcf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b335f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1615611ade57565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f52336004525f60245260445ffd5b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff611b623360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541615611b6c5750565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f523360045260245260445ffd5b805160021015610ddf5760600190565b805160101015610ddf576102200190565b805115610ddf5760200190565b805160011015610ddf5760400190565b8051821015610ddf5760209160051b010190565b611bff611c0491611c0993369161127a565b6121a2565b61221d565b805160031015610ddf5760806115b69101516122ca565b67ffffffffffffffff811161109b5760051b60200190565b929192611c4482611c20565b93611c52604051958661123b565b602085848152019260051b8201918183116102e55780935b838510611c78575050505050565b843567ffffffffffffffff81116102e557820183601f820112156102e557602091611ca9858385809535910161127a565b815201940193611c6a565b9091611d2e611d29611bff94611d3496989997996040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b16825260148152611d0660348261123b565b5190209360405194602086015260208552611d2260408661123b565b3691611c38565b61230c565b916123b6565b91825115611de157611d2e611d29611d9b92611da996611d22611d6a611d64611d5f611bff9a61221d565b611b9b565b516122ca565b96604051611d85816116206020820194859190602083019252565b5190206040519687916020830160209181520190565b03601f19810187528661123b565b805115611db9576115b6906122ca565b7f3477dcda000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f547706af000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff81165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff16611eeb5773ffffffffffffffffffffffffffffffffffffffff165f8181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff611f448360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541661200757805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052611f9c8260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b95929693909491945f52600560205273ffffffffffffffffffffffffffffffffffffffff60405f205416948515611982576115b69761204b91611bed565b9560405160208101918252600760408201526040815261206c60608261123b565b51902095611cb4565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff6120c98360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54161561200757805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526121228260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905573ffffffffffffffffffffffffffffffffffffffff339216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b604051906121978261121f565b5f6020838281520152565b6121aa61218a565b506020815191604051926121bd8461121f565b835201602082015290565b156102e557565b906121d982611c20565b6121e6604051918261123b565b828152601f196121f68294611c20565b01905f5b82811061220657505050565b60209061221161218a565b828285010152016121fa565b90612227826126ec565b156102e55761223582612719565b9161223f836121cf565b9060208101805161224f8161277a565b81018091116114f757945f905b80821061227e5750506115b692939461227691519061185c565b9051146121c8565b90956122c28161228f6001936127e5565b9060405161229e60408261123b565b8281528160208201526122b18b8a611bd9565b526122bc8a89611bd9565b5061159f565b96019061225c565b80518015159081612300575b50156102e5576122e59061289f565b905190602081106122f4575090565b6020036101000a900490565b6021915011155f6122d6565b61231681516121cf565b905f5b8151811015612354578061233861233260019385611bd9565b516121a2565b6123428286611bd9565b5261234d8185611bd9565b5001612319565b505090565b6040519061236860208361123b565b5f808352366020840137565b9061237e8261125e565b61238b604051918261123b565b828152601f1961239b829461125e565b0190602036910137565b908151811015610ddf570160200190565b906123c0906128ff565b5f915f6123cb61218a565b508451156126b357935f915b8151831015612654578215808061263e575b6102e5571580612622575b6102e55761240b6124058484611bd9565b5161221d565b958651600281145f1461250c57505061243461242f61242988611bbc565b51612b4d565b612b9b565b9561244a612443888884612c08565b809261159f565b9651116124ee5715612481575061246190516117e6565b116102e5575111612478576124296115b691611bc9565b506115b6612359565b91909461248e86516117e6565b82146102e557806124ac610b4e6124a6600194611bc9565b516126ec565b156124cf576124bd6124c391611bc9565b51612b8d565b915b01919490946123d7565b6124db6124e891611bc9565b5160208101519051902090565b916124c5565b5050915092506124ff9150516117e6565b116102e5576115b6612359565b6011909791939794929414612525575b506001906124c5565b959380925094929094518314155f146126045760ff61257f61257961257361254d87876123a5565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b94611591565b931660108110156102e55761259d6125978289611bd9565b51612b77565b156125bf57505050506125b2919250516117e6565b036102e5576115b6612359565b866125d7610b4e6124a684600196989a97999b611bd9565b156125f1576125e9916124bd91611bd9565b915b9061251c565b6125fe916124db91611bd9565b916125eb565b50505061261190516117e6565b036102e5576124296115b691611bab565b506126366126308484611bd9565b51612b10565b8614156123f4565b5061264c6124db8585611bd9565b8214156123e9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964204d50542070726f6f660000000000000000000000000000006044820152606490fd5b5090506126e492507f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4219150146121c8565b6115b6612359565b805115611eeb57602060c0910151515f1a1061270757600190565b5f90565b5f1981146114f75760010190565b805115611eeb575f90602081019081516127328161277a565b81018091116114f7579151905181018091116114f75791905b8281106127585750905090565b612761816127e5565b81018091116114f757612774909161270b565b9061274b565b515f1a608081101561278b57505f90565b60b8811080156127cf575b156127a15750600190565b60c08110156127c0576115b6906127bb9060b75b9061185c565b611591565b6115b6906127bb9060f76127b5565b5060c08110158015612796575060f88110612796565b80515f1a9060808210156127fa575050600190565b60b882101561281057506127bb6115b691611821565b60c08210156128515760010151602082900360b7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4a0190565b60f882101561286757506127bb6115b6916117f4565b60010151602082900360f7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0190565b9060208201916128af835161277a565b9251908382018092116114f757519283039283116114f7579190565b156128d257565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b906129285f61291984516129148115156121c8565b6114e1565b61292360016121c8565b61185c565b9061293282612374565b925f91825b612941855f61159f565b841015612a01576129bc6125796129419261295c8760011690565b6129c4577f0f000000000000000000000000000000000000000000000000000000000000006129a661299d61257361254d6129978c60011c90565b8b6123a5565b60041c600f1690565b60f81b165f1a6129b6828b6123a5565b53611591565b939050612937565b7f0f000000000000000000000000000000000000000000000000000000000000006129a66129fb61257361254d6129978c60011c90565b60ff1690565b915092506111f591508351146128cb565b612a3282612a2683516129148115156121c8565b612923818311156121c8565b90612a3c82612374565b9383925f5b612a4b828761159f565b851015612afe5790612abe612ab8612a4b93612a678860011690565b612ac7577f0f00000000000000000000000000000000000000000000000000000000000000612aa861299d61257361254d612aa28d60011c90565b8c6123a5565b60f81b165f1a6129b6828c6123a5565b95611591565b94909150612a41565b7f0f00000000000000000000000000000000000000000000000000000000000000612aa86129fb61257361254d612aa28d60011c90565b92505092506111f591508351146128cb565b80516020811015612b28575060208101519051902090565b9060200151206040516020810191825260208152612b4760408261123b565b51902090565b8051156102e557612b606115b69161289f565b612b6c81939293612374565b928360200190612cbb565b6001815103611eeb5760200151515f1a60801490565b612b969061289f565b902090565b908151156102e557600f612bb761299d61257361254d86611bbc565b1680612bca57506115b660025f93612a12565b60018103612bdf57506115b660015f93612a12565b60028103612bf557506115b66002600193612a12565b6003036102e5576115b660018093612a12565b91905f5b8381018082116114f7578251811080612ca2575b15612c9a57612c507fff0000000000000000000000000000000000000000000000000000000000000091846123a5565b51167fff00000000000000000000000000000000000000000000000000000000000000612c7d83866123a5565b51169003612c9357612c8e9061270b565b612c0c565b9250505090565b509250505090565b5083518210612c20565b601f81116114f7576101000a90565b90918015612d2e575b6020811015612cfe5780612cd757505050565b612ceb612ce6612cf09261184e565b612cac565b6117e6565b905182518216911916179052565b919080518252602081018091116114f75790602081018091116114f75791601f19810190811115612cc4576114b4565b50505056f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\xAAW_Q` a-\xE2_9_Q\x90_RT`\xFF\x81`@\x1C\x16`\x9BW`\x02`\x01`@\x1B\x03\x19`\x01`\x01`@\x1B\x03\x82\x16\x01`IW[`@Qa-3\x90\x81a\0\xAF\x829\xF3[`\x01`\x01`@\x1B\x03\x19\x16`\x01`\x01`@\x1B\x03\x90\x81\x17_Q` a-\xE2_9_Q\x90_RU\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x90\xA1_\x80`:V[c\xF9.\xE8\xA9`\xE0\x1B_R`\x04_\xFD[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x01\xFF\xC9\xA7\x14a\x02DW\x80c\x13;\xF8\x9F\x14a\x02?W\x80c\x1B\xF4\x95\x1C\x14a\x02:W\x80c\"b8\x97\x14a\x025W\x80c#\xAF\xB0\xFF\x14a\x020W\x80c$\x8A\x9C\xA3\x14a\x02+W\x80c(_$F\x14a\x02&W\x80c,\xD0x\xB8\x14a\x02!W\x80c//\xF1]\x14a\x02\x1CW\x80c2q\xBAI\x14a\x02\x17W\x80c6+\x81T\x14a\x02\x12W\x80c6V\x8A\xBE\x14a\x02\rW\x80cG\xDF\xF6\x9D\x14a\x02\x08W\x80cU\xFC\xC5V\x14a\x02\x03W\x80c[\x18\x17\xE8\x14a\x01\xFEW\x80ce\x0E\x13\x12\x14a\x01\xF9W\x80cj0\xAC\xFA\x14a\x01\xF4W\x80ckM\x17\xAD\x14a\x01\xEFW\x80cz\x7F4\xE8\x14a\x01\xEAW\x80c|qP\x94\x14a\x01\xE5W\x80c\x84!\x1C\xA9\x14a\x01\xE0W\x80c\x8D\xD5\x0E\xEE\x14a\x01\xDBW\x80c\x91\xD1HT\x14a\x01\xD6W\x80c\xA2\x17\xFD\xDF\x14a\x01\xD1W\x80c\xC3P\xA1\xB5\x14a\x01\xCCW\x80c\xCES|\x9F\x14a\x01\xC7W\x80c\xD2k\xCC\x80\x14a\x01\xC2W\x80c\xD5Gt\x1F\x14a\x01\xBDW\x80c\xE1\x8BM\xAE\x14a\x01\xB8W\x80c\xE8\xC4l(\x14a\x01\xB3W\x80c\xEC\x82\x8A\x91\x14a\x01\xAEW\x80c\xEFQ\"!\x14a\x01\xA9W\x80c\xFDy\xD3\xE1\x14a\x01\xA4W\x80c\xFD\xD5A#\x14a\x01\x9FWc\xFF\x87\xC1\x8C\x14a\x01\x9AW_\x80\xFD[a\x0F\xD6V[a\x0F\x96V[a\x0FlV[a\x0FOV[a\x0E\xCAV[a\x0E\xAFV[a\x0E\x94V[a\x0E4V[a\r\xE4V[a\r[V[a\n\xE4V[a\n\xCAV[a\nKV[a\n\x0BV[a\t\xA5V[a\t=V[a\t\x13V[a\x08\xF8V[a\x08\xC9V[a\x08\xA5V[a\x08WV[a\x08\x1FV[a\x07\xF5V[a\x07\x87V[a\x07TV[a\x06aV[a\x05\xFCV[a\x05wV[a\x04\xBBV[a\x04iV[a\x04MV[a\x040V[a\x03\xA9V[a\x03\x07V[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x80\x91\x03a\x02\xE5W\x80\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x92\x14\x90\x81\x15a\x02\xBBW[P`@Q\x90\x15\x15\x81R\xF3[\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91P\x14_a\x02\xB0V[_\x80\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x03a\x02\xE5WV[4a\x02\xE5W`\x80`\x03\x196\x01\x12a\x02\xE5Wa\x03H`\x045`$5a\x03*\x81a\x02\xE9V[`D5\x90a\x037\x82a\x02\xE9V[`d5\x92a\x03Ca\x1A\xA6V[a\x10\xA0V[\0[\x91\x81`\x1F\x84\x01\x12\x15a\x02\xE5W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xE5W` \x83\x81\x86\x01\x95\x01\x01\x11a\x02\xE5WV[\x91\x81`\x1F\x84\x01\x12\x15a\x02\xE5W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xE5W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x02\xE5WV[4a\x02\xE5W`\xA0`\x03\x196\x01\x12a\x02\xE5W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x03\xE0\x906\x90`\x04\x01a\x03JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x04\x03\x906\x90`\x04\x01a\x03xV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x02\xE5Wa\x04(a\x03H\x976\x90`\x04\x01a\x03xV[\x96\x90\x95a\x12\xB0V[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `\x03T`@Q\x90\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` _T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W` a\x04\xB3`\x045_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\x0C` R`@_ \x90_R` Ra\x05\x12`@_ T`@Q\x91\x82\x91\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xF3[\x7F\xC5\xB1Eq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[` `@\x81\x83\x01\x92\x82\x81R\x84Q\x80\x94R\x01\x92\x01\x90_[\x81\x81\x10a\x05aWPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x05TV[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\x0B` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x05\xE6Wa\x05\x12\x85a\x05\xDA\x81\x87\x03\x82a\x12;V[`@Q\x91\x82\x91\x82a\x05>V[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x05\xC3V[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5Wa\x03H`$5`\x045a\x06\x1F\x82a\x02\xE9V[a\x06\\a\x06W\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a\x1B\x0EV[a\x1E\xF0V[4a\x02\xE5Wa\x01\0`\x03\x196\x01\x12a\x02\xE5W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x06\x99\x906\x90`\x04\x01a\x03JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x06\xBC\x906\x90`\x04\x01a\x03xV[`\x84\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x06\xDF\x906\x90`\x04\x01a\x03xV[`\xA4\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x07\x02\x906\x90`\x04\x01a\x03xV[\x93\x90\x92`\xC45g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x07%\x906\x90`\x04\x01a\x03xV[\x97\x90\x96`\xE45\x9Bg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8D\x11a\x02\xE5Wa\x07La\x03H\x9D6\x90`\x04\x01a\x03xV[\x9C\x90\x9Ba\x15\xB9V[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5a\x07\xA7\x81a\x02\xE9V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\x07\xCDWa\x03H\x91a uV[\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\n` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90_R`\x0C` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90_R`\r` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5Wa\x03H`\x045a\x08\xC4a\x1A\xA6V[a\x18\xC2V[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\t` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q`\x02\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x08` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045a\to\x81a\x02\xE9V[a\twa\x1A\xA6V[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U_\x80\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x163\x03a\t\xE3W_U`\x01U\0[\x7F$\xB2\xE7\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x05` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W` `\xFFa\n\xBE`$5`\x045a\nr\x82a\x02\xE9V[_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0\x84R`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q_\x81R\xF3[4a\x02\xE5W```\x03\x196\x01\x12a\x02\xE5W`\x045a\x0B\x01\x81a\x02\xE9V[`$5\x90`D5a\x0B\x11\x81a\x02\xE9V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0B``\xFF`@\x87\x90\x1C\x16\x15a\x0BRV[\x15\x90V[\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16\x80\x15\x90\x81a\rSW[`\x01\x14\x90\x81a\rIW[\x15\x90\x81a\r@W[Pa\r\x18Wa\x0B\xFD\x92\x84a\x0B\xF4`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x0C\x9DWa\x19\xE1V[a\x0C\x03W\0[a\x0Cn\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x90\xA1\0[a\r\x13h\x01\0\0\0\0\0\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x19\xE1V[\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90P\x15_a\x0B|V[0;\x15\x91Pa\x0BtV[\x85\x91Pa\x0BjV[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\n` R` `@_ T`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\x04T\x81\x10\x15a\r\xDFW`\x04_R` _ \x01\x90_\x90V[a\r\x9AV[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045`\x04T\x81\x10\x15a\x02\xE5W` \x90`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01T`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5Wa\x03H`$5`\x045a\x0EW\x82a\x02\xE9V[a\x0E\x8Fa\x06W\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a uV[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q`\x03\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q`\x07\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\r` R`@_ \x90_R` Ra\x05\x12s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x91\x82\x91\x82\x91\x90\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01\x93\x16\x90RV[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `\x01T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x07` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x06` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90_R`\x0B` R`@_ \x90\x81T\x81\x10\x15a\x02\xE5W\x81T\x81\x10\x15a\r\xDFW_\x91\x82R` \x91\x82\x90 \x01T`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`\x04Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x10\x9BW`\x01\x81\x01`\x04U`\x04T\x81\x10\x15a\r\xDFW`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01UV[a\x10 V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x10\xE5a\x10\xCB\x84_R`\x05` R`@_ \x90V[Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16a\x11\xF7Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15a\x11\xB4W`\x03T\x82\x14a\x11\xDCWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x11\xB4Wa\x11\xB1\x92a\x11\x91a\x11\xA3\x92a\x11?\x85a\x10MV[a\x11Q\x85_R`\x05` R`@_ \x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[a\x11Q\x83_R`\x06` R`@_ \x90V[_R`\x07` R`@_ \x90V[UV[\x7F\xD9.#=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91Pa\x11\xF5\x92Pa\x11Q\x90_R`\x05` R`@_ \x90V[V[\x7F\xDFe\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\x9BW`@RV[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\x9BW`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\x9BW`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x92\x91\x92a\x12\x86\x82a\x12^V[\x91a\x12\x94`@Q\x93\x84a\x12;V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x02\xE5W\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x96\x93\x90\x94\x91\x95\x92a\x12\xC26\x82\x89a\x12zV[` \x81Q\x91\x01 _T\x03a\x13\xCFWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x12\xF7\x89_R`\x06` R`@_ \x90V[T\x16\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15a\x13vW\x91a\x13ba\x11\xB1\x98\x96\x94\x92a\x13g\x98\x96\x94a\x139\x8C_R`\x07` R`@_ \x90V[T`@Q\x90` \x82\x01\x92\x83R`@\x82\x01R`@\x81Ra\x13Y``\x82a\x12;V[Q\x90 \x97a\x1B\xEDV[a\x1C\xB4V[\x91_R`\x08` R`@_ \x90V[\x88`\x03T\x14a\x13\xA7W\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xDA&\x12\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xEF\xB6L\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90\x91\x82\x81R\x7F\x07\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xE5W` \x92`\x05\x1B\x80\x92\x84\x83\x017\x01\x01\x90V[\x92\x90\x93a\x14R` \x95a\x14_\x94\x98\x97\x98``\x87R``\x87\x01\x91a\x13\xF7V[\x91\x84\x83\x03\x86\x86\x01Ra\x13\xF7V[\x90`@\x81\x83\x03\x91\x01R\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x14}WPPP\x90V[\x90\x91\x92` \x80`\x01\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x875a\x14\xA6\x81a\x02\xE9V[\x16\x81R\x01\x94\x01\x92\x91\x01a\x14pV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81`\x01\x1B\x91\x80\x83\x04`\x02\x14\x90\x15\x17\x15a\x14\xF7WV[a\x14\xB4V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x10\x9BWh\x01\0\0\0\0\0\0\0\0\x83\x11a\x10\x9BW\x81T\x83\x83U\x80\x84\x10a\x15[W[Pa\x158\x90\x91_R` _ \x90V[_[\x83\x81\x10a\x15GWPPPPV[`\x01\x90` \x845\x94\x01\x93\x81\x84\x01U\x01a\x15:V[\x82_R\x83` _ \x91\x82\x01\x91\x01[\x81\x81\x10a\x15vWPa\x15)V[_\x81U`\x01\x01a\x15iV[\x91\x90\x81\x10\x15a\r\xDFW`\x05\x1B\x01\x90V[\x90`\x01\x82\x01\x80\x92\x11a\x14\xF7WV[\x91\x90\x82\x01\x80\x92\x11a\x14\xF7WV[5a\x15\xB6\x81a\x02\xE9V[\x90V[\x9C\x97\x99\x9A\x9B\x96\x93\x90\x95\x92\x94\x91\x94a\x15\xD16\x82\x88a\x12zV[` \x81Q\x91\x01 a\x15\xEA\x88_R`\x08` R`@_ \x90V[T`\x03T\x89\x14a\x17\xDDW[\x03a\x17\xB5Wa\x16\x05\x95\x87\x8Fa \rV[`@Q` \x81\x01\x90a\x16.\x81a\x16 \x88\x88\x8E\x8E\x8D\x8F\x8Aa\x144V[\x03`\x1F\x19\x81\x01\x83R\x82a\x12;V[Q\x90 \x80\x91\x03a\x17\x8DW`@Q\x90\x81R\x91\x96\x95\x94\x93\x92\x91\x88\x90\x7F,?D5\x99\xC6&\x8A\xCE\xD4s\xE7f\x0B@tn\xA3\x94\xD5\x19\x17\x9E\xA3\xF6\x0F8)t\xA2\xE7\x8E\x90` \x90\xA3_\x95a\x16\x8B\x83\x85a\x16\x86\x8B_R`\x0B` R`@_ \x90V[a\x14\xFCV[_\x95[\x83\x87\x10a\x16\xF0WPPPPPPP\x81a\x16\xC5\x91a\x16\xB6a\x11\xF5\x94_R`\n` R`@_ \x90V[U_R`\t` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90UV[\x90\x91\x92\x93\x94\x95\x96a\x17\x0F`\x01\x91a\x17\x08\x8A\x85\x8Ba\x15\x81V[5\x90a\x15\x9FV[\x97a\x17\x1B\x81\x84\x8Aa\x15\x81V[5a\x17Ta\x17La\x174\x8D_R`\x0C` R`@_ \x90V[a\x17?\x85\x8B\x8Da\x15\x81V[5_R` R`@_ \x90V[\x91\x82Ta\x15\x9FV[\x90Ua\x17\x81a\x17la\x17g\x83\x88\x88a\x15\x81V[a\x15\xACV[a\x11Qa\x174\x8D_R`\r` R`@_ \x90V[\x01\x95\x94\x93\x92\x91\x90a\x16\x8EV[\x7F\\\xB0E\xDB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9D\x8C\xBA\xCD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P`\x01Ta\x15\xF5V[\x90_\x19\x82\x01\x91\x82\x11a\x14\xF7WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF@\x82\x01\x91\x82\x11a\x14\xF7WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x91\x82\x11a\x14\xF7WV[` \x03\x90` \x82\x11a\x14\xF7WV[\x91\x90\x82\x03\x91\x82\x11a\x14\xF7WV[`\x04T\x80\x15a\x18\x95W_\x19\x81\x01\x90`\x04T\x82\x10\x15a\r\xDFW_\x19_\x91`\x04\x83R` \x83 \x01\x01U`\x04UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[`\x03T\x81\x14a\x19\xCCW`\x04T\x80\x91_[\x83\x81\x10a\x19\xAAW[P\x82\x82\x14a\x19\x82Wa\x19(a\x11\xB1\x92a\x19\x11a\x19\x0Ba\x19\x01a\x18\xFC_\x98a\x17\xE6V[a\r\xC7V[\x90T\x90`\x03\x1B\x1C\x90V[\x91a\r\xC7V[\x90\x91\x90_\x19\x83T\x91`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90UV[a\x190a\x18iV[a\x19ma\x19E\x82_R`\x05` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81T\x16\x90UV[a\x11\xA3a\x19E\x82_R`\x06` R`@_ \x90V[\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x81a\x19\xB7a\x19\x01\x83a\r\xC7V[\x14a\x19\xC4W`\x01\x01a\x18\xD2V[\x91P_a\x18\xDAV[a\x19Ea\x11\xF5\x91_R`\x05` R`@_ \x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x80\x15a\x11\xB4Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x11\xB4W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U`\x03U`\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T`@\x1C\x16\x15a\x1A~Wa\x1A{\x90a\x1E\tV[PV[\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[3_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16\x15a\x1A\xDEWV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R_`$R`D_\xFD[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa\x1Bb3`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a\x1BlWPV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R`$R`D_\xFD[\x80Q`\x02\x10\x15a\r\xDFW``\x01\x90V[\x80Q`\x10\x10\x15a\r\xDFWa\x02 \x01\x90V[\x80Q\x15a\r\xDFW` \x01\x90V[\x80Q`\x01\x10\x15a\r\xDFW`@\x01\x90V[\x80Q\x82\x10\x15a\r\xDFW` \x91`\x05\x1B\x01\x01\x90V[a\x1B\xFFa\x1C\x04\x91a\x1C\t\x936\x91a\x12zV[a!\xA2V[a\"\x1DV[\x80Q`\x03\x10\x15a\r\xDFW`\x80a\x15\xB6\x91\x01Qa\"\xCAV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\x9BW`\x05\x1B` \x01\x90V[\x92\x91\x92a\x1CD\x82a\x1C V[\x93a\x1CR`@Q\x95\x86a\x12;V[` \x85\x84\x81R\x01\x92`\x05\x1B\x82\x01\x91\x81\x83\x11a\x02\xE5W\x80\x93[\x83\x85\x10a\x1CxWPPPPPV[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5W\x82\x01\x83`\x1F\x82\x01\x12\x15a\x02\xE5W` \x91a\x1C\xA9\x85\x83\x85\x80\x955\x91\x01a\x12zV[\x81R\x01\x94\x01\x93a\x1CjV[\x90\x91a\x1D.a\x1D)a\x1B\xFF\x94a\x1D4\x96\x98\x99\x97\x99`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01\x92``\x1B\x16\x82R`\x14\x81Ra\x1D\x06`4\x82a\x12;V[Q\x90 \x93`@Q\x94` \x86\x01R` \x85Ra\x1D\"`@\x86a\x12;V[6\x91a\x1C8V[a#\x0CV[\x91a#\xB6V[\x91\x82Q\x15a\x1D\xE1Wa\x1D.a\x1D)a\x1D\x9B\x92a\x1D\xA9\x96a\x1D\"a\x1Dja\x1Dda\x1D_a\x1B\xFF\x9Aa\"\x1DV[a\x1B\x9BV[Qa\"\xCAV[\x96`@Qa\x1D\x85\x81a\x16 ` \x82\x01\x94\x85\x91\x90` \x83\x01\x92RV[Q\x90 `@Q\x96\x87\x91` \x83\x01` \x91\x81R\x01\x90V[\x03`\x1F\x19\x81\x01\x87R\x86a\x12;V[\x80Q\x15a\x1D\xB9Wa\x15\xB6\x90a\"\xCAV[\x7F4w\xDC\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7FTw\x06\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16a\x1E\xEBWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x81\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x81 \x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16`\x01\x17\x90U3\x91\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x81\x80\xA4`\x01\x90V[P_\x90V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa\x1FD\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16a \x07W\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra\x1F\x9C\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r_\x80\xA4`\x01\x90V[PP_\x90V[\x95\x92\x96\x93\x90\x94\x91\x94_R`\x05` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16\x94\x85\x15a\x19\x82Wa\x15\xB6\x97a K\x91a\x1B\xEDV[\x95`@Q` \x81\x01\x91\x82R`\x07`@\x82\x01R`@\x81Ra l``\x82a\x12;V[Q\x90 \x95a\x1C\xB4V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa \xC9\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a \x07W\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra!\"\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81T\x16\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B_\x80\xA4`\x01\x90V[`@Q\x90a!\x97\x82a\x12\x1FV[_` \x83\x82\x81R\x01RV[a!\xAAa!\x8AV[P` \x81Q\x91`@Q\x92a!\xBD\x84a\x12\x1FV[\x83R\x01` \x82\x01R\x90V[\x15a\x02\xE5WV[\x90a!\xD9\x82a\x1C V[a!\xE6`@Q\x91\x82a\x12;V[\x82\x81R`\x1F\x19a!\xF6\x82\x94a\x1C V[\x01\x90_[\x82\x81\x10a\"\x06WPPPV[` \x90a\"\x11a!\x8AV[\x82\x82\x85\x01\x01R\x01a!\xFAV[\x90a\"'\x82a&\xECV[\x15a\x02\xE5Wa\"5\x82a'\x19V[\x91a\"?\x83a!\xCFV[\x90` \x81\x01\x80Qa\"O\x81a'zV[\x81\x01\x80\x91\x11a\x14\xF7W\x94_\x90[\x80\x82\x10a\"~WPPa\x15\xB6\x92\x93\x94a\"v\x91Q\x90a\x18\\V[\x90Q\x14a!\xC8V[\x90\x95a\"\xC2\x81a\"\x8F`\x01\x93a'\xE5V[\x90`@Qa\"\x9E`@\x82a\x12;V[\x82\x81R\x81` \x82\x01Ra\"\xB1\x8B\x8Aa\x1B\xD9V[Ra\"\xBC\x8A\x89a\x1B\xD9V[Pa\x15\x9FV[\x96\x01\x90a\"\\V[\x80Q\x80\x15\x15\x90\x81a#\0W[P\x15a\x02\xE5Wa\"\xE5\x90a(\x9FV[\x90Q\x90` \x81\x10a\"\xF4WP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a\"\xD6V[a#\x16\x81Qa!\xCFV[\x90_[\x81Q\x81\x10\x15a#TW\x80a#8a#2`\x01\x93\x85a\x1B\xD9V[Qa!\xA2V[a#B\x82\x86a\x1B\xD9V[Ra#M\x81\x85a\x1B\xD9V[P\x01a#\x19V[PP\x90V[`@Q\x90a#h` \x83a\x12;V[_\x80\x83R6` \x84\x017V[\x90a#~\x82a\x12^V[a#\x8B`@Q\x91\x82a\x12;V[\x82\x81R`\x1F\x19a#\x9B\x82\x94a\x12^V[\x01\x90` 6\x91\x017V[\x90\x81Q\x81\x10\x15a\r\xDFW\x01` \x01\x90V[\x90a#\xC0\x90a(\xFFV[_\x91_a#\xCBa!\x8AV[P\x84Q\x15a&\xB3W\x93_\x91[\x81Q\x83\x10\x15a&TW\x82\x15\x80\x80a&>W[a\x02\xE5W\x15\x80a&\"W[a\x02\xE5Wa$\x0Ba$\x05\x84\x84a\x1B\xD9V[Qa\"\x1DV[\x95\x86Q`\x02\x81\x14_\x14a%\x0CWPPa$4a$/a$)\x88a\x1B\xBCV[Qa+MV[a+\x9BV[\x95a$Ja$C\x88\x88\x84a,\x08V[\x80\x92a\x15\x9FV[\x96Q\x11a$\xEEW\x15a$\x81WPa$a\x90Qa\x17\xE6V[\x11a\x02\xE5WQ\x11a$xWa$)a\x15\xB6\x91a\x1B\xC9V[Pa\x15\xB6a#YV[\x91\x90\x94a$\x8E\x86Qa\x17\xE6V[\x82\x14a\x02\xE5W\x80a$\xACa\x0BNa$\xA6`\x01\x94a\x1B\xC9V[Qa&\xECV[\x15a$\xCFWa$\xBDa$\xC3\x91a\x1B\xC9V[Qa+\x8DV[\x91[\x01\x91\x94\x90\x94a#\xD7V[a$\xDBa$\xE8\x91a\x1B\xC9V[Q` \x81\x01Q\x90Q\x90 \x90V[\x91a$\xC5V[PP\x91P\x92Pa$\xFF\x91PQa\x17\xE6V[\x11a\x02\xE5Wa\x15\xB6a#YV[`\x11\x90\x97\x91\x93\x97\x94\x92\x94\x14a%%W[P`\x01\x90a$\xC5V[\x95\x93\x80\x92P\x94\x92\x90\x94Q\x83\x14\x15_\x14a&\x04W`\xFFa%\x7Fa%ya%sa%M\x87\x87a#\xA5V[Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90V[`\xF8\x1C\x90V[\x94a\x15\x91V[\x93\x16`\x10\x81\x10\x15a\x02\xE5Wa%\x9Da%\x97\x82\x89a\x1B\xD9V[Qa+wV[\x15a%\xBFWPPPPa%\xB2\x91\x92PQa\x17\xE6V[\x03a\x02\xE5Wa\x15\xB6a#YV[\x86a%\xD7a\x0BNa$\xA6\x84`\x01\x96\x98\x9A\x97\x99\x9Ba\x1B\xD9V[\x15a%\xF1Wa%\xE9\x91a$\xBD\x91a\x1B\xD9V[\x91[\x90a%\x1CV[a%\xFE\x91a$\xDB\x91a\x1B\xD9V[\x91a%\xEBV[PPPa&\x11\x90Qa\x17\xE6V[\x03a\x02\xE5Wa$)a\x15\xB6\x91a\x1B\xABV[Pa&6a&0\x84\x84a\x1B\xD9V[Qa+\x10V[\x86\x14\x15a#\xF4V[Pa&La$\xDB\x85\x85a\x1B\xD9V[\x82\x14\x15a#\xE9V[`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FInvalid MPT proof\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[P\x90Pa&\xE4\x92P\x7FV\xE8\x1F\x17\x1B\xCCU\xA6\xFF\x83E\xE6\x92\xC0\xF8n[H\xE0\x1B\x99l\xAD\xC0\x01b/\xB5\xE3c\xB4!\x91P\x14a!\xC8V[a\x15\xB6a#YV[\x80Q\x15a\x1E\xEBW` `\xC0\x91\x01QQ_\x1A\x10a'\x07W`\x01\x90V[_\x90V[_\x19\x81\x14a\x14\xF7W`\x01\x01\x90V[\x80Q\x15a\x1E\xEBW_\x90` \x81\x01\x90\x81Qa'2\x81a'zV[\x81\x01\x80\x91\x11a\x14\xF7W\x91Q\x90Q\x81\x01\x80\x91\x11a\x14\xF7W\x91\x90[\x82\x81\x10a'XWP\x90P\x90V[a'a\x81a'\xE5V[\x81\x01\x80\x91\x11a\x14\xF7Wa't\x90\x91a'\x0BV[\x90a'KV[Q_\x1A`\x80\x81\x10\x15a'\x8BWP_\x90V[`\xB8\x81\x10\x80\x15a'\xCFW[\x15a'\xA1WP`\x01\x90V[`\xC0\x81\x10\x15a'\xC0Wa\x15\xB6\x90a'\xBB\x90`\xB7[\x90a\x18\\V[a\x15\x91V[a\x15\xB6\x90a'\xBB\x90`\xF7a'\xB5V[P`\xC0\x81\x10\x15\x80\x15a'\x96WP`\xF8\x81\x10a'\x96V[\x80Q_\x1A\x90`\x80\x82\x10\x15a'\xFAWPP`\x01\x90V[`\xB8\x82\x10\x15a(\x10WPa'\xBBa\x15\xB6\x91a\x18!V[`\xC0\x82\x10\x15a(QW`\x01\x01Q` \x82\x90\x03`\xB7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFJ\x01\x90V[`\xF8\x82\x10\x15a(gWPa'\xBBa\x15\xB6\x91a\x17\xF4V[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\n\x01\x90V[\x90` \x82\x01\x91a(\xAF\x83Qa'zV[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x14\xF7WQ\x92\x83\x03\x92\x83\x11a\x14\xF7W\x91\x90V[\x15a(\xD2WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD[\x90a)(_a)\x19\x84Qa)\x14\x81\x15\x15a!\xC8V[a\x14\xE1V[a)#`\x01a!\xC8V[a\x18\\V[\x90a)2\x82a#tV[\x92_\x91\x82[a)A\x85_a\x15\x9FV[\x84\x10\x15a*\x01Wa)\xBCa%ya)A\x92a)\\\x87`\x01\x16\x90V[a)\xC4W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a)\xA6a)\x9Da%sa%Ma)\x97\x8C`\x01\x1C\x90V[\x8Ba#\xA5V[`\x04\x1C`\x0F\x16\x90V[`\xF8\x1B\x16_\x1Aa)\xB6\x82\x8Ba#\xA5V[Sa\x15\x91V[\x93\x90Pa)7V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a)\xA6a)\xFBa%sa%Ma)\x97\x8C`\x01\x1C\x90V[`\xFF\x16\x90V[\x91P\x92Pa\x11\xF5\x91P\x83Q\x14a(\xCBV[a*2\x82a*&\x83Qa)\x14\x81\x15\x15a!\xC8V[a)#\x81\x83\x11\x15a!\xC8V[\x90a*<\x82a#tV[\x93\x83\x92_[a*K\x82\x87a\x15\x9FV[\x85\x10\x15a*\xFEW\x90a*\xBEa*\xB8a*K\x93a*g\x88`\x01\x16\x90V[a*\xC7W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a*\xA8a)\x9Da%sa%Ma*\xA2\x8D`\x01\x1C\x90V[\x8Ca#\xA5V[`\xF8\x1B\x16_\x1Aa)\xB6\x82\x8Ca#\xA5V[\x95a\x15\x91V[\x94\x90\x91Pa*AV[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a*\xA8a)\xFBa%sa%Ma*\xA2\x8D`\x01\x1C\x90V[\x92PP\x92Pa\x11\xF5\x91P\x83Q\x14a(\xCBV[\x80Q` \x81\x10\x15a+(WP` \x81\x01Q\x90Q\x90 \x90V[\x90` \x01Q `@Q` \x81\x01\x91\x82R` \x81Ra+G`@\x82a\x12;V[Q\x90 \x90V[\x80Q\x15a\x02\xE5Wa+`a\x15\xB6\x91a(\x9FV[a+l\x81\x93\x92\x93a#tV[\x92\x83` \x01\x90a,\xBBV[`\x01\x81Q\x03a\x1E\xEBW` \x01QQ_\x1A`\x80\x14\x90V[a+\x96\x90a(\x9FV[\x90 \x90V[\x90\x81Q\x15a\x02\xE5W`\x0Fa+\xB7a)\x9Da%sa%M\x86a\x1B\xBCV[\x16\x80a+\xCAWPa\x15\xB6`\x02_\x93a*\x12V[`\x01\x81\x03a+\xDFWPa\x15\xB6`\x01_\x93a*\x12V[`\x02\x81\x03a+\xF5WPa\x15\xB6`\x02`\x01\x93a*\x12V[`\x03\x03a\x02\xE5Wa\x15\xB6`\x01\x80\x93a*\x12V[\x91\x90_[\x83\x81\x01\x80\x82\x11a\x14\xF7W\x82Q\x81\x10\x80a,\xA2W[\x15a,\x9AWa,P\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x84a#\xA5V[Q\x16\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a,}\x83\x86a#\xA5V[Q\x16\x90\x03a,\x93Wa,\x8E\x90a'\x0BV[a,\x0CV[\x92PPP\x90V[P\x92PPP\x90V[P\x83Q\x82\x10a, V[`\x1F\x81\x11a\x14\xF7Wa\x01\0\n\x90V[\x90\x91\x80\x15a-.W[` \x81\x10\x15a,\xFEW\x80a,\xD7WPPPV[a,\xEBa,\xE6a,\xF0\x92a\x18NV[a,\xACV[a\x17\xE6V[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[\x91\x90\x80Q\x82R` \x81\x01\x80\x91\x11a\x14\xF7W\x90` \x81\x01\x80\x91\x11a\x14\xF7W\x91`\x1F\x19\x81\x01\x90\x81\x11\x15a,\xC4Wa\x14\xB4V[PPPV\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a714610244578063133bf89f1461023f5780631bf4951c1461023a578063226238971461023557806323afb0ff14610230578063248a9ca31461022b578063285f2446146102265780632cd078b8146102215780632f2ff15d1461021c5780633271ba4914610217578063362b81541461021257806336568abe1461020d57806347dff69d1461020857806355fcc556146102035780635b1817e8146101fe578063650e1312146101f95780636a30acfa146101f45780636b4d17ad146101ef5780637a7f34e8146101ea5780637c715094146101e557806384211ca9146101e05780638dd50eee146101db57806391d14854146101d6578063a217fddf146101d1578063c350a1b5146101cc578063ce537c9f146101c7578063d26bcc80146101c2578063d547741f146101bd578063e18b4dae146101b8578063e8c46c28146101b3578063ec828a91146101ae578063ef512221146101a9578063fd79d3e1146101a4578063fdd541231461019f5763ff87c18c1461019a575f80fd5b610fd6565b610f96565b610f6c565b610f4f565b610eca565b610eaf565b610e94565b610e34565b610de4565b610d5b565b610ae4565b610aca565b610a4b565b610a0b565b6109a5565b61093d565b610913565b6108f8565b6108c9565b6108a5565b610857565b61081f565b6107f5565b610787565b610754565b610661565b6105fc565b610577565b6104bb565b610469565b61044d565b610430565b6103a9565b610307565b346102e55760206003193601126102e5576004357fffffffff0000000000000000000000000000000000000000000000000000000081168091036102e557807f7965db0b00000000000000000000000000000000000000000000000000000000602092149081156102bb575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150145f6102b0565b5f80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036102e557565b346102e55760806003193601126102e55761034860043560243561032a816102e9565b60443590610337826102e9565b60643592610343611aa6565b6110a0565b005b9181601f840112156102e55782359167ffffffffffffffff83116102e557602083818601950101116102e557565b9181601f840112156102e55782359167ffffffffffffffff83116102e5576020808501948460051b0101116102e557565b346102e55760a06003193601126102e55760043560243560443567ffffffffffffffff81116102e5576103e090369060040161034a565b60649391933567ffffffffffffffff81116102e557610403903690600401610378565b916084359567ffffffffffffffff87116102e557610428610348973690600401610378565b9690956112b0565b346102e5575f6003193601126102e5576020600354604051908152f35b346102e5575f6003193601126102e55760205f54604051908152f35b346102e55760206003193601126102e55760206104b36004355f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b604051908152f35b346102e55760406003193601126102e55760043560243590805f52600960205260ff60405f20541615610516575f52600c60205260405f20905f5260205261051260405f2054604051918291829190602083019252565b0390f35b7fc5b14571000000000000000000000000000000000000000000000000000000005f5260045ffd5b60206040818301928281528451809452019201905f5b8181106105615750505090565b8251845260209384019390920191600101610554565b346102e55760206003193601126102e557600435805f52600960205260ff60405f20541615610516575f52600b60205260405f206040519081602082549182815201915f5260205f20905f5b8181106105e657610512856105da8187038261123b565b6040519182918261053e565b82548452602090930192600192830192016105c3565b346102e55760406003193601126102e55761034860243560043561061f826102e9565b61065c610657825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b611b0e565b611ef0565b346102e5576101006003193601126102e55760043560243560443567ffffffffffffffff81116102e55761069990369060040161034a565b60649391933567ffffffffffffffff81116102e5576106bc903690600401610378565b60849291923567ffffffffffffffff81116102e5576106df903690600401610378565b60a49291923567ffffffffffffffff81116102e557610702903690600401610378565b93909260c43567ffffffffffffffff81116102e557610725903690600401610378565b97909660e4359b67ffffffffffffffff8d116102e55761074c6103489d3690600401610378565b9c909b6115b9565b346102e5575f6003193601126102e557602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b346102e55760406003193601126102e5576004356024356107a7816102e9565b3373ffffffffffffffffffffffffffffffffffffffff8216036107cd5761034891612075565b7f6697b232000000000000000000000000000000000000000000000000000000005f5260045ffd5b346102e55760206003193601126102e5576004355f52600a602052602060405f2054604051908152f35b346102e55760406003193601126102e557600435602435905f52600c60205260405f20905f52602052602060405f2054604051908152f35b346102e55760406003193601126102e557600435602435905f52600d60205260405f20905f52602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b346102e55760206003193601126102e5576103486004356108c4611aa6565b6118c2565b346102e55760206003193601126102e5576004355f526009602052602060ff60405f2054166040519015158152f35b346102e5575f6003193601126102e557602060405160028152f35b346102e55760206003193601126102e5576004355f526008602052602060405f2054604051908152f35b346102e55760206003193601126102e55773ffffffffffffffffffffffffffffffffffffffff60043561096f816102e9565b610977611aa6565b167fffffffffffffffffffffffff000000000000000000000000000000000000000060025416176002555f80f35b346102e55760406003193601126102e5576004356024359073ffffffffffffffffffffffffffffffffffffffff6002541633036109e3575f55600155005b7f24b2e7fd000000000000000000000000000000000000000000000000000000005f5260045ffd5b346102e55760206003193601126102e5576004355f526005602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b346102e55760406003193601126102e557602060ff610abe602435600435610a72826102e9565b5f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800845260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54166040519015158152f35b346102e5575f6003193601126102e55760206040515f8152f35b346102e55760606003193601126102e557600435610b01816102e9565b60243590604435610b11816102e9565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00549267ffffffffffffffff610b6060ff604087901c1615610b52565b1590565b9567ffffffffffffffff1690565b1680159081610d53575b6001149081610d49575b159081610d40575b50610d1857610bfd9284610bf460017fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b610c9d576119e1565b610c0357005b610c6e7fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b610d13680100000000000000007fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005416177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0055565b6119e1565b7ff92ee8a9000000000000000000000000000000000000000000000000000000005f5260045ffd5b9050155f610b7c565b303b159150610b74565b859150610b6a565b346102e55760206003193601126102e557600435805f52600960205260ff60405f20541615610516575f52600a602052602060405f2054604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600454811015610ddf5760045f5260205f2001905f90565b610d9a565b346102e55760206003193601126102e5576004356004548110156102e55760209060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0154604051908152f35b346102e55760406003193601126102e557610348602435600435610e57826102e9565b610e8f610657825f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052600160405f20015490565b612075565b346102e5575f6003193601126102e557602060405160038152f35b346102e5575f6003193601126102e557602060405160078152f35b346102e55760406003193601126102e55760043560243590805f52600960205260ff60405f20541615610516575f52600d60205260405f20905f5260205261051273ffffffffffffffffffffffffffffffffffffffff60405f2054166040519182918291909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b346102e5575f6003193601126102e5576020600154604051908152f35b346102e55760206003193601126102e5576004355f526007602052602060405f2054604051908152f35b346102e55760206003193601126102e5576004355f526006602052602073ffffffffffffffffffffffffffffffffffffffff60405f205416604051908152f35b346102e55760406003193601126102e557600435602435905f52600b60205260405f209081548110156102e5578154811015610ddf575f9182526020918290200154604051908152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6004546801000000000000000081101561109b5760018101600455600454811015610ddf5760045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b611020565b9073ffffffffffffffffffffffffffffffffffffffff6110e56110cb845f52600560205260405f2090565b5473ffffffffffffffffffffffffffffffffffffffff1690565b166111f75773ffffffffffffffffffffffffffffffffffffffff8116156111b45760035482146111dc5773ffffffffffffffffffffffffffffffffffffffff8316156111b4576111b1926111916111a39261113f8561104d565b611151855f52600560205260405f2090565b9073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b611151835f52600660205260405f2090565b5f52600760205260405f2090565b55565b7fd92e233d000000000000000000000000000000000000000000000000000000005f5260045ffd5b91506111f59250611151905f52600560205260405f2090565b565b7fdf650a00000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040810190811067ffffffffffffffff82111761109b57604052565b90601f601f19910116810190811067ffffffffffffffff82111761109b57604052565b67ffffffffffffffff811161109b57601f01601f191660200190565b9291926112868261125e565b91611294604051938461123b565b8294818452818301116102e5578281602093845f960137010152565b969390949195926112c236828961127a565b602081519101205f54036113cf5773ffffffffffffffffffffffffffffffffffffffff6112f7895f52600660205260405f2090565b54169573ffffffffffffffffffffffffffffffffffffffff87161561137657916113626111b1989694926113679896946113398c5f52600760205260405f2090565b54604051906020820192835260408201526040815261135960608261123b565b51902097611bed565b611cb4565b915f52600860205260405f2090565b88600354146113a7577f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fda261280000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fefb64cf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116102e55760209260051b809284830137010190565b92909361145260209561145f949897986060875260608701916113f7565b91848303868601526113f7565b9060408183039101528281520191905f5b81811061147d5750505090565b90919260208060019273ffffffffffffffffffffffffffffffffffffffff87356114a6816102e9565b168152019401929101611470565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b908160011b91808304600214901517156114f757565b6114b4565b9067ffffffffffffffff831161109b5768010000000000000000831161109b57815483835580841061155b575b5061153890915f5260205f2090565b5f5b8381106115475750505050565b60019060208435940193818401550161153a565b825f528360205f2091820191015b8181106115765750611529565b5f8155600101611569565b9190811015610ddf5760051b0190565b90600182018092116114f757565b919082018092116114f757565b356115b6816102e9565b90565b9c97999a9b96939095929491946115d136828861127a565b602081519101206115ea885f52600860205260405f2090565b5460035489146117dd575b036117b55761160595878f61200d565b604051602081019061162e8161162088888e8e8d8f8a611434565b03601f19810183528261123b565b51902080910361178d576040519081529196959493929188907f2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e90602090a35f9561168b83856116868b5f52600b60205260405f2090565b6114fc565b5f955b8387106116f05750505050505050816116c5916116b66111f5945f52600a60205260405f2090565b555f52600960205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b9091929394959661170f6001916117088a858b611581565b359061159f565b9761171b81848a611581565b3561175461174c6117348d5f52600c60205260405f2090565b61173f858b8d611581565b355f5260205260405f2090565b91825461159f565b905561178161176c611767838888611581565b6115ac565b6111516117348d5f52600d60205260405f2090565b0195949392919061168e565b7f5cb045db000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f9d8cbacd000000000000000000000000000000000000000000000000000000005f5260045ffd5b506001546115f5565b905f1982019182116114f757565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4082019182116114f757565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082019182116114f757565b60200390602082116114f757565b919082039182116114f757565b6004548015611895575f19810190600454821015610ddf575f195f916004835260208320010155600455565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b60035481146119cc5760045480915f5b8381106119aa575b50828214611982576119286111b19261191161190b6119016118fc5f986117e6565b610dc7565b90549060031b1c90565b91610dc7565b9091905f1983549160031b92831b921b1916179055565b611930611869565b61196d611945825f52600560205260405f2090565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008154169055565b6111a3611945825f52600660205260405f2090565b7f1242e9bb000000000000000000000000000000000000000000000000000000005f5260045ffd5b816119b761190183610dc7565b146119c4576001016118d2565b91505f6118da565b6119456111f5915f52600560205260405f2090565b73ffffffffffffffffffffffffffffffffffffffff1680156111b45773ffffffffffffffffffffffffffffffffffffffff8316156111b4577fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025560035560ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615611a7e57611a7b90611e09565b50565b7fd7e6bcf8000000000000000000000000000000000000000000000000000000005f5260045ffd5b335f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff1615611ade57565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f52336004525f60245260445ffd5b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff611b623360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541615611b6c5750565b7fe2517d3f000000000000000000000000000000000000000000000000000000005f523360045260245260445ffd5b805160021015610ddf5760600190565b805160101015610ddf576102200190565b805115610ddf5760200190565b805160011015610ddf5760400190565b8051821015610ddf5760209160051b010190565b611bff611c0491611c0993369161127a565b6121a2565b61221d565b805160031015610ddf5760806115b69101516122ca565b67ffffffffffffffff811161109b5760051b60200190565b929192611c4482611c20565b93611c52604051958661123b565b602085848152019260051b8201918183116102e55780935b838510611c78575050505050565b843567ffffffffffffffff81116102e557820183601f820112156102e557602091611ca9858385809535910161127a565b815201940193611c6a565b9091611d2e611d29611bff94611d3496989997996040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000602082019260601b16825260148152611d0660348261123b565b5190209360405194602086015260208552611d2260408661123b565b3691611c38565b61230c565b916123b6565b91825115611de157611d2e611d29611d9b92611da996611d22611d6a611d64611d5f611bff9a61221d565b611b9b565b516122ca565b96604051611d85816116206020820194859190602083019252565b5190206040519687916020830160209181520190565b03601f19810187528661123b565b805115611db9576115b6906122ca565b7f3477dcda000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f547706af000000000000000000000000000000000000000000000000000000005f5260045ffd5b73ffffffffffffffffffffffffffffffffffffffff81165f9081527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d602052604090205460ff16611eeb5773ffffffffffffffffffffffffffffffffffffffff165f8181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d6020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790553391907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b505f90565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff611f448360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b541661200757805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052611f9c8260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905573ffffffffffffffffffffffffffffffffffffffff339216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d5f80a4600190565b50505f90565b95929693909491945f52600560205273ffffffffffffffffffffffffffffffffffffffff60405f205416948515611982576115b69761204b91611bed565b9560405160208101918252600760408201526040815261206c60608261123b565b51902095611cb4565b805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260ff6120c98360405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b54161561200757805f527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526121228260405f209073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f2090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905573ffffffffffffffffffffffffffffffffffffffff339216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b5f80a4600190565b604051906121978261121f565b5f6020838281520152565b6121aa61218a565b506020815191604051926121bd8461121f565b835201602082015290565b156102e557565b906121d982611c20565b6121e6604051918261123b565b828152601f196121f68294611c20565b01905f5b82811061220657505050565b60209061221161218a565b828285010152016121fa565b90612227826126ec565b156102e55761223582612719565b9161223f836121cf565b9060208101805161224f8161277a565b81018091116114f757945f905b80821061227e5750506115b692939461227691519061185c565b9051146121c8565b90956122c28161228f6001936127e5565b9060405161229e60408261123b565b8281528160208201526122b18b8a611bd9565b526122bc8a89611bd9565b5061159f565b96019061225c565b80518015159081612300575b50156102e5576122e59061289f565b905190602081106122f4575090565b6020036101000a900490565b6021915011155f6122d6565b61231681516121cf565b905f5b8151811015612354578061233861233260019385611bd9565b516121a2565b6123428286611bd9565b5261234d8185611bd9565b5001612319565b505090565b6040519061236860208361123b565b5f808352366020840137565b9061237e8261125e565b61238b604051918261123b565b828152601f1961239b829461125e565b0190602036910137565b908151811015610ddf570160200190565b906123c0906128ff565b5f915f6123cb61218a565b508451156126b357935f915b8151831015612654578215808061263e575b6102e5571580612622575b6102e55761240b6124058484611bd9565b5161221d565b958651600281145f1461250c57505061243461242f61242988611bbc565b51612b4d565b612b9b565b9561244a612443888884612c08565b809261159f565b9651116124ee5715612481575061246190516117e6565b116102e5575111612478576124296115b691611bc9565b506115b6612359565b91909461248e86516117e6565b82146102e557806124ac610b4e6124a6600194611bc9565b516126ec565b156124cf576124bd6124c391611bc9565b51612b8d565b915b01919490946123d7565b6124db6124e891611bc9565b5160208101519051902090565b916124c5565b5050915092506124ff9150516117e6565b116102e5576115b6612359565b6011909791939794929414612525575b506001906124c5565b959380925094929094518314155f146126045760ff61257f61257961257361254d87876123a5565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b94611591565b931660108110156102e55761259d6125978289611bd9565b51612b77565b156125bf57505050506125b2919250516117e6565b036102e5576115b6612359565b866125d7610b4e6124a684600196989a97999b611bd9565b156125f1576125e9916124bd91611bd9565b915b9061251c565b6125fe916124db91611bd9565b916125eb565b50505061261190516117e6565b036102e5576124296115b691611bab565b506126366126308484611bd9565b51612b10565b8614156123f4565b5061264c6124db8585611bd9565b8214156123e9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964204d50542070726f6f660000000000000000000000000000006044820152606490fd5b5090506126e492507f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b4219150146121c8565b6115b6612359565b805115611eeb57602060c0910151515f1a1061270757600190565b5f90565b5f1981146114f75760010190565b805115611eeb575f90602081019081516127328161277a565b81018091116114f7579151905181018091116114f75791905b8281106127585750905090565b612761816127e5565b81018091116114f757612774909161270b565b9061274b565b515f1a608081101561278b57505f90565b60b8811080156127cf575b156127a15750600190565b60c08110156127c0576115b6906127bb9060b75b9061185c565b611591565b6115b6906127bb9060f76127b5565b5060c08110158015612796575060f88110612796565b80515f1a9060808210156127fa575050600190565b60b882101561281057506127bb6115b691611821565b60c08210156128515760010151602082900360b7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4a0190565b60f882101561286757506127bb6115b6916117f4565b60010151602082900360f7016101000a9004017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0a0190565b9060208201916128af835161277a565b9251908382018092116114f757519283039283116114f7579190565b156128d257565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b906129285f61291984516129148115156121c8565b6114e1565b61292360016121c8565b61185c565b9061293282612374565b925f91825b612941855f61159f565b841015612a01576129bc6125796129419261295c8760011690565b6129c4577f0f000000000000000000000000000000000000000000000000000000000000006129a661299d61257361254d6129978c60011c90565b8b6123a5565b60041c600f1690565b60f81b165f1a6129b6828b6123a5565b53611591565b939050612937565b7f0f000000000000000000000000000000000000000000000000000000000000006129a66129fb61257361254d6129978c60011c90565b60ff1690565b915092506111f591508351146128cb565b612a3282612a2683516129148115156121c8565b612923818311156121c8565b90612a3c82612374565b9383925f5b612a4b828761159f565b851015612afe5790612abe612ab8612a4b93612a678860011690565b612ac7577f0f00000000000000000000000000000000000000000000000000000000000000612aa861299d61257361254d612aa28d60011c90565b8c6123a5565b60f81b165f1a6129b6828c6123a5565b95611591565b94909150612a41565b7f0f00000000000000000000000000000000000000000000000000000000000000612aa86129fb61257361254d612aa28d60011c90565b92505092506111f591508351146128cb565b80516020811015612b28575060208101519051902090565b9060200151206040516020810191825260208152612b4760408261123b565b51902090565b8051156102e557612b606115b69161289f565b612b6c81939293612374565b928360200190612cbb565b6001815103611eeb5760200151515f1a60801490565b612b969061289f565b902090565b908151156102e557600f612bb761299d61257361254d86611bbc565b1680612bca57506115b660025f93612a12565b60018103612bdf57506115b660015f93612a12565b60028103612bf557506115b66002600193612a12565b6003036102e5576115b660018093612a12565b91905f5b8381018082116114f7578251811080612ca2575b15612c9a57612c507fff0000000000000000000000000000000000000000000000000000000000000091846123a5565b51167fff00000000000000000000000000000000000000000000000000000000000000612c7d83866123a5565b51169003612c9357612c8e9061270b565b612c0c565b9250505090565b509250505090565b5083518210612c20565b601f81116114f7576101000a90565b90918015612d2e575b6020811015612cfe5780612cd757505050565b612ceb612ce6612cf09261184e565b612cac565b6117e6565b905182518216911916179052565b919080518252602081018091116114f75790602081018091116114f75791601f19810190811115612cc4576114b4565b50505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\x01\xFF\xC9\xA7\x14a\x02DW\x80c\x13;\xF8\x9F\x14a\x02?W\x80c\x1B\xF4\x95\x1C\x14a\x02:W\x80c\"b8\x97\x14a\x025W\x80c#\xAF\xB0\xFF\x14a\x020W\x80c$\x8A\x9C\xA3\x14a\x02+W\x80c(_$F\x14a\x02&W\x80c,\xD0x\xB8\x14a\x02!W\x80c//\xF1]\x14a\x02\x1CW\x80c2q\xBAI\x14a\x02\x17W\x80c6+\x81T\x14a\x02\x12W\x80c6V\x8A\xBE\x14a\x02\rW\x80cG\xDF\xF6\x9D\x14a\x02\x08W\x80cU\xFC\xC5V\x14a\x02\x03W\x80c[\x18\x17\xE8\x14a\x01\xFEW\x80ce\x0E\x13\x12\x14a\x01\xF9W\x80cj0\xAC\xFA\x14a\x01\xF4W\x80ckM\x17\xAD\x14a\x01\xEFW\x80cz\x7F4\xE8\x14a\x01\xEAW\x80c|qP\x94\x14a\x01\xE5W\x80c\x84!\x1C\xA9\x14a\x01\xE0W\x80c\x8D\xD5\x0E\xEE\x14a\x01\xDBW\x80c\x91\xD1HT\x14a\x01\xD6W\x80c\xA2\x17\xFD\xDF\x14a\x01\xD1W\x80c\xC3P\xA1\xB5\x14a\x01\xCCW\x80c\xCES|\x9F\x14a\x01\xC7W\x80c\xD2k\xCC\x80\x14a\x01\xC2W\x80c\xD5Gt\x1F\x14a\x01\xBDW\x80c\xE1\x8BM\xAE\x14a\x01\xB8W\x80c\xE8\xC4l(\x14a\x01\xB3W\x80c\xEC\x82\x8A\x91\x14a\x01\xAEW\x80c\xEFQ\"!\x14a\x01\xA9W\x80c\xFDy\xD3\xE1\x14a\x01\xA4W\x80c\xFD\xD5A#\x14a\x01\x9FWc\xFF\x87\xC1\x8C\x14a\x01\x9AW_\x80\xFD[a\x0F\xD6V[a\x0F\x96V[a\x0FlV[a\x0FOV[a\x0E\xCAV[a\x0E\xAFV[a\x0E\x94V[a\x0E4V[a\r\xE4V[a\r[V[a\n\xE4V[a\n\xCAV[a\nKV[a\n\x0BV[a\t\xA5V[a\t=V[a\t\x13V[a\x08\xF8V[a\x08\xC9V[a\x08\xA5V[a\x08WV[a\x08\x1FV[a\x07\xF5V[a\x07\x87V[a\x07TV[a\x06aV[a\x05\xFCV[a\x05wV[a\x04\xBBV[a\x04iV[a\x04MV[a\x040V[a\x03\xA9V[a\x03\x07V[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x16\x80\x91\x03a\x02\xE5W\x80\x7Fye\xDB\x0B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x92\x14\x90\x81\x15a\x02\xBBW[P`@Q\x90\x15\x15\x81R\xF3[\x7F\x01\xFF\xC9\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91P\x14_a\x02\xB0V[_\x80\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x03a\x02\xE5WV[4a\x02\xE5W`\x80`\x03\x196\x01\x12a\x02\xE5Wa\x03H`\x045`$5a\x03*\x81a\x02\xE9V[`D5\x90a\x037\x82a\x02\xE9V[`d5\x92a\x03Ca\x1A\xA6V[a\x10\xA0V[\0[\x91\x81`\x1F\x84\x01\x12\x15a\x02\xE5W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xE5W` \x83\x81\x86\x01\x95\x01\x01\x11a\x02\xE5WV[\x91\x81`\x1F\x84\x01\x12\x15a\x02\xE5W\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xE5W` \x80\x85\x01\x94\x84`\x05\x1B\x01\x01\x11a\x02\xE5WV[4a\x02\xE5W`\xA0`\x03\x196\x01\x12a\x02\xE5W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x03\xE0\x906\x90`\x04\x01a\x03JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x04\x03\x906\x90`\x04\x01a\x03xV[\x91`\x845\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x11a\x02\xE5Wa\x04(a\x03H\x976\x90`\x04\x01a\x03xV[\x96\x90\x95a\x12\xB0V[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `\x03T`@Q\x90\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` _T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W` a\x04\xB3`\x045_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\x0C` R`@_ \x90_R` Ra\x05\x12`@_ T`@Q\x91\x82\x91\x82\x91\x90` \x83\x01\x92RV[\x03\x90\xF3[\x7F\xC5\xB1Eq\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[` `@\x81\x83\x01\x92\x82\x81R\x84Q\x80\x94R\x01\x92\x01\x90_[\x81\x81\x10a\x05aWPPP\x90V[\x82Q\x84R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x05TV[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\x0B` R`@_ `@Q\x90\x81` \x82T\x91\x82\x81R\x01\x91_R` _ \x90_[\x81\x81\x10a\x05\xE6Wa\x05\x12\x85a\x05\xDA\x81\x87\x03\x82a\x12;V[`@Q\x91\x82\x91\x82a\x05>V[\x82T\x84R` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\x05\xC3V[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5Wa\x03H`$5`\x045a\x06\x1F\x82a\x02\xE9V[a\x06\\a\x06W\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a\x1B\x0EV[a\x1E\xF0V[4a\x02\xE5Wa\x01\0`\x03\x196\x01\x12a\x02\xE5W`\x045`$5`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x06\x99\x906\x90`\x04\x01a\x03JV[`d\x93\x91\x935g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x06\xBC\x906\x90`\x04\x01a\x03xV[`\x84\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x06\xDF\x906\x90`\x04\x01a\x03xV[`\xA4\x92\x91\x925g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x07\x02\x906\x90`\x04\x01a\x03xV[\x93\x90\x92`\xC45g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5Wa\x07%\x906\x90`\x04\x01a\x03xV[\x97\x90\x96`\xE45\x9Bg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x8D\x11a\x02\xE5Wa\x07La\x03H\x9D6\x90`\x04\x01a\x03xV[\x9C\x90\x9Ba\x15\xB9V[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5a\x07\xA7\x81a\x02\xE9V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x03a\x07\xCDWa\x03H\x91a uV[\x7Ff\x97\xB22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\n` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90_R`\x0C` R`@_ \x90_R` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90_R`\r` R`@_ \x90_R` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5Wa\x03H`\x045a\x08\xC4a\x1A\xA6V[a\x18\xC2V[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\t` R` `\xFF`@_ T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q`\x02\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x08` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x045a\to\x81a\x02\xE9V[a\twa\x1A\xA6V[\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U_\x80\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x02T\x163\x03a\t\xE3W_U`\x01U\0[\x7F$\xB2\xE7\xFD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x05` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W` `\xFFa\n\xBE`$5`\x045a\nr\x82a\x02\xE9V[_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0\x84R`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16`@Q\x90\x15\x15\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q_\x81R\xF3[4a\x02\xE5W```\x03\x196\x01\x12a\x02\xE5W`\x045a\x0B\x01\x81a\x02\xE9V[`$5\x90`D5a\x0B\x11\x81a\x02\xE9V[\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x92g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x0B``\xFF`@\x87\x90\x1C\x16\x15a\x0BRV[\x15\x90V[\x95g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16\x80\x15\x90\x81a\rSW[`\x01\x14\x90\x81a\rIW[\x15\x90\x81a\r@W[Pa\r\x18Wa\x0B\xFD\x92\x84a\x0B\xF4`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x0C\x9DWa\x19\xE1V[a\x0C\x03W\0[a\x0Cn\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[`@Q`\x01\x81R\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x90` \x90\xA1\0[a\r\x13h\x01\0\0\0\0\0\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T\x16\x17\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0UV[a\x19\xE1V[\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90P\x15_a\x0B|V[0;\x15\x91Pa\x0BtV[\x85\x91Pa\x0BjV[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\n` R` `@_ T`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[`\x04T\x81\x10\x15a\r\xDFW`\x04_R` _ \x01\x90_\x90V[a\r\x9AV[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045`\x04T\x81\x10\x15a\x02\xE5W` \x90`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01T`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5Wa\x03H`$5`\x045a\x0EW\x82a\x02\xE9V[a\x0E\x8Fa\x06W\x82_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\x01`@_ \x01T\x90V[a uV[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q`\x03\x81R\xF3[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `@Q`\x07\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90\x80_R`\t` R`\xFF`@_ T\x16\x15a\x05\x16W_R`\r` R`@_ \x90_R` Ra\x05\x12s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x91\x82\x91\x82\x91\x90\x91s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x82\x01\x93\x16\x90RV[4a\x02\xE5W_`\x03\x196\x01\x12a\x02\xE5W` `\x01T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x07` R` `@_ T`@Q\x90\x81R\xF3[4a\x02\xE5W` `\x03\x196\x01\x12a\x02\xE5W`\x045_R`\x06` R` s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16`@Q\x90\x81R\xF3[4a\x02\xE5W`@`\x03\x196\x01\x12a\x02\xE5W`\x045`$5\x90_R`\x0B` R`@_ \x90\x81T\x81\x10\x15a\x02\xE5W\x81T\x81\x10\x15a\r\xDFW_\x91\x82R` \x91\x82\x90 \x01T`@Q\x90\x81R\xF3[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[`\x04Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x10\x9BW`\x01\x81\x01`\x04U`\x04T\x81\x10\x15a\r\xDFW`\x04_R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01UV[a\x10 V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x10\xE5a\x10\xCB\x84_R`\x05` R`@_ \x90V[Ts\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x16a\x11\xF7Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x15a\x11\xB4W`\x03T\x82\x14a\x11\xDCWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x11\xB4Wa\x11\xB1\x92a\x11\x91a\x11\xA3\x92a\x11?\x85a\x10MV[a\x11Q\x85_R`\x05` R`@_ \x90V[\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82T\x16\x17\x90UV[a\x11Q\x83_R`\x06` R`@_ \x90V[_R`\x07` R`@_ \x90V[UV[\x7F\xD9.#=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x91Pa\x11\xF5\x92Pa\x11Q\x90_R`\x05` R`@_ \x90V[V[\x7F\xDFe\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[`@\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\x9BW`@RV[\x90`\x1F`\x1F\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\x9BW`@RV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\x9BW`\x1F\x01`\x1F\x19\x16` \x01\x90V[\x92\x91\x92a\x12\x86\x82a\x12^V[\x91a\x12\x94`@Q\x93\x84a\x12;V[\x82\x94\x81\x84R\x81\x83\x01\x11a\x02\xE5W\x82\x81` \x93\x84_\x96\x017\x01\x01RV[\x96\x93\x90\x94\x91\x95\x92a\x12\xC26\x82\x89a\x12zV[` \x81Q\x91\x01 _T\x03a\x13\xCFWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x12\xF7\x89_R`\x06` R`@_ \x90V[T\x16\x95s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x15a\x13vW\x91a\x13ba\x11\xB1\x98\x96\x94\x92a\x13g\x98\x96\x94a\x139\x8C_R`\x07` R`@_ \x90V[T`@Q\x90` \x82\x01\x92\x83R`@\x82\x01R`@\x81Ra\x13Y``\x82a\x12;V[Q\x90 \x97a\x1B\xEDV[a\x1C\xB4V[\x91_R`\x08` R`@_ \x90V[\x88`\x03T\x14a\x13\xA7W\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xDA&\x12\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\xEF\xB6L\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x90\x91\x82\x81R\x7F\x07\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xE5W` \x92`\x05\x1B\x80\x92\x84\x83\x017\x01\x01\x90V[\x92\x90\x93a\x14R` \x95a\x14_\x94\x98\x97\x98``\x87R``\x87\x01\x91a\x13\xF7V[\x91\x84\x83\x03\x86\x86\x01Ra\x13\xF7V[\x90`@\x81\x83\x03\x91\x01R\x82\x81R\x01\x91\x90_[\x81\x81\x10a\x14}WPPP\x90V[\x90\x91\x92` \x80`\x01\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x875a\x14\xA6\x81a\x02\xE9V[\x16\x81R\x01\x94\x01\x92\x91\x01a\x14pV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x81`\x01\x1B\x91\x80\x83\x04`\x02\x14\x90\x15\x17\x15a\x14\xF7WV[a\x14\xB4V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x10\x9BWh\x01\0\0\0\0\0\0\0\0\x83\x11a\x10\x9BW\x81T\x83\x83U\x80\x84\x10a\x15[W[Pa\x158\x90\x91_R` _ \x90V[_[\x83\x81\x10a\x15GWPPPPV[`\x01\x90` \x845\x94\x01\x93\x81\x84\x01U\x01a\x15:V[\x82_R\x83` _ \x91\x82\x01\x91\x01[\x81\x81\x10a\x15vWPa\x15)V[_\x81U`\x01\x01a\x15iV[\x91\x90\x81\x10\x15a\r\xDFW`\x05\x1B\x01\x90V[\x90`\x01\x82\x01\x80\x92\x11a\x14\xF7WV[\x91\x90\x82\x01\x80\x92\x11a\x14\xF7WV[5a\x15\xB6\x81a\x02\xE9V[\x90V[\x9C\x97\x99\x9A\x9B\x96\x93\x90\x95\x92\x94\x91\x94a\x15\xD16\x82\x88a\x12zV[` \x81Q\x91\x01 a\x15\xEA\x88_R`\x08` R`@_ \x90V[T`\x03T\x89\x14a\x17\xDDW[\x03a\x17\xB5Wa\x16\x05\x95\x87\x8Fa \rV[`@Q` \x81\x01\x90a\x16.\x81a\x16 \x88\x88\x8E\x8E\x8D\x8F\x8Aa\x144V[\x03`\x1F\x19\x81\x01\x83R\x82a\x12;V[Q\x90 \x80\x91\x03a\x17\x8DW`@Q\x90\x81R\x91\x96\x95\x94\x93\x92\x91\x88\x90\x7F,?D5\x99\xC6&\x8A\xCE\xD4s\xE7f\x0B@tn\xA3\x94\xD5\x19\x17\x9E\xA3\xF6\x0F8)t\xA2\xE7\x8E\x90` \x90\xA3_\x95a\x16\x8B\x83\x85a\x16\x86\x8B_R`\x0B` R`@_ \x90V[a\x14\xFCV[_\x95[\x83\x87\x10a\x16\xF0WPPPPPPP\x81a\x16\xC5\x91a\x16\xB6a\x11\xF5\x94_R`\n` R`@_ \x90V[U_R`\t` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90UV[\x90\x91\x92\x93\x94\x95\x96a\x17\x0F`\x01\x91a\x17\x08\x8A\x85\x8Ba\x15\x81V[5\x90a\x15\x9FV[\x97a\x17\x1B\x81\x84\x8Aa\x15\x81V[5a\x17Ta\x17La\x174\x8D_R`\x0C` R`@_ \x90V[a\x17?\x85\x8B\x8Da\x15\x81V[5_R` R`@_ \x90V[\x91\x82Ta\x15\x9FV[\x90Ua\x17\x81a\x17la\x17g\x83\x88\x88a\x15\x81V[a\x15\xACV[a\x11Qa\x174\x8D_R`\r` R`@_ \x90V[\x01\x95\x94\x93\x92\x91\x90a\x16\x8EV[\x7F\\\xB0E\xDB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7F\x9D\x8C\xBA\xCD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[P`\x01Ta\x15\xF5V[\x90_\x19\x82\x01\x91\x82\x11a\x14\xF7WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF@\x82\x01\x91\x82\x11a\x14\xF7WV[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x01\x91\x82\x11a\x14\xF7WV[` \x03\x90` \x82\x11a\x14\xF7WV[\x91\x90\x82\x03\x91\x82\x11a\x14\xF7WV[`\x04T\x80\x15a\x18\x95W_\x19\x81\x01\x90`\x04T\x82\x10\x15a\r\xDFW_\x19_\x91`\x04\x83R` \x83 \x01\x01U`\x04UV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[`\x03T\x81\x14a\x19\xCCW`\x04T\x80\x91_[\x83\x81\x10a\x19\xAAW[P\x82\x82\x14a\x19\x82Wa\x19(a\x11\xB1\x92a\x19\x11a\x19\x0Ba\x19\x01a\x18\xFC_\x98a\x17\xE6V[a\r\xC7V[\x90T\x90`\x03\x1B\x1C\x90V[\x91a\r\xC7V[\x90\x91\x90_\x19\x83T\x91`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90UV[a\x190a\x18iV[a\x19ma\x19E\x82_R`\x05` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81T\x16\x90UV[a\x11\xA3a\x19E\x82_R`\x06` R`@_ \x90V[\x7F\x12B\xE9\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x81a\x19\xB7a\x19\x01\x83a\r\xC7V[\x14a\x19\xC4W`\x01\x01a\x18\xD2V[\x91P_a\x18\xDAV[a\x19Ea\x11\xF5\x91_R`\x05` R`@_ \x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x80\x15a\x11\xB4Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16\x15a\x11\xB4W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x02T\x16\x17`\x02U`\x03U`\xFF\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0T`@\x1C\x16\x15a\x1A~Wa\x1A{\x90a\x1E\tV[PV[\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[3_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16\x15a\x1A\xDEWV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R_`$R`D_\xFD[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa\x1Bb3`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a\x1BlWPV[\x7F\xE2Q}?\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R3`\x04R`$R`D_\xFD[\x80Q`\x02\x10\x15a\r\xDFW``\x01\x90V[\x80Q`\x10\x10\x15a\r\xDFWa\x02 \x01\x90V[\x80Q\x15a\r\xDFW` \x01\x90V[\x80Q`\x01\x10\x15a\r\xDFW`@\x01\x90V[\x80Q\x82\x10\x15a\r\xDFW` \x91`\x05\x1B\x01\x01\x90V[a\x1B\xFFa\x1C\x04\x91a\x1C\t\x936\x91a\x12zV[a!\xA2V[a\"\x1DV[\x80Q`\x03\x10\x15a\r\xDFW`\x80a\x15\xB6\x91\x01Qa\"\xCAV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\x9BW`\x05\x1B` \x01\x90V[\x92\x91\x92a\x1CD\x82a\x1C V[\x93a\x1CR`@Q\x95\x86a\x12;V[` \x85\x84\x81R\x01\x92`\x05\x1B\x82\x01\x91\x81\x83\x11a\x02\xE5W\x80\x93[\x83\x85\x10a\x1CxWPPPPPV[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE5W\x82\x01\x83`\x1F\x82\x01\x12\x15a\x02\xE5W` \x91a\x1C\xA9\x85\x83\x85\x80\x955\x91\x01a\x12zV[\x81R\x01\x94\x01\x93a\x1CjV[\x90\x91a\x1D.a\x1D)a\x1B\xFF\x94a\x1D4\x96\x98\x99\x97\x99`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01\x92``\x1B\x16\x82R`\x14\x81Ra\x1D\x06`4\x82a\x12;V[Q\x90 \x93`@Q\x94` \x86\x01R` \x85Ra\x1D\"`@\x86a\x12;V[6\x91a\x1C8V[a#\x0CV[\x91a#\xB6V[\x91\x82Q\x15a\x1D\xE1Wa\x1D.a\x1D)a\x1D\x9B\x92a\x1D\xA9\x96a\x1D\"a\x1Dja\x1Dda\x1D_a\x1B\xFF\x9Aa\"\x1DV[a\x1B\x9BV[Qa\"\xCAV[\x96`@Qa\x1D\x85\x81a\x16 ` \x82\x01\x94\x85\x91\x90` \x83\x01\x92RV[Q\x90 `@Q\x96\x87\x91` \x83\x01` \x91\x81R\x01\x90V[\x03`\x1F\x19\x81\x01\x87R\x86a\x12;V[\x80Q\x15a\x1D\xB9Wa\x15\xB6\x90a\"\xCAV[\x7F4w\xDC\xDA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[\x7FTw\x06\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16_\x90\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x90 T`\xFF\x16a\x1E\xEBWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x81\x81R\x7F\xB7\xDB-\xD0\x8F\xCBb\xD0\xC9\xE0\x8CQ\x94\x1C\xAES\xC2gxj\x0Bu\x80?\xB7\x96\t\x02\xFC\x8E\xF9}` R`@\x81 \x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x16`\x01\x17\x90U3\x91\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x81\x80\xA4`\x01\x90V[P_\x90V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa\x1FD\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16a \x07W\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra\x1F\x9C\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[`\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x82T\x16\x17\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r_\x80\xA4`\x01\x90V[PP_\x90V[\x95\x92\x96\x93\x90\x94\x91\x94_R`\x05` Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@_ T\x16\x94\x85\x15a\x19\x82Wa\x15\xB6\x97a K\x91a\x1B\xEDV[\x95`@Q` \x81\x01\x91\x82R`\x07`@\x82\x01R`@\x81Ra l``\x82a\x12;V[Q\x90 \x95a\x1C\xB4V[\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` R`\xFFa \xC9\x83`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[T\x16\x15a \x07W\x80_R\x7F\x02\xDD{\xC7\xDE\xC4\xDC\xEE\xDD\xA7u\xE5\x8D\xD5A\xE0\x8A\x11llS\x81\\\x0B\xD0(\x19/{bh\0` Ra!\"\x82`@_ \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_R` R`@_ \x90V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81T\x16\x90Us\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF3\x92\x16\x90\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B_\x80\xA4`\x01\x90V[`@Q\x90a!\x97\x82a\x12\x1FV[_` \x83\x82\x81R\x01RV[a!\xAAa!\x8AV[P` \x81Q\x91`@Q\x92a!\xBD\x84a\x12\x1FV[\x83R\x01` \x82\x01R\x90V[\x15a\x02\xE5WV[\x90a!\xD9\x82a\x1C V[a!\xE6`@Q\x91\x82a\x12;V[\x82\x81R`\x1F\x19a!\xF6\x82\x94a\x1C V[\x01\x90_[\x82\x81\x10a\"\x06WPPPV[` \x90a\"\x11a!\x8AV[\x82\x82\x85\x01\x01R\x01a!\xFAV[\x90a\"'\x82a&\xECV[\x15a\x02\xE5Wa\"5\x82a'\x19V[\x91a\"?\x83a!\xCFV[\x90` \x81\x01\x80Qa\"O\x81a'zV[\x81\x01\x80\x91\x11a\x14\xF7W\x94_\x90[\x80\x82\x10a\"~WPPa\x15\xB6\x92\x93\x94a\"v\x91Q\x90a\x18\\V[\x90Q\x14a!\xC8V[\x90\x95a\"\xC2\x81a\"\x8F`\x01\x93a'\xE5V[\x90`@Qa\"\x9E`@\x82a\x12;V[\x82\x81R\x81` \x82\x01Ra\"\xB1\x8B\x8Aa\x1B\xD9V[Ra\"\xBC\x8A\x89a\x1B\xD9V[Pa\x15\x9FV[\x96\x01\x90a\"\\V[\x80Q\x80\x15\x15\x90\x81a#\0W[P\x15a\x02\xE5Wa\"\xE5\x90a(\x9FV[\x90Q\x90` \x81\x10a\"\xF4WP\x90V[` \x03a\x01\0\n\x90\x04\x90V[`!\x91P\x11\x15_a\"\xD6V[a#\x16\x81Qa!\xCFV[\x90_[\x81Q\x81\x10\x15a#TW\x80a#8a#2`\x01\x93\x85a\x1B\xD9V[Qa!\xA2V[a#B\x82\x86a\x1B\xD9V[Ra#M\x81\x85a\x1B\xD9V[P\x01a#\x19V[PP\x90V[`@Q\x90a#h` \x83a\x12;V[_\x80\x83R6` \x84\x017V[\x90a#~\x82a\x12^V[a#\x8B`@Q\x91\x82a\x12;V[\x82\x81R`\x1F\x19a#\x9B\x82\x94a\x12^V[\x01\x90` 6\x91\x017V[\x90\x81Q\x81\x10\x15a\r\xDFW\x01` \x01\x90V[\x90a#\xC0\x90a(\xFFV[_\x91_a#\xCBa!\x8AV[P\x84Q\x15a&\xB3W\x93_\x91[\x81Q\x83\x10\x15a&TW\x82\x15\x80\x80a&>W[a\x02\xE5W\x15\x80a&\"W[a\x02\xE5Wa$\x0Ba$\x05\x84\x84a\x1B\xD9V[Qa\"\x1DV[\x95\x86Q`\x02\x81\x14_\x14a%\x0CWPPa$4a$/a$)\x88a\x1B\xBCV[Qa+MV[a+\x9BV[\x95a$Ja$C\x88\x88\x84a,\x08V[\x80\x92a\x15\x9FV[\x96Q\x11a$\xEEW\x15a$\x81WPa$a\x90Qa\x17\xE6V[\x11a\x02\xE5WQ\x11a$xWa$)a\x15\xB6\x91a\x1B\xC9V[Pa\x15\xB6a#YV[\x91\x90\x94a$\x8E\x86Qa\x17\xE6V[\x82\x14a\x02\xE5W\x80a$\xACa\x0BNa$\xA6`\x01\x94a\x1B\xC9V[Qa&\xECV[\x15a$\xCFWa$\xBDa$\xC3\x91a\x1B\xC9V[Qa+\x8DV[\x91[\x01\x91\x94\x90\x94a#\xD7V[a$\xDBa$\xE8\x91a\x1B\xC9V[Q` \x81\x01Q\x90Q\x90 \x90V[\x91a$\xC5V[PP\x91P\x92Pa$\xFF\x91PQa\x17\xE6V[\x11a\x02\xE5Wa\x15\xB6a#YV[`\x11\x90\x97\x91\x93\x97\x94\x92\x94\x14a%%W[P`\x01\x90a$\xC5V[\x95\x93\x80\x92P\x94\x92\x90\x94Q\x83\x14\x15_\x14a&\x04W`\xFFa%\x7Fa%ya%sa%M\x87\x87a#\xA5V[Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x90V[`\xF8\x1C\x90V[\x94a\x15\x91V[\x93\x16`\x10\x81\x10\x15a\x02\xE5Wa%\x9Da%\x97\x82\x89a\x1B\xD9V[Qa+wV[\x15a%\xBFWPPPPa%\xB2\x91\x92PQa\x17\xE6V[\x03a\x02\xE5Wa\x15\xB6a#YV[\x86a%\xD7a\x0BNa$\xA6\x84`\x01\x96\x98\x9A\x97\x99\x9Ba\x1B\xD9V[\x15a%\xF1Wa%\xE9\x91a$\xBD\x91a\x1B\xD9V[\x91[\x90a%\x1CV[a%\xFE\x91a$\xDB\x91a\x1B\xD9V[\x91a%\xEBV[PPPa&\x11\x90Qa\x17\xE6V[\x03a\x02\xE5Wa$)a\x15\xB6\x91a\x1B\xABV[Pa&6a&0\x84\x84a\x1B\xD9V[Qa+\x10V[\x86\x14\x15a#\xF4V[Pa&La$\xDB\x85\x85a\x1B\xD9V[\x82\x14\x15a#\xE9V[`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FInvalid MPT proof\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x90\xFD[P\x90Pa&\xE4\x92P\x7FV\xE8\x1F\x17\x1B\xCCU\xA6\xFF\x83E\xE6\x92\xC0\xF8n[H\xE0\x1B\x99l\xAD\xC0\x01b/\xB5\xE3c\xB4!\x91P\x14a!\xC8V[a\x15\xB6a#YV[\x80Q\x15a\x1E\xEBW` `\xC0\x91\x01QQ_\x1A\x10a'\x07W`\x01\x90V[_\x90V[_\x19\x81\x14a\x14\xF7W`\x01\x01\x90V[\x80Q\x15a\x1E\xEBW_\x90` \x81\x01\x90\x81Qa'2\x81a'zV[\x81\x01\x80\x91\x11a\x14\xF7W\x91Q\x90Q\x81\x01\x80\x91\x11a\x14\xF7W\x91\x90[\x82\x81\x10a'XWP\x90P\x90V[a'a\x81a'\xE5V[\x81\x01\x80\x91\x11a\x14\xF7Wa't\x90\x91a'\x0BV[\x90a'KV[Q_\x1A`\x80\x81\x10\x15a'\x8BWP_\x90V[`\xB8\x81\x10\x80\x15a'\xCFW[\x15a'\xA1WP`\x01\x90V[`\xC0\x81\x10\x15a'\xC0Wa\x15\xB6\x90a'\xBB\x90`\xB7[\x90a\x18\\V[a\x15\x91V[a\x15\xB6\x90a'\xBB\x90`\xF7a'\xB5V[P`\xC0\x81\x10\x15\x80\x15a'\x96WP`\xF8\x81\x10a'\x96V[\x80Q_\x1A\x90`\x80\x82\x10\x15a'\xFAWPP`\x01\x90V[`\xB8\x82\x10\x15a(\x10WPa'\xBBa\x15\xB6\x91a\x18!V[`\xC0\x82\x10\x15a(QW`\x01\x01Q` \x82\x90\x03`\xB7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFJ\x01\x90V[`\xF8\x82\x10\x15a(gWPa'\xBBa\x15\xB6\x91a\x17\xF4V[`\x01\x01Q` \x82\x90\x03`\xF7\x01a\x01\0\n\x90\x04\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\n\x01\x90V[\x90` \x82\x01\x91a(\xAF\x83Qa'zV[\x92Q\x90\x83\x82\x01\x80\x92\x11a\x14\xF7WQ\x92\x83\x03\x92\x83\x11a\x14\xF7W\x91\x90V[\x15a(\xD2WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD[\x90a)(_a)\x19\x84Qa)\x14\x81\x15\x15a!\xC8V[a\x14\xE1V[a)#`\x01a!\xC8V[a\x18\\V[\x90a)2\x82a#tV[\x92_\x91\x82[a)A\x85_a\x15\x9FV[\x84\x10\x15a*\x01Wa)\xBCa%ya)A\x92a)\\\x87`\x01\x16\x90V[a)\xC4W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a)\xA6a)\x9Da%sa%Ma)\x97\x8C`\x01\x1C\x90V[\x8Ba#\xA5V[`\x04\x1C`\x0F\x16\x90V[`\xF8\x1B\x16_\x1Aa)\xB6\x82\x8Ba#\xA5V[Sa\x15\x91V[\x93\x90Pa)7V[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a)\xA6a)\xFBa%sa%Ma)\x97\x8C`\x01\x1C\x90V[`\xFF\x16\x90V[\x91P\x92Pa\x11\xF5\x91P\x83Q\x14a(\xCBV[a*2\x82a*&\x83Qa)\x14\x81\x15\x15a!\xC8V[a)#\x81\x83\x11\x15a!\xC8V[\x90a*<\x82a#tV[\x93\x83\x92_[a*K\x82\x87a\x15\x9FV[\x85\x10\x15a*\xFEW\x90a*\xBEa*\xB8a*K\x93a*g\x88`\x01\x16\x90V[a*\xC7W\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a*\xA8a)\x9Da%sa%Ma*\xA2\x8D`\x01\x1C\x90V[\x8Ca#\xA5V[`\xF8\x1B\x16_\x1Aa)\xB6\x82\x8Ca#\xA5V[\x95a\x15\x91V[\x94\x90\x91Pa*AV[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a*\xA8a)\xFBa%sa%Ma*\xA2\x8D`\x01\x1C\x90V[\x92PP\x92Pa\x11\xF5\x91P\x83Q\x14a(\xCBV[\x80Q` \x81\x10\x15a+(WP` \x81\x01Q\x90Q\x90 \x90V[\x90` \x01Q `@Q` \x81\x01\x91\x82R` \x81Ra+G`@\x82a\x12;V[Q\x90 \x90V[\x80Q\x15a\x02\xE5Wa+`a\x15\xB6\x91a(\x9FV[a+l\x81\x93\x92\x93a#tV[\x92\x83` \x01\x90a,\xBBV[`\x01\x81Q\x03a\x1E\xEBW` \x01QQ_\x1A`\x80\x14\x90V[a+\x96\x90a(\x9FV[\x90 \x90V[\x90\x81Q\x15a\x02\xE5W`\x0Fa+\xB7a)\x9Da%sa%M\x86a\x1B\xBCV[\x16\x80a+\xCAWPa\x15\xB6`\x02_\x93a*\x12V[`\x01\x81\x03a+\xDFWPa\x15\xB6`\x01_\x93a*\x12V[`\x02\x81\x03a+\xF5WPa\x15\xB6`\x02`\x01\x93a*\x12V[`\x03\x03a\x02\xE5Wa\x15\xB6`\x01\x80\x93a*\x12V[\x91\x90_[\x83\x81\x01\x80\x82\x11a\x14\xF7W\x82Q\x81\x10\x80a,\xA2W[\x15a,\x9AWa,P\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x84a#\xA5V[Q\x16\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a,}\x83\x86a#\xA5V[Q\x16\x90\x03a,\x93Wa,\x8E\x90a'\x0BV[a,\x0CV[\x92PPP\x90V[P\x92PPP\x90V[P\x83Q\x82\x10a, V[`\x1F\x81\x11a\x14\xF7Wa\x01\0\n\x90V[\x90\x91\x80\x15a-.W[` \x81\x10\x15a,\xFEW\x80a,\xD7WPPPV[a,\xEBa,\xE6a,\xF0\x92a\x18NV[a,\xACV[a\x17\xE6V[\x90Q\x82Q\x82\x16\x91\x19\x16\x17\x90RV[\x91\x90\x80Q\x82R` \x81\x01\x80\x91\x11a\x14\xF7W\x90` \x81\x01\x80\x91\x11a\x14\xF7W\x91`\x1F\x19\x81\x01\x90\x81\x11\x15a,\xC4Wa\x14\xB4V[PPPV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccountDoesNotExistInProof()` and selector `0x547706af`.
```solidity
error AccountDoesNotExistInProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccountDoesNotExistInProof;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccountDoesNotExistInProof>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccountDoesNotExistInProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccountDoesNotExistInProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccountDoesNotExistInProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccountDoesNotExistInProof()";
            const SELECTOR: [u8; 4] = [84u8, 119u8, 6u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CannotSubmitProofForSettlementChain()` and selector `0xda261280`.
```solidity
error CannotSubmitProofForSettlementChain();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CannotSubmitProofForSettlementChain;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CannotSubmitProofForSettlementChain>
        for UnderlyingRustTuple<'_> {
            fn from(value: CannotSubmitProofForSettlementChain) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CannotSubmitProofForSettlementChain {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CannotSubmitProofForSettlementChain {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CannotSubmitProofForSettlementChain()";
            const SELECTOR: [u8; 4] = [218u8, 38u8, 18u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ChainIDNotFound()` and selector `0x1242e9bb`.
```solidity
error ChainIDNotFound();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ChainIDNotFound;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ChainIDNotFound> for UnderlyingRustTuple<'_> {
            fn from(value: ChainIDNotFound) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ChainIDNotFound {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ChainIDNotFound {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ChainIDNotFound()";
            const SELECTOR: [u8; 4] = [18u8, 66u8, 233u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptySlot()` and selector `0x3477dcda`.
```solidity
error EmptySlot();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptySlot;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptySlot> for UnderlyingRustTuple<'_> {
            fn from(value: EmptySlot) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptySlot {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptySlot {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptySlot()";
            const SELECTOR: [u8; 4] = [52u8, 119u8, 220u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidData()` and selector `0x5cb045db`.
```solidity
error InvalidData();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidData;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidData> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidData) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidData {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidData()";
            const SELECTOR: [u8; 4] = [92u8, 176u8, 69u8, 219u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidEthereumBlockHeader()` and selector `0xefb64cf8`.
```solidity
error InvalidEthereumBlockHeader();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidEthereumBlockHeader;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidEthereumBlockHeader>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidEthereumBlockHeader) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidEthereumBlockHeader {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidEthereumBlockHeader {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidEthereumBlockHeader()";
            const SELECTOR: [u8; 4] = [239u8, 182u8, 76u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidProof()` and selector `0x09bde339`.
```solidity
error InvalidProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidProof;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidProof> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidProof()";
            const SELECTOR: [u8; 4] = [9u8, 189u8, 227u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidSeqChainBlockHeader()` and selector `0x9d8cbacd`.
```solidity
error InvalidSeqChainBlockHeader();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidSeqChainBlockHeader;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidSeqChainBlockHeader>
        for UnderlyingRustTuple<'_> {
            fn from(value: InvalidSeqChainBlockHeader) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InvalidSeqChainBlockHeader {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidSeqChainBlockHeader {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidSeqChainBlockHeader()";
            const SELECTOR: [u8; 4] = [157u8, 140u8, 186u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotArchivedEpoch()` and selector `0xc5b14571`.
```solidity
error NotArchivedEpoch();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotArchivedEpoch;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotArchivedEpoch> for UnderlyingRustTuple<'_> {
            fn from(value: NotArchivedEpoch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotArchivedEpoch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotArchivedEpoch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotArchivedEpoch()";
            const SELECTOR: [u8; 4] = [197u8, 177u8, 69u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotBlockHashSender()` and selector `0x24b2e7fd`.
```solidity
error NotBlockHashSender();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotBlockHashSender;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotBlockHashSender> for UnderlyingRustTuple<'_> {
            fn from(value: NotBlockHashSender) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotBlockHashSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotBlockHashSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotBlockHashSender()";
            const SELECTOR: [u8; 4] = [36u8, 178u8, 231u8, 253u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SequencingChainAlreadyExists()` and selector `0xdf650a00`.
```solidity
error SequencingChainAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SequencingChainAlreadyExists;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SequencingChainAlreadyExists>
        for UnderlyingRustTuple<'_> {
            fn from(value: SequencingChainAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SequencingChainAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SequencingChainAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SequencingChainAlreadyExists()";
            const SELECTOR: [u8; 4] = [223u8, 101u8, 10u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EpochDataValidated(uint256,uint256,bytes32)` and selector `0x2c3f443599c6268aced473e7660b40746ea394d519179ea3f60f382974a2e78e`.
```solidity
event EpochDataValidated(uint256 indexed epoch, uint256 indexed seqChainID, bytes32 dataHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochDataValidated {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dataHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochDataValidated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochDataValidated(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                44u8, 63u8, 68u8, 53u8, 153u8, 198u8, 38u8, 138u8, 206u8, 212u8, 115u8,
                231u8, 102u8, 11u8, 64u8, 116u8, 110u8, 163u8, 148u8, 213u8, 25u8, 23u8,
                158u8, 163u8, 246u8, 15u8, 56u8, 41u8, 116u8, 162u8, 231u8, 142u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    epoch: topics.1,
                    seqChainID: topics.2,
                    dataHash: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.dataHash),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.epoch.clone(),
                    self.seqChainID.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.epoch);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.seqChainID);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochDataValidated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochDataValidated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EpochDataValidated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `GasAggregatorAddressUpdated(address,address)` and selector `0x302f5435119022728eaef6d234319e11d908b504f90442eb3be6606fc9545757`.
```solidity
event GasAggregatorAddressUpdated(address indexed oldAddress, address indexed newAddress);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct GasAggregatorAddressUpdated {
        #[allow(missing_docs)]
        pub oldAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for GasAggregatorAddressUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "GasAggregatorAddressUpdated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                48u8, 47u8, 84u8, 53u8, 17u8, 144u8, 34u8, 114u8, 142u8, 174u8, 246u8,
                210u8, 52u8, 49u8, 158u8, 17u8, 217u8, 8u8, 181u8, 4u8, 249u8, 4u8, 66u8,
                235u8, 59u8, 230u8, 96u8, 111u8, 201u8, 84u8, 87u8, 87u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldAddress: topics.1,
                    newAddress: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.oldAddress.clone(),
                    self.newAddress.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldAddress,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAddress,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for GasAggregatorAddressUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&GasAggregatorAddressUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &GasAggregatorAddressUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `AGGREGATED_EPOCH_DATA_HASH_SLOT()` and selector `0xe8c46c28`.
```solidity
function AGGREGATED_EPOCH_DATA_HASH_SLOT() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AGGREGATED_EPOCH_DATA_HASH_SLOTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`AGGREGATED_EPOCH_DATA_HASH_SLOT()`](AGGREGATED_EPOCH_DATA_HASH_SLOTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AGGREGATED_EPOCH_DATA_HASH_SLOTReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATED_EPOCH_DATA_HASH_SLOTCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATED_EPOCH_DATA_HASH_SLOTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATED_EPOCH_DATA_HASH_SLOTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AGGREGATED_EPOCH_DATA_HASH_SLOTReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AGGREGATED_EPOCH_DATA_HASH_SLOTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AGGREGATED_EPOCH_DATA_HASH_SLOTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AGGREGATED_EPOCH_DATA_HASH_SLOT()";
            const SELECTOR: [u8; 4] = [232u8, 196u8, 108u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: AGGREGATED_EPOCH_DATA_HASH_SLOTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `HEADER_STATE_ROOT_INDEX()` and selector `0xe18b4dae`.
```solidity
function HEADER_STATE_ROOT_INDEX() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEADER_STATE_ROOT_INDEXCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`HEADER_STATE_ROOT_INDEX()`](HEADER_STATE_ROOT_INDEXCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct HEADER_STATE_ROOT_INDEXReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEADER_STATE_ROOT_INDEXCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEADER_STATE_ROOT_INDEXCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEADER_STATE_ROOT_INDEXCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<HEADER_STATE_ROOT_INDEXReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: HEADER_STATE_ROOT_INDEXReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for HEADER_STATE_ROOT_INDEXReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for HEADER_STATE_ROOT_INDEXCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "HEADER_STATE_ROOT_INDEX()";
            const SELECTOR: [u8; 4] = [225u8, 139u8, 77u8, 174u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: HEADER_STATE_ROOT_INDEXReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: HEADER_STATE_ROOT_INDEXReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()` and selector `0x6b4d17ad`.
```solidity
function STORAGE_ROOT_ACCOUNT_FIELDS_INDEX() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()`](STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "STORAGE_ROOT_ACCOUNT_FIELDS_INDEX()";
            const SELECTOR: [u8; 4] = [107u8, 77u8, 23u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: STORAGE_ROOT_ACCOUNT_FIELDS_INDEXReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addSequencingChain(uint256,address,address,uint256)` and selector `0x133bf89f`.
```solidity
function addSequencingChain(uint256 chainID, address aggregatorAddress, address bridgeAddress, uint256 storageSlotIndex) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencingChainCall {
        #[allow(missing_docs)]
        pub chainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub aggregatorAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub bridgeAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub storageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`addSequencingChain(uint256,address,address,uint256)`](addSequencingChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addSequencingChainReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencingChainCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencingChainCall) -> Self {
                    (
                        value.chainID,
                        value.aggregatorAddress,
                        value.bridgeAddress,
                        value.storageSlotIndex,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencingChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        chainID: tuple.0,
                        aggregatorAddress: tuple.1,
                        bridgeAddress: tuple.2,
                        storageSlotIndex: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addSequencingChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addSequencingChainReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addSequencingChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addSequencingChainReturn {
            fn _tokenize(
                &self,
            ) -> <addSequencingChainCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addSequencingChainCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addSequencingChainReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addSequencingChain(uint256,address,address,uint256)";
            const SELECTOR: [u8; 4] = [19u8, 59u8, 248u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainID),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.aggregatorAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridgeAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.storageSlotIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addSequencingChainReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `archivedEpochData(uint256)` and selector `0x6a30acfa`.
```solidity
function archivedEpochData(uint256) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct archivedEpochDataCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`archivedEpochData(uint256)`](archivedEpochDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct archivedEpochDataReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<archivedEpochDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: archivedEpochDataCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for archivedEpochDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<archivedEpochDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: archivedEpochDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for archivedEpochDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for archivedEpochDataCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "archivedEpochData(uint256)";
            const SELECTOR: [u8; 4] = [106u8, 48u8, 172u8, 250u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: archivedEpochDataReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: archivedEpochDataReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `blockHashSender()` and selector `0x362b8154`.
```solidity
function blockHashSender() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashSenderCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`blockHashSender()`](blockHashSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockHashSenderReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashSenderCall> for UnderlyingRustTuple<'_> {
                fn from(value: blockHashSenderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockHashSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockHashSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: blockHashSenderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for blockHashSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockHashSenderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockHashSender()";
            const SELECTOR: [u8; 4] = [54u8, 43u8, 129u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: blockHashSenderReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: blockHashSenderReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[],uint256[],uint256[],address[])` and selector `0x3271ba49`.
```solidity
function confirmEpochDataHash(uint256 epoch, uint256 seqChainID, bytes memory seqChainBlockHeader, bytes[] memory seqChainAccountProof, bytes[] memory seqChainStorageProof, uint256[] memory appchains, uint256[] memory tokens, address[] memory emissionsReceivers) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEpochDataHashCall {
        #[allow(missing_docs)]
        pub epoch: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub seqChainBlockHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub seqChainAccountProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub seqChainStorageProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub appchains: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub tokens: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub emissionsReceivers: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    ///Container type for the return parameters of the [`confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[],uint256[],uint256[],address[])`](confirmEpochDataHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmEpochDataHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEpochDataHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEpochDataHashCall) -> Self {
                    (
                        value.epoch,
                        value.seqChainID,
                        value.seqChainBlockHeader,
                        value.seqChainAccountProof,
                        value.seqChainStorageProof,
                        value.appchains,
                        value.tokens,
                        value.emissionsReceivers,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEpochDataHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epoch: tuple.0,
                        seqChainID: tuple.1,
                        seqChainBlockHeader: tuple.2,
                        seqChainAccountProof: tuple.3,
                        seqChainStorageProof: tuple.4,
                        appchains: tuple.5,
                        tokens: tuple.6,
                        emissionsReceivers: tuple.7,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmEpochDataHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmEpochDataHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmEpochDataHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl confirmEpochDataHashReturn {
            fn _tokenize(
                &self,
            ) -> <confirmEpochDataHashCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmEpochDataHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmEpochDataHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmEpochDataHash(uint256,uint256,bytes,bytes[],bytes[],uint256[],uint256[],address[])";
            const SELECTOR: [u8; 4] = [50u8, 113u8, 186u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epoch),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.seqChainBlockHeader,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainAccountProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainStorageProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchains),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokens),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.emissionsReceivers),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                confirmEpochDataHashReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])` and selector `0x1bf4951c`.
```solidity
function confirmSequencingChainBlockHash(uint256 seqChainID, bytes32 sendRoot, bytes memory ethereumBlockHeader, bytes[] memory ethereumAccountProof, bytes[] memory ethereumStorageProof) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmSequencingChainBlockHashCall {
        #[allow(missing_docs)]
        pub seqChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sendRoot: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub ethereumBlockHeader: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub ethereumAccountProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
        #[allow(missing_docs)]
        pub ethereumStorageProof: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Bytes,
        >,
    }
    ///Container type for the return parameters of the [`confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])`](confirmSequencingChainBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct confirmSequencingChainBlockHashReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmSequencingChainBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmSequencingChainBlockHashCall) -> Self {
                    (
                        value.seqChainID,
                        value.sendRoot,
                        value.ethereumBlockHeader,
                        value.ethereumAccountProof,
                        value.ethereumStorageProof,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmSequencingChainBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        seqChainID: tuple.0,
                        sendRoot: tuple.1,
                        ethereumBlockHeader: tuple.2,
                        ethereumAccountProof: tuple.3,
                        ethereumStorageProof: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<confirmSequencingChainBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: confirmSequencingChainBlockHashReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for confirmSequencingChainBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl confirmSequencingChainBlockHashReturn {
            fn _tokenize(
                &self,
            ) -> <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for confirmSequencingChainBlockHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = confirmSequencingChainBlockHashReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "confirmSequencingChainBlockHash(uint256,bytes32,bytes,bytes[],bytes[])";
            const SELECTOR: [u8; 4] = [27u8, 244u8, 149u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.seqChainID),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.sendRoot),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.ethereumBlockHeader,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethereumAccountProof),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethereumStorageProof),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                confirmSequencingChainBlockHashReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainEmissionsReceiver(uint256,uint256)` and selector `0x5b1817e8`.
```solidity
function epochAppchainEmissionsReceiver(uint256, uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainEmissionsReceiverCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainEmissionsReceiver(uint256,uint256)`](epochAppchainEmissionsReceiverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainEmissionsReceiverReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainEmissionsReceiverCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainEmissionsReceiverCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainEmissionsReceiverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainEmissionsReceiverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainEmissionsReceiverReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainEmissionsReceiverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainEmissionsReceiverCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainEmissionsReceiver(uint256,uint256)";
            const SELECTOR: [u8; 4] = [91u8, 24u8, 23u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainEmissionsReceiverReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainEmissionsReceiverReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainIDs(uint256,uint256)` and selector `0xff87c18c`.
```solidity
function epochAppchainIDs(uint256, uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainIDsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainIDs(uint256,uint256)`](epochAppchainIDsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainIDsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainIDsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainIDsCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainIDsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainIDsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainIDsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainIDsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainIDsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainIDs(uint256,uint256)";
            const SELECTOR: [u8; 4] = [255u8, 135u8, 193u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainIDsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainIDsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochAppchainTokensUsed(uint256,uint256)` and selector `0x55fcc556`.
```solidity
function epochAppchainTokensUsed(uint256, uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainTokensUsedCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochAppchainTokensUsed(uint256,uint256)`](epochAppchainTokensUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochAppchainTokensUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainTokensUsedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainTokensUsedCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainTokensUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochAppchainTokensUsedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochAppchainTokensUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochAppchainTokensUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochAppchainTokensUsedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochAppchainTokensUsed(uint256,uint256)";
            const SELECTOR: [u8; 4] = [85u8, 252u8, 197u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochAppchainTokensUsedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochAppchainTokensUsedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `epochTotalTokensUsed(uint256)` and selector `0x47dff69d`.
```solidity
function epochTotalTokensUsed(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochTotalTokensUsedCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`epochTotalTokensUsed(uint256)`](epochTotalTokensUsedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct epochTotalTokensUsedReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochTotalTokensUsedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochTotalTokensUsedCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochTotalTokensUsedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<epochTotalTokensUsedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: epochTotalTokensUsedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for epochTotalTokensUsedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for epochTotalTokensUsedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "epochTotalTokensUsed(uint256)";
            const SELECTOR: [u8; 4] = [71u8, 223u8, 246u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: epochTotalTokensUsedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: epochTotalTokensUsedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveAppchainIds(uint256)` and selector `0x2cd078b8`.
```solidity
function getActiveAppchainIds(uint256 epochIndex) external view returns (uint256[] memory _chainIDs);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveAppchainIdsCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveAppchainIds(uint256)`](getActiveAppchainIdsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveAppchainIdsReturn {
        #[allow(missing_docs)]
        pub _chainIDs: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveAppchainIdsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveAppchainIdsCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveAppchainIdsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveAppchainIdsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveAppchainIdsReturn) -> Self {
                    (value._chainIDs,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveAppchainIdsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _chainIDs: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveAppchainIdsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveAppchainIds(uint256)";
            const SELECTOR: [u8; 4] = [44u8, 208u8, 120u8, 184u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getActiveAppchainIdsReturn = r.into();
                        r._chainIDs
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getActiveAppchainIdsReturn = r.into();
                        r._chainIDs
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAppchainGasFees(uint256,uint256)` and selector `0x285f2446`.
```solidity
function getAppchainGasFees(uint256 epochIndex, uint256 appchainId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainGasFeesCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAppchainGasFees(uint256,uint256)`](getAppchainGasFeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainGasFeesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainGasFeesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainGasFeesCall) -> Self {
                    (value.epochIndex, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainGasFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochIndex: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainGasFeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainGasFeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainGasFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppchainGasFeesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppchainGasFees(uint256,uint256)";
            const SELECTOR: [u8; 4] = [40u8, 95u8, 36u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAppchainGasFeesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAppchainGasFeesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAppchainRewardsReceiver(uint256,uint256)` and selector `0xec828a91`.
```solidity
function getAppchainRewardsReceiver(uint256 epochIndex, uint256 appchainId) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainRewardsReceiverCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAppchainRewardsReceiver(uint256,uint256)`](getAppchainRewardsReceiverCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAppchainRewardsReceiverReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainRewardsReceiverCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainRewardsReceiverCall) -> Self {
                    (value.epochIndex, value.appchainId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainRewardsReceiverCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochIndex: tuple.0,
                        appchainId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAppchainRewardsReceiverReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAppchainRewardsReceiverReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAppchainRewardsReceiverReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAppchainRewardsReceiverCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAppchainRewardsReceiver(uint256,uint256)";
            const SELECTOR: [u8; 4] = [236u8, 130u8, 138u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appchainId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAppchainRewardsReceiverReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAppchainRewardsReceiverReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getTotalGasFees(uint256)` and selector `0xce537c9f`.
```solidity
function getTotalGasFees(uint256 epochIndex) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalGasFeesCall {
        #[allow(missing_docs)]
        pub epochIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getTotalGasFees(uint256)`](getTotalGasFeesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalGasFeesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalGasFeesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getTotalGasFeesCall) -> Self {
                    (value.epochIndex,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTotalGasFeesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { epochIndex: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalGasFeesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTotalGasFeesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTotalGasFeesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTotalGasFeesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTotalGasFees(uint256)";
            const SELECTOR: [u8; 4] = [206u8, 83u8, 124u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochIndex),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getTotalGasFeesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getTotalGasFeesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl grantRoleReturn {
            fn _tokenize(
                &self,
            ) -> <grantRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                grantRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initialize(address,uint256,address)` and selector `0xc350a1b5`.
```solidity
function initialize(address _blockHashSender, uint256 _settlementChainID, address admin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub _blockHashSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,uint256,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value._blockHashSender, value._settlementChainID, value.admin)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _blockHashSender: tuple.0,
                        _settlementChainID: tuple.1,
                        admin: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl initializeReturn {
            fn _tokenize(
                &self,
            ) -> <initializeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,uint256,address)";
            const SELECTOR: [u8; 4] = [195u8, 80u8, 161u8, 181u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._blockHashSender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._settlementChainID),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                initializeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownEthereumBlockHash()` and selector `0x23afb0ff`.
```solidity
function lastKnownEthereumBlockHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownEthereumBlockHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownEthereumBlockHash()`](lastKnownEthereumBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownEthereumBlockHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownEthereumBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownEthereumBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownEthereumBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownEthereumBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownEthereumBlockHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownEthereumBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownEthereumBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownEthereumBlockHash()";
            const SELECTOR: [u8; 4] = [35u8, 175u8, 176u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownEthereumBlockHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownEthereumBlockHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownSeqChainBlockHashes(uint256)` and selector `0x7a7f34e8`.
```solidity
function lastKnownSeqChainBlockHashes(uint256) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSeqChainBlockHashesCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownSeqChainBlockHashes(uint256)`](lastKnownSeqChainBlockHashesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSeqChainBlockHashesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSeqChainBlockHashesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSeqChainBlockHashesCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSeqChainBlockHashesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSeqChainBlockHashesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSeqChainBlockHashesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSeqChainBlockHashesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownSeqChainBlockHashesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownSeqChainBlockHashes(uint256)";
            const SELECTOR: [u8; 4] = [122u8, 127u8, 52u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownSeqChainBlockHashesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownSeqChainBlockHashesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `lastKnownSettlementChainBlockHash()` and selector `0xef512221`.
```solidity
function lastKnownSettlementChainBlockHash() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockHashCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`lastKnownSettlementChainBlockHash()`](lastKnownSettlementChainBlockHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastKnownSettlementChainBlockHashReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockHashCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastKnownSettlementChainBlockHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastKnownSettlementChainBlockHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastKnownSettlementChainBlockHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastKnownSettlementChainBlockHashCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastKnownSettlementChainBlockHash()";
            const SELECTOR: [u8; 4] = [239u8, 81u8, 34u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockHashReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: lastKnownSettlementChainBlockHashReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `removeSeqChain(uint256)` and selector `0x650e1312`.
```solidity
function removeSeqChain(uint256 chainID) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeSeqChainCall {
        #[allow(missing_docs)]
        pub chainID: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`removeSeqChain(uint256)`](removeSeqChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeSeqChainReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeSeqChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeSeqChainCall) -> Self {
                    (value.chainID,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeSeqChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { chainID: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeSeqChainReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeSeqChainReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeSeqChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl removeSeqChainReturn {
            fn _tokenize(
                &self,
            ) -> <removeSeqChainCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeSeqChainCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeSeqChainReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeSeqChain(uint256)";
            const SELECTOR: [u8; 4] = [101u8, 14u8, 19u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainID),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                removeSeqChainReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceRoleReturn {
            fn _tokenize(
                &self,
            ) -> <renounceRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeRoleReturn {
            fn _tokenize(
                &self,
            ) -> <revokeRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainEthOutbox(uint256)` and selector `0xfdd54123`.
```solidity
function seqChainEthOutbox(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthOutboxCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainEthOutbox(uint256)`](seqChainEthOutboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthOutboxReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthOutboxCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthOutboxCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthOutboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthOutboxReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthOutboxReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthOutboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainEthOutboxCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainEthOutbox(uint256)";
            const SELECTOR: [u8; 4] = [253u8, 213u8, 65u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainEthOutboxReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainEthOutboxReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainEthSendRootStorageSlot(uint256)` and selector `0xfd79d3e1`.
```solidity
function seqChainEthSendRootStorageSlot(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthSendRootStorageSlotCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainEthSendRootStorageSlot(uint256)`](seqChainEthSendRootStorageSlotCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainEthSendRootStorageSlotReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthSendRootStorageSlotCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthSendRootStorageSlotCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthSendRootStorageSlotCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainEthSendRootStorageSlotReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainEthSendRootStorageSlotReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainEthSendRootStorageSlotReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainEthSendRootStorageSlotCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainEthSendRootStorageSlot(uint256)";
            const SELECTOR: [u8; 4] = [253u8, 121u8, 211u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainEthSendRootStorageSlotReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainEthSendRootStorageSlotReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainGasAggregatorAddresses(uint256)` and selector `0x8dd50eee`.
```solidity
function seqChainGasAggregatorAddresses(uint256) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainGasAggregatorAddressesCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainGasAggregatorAddresses(uint256)`](seqChainGasAggregatorAddressesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainGasAggregatorAddressesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainGasAggregatorAddressesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainGasAggregatorAddressesCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainGasAggregatorAddressesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainGasAggregatorAddressesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: seqChainGasAggregatorAddressesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for seqChainGasAggregatorAddressesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainGasAggregatorAddressesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainGasAggregatorAddresses(uint256)";
            const SELECTOR: [u8; 4] = [141u8, 213u8, 14u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainGasAggregatorAddressesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainGasAggregatorAddressesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `seqChainIDs(uint256)` and selector `0xd26bcc80`.
```solidity
function seqChainIDs(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainIDsCall(pub alloy::sol_types::private::primitives::aliases::U256);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`seqChainIDs(uint256)`](seqChainIDsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct seqChainIDsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainIDsCall> for UnderlyingRustTuple<'_> {
                fn from(value: seqChainIDsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for seqChainIDsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<seqChainIDsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: seqChainIDsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for seqChainIDsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for seqChainIDsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "seqChainIDs(uint256)";
            const SELECTOR: [u8; 4] = [210u8, 107u8, 204u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: seqChainIDsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: seqChainIDsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setBlockHashSender(address)` and selector `0x7c715094`.
```solidity
function setBlockHashSender(address newBlockHashSender) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockHashSenderCall {
        #[allow(missing_docs)]
        pub newBlockHashSender: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setBlockHashSender(address)`](setBlockHashSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockHashSenderReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockHashSenderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBlockHashSenderCall) -> Self {
                    (value.newBlockHashSender,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBlockHashSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newBlockHashSender: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockHashSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBlockHashSenderReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBlockHashSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setBlockHashSenderReturn {
            fn _tokenize(
                &self,
            ) -> <setBlockHashSenderCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBlockHashSenderCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBlockHashSenderReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBlockHashSender(address)";
            const SELECTOR: [u8; 4] = [124u8, 113u8, 80u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newBlockHashSender,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setBlockHashSenderReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setLastKnownBlockHashes(bytes32,bytes32)` and selector `0x84211ca9`.
```solidity
function setLastKnownBlockHashes(bytes32 ethBlockHash, bytes32 settlementBlockHash) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLastKnownBlockHashesCall {
        #[allow(missing_docs)]
        pub ethBlockHash: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub settlementBlockHash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`setLastKnownBlockHashes(bytes32,bytes32)`](setLastKnownBlockHashesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setLastKnownBlockHashesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLastKnownBlockHashesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLastKnownBlockHashesCall) -> Self {
                    (value.ethBlockHash, value.settlementBlockHash)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLastKnownBlockHashesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        ethBlockHash: tuple.0,
                        settlementBlockHash: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setLastKnownBlockHashesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setLastKnownBlockHashesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setLastKnownBlockHashesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setLastKnownBlockHashesReturn {
            fn _tokenize(
                &self,
            ) -> <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setLastKnownBlockHashesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setLastKnownBlockHashesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setLastKnownBlockHashes(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [132u8, 33u8, 28u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethBlockHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.settlementBlockHash),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setLastKnownBlockHashesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `settlementChainID()` and selector `0x22623897`.
```solidity
function settlementChainID() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainIDCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`settlementChainID()`](settlementChainIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct settlementChainIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainIDCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<settlementChainIDReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: settlementChainIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for settlementChainIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for settlementChainIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "settlementChainID()";
            const SELECTOR: [u8; 4] = [34u8, 98u8, 56u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: settlementChainIDReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: settlementChainIDReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`GasArchive`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum GasArchiveCalls {
        #[allow(missing_docs)]
        AGGREGATED_EPOCH_DATA_HASH_SLOT(AGGREGATED_EPOCH_DATA_HASH_SLOTCall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        HEADER_STATE_ROOT_INDEX(HEADER_STATE_ROOT_INDEXCall),
        #[allow(missing_docs)]
        STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall),
        #[allow(missing_docs)]
        addSequencingChain(addSequencingChainCall),
        #[allow(missing_docs)]
        archivedEpochData(archivedEpochDataCall),
        #[allow(missing_docs)]
        blockHashSender(blockHashSenderCall),
        #[allow(missing_docs)]
        confirmEpochDataHash(confirmEpochDataHashCall),
        #[allow(missing_docs)]
        confirmSequencingChainBlockHash(confirmSequencingChainBlockHashCall),
        #[allow(missing_docs)]
        epochAppchainEmissionsReceiver(epochAppchainEmissionsReceiverCall),
        #[allow(missing_docs)]
        epochAppchainIDs(epochAppchainIDsCall),
        #[allow(missing_docs)]
        epochAppchainTokensUsed(epochAppchainTokensUsedCall),
        #[allow(missing_docs)]
        epochTotalTokensUsed(epochTotalTokensUsedCall),
        #[allow(missing_docs)]
        getActiveAppchainIds(getActiveAppchainIdsCall),
        #[allow(missing_docs)]
        getAppchainGasFees(getAppchainGasFeesCall),
        #[allow(missing_docs)]
        getAppchainRewardsReceiver(getAppchainRewardsReceiverCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        getTotalGasFees(getTotalGasFeesCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        lastKnownEthereumBlockHash(lastKnownEthereumBlockHashCall),
        #[allow(missing_docs)]
        lastKnownSeqChainBlockHashes(lastKnownSeqChainBlockHashesCall),
        #[allow(missing_docs)]
        lastKnownSettlementChainBlockHash(lastKnownSettlementChainBlockHashCall),
        #[allow(missing_docs)]
        removeSeqChain(removeSeqChainCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        seqChainEthOutbox(seqChainEthOutboxCall),
        #[allow(missing_docs)]
        seqChainEthSendRootStorageSlot(seqChainEthSendRootStorageSlotCall),
        #[allow(missing_docs)]
        seqChainGasAggregatorAddresses(seqChainGasAggregatorAddressesCall),
        #[allow(missing_docs)]
        seqChainIDs(seqChainIDsCall),
        #[allow(missing_docs)]
        setBlockHashSender(setBlockHashSenderCall),
        #[allow(missing_docs)]
        setLastKnownBlockHashes(setLastKnownBlockHashesCall),
        #[allow(missing_docs)]
        settlementChainID(settlementChainIDCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
    }
    #[automatically_derived]
    impl GasArchiveCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [19u8, 59u8, 248u8, 159u8],
            [27u8, 244u8, 149u8, 28u8],
            [34u8, 98u8, 56u8, 151u8],
            [35u8, 175u8, 176u8, 255u8],
            [36u8, 138u8, 156u8, 163u8],
            [40u8, 95u8, 36u8, 70u8],
            [44u8, 208u8, 120u8, 184u8],
            [47u8, 47u8, 241u8, 93u8],
            [50u8, 113u8, 186u8, 73u8],
            [54u8, 43u8, 129u8, 84u8],
            [54u8, 86u8, 138u8, 190u8],
            [71u8, 223u8, 246u8, 157u8],
            [85u8, 252u8, 197u8, 86u8],
            [91u8, 24u8, 23u8, 232u8],
            [101u8, 14u8, 19u8, 18u8],
            [106u8, 48u8, 172u8, 250u8],
            [107u8, 77u8, 23u8, 173u8],
            [122u8, 127u8, 52u8, 232u8],
            [124u8, 113u8, 80u8, 148u8],
            [132u8, 33u8, 28u8, 169u8],
            [141u8, 213u8, 14u8, 238u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [195u8, 80u8, 161u8, 181u8],
            [206u8, 83u8, 124u8, 159u8],
            [210u8, 107u8, 204u8, 128u8],
            [213u8, 71u8, 116u8, 31u8],
            [225u8, 139u8, 77u8, 174u8],
            [232u8, 196u8, 108u8, 40u8],
            [236u8, 130u8, 138u8, 145u8],
            [239u8, 81u8, 34u8, 33u8],
            [253u8, 121u8, 211u8, 225u8],
            [253u8, 213u8, 65u8, 35u8],
            [255u8, 135u8, 193u8, 140u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasArchiveCalls {
        const NAME: &'static str = "GasArchiveCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 35usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(_) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::HEADER_STATE_ROOT_INDEX(_) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(_) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addSequencingChain(_) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::archivedEpochData(_) => {
                    <archivedEpochDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blockHashSender(_) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmEpochDataHash(_) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::confirmSequencingChainBlockHash(_) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainEmissionsReceiver(_) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainIDs(_) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochAppchainTokensUsed(_) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::epochTotalTokensUsed(_) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveAppchainIds(_) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAppchainGasFees(_) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAppchainRewardsReceiver(_) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTotalGasFees(_) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownEthereumBlockHash(_) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownSeqChainBlockHashes(_) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastKnownSettlementChainBlockHash(_) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeSeqChain(_) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainEthOutbox(_) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainEthSendRootStorageSlot(_) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainGasAggregatorAddresses(_) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::seqChainIDs(_) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBlockHashSender(_) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setLastKnownBlockHashes(_) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::settlementChainID(_) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn addSequencingChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <addSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::addSequencingChain)
                    }
                    addSequencingChain
                },
                {
                    fn confirmSequencingChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::confirmSequencingChainBlockHash)
                    }
                    confirmSequencingChainBlockHash
                },
                {
                    fn settlementChainID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <settlementChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::settlementChainID)
                    }
                    settlementChainID
                },
                {
                    fn lastKnownEthereumBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownEthereumBlockHash)
                    }
                    lastKnownEthereumBlockHash
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getAppchainGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainGasFees)
                    }
                    getAppchainGasFees
                },
                {
                    fn getActiveAppchainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getActiveAppchainIds)
                    }
                    getActiveAppchainIds
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(GasArchiveCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn confirmEpochDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::confirmEpochDataHash)
                    }
                    confirmEpochDataHash
                },
                {
                    fn blockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <blockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::blockHashSender)
                    }
                    blockHashSender
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn epochTotalTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochTotalTokensUsed)
                    }
                    epochTotalTokensUsed
                },
                {
                    fn epochAppchainTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainTokensUsed)
                    }
                    epochAppchainTokensUsed
                },
                {
                    fn epochAppchainEmissionsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainEmissionsReceiver)
                    }
                    epochAppchainEmissionsReceiver
                },
                {
                    fn removeSeqChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <removeSeqChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::removeSeqChain)
                    }
                    removeSeqChain
                },
                {
                    fn archivedEpochData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <archivedEpochDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::archivedEpochData)
                    }
                    archivedEpochData
                },
                {
                    fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX)
                    }
                    STORAGE_ROOT_ACCOUNT_FIELDS_INDEX
                },
                {
                    fn lastKnownSeqChainBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSeqChainBlockHashes)
                    }
                    lastKnownSeqChainBlockHashes
                },
                {
                    fn setBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setBlockHashSender)
                    }
                    setBlockHashSender
                },
                {
                    fn setLastKnownBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::setLastKnownBlockHashes)
                    }
                    setLastKnownBlockHashes
                },
                {
                    fn seqChainGasAggregatorAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainGasAggregatorAddresses)
                    }
                    seqChainGasAggregatorAddresses
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(GasArchiveCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn initialize(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::initialize)
                    }
                    initialize
                },
                {
                    fn getTotalGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getTotalGasFees)
                    }
                    getTotalGasFees
                },
                {
                    fn seqChainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainIDs)
                    }
                    seqChainIDs
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn HEADER_STATE_ROOT_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::HEADER_STATE_ROOT_INDEX)
                    }
                    HEADER_STATE_ROOT_INDEX
                },
                {
                    fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::AGGREGATED_EPOCH_DATA_HASH_SLOT)
                    }
                    AGGREGATED_EPOCH_DATA_HASH_SLOT
                },
                {
                    fn getAppchainRewardsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainRewardsReceiver)
                    }
                    getAppchainRewardsReceiver
                },
                {
                    fn lastKnownSettlementChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockHash)
                    }
                    lastKnownSettlementChainBlockHash
                },
                {
                    fn seqChainEthSendRootStorageSlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthSendRootStorageSlot)
                    }
                    seqChainEthSendRootStorageSlot
                },
                {
                    fn seqChainEthOutbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthOutbox)
                    }
                    seqChainEthOutbox
                },
                {
                    fn epochAppchainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainIDs)
                    }
                    epochAppchainIDs
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn addSequencingChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <addSequencingChainCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::addSequencingChain)
                    }
                    addSequencingChain
                },
                {
                    fn confirmSequencingChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::confirmSequencingChainBlockHash)
                    }
                    confirmSequencingChainBlockHash
                },
                {
                    fn settlementChainID(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <settlementChainIDCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::settlementChainID)
                    }
                    settlementChainID
                },
                {
                    fn lastKnownEthereumBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownEthereumBlockHash)
                    }
                    lastKnownEthereumBlockHash
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn getAppchainGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainGasFees)
                    }
                    getAppchainGasFees
                },
                {
                    fn getActiveAppchainIds(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getActiveAppchainIds)
                    }
                    getActiveAppchainIds
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn confirmEpochDataHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::confirmEpochDataHash)
                    }
                    confirmEpochDataHash
                },
                {
                    fn blockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <blockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::blockHashSender)
                    }
                    blockHashSender
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn epochTotalTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochTotalTokensUsed)
                    }
                    epochTotalTokensUsed
                },
                {
                    fn epochAppchainTokensUsed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainTokensUsed)
                    }
                    epochAppchainTokensUsed
                },
                {
                    fn epochAppchainEmissionsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainEmissionsReceiver)
                    }
                    epochAppchainEmissionsReceiver
                },
                {
                    fn removeSeqChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <removeSeqChainCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::removeSeqChain)
                    }
                    removeSeqChain
                },
                {
                    fn archivedEpochData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <archivedEpochDataCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::archivedEpochData)
                    }
                    archivedEpochData
                },
                {
                    fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX)
                    }
                    STORAGE_ROOT_ACCOUNT_FIELDS_INDEX
                },
                {
                    fn lastKnownSeqChainBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSeqChainBlockHashes)
                    }
                    lastKnownSeqChainBlockHashes
                },
                {
                    fn setBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setBlockHashSender)
                    }
                    setBlockHashSender
                },
                {
                    fn setLastKnownBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::setLastKnownBlockHashes)
                    }
                    setLastKnownBlockHashes
                },
                {
                    fn seqChainGasAggregatorAddresses(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainGasAggregatorAddresses)
                    }
                    seqChainGasAggregatorAddresses
                },
                {
                    fn hasRole(data: &[u8]) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn initialize(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::initialize)
                    }
                    initialize
                },
                {
                    fn getTotalGasFees(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getTotalGasFees)
                    }
                    getTotalGasFees
                },
                {
                    fn seqChainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainIDs)
                    }
                    seqChainIDs
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn HEADER_STATE_ROOT_INDEX(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::HEADER_STATE_ROOT_INDEX)
                    }
                    HEADER_STATE_ROOT_INDEX
                },
                {
                    fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::AGGREGATED_EPOCH_DATA_HASH_SLOT)
                    }
                    AGGREGATED_EPOCH_DATA_HASH_SLOT
                },
                {
                    fn getAppchainRewardsReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::getAppchainRewardsReceiver)
                    }
                    getAppchainRewardsReceiver
                },
                {
                    fn lastKnownSettlementChainBlockHash(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::lastKnownSettlementChainBlockHash)
                    }
                    lastKnownSettlementChainBlockHash
                },
                {
                    fn seqChainEthSendRootStorageSlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthSendRootStorageSlot)
                    }
                    seqChainEthSendRootStorageSlot
                },
                {
                    fn seqChainEthOutbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::seqChainEthOutbox)
                    }
                    seqChainEthOutbox
                },
                {
                    fn epochAppchainIDs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveCalls> {
                        <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveCalls::epochAppchainIDs)
                    }
                    epochAppchainIDs
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(inner) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::HEADER_STATE_ROOT_INDEX(inner) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(inner) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addSequencingChain(inner) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::archivedEpochData(inner) => {
                    <archivedEpochDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blockHashSender(inner) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmEpochDataHash(inner) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::confirmSequencingChainBlockHash(inner) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainEmissionsReceiver(inner) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainIDs(inner) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochAppchainTokensUsed(inner) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::epochTotalTokensUsed(inner) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveAppchainIds(inner) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAppchainGasFees(inner) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAppchainRewardsReceiver(inner) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTotalGasFees(inner) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::lastKnownEthereumBlockHash(inner) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastKnownSeqChainBlockHashes(inner) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastKnownSettlementChainBlockHash(inner) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeSeqChain(inner) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::seqChainEthOutbox(inner) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainEthSendRootStorageSlot(inner) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainGasAggregatorAddresses(inner) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::seqChainIDs(inner) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBlockHashSender(inner) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setLastKnownBlockHashes(inner) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::settlementChainID(inner) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AGGREGATED_EPOCH_DATA_HASH_SLOT(inner) => {
                    <AGGREGATED_EPOCH_DATA_HASH_SLOTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::HEADER_STATE_ROOT_INDEX(inner) => {
                    <HEADER_STATE_ROOT_INDEXCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(inner) => {
                    <STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addSequencingChain(inner) => {
                    <addSequencingChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::archivedEpochData(inner) => {
                    <archivedEpochDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blockHashSender(inner) => {
                    <blockHashSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmEpochDataHash(inner) => {
                    <confirmEpochDataHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::confirmSequencingChainBlockHash(inner) => {
                    <confirmSequencingChainBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainEmissionsReceiver(inner) => {
                    <epochAppchainEmissionsReceiverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainIDs(inner) => {
                    <epochAppchainIDsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochAppchainTokensUsed(inner) => {
                    <epochAppchainTokensUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::epochTotalTokensUsed(inner) => {
                    <epochTotalTokensUsedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveAppchainIds(inner) => {
                    <getActiveAppchainIdsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAppchainGasFees(inner) => {
                    <getAppchainGasFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAppchainRewardsReceiver(inner) => {
                    <getAppchainRewardsReceiverCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTotalGasFees(inner) => {
                    <getTotalGasFeesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownEthereumBlockHash(inner) => {
                    <lastKnownEthereumBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownSeqChainBlockHashes(inner) => {
                    <lastKnownSeqChainBlockHashesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastKnownSettlementChainBlockHash(inner) => {
                    <lastKnownSettlementChainBlockHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeSeqChain(inner) => {
                    <removeSeqChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainEthOutbox(inner) => {
                    <seqChainEthOutboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainEthSendRootStorageSlot(inner) => {
                    <seqChainEthSendRootStorageSlotCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainGasAggregatorAddresses(inner) => {
                    <seqChainGasAggregatorAddressesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::seqChainIDs(inner) => {
                    <seqChainIDsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBlockHashSender(inner) => {
                    <setBlockHashSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setLastKnownBlockHashes(inner) => {
                    <setLastKnownBlockHashesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::settlementChainID(inner) => {
                    <settlementChainIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasArchive`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum GasArchiveErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        AccountDoesNotExistInProof(AccountDoesNotExistInProof),
        #[allow(missing_docs)]
        CannotSubmitProofForSettlementChain(CannotSubmitProofForSettlementChain),
        #[allow(missing_docs)]
        ChainIDNotFound(ChainIDNotFound),
        #[allow(missing_docs)]
        EmptySlot(EmptySlot),
        #[allow(missing_docs)]
        InvalidData(InvalidData),
        #[allow(missing_docs)]
        InvalidEthereumBlockHeader(InvalidEthereumBlockHeader),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        InvalidProof(InvalidProof),
        #[allow(missing_docs)]
        InvalidSeqChainBlockHeader(InvalidSeqChainBlockHeader),
        #[allow(missing_docs)]
        NotArchivedEpoch(NotArchivedEpoch),
        #[allow(missing_docs)]
        NotBlockHashSender(NotBlockHashSender),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        SequencingChainAlreadyExists(SequencingChainAlreadyExists),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
    }
    #[automatically_derived]
    impl GasArchiveErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 189u8, 227u8, 57u8],
            [18u8, 66u8, 233u8, 187u8],
            [36u8, 178u8, 231u8, 253u8],
            [52u8, 119u8, 220u8, 218u8],
            [84u8, 119u8, 6u8, 175u8],
            [92u8, 176u8, 69u8, 219u8],
            [102u8, 151u8, 178u8, 50u8],
            [157u8, 140u8, 186u8, 205u8],
            [197u8, 177u8, 69u8, 113u8],
            [215u8, 230u8, 188u8, 248u8],
            [217u8, 46u8, 35u8, 61u8],
            [218u8, 38u8, 18u8, 128u8],
            [223u8, 101u8, 10u8, 0u8],
            [226u8, 81u8, 125u8, 63u8],
            [239u8, 182u8, 76u8, 248u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GasArchiveErrors {
        const NAME: &'static str = "GasArchiveErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccountDoesNotExistInProof(_) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CannotSubmitProofForSettlementChain(_) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ChainIDNotFound(_) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptySlot(_) => <EmptySlot as alloy_sol_types::SolError>::SELECTOR,
                Self::InvalidData(_) => {
                    <InvalidData as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidEthereumBlockHeader(_) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidProof(_) => {
                    <InvalidProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidSeqChainBlockHeader(_) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotArchivedEpoch(_) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotBlockHashSender(_) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SequencingChainAlreadyExists(_) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ChainIDNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ChainIDNotFound as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::ChainIDNotFound)
                    }
                    ChainIDNotFound
                },
                {
                    fn NotBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotBlockHashSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotBlockHashSender)
                    }
                    NotBlockHashSender
                },
                {
                    fn EmptySlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptySlot as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::EmptySlot)
                    }
                    EmptySlot
                },
                {
                    fn AccountDoesNotExistInProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccountDoesNotExistInProof)
                    }
                    AccountDoesNotExistInProof
                },
                {
                    fn InvalidData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidData as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::InvalidData)
                    }
                    InvalidData
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn InvalidSeqChainBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidSeqChainBlockHeader)
                    }
                    InvalidSeqChainBlockHeader
                },
                {
                    fn NotArchivedEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotArchivedEpoch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotArchivedEpoch)
                    }
                    NotArchivedEpoch
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(GasArchiveErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn CannotSubmitProofForSettlementChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::CannotSubmitProofForSettlementChain)
                    }
                    CannotSubmitProofForSettlementChain
                },
                {
                    fn SequencingChainAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::SequencingChainAlreadyExists)
                    }
                    SequencingChainAlreadyExists
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidEthereumBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidEthereumBlockHeader)
                    }
                    InvalidEthereumBlockHeader
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<GasArchiveErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ChainIDNotFound(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ChainIDNotFound as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ChainIDNotFound)
                    }
                    ChainIDNotFound
                },
                {
                    fn NotBlockHashSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotBlockHashSender as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotBlockHashSender)
                    }
                    NotBlockHashSender
                },
                {
                    fn EmptySlot(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <EmptySlot as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::EmptySlot)
                    }
                    EmptySlot
                },
                {
                    fn AccountDoesNotExistInProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccountDoesNotExistInProof)
                    }
                    AccountDoesNotExistInProof
                },
                {
                    fn InvalidData(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidData as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidData)
                    }
                    InvalidData
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn InvalidSeqChainBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidSeqChainBlockHeader)
                    }
                    InvalidSeqChainBlockHeader
                },
                {
                    fn NotArchivedEpoch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotArchivedEpoch as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotArchivedEpoch)
                    }
                    NotArchivedEpoch
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn CannotSubmitProofForSettlementChain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::CannotSubmitProofForSettlementChain)
                    }
                    CannotSubmitProofForSettlementChain
                },
                {
                    fn SequencingChainAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::SequencingChainAlreadyExists)
                    }
                    SequencingChainAlreadyExists
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::AccessControlUnauthorizedAccount)
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn InvalidEthereumBlockHeader(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidEthereumBlockHeader)
                    }
                    InvalidEthereumBlockHeader
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<GasArchiveErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(GasArchiveErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccountDoesNotExistInProof(inner) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CannotSubmitProofForSettlementChain(inner) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ChainIDNotFound(inner) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptySlot(inner) => {
                    <EmptySlot as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidData(inner) => {
                    <InvalidData as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidEthereumBlockHeader(inner) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidSeqChainBlockHeader(inner) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotArchivedEpoch(inner) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotBlockHashSender(inner) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SequencingChainAlreadyExists(inner) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccountDoesNotExistInProof(inner) => {
                    <AccountDoesNotExistInProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CannotSubmitProofForSettlementChain(inner) => {
                    <CannotSubmitProofForSettlementChain as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ChainIDNotFound(inner) => {
                    <ChainIDNotFound as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptySlot(inner) => {
                    <EmptySlot as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::InvalidData(inner) => {
                    <InvalidData as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidEthereumBlockHeader(inner) => {
                    <InvalidEthereumBlockHeader as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidSeqChainBlockHeader(inner) => {
                    <InvalidSeqChainBlockHeader as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotArchivedEpoch(inner) => {
                    <NotArchivedEpoch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotBlockHashSender(inner) => {
                    <NotBlockHashSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SequencingChainAlreadyExists(inner) => {
                    <SequencingChainAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`GasArchive`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum GasArchiveEvents {
        #[allow(missing_docs)]
        EpochDataValidated(EpochDataValidated),
        #[allow(missing_docs)]
        GasAggregatorAddressUpdated(GasAggregatorAddressUpdated),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl GasArchiveEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                44u8, 63u8, 68u8, 53u8, 153u8, 198u8, 38u8, 138u8, 206u8, 212u8, 115u8,
                231u8, 102u8, 11u8, 64u8, 116u8, 110u8, 163u8, 148u8, 213u8, 25u8, 23u8,
                158u8, 163u8, 246u8, 15u8, 56u8, 41u8, 116u8, 162u8, 231u8, 142u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                48u8, 47u8, 84u8, 53u8, 17u8, 144u8, 34u8, 114u8, 142u8, 174u8, 246u8,
                210u8, 52u8, 49u8, 158u8, 17u8, 217u8, 8u8, 181u8, 4u8, 249u8, 4u8, 66u8,
                235u8, 59u8, 230u8, 96u8, 111u8, 201u8, 84u8, 87u8, 87u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for GasArchiveEvents {
        const NAME: &'static str = "GasArchiveEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <EpochDataValidated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EpochDataValidated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EpochDataValidated)
                }
                Some(
                    <GasAggregatorAddressUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <GasAggregatorAddressUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::GasAggregatorAddressUpdated)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::Initialized)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for GasArchiveEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochDataValidated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::GasAggregatorAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochDataValidated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::GasAggregatorAddressUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GasArchive`](self) contract instance.

See the [wrapper's documentation](`GasArchiveInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GasArchiveInstance<P, N> {
        GasArchiveInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GasArchiveInstance<P, N>>,
    > {
        GasArchiveInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        GasArchiveInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`GasArchive`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GasArchive`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GasArchiveInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for GasArchiveInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GasArchiveInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`GasArchive`](self) contract instance.

See the [wrapper's documentation](`GasArchiveInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GasArchiveInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> GasArchiveInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GasArchiveInstance<P, N> {
            GasArchiveInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AGGREGATED_EPOCH_DATA_HASH_SLOT`] function.
        pub fn AGGREGATED_EPOCH_DATA_HASH_SLOT(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, AGGREGATED_EPOCH_DATA_HASH_SLOTCall, N> {
            self.call_builder(&AGGREGATED_EPOCH_DATA_HASH_SLOTCall)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`HEADER_STATE_ROOT_INDEX`] function.
        pub fn HEADER_STATE_ROOT_INDEX(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, HEADER_STATE_ROOT_INDEXCall, N> {
            self.call_builder(&HEADER_STATE_ROOT_INDEXCall)
        }
        ///Creates a new call builder for the [`STORAGE_ROOT_ACCOUNT_FIELDS_INDEX`] function.
        pub fn STORAGE_ROOT_ACCOUNT_FIELDS_INDEX(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall,
            N,
        > {
            self.call_builder(&STORAGE_ROOT_ACCOUNT_FIELDS_INDEXCall)
        }
        ///Creates a new call builder for the [`addSequencingChain`] function.
        pub fn addSequencingChain(
            &self,
            chainID: alloy::sol_types::private::primitives::aliases::U256,
            aggregatorAddress: alloy::sol_types::private::Address,
            bridgeAddress: alloy::sol_types::private::Address,
            storageSlotIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, addSequencingChainCall, N> {
            self.call_builder(
                &addSequencingChainCall {
                    chainID,
                    aggregatorAddress,
                    bridgeAddress,
                    storageSlotIndex,
                },
            )
        }
        ///Creates a new call builder for the [`archivedEpochData`] function.
        pub fn archivedEpochData(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, archivedEpochDataCall, N> {
            self.call_builder(&archivedEpochDataCall(_0))
        }
        ///Creates a new call builder for the [`blockHashSender`] function.
        pub fn blockHashSender(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, blockHashSenderCall, N> {
            self.call_builder(&blockHashSenderCall)
        }
        ///Creates a new call builder for the [`confirmEpochDataHash`] function.
        pub fn confirmEpochDataHash(
            &self,
            epoch: alloy::sol_types::private::primitives::aliases::U256,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
            seqChainBlockHeader: alloy::sol_types::private::Bytes,
            seqChainAccountProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            seqChainStorageProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            appchains: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            tokens: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            emissionsReceivers: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, confirmEpochDataHashCall, N> {
            self.call_builder(
                &confirmEpochDataHashCall {
                    epoch,
                    seqChainID,
                    seqChainBlockHeader,
                    seqChainAccountProof,
                    seqChainStorageProof,
                    appchains,
                    tokens,
                    emissionsReceivers,
                },
            )
        }
        ///Creates a new call builder for the [`confirmSequencingChainBlockHash`] function.
        pub fn confirmSequencingChainBlockHash(
            &self,
            seqChainID: alloy::sol_types::private::primitives::aliases::U256,
            sendRoot: alloy::sol_types::private::FixedBytes<32>,
            ethereumBlockHeader: alloy::sol_types::private::Bytes,
            ethereumAccountProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
            ethereumStorageProof: alloy::sol_types::private::Vec<
                alloy::sol_types::private::Bytes,
            >,
        ) -> alloy_contract::SolCallBuilder<&P, confirmSequencingChainBlockHashCall, N> {
            self.call_builder(
                &confirmSequencingChainBlockHashCall {
                    seqChainID,
                    sendRoot,
                    ethereumBlockHeader,
                    ethereumAccountProof,
                    ethereumStorageProof,
                },
            )
        }
        ///Creates a new call builder for the [`epochAppchainEmissionsReceiver`] function.
        pub fn epochAppchainEmissionsReceiver(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainEmissionsReceiverCall, N> {
            self.call_builder(
                &epochAppchainEmissionsReceiverCall {
                    _0,
                    _1,
                },
            )
        }
        ///Creates a new call builder for the [`epochAppchainIDs`] function.
        pub fn epochAppchainIDs(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainIDsCall, N> {
            self.call_builder(&epochAppchainIDsCall { _0, _1 })
        }
        ///Creates a new call builder for the [`epochAppchainTokensUsed`] function.
        pub fn epochAppchainTokensUsed(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochAppchainTokensUsedCall, N> {
            self.call_builder(
                &epochAppchainTokensUsedCall {
                    _0,
                    _1,
                },
            )
        }
        ///Creates a new call builder for the [`epochTotalTokensUsed`] function.
        pub fn epochTotalTokensUsed(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, epochTotalTokensUsedCall, N> {
            self.call_builder(&epochTotalTokensUsedCall(_0))
        }
        ///Creates a new call builder for the [`getActiveAppchainIds`] function.
        pub fn getActiveAppchainIds(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getActiveAppchainIdsCall, N> {
            self.call_builder(
                &getActiveAppchainIdsCall {
                    epochIndex,
                },
            )
        }
        ///Creates a new call builder for the [`getAppchainGasFees`] function.
        pub fn getAppchainGasFees(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getAppchainGasFeesCall, N> {
            self.call_builder(
                &getAppchainGasFeesCall {
                    epochIndex,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`getAppchainRewardsReceiver`] function.
        pub fn getAppchainRewardsReceiver(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
            appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getAppchainRewardsReceiverCall, N> {
            self.call_builder(
                &getAppchainRewardsReceiverCall {
                    epochIndex,
                    appchainId,
                },
            )
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`getTotalGasFees`] function.
        pub fn getTotalGasFees(
            &self,
            epochIndex: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getTotalGasFeesCall, N> {
            self.call_builder(&getTotalGasFeesCall { epochIndex })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            _blockHashSender: alloy::sol_types::private::Address,
            _settlementChainID: alloy::sol_types::private::primitives::aliases::U256,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    _blockHashSender,
                    _settlementChainID,
                    admin,
                },
            )
        }
        ///Creates a new call builder for the [`lastKnownEthereumBlockHash`] function.
        pub fn lastKnownEthereumBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, lastKnownEthereumBlockHashCall, N> {
            self.call_builder(&lastKnownEthereumBlockHashCall)
        }
        ///Creates a new call builder for the [`lastKnownSeqChainBlockHashes`] function.
        pub fn lastKnownSeqChainBlockHashes(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, lastKnownSeqChainBlockHashesCall, N> {
            self.call_builder(&lastKnownSeqChainBlockHashesCall(_0))
        }
        ///Creates a new call builder for the [`lastKnownSettlementChainBlockHash`] function.
        pub fn lastKnownSettlementChainBlockHash(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            lastKnownSettlementChainBlockHashCall,
            N,
        > {
            self.call_builder(&lastKnownSettlementChainBlockHashCall)
        }
        ///Creates a new call builder for the [`removeSeqChain`] function.
        pub fn removeSeqChain(
            &self,
            chainID: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, removeSeqChainCall, N> {
            self.call_builder(&removeSeqChainCall { chainID })
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`seqChainEthOutbox`] function.
        pub fn seqChainEthOutbox(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainEthOutboxCall, N> {
            self.call_builder(&seqChainEthOutboxCall(_0))
        }
        ///Creates a new call builder for the [`seqChainEthSendRootStorageSlot`] function.
        pub fn seqChainEthSendRootStorageSlot(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainEthSendRootStorageSlotCall, N> {
            self.call_builder(&seqChainEthSendRootStorageSlotCall(_0))
        }
        ///Creates a new call builder for the [`seqChainGasAggregatorAddresses`] function.
        pub fn seqChainGasAggregatorAddresses(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainGasAggregatorAddressesCall, N> {
            self.call_builder(&seqChainGasAggregatorAddressesCall(_0))
        }
        ///Creates a new call builder for the [`seqChainIDs`] function.
        pub fn seqChainIDs(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, seqChainIDsCall, N> {
            self.call_builder(&seqChainIDsCall(_0))
        }
        ///Creates a new call builder for the [`setBlockHashSender`] function.
        pub fn setBlockHashSender(
            &self,
            newBlockHashSender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, setBlockHashSenderCall, N> {
            self.call_builder(
                &setBlockHashSenderCall {
                    newBlockHashSender,
                },
            )
        }
        ///Creates a new call builder for the [`setLastKnownBlockHashes`] function.
        pub fn setLastKnownBlockHashes(
            &self,
            ethBlockHash: alloy::sol_types::private::FixedBytes<32>,
            settlementBlockHash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, setLastKnownBlockHashesCall, N> {
            self.call_builder(
                &setLastKnownBlockHashesCall {
                    ethBlockHash,
                    settlementBlockHash,
                },
            )
        }
        ///Creates a new call builder for the [`settlementChainID`] function.
        pub fn settlementChainID(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, settlementChainIDCall, N> {
            self.call_builder(&settlementChainIDCall)
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > GasArchiveInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`EpochDataValidated`] event.
        pub fn EpochDataValidated_filter(
            &self,
        ) -> alloy_contract::Event<&P, EpochDataValidated, N> {
            self.event_filter::<EpochDataValidated>()
        }
        ///Creates a new event filter for the [`GasAggregatorAddressUpdated`] event.
        pub fn GasAggregatorAddressUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, GasAggregatorAddressUpdated, N> {
            self.event_filter::<GasAggregatorAddressUpdated>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(&self) -> alloy_contract::Event<&P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(&self) -> alloy_contract::Event<&P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(&self) -> alloy_contract::Event<&P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
