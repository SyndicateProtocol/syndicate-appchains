/**

Generated by the following Solidity interface...
```solidity
interface DummyKeyManager {
    event KeyAdded(address indexed key);
    event KeysRevoked();

    function addKey(address publicKey) external;
    function isKeyValid(address publicKey) external view returns (bool);
    function revokeAllKeys() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addKey",
    "inputs": [
      {
        "name": "publicKey",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isKeyValid",
    "inputs": [
      {
        "name": "publicKey",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "revokeAllKeys",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "KeyAdded",
    "inputs": [
      {
        "name": "key",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeysRevoked",
    "inputs": [],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DummyKeyManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b610b8b61002b8239610b8b90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61018e565b61001d5f3561004c565b80635f7b68be146100475780637217efcd146100425763c172ac100361000e5761015b565b610117565b6100bd565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61007490610060565b90565b6100808161006b565b0361008757565b5f80fd5b9050359061009882610077565b565b906020828203126100b3576100b0915f0161008b565b90565b61005c565b5f0190565b346100eb576100d56100d036600461009a565b61027d565b6100dd610052565b806100e7816100b8565b0390f35b610058565b151590565b6100fe906100f0565b9052565b9190610115905f602085019401906100f5565b565b346101475761014361013261012d36600461009a565b6102de565b61013a610052565b91829182610102565b0390f35b610058565b5f91031261015657565b61005c565b346101895761016b36600461014c565b61017361041a565b61017b610052565b80610185816100b8565b0390f35b610058565b5f80fd5b90565b60209181520190565b60207f73206f72206661696c656420746f206164640000000000000000000000000000917f5465654b65794d616e616765723a204b657920616c72656164792065786973745f8201520152565b6101f86032604092610195565b6102018161019e565b0190565b61021a9060208101905f8183039101526101eb565b90565b1561022457565b61022c610052565b62461bcd60e51b81528061024260048201610205565b0390fd5b90565b61025d61025861026292610060565b610246565b610060565b90565b61026e90610249565b90565b61027a90610265565b90565b61029861029361028c5f610192565b839061051c565b61021d565b6102c27f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e91610271565b906102cb610052565b806102d5816100b8565b0390a2565b5f90565b6102f9906102ea6102da565b506102f45f610192565b610556565b90565b90565b90565b61031661031161031b926102fc565b610246565b6102ff565b90565b600161032a91016102ff565b90565b5190565b634e487b7160e01b5f52603260045260245ffd5b9061034f8261032d565b811015610360576020809102010190565b610331565b61036f905161006b565b90565b60207f6b65790000000000000000000000000000000000000000000000000000000000917f5465654b65794d616e616765723a204661696c656420746f2072656d6f7665205f8201520152565b6103cc6023604092610195565b6103d581610372565b0190565b6103ee9060208101905f8183039101526103bf565b90565b156103f857565b610400610052565b62461bcd60e51b815280610416600482016103d9565b0390fd5b61042b6104265f610192565b610595565b906104355f610302565b5b8061045161044b6104468661032d565b6102ff565b916102ff565b10156104925761048d9061048861048361046a5f610192565b61047d610478888690610345565b610365565b906105bd565b6103f1565b61031e565b610436565b5090507f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac6104be610052565b806104c8816100b8565b0390a1565b6104d690610249565b90565b6104ed6104e86104f292610060565b610246565b6102ff565b90565b90565b5f1b90565b61051161050c610516926102ff565b6104f8565b6104f5565b90565b90565b9061054e61054861054361053e5f610553966105366102da565b5001946104cd565b6104d9565b6104fd565b91610519565b61074f565b90565b9061058861058261057d6105785f61058d966105706102da565b5001946104cd565b6104d9565b6104fd565b91610519565b6107d6565b90565b606090565b6105ac5f6105b1926105a5610590565b5001610519565b61092f565b6105b9610590565b5090565b906105ef6105e96105e46105df5f6105f4966105d76102da565b5001946104cd565b6104d9565b6104fd565b91610519565b610a85565b90565b90565b634e487b7160e01b5f52604160045260245ffd5b5f5260205f2090565b5490565b61062481610617565b82101561063e5761063660019161060e565b910201905f90565b610331565b1b90565b9190600861066291029161065c5f1984610643565b92610643565b9181191691161790565b610675906104f5565b90565b5f1c90565b61068690610678565b90565b919061069f61069a6106a79361066c565b61067d565b908354610647565b9055565b90815491680100000000000000008310156106db57826106d39160016106d99501815561061b565b90610689565b565b6105fa565b5490565b906106ee9061066c565b5f5260205260405f2090565b906107065f19916104f8565b9181191691161790565b61072461071f610729926102ff565b610246565b6102ff565b90565b90565b9061074461073f61074b92610710565b61072c565b82546106fa565b9055565b6107576102da565b5061076c6107668284906107d6565b156100f0565b5f146107ac576107a26107a79261078e6107875f85016105f7565b82906106ab565b600161079b5f85016106e0565b93016106e4565b61072f565b600190565b50505f90565b90565b6107c16107c691610678565b6107b2565b90565b6107d390546107b5565b90565b6107f49160016107ef926107e86102da565b50016106e4565b6107c9565b6108066108005f610302565b916102ff565b141590565b606090565b60209181520190565b5f5260205f2090565b61082b906104f5565b9052565b9061083c81602093610822565b0190565b90565b61084f61085491610678565b610840565b90565b6108619054610843565b90565b60010190565b9061088761088161087a846106e0565b8093610810565b92610819565b905f5b8181106108975750505090565b9091926108b76108b16001926108ac87610857565b61082f565b94610864565b910191909161088a565b906108cb9161086a565b90565b601f801991011690565b906108e2906108ce565b810190811067ffffffffffffffff8211176108fc57604052565b6105fa565b9061092161091a92610911610052565b938480926108c1565b03836108d8565b565b61092c90610901565b90565b5f6109439161093c61080b565b5001610923565b90565b90565b61095d61095861096292610946565b610246565b6102ff565b90565b634e487b7160e01b5f52601160045260245ffd5b61098861098e919392936102ff565b926102ff565b820391821161099957565b610965565b6109a7816106e0565b8210156109c1576109b9600191610819565b910201905f90565b610331565b1c90565b6109da9060086109df93026109c6565b610840565b90565b906109ed91546109ca565b90565b634e487b7160e01b5f52603160045260245ffd5b5f90565b610a1a91610a14610a04565b91610689565b565b610a2581610617565b8015610a46576001900390610a43610a3d838361061b565b90610a08565b55565b6109f0565b9190610a61610a5c610a6993610710565b61072c565b908354610647565b9055565b5f90565b610a8391610a7d610a6d565b91610a4b565b565b610a8d6102da565b50610aa4610a9f6001830184906106e4565b6107c9565b9081610ab8610ab25f610302565b916102ff565b14155f14610b8457610b36926001610b319284610adf5f96610ad985610949565b90610979565b610afc610aed8885016106e0565b610af686610949565b90610979565b81610b0f610b09836102ff565b916102ff565b03610b3b575b505050610b2b610b268683016105f7565b610a1c565b016106e4565b610a71565b600190565b610b7c92610b6e610b5a610b54610b77948c890161099e565b906109e2565b93610b6885918c890161099e565b90610689565b918585016106e4565b61072f565b5f8080610b15565b5050505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x0B\x8Ba\0+\x829a\x0B\x8B\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\x8EV[a\0\x1D_5a\0LV[\x80c_{h\xBE\x14a\0GW\x80cr\x17\xEF\xCD\x14a\0BWc\xC1r\xAC\x10\x03a\0\x0EWa\x01[V[a\x01\x17V[a\0\xBDV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0t\x90a\0`V[\x90V[a\0\x80\x81a\0kV[\x03a\0\x87WV[_\x80\xFD[\x90P5\x90a\0\x98\x82a\0wV[V[\x90` \x82\x82\x03\x12a\0\xB3Wa\0\xB0\x91_\x01a\0\x8BV[\x90V[a\0\\V[_\x01\x90V[4a\0\xEBWa\0\xD5a\0\xD06`\x04a\0\x9AV[a\x02}V[a\0\xDDa\0RV[\x80a\0\xE7\x81a\0\xB8V[\x03\x90\xF3[a\0XV[\x15\x15\x90V[a\0\xFE\x90a\0\xF0V[\x90RV[\x91\x90a\x01\x15\x90_` \x85\x01\x94\x01\x90a\0\xF5V[V[4a\x01GWa\x01Ca\x012a\x01-6`\x04a\0\x9AV[a\x02\xDEV[a\x01:a\0RV[\x91\x82\x91\x82a\x01\x02V[\x03\x90\xF3[a\0XV[_\x91\x03\x12a\x01VWV[a\0\\V[4a\x01\x89Wa\x01k6`\x04a\x01LV[a\x01sa\x04\x1AV[a\x01{a\0RV[\x80a\x01\x85\x81a\0\xB8V[\x03\x90\xF3[a\0XV[_\x80\xFD[\x90V[` \x91\x81R\x01\x90V[` \x7Fs or failed to add\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Key already exist_\x82\x01R\x01RV[a\x01\xF8`2`@\x92a\x01\x95V[a\x02\x01\x81a\x01\x9EV[\x01\x90V[a\x02\x1A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xEBV[\x90V[\x15a\x02$WV[a\x02,a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02B`\x04\x82\x01a\x02\x05V[\x03\x90\xFD[\x90V[a\x02]a\x02Xa\x02b\x92a\0`V[a\x02FV[a\0`V[\x90V[a\x02n\x90a\x02IV[\x90V[a\x02z\x90a\x02eV[\x90V[a\x02\x98a\x02\x93a\x02\x8C_a\x01\x92V[\x83\x90a\x05\x1CV[a\x02\x1DV[a\x02\xC2\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~\x91a\x02qV[\x90a\x02\xCBa\0RV[\x80a\x02\xD5\x81a\0\xB8V[\x03\x90\xA2V[_\x90V[a\x02\xF9\x90a\x02\xEAa\x02\xDAV[Pa\x02\xF4_a\x01\x92V[a\x05VV[\x90V[\x90V[\x90V[a\x03\x16a\x03\x11a\x03\x1B\x92a\x02\xFCV[a\x02FV[a\x02\xFFV[\x90V[`\x01a\x03*\x91\x01a\x02\xFFV[\x90V[Q\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x03O\x82a\x03-V[\x81\x10\x15a\x03`W` \x80\x91\x02\x01\x01\x90V[a\x031V[a\x03o\x90Qa\0kV[\x90V[` \x7Fkey\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Failed to remove _\x82\x01R\x01RV[a\x03\xCC`#`@\x92a\x01\x95V[a\x03\xD5\x81a\x03rV[\x01\x90V[a\x03\xEE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xBFV[\x90V[\x15a\x03\xF8WV[a\x04\0a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\x16`\x04\x82\x01a\x03\xD9V[\x03\x90\xFD[a\x04+a\x04&_a\x01\x92V[a\x05\x95V[\x90a\x045_a\x03\x02V[[\x80a\x04Qa\x04Ka\x04F\x86a\x03-V[a\x02\xFFV[\x91a\x02\xFFV[\x10\x15a\x04\x92Wa\x04\x8D\x90a\x04\x88a\x04\x83a\x04j_a\x01\x92V[a\x04}a\x04x\x88\x86\x90a\x03EV[a\x03eV[\x90a\x05\xBDV[a\x03\xF1V[a\x03\x1EV[a\x046V[P\x90P\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xACa\x04\xBEa\0RV[\x80a\x04\xC8\x81a\0\xB8V[\x03\x90\xA1V[a\x04\xD6\x90a\x02IV[\x90V[a\x04\xEDa\x04\xE8a\x04\xF2\x92a\0`V[a\x02FV[a\x02\xFFV[\x90V[\x90V[_\x1B\x90V[a\x05\x11a\x05\x0Ca\x05\x16\x92a\x02\xFFV[a\x04\xF8V[a\x04\xF5V[\x90V[\x90V[\x90a\x05Na\x05Ha\x05Ca\x05>_a\x05S\x96a\x056a\x02\xDAV[P\x01\x94a\x04\xCDV[a\x04\xD9V[a\x04\xFDV[\x91a\x05\x19V[a\x07OV[\x90V[\x90a\x05\x88a\x05\x82a\x05}a\x05x_a\x05\x8D\x96a\x05pa\x02\xDAV[P\x01\x94a\x04\xCDV[a\x04\xD9V[a\x04\xFDV[\x91a\x05\x19V[a\x07\xD6V[\x90V[``\x90V[a\x05\xAC_a\x05\xB1\x92a\x05\xA5a\x05\x90V[P\x01a\x05\x19V[a\t/V[a\x05\xB9a\x05\x90V[P\x90V[\x90a\x05\xEFa\x05\xE9a\x05\xE4a\x05\xDF_a\x05\xF4\x96a\x05\xD7a\x02\xDAV[P\x01\x94a\x04\xCDV[a\x04\xD9V[a\x04\xFDV[\x91a\x05\x19V[a\n\x85V[\x90V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_R` _ \x90V[T\x90V[a\x06$\x81a\x06\x17V[\x82\x10\x15a\x06>Wa\x066`\x01\x91a\x06\x0EV[\x91\x02\x01\x90_\x90V[a\x031V[\x1B\x90V[\x91\x90`\x08a\x06b\x91\x02\x91a\x06\\_\x19\x84a\x06CV[\x92a\x06CV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x06u\x90a\x04\xF5V[\x90V[_\x1C\x90V[a\x06\x86\x90a\x06xV[\x90V[\x91\x90a\x06\x9Fa\x06\x9Aa\x06\xA7\x93a\x06lV[a\x06}V[\x90\x83Ta\x06GV[\x90UV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x06\xDBW\x82a\x06\xD3\x91`\x01a\x06\xD9\x95\x01\x81Ua\x06\x1BV[\x90a\x06\x89V[V[a\x05\xFAV[T\x90V[\x90a\x06\xEE\x90a\x06lV[_R` R`@_ \x90V[\x90a\x07\x06_\x19\x91a\x04\xF8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07$a\x07\x1Fa\x07)\x92a\x02\xFFV[a\x02FV[a\x02\xFFV[\x90V[\x90V[\x90a\x07Da\x07?a\x07K\x92a\x07\x10V[a\x07,V[\x82Ta\x06\xFAV[\x90UV[a\x07Wa\x02\xDAV[Pa\x07la\x07f\x82\x84\x90a\x07\xD6V[\x15a\0\xF0V[_\x14a\x07\xACWa\x07\xA2a\x07\xA7\x92a\x07\x8Ea\x07\x87_\x85\x01a\x05\xF7V[\x82\x90a\x06\xABV[`\x01a\x07\x9B_\x85\x01a\x06\xE0V[\x93\x01a\x06\xE4V[a\x07/V[`\x01\x90V[PP_\x90V[\x90V[a\x07\xC1a\x07\xC6\x91a\x06xV[a\x07\xB2V[\x90V[a\x07\xD3\x90Ta\x07\xB5V[\x90V[a\x07\xF4\x91`\x01a\x07\xEF\x92a\x07\xE8a\x02\xDAV[P\x01a\x06\xE4V[a\x07\xC9V[a\x08\x06a\x08\0_a\x03\x02V[\x91a\x02\xFFV[\x14\x15\x90V[``\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[a\x08+\x90a\x04\xF5V[\x90RV[\x90a\x08<\x81` \x93a\x08\"V[\x01\x90V[\x90V[a\x08Oa\x08T\x91a\x06xV[a\x08@V[\x90V[a\x08a\x90Ta\x08CV[\x90V[`\x01\x01\x90V[\x90a\x08\x87a\x08\x81a\x08z\x84a\x06\xE0V[\x80\x93a\x08\x10V[\x92a\x08\x19V[\x90_[\x81\x81\x10a\x08\x97WPPP\x90V[\x90\x91\x92a\x08\xB7a\x08\xB1`\x01\x92a\x08\xAC\x87a\x08WV[a\x08/V[\x94a\x08dV[\x91\x01\x91\x90\x91a\x08\x8AV[\x90a\x08\xCB\x91a\x08jV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[\x90a\x08\xE2\x90a\x08\xCEV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x08\xFCW`@RV[a\x05\xFAV[\x90a\t!a\t\x1A\x92a\t\x11a\0RV[\x93\x84\x80\x92a\x08\xC1V[\x03\x83a\x08\xD8V[V[a\t,\x90a\t\x01V[\x90V[_a\tC\x91a\t<a\x08\x0BV[P\x01a\t#V[\x90V[\x90V[a\t]a\tXa\tb\x92a\tFV[a\x02FV[a\x02\xFFV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\x88a\t\x8E\x91\x93\x92\x93a\x02\xFFV[\x92a\x02\xFFV[\x82\x03\x91\x82\x11a\t\x99WV[a\teV[a\t\xA7\x81a\x06\xE0V[\x82\x10\x15a\t\xC1Wa\t\xB9`\x01\x91a\x08\x19V[\x91\x02\x01\x90_\x90V[a\x031V[\x1C\x90V[a\t\xDA\x90`\x08a\t\xDF\x93\x02a\t\xC6V[a\x08@V[\x90V[\x90a\t\xED\x91Ta\t\xCAV[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[_\x90V[a\n\x1A\x91a\n\x14a\n\x04V[\x91a\x06\x89V[V[a\n%\x81a\x06\x17V[\x80\x15a\nFW`\x01\x90\x03\x90a\nCa\n=\x83\x83a\x06\x1BV[\x90a\n\x08V[UV[a\t\xF0V[\x91\x90a\naa\n\\a\ni\x93a\x07\x10V[a\x07,V[\x90\x83Ta\x06GV[\x90UV[_\x90V[a\n\x83\x91a\n}a\nmV[\x91a\nKV[V[a\n\x8Da\x02\xDAV[Pa\n\xA4a\n\x9F`\x01\x83\x01\x84\x90a\x06\xE4V[a\x07\xC9V[\x90\x81a\n\xB8a\n\xB2_a\x03\x02V[\x91a\x02\xFFV[\x14\x15_\x14a\x0B\x84Wa\x0B6\x92`\x01a\x0B1\x92\x84a\n\xDF_\x96a\n\xD9\x85a\tIV[\x90a\tyV[a\n\xFCa\n\xED\x88\x85\x01a\x06\xE0V[a\n\xF6\x86a\tIV[\x90a\tyV[\x81a\x0B\x0Fa\x0B\t\x83a\x02\xFFV[\x91a\x02\xFFV[\x03a\x0B;W[PPPa\x0B+a\x0B&\x86\x83\x01a\x05\xF7V[a\n\x1CV[\x01a\x06\xE4V[a\nqV[`\x01\x90V[a\x0B|\x92a\x0Bna\x0BZa\x0BTa\x0Bw\x94\x8C\x89\x01a\t\x9EV[\x90a\t\xE2V[\x93a\x0Bh\x85\x91\x8C\x89\x01a\t\x9EV[\x90a\x06\x89V[\x91\x85\x85\x01a\x06\xE4V[a\x07/V[_\x80\x80a\x0B\x15V[PPP_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61018e565b61001d5f3561004c565b80635f7b68be146100475780637217efcd146100425763c172ac100361000e5761015b565b610117565b6100bd565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61007490610060565b90565b6100808161006b565b0361008757565b5f80fd5b9050359061009882610077565b565b906020828203126100b3576100b0915f0161008b565b90565b61005c565b5f0190565b346100eb576100d56100d036600461009a565b61027d565b6100dd610052565b806100e7816100b8565b0390f35b610058565b151590565b6100fe906100f0565b9052565b9190610115905f602085019401906100f5565b565b346101475761014361013261012d36600461009a565b6102de565b61013a610052565b91829182610102565b0390f35b610058565b5f91031261015657565b61005c565b346101895761016b36600461014c565b61017361041a565b61017b610052565b80610185816100b8565b0390f35b610058565b5f80fd5b90565b60209181520190565b60207f73206f72206661696c656420746f206164640000000000000000000000000000917f5465654b65794d616e616765723a204b657920616c72656164792065786973745f8201520152565b6101f86032604092610195565b6102018161019e565b0190565b61021a9060208101905f8183039101526101eb565b90565b1561022457565b61022c610052565b62461bcd60e51b81528061024260048201610205565b0390fd5b90565b61025d61025861026292610060565b610246565b610060565b90565b61026e90610249565b90565b61027a90610265565b90565b61029861029361028c5f610192565b839061051c565b61021d565b6102c27f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e91610271565b906102cb610052565b806102d5816100b8565b0390a2565b5f90565b6102f9906102ea6102da565b506102f45f610192565b610556565b90565b90565b90565b61031661031161031b926102fc565b610246565b6102ff565b90565b600161032a91016102ff565b90565b5190565b634e487b7160e01b5f52603260045260245ffd5b9061034f8261032d565b811015610360576020809102010190565b610331565b61036f905161006b565b90565b60207f6b65790000000000000000000000000000000000000000000000000000000000917f5465654b65794d616e616765723a204661696c656420746f2072656d6f7665205f8201520152565b6103cc6023604092610195565b6103d581610372565b0190565b6103ee9060208101905f8183039101526103bf565b90565b156103f857565b610400610052565b62461bcd60e51b815280610416600482016103d9565b0390fd5b61042b6104265f610192565b610595565b906104355f610302565b5b8061045161044b6104468661032d565b6102ff565b916102ff565b10156104925761048d9061048861048361046a5f610192565b61047d610478888690610345565b610365565b906105bd565b6103f1565b61031e565b610436565b5090507f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac6104be610052565b806104c8816100b8565b0390a1565b6104d690610249565b90565b6104ed6104e86104f292610060565b610246565b6102ff565b90565b90565b5f1b90565b61051161050c610516926102ff565b6104f8565b6104f5565b90565b90565b9061054e61054861054361053e5f610553966105366102da565b5001946104cd565b6104d9565b6104fd565b91610519565b61074f565b90565b9061058861058261057d6105785f61058d966105706102da565b5001946104cd565b6104d9565b6104fd565b91610519565b6107d6565b90565b606090565b6105ac5f6105b1926105a5610590565b5001610519565b61092f565b6105b9610590565b5090565b906105ef6105e96105e46105df5f6105f4966105d76102da565b5001946104cd565b6104d9565b6104fd565b91610519565b610a85565b90565b90565b634e487b7160e01b5f52604160045260245ffd5b5f5260205f2090565b5490565b61062481610617565b82101561063e5761063660019161060e565b910201905f90565b610331565b1b90565b9190600861066291029161065c5f1984610643565b92610643565b9181191691161790565b610675906104f5565b90565b5f1c90565b61068690610678565b90565b919061069f61069a6106a79361066c565b61067d565b908354610647565b9055565b90815491680100000000000000008310156106db57826106d39160016106d99501815561061b565b90610689565b565b6105fa565b5490565b906106ee9061066c565b5f5260205260405f2090565b906107065f19916104f8565b9181191691161790565b61072461071f610729926102ff565b610246565b6102ff565b90565b90565b9061074461073f61074b92610710565b61072c565b82546106fa565b9055565b6107576102da565b5061076c6107668284906107d6565b156100f0565b5f146107ac576107a26107a79261078e6107875f85016105f7565b82906106ab565b600161079b5f85016106e0565b93016106e4565b61072f565b600190565b50505f90565b90565b6107c16107c691610678565b6107b2565b90565b6107d390546107b5565b90565b6107f49160016107ef926107e86102da565b50016106e4565b6107c9565b6108066108005f610302565b916102ff565b141590565b606090565b60209181520190565b5f5260205f2090565b61082b906104f5565b9052565b9061083c81602093610822565b0190565b90565b61084f61085491610678565b610840565b90565b6108619054610843565b90565b60010190565b9061088761088161087a846106e0565b8093610810565b92610819565b905f5b8181106108975750505090565b9091926108b76108b16001926108ac87610857565b61082f565b94610864565b910191909161088a565b906108cb9161086a565b90565b601f801991011690565b906108e2906108ce565b810190811067ffffffffffffffff8211176108fc57604052565b6105fa565b9061092161091a92610911610052565b938480926108c1565b03836108d8565b565b61092c90610901565b90565b5f6109439161093c61080b565b5001610923565b90565b90565b61095d61095861096292610946565b610246565b6102ff565b90565b634e487b7160e01b5f52601160045260245ffd5b61098861098e919392936102ff565b926102ff565b820391821161099957565b610965565b6109a7816106e0565b8210156109c1576109b9600191610819565b910201905f90565b610331565b1c90565b6109da9060086109df93026109c6565b610840565b90565b906109ed91546109ca565b90565b634e487b7160e01b5f52603160045260245ffd5b5f90565b610a1a91610a14610a04565b91610689565b565b610a2581610617565b8015610a46576001900390610a43610a3d838361061b565b90610a08565b55565b6109f0565b9190610a61610a5c610a6993610710565b61072c565b908354610647565b9055565b5f90565b610a8391610a7d610a6d565b91610a4b565b565b610a8d6102da565b50610aa4610a9f6001830184906106e4565b6107c9565b9081610ab8610ab25f610302565b916102ff565b14155f14610b8457610b36926001610b319284610adf5f96610ad985610949565b90610979565b610afc610aed8885016106e0565b610af686610949565b90610979565b81610b0f610b09836102ff565b916102ff565b03610b3b575b505050610b2b610b268683016105f7565b610a1c565b016106e4565b610a71565b600190565b610b7c92610b6e610b5a610b54610b77948c890161099e565b906109e2565b93610b6885918c890161099e565b90610689565b918585016106e4565b61072f565b5f8080610b15565b5050505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x01\x8EV[a\0\x1D_5a\0LV[\x80c_{h\xBE\x14a\0GW\x80cr\x17\xEF\xCD\x14a\0BWc\xC1r\xAC\x10\x03a\0\x0EWa\x01[V[a\x01\x17V[a\0\xBDV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0t\x90a\0`V[\x90V[a\0\x80\x81a\0kV[\x03a\0\x87WV[_\x80\xFD[\x90P5\x90a\0\x98\x82a\0wV[V[\x90` \x82\x82\x03\x12a\0\xB3Wa\0\xB0\x91_\x01a\0\x8BV[\x90V[a\0\\V[_\x01\x90V[4a\0\xEBWa\0\xD5a\0\xD06`\x04a\0\x9AV[a\x02}V[a\0\xDDa\0RV[\x80a\0\xE7\x81a\0\xB8V[\x03\x90\xF3[a\0XV[\x15\x15\x90V[a\0\xFE\x90a\0\xF0V[\x90RV[\x91\x90a\x01\x15\x90_` \x85\x01\x94\x01\x90a\0\xF5V[V[4a\x01GWa\x01Ca\x012a\x01-6`\x04a\0\x9AV[a\x02\xDEV[a\x01:a\0RV[\x91\x82\x91\x82a\x01\x02V[\x03\x90\xF3[a\0XV[_\x91\x03\x12a\x01VWV[a\0\\V[4a\x01\x89Wa\x01k6`\x04a\x01LV[a\x01sa\x04\x1AV[a\x01{a\0RV[\x80a\x01\x85\x81a\0\xB8V[\x03\x90\xF3[a\0XV[_\x80\xFD[\x90V[` \x91\x81R\x01\x90V[` \x7Fs or failed to add\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Key already exist_\x82\x01R\x01RV[a\x01\xF8`2`@\x92a\x01\x95V[a\x02\x01\x81a\x01\x9EV[\x01\x90V[a\x02\x1A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xEBV[\x90V[\x15a\x02$WV[a\x02,a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02B`\x04\x82\x01a\x02\x05V[\x03\x90\xFD[\x90V[a\x02]a\x02Xa\x02b\x92a\0`V[a\x02FV[a\0`V[\x90V[a\x02n\x90a\x02IV[\x90V[a\x02z\x90a\x02eV[\x90V[a\x02\x98a\x02\x93a\x02\x8C_a\x01\x92V[\x83\x90a\x05\x1CV[a\x02\x1DV[a\x02\xC2\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~\x91a\x02qV[\x90a\x02\xCBa\0RV[\x80a\x02\xD5\x81a\0\xB8V[\x03\x90\xA2V[_\x90V[a\x02\xF9\x90a\x02\xEAa\x02\xDAV[Pa\x02\xF4_a\x01\x92V[a\x05VV[\x90V[\x90V[\x90V[a\x03\x16a\x03\x11a\x03\x1B\x92a\x02\xFCV[a\x02FV[a\x02\xFFV[\x90V[`\x01a\x03*\x91\x01a\x02\xFFV[\x90V[Q\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x03O\x82a\x03-V[\x81\x10\x15a\x03`W` \x80\x91\x02\x01\x01\x90V[a\x031V[a\x03o\x90Qa\0kV[\x90V[` \x7Fkey\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTeeKeyManager: Failed to remove _\x82\x01R\x01RV[a\x03\xCC`#`@\x92a\x01\x95V[a\x03\xD5\x81a\x03rV[\x01\x90V[a\x03\xEE\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\xBFV[\x90V[\x15a\x03\xF8WV[a\x04\0a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04\x16`\x04\x82\x01a\x03\xD9V[\x03\x90\xFD[a\x04+a\x04&_a\x01\x92V[a\x05\x95V[\x90a\x045_a\x03\x02V[[\x80a\x04Qa\x04Ka\x04F\x86a\x03-V[a\x02\xFFV[\x91a\x02\xFFV[\x10\x15a\x04\x92Wa\x04\x8D\x90a\x04\x88a\x04\x83a\x04j_a\x01\x92V[a\x04}a\x04x\x88\x86\x90a\x03EV[a\x03eV[\x90a\x05\xBDV[a\x03\xF1V[a\x03\x1EV[a\x046V[P\x90P\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xACa\x04\xBEa\0RV[\x80a\x04\xC8\x81a\0\xB8V[\x03\x90\xA1V[a\x04\xD6\x90a\x02IV[\x90V[a\x04\xEDa\x04\xE8a\x04\xF2\x92a\0`V[a\x02FV[a\x02\xFFV[\x90V[\x90V[_\x1B\x90V[a\x05\x11a\x05\x0Ca\x05\x16\x92a\x02\xFFV[a\x04\xF8V[a\x04\xF5V[\x90V[\x90V[\x90a\x05Na\x05Ha\x05Ca\x05>_a\x05S\x96a\x056a\x02\xDAV[P\x01\x94a\x04\xCDV[a\x04\xD9V[a\x04\xFDV[\x91a\x05\x19V[a\x07OV[\x90V[\x90a\x05\x88a\x05\x82a\x05}a\x05x_a\x05\x8D\x96a\x05pa\x02\xDAV[P\x01\x94a\x04\xCDV[a\x04\xD9V[a\x04\xFDV[\x91a\x05\x19V[a\x07\xD6V[\x90V[``\x90V[a\x05\xAC_a\x05\xB1\x92a\x05\xA5a\x05\x90V[P\x01a\x05\x19V[a\t/V[a\x05\xB9a\x05\x90V[P\x90V[\x90a\x05\xEFa\x05\xE9a\x05\xE4a\x05\xDF_a\x05\xF4\x96a\x05\xD7a\x02\xDAV[P\x01\x94a\x04\xCDV[a\x04\xD9V[a\x04\xFDV[\x91a\x05\x19V[a\n\x85V[\x90V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_R` _ \x90V[T\x90V[a\x06$\x81a\x06\x17V[\x82\x10\x15a\x06>Wa\x066`\x01\x91a\x06\x0EV[\x91\x02\x01\x90_\x90V[a\x031V[\x1B\x90V[\x91\x90`\x08a\x06b\x91\x02\x91a\x06\\_\x19\x84a\x06CV[\x92a\x06CV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x06u\x90a\x04\xF5V[\x90V[_\x1C\x90V[a\x06\x86\x90a\x06xV[\x90V[\x91\x90a\x06\x9Fa\x06\x9Aa\x06\xA7\x93a\x06lV[a\x06}V[\x90\x83Ta\x06GV[\x90UV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x06\xDBW\x82a\x06\xD3\x91`\x01a\x06\xD9\x95\x01\x81Ua\x06\x1BV[\x90a\x06\x89V[V[a\x05\xFAV[T\x90V[\x90a\x06\xEE\x90a\x06lV[_R` R`@_ \x90V[\x90a\x07\x06_\x19\x91a\x04\xF8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07$a\x07\x1Fa\x07)\x92a\x02\xFFV[a\x02FV[a\x02\xFFV[\x90V[\x90V[\x90a\x07Da\x07?a\x07K\x92a\x07\x10V[a\x07,V[\x82Ta\x06\xFAV[\x90UV[a\x07Wa\x02\xDAV[Pa\x07la\x07f\x82\x84\x90a\x07\xD6V[\x15a\0\xF0V[_\x14a\x07\xACWa\x07\xA2a\x07\xA7\x92a\x07\x8Ea\x07\x87_\x85\x01a\x05\xF7V[\x82\x90a\x06\xABV[`\x01a\x07\x9B_\x85\x01a\x06\xE0V[\x93\x01a\x06\xE4V[a\x07/V[`\x01\x90V[PP_\x90V[\x90V[a\x07\xC1a\x07\xC6\x91a\x06xV[a\x07\xB2V[\x90V[a\x07\xD3\x90Ta\x07\xB5V[\x90V[a\x07\xF4\x91`\x01a\x07\xEF\x92a\x07\xE8a\x02\xDAV[P\x01a\x06\xE4V[a\x07\xC9V[a\x08\x06a\x08\0_a\x03\x02V[\x91a\x02\xFFV[\x14\x15\x90V[``\x90V[` \x91\x81R\x01\x90V[_R` _ \x90V[a\x08+\x90a\x04\xF5V[\x90RV[\x90a\x08<\x81` \x93a\x08\"V[\x01\x90V[\x90V[a\x08Oa\x08T\x91a\x06xV[a\x08@V[\x90V[a\x08a\x90Ta\x08CV[\x90V[`\x01\x01\x90V[\x90a\x08\x87a\x08\x81a\x08z\x84a\x06\xE0V[\x80\x93a\x08\x10V[\x92a\x08\x19V[\x90_[\x81\x81\x10a\x08\x97WPPP\x90V[\x90\x91\x92a\x08\xB7a\x08\xB1`\x01\x92a\x08\xAC\x87a\x08WV[a\x08/V[\x94a\x08dV[\x91\x01\x91\x90\x91a\x08\x8AV[\x90a\x08\xCB\x91a\x08jV[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[\x90a\x08\xE2\x90a\x08\xCEV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x08\xFCW`@RV[a\x05\xFAV[\x90a\t!a\t\x1A\x92a\t\x11a\0RV[\x93\x84\x80\x92a\x08\xC1V[\x03\x83a\x08\xD8V[V[a\t,\x90a\t\x01V[\x90V[_a\tC\x91a\t<a\x08\x0BV[P\x01a\t#V[\x90V[\x90V[a\t]a\tXa\tb\x92a\tFV[a\x02FV[a\x02\xFFV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\x88a\t\x8E\x91\x93\x92\x93a\x02\xFFV[\x92a\x02\xFFV[\x82\x03\x91\x82\x11a\t\x99WV[a\teV[a\t\xA7\x81a\x06\xE0V[\x82\x10\x15a\t\xC1Wa\t\xB9`\x01\x91a\x08\x19V[\x91\x02\x01\x90_\x90V[a\x031V[\x1C\x90V[a\t\xDA\x90`\x08a\t\xDF\x93\x02a\t\xC6V[a\x08@V[\x90V[\x90a\t\xED\x91Ta\t\xCAV[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[_\x90V[a\n\x1A\x91a\n\x14a\n\x04V[\x91a\x06\x89V[V[a\n%\x81a\x06\x17V[\x80\x15a\nFW`\x01\x90\x03\x90a\nCa\n=\x83\x83a\x06\x1BV[\x90a\n\x08V[UV[a\t\xF0V[\x91\x90a\naa\n\\a\ni\x93a\x07\x10V[a\x07,V[\x90\x83Ta\x06GV[\x90UV[_\x90V[a\n\x83\x91a\n}a\nmV[\x91a\nKV[V[a\n\x8Da\x02\xDAV[Pa\n\xA4a\n\x9F`\x01\x83\x01\x84\x90a\x06\xE4V[a\x07\xC9V[\x90\x81a\n\xB8a\n\xB2_a\x03\x02V[\x91a\x02\xFFV[\x14\x15_\x14a\x0B\x84Wa\x0B6\x92`\x01a\x0B1\x92\x84a\n\xDF_\x96a\n\xD9\x85a\tIV[\x90a\tyV[a\n\xFCa\n\xED\x88\x85\x01a\x06\xE0V[a\n\xF6\x86a\tIV[\x90a\tyV[\x81a\x0B\x0Fa\x0B\t\x83a\x02\xFFV[\x91a\x02\xFFV[\x03a\x0B;W[PPPa\x0B+a\x0B&\x86\x83\x01a\x05\xF7V[a\n\x1CV[\x01a\x06\xE4V[a\nqV[`\x01\x90V[a\x0B|\x92a\x0Bna\x0BZa\x0BTa\x0Bw\x94\x8C\x89\x01a\t\x9EV[\x90a\t\xE2V[\x93a\x0Bh\x85\x91\x8C\x89\x01a\t\x9EV[\x90a\x06\x89V[\x91\x85\x85\x01a\x06\xE4V[a\x07/V[_\x80\x80a\x0B\x15V[PPP_\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeyAdded(address)` and selector `0x654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e`.
```solidity
event KeyAdded(address indexed key);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeyAdded {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeyAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "KeyAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                101u8, 74u8, 187u8, 165u8, 211u8, 23u8, 1u8, 133u8, 237u8, 37u8, 201u8,
                180u8, 31u8, 125u8, 32u8, 148u8, 219u8, 54u8, 67u8, 152u8, 107u8, 5u8,
                233u8, 233u8, 202u8, 179u8, 112u8, 40u8, 184u8, 0u8, 173u8, 126u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { key: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.key.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.key,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeyAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeyAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeyAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeysRevoked()` and selector `0x2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac`.
```solidity
event KeysRevoked();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeysRevoked;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeysRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeysRevoked()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                46u8, 50u8, 243u8, 233u8, 120u8, 242u8, 99u8, 126u8, 218u8, 103u8, 242u8,
                64u8, 6u8, 102u8, 185u8, 211u8, 11u8, 244u8, 255u8, 2u8, 193u8, 105u8,
                132u8, 177u8, 145u8, 87u8, 92u8, 79u8, 105u8, 133u8, 130u8, 172u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeysRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeysRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeysRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addKey(address)` and selector `0x5f7b68be`.
```solidity
function addKey(address publicKey) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyCall {
        #[allow(missing_docs)]
        pub publicKey: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addKey(address)`](addKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyCall> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyCall) -> Self {
                    (value.publicKey,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { publicKey: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addKeyReturn {
            fn _tokenize(
                &self,
            ) -> <addKeyCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addKeyCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addKeyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addKey(address)";
            const SELECTOR: [u8; 4] = [95u8, 123u8, 104u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.publicKey,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addKeyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isKeyValid(address)` and selector `0x7217efcd`.
```solidity
function isKeyValid(address publicKey) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidCall {
        #[allow(missing_docs)]
        pub publicKey: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isKeyValid(address)`](isKeyValidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidCall> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidCall) -> Self {
                    (value.publicKey,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { publicKey: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isKeyValidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isKeyValid(address)";
            const SELECTOR: [u8; 4] = [114u8, 23u8, 239u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.publicKey,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isKeyValidReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isKeyValidReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeAllKeys()` and selector `0xc172ac10`.
```solidity
function revokeAllKeys() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysCall;
    ///Container type for the return parameters of the [`revokeAllKeys()`](revokeAllKeysCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeAllKeysReturn {
            fn _tokenize(
                &self,
            ) -> <revokeAllKeysCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeAllKeysCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeAllKeysReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeAllKeys()";
            const SELECTOR: [u8; 4] = [193u8, 114u8, 172u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeAllKeysReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DummyKeyManager`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum DummyKeyManagerCalls {
        #[allow(missing_docs)]
        addKey(addKeyCall),
        #[allow(missing_docs)]
        isKeyValid(isKeyValidCall),
        #[allow(missing_docs)]
        revokeAllKeys(revokeAllKeysCall),
    }
    #[automatically_derived]
    impl DummyKeyManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [95u8, 123u8, 104u8, 190u8],
            [114u8, 23u8, 239u8, 205u8],
            [193u8, 114u8, 172u8, 16u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DummyKeyManagerCalls {
        const NAME: &'static str = "DummyKeyManagerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addKey(_) => <addKeyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isKeyValid(_) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeAllKeys(_) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DummyKeyManagerCalls>] = &[
                {
                    fn addKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <addKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(DummyKeyManagerCalls::addKey)
                    }
                    addKey
                },
                {
                    fn isKeyValid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <isKeyValidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(DummyKeyManagerCalls::isKeyValid)
                    }
                    isKeyValid
                },
                {
                    fn revokeAllKeys(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(DummyKeyManagerCalls::revokeAllKeys)
                    }
                    revokeAllKeys
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DummyKeyManagerCalls>] = &[
                {
                    fn addKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <addKeyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DummyKeyManagerCalls::addKey)
                    }
                    addKey
                },
                {
                    fn isKeyValid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <isKeyValidCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DummyKeyManagerCalls::isKeyValid)
                    }
                    isKeyValid
                },
                {
                    fn revokeAllKeys(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DummyKeyManagerCalls::revokeAllKeys)
                    }
                    revokeAllKeys
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`DummyKeyManager`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum DummyKeyManagerEvents {
        #[allow(missing_docs)]
        KeyAdded(KeyAdded),
        #[allow(missing_docs)]
        KeysRevoked(KeysRevoked),
    }
    #[automatically_derived]
    impl DummyKeyManagerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                46u8, 50u8, 243u8, 233u8, 120u8, 242u8, 99u8, 126u8, 218u8, 103u8, 242u8,
                64u8, 6u8, 102u8, 185u8, 211u8, 11u8, 244u8, 255u8, 2u8, 193u8, 105u8,
                132u8, 177u8, 145u8, 87u8, 92u8, 79u8, 105u8, 133u8, 130u8, 172u8,
            ],
            [
                101u8, 74u8, 187u8, 165u8, 211u8, 23u8, 1u8, 133u8, 237u8, 37u8, 201u8,
                180u8, 31u8, 125u8, 32u8, 148u8, 219u8, 54u8, 67u8, 152u8, 107u8, 5u8,
                233u8, 233u8, 202u8, 179u8, 112u8, 40u8, 184u8, 0u8, 173u8, 126u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for DummyKeyManagerEvents {
        const NAME: &'static str = "DummyKeyManagerEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<KeyAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeyAdded as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::KeyAdded)
                }
                Some(<KeysRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeysRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::KeysRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for DummyKeyManagerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DummyKeyManager`](self) contract instance.

See the [wrapper's documentation](`DummyKeyManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DummyKeyManagerInstance<P, N> {
        DummyKeyManagerInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DummyKeyManagerInstance<P, N>>,
    > {
        DummyKeyManagerInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        DummyKeyManagerInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`DummyKeyManager`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DummyKeyManager`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DummyKeyManagerInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for DummyKeyManagerInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DummyKeyManagerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DummyKeyManagerInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`DummyKeyManager`](self) contract instance.

See the [wrapper's documentation](`DummyKeyManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DummyKeyManagerInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> DummyKeyManagerInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DummyKeyManagerInstance<P, N> {
            DummyKeyManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DummyKeyManagerInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addKey`] function.
        pub fn addKey(
            &self,
            publicKey: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, addKeyCall, N> {
            self.call_builder(&addKeyCall { publicKey })
        }
        ///Creates a new call builder for the [`isKeyValid`] function.
        pub fn isKeyValid(
            &self,
            publicKey: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isKeyValidCall, N> {
            self.call_builder(&isKeyValidCall { publicKey })
        }
        ///Creates a new call builder for the [`revokeAllKeys`] function.
        pub fn revokeAllKeys(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, revokeAllKeysCall, N> {
            self.call_builder(&revokeAllKeysCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DummyKeyManagerInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`KeyAdded`] event.
        pub fn KeyAdded_filter(&self) -> alloy_contract::Event<&P, KeyAdded, N> {
            self.event_filter::<KeyAdded>()
        }
        ///Creates a new event filter for the [`KeysRevoked`] event.
        pub fn KeysRevoked_filter(&self) -> alloy_contract::Event<&P, KeysRevoked, N> {
            self.event_filter::<KeysRevoked>()
        }
    }
}
