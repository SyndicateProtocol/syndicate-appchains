/**

Generated by the following Solidity interface...
```solidity
interface DummyKeyManager {
    event KeyAdded(address indexed key);
    event KeysRevoked();

    function addKey(address publicKey) external;
    function isKeyValid(address publicKey) external view returns (bool);
    function revokeAllKeys() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "addKey",
    "inputs": [
      {
        "name": "publicKey",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isKeyValid",
    "inputs": [
      {
        "name": "publicKey",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "revokeAllKeys",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "KeyAdded",
    "inputs": [
      {
        "name": "key",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeysRevoked",
    "inputs": [],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DummyKeyManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080806040523460155761053c908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80635f7b68be146102825780637217efcd1461021a5763c172ac101461003a575f80fd5b34610216575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610216576040515f8054808352818052829160208301917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563915b8181106101fd57847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8287030116810181811067ffffffffffffffff8211176101d0576040525f5b81518110156101aa5761011973ffffffffffffffffffffffffffffffffffffffff60208360051b8501015116610438565b15610126576001016100e8565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5465654b65794d616e616765723a204661696c656420746f2072656d6f76652060448201527f6b657900000000000000000000000000000000000000000000000000000000006064820152fd5b7f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac5f80a1005b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b825484528594506020909301926001928301920161009e565b5f80fd5b346102165760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102165760043573ffffffffffffffffffffffffffffffffffffffff8116809103610216575f526001602052602060405f20541515604051908152f35b346102165760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102165760043573ffffffffffffffffffffffffffffffffffffffff8116809103610216576102db816103cc565b15610306577f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e5f80a2005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5465654b65794d616e616765723a204b657920616c726561647920657869737460448201527f73206f72206661696c656420746f2061646400000000000000000000000000006064820152fd5b805482101561039f575f5260205f2001905f90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b805f52600160205260405f2054155f14610433575f54680100000000000000008110156101d05761041d6104078260018594015f555f61038a565b81939154905f199060031b92831b921b19161790565b90555f54905f52600160205260405f2055600190565b505f90565b5f818152600160205260409020548015610536575f198101818111610509575f54905f198201918211610509578181036104d3575b5050505f5480156104a6575f1901610485815f61038a565b5f1982549160031b1b191690555f555f5260016020525f6040812055600190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b6104f36104e3610407935f61038a565b90549060031b1c9283925f61038a565b90555f52600160205260405f20555f808061046d565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b50505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x05<\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c_{h\xBE\x14a\x02\x82W\x80cr\x17\xEF\xCD\x14a\x02\x1AWc\xC1r\xAC\x10\x14a\0:W_\x80\xFD[4a\x02\x16W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x16W`@Q_\x80T\x80\x83R\x81\x80R\x82\x91` \x83\x01\x91\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x91[\x81\x81\x10a\x01\xFDW\x84\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x82\x87\x03\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01\xD0W`@R_[\x81Q\x81\x10\x15a\x01\xAAWa\x01\x19s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x83`\x05\x1B\x85\x01\x01Q\x16a\x048V[\x15a\x01&W`\x01\x01a\0\xE8V[`\x84`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FTeeKeyManager: Failed to remove `D\x82\x01R\x7Fkey\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R\xFD[\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xAC_\x80\xA1\0[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x82T\x84R\x85\x94P` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\0\x9EV[_\x80\xFD[4a\x02\x16W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x16W`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x80\x91\x03a\x02\x16W_R`\x01` R` `@_ T\x15\x15`@Q\x90\x81R\xF3[4a\x02\x16W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x16W`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x80\x91\x03a\x02\x16Wa\x02\xDB\x81a\x03\xCCV[\x15a\x03\x06W\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~_\x80\xA2\0[`\x84`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`2`$\x82\x01R\x7FTeeKeyManager: Key already exist`D\x82\x01R\x7Fs or failed to add\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R\xFD[\x80T\x82\x10\x15a\x03\x9FW_R` _ \x01\x90_\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80_R`\x01` R`@_ T\x15_\x14a\x043W_Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x01\xD0Wa\x04\x1Da\x04\x07\x82`\x01\x85\x94\x01_U_a\x03\x8AV[\x81\x93\x91T\x90_\x19\x90`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90V[\x90U_T\x90_R`\x01` R`@_ U`\x01\x90V[P_\x90V[_\x81\x81R`\x01` R`@\x90 T\x80\x15a\x056W_\x19\x81\x01\x81\x81\x11a\x05\tW_T\x90_\x19\x82\x01\x91\x82\x11a\x05\tW\x81\x81\x03a\x04\xD3W[PPP_T\x80\x15a\x04\xA6W_\x19\x01a\x04\x85\x81_a\x03\x8AV[_\x19\x82T\x91`\x03\x1B\x1B\x19\x16\x90U_U_R`\x01` R_`@\x81 U`\x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[a\x04\xF3a\x04\xE3a\x04\x07\x93_a\x03\x8AV[\x90T\x90`\x03\x1B\x1C\x92\x83\x92_a\x03\x8AV[\x90U_R`\x01` R`@_ U_\x80\x80a\x04mV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[PP_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c80635f7b68be146102825780637217efcd1461021a5763c172ac101461003a575f80fd5b34610216575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610216576040515f8054808352818052829160208301917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563915b8181106101fd57847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8287030116810181811067ffffffffffffffff8211176101d0576040525f5b81518110156101aa5761011973ffffffffffffffffffffffffffffffffffffffff60208360051b8501015116610438565b15610126576001016100e8565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5465654b65794d616e616765723a204661696c656420746f2072656d6f76652060448201527f6b657900000000000000000000000000000000000000000000000000000000006064820152fd5b7f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac5f80a1005b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b825484528594506020909301926001928301920161009e565b5f80fd5b346102165760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102165760043573ffffffffffffffffffffffffffffffffffffffff8116809103610216575f526001602052602060405f20541515604051908152f35b346102165760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102165760043573ffffffffffffffffffffffffffffffffffffffff8116809103610216576102db816103cc565b15610306577f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e5f80a2005b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5465654b65794d616e616765723a204b657920616c726561647920657869737460448201527f73206f72206661696c656420746f2061646400000000000000000000000000006064820152fd5b805482101561039f575f5260205f2001905f90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b805f52600160205260405f2054155f14610433575f54680100000000000000008110156101d05761041d6104078260018594015f555f61038a565b81939154905f199060031b92831b921b19161790565b90555f54905f52600160205260405f2055600190565b505f90565b5f818152600160205260409020548015610536575f198101818111610509575f54905f198201918211610509578181036104d3575b5050505f5480156104a6575f1901610485815f61038a565b5f1982549160031b1b191690555f555f5260016020525f6040812055600190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b6104f36104e3610407935f61038a565b90549060031b1c9283925f61038a565b90555f52600160205260405f20555f808061046d565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b50505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c_{h\xBE\x14a\x02\x82W\x80cr\x17\xEF\xCD\x14a\x02\x1AWc\xC1r\xAC\x10\x14a\0:W_\x80\xFD[4a\x02\x16W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x16W`@Q_\x80T\x80\x83R\x81\x80R\x82\x91` \x83\x01\x91\x7F)\r\xEC\xD9T\x8Bb\xA8\xD6\x03E\xA9\x888o\xC8K\xA6\xBC\x95H@\x08\xF66/\x93\x16\x0E\xF3\xE5c\x91[\x81\x81\x10a\x01\xFDW\x84\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x82\x87\x03\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01\xD0W`@R_[\x81Q\x81\x10\x15a\x01\xAAWa\x01\x19s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x83`\x05\x1B\x85\x01\x01Q\x16a\x048V[\x15a\x01&W`\x01\x01a\0\xE8V[`\x84`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FTeeKeyManager: Failed to remove `D\x82\x01R\x7Fkey\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R\xFD[\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xAC_\x80\xA1\0[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x82T\x84R\x85\x94P` \x90\x93\x01\x92`\x01\x92\x83\x01\x92\x01a\0\x9EV[_\x80\xFD[4a\x02\x16W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x16W`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x80\x91\x03a\x02\x16W_R`\x01` R` `@_ T\x15\x15`@Q\x90\x81R\xF3[4a\x02\x16W` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x02\x16W`\x045s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x80\x91\x03a\x02\x16Wa\x02\xDB\x81a\x03\xCCV[\x15a\x03\x06W\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~_\x80\xA2\0[`\x84`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`2`$\x82\x01R\x7FTeeKeyManager: Key already exist`D\x82\x01R\x7Fs or failed to add\0\0\0\0\0\0\0\0\0\0\0\0\0\0`d\x82\x01R\xFD[\x80T\x82\x10\x15a\x03\x9FW_R` _ \x01\x90_\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80_R`\x01` R`@_ T\x15_\x14a\x043W_Th\x01\0\0\0\0\0\0\0\0\x81\x10\x15a\x01\xD0Wa\x04\x1Da\x04\x07\x82`\x01\x85\x94\x01_U_a\x03\x8AV[\x81\x93\x91T\x90_\x19\x90`\x03\x1B\x92\x83\x1B\x92\x1B\x19\x16\x17\x90V[\x90U_T\x90_R`\x01` R`@_ U`\x01\x90V[P_\x90V[_\x81\x81R`\x01` R`@\x90 T\x80\x15a\x056W_\x19\x81\x01\x81\x81\x11a\x05\tW_T\x90_\x19\x82\x01\x91\x82\x11a\x05\tW\x81\x81\x03a\x04\xD3W[PPP_T\x80\x15a\x04\xA6W_\x19\x01a\x04\x85\x81_a\x03\x8AV[_\x19\x82T\x91`\x03\x1B\x1B\x19\x16\x90U_U_R`\x01` R_`@\x81 U`\x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`1`\x04R`$_\xFD[a\x04\xF3a\x04\xE3a\x04\x07\x93_a\x03\x8AV[\x90T\x90`\x03\x1B\x1C\x92\x83\x92_a\x03\x8AV[\x90U_R`\x01` R`@_ U_\x80\x80a\x04mV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[PP_\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeyAdded(address)` and selector `0x654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e`.
```solidity
event KeyAdded(address indexed key);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeyAdded {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeyAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "KeyAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                101u8, 74u8, 187u8, 165u8, 211u8, 23u8, 1u8, 133u8, 237u8, 37u8, 201u8,
                180u8, 31u8, 125u8, 32u8, 148u8, 219u8, 54u8, 67u8, 152u8, 107u8, 5u8,
                233u8, 233u8, 202u8, 179u8, 112u8, 40u8, 184u8, 0u8, 173u8, 126u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { key: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.key.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.key,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeyAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeyAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeyAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `KeysRevoked()` and selector `0x2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac`.
```solidity
event KeysRevoked();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeysRevoked;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeysRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeysRevoked()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                46u8, 50u8, 243u8, 233u8, 120u8, 242u8, 99u8, 126u8, 218u8, 103u8, 242u8,
                64u8, 6u8, 102u8, 185u8, 211u8, 11u8, 244u8, 255u8, 2u8, 193u8, 105u8,
                132u8, 177u8, 145u8, 87u8, 92u8, 79u8, 105u8, 133u8, 130u8, 172u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeysRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeysRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeysRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addKey(address)` and selector `0x5f7b68be`.
```solidity
function addKey(address publicKey) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyCall {
        #[allow(missing_docs)]
        pub publicKey: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addKey(address)`](addKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyCall> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyCall) -> Self {
                    (value.publicKey,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { publicKey: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addKeyReturn {
            fn _tokenize(
                &self,
            ) -> <addKeyCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addKeyCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addKeyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addKey(address)";
            const SELECTOR: [u8; 4] = [95u8, 123u8, 104u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.publicKey,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addKeyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isKeyValid(address)` and selector `0x7217efcd`.
```solidity
function isKeyValid(address publicKey) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidCall {
        #[allow(missing_docs)]
        pub publicKey: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isKeyValid(address)`](isKeyValidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidCall> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidCall) -> Self {
                    (value.publicKey,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { publicKey: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isKeyValidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isKeyValid(address)";
            const SELECTOR: [u8; 4] = [114u8, 23u8, 239u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.publicKey,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isKeyValidReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isKeyValidReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeAllKeys()` and selector `0xc172ac10`.
```solidity
function revokeAllKeys() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysCall;
    ///Container type for the return parameters of the [`revokeAllKeys()`](revokeAllKeysCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeAllKeysReturn {
            fn _tokenize(
                &self,
            ) -> <revokeAllKeysCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeAllKeysCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeAllKeysReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeAllKeys()";
            const SELECTOR: [u8; 4] = [193u8, 114u8, 172u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeAllKeysReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DummyKeyManager`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum DummyKeyManagerCalls {
        #[allow(missing_docs)]
        addKey(addKeyCall),
        #[allow(missing_docs)]
        isKeyValid(isKeyValidCall),
        #[allow(missing_docs)]
        revokeAllKeys(revokeAllKeysCall),
    }
    #[automatically_derived]
    impl DummyKeyManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [95u8, 123u8, 104u8, 190u8],
            [114u8, 23u8, 239u8, 205u8],
            [193u8, 114u8, 172u8, 16u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DummyKeyManagerCalls {
        const NAME: &'static str = "DummyKeyManagerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addKey(_) => <addKeyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::isKeyValid(_) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeAllKeys(_) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DummyKeyManagerCalls>] = &[
                {
                    fn addKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <addKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(DummyKeyManagerCalls::addKey)
                    }
                    addKey
                },
                {
                    fn isKeyValid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <isKeyValidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(DummyKeyManagerCalls::isKeyValid)
                    }
                    isKeyValid
                },
                {
                    fn revokeAllKeys(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(DummyKeyManagerCalls::revokeAllKeys)
                    }
                    revokeAllKeys
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DummyKeyManagerCalls>] = &[
                {
                    fn addKey(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <addKeyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DummyKeyManagerCalls::addKey)
                    }
                    addKey
                },
                {
                    fn isKeyValid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <isKeyValidCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DummyKeyManagerCalls::isKeyValid)
                    }
                    isKeyValid
                },
                {
                    fn revokeAllKeys(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DummyKeyManagerCalls> {
                        <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DummyKeyManagerCalls::revokeAllKeys)
                    }
                    revokeAllKeys
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`DummyKeyManager`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum DummyKeyManagerEvents {
        #[allow(missing_docs)]
        KeyAdded(KeyAdded),
        #[allow(missing_docs)]
        KeysRevoked(KeysRevoked),
    }
    #[automatically_derived]
    impl DummyKeyManagerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                46u8, 50u8, 243u8, 233u8, 120u8, 242u8, 99u8, 126u8, 218u8, 103u8, 242u8,
                64u8, 6u8, 102u8, 185u8, 211u8, 11u8, 244u8, 255u8, 2u8, 193u8, 105u8,
                132u8, 177u8, 145u8, 87u8, 92u8, 79u8, 105u8, 133u8, 130u8, 172u8,
            ],
            [
                101u8, 74u8, 187u8, 165u8, 211u8, 23u8, 1u8, 133u8, 237u8, 37u8, 201u8,
                180u8, 31u8, 125u8, 32u8, 148u8, 219u8, 54u8, 67u8, 152u8, 107u8, 5u8,
                233u8, 233u8, 202u8, 179u8, 112u8, 40u8, 184u8, 0u8, 173u8, 126u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for DummyKeyManagerEvents {
        const NAME: &'static str = "DummyKeyManagerEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<KeyAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeyAdded as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::KeyAdded)
                }
                Some(<KeysRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeysRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::KeysRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for DummyKeyManagerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DummyKeyManager`](self) contract instance.

See the [wrapper's documentation](`DummyKeyManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        __provider: P,
    ) -> DummyKeyManagerInstance<P, N> {
        DummyKeyManagerInstance::<P, N>::new(address, __provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DummyKeyManagerInstance<P, N>>,
    > {
        DummyKeyManagerInstance::<P, N>::deploy(__provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        DummyKeyManagerInstance::<P, N>::deploy_builder(__provider)
    }
    /**A [`DummyKeyManager`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DummyKeyManager`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DummyKeyManagerInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for DummyKeyManagerInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DummyKeyManagerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DummyKeyManagerInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`DummyKeyManager`](self) contract instance.

See the [wrapper's documentation](`DummyKeyManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            __provider: P,
        ) -> Self {
            Self {
                address,
                provider: __provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            __provider: P,
        ) -> alloy_contract::Result<DummyKeyManagerInstance<P, N>> {
            let call_builder = Self::deploy_builder(__provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                __provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> DummyKeyManagerInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DummyKeyManagerInstance<P, N> {
            DummyKeyManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DummyKeyManagerInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addKey`] function.
        pub fn addKey(
            &self,
            publicKey: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, addKeyCall, N> {
            self.call_builder(&addKeyCall { publicKey })
        }
        ///Creates a new call builder for the [`isKeyValid`] function.
        pub fn isKeyValid(
            &self,
            publicKey: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isKeyValidCall, N> {
            self.call_builder(&isKeyValidCall { publicKey })
        }
        ///Creates a new call builder for the [`revokeAllKeys`] function.
        pub fn revokeAllKeys(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, revokeAllKeysCall, N> {
            self.call_builder(&revokeAllKeysCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DummyKeyManagerInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`KeyAdded`] event.
        pub fn KeyAdded_filter(&self) -> alloy_contract::Event<&P, KeyAdded, N> {
            self.event_filter::<KeyAdded>()
        }
        ///Creates a new event filter for the [`KeysRevoked`] event.
        pub fn KeysRevoked_filter(&self) -> alloy_contract::Event<&P, KeysRevoked, N> {
            self.event_filter::<KeysRevoked>()
        }
    }
}
