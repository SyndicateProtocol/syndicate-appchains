/**

Generated by the following Solidity interface...
```solidity
interface MockTargetBridge {
    function bridgeFunction(address, uint256, bytes memory) external view;
    function setShouldRevert(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "bridgeFunction",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setShouldRevert",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockTargetBridge {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b6103d161002b82396103d190f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6102ba565b61001d5f3561004c565b80636813d78714610047578063bcdb83d8146100425763d3072d820361000e57610285565b6101df565b6100af565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61007281610064565b0361007957565b5f80fd5b9050359061008a82610069565b565b906020828203126100a5576100a2915f0161007d565b90565b61005c565b5f0190565b346100dd576100c76100c236600461008c565b610308565b6100cf610052565b806100d9816100aa565b0390f35b610058565b60018060a01b031690565b6100f6906100e2565b90565b610102816100ed565b0361010957565b5f80fd5b9050359061011a826100f9565b565b90565b6101288161011c565b0361012f57565b5f80fd5b905035906101408261011f565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101885781359167ffffffffffffffff831161018357602001926001830284011161017e57565b61014a565b610146565b610142565b916060838303126101da576101a4825f850161010d565b926101b28360208301610133565b92604082013567ffffffffffffffff81116101d5576101d1920161014e565b9091565b610060565b61005c565b34610211576101fb6101f236600461018d565b9291909161039c565b610203610052565b8061020d816100aa565b0390f35b610058565b5f91031261022057565b61005c565b1c90565b60ff1690565b61023f9060086102449302610225565b610229565b90565b90610252915461022f565b90565b6102605f5f90610247565b90565b61026c90610064565b9052565b9190610283905f60208501940190610263565b565b346102b557610295366004610216565b6102b16102a0610255565b6102a8610052565b91829182610270565b0390f35b610058565b5f80fd5b5f1b90565b906102cf60ff916102be565b9181191691161790565b6102e290610064565b90565b90565b906102fd6102f8610304926102d9565b6102e5565b82546102c3565b9055565b610312905f6102e8565b565b5f1c90565b61032561032a91610314565b610229565b90565b6103379054610319565b90565b60209181520190565b5f7f54617267657420627269646765206661696c6564000000000000000000000000910152565b610377601460209261033a565b61038081610343565b0190565b6103999060208101905f81830391015261036a565b90565b505050506103a95f61032d565b6103af57565b6103b7610052565b62461bcd60e51b8152806103cd60048201610384565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x03\xD1a\0+\x829a\x03\xD1\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xBAV[a\0\x1D_5a\0LV[\x80ch\x13\xD7\x87\x14a\0GW\x80c\xBC\xDB\x83\xD8\x14a\0BWc\xD3\x07-\x82\x03a\0\x0EWa\x02\x85V[a\x01\xDFV[a\0\xAFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0r\x81a\0dV[\x03a\0yWV[_\x80\xFD[\x90P5\x90a\0\x8A\x82a\0iV[V[\x90` \x82\x82\x03\x12a\0\xA5Wa\0\xA2\x91_\x01a\0}V[\x90V[a\0\\V[_\x01\x90V[4a\0\xDDWa\0\xC7a\0\xC26`\x04a\0\x8CV[a\x03\x08V[a\0\xCFa\0RV[\x80a\0\xD9\x81a\0\xAAV[\x03\x90\xF3[a\0XV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF6\x90a\0\xE2V[\x90V[a\x01\x02\x81a\0\xEDV[\x03a\x01\tWV[_\x80\xFD[\x90P5\x90a\x01\x1A\x82a\0\xF9V[V[\x90V[a\x01(\x81a\x01\x1CV[\x03a\x01/WV[_\x80\xFD[\x90P5\x90a\x01@\x82a\x01\x1FV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x88W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x83W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01~WV[a\x01JV[a\x01FV[a\x01BV[\x91``\x83\x83\x03\x12a\x01\xDAWa\x01\xA4\x82_\x85\x01a\x01\rV[\x92a\x01\xB2\x83` \x83\x01a\x013V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xD5Wa\x01\xD1\x92\x01a\x01NV[\x90\x91V[a\0`V[a\0\\V[4a\x02\x11Wa\x01\xFBa\x01\xF26`\x04a\x01\x8DV[\x92\x91\x90\x91a\x03\x9CV[a\x02\x03a\0RV[\x80a\x02\r\x81a\0\xAAV[\x03\x90\xF3[a\0XV[_\x91\x03\x12a\x02 WV[a\0\\V[\x1C\x90V[`\xFF\x16\x90V[a\x02?\x90`\x08a\x02D\x93\x02a\x02%V[a\x02)V[\x90V[\x90a\x02R\x91Ta\x02/V[\x90V[a\x02`__\x90a\x02GV[\x90V[a\x02l\x90a\0dV[\x90RV[\x91\x90a\x02\x83\x90_` \x85\x01\x94\x01\x90a\x02cV[V[4a\x02\xB5Wa\x02\x956`\x04a\x02\x16V[a\x02\xB1a\x02\xA0a\x02UV[a\x02\xA8a\0RV[\x91\x82\x91\x82a\x02pV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1B\x90V[\x90a\x02\xCF`\xFF\x91a\x02\xBEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xE2\x90a\0dV[\x90V[\x90V[\x90a\x02\xFDa\x02\xF8a\x03\x04\x92a\x02\xD9V[a\x02\xE5V[\x82Ta\x02\xC3V[\x90UV[a\x03\x12\x90_a\x02\xE8V[V[_\x1C\x90V[a\x03%a\x03*\x91a\x03\x14V[a\x02)V[\x90V[a\x037\x90Ta\x03\x19V[\x90V[` \x91\x81R\x01\x90V[_\x7FTarget bridge failed\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03w`\x14` \x92a\x03:V[a\x03\x80\x81a\x03CV[\x01\x90V[a\x03\x99\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03jV[\x90V[PPPPa\x03\xA9_a\x03-V[a\x03\xAFWV[a\x03\xB7a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xCD`\x04\x82\x01a\x03\x84V[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6102ba565b61001d5f3561004c565b80636813d78714610047578063bcdb83d8146100425763d3072d820361000e57610285565b6101df565b6100af565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b151590565b61007281610064565b0361007957565b5f80fd5b9050359061008a82610069565b565b906020828203126100a5576100a2915f0161007d565b90565b61005c565b5f0190565b346100dd576100c76100c236600461008c565b610308565b6100cf610052565b806100d9816100aa565b0390f35b610058565b60018060a01b031690565b6100f6906100e2565b90565b610102816100ed565b0361010957565b5f80fd5b9050359061011a826100f9565b565b90565b6101288161011c565b0361012f57565b5f80fd5b905035906101408261011f565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101885781359167ffffffffffffffff831161018357602001926001830284011161017e57565b61014a565b610146565b610142565b916060838303126101da576101a4825f850161010d565b926101b28360208301610133565b92604082013567ffffffffffffffff81116101d5576101d1920161014e565b9091565b610060565b61005c565b34610211576101fb6101f236600461018d565b9291909161039c565b610203610052565b8061020d816100aa565b0390f35b610058565b5f91031261022057565b61005c565b1c90565b60ff1690565b61023f9060086102449302610225565b610229565b90565b90610252915461022f565b90565b6102605f5f90610247565b90565b61026c90610064565b9052565b9190610283905f60208501940190610263565b565b346102b557610295366004610216565b6102b16102a0610255565b6102a8610052565b91829182610270565b0390f35b610058565b5f80fd5b5f1b90565b906102cf60ff916102be565b9181191691161790565b6102e290610064565b90565b90565b906102fd6102f8610304926102d9565b6102e5565b82546102c3565b9055565b610312905f6102e8565b565b5f1c90565b61032561032a91610314565b610229565b90565b6103379054610319565b90565b60209181520190565b5f7f54617267657420627269646765206661696c6564000000000000000000000000910152565b610377601460209261033a565b61038081610343565b0190565b6103999060208101905f81830391015261036a565b90565b505050506103a95f61032d565b6103af57565b6103b7610052565b62461bcd60e51b8152806103cd60048201610384565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xBAV[a\0\x1D_5a\0LV[\x80ch\x13\xD7\x87\x14a\0GW\x80c\xBC\xDB\x83\xD8\x14a\0BWc\xD3\x07-\x82\x03a\0\x0EWa\x02\x85V[a\x01\xDFV[a\0\xAFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x15\x15\x90V[a\0r\x81a\0dV[\x03a\0yWV[_\x80\xFD[\x90P5\x90a\0\x8A\x82a\0iV[V[\x90` \x82\x82\x03\x12a\0\xA5Wa\0\xA2\x91_\x01a\0}V[\x90V[a\0\\V[_\x01\x90V[4a\0\xDDWa\0\xC7a\0\xC26`\x04a\0\x8CV[a\x03\x08V[a\0\xCFa\0RV[\x80a\0\xD9\x81a\0\xAAV[\x03\x90\xF3[a\0XV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF6\x90a\0\xE2V[\x90V[a\x01\x02\x81a\0\xEDV[\x03a\x01\tWV[_\x80\xFD[\x90P5\x90a\x01\x1A\x82a\0\xF9V[V[\x90V[a\x01(\x81a\x01\x1CV[\x03a\x01/WV[_\x80\xFD[\x90P5\x90a\x01@\x82a\x01\x1FV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x88W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x83W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01~WV[a\x01JV[a\x01FV[a\x01BV[\x91``\x83\x83\x03\x12a\x01\xDAWa\x01\xA4\x82_\x85\x01a\x01\rV[\x92a\x01\xB2\x83` \x83\x01a\x013V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xD5Wa\x01\xD1\x92\x01a\x01NV[\x90\x91V[a\0`V[a\0\\V[4a\x02\x11Wa\x01\xFBa\x01\xF26`\x04a\x01\x8DV[\x92\x91\x90\x91a\x03\x9CV[a\x02\x03a\0RV[\x80a\x02\r\x81a\0\xAAV[\x03\x90\xF3[a\0XV[_\x91\x03\x12a\x02 WV[a\0\\V[\x1C\x90V[`\xFF\x16\x90V[a\x02?\x90`\x08a\x02D\x93\x02a\x02%V[a\x02)V[\x90V[\x90a\x02R\x91Ta\x02/V[\x90V[a\x02`__\x90a\x02GV[\x90V[a\x02l\x90a\0dV[\x90RV[\x91\x90a\x02\x83\x90_` \x85\x01\x94\x01\x90a\x02cV[V[4a\x02\xB5Wa\x02\x956`\x04a\x02\x16V[a\x02\xB1a\x02\xA0a\x02UV[a\x02\xA8a\0RV[\x91\x82\x91\x82a\x02pV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x1B\x90V[\x90a\x02\xCF`\xFF\x91a\x02\xBEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xE2\x90a\0dV[\x90V[\x90V[\x90a\x02\xFDa\x02\xF8a\x03\x04\x92a\x02\xD9V[a\x02\xE5V[\x82Ta\x02\xC3V[\x90UV[a\x03\x12\x90_a\x02\xE8V[V[_\x1C\x90V[a\x03%a\x03*\x91a\x03\x14V[a\x02)V[\x90V[a\x037\x90Ta\x03\x19V[\x90V[` \x91\x81R\x01\x90V[_\x7FTarget bridge failed\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03w`\x14` \x92a\x03:V[a\x03\x80\x81a\x03CV[\x01\x90V[a\x03\x99\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03jV[\x90V[PPPPa\x03\xA9_a\x03-V[a\x03\xAFWV[a\x03\xB7a\0RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\xCD`\x04\x82\x01a\x03\x84V[\x03\x90\xFD",
    );
    /**Function with signature `bridgeFunction(address,uint256,bytes)` and selector `0xbcdb83d8`.
```solidity
function bridgeFunction(address, uint256, bytes memory) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeFunctionCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`bridgeFunction(address,uint256,bytes)`](bridgeFunctionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeFunctionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeFunctionCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeFunctionCall) -> Self {
                    (value._0, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeFunctionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeFunctionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: bridgeFunctionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for bridgeFunctionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeFunctionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeFunctionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeFunction(address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [188u8, 219u8, 131u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShouldRevert(bool)` and selector `0x6813d787`.
```solidity
function setShouldRevert(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setShouldRevert(bool)`](setShouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldRevertCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldRevertReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldRevert(bool)";
            const SELECTOR: [u8; 4] = [104u8, 19u8, 215u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall {}
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = shouldRevertReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockTargetBridge`](self) function calls.
    pub enum MockTargetBridgeCalls {
        #[allow(missing_docs)]
        bridgeFunction(bridgeFunctionCall),
        #[allow(missing_docs)]
        setShouldRevert(setShouldRevertCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
    }
    #[automatically_derived]
    impl MockTargetBridgeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [104u8, 19u8, 215u8, 135u8],
            [188u8, 219u8, 131u8, 216u8],
            [211u8, 7u8, 45u8, 130u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockTargetBridgeCalls {
        const NAME: &'static str = "MockTargetBridgeCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::bridgeFunction(_) => {
                    <bridgeFunctionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldRevert(_) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockTargetBridgeCalls>] = &[
                {
                    fn setShouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockTargetBridgeCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockTargetBridgeCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn bridgeFunction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockTargetBridgeCalls> {
                        <bridgeFunctionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockTargetBridgeCalls::bridgeFunction)
                    }
                    bridgeFunction
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockTargetBridgeCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockTargetBridgeCalls::shouldRevert)
                    }
                    shouldRevert
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::bridgeFunction(inner) => {
                    <bridgeFunctionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::bridgeFunction(inner) => {
                    <bridgeFunctionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockTargetBridge`](self) contract instance.

See the [wrapper's documentation](`MockTargetBridgeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockTargetBridgeInstance<T, P, N> {
        MockTargetBridgeInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockTargetBridgeInstance<T, P, N>>,
    > {
        MockTargetBridgeInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockTargetBridgeInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockTargetBridge`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockTargetBridge`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockTargetBridgeInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockTargetBridgeInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockTargetBridgeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockTargetBridgeInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockTargetBridge`](self) contract instance.

See the [wrapper's documentation](`MockTargetBridgeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockTargetBridgeInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockTargetBridgeInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockTargetBridgeInstance<T, P, N> {
            MockTargetBridgeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockTargetBridgeInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`bridgeFunction`] function.
        pub fn bridgeFunction(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::primitives::aliases::U256,
            _2: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, bridgeFunctionCall, N> {
            self.call_builder(&bridgeFunctionCall { _0, _1, _2 })
        }
        ///Creates a new call builder for the [`setShouldRevert`] function.
        pub fn setShouldRevert(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShouldRevertCall, N> {
            self.call_builder(
                &setShouldRevertCall {
                    _shouldRevert,
                },
            )
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockTargetBridgeInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
