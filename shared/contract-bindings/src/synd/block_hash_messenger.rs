/**

Generated by the following Solidity interface...
```solidity
interface BlockHashMessenger {
    constructor(address _l3Target, address _arbBridge, address _syndToken);

    function L1_BLOCK_ADDRESS() external view returns (address);
    function arbBridge() external view returns (address);
    function gasArchive() external view returns (address);
    function sendBlockHashes() external;
    function syndToken() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_l3Target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_arbBridge",
        "type": "address",
        "internalType": "contract IArbInbox"
      },
      {
        "name": "_syndToken",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "L1_BLOCK_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "arbBridge",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IArbInbox"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "gasArchive",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sendBlockHashes",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "syndToken",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod BlockHashMessenger {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60e08060405234610114576060816107b6803803809161001f828561012b565b8339810103126101145780516001600160a01b0381168103610114576020820151916001600160a01b038316908184036101145760400151926001600160a01b03841691828503610114575f9460209460449360805260a05260c052604051948593849263095ea7b360e01b84526004840152811960248401525af18015610120576100e4575b6040516106539081610163823960805181818161036301526105b2015260a0518181816102d001526104d8015260c05181818160e801526105460152f35b6020813d602011610118575b816100fd6020938361012b565b81010312610114575180151503610114575f6100a6565b5f80fd5b3d91506100f0565b6040513d5f823e3d90fd5b601f909101601f19168101906001600160401b0382119082101761014e57604052565b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c908163134efddf1461056a575080636213821d146104fc5780636d8dc0ed1461048e57806374869a87146100a35763f350c0d614610053575f80fd5b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f5760206040517342000000000000000000000000000000000000158152f35b5f80fd5b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103bb575f9161045c575b505f91606460209260405194859384927f23b872dd00000000000000000000000000000000000000000000000000000000845233600485015230602485015260448401525af180156103bb57610425575b506040517f09bd5a600000000000000000000000000000000000000000000000000000000081526020816004817342000000000000000000000000000000000000155afa9081156103bb575f916103f3575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43014381116103c657601f9161014460209260405190848201937f84211ca900000000000000000000000000000000000000000000000000000000855260248301524060448201526044815261026d6064826105d6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060405195869485937fb9b9a68800000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660048601525f60248601525f60448601523360648601523360848601526203345060a4860152633b9aca0060c48601525f60e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103bb5761039157005b6103b29060203d6020116103b4575b6103aa81836105d6565b810190610644565b005b503d6103a0565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b90506020813d60201161041d575b8161040e602093836105d6565b8101031261009f5751816101f4565b3d9150610401565b6020813d602011610454575b8161043e602093836105d6565b8101031261009f575180151581146101a2575f80fd5b3d9150610431565b90506020813d602011610486575b81610477602093836105d6565b8101031261009f57515f610151565b3d915061046a565b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f5760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761061757604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261009f57519056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xE0\x80`@R4a\x01\x14W``\x81a\x07\xB6\x808\x03\x80\x91a\0\x1F\x82\x85a\x01+V[\x839\x81\x01\x03\x12a\x01\x14W\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x03a\x01\x14W` \x82\x01Q\x91`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x84\x03a\x01\x14W`@\x01Q\x92`\x01`\x01`\xA0\x1B\x03\x84\x16\x91\x82\x85\x03a\x01\x14W_\x94` \x94`D\x93`\x80R`\xA0R`\xC0R`@Q\x94\x85\x93\x84\x92c\t^\xA7\xB3`\xE0\x1B\x84R`\x04\x84\x01R\x81\x19`$\x84\x01RZ\xF1\x80\x15a\x01 Wa\0\xE4W[`@Qa\x06S\x90\x81a\x01c\x829`\x80Q\x81\x81\x81a\x03c\x01Ra\x05\xB2\x01R`\xA0Q\x81\x81\x81a\x02\xD0\x01Ra\x04\xD8\x01R`\xC0Q\x81\x81\x81`\xE8\x01Ra\x05F\x01R\xF3[` \x81=` \x11a\x01\x18W[\x81a\0\xFD` \x93\x83a\x01+V[\x81\x01\x03\x12a\x01\x14WQ\x80\x15\x15\x03a\x01\x14W_a\0\xA6V[_\x80\xFD[=\x91Pa\0\xF0V[`@Q=_\x82>=\x90\xFD[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x01NW`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\x13N\xFD\xDF\x14a\x05jWP\x80cb\x13\x82\x1D\x14a\x04\xFCW\x80cm\x8D\xC0\xED\x14a\x04\x8EW\x80ct\x86\x9A\x87\x14a\0\xA3Wc\xF3P\xC0\xD6\x14a\0SW_\x80\xFD[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` `@QsB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x81R\xF3[_\x80\xFD[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xBBW_\x91a\x04\\W[P_\x91`d` \x92`@Q\x94\x85\x93\x84\x92\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R3`\x04\x85\x01R0`$\x85\x01R`D\x84\x01RZ\xF1\x80\x15a\x03\xBBWa\x04%W[P`@Q\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x90\x81\x15a\x03\xBBW_\x91a\x03\xF3W[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01C\x81\x11a\x03\xC6W`\x1F\x91a\x01D` \x92`@Q\x90\x84\x82\x01\x93\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`$\x83\x01R@`D\x82\x01R`D\x81Ra\x02m`d\x82a\x05\xD6V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`@Q\x95\x86\x94\x85\x93\x7F\xB9\xB9\xA6\x88\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x04\x86\x01R_`$\x86\x01R_`D\x86\x01R3`d\x86\x01R3`\x84\x86\x01Rb\x034P`\xA4\x86\x01Rc;\x9A\xCA\0`\xC4\x86\x01R_`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xBBWa\x03\x91W\0[a\x03\xB2\x90` =` \x11a\x03\xB4W[a\x03\xAA\x81\x83a\x05\xD6V[\x81\x01\x90a\x06DV[\0[P=a\x03\xA0V[`@Q=_\x82>=\x90\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90P` \x81=` \x11a\x04\x1DW[\x81a\x04\x0E` \x93\x83a\x05\xD6V[\x81\x01\x03\x12a\0\x9FWQ\x81a\x01\xF4V[=\x91Pa\x04\x01V[` \x81=` \x11a\x04TW[\x81a\x04>` \x93\x83a\x05\xD6V[\x81\x01\x03\x12a\0\x9FWQ\x80\x15\x15\x81\x14a\x01\xA2W_\x80\xFD[=\x91Pa\x041V[\x90P` \x81=` \x11a\x04\x86W[\x81a\x04w` \x93\x83a\x05\xD6V[\x81\x01\x03\x12a\0\x9FWQ_a\x01QV[=\x91Pa\x04jV[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x17W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0\x9FWQ\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f3560e01c908163134efddf1461056a575080636213821d146104fc5780636d8dc0ed1461048e57806374869a87146100a35763f350c0d614610053575f80fd5b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f5760206040517342000000000000000000000000000000000000158152f35b5f80fd5b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103bb575f9161045c575b505f91606460209260405194859384927f23b872dd00000000000000000000000000000000000000000000000000000000845233600485015230602485015260448401525af180156103bb57610425575b506040517f09bd5a600000000000000000000000000000000000000000000000000000000081526020816004817342000000000000000000000000000000000000155afa9081156103bb575f916103f3575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43014381116103c657601f9161014460209260405190848201937f84211ca900000000000000000000000000000000000000000000000000000000855260248301524060448201526044815261026d6064826105d6565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe060405195869485937fb9b9a68800000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660048601525f60248601525f60448601523360648601523360848601526203345060a4860152633b9aca0060c48601525f60e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103bb5761039157005b6103b29060203d6020116103b4575b6103aa81836105d6565b810190610644565b005b503d6103a0565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b90506020813d60201161041d575b8161040e602093836105d6565b8101031261009f5751816101f4565b3d9150610401565b6020813d602011610454575b8161043e602093836105d6565b8101031261009f575180151581146101a2575f80fd5b3d9150610431565b90506020813d602011610486575b81610477602093836105d6565b8101031261009f57515f610151565b3d915061046a565b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009f5760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761061757604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261009f57519056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_5`\xE0\x1C\x90\x81c\x13N\xFD\xDF\x14a\x05jWP\x80cb\x13\x82\x1D\x14a\x04\xFCW\x80cm\x8D\xC0\xED\x14a\x04\x8EW\x80ct\x86\x9A\x87\x14a\0\xA3Wc\xF3P\xC0\xD6\x14a\0SW_\x80\xFD[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` `@QsB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x81R\xF3[_\x80\xFD[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xBBW_\x91a\x04\\W[P_\x91`d` \x92`@Q\x94\x85\x93\x84\x92\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84R3`\x04\x85\x01R0`$\x85\x01R`D\x84\x01RZ\xF1\x80\x15a\x03\xBBWa\x04%W[P`@Q\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x90\x81\x15a\x03\xBBW_\x91a\x03\xF3W[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01C\x81\x11a\x03\xC6W`\x1F\x91a\x01D` \x92`@Q\x90\x84\x82\x01\x93\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`$\x83\x01R@`D\x82\x01R`D\x81Ra\x02m`d\x82a\x05\xD6V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`@Q\x95\x86\x94\x85\x93\x7F\xB9\xB9\xA6\x88\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\x04\x86\x01R_`$\x86\x01R_`D\x86\x01R3`d\x86\x01R3`\x84\x86\x01Rb\x034P`\xA4\x86\x01Rc;\x9A\xCA\0`\xC4\x86\x01R_`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xBBWa\x03\x91W\0[a\x03\xB2\x90` =` \x11a\x03\xB4W[a\x03\xAA\x81\x83a\x05\xD6V[\x81\x01\x90a\x06DV[\0[P=a\x03\xA0V[`@Q=_\x82>=\x90\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90P` \x81=` \x11a\x04\x1DW[\x81a\x04\x0E` \x93\x83a\x05\xD6V[\x81\x01\x03\x12a\0\x9FWQ\x81a\x01\xF4V[=\x91Pa\x04\x01V[` \x81=` \x11a\x04TW[\x81a\x04>` \x93\x83a\x05\xD6V[\x81\x01\x03\x12a\0\x9FWQ\x80\x15\x15\x81\x14a\x01\xA2W_\x80\xFD[=\x91Pa\x041V[\x90P` \x81=` \x11a\x04\x86W[\x81a\x04w` \x93\x83a\x05\xD6V[\x81\x01\x03\x12a\0\x9FWQ_a\x01QV[=\x91Pa\x04jV[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9FW` \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\x17W`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0\x9FWQ\x90V",
    );
    /**Constructor`.
```solidity
constructor(address _l3Target, address _arbBridge, address _syndToken);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _l3Target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _arbBridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _syndToken: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._l3Target, value._arbBridge, value._syndToken)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _l3Target: tuple.0,
                        _arbBridge: tuple.1,
                        _syndToken: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._l3Target,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._arbBridge,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._syndToken,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `L1_BLOCK_ADDRESS()` and selector `0xf350c0d6`.
```solidity
function L1_BLOCK_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct L1_BLOCK_ADDRESSCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`L1_BLOCK_ADDRESS()`](L1_BLOCK_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct L1_BLOCK_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<L1_BLOCK_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: L1_BLOCK_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for L1_BLOCK_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<L1_BLOCK_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: L1_BLOCK_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for L1_BLOCK_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for L1_BLOCK_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "L1_BLOCK_ADDRESS()";
            const SELECTOR: [u8; 4] = [243u8, 80u8, 192u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: L1_BLOCK_ADDRESSReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: L1_BLOCK_ADDRESSReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `arbBridge()` and selector `0x134efddf`.
```solidity
function arbBridge() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arbBridgeCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`arbBridge()`](arbBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arbBridgeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arbBridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: arbBridgeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arbBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arbBridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: arbBridgeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arbBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for arbBridgeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "arbBridge()";
            const SELECTOR: [u8; 4] = [19u8, 78u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: arbBridgeReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: arbBridgeReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `gasArchive()` and selector `0x6d8dc0ed`.
```solidity
function gasArchive() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasArchiveCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`gasArchive()`](gasArchiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct gasArchiveReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasArchiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: gasArchiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasArchiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<gasArchiveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: gasArchiveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for gasArchiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for gasArchiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "gasArchive()";
            const SELECTOR: [u8; 4] = [109u8, 141u8, 192u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: gasArchiveReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: gasArchiveReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `sendBlockHashes()` and selector `0x74869a87`.
```solidity
function sendBlockHashes() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendBlockHashesCall;
    ///Container type for the return parameters of the [`sendBlockHashes()`](sendBlockHashesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendBlockHashesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendBlockHashesCall> for UnderlyingRustTuple<'_> {
                fn from(value: sendBlockHashesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sendBlockHashesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendBlockHashesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: sendBlockHashesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sendBlockHashesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl sendBlockHashesReturn {
            fn _tokenize(
                &self,
            ) -> <sendBlockHashesCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sendBlockHashesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sendBlockHashesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sendBlockHashes()";
            const SELECTOR: [u8; 4] = [116u8, 134u8, 154u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                sendBlockHashesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `syndToken()` and selector `0x6213821d`.
```solidity
function syndToken() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndTokenCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`syndToken()`](syndTokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndTokenReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndTokenCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndTokenCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndTokenCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndTokenReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndTokenReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndTokenReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndTokenCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "syndToken()";
            const SELECTOR: [u8; 4] = [98u8, 19u8, 130u8, 29u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: syndTokenReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: syndTokenReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`BlockHashMessenger`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum BlockHashMessengerCalls {
        #[allow(missing_docs)]
        L1_BLOCK_ADDRESS(L1_BLOCK_ADDRESSCall),
        #[allow(missing_docs)]
        arbBridge(arbBridgeCall),
        #[allow(missing_docs)]
        gasArchive(gasArchiveCall),
        #[allow(missing_docs)]
        sendBlockHashes(sendBlockHashesCall),
        #[allow(missing_docs)]
        syndToken(syndTokenCall),
    }
    #[automatically_derived]
    impl BlockHashMessengerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [19u8, 78u8, 253u8, 223u8],
            [98u8, 19u8, 130u8, 29u8],
            [109u8, 141u8, 192u8, 237u8],
            [116u8, 134u8, 154u8, 135u8],
            [243u8, 80u8, 192u8, 214u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BlockHashMessengerCalls {
        const NAME: &'static str = "BlockHashMessengerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::L1_BLOCK_ADDRESS(_) => {
                    <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::arbBridge(_) => {
                    <arbBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::gasArchive(_) => {
                    <gasArchiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sendBlockHashes(_) => {
                    <sendBlockHashesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::syndToken(_) => {
                    <syndTokenCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<BlockHashMessengerCalls>] = &[
                {
                    fn arbBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <arbBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(BlockHashMessengerCalls::arbBridge)
                    }
                    arbBridge
                },
                {
                    fn syndToken(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <syndTokenCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(BlockHashMessengerCalls::syndToken)
                    }
                    syndToken
                },
                {
                    fn gasArchive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <gasArchiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(BlockHashMessengerCalls::gasArchive)
                    }
                    gasArchive
                },
                {
                    fn sendBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <sendBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(BlockHashMessengerCalls::sendBlockHashes)
                    }
                    sendBlockHashes
                },
                {
                    fn L1_BLOCK_ADDRESS(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(BlockHashMessengerCalls::L1_BLOCK_ADDRESS)
                    }
                    L1_BLOCK_ADDRESS
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<BlockHashMessengerCalls>] = &[
                {
                    fn arbBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <arbBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashMessengerCalls::arbBridge)
                    }
                    arbBridge
                },
                {
                    fn syndToken(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <syndTokenCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashMessengerCalls::syndToken)
                    }
                    syndToken
                },
                {
                    fn gasArchive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <gasArchiveCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashMessengerCalls::gasArchive)
                    }
                    gasArchive
                },
                {
                    fn sendBlockHashes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <sendBlockHashesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashMessengerCalls::sendBlockHashes)
                    }
                    sendBlockHashes
                },
                {
                    fn L1_BLOCK_ADDRESS(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashMessengerCalls> {
                        <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashMessengerCalls::L1_BLOCK_ADDRESS)
                    }
                    L1_BLOCK_ADDRESS
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::L1_BLOCK_ADDRESS(inner) => {
                    <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::arbBridge(inner) => {
                    <arbBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::gasArchive(inner) => {
                    <gasArchiveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::sendBlockHashes(inner) => {
                    <sendBlockHashesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::syndToken(inner) => {
                    <syndTokenCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::L1_BLOCK_ADDRESS(inner) => {
                    <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::arbBridge(inner) => {
                    <arbBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::gasArchive(inner) => {
                    <gasArchiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sendBlockHashes(inner) => {
                    <sendBlockHashesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::syndToken(inner) => {
                    <syndTokenCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BlockHashMessenger`](self) contract instance.

See the [wrapper's documentation](`BlockHashMessengerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BlockHashMessengerInstance<P, N> {
        BlockHashMessengerInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3Target: alloy::sol_types::private::Address,
        _arbBridge: alloy::sol_types::private::Address,
        _syndToken: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BlockHashMessengerInstance<P, N>>,
    > {
        BlockHashMessengerInstance::<
            P,
            N,
        >::deploy(provider, _l3Target, _arbBridge, _syndToken)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _l3Target: alloy::sol_types::private::Address,
        _arbBridge: alloy::sol_types::private::Address,
        _syndToken: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        BlockHashMessengerInstance::<
            P,
            N,
        >::deploy_builder(provider, _l3Target, _arbBridge, _syndToken)
    }
    /**A [`BlockHashMessenger`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BlockHashMessenger`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BlockHashMessengerInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for BlockHashMessengerInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BlockHashMessengerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > BlockHashMessengerInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`BlockHashMessenger`](self) contract instance.

See the [wrapper's documentation](`BlockHashMessengerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _l3Target: alloy::sol_types::private::Address,
            _arbBridge: alloy::sol_types::private::Address,
            _syndToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<BlockHashMessengerInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _l3Target,
                _arbBridge,
                _syndToken,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _l3Target: alloy::sol_types::private::Address,
            _arbBridge: alloy::sol_types::private::Address,
            _syndToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _l3Target,
                            _arbBridge,
                            _syndToken,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> BlockHashMessengerInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BlockHashMessengerInstance<P, N> {
            BlockHashMessengerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > BlockHashMessengerInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`L1_BLOCK_ADDRESS`] function.
        pub fn L1_BLOCK_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, L1_BLOCK_ADDRESSCall, N> {
            self.call_builder(&L1_BLOCK_ADDRESSCall)
        }
        ///Creates a new call builder for the [`arbBridge`] function.
        pub fn arbBridge(&self) -> alloy_contract::SolCallBuilder<&P, arbBridgeCall, N> {
            self.call_builder(&arbBridgeCall)
        }
        ///Creates a new call builder for the [`gasArchive`] function.
        pub fn gasArchive(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, gasArchiveCall, N> {
            self.call_builder(&gasArchiveCall)
        }
        ///Creates a new call builder for the [`sendBlockHashes`] function.
        pub fn sendBlockHashes(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, sendBlockHashesCall, N> {
            self.call_builder(&sendBlockHashesCall)
        }
        ///Creates a new call builder for the [`syndToken`] function.
        pub fn syndToken(&self) -> alloy_contract::SolCallBuilder<&P, syndTokenCall, N> {
            self.call_builder(&syndTokenCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > BlockHashMessengerInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
