/**

Generated by the following Solidity interface...
```solidity
interface TokenBalanceSequencingModule {
    constructor(address _tokenAddress, uint256 _minimumBalance);

    function isAllowed(address proposer, address, bytes memory) external view returns (bool);
    function minimumBalance() external view returns (uint256);
    function tokenAddress() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_tokenAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_minimumBalance",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "minimumBalance",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenAddress",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TokenBalanceSequencingModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c0604052346100505761001a61001461014a565b9061030f565b610022610055565b6104b761035982396080518181816101ac01526103b4015260a051818181610227015261041f01526104b790f35b61005b565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100879061005f565b810190811060018060401b0382111761009f57604052565b610069565b906100b76100b0610055565b928361007d565b565b5f80fd5b60018060a01b031690565b6100d1906100bd565b90565b6100dd816100c8565b036100e457565b5f80fd5b905051906100f5826100d4565b565b90565b610103816100f7565b0361010a57565b5f80fd5b9050519061011b826100fa565b565b91906040838203126101455780610139610142925f86016100e8565b9360200161010e565b90565b6100b9565b6101686108108038038061015d816100a4565b92833981019061011d565b9091565b90565b90565b61018661018161018b9261016c565b61016f565b6100bd565b90565b61019790610172565b90565b60209181520190565b60207f726f206164647265737300000000000000000000000000000000000000000000917f546f6b656e42616c616e636553657175656e63696e674d6f64756c653a207a655f8201520152565b6101fd602a60409261019a565b610206816101a3565b0190565b61021f9060208101905f8183039101526101f0565b90565b1561022957565b610231610055565b62461bcd60e51b8152806102476004820161020a565b0390fd5b61025f61025a6102649261016c565b61016f565b6100f7565b90565b60207f726f2062616c616e636500000000000000000000000000000000000000000000917f546f6b656e42616c616e636553657175656e63696e674d6f64756c653a207a655f8201520152565b6102c1602a60409261019a565b6102ca81610267565b0190565b6102e39060208101905f8183039101526102b4565b90565b156102ed57565b6102f5610055565b62461bcd60e51b81528061030b600482016102ce565b0390fd5b6103348161032d6103276103225f61018e565b6100c8565b916100c8565b1415610222565b6103508261034a6103445f61024b565b916100f7565b116102e6565b60805260a05256fe60806040526004361015610013575b6102a3565b61001d5f3561004c565b80637a3979dc146100475780639d76ea58146100425763b9d1d49b0361000e5761026e565b6101f0565b610162565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61007890610064565b90565b6100848161006f565b0361008b57565b5f80fd5b9050359061009c8261007b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100e45781359167ffffffffffffffff83116100df5760200192600183028401116100da57565b6100a6565b6100a2565b61009e565b9160608383031261013657610100825f850161008f565b9261010e836020830161008f565b92604082013567ffffffffffffffff81116101315761012d92016100aa565b9091565b610060565b61005c565b151590565b6101499061013b565b9052565b9190610160905f60208501940190610140565b565b34610196576101926101816101783660046100e9565b92919091610398565b610189610052565b9182918261014d565b0390f35b610058565b5f9103126101a557565b61005c565b7f000000000000000000000000000000000000000000000000000000000000000090565b6101d79061006f565b9052565b91906101ee905f602085019401906101ce565b565b346102205761020036600461019b565b61021c61020b6101aa565b610213610052565b918291826101db565b0390f35b610058565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61025590610249565b9052565b919061026c905f6020850194019061024c565b565b3461029e5761027e36600461019b565b61029a610289610225565b610291610052565b91829182610259565b0390f35b610058565b5f80fd5b5f90565b90565b6102c26102bd6102c792610064565b6102ab565b610064565b90565b6102d3906102ae565b90565b6102df906102ca565b90565b6102eb906102ae565b90565b6102f7906102e2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610322906102fa565b810190811067ffffffffffffffff82111761033c57604052565b610304565b60e01b90565b61035081610249565b0361035757565b5f80fd5b9050519061036882610347565b565b9060208282031261038357610380915f0161035b565b90565b61005c565b610390610052565b3d5f823e3d90fd5b90506104049250602091506103ab6102a7565b506103dd6103d87f00000000000000000000000000000000000000000000000000000000000000006102d6565b6102ee565b6103f96370a082316103ed610052565b95869485938493610341565b8352600483016101db565b03915afa90811561047c575f9161044e575b506104496104437f0000000000000000000000000000000000000000000000000000000000000000610249565b91610249565b101590565b61046f915060203d8111610475575b6104678183610318565b81019061036a565b5f610416565b503d61045d565b61038856fea2646970667358221220f34933c7bb5318fb9053a3ba4d5cb015697da5226b9a28c4607597dae89a1a7f64736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4a\0PWa\0\x1Aa\0\x14a\x01JV[\x90a\x03\x0FV[a\0\"a\0UV[a\x04\xB7a\x03Y\x829`\x80Q\x81\x81\x81a\x01\xAC\x01Ra\x03\xB4\x01R`\xA0Q\x81\x81\x81a\x02'\x01Ra\x04\x1F\x01Ra\x04\xB7\x90\xF3[a\0[V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x87\x90a\0_V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x9FW`@RV[a\0iV[\x90a\0\xB7a\0\xB0a\0UV[\x92\x83a\0}V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD1\x90a\0\xBDV[\x90V[a\0\xDD\x81a\0\xC8V[\x03a\0\xE4WV[_\x80\xFD[\x90PQ\x90a\0\xF5\x82a\0\xD4V[V[\x90V[a\x01\x03\x81a\0\xF7V[\x03a\x01\nWV[_\x80\xFD[\x90PQ\x90a\x01\x1B\x82a\0\xFAV[V[\x91\x90`@\x83\x82\x03\x12a\x01EW\x80a\x019a\x01B\x92_\x86\x01a\0\xE8V[\x93` \x01a\x01\x0EV[\x90V[a\0\xB9V[a\x01ha\x08\x10\x808\x03\x80a\x01]\x81a\0\xA4V[\x92\x839\x81\x01\x90a\x01\x1DV[\x90\x91V[\x90V[\x90V[a\x01\x86a\x01\x81a\x01\x8B\x92a\x01lV[a\x01oV[a\0\xBDV[\x90V[a\x01\x97\x90a\x01rV[\x90V[` \x91\x81R\x01\x90V[` \x7Fro address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTokenBalanceSequencingModule: ze_\x82\x01R\x01RV[a\x01\xFD`*`@\x92a\x01\x9AV[a\x02\x06\x81a\x01\xA3V[\x01\x90V[a\x02\x1F\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xF0V[\x90V[\x15a\x02)WV[a\x021a\0UV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02G`\x04\x82\x01a\x02\nV[\x03\x90\xFD[a\x02_a\x02Za\x02d\x92a\x01lV[a\x01oV[a\0\xF7V[\x90V[` \x7Fro balance\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FTokenBalanceSequencingModule: ze_\x82\x01R\x01RV[a\x02\xC1`*`@\x92a\x01\x9AV[a\x02\xCA\x81a\x02gV[\x01\x90V[a\x02\xE3\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xB4V[\x90V[\x15a\x02\xEDWV[a\x02\xF5a\0UV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\x0B`\x04\x82\x01a\x02\xCEV[\x03\x90\xFD[a\x034\x81a\x03-a\x03'a\x03\"_a\x01\x8EV[a\0\xC8V[\x91a\0\xC8V[\x14\x15a\x02\"V[a\x03P\x82a\x03Ja\x03D_a\x02KV[\x91a\0\xF7V[\x11a\x02\xE6V[`\x80R`\xA0RV\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xA3V[a\0\x1D_5a\0LV[\x80cz9y\xDC\x14a\0GW\x80c\x9Dv\xEAX\x14a\0BWc\xB9\xD1\xD4\x9B\x03a\0\x0EWa\x02nV[a\x01\xF0V[a\x01bV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0x\x90a\0dV[\x90V[a\0\x84\x81a\0oV[\x03a\0\x8BWV[_\x80\xFD[\x90P5\x90a\0\x9C\x82a\0{V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xE4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xDFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xDAWV[a\0\xA6V[a\0\xA2V[a\0\x9EV[\x91``\x83\x83\x03\x12a\x016Wa\x01\0\x82_\x85\x01a\0\x8FV[\x92a\x01\x0E\x83` \x83\x01a\0\x8FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x011Wa\x01-\x92\x01a\0\xAAV[\x90\x91V[a\0`V[a\0\\V[\x15\x15\x90V[a\x01I\x90a\x01;V[\x90RV[\x91\x90a\x01`\x90_` \x85\x01\x94\x01\x90a\x01@V[V[4a\x01\x96Wa\x01\x92a\x01\x81a\x01x6`\x04a\0\xE9V[\x92\x91\x90\x91a\x03\x98V[a\x01\x89a\0RV[\x91\x82\x91\x82a\x01MV[\x03\x90\xF3[a\0XV[_\x91\x03\x12a\x01\xA5WV[a\0\\V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x01\xD7\x90a\0oV[\x90RV[\x91\x90a\x01\xEE\x90_` \x85\x01\x94\x01\x90a\x01\xCEV[V[4a\x02 Wa\x02\x006`\x04a\x01\x9BV[a\x02\x1Ca\x02\x0Ba\x01\xAAV[a\x02\x13a\0RV[\x91\x82\x91\x82a\x01\xDBV[\x03\x90\xF3[a\0XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x02U\x90a\x02IV[\x90RV[\x91\x90a\x02l\x90_` \x85\x01\x94\x01\x90a\x02LV[V[4a\x02\x9EWa\x02~6`\x04a\x01\x9BV[a\x02\x9Aa\x02\x89a\x02%V[a\x02\x91a\0RV[\x91\x82\x91\x82a\x02YV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[\x90V[a\x02\xC2a\x02\xBDa\x02\xC7\x92a\0dV[a\x02\xABV[a\0dV[\x90V[a\x02\xD3\x90a\x02\xAEV[\x90V[a\x02\xDF\x90a\x02\xCAV[\x90V[a\x02\xEB\x90a\x02\xAEV[\x90V[a\x02\xF7\x90a\x02\xE2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\"\x90a\x02\xFAV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03<W`@RV[a\x03\x04V[`\xE0\x1B\x90V[a\x03P\x81a\x02IV[\x03a\x03WWV[_\x80\xFD[\x90PQ\x90a\x03h\x82a\x03GV[V[\x90` \x82\x82\x03\x12a\x03\x83Wa\x03\x80\x91_\x01a\x03[V[\x90V[a\0\\V[a\x03\x90a\0RV[=_\x82>=\x90\xFD[\x90Pa\x04\x04\x92P` \x91Pa\x03\xABa\x02\xA7V[Pa\x03\xDDa\x03\xD8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\xD6V[a\x02\xEEV[a\x03\xF9cp\xA0\x821a\x03\xEDa\0RV[\x95\x86\x94\x85\x93\x84\x93a\x03AV[\x83R`\x04\x83\x01a\x01\xDBV[\x03\x91Z\xFA\x90\x81\x15a\x04|W_\x91a\x04NW[Pa\x04Ia\x04C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02IV[\x91a\x02IV[\x10\x15\x90V[a\x04o\x91P` =\x81\x11a\x04uW[a\x04g\x81\x83a\x03\x18V[\x81\x01\x90a\x03jV[_a\x04\x16V[P=a\x04]V[a\x03\x88V\xFE\xA2dipfsX\"\x12 \xF3I3\xC7\xBBS\x18\xFB\x90S\xA3\xBAM\\\xB0\x15i}\xA5\"k\x9A(\xC4`u\x97\xDA\xE8\x9A\x1A\x7FdsolcC\0\x08\x1D\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6102a3565b61001d5f3561004c565b80637a3979dc146100475780639d76ea58146100425763b9d1d49b0361000e5761026e565b6101f0565b610162565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61007890610064565b90565b6100848161006f565b0361008b57565b5f80fd5b9050359061009c8261007b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100e45781359167ffffffffffffffff83116100df5760200192600183028401116100da57565b6100a6565b6100a2565b61009e565b9160608383031261013657610100825f850161008f565b9261010e836020830161008f565b92604082013567ffffffffffffffff81116101315761012d92016100aa565b9091565b610060565b61005c565b151590565b6101499061013b565b9052565b9190610160905f60208501940190610140565b565b34610196576101926101816101783660046100e9565b92919091610398565b610189610052565b9182918261014d565b0390f35b610058565b5f9103126101a557565b61005c565b7f000000000000000000000000000000000000000000000000000000000000000090565b6101d79061006f565b9052565b91906101ee905f602085019401906101ce565b565b346102205761020036600461019b565b61021c61020b6101aa565b610213610052565b918291826101db565b0390f35b610058565b7f000000000000000000000000000000000000000000000000000000000000000090565b90565b61025590610249565b9052565b919061026c905f6020850194019061024c565b565b3461029e5761027e36600461019b565b61029a610289610225565b610291610052565b91829182610259565b0390f35b610058565b5f80fd5b5f90565b90565b6102c26102bd6102c792610064565b6102ab565b610064565b90565b6102d3906102ae565b90565b6102df906102ca565b90565b6102eb906102ae565b90565b6102f7906102e2565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610322906102fa565b810190811067ffffffffffffffff82111761033c57604052565b610304565b60e01b90565b61035081610249565b0361035757565b5f80fd5b9050519061036882610347565b565b9060208282031261038357610380915f0161035b565b90565b61005c565b610390610052565b3d5f823e3d90fd5b90506104049250602091506103ab6102a7565b506103dd6103d87f00000000000000000000000000000000000000000000000000000000000000006102d6565b6102ee565b6103f96370a082316103ed610052565b95869485938493610341565b8352600483016101db565b03915afa90811561047c575f9161044e575b506104496104437f0000000000000000000000000000000000000000000000000000000000000000610249565b91610249565b101590565b61046f915060203d8111610475575b6104678183610318565b81019061036a565b5f610416565b503d61045d565b61038856fea2646970667358221220f34933c7bb5318fb9053a3ba4d5cb015697da5226b9a28c4607597dae89a1a7f64736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xA3V[a\0\x1D_5a\0LV[\x80cz9y\xDC\x14a\0GW\x80c\x9Dv\xEAX\x14a\0BWc\xB9\xD1\xD4\x9B\x03a\0\x0EWa\x02nV[a\x01\xF0V[a\x01bV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0x\x90a\0dV[\x90V[a\0\x84\x81a\0oV[\x03a\0\x8BWV[_\x80\xFD[\x90P5\x90a\0\x9C\x82a\0{V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xE4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xDFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xDAWV[a\0\xA6V[a\0\xA2V[a\0\x9EV[\x91``\x83\x83\x03\x12a\x016Wa\x01\0\x82_\x85\x01a\0\x8FV[\x92a\x01\x0E\x83` \x83\x01a\0\x8FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x011Wa\x01-\x92\x01a\0\xAAV[\x90\x91V[a\0`V[a\0\\V[\x15\x15\x90V[a\x01I\x90a\x01;V[\x90RV[\x91\x90a\x01`\x90_` \x85\x01\x94\x01\x90a\x01@V[V[4a\x01\x96Wa\x01\x92a\x01\x81a\x01x6`\x04a\0\xE9V[\x92\x91\x90\x91a\x03\x98V[a\x01\x89a\0RV[\x91\x82\x91\x82a\x01MV[\x03\x90\xF3[a\0XV[_\x91\x03\x12a\x01\xA5WV[a\0\\V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x01\xD7\x90a\0oV[\x90RV[\x91\x90a\x01\xEE\x90_` \x85\x01\x94\x01\x90a\x01\xCEV[V[4a\x02 Wa\x02\x006`\x04a\x01\x9BV[a\x02\x1Ca\x02\x0Ba\x01\xAAV[a\x02\x13a\0RV[\x91\x82\x91\x82a\x01\xDBV[\x03\x90\xF3[a\0XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[\x90V[a\x02U\x90a\x02IV[\x90RV[\x91\x90a\x02l\x90_` \x85\x01\x94\x01\x90a\x02LV[V[4a\x02\x9EWa\x02~6`\x04a\x01\x9BV[a\x02\x9Aa\x02\x89a\x02%V[a\x02\x91a\0RV[\x91\x82\x91\x82a\x02YV[\x03\x90\xF3[a\0XV[_\x80\xFD[_\x90V[\x90V[a\x02\xC2a\x02\xBDa\x02\xC7\x92a\0dV[a\x02\xABV[a\0dV[\x90V[a\x02\xD3\x90a\x02\xAEV[\x90V[a\x02\xDF\x90a\x02\xCAV[\x90V[a\x02\xEB\x90a\x02\xAEV[\x90V[a\x02\xF7\x90a\x02\xE2V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\"\x90a\x02\xFAV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03<W`@RV[a\x03\x04V[`\xE0\x1B\x90V[a\x03P\x81a\x02IV[\x03a\x03WWV[_\x80\xFD[\x90PQ\x90a\x03h\x82a\x03GV[V[\x90` \x82\x82\x03\x12a\x03\x83Wa\x03\x80\x91_\x01a\x03[V[\x90V[a\0\\V[a\x03\x90a\0RV[=_\x82>=\x90\xFD[\x90Pa\x04\x04\x92P` \x91Pa\x03\xABa\x02\xA7V[Pa\x03\xDDa\x03\xD8\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02\xD6V[a\x02\xEEV[a\x03\xF9cp\xA0\x821a\x03\xEDa\0RV[\x95\x86\x94\x85\x93\x84\x93a\x03AV[\x83R`\x04\x83\x01a\x01\xDBV[\x03\x91Z\xFA\x90\x81\x15a\x04|W_\x91a\x04NW[Pa\x04Ia\x04C\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x02IV[\x91a\x02IV[\x10\x15\x90V[a\x04o\x91P` =\x81\x11a\x04uW[a\x04g\x81\x83a\x03\x18V[\x81\x01\x90a\x03jV[_a\x04\x16V[P=a\x04]V[a\x03\x88V\xFE\xA2dipfsX\"\x12 \xF3I3\xC7\xBBS\x18\xFB\x90S\xA3\xBAM\\\xB0\x15i}\xA5\"k\x9A(\xC4`u\x97\xDA\xE8\x9A\x1A\x7FdsolcC\0\x08\x1D\x003",
    );
    /**Constructor`.
```solidity
constructor(address _tokenAddress, uint256 _minimumBalance);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _tokenAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._tokenAddress, value._minimumBalance)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _tokenAddress: tuple.0,
                        _minimumBalance: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._tokenAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._minimumBalance),
                )
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address, bytes memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `minimumBalance()` and selector `0xb9d1d49b`.
```solidity
function minimumBalance() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumBalanceCall {}
    ///Container type for the return parameters of the [`minimumBalance()`](minimumBalanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct minimumBalanceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumBalanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: minimumBalanceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for minimumBalanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<minimumBalanceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: minimumBalanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for minimumBalanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for minimumBalanceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = minimumBalanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "minimumBalance()";
            const SELECTOR: [u8; 4] = [185u8, 209u8, 212u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenAddress()` and selector `0x9d76ea58`.
```solidity
function tokenAddress() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenAddressCall {}
    ///Container type for the return parameters of the [`tokenAddress()`](tokenAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenAddressReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenAddressCall> for UnderlyingRustTuple<'_> {
                fn from(value: tokenAddressCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenAddressReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tokenAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenAddressCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenAddress()";
            const SELECTOR: [u8; 4] = [157u8, 118u8, 234u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TokenBalanceSequencingModule`](self) function calls.
    pub enum TokenBalanceSequencingModuleCalls {
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        minimumBalance(minimumBalanceCall),
        #[allow(missing_docs)]
        tokenAddress(tokenAddressCall),
    }
    #[automatically_derived]
    impl TokenBalanceSequencingModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [122u8, 57u8, 121u8, 220u8],
            [157u8, 118u8, 234u8, 88u8],
            [185u8, 209u8, 212u8, 155u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TokenBalanceSequencingModuleCalls {
        const NAME: &'static str = "TokenBalanceSequencingModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::minimumBalance(_) => {
                    <minimumBalanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::tokenAddress(_) => {
                    <tokenAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls>] = &[
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TokenBalanceSequencingModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn tokenAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls> {
                        <tokenAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TokenBalanceSequencingModuleCalls::tokenAddress)
                    }
                    tokenAddress
                },
                {
                    fn minimumBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TokenBalanceSequencingModuleCalls> {
                        <minimumBalanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TokenBalanceSequencingModuleCalls::minimumBalance)
                    }
                    minimumBalance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::minimumBalance(inner) => {
                    <minimumBalanceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::tokenAddress(inner) => {
                    <tokenAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::minimumBalance(inner) => {
                    <minimumBalanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::tokenAddress(inner) => {
                    <tokenAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TokenBalanceSequencingModule`](self) contract instance.

See the [wrapper's documentation](`TokenBalanceSequencingModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TokenBalanceSequencingModuleInstance<T, P, N> {
        TokenBalanceSequencingModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _tokenAddress: alloy::sol_types::private::Address,
        _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TokenBalanceSequencingModuleInstance<T, P, N>>,
    > {
        TokenBalanceSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy(provider, _tokenAddress, _minimumBalance)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _tokenAddress: alloy::sol_types::private::Address,
        _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TokenBalanceSequencingModuleInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _tokenAddress, _minimumBalance)
    }
    /**A [`TokenBalanceSequencingModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TokenBalanceSequencingModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TokenBalanceSequencingModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TokenBalanceSequencingModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TokenBalanceSequencingModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TokenBalanceSequencingModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TokenBalanceSequencingModule`](self) contract instance.

See the [wrapper's documentation](`TokenBalanceSequencingModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _tokenAddress: alloy::sol_types::private::Address,
            _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<TokenBalanceSequencingModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                _tokenAddress,
                _minimumBalance,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _tokenAddress: alloy::sol_types::private::Address,
            _minimumBalance: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _tokenAddress,
                            _minimumBalance,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TokenBalanceSequencingModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> TokenBalanceSequencingModuleInstance<T, P, N> {
            TokenBalanceSequencingModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TokenBalanceSequencingModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer, _1, _2 })
        }
        ///Creates a new call builder for the [`minimumBalance`] function.
        pub fn minimumBalance(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, minimumBalanceCall, N> {
            self.call_builder(&minimumBalanceCall {})
        }
        ///Creates a new call builder for the [`tokenAddress`] function.
        pub fn tokenAddress(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenAddressCall, N> {
            self.call_builder(&tokenAddressCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TokenBalanceSequencingModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
