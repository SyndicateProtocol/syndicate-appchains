/**

Generated by the following Solidity interface...
```solidity
interface MockAttestationDocVerifier {
    function mockPublicKeyToReturn() external view returns (address);
    function setPublicKeyToReturn(address _key) external;
    function setShouldRevert(bool _revert) external;
    function shouldRevert() external view returns (bool);
    function verifyAttestationDocProof(bytes memory, bytes memory) external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "mockPublicKeyToReturn",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setPublicKeyToReturn",
    "inputs": [
      {
        "name": "_key",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setShouldRevert",
    "inputs": [
      {
        "name": "_revert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyAttestationDocProof",
    "inputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockAttestationDocVerifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b6105b061002b82396105b090f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b6103ab565b61001d5f3561006c565b80633aac70be146100675780636813d78714610062578063c22a96941461005d578063d3072d82146100585763e85f202e0361000e57610376565b610302565b610259565b61015a565b6100e1565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61009890610084565b90565b6100a48161008f565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b906020828203126100d7576100d4915f016100af565b90565b61007c565b5f0190565b3461010f576100f96100f43660046100be565b610429565b610101610072565b8061010b816100dc565b0390f35b610078565b151590565b61012281610114565b0361012957565b5f80fd5b9050359061013a82610119565b565b9060208282031261015557610152915f0161012d565b90565b61007c565b346101885761017261016d36600461013c565b610483565b61017a610072565b80610184816100dc565b0390f35b610078565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b9091604082840312610232575f82013567ffffffffffffffff811161022d5783610203918401610199565b929093602082013567ffffffffffffffff8111610228576102249201610199565b9091565b610080565b610080565b61007c565b6102409061008f565b9052565b9190610257905f60208501940190610237565b565b3461028d5761028961027861026f3660046101d8565b92919091610568565b610280610072565b91829182610244565b0390f35b610078565b5f91031261029c57565b61007c565b1c90565b60ff1690565b6102bb9060086102c093026102a1565b6102a5565b90565b906102ce91546102ab565b90565b6102dd5f6014906102c3565b90565b6102e990610114565b9052565b9190610300905f602085019401906102e0565b565b3461033257610312366004610292565b61032e61031d6102d1565b610325610072565b918291826102ed565b0390f35b610078565b60018060a01b031690565b61035290600861035793026102a1565b610337565b90565b906103659154610342565b90565b6103735f5f9061035a565b90565b346103a657610386366004610292565b6103a2610391610368565b610399610072565b91829182610244565b0390f35b610078565b5f80fd5b5f1b90565b906103c560018060a01b03916103af565b9181191691161790565b90565b6103e66103e16103eb92610084565b6103cf565b610084565b90565b6103f7906103d2565b90565b610403906103ee565b90565b90565b9061041e610419610425926103fa565b610406565b82546103b4565b9055565b610433905f610409565b565b60a01b90565b9061044a60ff60a01b91610435565b9181191691161790565b61045d90610114565b90565b90565b9061047861047361047f92610454565b610460565b825461043b565b9055565b61048d905f610463565b565b5f90565b60a01c90565b6104a56104aa91610493565b6102a5565b90565b6104b79054610499565b90565b60209181520190565b60207f6564207265766572740000000000000000000000000000000000000000000000917f4d6f636b4174746573746174696f6e446f6356657269666965723a20466f72635f8201520152565b61051d60296040926104ba565b610526816104c3565b0190565b61053f9060208101905f818303910152610510565b90565b5f1c90565b61055361055891610542565b610337565b90565b6105659054610547565b90565b5050505061057461048f565b5061057e5f6104ad565b61058e5761058b5f61055b565b90565b610596610072565b62461bcd60e51b8152806105ac6004820161052a565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x05\xB0a\0+\x829a\x05\xB0\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\xABV[a\0\x1D_5a\0lV[\x80c:\xACp\xBE\x14a\0gW\x80ch\x13\xD7\x87\x14a\0bW\x80c\xC2*\x96\x94\x14a\0]W\x80c\xD3\x07-\x82\x14a\0XWc\xE8_ .\x03a\0\x0EWa\x03vV[a\x03\x02V[a\x02YV[a\x01ZV[a\0\xE1V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x98\x90a\0\x84V[\x90V[a\0\xA4\x81a\0\x8FV[\x03a\0\xABWV[_\x80\xFD[\x90P5\x90a\0\xBC\x82a\0\x9BV[V[\x90` \x82\x82\x03\x12a\0\xD7Wa\0\xD4\x91_\x01a\0\xAFV[\x90V[a\0|V[_\x01\x90V[4a\x01\x0FWa\0\xF9a\0\xF46`\x04a\0\xBEV[a\x04)V[a\x01\x01a\0rV[\x80a\x01\x0B\x81a\0\xDCV[\x03\x90\xF3[a\0xV[\x15\x15\x90V[a\x01\"\x81a\x01\x14V[\x03a\x01)WV[_\x80\xFD[\x90P5\x90a\x01:\x82a\x01\x19V[V[\x90` \x82\x82\x03\x12a\x01UWa\x01R\x91_\x01a\x01-V[\x90V[a\0|V[4a\x01\x88Wa\x01ra\x01m6`\x04a\x01<V[a\x04\x83V[a\x01za\0rV[\x80a\x01\x84\x81a\0\xDCV[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90\x91`@\x82\x84\x03\x12a\x022W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02-W\x83a\x02\x03\x91\x84\x01a\x01\x99V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02(Wa\x02$\x92\x01a\x01\x99V[\x90\x91V[a\0\x80V[a\0\x80V[a\0|V[a\x02@\x90a\0\x8FV[\x90RV[\x91\x90a\x02W\x90_` \x85\x01\x94\x01\x90a\x027V[V[4a\x02\x8DWa\x02\x89a\x02xa\x02o6`\x04a\x01\xD8V[\x92\x91\x90\x91a\x05hV[a\x02\x80a\0rV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\0xV[_\x91\x03\x12a\x02\x9CWV[a\0|V[\x1C\x90V[`\xFF\x16\x90V[a\x02\xBB\x90`\x08a\x02\xC0\x93\x02a\x02\xA1V[a\x02\xA5V[\x90V[\x90a\x02\xCE\x91Ta\x02\xABV[\x90V[a\x02\xDD_`\x14\x90a\x02\xC3V[\x90V[a\x02\xE9\x90a\x01\x14V[\x90RV[\x91\x90a\x03\0\x90_` \x85\x01\x94\x01\x90a\x02\xE0V[V[4a\x032Wa\x03\x126`\x04a\x02\x92V[a\x03.a\x03\x1Da\x02\xD1V[a\x03%a\0rV[\x91\x82\x91\x82a\x02\xEDV[\x03\x90\xF3[a\0xV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03R\x90`\x08a\x03W\x93\x02a\x02\xA1V[a\x037V[\x90V[\x90a\x03e\x91Ta\x03BV[\x90V[a\x03s__\x90a\x03ZV[\x90V[4a\x03\xA6Wa\x03\x866`\x04a\x02\x92V[a\x03\xA2a\x03\x91a\x03hV[a\x03\x99a\0rV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x1B\x90V[\x90a\x03\xC5`\x01\x80`\xA0\x1B\x03\x91a\x03\xAFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x03\xE6a\x03\xE1a\x03\xEB\x92a\0\x84V[a\x03\xCFV[a\0\x84V[\x90V[a\x03\xF7\x90a\x03\xD2V[\x90V[a\x04\x03\x90a\x03\xEEV[\x90V[\x90V[\x90a\x04\x1Ea\x04\x19a\x04%\x92a\x03\xFAV[a\x04\x06V[\x82Ta\x03\xB4V[\x90UV[a\x043\x90_a\x04\tV[V[`\xA0\x1B\x90V[\x90a\x04J`\xFF`\xA0\x1B\x91a\x045V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04]\x90a\x01\x14V[\x90V[\x90V[\x90a\x04xa\x04sa\x04\x7F\x92a\x04TV[a\x04`V[\x82Ta\x04;V[\x90UV[a\x04\x8D\x90_a\x04cV[V[_\x90V[`\xA0\x1C\x90V[a\x04\xA5a\x04\xAA\x91a\x04\x93V[a\x02\xA5V[\x90V[a\x04\xB7\x90Ta\x04\x99V[\x90V[` \x91\x81R\x01\x90V[` \x7Fed revert\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FMockAttestationDocVerifier: Forc_\x82\x01R\x01RV[a\x05\x1D`)`@\x92a\x04\xBAV[a\x05&\x81a\x04\xC3V[\x01\x90V[a\x05?\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\x10V[\x90V[_\x1C\x90V[a\x05Sa\x05X\x91a\x05BV[a\x037V[\x90V[a\x05e\x90Ta\x05GV[\x90V[PPPPa\x05ta\x04\x8FV[Pa\x05~_a\x04\xADV[a\x05\x8EWa\x05\x8B_a\x05[V[\x90V[a\x05\x96a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05\xAC`\x04\x82\x01a\x05*V[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6103ab565b61001d5f3561006c565b80633aac70be146100675780636813d78714610062578063c22a96941461005d578063d3072d82146100585763e85f202e0361000e57610376565b610302565b610259565b61015a565b6100e1565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61009890610084565b90565b6100a48161008f565b036100ab57565b5f80fd5b905035906100bc8261009b565b565b906020828203126100d7576100d4915f016100af565b90565b61007c565b5f0190565b3461010f576100f96100f43660046100be565b610429565b610101610072565b8061010b816100dc565b0390f35b610078565b151590565b61012281610114565b0361012957565b5f80fd5b9050359061013a82610119565b565b9060208282031261015557610152915f0161012d565b90565b61007c565b346101885761017261016d36600461013c565b610483565b61017a610072565b80610184816100dc565b0390f35b610078565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101d35781359167ffffffffffffffff83116101ce5760200192600183028401116101c957565b610195565b610191565b61018d565b9091604082840312610232575f82013567ffffffffffffffff811161022d5783610203918401610199565b929093602082013567ffffffffffffffff8111610228576102249201610199565b9091565b610080565b610080565b61007c565b6102409061008f565b9052565b9190610257905f60208501940190610237565b565b3461028d5761028961027861026f3660046101d8565b92919091610568565b610280610072565b91829182610244565b0390f35b610078565b5f91031261029c57565b61007c565b1c90565b60ff1690565b6102bb9060086102c093026102a1565b6102a5565b90565b906102ce91546102ab565b90565b6102dd5f6014906102c3565b90565b6102e990610114565b9052565b9190610300905f602085019401906102e0565b565b3461033257610312366004610292565b61032e61031d6102d1565b610325610072565b918291826102ed565b0390f35b610078565b60018060a01b031690565b61035290600861035793026102a1565b610337565b90565b906103659154610342565b90565b6103735f5f9061035a565b90565b346103a657610386366004610292565b6103a2610391610368565b610399610072565b91829182610244565b0390f35b610078565b5f80fd5b5f1b90565b906103c560018060a01b03916103af565b9181191691161790565b90565b6103e66103e16103eb92610084565b6103cf565b610084565b90565b6103f7906103d2565b90565b610403906103ee565b90565b90565b9061041e610419610425926103fa565b610406565b82546103b4565b9055565b610433905f610409565b565b60a01b90565b9061044a60ff60a01b91610435565b9181191691161790565b61045d90610114565b90565b90565b9061047861047361047f92610454565b610460565b825461043b565b9055565b61048d905f610463565b565b5f90565b60a01c90565b6104a56104aa91610493565b6102a5565b90565b6104b79054610499565b90565b60209181520190565b60207f6564207265766572740000000000000000000000000000000000000000000000917f4d6f636b4174746573746174696f6e446f6356657269666965723a20466f72635f8201520152565b61051d60296040926104ba565b610526816104c3565b0190565b61053f9060208101905f818303910152610510565b90565b5f1c90565b61055361055891610542565b610337565b90565b6105659054610547565b90565b5050505061057461048f565b5061057e5f6104ad565b61058e5761058b5f61055b565b90565b610596610072565b62461bcd60e51b8152806105ac6004820161052a565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x03\xABV[a\0\x1D_5a\0lV[\x80c:\xACp\xBE\x14a\0gW\x80ch\x13\xD7\x87\x14a\0bW\x80c\xC2*\x96\x94\x14a\0]W\x80c\xD3\x07-\x82\x14a\0XWc\xE8_ .\x03a\0\x0EWa\x03vV[a\x03\x02V[a\x02YV[a\x01ZV[a\0\xE1V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x98\x90a\0\x84V[\x90V[a\0\xA4\x81a\0\x8FV[\x03a\0\xABWV[_\x80\xFD[\x90P5\x90a\0\xBC\x82a\0\x9BV[V[\x90` \x82\x82\x03\x12a\0\xD7Wa\0\xD4\x91_\x01a\0\xAFV[\x90V[a\0|V[_\x01\x90V[4a\x01\x0FWa\0\xF9a\0\xF46`\x04a\0\xBEV[a\x04)V[a\x01\x01a\0rV[\x80a\x01\x0B\x81a\0\xDCV[\x03\x90\xF3[a\0xV[\x15\x15\x90V[a\x01\"\x81a\x01\x14V[\x03a\x01)WV[_\x80\xFD[\x90P5\x90a\x01:\x82a\x01\x19V[V[\x90` \x82\x82\x03\x12a\x01UWa\x01R\x91_\x01a\x01-V[\x90V[a\0|V[4a\x01\x88Wa\x01ra\x01m6`\x04a\x01<V[a\x04\x83V[a\x01za\0rV[\x80a\x01\x84\x81a\0\xDCV[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xD3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xCEW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xC9WV[a\x01\x95V[a\x01\x91V[a\x01\x8DV[\x90\x91`@\x82\x84\x03\x12a\x022W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02-W\x83a\x02\x03\x91\x84\x01a\x01\x99V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02(Wa\x02$\x92\x01a\x01\x99V[\x90\x91V[a\0\x80V[a\0\x80V[a\0|V[a\x02@\x90a\0\x8FV[\x90RV[\x91\x90a\x02W\x90_` \x85\x01\x94\x01\x90a\x027V[V[4a\x02\x8DWa\x02\x89a\x02xa\x02o6`\x04a\x01\xD8V[\x92\x91\x90\x91a\x05hV[a\x02\x80a\0rV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\0xV[_\x91\x03\x12a\x02\x9CWV[a\0|V[\x1C\x90V[`\xFF\x16\x90V[a\x02\xBB\x90`\x08a\x02\xC0\x93\x02a\x02\xA1V[a\x02\xA5V[\x90V[\x90a\x02\xCE\x91Ta\x02\xABV[\x90V[a\x02\xDD_`\x14\x90a\x02\xC3V[\x90V[a\x02\xE9\x90a\x01\x14V[\x90RV[\x91\x90a\x03\0\x90_` \x85\x01\x94\x01\x90a\x02\xE0V[V[4a\x032Wa\x03\x126`\x04a\x02\x92V[a\x03.a\x03\x1Da\x02\xD1V[a\x03%a\0rV[\x91\x82\x91\x82a\x02\xEDV[\x03\x90\xF3[a\0xV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03R\x90`\x08a\x03W\x93\x02a\x02\xA1V[a\x037V[\x90V[\x90a\x03e\x91Ta\x03BV[\x90V[a\x03s__\x90a\x03ZV[\x90V[4a\x03\xA6Wa\x03\x866`\x04a\x02\x92V[a\x03\xA2a\x03\x91a\x03hV[a\x03\x99a\0rV[\x91\x82\x91\x82a\x02DV[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x1B\x90V[\x90a\x03\xC5`\x01\x80`\xA0\x1B\x03\x91a\x03\xAFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x03\xE6a\x03\xE1a\x03\xEB\x92a\0\x84V[a\x03\xCFV[a\0\x84V[\x90V[a\x03\xF7\x90a\x03\xD2V[\x90V[a\x04\x03\x90a\x03\xEEV[\x90V[\x90V[\x90a\x04\x1Ea\x04\x19a\x04%\x92a\x03\xFAV[a\x04\x06V[\x82Ta\x03\xB4V[\x90UV[a\x043\x90_a\x04\tV[V[`\xA0\x1B\x90V[\x90a\x04J`\xFF`\xA0\x1B\x91a\x045V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04]\x90a\x01\x14V[\x90V[\x90V[\x90a\x04xa\x04sa\x04\x7F\x92a\x04TV[a\x04`V[\x82Ta\x04;V[\x90UV[a\x04\x8D\x90_a\x04cV[V[_\x90V[`\xA0\x1C\x90V[a\x04\xA5a\x04\xAA\x91a\x04\x93V[a\x02\xA5V[\x90V[a\x04\xB7\x90Ta\x04\x99V[\x90V[` \x91\x81R\x01\x90V[` \x7Fed revert\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FMockAttestationDocVerifier: Forc_\x82\x01R\x01RV[a\x05\x1D`)`@\x92a\x04\xBAV[a\x05&\x81a\x04\xC3V[\x01\x90V[a\x05?\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x05\x10V[\x90V[_\x1C\x90V[a\x05Sa\x05X\x91a\x05BV[a\x037V[\x90V[a\x05e\x90Ta\x05GV[\x90V[PPPPa\x05ta\x04\x8FV[Pa\x05~_a\x04\xADV[a\x05\x8EWa\x05\x8B_a\x05[V[\x90V[a\x05\x96a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05\xAC`\x04\x82\x01a\x05*V[\x03\x90\xFD",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `mockPublicKeyToReturn()` and selector `0xe85f202e`.
```solidity
function mockPublicKeyToReturn() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mockPublicKeyToReturnCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`mockPublicKeyToReturn()`](mockPublicKeyToReturnCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mockPublicKeyToReturnReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mockPublicKeyToReturnCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: mockPublicKeyToReturnCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for mockPublicKeyToReturnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mockPublicKeyToReturnReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: mockPublicKeyToReturnReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for mockPublicKeyToReturnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mockPublicKeyToReturnCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mockPublicKeyToReturn()";
            const SELECTOR: [u8; 4] = [232u8, 95u8, 32u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: mockPublicKeyToReturnReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: mockPublicKeyToReturnReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setPublicKeyToReturn(address)` and selector `0x3aac70be`.
```solidity
function setPublicKeyToReturn(address _key) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setPublicKeyToReturnCall {
        #[allow(missing_docs)]
        pub _key: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setPublicKeyToReturn(address)`](setPublicKeyToReturnCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setPublicKeyToReturnReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setPublicKeyToReturnCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setPublicKeyToReturnCall) -> Self {
                    (value._key,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setPublicKeyToReturnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _key: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setPublicKeyToReturnReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setPublicKeyToReturnReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setPublicKeyToReturnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setPublicKeyToReturnReturn {
            fn _tokenize(
                &self,
            ) -> <setPublicKeyToReturnCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setPublicKeyToReturnCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setPublicKeyToReturnReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setPublicKeyToReturn(address)";
            const SELECTOR: [u8; 4] = [58u8, 172u8, 112u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._key,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setPublicKeyToReturnReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setShouldRevert(bool)` and selector `0x6813d787`.
```solidity
function setShouldRevert(bool _revert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertCall {
        #[allow(missing_docs)]
        pub _revert: bool,
    }
    ///Container type for the return parameters of the [`setShouldRevert(bool)`](setShouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertCall) -> Self {
                    (value._revert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _revert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setShouldRevertReturn {
            fn _tokenize(
                &self,
            ) -> <setShouldRevertCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldRevertCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldRevertReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldRevert(bool)";
            const SELECTOR: [u8; 4] = [104u8, 19u8, 215u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._revert,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setShouldRevertReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: shouldRevertReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: shouldRevertReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyAttestationDocProof(bytes,bytes)` and selector `0xc22a9694`.
```solidity
function verifyAttestationDocProof(bytes memory, bytes memory) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifyAttestationDocProof(bytes,bytes)`](verifyAttestationDocProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyAttestationDocProofReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyAttestationDocProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyAttestationDocProofReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyAttestationDocProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyAttestationDocProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyAttestationDocProof(bytes,bytes)";
            const SELECTOR: [u8; 4] = [194u8, 42u8, 150u8, 148u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: verifyAttestationDocProofReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`MockAttestationDocVerifier`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum MockAttestationDocVerifierCalls {
        #[allow(missing_docs)]
        mockPublicKeyToReturn(mockPublicKeyToReturnCall),
        #[allow(missing_docs)]
        setPublicKeyToReturn(setPublicKeyToReturnCall),
        #[allow(missing_docs)]
        setShouldRevert(setShouldRevertCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
        #[allow(missing_docs)]
        verifyAttestationDocProof(verifyAttestationDocProofCall),
    }
    #[automatically_derived]
    impl MockAttestationDocVerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [58u8, 172u8, 112u8, 190u8],
            [104u8, 19u8, 215u8, 135u8],
            [194u8, 42u8, 150u8, 148u8],
            [211u8, 7u8, 45u8, 130u8],
            [232u8, 95u8, 32u8, 46u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockAttestationDocVerifierCalls {
        const NAME: &'static str = "MockAttestationDocVerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::mockPublicKeyToReturn(_) => {
                    <mockPublicKeyToReturnCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setPublicKeyToReturn(_) => {
                    <setPublicKeyToReturnCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldRevert(_) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifyAttestationDocProof(_) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls>] = &[
                {
                    fn setPublicKeyToReturn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <setPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::setPublicKeyToReturn)
                    }
                    setPublicKeyToReturn
                },
                {
                    fn setShouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                MockAttestationDocVerifierCalls::verifyAttestationDocProof,
                            )
                    }
                    verifyAttestationDocProof
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn mockPublicKeyToReturn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <mockPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::mockPublicKeyToReturn)
                    }
                    mockPublicKeyToReturn
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls>] = &[
                {
                    fn setPublicKeyToReturn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <setPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::setPublicKeyToReturn)
                    }
                    setPublicKeyToReturn
                },
                {
                    fn setShouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn verifyAttestationDocProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                MockAttestationDocVerifierCalls::verifyAttestationDocProof,
                            )
                    }
                    verifyAttestationDocProof
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn mockPublicKeyToReturn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockAttestationDocVerifierCalls> {
                        <mockPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockAttestationDocVerifierCalls::mockPublicKeyToReturn)
                    }
                    mockPublicKeyToReturn
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::mockPublicKeyToReturn(inner) => {
                    <mockPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setPublicKeyToReturn(inner) => {
                    <setPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::mockPublicKeyToReturn(inner) => {
                    <mockPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setPublicKeyToReturn(inner) => {
                    <setPublicKeyToReturnCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyAttestationDocProof(inner) => {
                    <verifyAttestationDocProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockAttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`MockAttestationDocVerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockAttestationDocVerifierInstance<P, N> {
        MockAttestationDocVerifierInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockAttestationDocVerifierInstance<P, N>>,
    > {
        MockAttestationDocVerifierInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        MockAttestationDocVerifierInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`MockAttestationDocVerifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockAttestationDocVerifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockAttestationDocVerifierInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for MockAttestationDocVerifierInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockAttestationDocVerifierInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockAttestationDocVerifierInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`MockAttestationDocVerifier`](self) contract instance.

See the [wrapper's documentation](`MockAttestationDocVerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockAttestationDocVerifierInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> MockAttestationDocVerifierInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockAttestationDocVerifierInstance<P, N> {
            MockAttestationDocVerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockAttestationDocVerifierInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`mockPublicKeyToReturn`] function.
        pub fn mockPublicKeyToReturn(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, mockPublicKeyToReturnCall, N> {
            self.call_builder(&mockPublicKeyToReturnCall)
        }
        ///Creates a new call builder for the [`setPublicKeyToReturn`] function.
        pub fn setPublicKeyToReturn(
            &self,
            _key: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, setPublicKeyToReturnCall, N> {
            self.call_builder(&setPublicKeyToReturnCall { _key })
        }
        ///Creates a new call builder for the [`setShouldRevert`] function.
        pub fn setShouldRevert(
            &self,
            _revert: bool,
        ) -> alloy_contract::SolCallBuilder<&P, setShouldRevertCall, N> {
            self.call_builder(&setShouldRevertCall { _revert })
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall)
        }
        ///Creates a new call builder for the [`verifyAttestationDocProof`] function.
        pub fn verifyAttestationDocProof(
            &self,
            _0: alloy::sol_types::private::Bytes,
            _1: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, verifyAttestationDocProofCall, N> {
            self.call_builder(
                &verifyAttestationDocProofCall {
                    _0,
                    _1,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockAttestationDocVerifierInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
