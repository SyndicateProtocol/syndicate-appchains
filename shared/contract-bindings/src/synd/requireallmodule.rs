/**

Generated by the following Solidity interface...
```solidity
interface RequireAllModule {
    error AddressAlreadyExists();
    error AddressDoesNotExist();
    error CheckFailed(address requireAddress, address proposer);
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event PermissionCheckAdded(address indexed check);
    event PermissionCheckRemoved(address indexed check);

    constructor(address admin);

    function addPermissionCheck(address _address, bool addToHead) external;
    function getAllPermissionChecks() external view returns (address[] memory);
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function removePermissionCheck(address _address) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addPermissionCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getAllPermissionChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removePermissionCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PermissionCheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PermissionCheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AddressDoesNotExist",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CheckFailed",
    "inputs": [
      {
        "name": "requireAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireAllModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b6114b06102d682396114b090f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126117868038038061010781610083565b9283398101906100d6565b90565b61011e90610170565b565b90565b90565b61013a61013561013f92610120565b610123565b61009c565b90565b61014b90610126565b90565b610157906100a7565b9052565b919061016e905f6020850194019061014e565b565b8061018b6101856101805f610142565b6100a7565b916100a7565b1461019b5761019990610276565b565b6101c56101a75f610142565b6101af610034565b918291631e4fbdf760e01b83526004830161015b565b0390fd5b5f1c90565b60018060a01b031690565b6101e56101ea916101c9565b6101ce565b90565b6101f790546101d9565b90565b5f1b90565b9061021060018060a01b03916101fa565b9181191691161790565b61022e6102296102339261009c565b610123565b61009c565b90565b61023f9061021a565b90565b61024b90610236565b90565b90565b9061026661026161026d92610242565b61024e565b82546101ff565b9055565b5f0190565b61027f5f6101ed565b610289825f610251565b906102bd6102b77f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610242565b91610242565b916102c6610034565b806102d081610271565b0390a356fe60806040526004361015610013575b610455565b61001d5f3561008c565b806304f386f414610087578063052eefd1146100825780631b42c7111461007d578063715018a6146100785780637a3979dc146100735780638da5cb5b1461006e5763f2fde38b0361000e57610422565b6103ed565b610392565b6102a0565b61026b565b610189565b610101565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100b8906100a4565b90565b6100c4816100af565b036100cb57565b5f80fd5b905035906100dc826100bb565b565b906020828203126100f7576100f4915f016100cf565b90565b61009c565b5f0190565b3461012f576101196101143660046100de565b610654565b610121610092565b8061012b816100fc565b0390f35b610098565b151590565b61014281610134565b0361014957565b5f80fd5b9050359061015a82610139565b565b91906040838203126101845780610178610181925f86016100cf565b9360200161014d565b90565b61009c565b346101b8576101a261019c36600461015c565b90610802565b6101aa610092565b806101b4816100fc565b0390f35b610098565b5f9103126101c757565b61009c565b5190565b60209181520190565b60200190565b6101e8906100af565b9052565b906101f9816020936101df565b0190565b60200190565b9061022061021a610213846101cc565b80936101d0565b926101d9565b905f5b8181106102305750505090565b90919261024961024360019286516101ec565b946101fd565b9101919091610223565b6102689160208201915f818403910152610203565b90565b3461029b5761027b3660046101bd565b610297610286610960565b61028e610092565b91829182610253565b0390f35b610098565b346102ce576102b03660046101bd565b6102b8610a61565b6102c0610092565b806102ca816100fc565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103195781359167ffffffffffffffff831161031457602001926001830284011161030f57565b6102db565b6102d7565b6102d3565b9160608383031261036b57610335825f85016100cf565b9261034383602083016100cf565b92604082013567ffffffffffffffff81116103665761036292016102df565b9091565b6100a0565b61009c565b61037990610134565b9052565b9190610390905f60208501940190610370565b565b346103c6576103c26103b16103a836600461031e565b92919091610b62565b6103b9610092565b9182918261037d565b0390f35b610098565b6103d4906100af565b9052565b91906103eb905f602085019401906103cb565b565b3461041d576103fd3660046101bd565b610419610408610ccd565b610410610092565b918291826103d8565b0390f35b610098565b346104505761043a6104353660046100de565b610d4e565b610442610092565b8061044c816100fc565b0390f35b610098565b5f80fd5b61046a90610465610d59565b61055c565b565b90565b90565b61048661048161048b9261046c565b61046f565b6100a4565b90565b61049790610472565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6104da601360209261049d565b6104e3816104a6565b0190565b6104fc9060208101905f8183039101526104cd565b90565b1561050657565b61050e610092565b62461bcd60e51b815280610524600482016104e7565b0390fd5b61053c610537610541926100a4565b61046f565b6100a4565b90565b61054d90610528565b90565b61055990610544565b90565b8061057761057161056c5f61048e565b6100af565b916100af565b1461063157610599610593600161058e849161049a565b610dfb565b15610134565b61060e576105cc6105b460016105af849161049a565b611024565b6105c66105c0846100af565b916100af565b146104ff565b6105f67fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610550565b906105ff610092565b80610609816100fc565b0390a2565b610616610092565b633d0f293d60e01b81528061062d600482016100fc565b0390fd5b610639610092565b63e6c4247b60e01b815280610650600482016100fc565b0390fd5b61065d90610459565b565b906106719161066c610d59565b6106f9565b565b5f90565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b6106ab601160209261049d565b6106b481610677565b0190565b6106cd9060208101905f81830391015261069e565b90565b156106d757565b6106df610092565b62461bcd60e51b8152806106f5600482016106b8565b0390fd5b908161071561070f61070a5f61048e565b6100af565b916100af565b146107df5761072e6001610729849161049a565b610dfb565b6107bc5761073a610673565b505f146107a05761075e6107586001610753849161049a565b611178565b5b6106d0565b6107887f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610550565b90610791610092565b8061079b816100fc565b0390a2565b61075e6107b760016107b2849161049a565b611158565b610759565b6107c4610092565b63516c350f60e11b8152806107db600482016100fc565b0390fd5b6107e7610092565b63e6c4247b60e01b8152806107fe600482016100fc565b0390fd5b9061080c9161065f565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061083b90610813565b810190811067ffffffffffffffff82111761085557604052565b61081d565b9061086d610866610092565b9283610831565b565b67ffffffffffffffff81116108875760208091020190565b61081d565b9061089e6108998361086f565b61085a565b918252565b369037565b906108cd6108b58361088c565b926020806108c3869361086f565b92019103906108a3565b565b90565b6108e66108e16108eb9261046c565b61046f565b6108cf565b90565b634e487b7160e01b5f52601160045260245ffd5b61090b906108cf565b5f1981146109195760010190565b6108ee565b634e487b7160e01b5f52603260045260245ffd5b9061093c826101cc565b81101561094d576020809102010190565b61091e565b9061095c906100af565b9052565b61096861080e565b5061097b610976600161049a565b61119c565b610984816108a8565b610996610991600161049a565b6111b3565b61099f5f6108d2565b905b816109b46109ae866108cf565b916108cf565b1080610a19575b15610a10576109ec816109dd6109f4936109d88791879092610932565b610952565b6109e7600161049a565b6111ed565b919015610134565b610a0857610a029091610902565b906109a1565b505090505b90565b50509050610a0d565b5080610a35610a2f610a2a5f61048e565b6100af565b916100af565b14156109bb565b610a44610d59565b610a4c610a4e565b565b610a5f610a5a5f61048e565b611254565b565b610a69610a3c565b565b610a7490610528565b90565b610a8090610a6b565b90565b610a8c90610544565b90565b60e01b90565b90505190610aa282610139565b565b90602082820312610abd57610aba915f01610a95565b90565b61009c565b60209181520190565b90825f939282370152565b9190610af081610ae981610af595610ac2565b8095610acb565b610813565b0190565b610b1f610b2c9593949294610b1560608401965f8501906103cb565b60208301906103cb565b6040818503910152610ad6565b90565b610b37610092565b3d5f823e3d90fd5b916020610b60929493610b5960408201965f8301906103cb565b01906103cb565b565b919092610b6d610673565b50610b80610b7b600161049a565b6111b3565b5b80610b9c610b96610b915f61048e565b6100af565b916100af565b14610c8e57610bb2610bad82610a77565b610a83565b6020637a3979dc918690610bdb8994610be6898990610bcf610092565b98899788968796610a8f565b865260048601610af9565b03915afa8015610c8957610c02915f91610c5b575b5015610134565b610c3457610c1c610c2491610c17600161049a565b6111ed565b919015610134565b15610b815750505050505b600190565b8390610c57610c41610092565b928392630b2d152f60e01b845260048401610b3f565b0390fd5b610c7c915060203d8111610c82575b610c748183610831565b810190610aa4565b5f610bfb565b503d610c6a565b610b2f565b5050505050610c2f565b5f90565b5f1c90565b60018060a01b031690565b610cb8610cbd91610c9c565b610ca1565b90565b610cca9054610cac565b90565b610cd5610c98565b50610cdf5f610cc0565b90565b610cf390610cee610d59565b610cf5565b565b80610d10610d0a610d055f61048e565b6100af565b916100af565b14610d2057610d1e90611254565b565b610d4a610d2c5f61048e565b610d34610092565b918291631e4fbdf760e01b8352600483016103d8565b0390fd5b610d5790610ce2565b565b610d61610ccd565b610d7a610d74610d6f6112b3565b6100af565b916100af565b03610d8157565b610daa610d8c6112b3565b610d94610092565b91829163118cdaa760e01b8352600483016103d8565b0390fd5b90610db890610550565b5f5260205260405f2090565b5f90565b610dd190610134565b90565b90610dde90610dc8565b5f5260205260405f2090565b610df35f61048e565b90565b600190565b610e03610673565b50610e2b610e26610e18600184018590610dae565b610e20610dc4565b90610dd4565b610cc0565b610e44610e3e610e39610dea565b6100af565b916100af565b1480610ea8575b5f14610ea157610e8b610e85610e80610e726001610e919501610e6c610dea565b90610dae565b610e7a610df6565b90610dd4565b610cc0565b926100af565b916100af565b145f14610e9d57600190565b5f90565b5050600190565b50610ed0610ecb610ebd600184018590610dae565b610ec5610df6565b90610dd4565b610cc0565b610ee9610ee3610ede610dea565b6100af565b916100af565b14610e4b565b610ef85f61048e565b90565b1b90565b91906008610f1f910291610f1960018060a01b0384610efb565b92610efb565b9181191691161790565b90565b9190610f42610f3d610f4a93610550565b610f29565b908354610eff565b9055565b610f6091610f5a610c98565b91610f2c565b565b90565b610f79610f74610f7e92610f62565b61046f565b6108cf565b90565b90565b610f90610f9591610c9c565b610f81565b90565b610fa29054610f84565b90565b610fb4610fba919392936108cf565b926108cf565b8203918211610fc557565b6108ee565b5f1b90565b90610fdb5f1991610fca565b9181191691161790565b610ff9610ff4610ffe926108cf565b61046f565b6108cf565b90565b90565b9061101961101461102092610fe5565b611001565b8254610fcf565b9055565b61102c610c98565b508161104761104161103c610eef565b6100af565b916100af565b14801561113e575b61113057806110b861112d9261108261107d61106f600186018890610dae565b611077610dc4565b90610dd4565b610cc0565b6110a96110a4611096600187018990610dae565b61109e610df6565b90610dd4565b610cc0565b906110b2610df6565b926112c0565b6110e05f6110db6110cd600185018790610dae565b6110d5610dc4565b90610dd4565b610f4e565b6111085f6111036110f5600185018790610dae565b6110fd610df6565b90610dd4565b610f4e565b6111275f6111166001610f65565b92019161112283610f98565b610fa5565b90611004565b90565b505061113b5f61048e565b90565b5061115361114d828490610dfb565b15610134565b61104f565b9061117591611165610673565b509061116f610dc4565b9161130b565b90565b9061119591611185610673565b509061118f610df6565b9161130b565b90565b5f90565b5f6111b0916111a9611198565b5001610f98565b90565b6111e56111d760016111ea936111c7610c98565b50016111d1610dea565b90610dae565b6111df610df6565b90610dd4565b610cc0565b90565b90611213916111fa610673565b50611203610c98565b509061120d610df6565b9161132d565b91909190565b9061122a60018060a01b0391610fca565b9181191691161790565b9061124961124461125092610550565b610f29565b8254611219565b9055565b61125d5f610cc0565b611267825f611234565b9061129b6112957f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610550565b91610550565b916112a4610092565b806112ae816100fc565b0390a3565b6112bb610c98565b503390565b91926112ff611304926001611309966112f8836112f36112e3858b018590610dae565b6112ed8915610134565b90610dd4565b611234565b9501610dae565b610dd4565b611234565b565b9161132a92611318610673565b5091611322610dea565b9091926113ce565b90565b91611336610673565b5061133f610c98565b5061135461134e848490610dfb565b15610134565b5f1461136b575050505f906113685f61048e565b90565b61137e6113839260016113889501610dae565b610dd4565b610cc0565b90816113a361139d611398610dea565b6100af565b916100af565b14159190565b6113b86113be919392936108cf565b926108cf565b82018092116113c957565b6108ee565b916113d7610673565b506113ec6113e6848390610dfb565b15610134565b80611469575b6113fe57505050505f90565b6114649361143f9261143561142961142461141d600189018590610dae565b8590610dd4565b610cc0565b918690859085926112c0565b84929091926112c0565b61145e5f61144d6001610f65565b92019161145983610f98565b6113a9565b90611004565b600190565b50611475838390610dfb565b6113f256fea26469706673582212202b6c6cec1d53d4dd2e77e570e6e57b84c5cd1afbe9e4e40baec2631ae6e6119764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x14\xB0a\x02\xD6\x829a\x14\xB0\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x17\x86\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01pV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[a\x01W\x90a\0\xA7V[\x90RV[\x91\x90a\x01n\x90_` \x85\x01\x94\x01\x90a\x01NV[V[\x80a\x01\x8Ba\x01\x85a\x01\x80_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\x9BWa\x01\x99\x90a\x02vV[V[a\x01\xC5a\x01\xA7_a\x01BV[a\x01\xAFa\x004V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01[V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE5a\x01\xEA\x91a\x01\xC9V[a\x01\xCEV[\x90V[a\x01\xF7\x90Ta\x01\xD9V[\x90V[_\x1B\x90V[\x90a\x02\x10`\x01\x80`\xA0\x1B\x03\x91a\x01\xFAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02.a\x02)a\x023\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x02?\x90a\x02\x1AV[\x90V[a\x02K\x90a\x026V[\x90V[\x90V[\x90a\x02fa\x02aa\x02m\x92a\x02BV[a\x02NV[\x82Ta\x01\xFFV[\x90UV[_\x01\x90V[a\x02\x7F_a\x01\xEDV[a\x02\x89\x82_a\x02QV[\x90a\x02\xBDa\x02\xB7\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02BV[\x91a\x02BV[\x91a\x02\xC6a\x004V[\x80a\x02\xD0\x81a\x02qV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04UV[a\0\x1D_5a\0\x8CV[\x80c\x04\xF3\x86\xF4\x14a\0\x87W\x80c\x05.\xEF\xD1\x14a\0\x82W\x80c\x1BB\xC7\x11\x14a\0}W\x80cqP\x18\xA6\x14a\0xW\x80cz9y\xDC\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\"V[a\x03\xEDV[a\x03\x92V[a\x02\xA0V[a\x02kV[a\x01\x89V[a\x01\x01V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB8\x90a\0\xA4V[\x90V[a\0\xC4\x81a\0\xAFV[\x03a\0\xCBWV[_\x80\xFD[\x90P5\x90a\0\xDC\x82a\0\xBBV[V[\x90` \x82\x82\x03\x12a\0\xF7Wa\0\xF4\x91_\x01a\0\xCFV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01/Wa\x01\x19a\x01\x146`\x04a\0\xDEV[a\x06TV[a\x01!a\0\x92V[\x80a\x01+\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01B\x81a\x014V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[\x91\x90`@\x83\x82\x03\x12a\x01\x84W\x80a\x01xa\x01\x81\x92_\x86\x01a\0\xCFV[\x93` \x01a\x01MV[\x90V[a\0\x9CV[4a\x01\xB8Wa\x01\xA2a\x01\x9C6`\x04a\x01\\V[\x90a\x08\x02V[a\x01\xAAa\0\x92V[\x80a\x01\xB4\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01\xC7WV[a\0\x9CV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\xE8\x90a\0\xAFV[\x90RV[\x90a\x01\xF9\x81` \x93a\x01\xDFV[\x01\x90V[` \x01\x90V[\x90a\x02 a\x02\x1Aa\x02\x13\x84a\x01\xCCV[\x80\x93a\x01\xD0V[\x92a\x01\xD9V[\x90_[\x81\x81\x10a\x020WPPP\x90V[\x90\x91\x92a\x02Ia\x02C`\x01\x92\x86Qa\x01\xECV[\x94a\x01\xFDV[\x91\x01\x91\x90\x91a\x02#V[a\x02h\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\x03V[\x90V[4a\x02\x9BWa\x02{6`\x04a\x01\xBDV[a\x02\x97a\x02\x86a\t`V[a\x02\x8Ea\0\x92V[\x91\x82\x91\x82a\x02SV[\x03\x90\xF3[a\0\x98V[4a\x02\xCEWa\x02\xB06`\x04a\x01\xBDV[a\x02\xB8a\naV[a\x02\xC0a\0\x92V[\x80a\x02\xCA\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x19W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x14W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0FWV[a\x02\xDBV[a\x02\xD7V[a\x02\xD3V[\x91``\x83\x83\x03\x12a\x03kWa\x035\x82_\x85\x01a\0\xCFV[\x92a\x03C\x83` \x83\x01a\0\xCFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03fWa\x03b\x92\x01a\x02\xDFV[\x90\x91V[a\0\xA0V[a\0\x9CV[a\x03y\x90a\x014V[\x90RV[\x91\x90a\x03\x90\x90_` \x85\x01\x94\x01\x90a\x03pV[V[4a\x03\xC6Wa\x03\xC2a\x03\xB1a\x03\xA86`\x04a\x03\x1EV[\x92\x91\x90\x91a\x0BbV[a\x03\xB9a\0\x92V[\x91\x82\x91\x82a\x03}V[\x03\x90\xF3[a\0\x98V[a\x03\xD4\x90a\0\xAFV[\x90RV[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03\xCBV[V[4a\x04\x1DWa\x03\xFD6`\x04a\x01\xBDV[a\x04\x19a\x04\x08a\x0C\xCDV[a\x04\x10a\0\x92V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\0\x98V[4a\x04PWa\x04:a\x0456`\x04a\0\xDEV[a\rNV[a\x04Ba\0\x92V[\x80a\x04L\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x04j\x90a\x04ea\rYV[a\x05\\V[V[\x90V[\x90V[a\x04\x86a\x04\x81a\x04\x8B\x92a\x04lV[a\x04oV[a\0\xA4V[\x90V[a\x04\x97\x90a\x04rV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xDA`\x13` \x92a\x04\x9DV[a\x04\xE3\x81a\x04\xA6V[\x01\x90V[a\x04\xFC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\xCDV[\x90V[\x15a\x05\x06WV[a\x05\x0Ea\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05$`\x04\x82\x01a\x04\xE7V[\x03\x90\xFD[a\x05<a\x057a\x05A\x92a\0\xA4V[a\x04oV[a\0\xA4V[\x90V[a\x05M\x90a\x05(V[\x90V[a\x05Y\x90a\x05DV[\x90V[\x80a\x05wa\x05qa\x05l_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x061Wa\x05\x99a\x05\x93`\x01a\x05\x8E\x84\x91a\x04\x9AV[a\r\xFBV[\x15a\x014V[a\x06\x0EWa\x05\xCCa\x05\xB4`\x01a\x05\xAF\x84\x91a\x04\x9AV[a\x10$V[a\x05\xC6a\x05\xC0\x84a\0\xAFV[\x91a\0\xAFV[\x14a\x04\xFFV[a\x05\xF6\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x05PV[\x90a\x05\xFFa\0\x92V[\x80a\x06\t\x81a\0\xFCV[\x03\x90\xA2V[a\x06\x16a\0\x92V[c=\x0F)=`\xE0\x1B\x81R\x80a\x06-`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x069a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x06P`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x06]\x90a\x04YV[V[\x90a\x06q\x91a\x06la\rYV[a\x06\xF9V[V[_\x90V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xAB`\x11` \x92a\x04\x9DV[a\x06\xB4\x81a\x06wV[\x01\x90V[a\x06\xCD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x9EV[\x90V[\x15a\x06\xD7WV[a\x06\xDFa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xF5`\x04\x82\x01a\x06\xB8V[\x03\x90\xFD[\x90\x81a\x07\x15a\x07\x0Fa\x07\n_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x07\xDFWa\x07.`\x01a\x07)\x84\x91a\x04\x9AV[a\r\xFBV[a\x07\xBCWa\x07:a\x06sV[P_\x14a\x07\xA0Wa\x07^a\x07X`\x01a\x07S\x84\x91a\x04\x9AV[a\x11xV[[a\x06\xD0V[a\x07\x88\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x05PV[\x90a\x07\x91a\0\x92V[\x80a\x07\x9B\x81a\0\xFCV[\x03\x90\xA2V[a\x07^a\x07\xB7`\x01a\x07\xB2\x84\x91a\x04\x9AV[a\x11XV[a\x07YV[a\x07\xC4a\0\x92V[cQl5\x0F`\xE1\x1B\x81R\x80a\x07\xDB`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x07\xE7a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07\xFE`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[\x90a\x08\x0C\x91a\x06_V[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08;\x90a\x08\x13V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x08UW`@RV[a\x08\x1DV[\x90a\x08ma\x08fa\0\x92V[\x92\x83a\x081V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x87W` \x80\x91\x02\x01\x90V[a\x08\x1DV[\x90a\x08\x9Ea\x08\x99\x83a\x08oV[a\x08ZV[\x91\x82RV[6\x907V[\x90a\x08\xCDa\x08\xB5\x83a\x08\x8CV[\x92` \x80a\x08\xC3\x86\x93a\x08oV[\x92\x01\x91\x03\x90a\x08\xA3V[V[\x90V[a\x08\xE6a\x08\xE1a\x08\xEB\x92a\x04lV[a\x04oV[a\x08\xCFV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\x0B\x90a\x08\xCFV[_\x19\x81\x14a\t\x19W`\x01\x01\x90V[a\x08\xEEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t<\x82a\x01\xCCV[\x81\x10\x15a\tMW` \x80\x91\x02\x01\x01\x90V[a\t\x1EV[\x90a\t\\\x90a\0\xAFV[\x90RV[a\tha\x08\x0EV[Pa\t{a\tv`\x01a\x04\x9AV[a\x11\x9CV[a\t\x84\x81a\x08\xA8V[a\t\x96a\t\x91`\x01a\x04\x9AV[a\x11\xB3V[a\t\x9F_a\x08\xD2V[\x90[\x81a\t\xB4a\t\xAE\x86a\x08\xCFV[\x91a\x08\xCFV[\x10\x80a\n\x19W[\x15a\n\x10Wa\t\xEC\x81a\t\xDDa\t\xF4\x93a\t\xD8\x87\x91\x87\x90\x92a\t2V[a\tRV[a\t\xE7`\x01a\x04\x9AV[a\x11\xEDV[\x91\x90\x15a\x014V[a\n\x08Wa\n\x02\x90\x91a\t\x02V[\x90a\t\xA1V[PP\x90P[\x90V[PP\x90Pa\n\rV[P\x80a\n5a\n/a\n*_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14\x15a\t\xBBV[a\nDa\rYV[a\nLa\nNV[V[a\n_a\nZ_a\x04\x8EV[a\x12TV[V[a\nia\n<V[V[a\nt\x90a\x05(V[\x90V[a\n\x80\x90a\nkV[\x90V[a\n\x8C\x90a\x05DV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\n\xA2\x82a\x019V[V[\x90` \x82\x82\x03\x12a\n\xBDWa\n\xBA\x91_\x01a\n\x95V[\x90V[a\0\x9CV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\xF0\x81a\n\xE9\x81a\n\xF5\x95a\n\xC2V[\x80\x95a\n\xCBV[a\x08\x13V[\x01\x90V[a\x0B\x1Fa\x0B,\x95\x93\x94\x92\x94a\x0B\x15``\x84\x01\x96_\x85\x01\x90a\x03\xCBV[` \x83\x01\x90a\x03\xCBV[`@\x81\x85\x03\x91\x01Ra\n\xD6V[\x90V[a\x0B7a\0\x92V[=_\x82>=\x90\xFD[\x91` a\x0B`\x92\x94\x93a\x0BY`@\x82\x01\x96_\x83\x01\x90a\x03\xCBV[\x01\x90a\x03\xCBV[V[\x91\x90\x92a\x0Bma\x06sV[Pa\x0B\x80a\x0B{`\x01a\x04\x9AV[a\x11\xB3V[[\x80a\x0B\x9Ca\x0B\x96a\x0B\x91_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0C\x8EWa\x0B\xB2a\x0B\xAD\x82a\nwV[a\n\x83V[` cz9y\xDC\x91\x86\x90a\x0B\xDB\x89\x94a\x0B\xE6\x89\x89\x90a\x0B\xCFa\0\x92V[\x98\x89\x97\x88\x96\x87\x96a\n\x8FV[\x86R`\x04\x86\x01a\n\xF9V[\x03\x91Z\xFA\x80\x15a\x0C\x89Wa\x0C\x02\x91_\x91a\x0C[W[P\x15a\x014V[a\x0C4Wa\x0C\x1Ca\x0C$\x91a\x0C\x17`\x01a\x04\x9AV[a\x11\xEDV[\x91\x90\x15a\x014V[\x15a\x0B\x81WPPPPP[`\x01\x90V[\x83\x90a\x0CWa\x0CAa\0\x92V[\x92\x83\x92c\x0B-\x15/`\xE0\x1B\x84R`\x04\x84\x01a\x0B?V[\x03\x90\xFD[a\x0C|\x91P` =\x81\x11a\x0C\x82W[a\x0Ct\x81\x83a\x081V[\x81\x01\x90a\n\xA4V[_a\x0B\xFBV[P=a\x0CjV[a\x0B/V[PPPPPa\x0C/V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\xB8a\x0C\xBD\x91a\x0C\x9CV[a\x0C\xA1V[\x90V[a\x0C\xCA\x90Ta\x0C\xACV[\x90V[a\x0C\xD5a\x0C\x98V[Pa\x0C\xDF_a\x0C\xC0V[\x90V[a\x0C\xF3\x90a\x0C\xEEa\rYV[a\x0C\xF5V[V[\x80a\r\x10a\r\na\r\x05_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\r Wa\r\x1E\x90a\x12TV[V[a\rJa\r,_a\x04\x8EV[a\r4a\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[a\rW\x90a\x0C\xE2V[V[a\raa\x0C\xCDV[a\rza\rta\roa\x12\xB3V[a\0\xAFV[\x91a\0\xAFV[\x03a\r\x81WV[a\r\xAAa\r\x8Ca\x12\xB3V[a\r\x94a\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[\x90a\r\xB8\x90a\x05PV[_R` R`@_ \x90V[_\x90V[a\r\xD1\x90a\x014V[\x90V[\x90a\r\xDE\x90a\r\xC8V[_R` R`@_ \x90V[a\r\xF3_a\x04\x8EV[\x90V[`\x01\x90V[a\x0E\x03a\x06sV[Pa\x0E+a\x0E&a\x0E\x18`\x01\x84\x01\x85\x90a\r\xAEV[a\x0E a\r\xC4V[\x90a\r\xD4V[a\x0C\xC0V[a\x0EDa\x0E>a\x0E9a\r\xEAV[a\0\xAFV[\x91a\0\xAFV[\x14\x80a\x0E\xA8W[_\x14a\x0E\xA1Wa\x0E\x8Ba\x0E\x85a\x0E\x80a\x0Er`\x01a\x0E\x91\x95\x01a\x0Ela\r\xEAV[\x90a\r\xAEV[a\x0Eza\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[\x92a\0\xAFV[\x91a\0\xAFV[\x14_\x14a\x0E\x9DW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x0E\xD0a\x0E\xCBa\x0E\xBD`\x01\x84\x01\x85\x90a\r\xAEV[a\x0E\xC5a\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[a\x0E\xE9a\x0E\xE3a\x0E\xDEa\r\xEAV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0EKV[a\x0E\xF8_a\x04\x8EV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0F\x1F\x91\x02\x91a\x0F\x19`\x01\x80`\xA0\x1B\x03\x84a\x0E\xFBV[\x92a\x0E\xFBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0FBa\x0F=a\x0FJ\x93a\x05PV[a\x0F)V[\x90\x83Ta\x0E\xFFV[\x90UV[a\x0F`\x91a\x0FZa\x0C\x98V[\x91a\x0F,V[V[\x90V[a\x0Fya\x0Fta\x0F~\x92a\x0FbV[a\x04oV[a\x08\xCFV[\x90V[\x90V[a\x0F\x90a\x0F\x95\x91a\x0C\x9CV[a\x0F\x81V[\x90V[a\x0F\xA2\x90Ta\x0F\x84V[\x90V[a\x0F\xB4a\x0F\xBA\x91\x93\x92\x93a\x08\xCFV[\x92a\x08\xCFV[\x82\x03\x91\x82\x11a\x0F\xC5WV[a\x08\xEEV[_\x1B\x90V[\x90a\x0F\xDB_\x19\x91a\x0F\xCAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xF9a\x0F\xF4a\x0F\xFE\x92a\x08\xCFV[a\x04oV[a\x08\xCFV[\x90V[\x90V[\x90a\x10\x19a\x10\x14a\x10 \x92a\x0F\xE5V[a\x10\x01V[\x82Ta\x0F\xCFV[\x90UV[a\x10,a\x0C\x98V[P\x81a\x10Ga\x10Aa\x10<a\x0E\xEFV[a\0\xAFV[\x91a\0\xAFV[\x14\x80\x15a\x11>W[a\x110W\x80a\x10\xB8a\x11-\x92a\x10\x82a\x10}a\x10o`\x01\x86\x01\x88\x90a\r\xAEV[a\x10wa\r\xC4V[\x90a\r\xD4V[a\x0C\xC0V[a\x10\xA9a\x10\xA4a\x10\x96`\x01\x87\x01\x89\x90a\r\xAEV[a\x10\x9Ea\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[\x90a\x10\xB2a\r\xF6V[\x92a\x12\xC0V[a\x10\xE0_a\x10\xDBa\x10\xCD`\x01\x85\x01\x87\x90a\r\xAEV[a\x10\xD5a\r\xC4V[\x90a\r\xD4V[a\x0FNV[a\x11\x08_a\x11\x03a\x10\xF5`\x01\x85\x01\x87\x90a\r\xAEV[a\x10\xFDa\r\xF6V[\x90a\r\xD4V[a\x0FNV[a\x11'_a\x11\x16`\x01a\x0FeV[\x92\x01\x91a\x11\"\x83a\x0F\x98V[a\x0F\xA5V[\x90a\x10\x04V[\x90V[PPa\x11;_a\x04\x8EV[\x90V[Pa\x11Sa\x11M\x82\x84\x90a\r\xFBV[\x15a\x014V[a\x10OV[\x90a\x11u\x91a\x11ea\x06sV[P\x90a\x11oa\r\xC4V[\x91a\x13\x0BV[\x90V[\x90a\x11\x95\x91a\x11\x85a\x06sV[P\x90a\x11\x8Fa\r\xF6V[\x91a\x13\x0BV[\x90V[_\x90V[_a\x11\xB0\x91a\x11\xA9a\x11\x98V[P\x01a\x0F\x98V[\x90V[a\x11\xE5a\x11\xD7`\x01a\x11\xEA\x93a\x11\xC7a\x0C\x98V[P\x01a\x11\xD1a\r\xEAV[\x90a\r\xAEV[a\x11\xDFa\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[\x90V[\x90a\x12\x13\x91a\x11\xFAa\x06sV[Pa\x12\x03a\x0C\x98V[P\x90a\x12\ra\r\xF6V[\x91a\x13-V[\x91\x90\x91\x90V[\x90a\x12*`\x01\x80`\xA0\x1B\x03\x91a\x0F\xCAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12Ia\x12Da\x12P\x92a\x05PV[a\x0F)V[\x82Ta\x12\x19V[\x90UV[a\x12]_a\x0C\xC0V[a\x12g\x82_a\x124V[\x90a\x12\x9Ba\x12\x95\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05PV[\x91a\x05PV[\x91a\x12\xA4a\0\x92V[\x80a\x12\xAE\x81a\0\xFCV[\x03\x90\xA3V[a\x12\xBBa\x0C\x98V[P3\x90V[\x91\x92a\x12\xFFa\x13\x04\x92`\x01a\x13\t\x96a\x12\xF8\x83a\x12\xF3a\x12\xE3\x85\x8B\x01\x85\x90a\r\xAEV[a\x12\xED\x89\x15a\x014V[\x90a\r\xD4V[a\x124V[\x95\x01a\r\xAEV[a\r\xD4V[a\x124V[V[\x91a\x13*\x92a\x13\x18a\x06sV[P\x91a\x13\"a\r\xEAV[\x90\x91\x92a\x13\xCEV[\x90V[\x91a\x136a\x06sV[Pa\x13?a\x0C\x98V[Pa\x13Ta\x13N\x84\x84\x90a\r\xFBV[\x15a\x014V[_\x14a\x13kWPPP_\x90a\x13h_a\x04\x8EV[\x90V[a\x13~a\x13\x83\x92`\x01a\x13\x88\x95\x01a\r\xAEV[a\r\xD4V[a\x0C\xC0V[\x90\x81a\x13\xA3a\x13\x9Da\x13\x98a\r\xEAV[a\0\xAFV[\x91a\0\xAFV[\x14\x15\x91\x90V[a\x13\xB8a\x13\xBE\x91\x93\x92\x93a\x08\xCFV[\x92a\x08\xCFV[\x82\x01\x80\x92\x11a\x13\xC9WV[a\x08\xEEV[\x91a\x13\xD7a\x06sV[Pa\x13\xECa\x13\xE6\x84\x83\x90a\r\xFBV[\x15a\x014V[\x80a\x14iW[a\x13\xFEWPPPP_\x90V[a\x14d\x93a\x14?\x92a\x145a\x14)a\x14$a\x14\x1D`\x01\x89\x01\x85\x90a\r\xAEV[\x85\x90a\r\xD4V[a\x0C\xC0V[\x91\x86\x90\x85\x90\x85\x92a\x12\xC0V[\x84\x92\x90\x91\x92a\x12\xC0V[a\x14^_a\x14M`\x01a\x0FeV[\x92\x01\x91a\x14Y\x83a\x0F\x98V[a\x13\xA9V[\x90a\x10\x04V[`\x01\x90V[Pa\x14u\x83\x83\x90a\r\xFBV[a\x13\xF2V\xFE\xA2dipfsX\"\x12 +ll\xEC\x1DS\xD4\xDD.w\xE5p\xE6\xE5{\x84\xC5\xCD\x1A\xFB\xE9\xE4\xE4\x0B\xAE\xC2c\x1A\xE6\xE6\x11\x97dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610455565b61001d5f3561008c565b806304f386f414610087578063052eefd1146100825780631b42c7111461007d578063715018a6146100785780637a3979dc146100735780638da5cb5b1461006e5763f2fde38b0361000e57610422565b6103ed565b610392565b6102a0565b61026b565b610189565b610101565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100b8906100a4565b90565b6100c4816100af565b036100cb57565b5f80fd5b905035906100dc826100bb565b565b906020828203126100f7576100f4915f016100cf565b90565b61009c565b5f0190565b3461012f576101196101143660046100de565b610654565b610121610092565b8061012b816100fc565b0390f35b610098565b151590565b61014281610134565b0361014957565b5f80fd5b9050359061015a82610139565b565b91906040838203126101845780610178610181925f86016100cf565b9360200161014d565b90565b61009c565b346101b8576101a261019c36600461015c565b90610802565b6101aa610092565b806101b4816100fc565b0390f35b610098565b5f9103126101c757565b61009c565b5190565b60209181520190565b60200190565b6101e8906100af565b9052565b906101f9816020936101df565b0190565b60200190565b9061022061021a610213846101cc565b80936101d0565b926101d9565b905f5b8181106102305750505090565b90919261024961024360019286516101ec565b946101fd565b9101919091610223565b6102689160208201915f818403910152610203565b90565b3461029b5761027b3660046101bd565b610297610286610960565b61028e610092565b91829182610253565b0390f35b610098565b346102ce576102b03660046101bd565b6102b8610a61565b6102c0610092565b806102ca816100fc565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103195781359167ffffffffffffffff831161031457602001926001830284011161030f57565b6102db565b6102d7565b6102d3565b9160608383031261036b57610335825f85016100cf565b9261034383602083016100cf565b92604082013567ffffffffffffffff81116103665761036292016102df565b9091565b6100a0565b61009c565b61037990610134565b9052565b9190610390905f60208501940190610370565b565b346103c6576103c26103b16103a836600461031e565b92919091610b62565b6103b9610092565b9182918261037d565b0390f35b610098565b6103d4906100af565b9052565b91906103eb905f602085019401906103cb565b565b3461041d576103fd3660046101bd565b610419610408610ccd565b610410610092565b918291826103d8565b0390f35b610098565b346104505761043a6104353660046100de565b610d4e565b610442610092565b8061044c816100fc565b0390f35b610098565b5f80fd5b61046a90610465610d59565b61055c565b565b90565b90565b61048661048161048b9261046c565b61046f565b6100a4565b90565b61049790610472565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6104da601360209261049d565b6104e3816104a6565b0190565b6104fc9060208101905f8183039101526104cd565b90565b1561050657565b61050e610092565b62461bcd60e51b815280610524600482016104e7565b0390fd5b61053c610537610541926100a4565b61046f565b6100a4565b90565b61054d90610528565b90565b61055990610544565b90565b8061057761057161056c5f61048e565b6100af565b916100af565b1461063157610599610593600161058e849161049a565b610dfb565b15610134565b61060e576105cc6105b460016105af849161049a565b611024565b6105c66105c0846100af565b916100af565b146104ff565b6105f67fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610550565b906105ff610092565b80610609816100fc565b0390a2565b610616610092565b633d0f293d60e01b81528061062d600482016100fc565b0390fd5b610639610092565b63e6c4247b60e01b815280610650600482016100fc565b0390fd5b61065d90610459565b565b906106719161066c610d59565b6106f9565b565b5f90565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b6106ab601160209261049d565b6106b481610677565b0190565b6106cd9060208101905f81830391015261069e565b90565b156106d757565b6106df610092565b62461bcd60e51b8152806106f5600482016106b8565b0390fd5b908161071561070f61070a5f61048e565b6100af565b916100af565b146107df5761072e6001610729849161049a565b610dfb565b6107bc5761073a610673565b505f146107a05761075e6107586001610753849161049a565b611178565b5b6106d0565b6107887f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610550565b90610791610092565b8061079b816100fc565b0390a2565b61075e6107b760016107b2849161049a565b611158565b610759565b6107c4610092565b63516c350f60e11b8152806107db600482016100fc565b0390fd5b6107e7610092565b63e6c4247b60e01b8152806107fe600482016100fc565b0390fd5b9061080c9161065f565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061083b90610813565b810190811067ffffffffffffffff82111761085557604052565b61081d565b9061086d610866610092565b9283610831565b565b67ffffffffffffffff81116108875760208091020190565b61081d565b9061089e6108998361086f565b61085a565b918252565b369037565b906108cd6108b58361088c565b926020806108c3869361086f565b92019103906108a3565b565b90565b6108e66108e16108eb9261046c565b61046f565b6108cf565b90565b634e487b7160e01b5f52601160045260245ffd5b61090b906108cf565b5f1981146109195760010190565b6108ee565b634e487b7160e01b5f52603260045260245ffd5b9061093c826101cc565b81101561094d576020809102010190565b61091e565b9061095c906100af565b9052565b61096861080e565b5061097b610976600161049a565b61119c565b610984816108a8565b610996610991600161049a565b6111b3565b61099f5f6108d2565b905b816109b46109ae866108cf565b916108cf565b1080610a19575b15610a10576109ec816109dd6109f4936109d88791879092610932565b610952565b6109e7600161049a565b6111ed565b919015610134565b610a0857610a029091610902565b906109a1565b505090505b90565b50509050610a0d565b5080610a35610a2f610a2a5f61048e565b6100af565b916100af565b14156109bb565b610a44610d59565b610a4c610a4e565b565b610a5f610a5a5f61048e565b611254565b565b610a69610a3c565b565b610a7490610528565b90565b610a8090610a6b565b90565b610a8c90610544565b90565b60e01b90565b90505190610aa282610139565b565b90602082820312610abd57610aba915f01610a95565b90565b61009c565b60209181520190565b90825f939282370152565b9190610af081610ae981610af595610ac2565b8095610acb565b610813565b0190565b610b1f610b2c9593949294610b1560608401965f8501906103cb565b60208301906103cb565b6040818503910152610ad6565b90565b610b37610092565b3d5f823e3d90fd5b916020610b60929493610b5960408201965f8301906103cb565b01906103cb565b565b919092610b6d610673565b50610b80610b7b600161049a565b6111b3565b5b80610b9c610b96610b915f61048e565b6100af565b916100af565b14610c8e57610bb2610bad82610a77565b610a83565b6020637a3979dc918690610bdb8994610be6898990610bcf610092565b98899788968796610a8f565b865260048601610af9565b03915afa8015610c8957610c02915f91610c5b575b5015610134565b610c3457610c1c610c2491610c17600161049a565b6111ed565b919015610134565b15610b815750505050505b600190565b8390610c57610c41610092565b928392630b2d152f60e01b845260048401610b3f565b0390fd5b610c7c915060203d8111610c82575b610c748183610831565b810190610aa4565b5f610bfb565b503d610c6a565b610b2f565b5050505050610c2f565b5f90565b5f1c90565b60018060a01b031690565b610cb8610cbd91610c9c565b610ca1565b90565b610cca9054610cac565b90565b610cd5610c98565b50610cdf5f610cc0565b90565b610cf390610cee610d59565b610cf5565b565b80610d10610d0a610d055f61048e565b6100af565b916100af565b14610d2057610d1e90611254565b565b610d4a610d2c5f61048e565b610d34610092565b918291631e4fbdf760e01b8352600483016103d8565b0390fd5b610d5790610ce2565b565b610d61610ccd565b610d7a610d74610d6f6112b3565b6100af565b916100af565b03610d8157565b610daa610d8c6112b3565b610d94610092565b91829163118cdaa760e01b8352600483016103d8565b0390fd5b90610db890610550565b5f5260205260405f2090565b5f90565b610dd190610134565b90565b90610dde90610dc8565b5f5260205260405f2090565b610df35f61048e565b90565b600190565b610e03610673565b50610e2b610e26610e18600184018590610dae565b610e20610dc4565b90610dd4565b610cc0565b610e44610e3e610e39610dea565b6100af565b916100af565b1480610ea8575b5f14610ea157610e8b610e85610e80610e726001610e919501610e6c610dea565b90610dae565b610e7a610df6565b90610dd4565b610cc0565b926100af565b916100af565b145f14610e9d57600190565b5f90565b5050600190565b50610ed0610ecb610ebd600184018590610dae565b610ec5610df6565b90610dd4565b610cc0565b610ee9610ee3610ede610dea565b6100af565b916100af565b14610e4b565b610ef85f61048e565b90565b1b90565b91906008610f1f910291610f1960018060a01b0384610efb565b92610efb565b9181191691161790565b90565b9190610f42610f3d610f4a93610550565b610f29565b908354610eff565b9055565b610f6091610f5a610c98565b91610f2c565b565b90565b610f79610f74610f7e92610f62565b61046f565b6108cf565b90565b90565b610f90610f9591610c9c565b610f81565b90565b610fa29054610f84565b90565b610fb4610fba919392936108cf565b926108cf565b8203918211610fc557565b6108ee565b5f1b90565b90610fdb5f1991610fca565b9181191691161790565b610ff9610ff4610ffe926108cf565b61046f565b6108cf565b90565b90565b9061101961101461102092610fe5565b611001565b8254610fcf565b9055565b61102c610c98565b508161104761104161103c610eef565b6100af565b916100af565b14801561113e575b61113057806110b861112d9261108261107d61106f600186018890610dae565b611077610dc4565b90610dd4565b610cc0565b6110a96110a4611096600187018990610dae565b61109e610df6565b90610dd4565b610cc0565b906110b2610df6565b926112c0565b6110e05f6110db6110cd600185018790610dae565b6110d5610dc4565b90610dd4565b610f4e565b6111085f6111036110f5600185018790610dae565b6110fd610df6565b90610dd4565b610f4e565b6111275f6111166001610f65565b92019161112283610f98565b610fa5565b90611004565b90565b505061113b5f61048e565b90565b5061115361114d828490610dfb565b15610134565b61104f565b9061117591611165610673565b509061116f610dc4565b9161130b565b90565b9061119591611185610673565b509061118f610df6565b9161130b565b90565b5f90565b5f6111b0916111a9611198565b5001610f98565b90565b6111e56111d760016111ea936111c7610c98565b50016111d1610dea565b90610dae565b6111df610df6565b90610dd4565b610cc0565b90565b90611213916111fa610673565b50611203610c98565b509061120d610df6565b9161132d565b91909190565b9061122a60018060a01b0391610fca565b9181191691161790565b9061124961124461125092610550565b610f29565b8254611219565b9055565b61125d5f610cc0565b611267825f611234565b9061129b6112957f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610550565b91610550565b916112a4610092565b806112ae816100fc565b0390a3565b6112bb610c98565b503390565b91926112ff611304926001611309966112f8836112f36112e3858b018590610dae565b6112ed8915610134565b90610dd4565b611234565b9501610dae565b610dd4565b611234565b565b9161132a92611318610673565b5091611322610dea565b9091926113ce565b90565b91611336610673565b5061133f610c98565b5061135461134e848490610dfb565b15610134565b5f1461136b575050505f906113685f61048e565b90565b61137e6113839260016113889501610dae565b610dd4565b610cc0565b90816113a361139d611398610dea565b6100af565b916100af565b14159190565b6113b86113be919392936108cf565b926108cf565b82018092116113c957565b6108ee565b916113d7610673565b506113ec6113e6848390610dfb565b15610134565b80611469575b6113fe57505050505f90565b6114649361143f9261143561142961142461141d600189018590610dae565b8590610dd4565b610cc0565b918690859085926112c0565b84929091926112c0565b61145e5f61144d6001610f65565b92019161145983610f98565b6113a9565b90611004565b600190565b50611475838390610dfb565b6113f256fea26469706673582212202b6c6cec1d53d4dd2e77e570e6e57b84c5cd1afbe9e4e40baec2631ae6e6119764736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04UV[a\0\x1D_5a\0\x8CV[\x80c\x04\xF3\x86\xF4\x14a\0\x87W\x80c\x05.\xEF\xD1\x14a\0\x82W\x80c\x1BB\xC7\x11\x14a\0}W\x80cqP\x18\xA6\x14a\0xW\x80cz9y\xDC\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\"V[a\x03\xEDV[a\x03\x92V[a\x02\xA0V[a\x02kV[a\x01\x89V[a\x01\x01V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB8\x90a\0\xA4V[\x90V[a\0\xC4\x81a\0\xAFV[\x03a\0\xCBWV[_\x80\xFD[\x90P5\x90a\0\xDC\x82a\0\xBBV[V[\x90` \x82\x82\x03\x12a\0\xF7Wa\0\xF4\x91_\x01a\0\xCFV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01/Wa\x01\x19a\x01\x146`\x04a\0\xDEV[a\x06TV[a\x01!a\0\x92V[\x80a\x01+\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01B\x81a\x014V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[\x91\x90`@\x83\x82\x03\x12a\x01\x84W\x80a\x01xa\x01\x81\x92_\x86\x01a\0\xCFV[\x93` \x01a\x01MV[\x90V[a\0\x9CV[4a\x01\xB8Wa\x01\xA2a\x01\x9C6`\x04a\x01\\V[\x90a\x08\x02V[a\x01\xAAa\0\x92V[\x80a\x01\xB4\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01\xC7WV[a\0\x9CV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\xE8\x90a\0\xAFV[\x90RV[\x90a\x01\xF9\x81` \x93a\x01\xDFV[\x01\x90V[` \x01\x90V[\x90a\x02 a\x02\x1Aa\x02\x13\x84a\x01\xCCV[\x80\x93a\x01\xD0V[\x92a\x01\xD9V[\x90_[\x81\x81\x10a\x020WPPP\x90V[\x90\x91\x92a\x02Ia\x02C`\x01\x92\x86Qa\x01\xECV[\x94a\x01\xFDV[\x91\x01\x91\x90\x91a\x02#V[a\x02h\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\x03V[\x90V[4a\x02\x9BWa\x02{6`\x04a\x01\xBDV[a\x02\x97a\x02\x86a\t`V[a\x02\x8Ea\0\x92V[\x91\x82\x91\x82a\x02SV[\x03\x90\xF3[a\0\x98V[4a\x02\xCEWa\x02\xB06`\x04a\x01\xBDV[a\x02\xB8a\naV[a\x02\xC0a\0\x92V[\x80a\x02\xCA\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x19W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x14W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0FWV[a\x02\xDBV[a\x02\xD7V[a\x02\xD3V[\x91``\x83\x83\x03\x12a\x03kWa\x035\x82_\x85\x01a\0\xCFV[\x92a\x03C\x83` \x83\x01a\0\xCFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03fWa\x03b\x92\x01a\x02\xDFV[\x90\x91V[a\0\xA0V[a\0\x9CV[a\x03y\x90a\x014V[\x90RV[\x91\x90a\x03\x90\x90_` \x85\x01\x94\x01\x90a\x03pV[V[4a\x03\xC6Wa\x03\xC2a\x03\xB1a\x03\xA86`\x04a\x03\x1EV[\x92\x91\x90\x91a\x0BbV[a\x03\xB9a\0\x92V[\x91\x82\x91\x82a\x03}V[\x03\x90\xF3[a\0\x98V[a\x03\xD4\x90a\0\xAFV[\x90RV[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03\xCBV[V[4a\x04\x1DWa\x03\xFD6`\x04a\x01\xBDV[a\x04\x19a\x04\x08a\x0C\xCDV[a\x04\x10a\0\x92V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\0\x98V[4a\x04PWa\x04:a\x0456`\x04a\0\xDEV[a\rNV[a\x04Ba\0\x92V[\x80a\x04L\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x04j\x90a\x04ea\rYV[a\x05\\V[V[\x90V[\x90V[a\x04\x86a\x04\x81a\x04\x8B\x92a\x04lV[a\x04oV[a\0\xA4V[\x90V[a\x04\x97\x90a\x04rV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xDA`\x13` \x92a\x04\x9DV[a\x04\xE3\x81a\x04\xA6V[\x01\x90V[a\x04\xFC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\xCDV[\x90V[\x15a\x05\x06WV[a\x05\x0Ea\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05$`\x04\x82\x01a\x04\xE7V[\x03\x90\xFD[a\x05<a\x057a\x05A\x92a\0\xA4V[a\x04oV[a\0\xA4V[\x90V[a\x05M\x90a\x05(V[\x90V[a\x05Y\x90a\x05DV[\x90V[\x80a\x05wa\x05qa\x05l_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x061Wa\x05\x99a\x05\x93`\x01a\x05\x8E\x84\x91a\x04\x9AV[a\r\xFBV[\x15a\x014V[a\x06\x0EWa\x05\xCCa\x05\xB4`\x01a\x05\xAF\x84\x91a\x04\x9AV[a\x10$V[a\x05\xC6a\x05\xC0\x84a\0\xAFV[\x91a\0\xAFV[\x14a\x04\xFFV[a\x05\xF6\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x05PV[\x90a\x05\xFFa\0\x92V[\x80a\x06\t\x81a\0\xFCV[\x03\x90\xA2V[a\x06\x16a\0\x92V[c=\x0F)=`\xE0\x1B\x81R\x80a\x06-`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x069a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x06P`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x06]\x90a\x04YV[V[\x90a\x06q\x91a\x06la\rYV[a\x06\xF9V[V[_\x90V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xAB`\x11` \x92a\x04\x9DV[a\x06\xB4\x81a\x06wV[\x01\x90V[a\x06\xCD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x9EV[\x90V[\x15a\x06\xD7WV[a\x06\xDFa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xF5`\x04\x82\x01a\x06\xB8V[\x03\x90\xFD[\x90\x81a\x07\x15a\x07\x0Fa\x07\n_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x07\xDFWa\x07.`\x01a\x07)\x84\x91a\x04\x9AV[a\r\xFBV[a\x07\xBCWa\x07:a\x06sV[P_\x14a\x07\xA0Wa\x07^a\x07X`\x01a\x07S\x84\x91a\x04\x9AV[a\x11xV[[a\x06\xD0V[a\x07\x88\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x05PV[\x90a\x07\x91a\0\x92V[\x80a\x07\x9B\x81a\0\xFCV[\x03\x90\xA2V[a\x07^a\x07\xB7`\x01a\x07\xB2\x84\x91a\x04\x9AV[a\x11XV[a\x07YV[a\x07\xC4a\0\x92V[cQl5\x0F`\xE1\x1B\x81R\x80a\x07\xDB`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x07\xE7a\0\x92V[c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07\xFE`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[\x90a\x08\x0C\x91a\x06_V[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08;\x90a\x08\x13V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x08UW`@RV[a\x08\x1DV[\x90a\x08ma\x08fa\0\x92V[\x92\x83a\x081V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x87W` \x80\x91\x02\x01\x90V[a\x08\x1DV[\x90a\x08\x9Ea\x08\x99\x83a\x08oV[a\x08ZV[\x91\x82RV[6\x907V[\x90a\x08\xCDa\x08\xB5\x83a\x08\x8CV[\x92` \x80a\x08\xC3\x86\x93a\x08oV[\x92\x01\x91\x03\x90a\x08\xA3V[V[\x90V[a\x08\xE6a\x08\xE1a\x08\xEB\x92a\x04lV[a\x04oV[a\x08\xCFV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\x0B\x90a\x08\xCFV[_\x19\x81\x14a\t\x19W`\x01\x01\x90V[a\x08\xEEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t<\x82a\x01\xCCV[\x81\x10\x15a\tMW` \x80\x91\x02\x01\x01\x90V[a\t\x1EV[\x90a\t\\\x90a\0\xAFV[\x90RV[a\tha\x08\x0EV[Pa\t{a\tv`\x01a\x04\x9AV[a\x11\x9CV[a\t\x84\x81a\x08\xA8V[a\t\x96a\t\x91`\x01a\x04\x9AV[a\x11\xB3V[a\t\x9F_a\x08\xD2V[\x90[\x81a\t\xB4a\t\xAE\x86a\x08\xCFV[\x91a\x08\xCFV[\x10\x80a\n\x19W[\x15a\n\x10Wa\t\xEC\x81a\t\xDDa\t\xF4\x93a\t\xD8\x87\x91\x87\x90\x92a\t2V[a\tRV[a\t\xE7`\x01a\x04\x9AV[a\x11\xEDV[\x91\x90\x15a\x014V[a\n\x08Wa\n\x02\x90\x91a\t\x02V[\x90a\t\xA1V[PP\x90P[\x90V[PP\x90Pa\n\rV[P\x80a\n5a\n/a\n*_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14\x15a\t\xBBV[a\nDa\rYV[a\nLa\nNV[V[a\n_a\nZ_a\x04\x8EV[a\x12TV[V[a\nia\n<V[V[a\nt\x90a\x05(V[\x90V[a\n\x80\x90a\nkV[\x90V[a\n\x8C\x90a\x05DV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\n\xA2\x82a\x019V[V[\x90` \x82\x82\x03\x12a\n\xBDWa\n\xBA\x91_\x01a\n\x95V[\x90V[a\0\x9CV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\xF0\x81a\n\xE9\x81a\n\xF5\x95a\n\xC2V[\x80\x95a\n\xCBV[a\x08\x13V[\x01\x90V[a\x0B\x1Fa\x0B,\x95\x93\x94\x92\x94a\x0B\x15``\x84\x01\x96_\x85\x01\x90a\x03\xCBV[` \x83\x01\x90a\x03\xCBV[`@\x81\x85\x03\x91\x01Ra\n\xD6V[\x90V[a\x0B7a\0\x92V[=_\x82>=\x90\xFD[\x91` a\x0B`\x92\x94\x93a\x0BY`@\x82\x01\x96_\x83\x01\x90a\x03\xCBV[\x01\x90a\x03\xCBV[V[\x91\x90\x92a\x0Bma\x06sV[Pa\x0B\x80a\x0B{`\x01a\x04\x9AV[a\x11\xB3V[[\x80a\x0B\x9Ca\x0B\x96a\x0B\x91_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0C\x8EWa\x0B\xB2a\x0B\xAD\x82a\nwV[a\n\x83V[` cz9y\xDC\x91\x86\x90a\x0B\xDB\x89\x94a\x0B\xE6\x89\x89\x90a\x0B\xCFa\0\x92V[\x98\x89\x97\x88\x96\x87\x96a\n\x8FV[\x86R`\x04\x86\x01a\n\xF9V[\x03\x91Z\xFA\x80\x15a\x0C\x89Wa\x0C\x02\x91_\x91a\x0C[W[P\x15a\x014V[a\x0C4Wa\x0C\x1Ca\x0C$\x91a\x0C\x17`\x01a\x04\x9AV[a\x11\xEDV[\x91\x90\x15a\x014V[\x15a\x0B\x81WPPPPP[`\x01\x90V[\x83\x90a\x0CWa\x0CAa\0\x92V[\x92\x83\x92c\x0B-\x15/`\xE0\x1B\x84R`\x04\x84\x01a\x0B?V[\x03\x90\xFD[a\x0C|\x91P` =\x81\x11a\x0C\x82W[a\x0Ct\x81\x83a\x081V[\x81\x01\x90a\n\xA4V[_a\x0B\xFBV[P=a\x0CjV[a\x0B/V[PPPPPa\x0C/V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\xB8a\x0C\xBD\x91a\x0C\x9CV[a\x0C\xA1V[\x90V[a\x0C\xCA\x90Ta\x0C\xACV[\x90V[a\x0C\xD5a\x0C\x98V[Pa\x0C\xDF_a\x0C\xC0V[\x90V[a\x0C\xF3\x90a\x0C\xEEa\rYV[a\x0C\xF5V[V[\x80a\r\x10a\r\na\r\x05_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\r Wa\r\x1E\x90a\x12TV[V[a\rJa\r,_a\x04\x8EV[a\r4a\0\x92V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[a\rW\x90a\x0C\xE2V[V[a\raa\x0C\xCDV[a\rza\rta\roa\x12\xB3V[a\0\xAFV[\x91a\0\xAFV[\x03a\r\x81WV[a\r\xAAa\r\x8Ca\x12\xB3V[a\r\x94a\0\x92V[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[\x90a\r\xB8\x90a\x05PV[_R` R`@_ \x90V[_\x90V[a\r\xD1\x90a\x014V[\x90V[\x90a\r\xDE\x90a\r\xC8V[_R` R`@_ \x90V[a\r\xF3_a\x04\x8EV[\x90V[`\x01\x90V[a\x0E\x03a\x06sV[Pa\x0E+a\x0E&a\x0E\x18`\x01\x84\x01\x85\x90a\r\xAEV[a\x0E a\r\xC4V[\x90a\r\xD4V[a\x0C\xC0V[a\x0EDa\x0E>a\x0E9a\r\xEAV[a\0\xAFV[\x91a\0\xAFV[\x14\x80a\x0E\xA8W[_\x14a\x0E\xA1Wa\x0E\x8Ba\x0E\x85a\x0E\x80a\x0Er`\x01a\x0E\x91\x95\x01a\x0Ela\r\xEAV[\x90a\r\xAEV[a\x0Eza\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[\x92a\0\xAFV[\x91a\0\xAFV[\x14_\x14a\x0E\x9DW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x0E\xD0a\x0E\xCBa\x0E\xBD`\x01\x84\x01\x85\x90a\r\xAEV[a\x0E\xC5a\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[a\x0E\xE9a\x0E\xE3a\x0E\xDEa\r\xEAV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0EKV[a\x0E\xF8_a\x04\x8EV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0F\x1F\x91\x02\x91a\x0F\x19`\x01\x80`\xA0\x1B\x03\x84a\x0E\xFBV[\x92a\x0E\xFBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0FBa\x0F=a\x0FJ\x93a\x05PV[a\x0F)V[\x90\x83Ta\x0E\xFFV[\x90UV[a\x0F`\x91a\x0FZa\x0C\x98V[\x91a\x0F,V[V[\x90V[a\x0Fya\x0Fta\x0F~\x92a\x0FbV[a\x04oV[a\x08\xCFV[\x90V[\x90V[a\x0F\x90a\x0F\x95\x91a\x0C\x9CV[a\x0F\x81V[\x90V[a\x0F\xA2\x90Ta\x0F\x84V[\x90V[a\x0F\xB4a\x0F\xBA\x91\x93\x92\x93a\x08\xCFV[\x92a\x08\xCFV[\x82\x03\x91\x82\x11a\x0F\xC5WV[a\x08\xEEV[_\x1B\x90V[\x90a\x0F\xDB_\x19\x91a\x0F\xCAV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xF9a\x0F\xF4a\x0F\xFE\x92a\x08\xCFV[a\x04oV[a\x08\xCFV[\x90V[\x90V[\x90a\x10\x19a\x10\x14a\x10 \x92a\x0F\xE5V[a\x10\x01V[\x82Ta\x0F\xCFV[\x90UV[a\x10,a\x0C\x98V[P\x81a\x10Ga\x10Aa\x10<a\x0E\xEFV[a\0\xAFV[\x91a\0\xAFV[\x14\x80\x15a\x11>W[a\x110W\x80a\x10\xB8a\x11-\x92a\x10\x82a\x10}a\x10o`\x01\x86\x01\x88\x90a\r\xAEV[a\x10wa\r\xC4V[\x90a\r\xD4V[a\x0C\xC0V[a\x10\xA9a\x10\xA4a\x10\x96`\x01\x87\x01\x89\x90a\r\xAEV[a\x10\x9Ea\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[\x90a\x10\xB2a\r\xF6V[\x92a\x12\xC0V[a\x10\xE0_a\x10\xDBa\x10\xCD`\x01\x85\x01\x87\x90a\r\xAEV[a\x10\xD5a\r\xC4V[\x90a\r\xD4V[a\x0FNV[a\x11\x08_a\x11\x03a\x10\xF5`\x01\x85\x01\x87\x90a\r\xAEV[a\x10\xFDa\r\xF6V[\x90a\r\xD4V[a\x0FNV[a\x11'_a\x11\x16`\x01a\x0FeV[\x92\x01\x91a\x11\"\x83a\x0F\x98V[a\x0F\xA5V[\x90a\x10\x04V[\x90V[PPa\x11;_a\x04\x8EV[\x90V[Pa\x11Sa\x11M\x82\x84\x90a\r\xFBV[\x15a\x014V[a\x10OV[\x90a\x11u\x91a\x11ea\x06sV[P\x90a\x11oa\r\xC4V[\x91a\x13\x0BV[\x90V[\x90a\x11\x95\x91a\x11\x85a\x06sV[P\x90a\x11\x8Fa\r\xF6V[\x91a\x13\x0BV[\x90V[_\x90V[_a\x11\xB0\x91a\x11\xA9a\x11\x98V[P\x01a\x0F\x98V[\x90V[a\x11\xE5a\x11\xD7`\x01a\x11\xEA\x93a\x11\xC7a\x0C\x98V[P\x01a\x11\xD1a\r\xEAV[\x90a\r\xAEV[a\x11\xDFa\r\xF6V[\x90a\r\xD4V[a\x0C\xC0V[\x90V[\x90a\x12\x13\x91a\x11\xFAa\x06sV[Pa\x12\x03a\x0C\x98V[P\x90a\x12\ra\r\xF6V[\x91a\x13-V[\x91\x90\x91\x90V[\x90a\x12*`\x01\x80`\xA0\x1B\x03\x91a\x0F\xCAV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12Ia\x12Da\x12P\x92a\x05PV[a\x0F)V[\x82Ta\x12\x19V[\x90UV[a\x12]_a\x0C\xC0V[a\x12g\x82_a\x124V[\x90a\x12\x9Ba\x12\x95\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05PV[\x91a\x05PV[\x91a\x12\xA4a\0\x92V[\x80a\x12\xAE\x81a\0\xFCV[\x03\x90\xA3V[a\x12\xBBa\x0C\x98V[P3\x90V[\x91\x92a\x12\xFFa\x13\x04\x92`\x01a\x13\t\x96a\x12\xF8\x83a\x12\xF3a\x12\xE3\x85\x8B\x01\x85\x90a\r\xAEV[a\x12\xED\x89\x15a\x014V[\x90a\r\xD4V[a\x124V[\x95\x01a\r\xAEV[a\r\xD4V[a\x124V[V[\x91a\x13*\x92a\x13\x18a\x06sV[P\x91a\x13\"a\r\xEAV[\x90\x91\x92a\x13\xCEV[\x90V[\x91a\x136a\x06sV[Pa\x13?a\x0C\x98V[Pa\x13Ta\x13N\x84\x84\x90a\r\xFBV[\x15a\x014V[_\x14a\x13kWPPP_\x90a\x13h_a\x04\x8EV[\x90V[a\x13~a\x13\x83\x92`\x01a\x13\x88\x95\x01a\r\xAEV[a\r\xD4V[a\x0C\xC0V[\x90\x81a\x13\xA3a\x13\x9Da\x13\x98a\r\xEAV[a\0\xAFV[\x91a\0\xAFV[\x14\x15\x91\x90V[a\x13\xB8a\x13\xBE\x91\x93\x92\x93a\x08\xCFV[\x92a\x08\xCFV[\x82\x01\x80\x92\x11a\x13\xC9WV[a\x08\xEEV[\x91a\x13\xD7a\x06sV[Pa\x13\xECa\x13\xE6\x84\x83\x90a\r\xFBV[\x15a\x014V[\x80a\x14iW[a\x13\xFEWPPPP_\x90V[a\x14d\x93a\x14?\x92a\x145a\x14)a\x14$a\x14\x1D`\x01\x89\x01\x85\x90a\r\xAEV[\x85\x90a\r\xD4V[a\x0C\xC0V[\x91\x86\x90\x85\x90\x85\x92a\x12\xC0V[\x84\x92\x90\x91\x92a\x12\xC0V[a\x14^_a\x14M`\x01a\x0FeV[\x92\x01\x91a\x14Y\x83a\x0F\x98V[a\x13\xA9V[\x90a\x10\x04V[`\x01\x90V[Pa\x14u\x83\x83\x90a\r\xFBV[a\x13\xF2V\xFE\xA2dipfsX\"\x12 +ll\xEC\x1DS\xD4\xDD.w\xE5p\xE6\xE5{\x84\xC5\xCD\x1A\xFB\xE9\xE4\xE4\x0B\xAE\xC2c\x1A\xE6\xE6\x11\x97dsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AddressAlreadyExists()` and selector `0xa2d86a1e`.
```solidity
error AddressAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressAlreadyExists {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: AddressAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressAlreadyExists()";
            const SELECTOR: [u8; 4] = [162u8, 216u8, 106u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AddressDoesNotExist()` and selector `0x3d0f293d`.
```solidity
error AddressDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressDoesNotExist {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: AddressDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressDoesNotExist()";
            const SELECTOR: [u8; 4] = [61u8, 15u8, 41u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `CheckFailed(address,address)` and selector `0x0b2d152f`.
```solidity
error CheckFailed(address requireAddress, address proposer);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckFailed {
        #[allow(missing_docs)]
        pub requireAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CheckFailed> for UnderlyingRustTuple<'_> {
            fn from(value: CheckFailed) -> Self {
                (value.requireAddress, value.proposer)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    requireAddress: tuple.0,
                    proposer: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CheckFailed(address,address)";
            const SELECTOR: [u8; 4] = [11u8, 45u8, 21u8, 47u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.requireAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PermissionCheckAdded(address)` and selector `0x62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e7`.
```solidity
event PermissionCheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PermissionCheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PermissionCheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PermissionCheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8,
                16u8,
                28u8,
                204u8,
                193u8,
                134u8,
                77u8,
                52u8,
                146u8,
                41u8,
                0u8,
                112u8,
                244u8,
                219u8,
                241u8,
                104u8,
                121u8,
                222u8,
                120u8,
                97u8,
                172u8,
                181u8,
                220u8,
                184u8,
                24u8,
                11u8,
                85u8,
                210u8,
                237u8,
                124u8,
                215u8,
                231u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PermissionCheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PermissionCheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PermissionCheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PermissionCheckRemoved(address)` and selector `0xb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be`.
```solidity
event PermissionCheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PermissionCheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PermissionCheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PermissionCheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                181u8,
                214u8,
                140u8,
                164u8,
                99u8,
                114u8,
                187u8,
                230u8,
                236u8,
                19u8,
                141u8,
                61u8,
                4u8,
                35u8,
                96u8,
                130u8,
                105u8,
                179u8,
                17u8,
                116u8,
                150u8,
                164u8,
                98u8,
                104u8,
                248u8,
                96u8,
                128u8,
                205u8,
                188u8,
                190u8,
                169u8,
                190u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PermissionCheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PermissionCheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PermissionCheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addPermissionCheck(address,bool)` and selector `0x052eefd1`.
```solidity
function addPermissionCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addPermissionCheck(address,bool)`](addPermissionCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addPermissionCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addPermissionCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addPermissionCheck(address,bool)";
            const SELECTOR: [u8; 4] = [5u8, 46u8, 239u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getAllPermissionChecks()` and selector `0x1b42c711`.
```solidity
function getAllPermissionChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksCall {}
    ///Container type for the return parameters of the [`getAllPermissionChecks()`](getAllPermissionChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllPermissionChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllPermissionChecksReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllPermissionChecks()";
            const SELECTOR: [u8; 4] = [27u8, 66u8, 199u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removePermissionCheck(address)` and selector `0x04f386f4`.
```solidity
function removePermissionCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePermissionCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removePermissionCheck(address)`](removePermissionCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePermissionCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePermissionCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removePermissionCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removePermissionCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePermissionCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removePermissionCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removePermissionCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removePermissionCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removePermissionCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removePermissionCheck(address)";
            const SELECTOR: [u8; 4] = [4u8, 243u8, 134u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireAllModule`](self) function calls.
    pub enum RequireAllModuleCalls {
        #[allow(missing_docs)]
        addPermissionCheck(addPermissionCheckCall),
        #[allow(missing_docs)]
        getAllPermissionChecks(getAllPermissionChecksCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        removePermissionCheck(removePermissionCheckCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
    }
    #[automatically_derived]
    impl RequireAllModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 243u8, 134u8, 244u8],
            [5u8, 46u8, 239u8, 209u8],
            [27u8, 66u8, 199u8, 17u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [141u8, 165u8, 203u8, 91u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAllModuleCalls {
        const NAME: &'static str = "RequireAllModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addPermissionCheck(_) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllPermissionChecks(_) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removePermissionCheck(_) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAllModuleCalls>] = &[
                {
                    fn removePermissionCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::removePermissionCheck)
                    }
                    removePermissionCheck
                },
                {
                    fn addPermissionCheck(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::addPermissionCheck)
                    }
                    addPermissionCheck
                },
                {
                    fn getAllPermissionChecks(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::getAllPermissionChecks)
                    }
                    getAllPermissionChecks
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addPermissionCheck(inner) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllPermissionChecks(inner) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removePermissionCheck(inner) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addPermissionCheck(inner) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllPermissionChecks(inner) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removePermissionCheck(inner) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAllModule`](self) custom errors.
    pub enum RequireAllModuleErrors {
        #[allow(missing_docs)]
        AddressAlreadyExists(AddressAlreadyExists),
        #[allow(missing_docs)]
        AddressDoesNotExist(AddressDoesNotExist),
        #[allow(missing_docs)]
        CheckFailed(CheckFailed),
        #[allow(missing_docs)]
        InvalidAddress(InvalidAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl RequireAllModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 45u8, 21u8, 47u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [61u8, 15u8, 41u8, 61u8],
            [162u8, 216u8, 106u8, 30u8],
            [230u8, 196u8, 36u8, 123u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireAllModuleErrors {
        const NAME: &'static str = "RequireAllModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressAlreadyExists(_) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressDoesNotExist(_) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CheckFailed(_) => {
                    <CheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireAllModuleErrors>] = &[
                {
                    fn CheckFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <CheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::CheckFailed)
                    }
                    CheckFailed
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireAllModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireAllModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CheckFailed(inner) => {
                    <CheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireAllModule`](self) events.
    pub enum RequireAllModuleEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        PermissionCheckAdded(PermissionCheckAdded),
        #[allow(missing_docs)]
        PermissionCheckRemoved(PermissionCheckRemoved),
    }
    #[automatically_derived]
    impl RequireAllModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                98u8,
                16u8,
                28u8,
                204u8,
                193u8,
                134u8,
                77u8,
                52u8,
                146u8,
                41u8,
                0u8,
                112u8,
                244u8,
                219u8,
                241u8,
                104u8,
                121u8,
                222u8,
                120u8,
                97u8,
                172u8,
                181u8,
                220u8,
                184u8,
                24u8,
                11u8,
                85u8,
                210u8,
                237u8,
                124u8,
                215u8,
                231u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                181u8,
                214u8,
                140u8,
                164u8,
                99u8,
                114u8,
                187u8,
                230u8,
                236u8,
                19u8,
                141u8,
                61u8,
                4u8,
                35u8,
                96u8,
                130u8,
                105u8,
                179u8,
                17u8,
                116u8,
                150u8,
                164u8,
                98u8,
                104u8,
                248u8,
                96u8,
                128u8,
                205u8,
                188u8,
                190u8,
                169u8,
                190u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireAllModuleEvents {
        const NAME: &'static str = "RequireAllModuleEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <PermissionCheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PermissionCheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PermissionCheckAdded)
                }
                Some(
                    <PermissionCheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PermissionCheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PermissionCheckRemoved)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireAllModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PermissionCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PermissionCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PermissionCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PermissionCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireAllModule`](self) contract instance.

See the [wrapper's documentation](`RequireAllModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireAllModuleInstance<T, P, N> {
        RequireAllModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireAllModuleInstance<T, P, N>>,
    > {
        RequireAllModuleInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RequireAllModuleInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireAllModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireAllModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireAllModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RequireAllModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireAllModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RequireAllModule`](self) contract instance.

See the [wrapper's documentation](`RequireAllModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireAllModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RequireAllModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireAllModuleInstance<T, P, N> {
            RequireAllModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addPermissionCheck`] function.
        pub fn addPermissionCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, addPermissionCheckCall, N> {
            self.call_builder(
                &addPermissionCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`getAllPermissionChecks`] function.
        pub fn getAllPermissionChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getAllPermissionChecksCall, N> {
            self.call_builder(&getAllPermissionChecksCall {})
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`removePermissionCheck`] function.
        pub fn removePermissionCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removePermissionCheckCall, N> {
            self.call_builder(
                &removePermissionCheckCall {
                    _address,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireAllModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`PermissionCheckAdded`] event.
        pub fn PermissionCheckAdded_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PermissionCheckAdded, N> {
            self.event_filter::<PermissionCheckAdded>()
        }
        ///Creates a new event filter for the [`PermissionCheckRemoved`] event.
        pub fn PermissionCheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PermissionCheckRemoved, N> {
            self.event_filter::<PermissionCheckRemoved>()
        }
    }
}
