/**

Generated by the following Solidity interface...
```solidity
interface WalletPoolWrapperModule {
    error AddressNotAllowed();
    error NotAdmin();
    error ZeroSequencerAddressNotAllowed();

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
    event UserAdded(address indexed user);
    event UserRemoved(address indexed user);
    event WalletPoolWrapperBulkTransactionsSent(address indexed from, address indexed SyndicateSequencingChain, uint256 count);
    event WalletPoolWrapperTransactionSent(address indexed from, address indexed SyndicateSequencingChain);

    constructor(address _admin);

    function addToAllowlist(address user) external;
    function admin() external view returns (address);
    function allowlist(address user) external view returns (bool isAllowed);
    function isAllowed(address proposer, address, bytes memory) external view returns (bool);
    function processBulkTransactions(address _SyndicateSequencingChain, bytes[] memory data) external;
    function processTransactionUncompressed(address _SyndicateSequencingChain, bytes memory data) external;
    function processTransactionRaw(address _SyndicateSequencingChain, bytes memory data) external;
    function removeFromAllowlist(address user) external;
    function transferAdmin(address newAdmin) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addToAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "admin",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "_SyndicateSequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "_SyndicateSequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "_SyndicateSequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeFromAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferAdmin",
    "inputs": [
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AdminTransferred",
    "inputs": [
      {
        "name": "previousAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserRemoved",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletPoolWrapperBulkTransactionsSent",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "SyndicateSequencingChain",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "count",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletPoolWrapperTransactionSent",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "SyndicateSequencingChain",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAdmin",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroSequencerAddressNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod WalletPoolWrapperModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b610fda6102138239610fda90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126111ed8038038061010781610083565b9283398101906100d6565b90565b61011e906101ca565b565b90565b90565b61013a61013561013f92610120565b610123565b61009c565b90565b61014b90610126565b90565b5f0190565b5f1b90565b9061016960018060a01b0391610153565b9181191691161790565b61018761018261018c9261009c565b610123565b61009c565b90565b61019890610173565b90565b6101a49061018f565b90565b90565b906101bf6101ba6101c69261019b565b6101a7565b8254610158565b9055565b806101e56101df6101da5f610142565b6100a7565b916100a7565b146101f6576101f4905f6101aa565b565b5f6315a9bc2760e11b81528061020e6004820161014e565b0390fdfe60806040526004361015610013575b61058e565b61001d5f356100ac565b8063180dee36146100a757806326cc4550146100a25780635da93d7e1461009d5780636ebca5f61461009857806375829def146100935780637a3979dc1461008e578063a7cd52cb14610089578063f851a440146100845763f8e86ece0361000e5761055b565b610526565b610481565b6103b2565b610306565b6102d2565b61029f565b61024d565b610194565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100d8906100c4565b90565b6100e4816100cf565b036100eb57565b5f80fd5b905035906100fc826100db565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101445781359167ffffffffffffffff831161013f57602001926001830284011161013a57565b610106565b610102565b6100fe565b91909160408184031261018a57610162835f83016100ef565b92602082013567ffffffffffffffff811161018557610181920161010a565b9091565b6100c0565b6100bc565b5f0190565b346101c3576101ad6101a7366004610149565b91610839565b6101b56100b2565b806101bf8161018f565b0390f35b6100b8565b909182601f830112156102025781359167ffffffffffffffff83116101fd5760200192602083028401116101f857565b610106565b610102565b6100fe565b91909160408184031261024857610220835f83016100ef565b92602082013567ffffffffffffffff81116102435761023f92016101c8565b9091565b6100c0565b6100bc565b3461027c57610266610260366004610207565b91610b10565b61026e6100b2565b806102788161018f565b0390f35b6100b8565b9060208282031261029a57610297915f016100ef565b90565b6100bc565b346102cd576102b76102b2366004610281565b610c26565b6102bf6100b2565b806102c98161018f565b0390f35b6100b8565b34610301576102eb6102e5366004610149565b91610da2565b6102f36100b2565b806102fd8161018f565b0390f35b6100b8565b346103345761031e610319366004610281565b610ec7565b6103266100b2565b806103308161018f565b0390f35b6100b8565b9160608383031261038657610350825f85016100ef565b9261035e83602083016100ef565b92604082013567ffffffffffffffff81116103815761037d920161010a565b9091565b6100c0565b6100bc565b151590565b6103999061038b565b9052565b91906103b0905f60208501940190610390565b565b346103e6576103e26103d16103c8366004610339565b92919091610ed6565b6103d96100b2565b9182918261039d565b0390f35b6100b8565b90565b6104026103fd610407926100c4565b6103eb565b6100c4565b90565b610413906103ee565b90565b61041f9061040a565b90565b9061042c90610416565b5f5260205260405f2090565b1c90565b60ff1690565b6104529060086104579302610438565b61043c565b90565b906104659154610442565b90565b61047e906104796001915f92610422565b61045a565b90565b346104b1576104ad61049c610497366004610281565b610468565b6104a46100b2565b9182918261039d565b0390f35b6100b8565b5f9103126104c057565b6100bc565b60018060a01b031690565b6104e09060086104e59302610438565b6104c5565b90565b906104f391546104d0565b90565b6105015f5f906104e8565b90565b61050d906100cf565b9052565b9190610524905f60208501940190610504565b565b34610556576105363660046104b6565b6105526105416104f6565b6105496100b2565b91829182610511565b0390f35b6100b8565b346105895761057361056e366004610281565b610f99565b61057b6100b2565b806105858161018f565b0390f35b6100b8565b5f80fd5b5f1c90565b6105a36105a891610592565b61043c565b90565b6105b59054610597565b90565b91906105d76105d16105cc60013390610422565b6105ab565b1561038b565b6105e6576105e49261062d565b565b5f6315a9bc2760e11b8152806105fe6004820161018f565b0390fd5b90565b61061961061461061e92610602565b6103eb565b6100c4565b90565b61062a90610605565b90565b91908261064a61064461063f5f610621565b6100cf565b916100cf565b1461065a576106589261075b565b565b5f6375ffcc2360e01b8152806106726004820161018f565b0390fd5b61067f906103ee565b90565b61068b90610676565b90565b6106979061040a565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906106c69061069e565b810190811067ffffffffffffffff8211176106e057604052565b6106a8565b60e01b90565b5f9103126106f557565b6100bc565b60209181520190565b90825f939282370152565b9190610728816107218161072d956106fa565b8095610703565b61069e565b0190565b90916107489260208301925f81850391015261070e565b90565b6107536100b2565b3d5f823e3d90fd5b919061076e61076984610682565b61068e565b91633514d37b919092803b156108345761079b5f80946107a661078f6100b2565b978896879586946106e5565b845260048401610731565b03925af1801561082f57610803575b5033906107eb6107e57f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610416565b91610416565b916107f46100b2565b806107fe8161018f565b0390a3565b610822905f3d8111610828575b61081a81836106bc565b8101906106eb565b5f6107b5565b503d610810565b61074b565b61069a565b9061084492916105b8565b565b919061086561085f61085a60013390610422565b6105ab565b1561038b565b6108745761087292610890565b565b5f6315a9bc2760e11b81528061088c6004820161018f565b0390fd5b9190826108ad6108a76108a25f610621565b6100cf565b916100cf565b146108bd576108bb92610a25565b565b5f6375ffcc2360e01b8152806108d56004820161018f565b0390fd5b60209181520190565b90565b60209181520190565b9190610908816109018161090d956108e5565b8095610703565b61069e565b0190565b9061091c92916108ee565b90565b5f80fd5b5f80fd5b5f80fd5b903560016020038236030381121561096c57016020813591019167ffffffffffffffff821161096757600182023603831361096257565b610923565b61091f565b610927565b60200190565b9181610982916108d9565b9081610993602083028401946108e2565b92835f925b8484106109a85750505050505090565b90919293949560206109d46109ce83856001950388526109c88b8861092b565b90610911565b98610971565b940194019294939190610998565b90916109f99260208301925f818503910152610977565b90565b5090565b90565b610a0c90610a00565b9052565b9190610a23905f60208501940190610a03565b565b91610a37610a3284610682565b61068e565b90630b83249d838293803b15610b0b57610a645f8094610a6f610a586100b2565b988996879586946106e5565b8452600484016109e2565b03925af1918215610b0657610a8c92610ada575b503393926109fc565b91610ad5610ac3610abd7f586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d93610416565b93610416565b93610acc6100b2565b91829182610a10565b0390a3565b610af9905f3d8111610aff575b610af181836106bc565b8101906106eb565b5f610a83565b503d610ae7565b61074b565b61069a565b90610b1b9291610846565b565b610b29610b2e91610592565b6104c5565b90565b610b3b9054610b1d565b90565b33610b59610b53610b4e5f610b31565b6100cf565b916100cf565b03610b6957610b6790610bcf565b565b5f637bfa4b9f60e01b815280610b816004820161018f565b0390fd5b5f1b90565b90610b9660ff91610b85565b9181191691161790565b610ba99061038b565b90565b90565b90610bc4610bbf610bcb92610ba0565b610bac565b8254610b8a565b9055565b610be45f610bdf60018490610422565b610baf565b610c0e7fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610416565b90610c176100b2565b80610c218161018f565b0390a2565b610c2f90610b3e565b565b9190610c50610c4a610c4560013390610422565b6105ab565b1561038b565b610c5f57610c5d92610c7b565b565b5f6315a9bc2760e11b815280610c776004820161018f565b0390fd5b919082610c98610c92610c8d5f610621565b6100cf565b916100cf565b14610ca857610ca692610cc4565b565b5f6375ffcc2360e01b815280610cc06004820161018f565b0390fd5b9190610cd7610cd284610682565b61068e565b916346e2cc09919092803b15610d9d57610d045f8094610d0f610cf86100b2565b978896879586946106e5565b845260048401610731565b03925af18015610d9857610d6c575b503390610d54610d4e7f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610416565b91610416565b91610d5d6100b2565b80610d678161018f565b0390a3565b610d8b905f3d8111610d91575b610d8381836106bc565b8101906106eb565b5f610d1e565b503d610d79565b61074b565b61069a565b90610dad9291610c31565b565b33610dca610dc4610dbf5f610b31565b6100cf565b916100cf565b03610dda57610dd890610e34565b565b5f637bfa4b9f60e01b815280610df26004820161018f565b0390fd5b90610e0760018060a01b0391610b85565b9181191691161790565b90565b90610e29610e24610e3092610416565b610e11565b8254610df6565b9055565b80610e4f610e49610e445f610621565b6100cf565b916100cf565b14610eab57610e5e815f610e14565b3390610e93610e8d7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610416565b91610416565b91610e9c6100b2565b80610ea68161018f565b0390a3565b5f6315a9bc2760e11b815280610ec36004820161018f565b0390fd5b610ed090610daf565b565b5f90565b9050610ef79250610ef29150610eea610ed2565b506001610422565b6105ab565b90565b33610f15610f0f610f0a5f610b31565b6100cf565b916100cf565b03610f2557610f2390610f41565b565b5f637bfa4b9f60e01b815280610f3d6004820161018f565b0390fd5b610f576001610f5260018490610422565b610baf565b610f817f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610416565b90610f8a6100b2565b80610f948161018f565b0390a2565b610fa290610efa565b56fea26469706673582212203ca18e2e02071a176992c623a180212f95c061b6997f56d034c45f127548859764736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x0F\xDAa\x02\x13\x829a\x0F\xDA\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x11\xED\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01\xCAV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[_\x01\x90V[_\x1B\x90V[\x90a\x01i`\x01\x80`\xA0\x1B\x03\x91a\x01SV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\x87a\x01\x82a\x01\x8C\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x01\x98\x90a\x01sV[\x90V[a\x01\xA4\x90a\x01\x8FV[\x90V[\x90V[\x90a\x01\xBFa\x01\xBAa\x01\xC6\x92a\x01\x9BV[a\x01\xA7V[\x82Ta\x01XV[\x90UV[\x80a\x01\xE5a\x01\xDFa\x01\xDA_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xF6Wa\x01\xF4\x90_a\x01\xAAV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x02\x0E`\x04\x82\x01a\x01NV[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\x8EV[a\0\x1D_5a\0\xACV[\x80c\x18\r\xEE6\x14a\0\xA7W\x80c&\xCCEP\x14a\0\xA2W\x80c]\xA9=~\x14a\0\x9DW\x80cn\xBC\xA5\xF6\x14a\0\x98W\x80cu\x82\x9D\xEF\x14a\0\x93W\x80cz9y\xDC\x14a\0\x8EW\x80c\xA7\xCDR\xCB\x14a\0\x89W\x80c\xF8Q\xA4@\x14a\0\x84Wc\xF8\xE8n\xCE\x03a\0\x0EWa\x05[V[a\x05&V[a\x04\x81V[a\x03\xB2V[a\x03\x06V[a\x02\xD2V[a\x02\x9FV[a\x02MV[a\x01\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD8\x90a\0\xC4V[\x90V[a\0\xE4\x81a\0\xCFV[\x03a\0\xEBWV[_\x80\xFD[\x90P5\x90a\0\xFC\x82a\0\xDBV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01?W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01:WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x01\x8AWa\x01b\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x85Wa\x01\x81\x92\x01a\x01\nV[\x90\x91V[a\0\xC0V[a\0\xBCV[_\x01\x90V[4a\x01\xC3Wa\x01\xADa\x01\xA76`\x04a\x01IV[\x91a\x089V[a\x01\xB5a\0\xB2V[\x80a\x01\xBF\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x02W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xFDW` \x01\x92` \x83\x02\x84\x01\x11a\x01\xF8WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x02HWa\x02 \x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02CWa\x02?\x92\x01a\x01\xC8V[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x02|Wa\x02fa\x02`6`\x04a\x02\x07V[\x91a\x0B\x10V[a\x02na\0\xB2V[\x80a\x02x\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90` \x82\x82\x03\x12a\x02\x9AWa\x02\x97\x91_\x01a\0\xEFV[\x90V[a\0\xBCV[4a\x02\xCDWa\x02\xB7a\x02\xB26`\x04a\x02\x81V[a\x0C&V[a\x02\xBFa\0\xB2V[\x80a\x02\xC9\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x03\x01Wa\x02\xEBa\x02\xE56`\x04a\x01IV[\x91a\r\xA2V[a\x02\xF3a\0\xB2V[\x80a\x02\xFD\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x034Wa\x03\x1Ea\x03\x196`\x04a\x02\x81V[a\x0E\xC7V[a\x03&a\0\xB2V[\x80a\x030\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x91``\x83\x83\x03\x12a\x03\x86Wa\x03P\x82_\x85\x01a\0\xEFV[\x92a\x03^\x83` \x83\x01a\0\xEFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x81Wa\x03}\x92\x01a\x01\nV[\x90\x91V[a\0\xC0V[a\0\xBCV[\x15\x15\x90V[a\x03\x99\x90a\x03\x8BV[\x90RV[\x91\x90a\x03\xB0\x90_` \x85\x01\x94\x01\x90a\x03\x90V[V[4a\x03\xE6Wa\x03\xE2a\x03\xD1a\x03\xC86`\x04a\x039V[\x92\x91\x90\x91a\x0E\xD6V[a\x03\xD9a\0\xB2V[\x91\x82\x91\x82a\x03\x9DV[\x03\x90\xF3[a\0\xB8V[\x90V[a\x04\x02a\x03\xFDa\x04\x07\x92a\0\xC4V[a\x03\xEBV[a\0\xC4V[\x90V[a\x04\x13\x90a\x03\xEEV[\x90V[a\x04\x1F\x90a\x04\nV[\x90V[\x90a\x04,\x90a\x04\x16V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x04R\x90`\x08a\x04W\x93\x02a\x048V[a\x04<V[\x90V[\x90a\x04e\x91Ta\x04BV[\x90V[a\x04~\x90a\x04y`\x01\x91_\x92a\x04\"V[a\x04ZV[\x90V[4a\x04\xB1Wa\x04\xADa\x04\x9Ca\x04\x976`\x04a\x02\x81V[a\x04hV[a\x04\xA4a\0\xB2V[\x91\x82\x91\x82a\x03\x9DV[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x04\xC0WV[a\0\xBCV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xE0\x90`\x08a\x04\xE5\x93\x02a\x048V[a\x04\xC5V[\x90V[\x90a\x04\xF3\x91Ta\x04\xD0V[\x90V[a\x05\x01__\x90a\x04\xE8V[\x90V[a\x05\r\x90a\0\xCFV[\x90RV[\x91\x90a\x05$\x90_` \x85\x01\x94\x01\x90a\x05\x04V[V[4a\x05VWa\x0566`\x04a\x04\xB6V[a\x05Ra\x05Aa\x04\xF6V[a\x05Ia\0\xB2V[\x91\x82\x91\x82a\x05\x11V[\x03\x90\xF3[a\0\xB8V[4a\x05\x89Wa\x05sa\x05n6`\x04a\x02\x81V[a\x0F\x99V[a\x05{a\0\xB2V[\x80a\x05\x85\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x1C\x90V[a\x05\xA3a\x05\xA8\x91a\x05\x92V[a\x04<V[\x90V[a\x05\xB5\x90Ta\x05\x97V[\x90V[\x91\x90a\x05\xD7a\x05\xD1a\x05\xCC`\x013\x90a\x04\"V[a\x05\xABV[\x15a\x03\x8BV[a\x05\xE6Wa\x05\xE4\x92a\x06-V[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x05\xFE`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90V[a\x06\x19a\x06\x14a\x06\x1E\x92a\x06\x02V[a\x03\xEBV[a\0\xC4V[\x90V[a\x06*\x90a\x06\x05V[\x90V[\x91\x90\x82a\x06Ja\x06Da\x06?_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x06ZWa\x06X\x92a\x07[V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x06r`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x06\x7F\x90a\x03\xEEV[\x90V[a\x06\x8B\x90a\x06vV[\x90V[a\x06\x97\x90a\x04\nV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\xC6\x90a\x06\x9EV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@RV[a\x06\xA8V[`\xE0\x1B\x90V[_\x91\x03\x12a\x06\xF5WV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x07(\x81a\x07!\x81a\x07-\x95a\x06\xFAV[\x80\x95a\x07\x03V[a\x06\x9EV[\x01\x90V[\x90\x91a\x07H\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x07\x0EV[\x90V[a\x07Sa\0\xB2V[=_\x82>=\x90\xFD[\x91\x90a\x07na\x07i\x84a\x06\x82V[a\x06\x8EV[\x91c5\x14\xD3{\x91\x90\x92\x80;\x15a\x084Wa\x07\x9B_\x80\x94a\x07\xA6a\x07\x8Fa\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\xE5V[\x84R`\x04\x84\x01a\x071V[\x03\x92Z\xF1\x80\x15a\x08/Wa\x08\x03W[P3\x90a\x07\xEBa\x07\xE5\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x04\x16V[\x91a\x04\x16V[\x91a\x07\xF4a\0\xB2V[\x80a\x07\xFE\x81a\x01\x8FV[\x03\x90\xA3V[a\x08\"\x90_=\x81\x11a\x08(W[a\x08\x1A\x81\x83a\x06\xBCV[\x81\x01\x90a\x06\xEBV[_a\x07\xB5V[P=a\x08\x10V[a\x07KV[a\x06\x9AV[\x90a\x08D\x92\x91a\x05\xB8V[V[\x91\x90a\x08ea\x08_a\x08Z`\x013\x90a\x04\"V[a\x05\xABV[\x15a\x03\x8BV[a\x08tWa\x08r\x92a\x08\x90V[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x08\x8C`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x08\xADa\x08\xA7a\x08\xA2_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x08\xBDWa\x08\xBB\x92a\n%V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x08\xD5`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[` \x91\x81R\x01\x90V[\x90V[` \x91\x81R\x01\x90V[\x91\x90a\t\x08\x81a\t\x01\x81a\t\r\x95a\x08\xE5V[\x80\x95a\x07\x03V[a\x06\x9EV[\x01\x90V[\x90a\t\x1C\x92\x91a\x08\xEEV[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905`\x01` \x03\x826\x03\x03\x81\x12\x15a\tlW\x01` \x815\x91\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\tgW`\x01\x82\x026\x03\x83\x13a\tbWV[a\t#V[a\t\x1FV[a\t'V[` \x01\x90V[\x91\x81a\t\x82\x91a\x08\xD9V[\x90\x81a\t\x93` \x83\x02\x84\x01\x94a\x08\xE2V[\x92\x83_\x92[\x84\x84\x10a\t\xA8WPPPPPP\x90V[\x90\x91\x92\x93\x94\x95` a\t\xD4a\t\xCE\x83\x85`\x01\x95\x03\x88Ra\t\xC8\x8B\x88a\t+V[\x90a\t\x11V[\x98a\tqV[\x94\x01\x94\x01\x92\x94\x93\x91\x90a\t\x98V[\x90\x91a\t\xF9\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\twV[\x90V[P\x90V[\x90V[a\n\x0C\x90a\n\0V[\x90RV[\x91\x90a\n#\x90_` \x85\x01\x94\x01\x90a\n\x03V[V[\x91a\n7a\n2\x84a\x06\x82V[a\x06\x8EV[\x90c\x0B\x83$\x9D\x83\x82\x93\x80;\x15a\x0B\x0BWa\nd_\x80\x94a\noa\nXa\0\xB2V[\x98\x89\x96\x87\x95\x86\x94a\x06\xE5V[\x84R`\x04\x84\x01a\t\xE2V[\x03\x92Z\xF1\x91\x82\x15a\x0B\x06Wa\n\x8C\x92a\n\xDAW[P3\x93\x92a\t\xFCV[\x91a\n\xD5a\n\xC3a\n\xBD\x7FXj\xC7,\xD4z\xC1\x0B\xE2\xC6B(\xBA\xC4\x8F\xEATPh20[\x9A\xB0\xFA\x077N\xD7\x9CW\r\x93a\x04\x16V[\x93a\x04\x16V[\x93a\n\xCCa\0\xB2V[\x91\x82\x91\x82a\n\x10V[\x03\x90\xA3V[a\n\xF9\x90_=\x81\x11a\n\xFFW[a\n\xF1\x81\x83a\x06\xBCV[\x81\x01\x90a\x06\xEBV[_a\n\x83V[P=a\n\xE7V[a\x07KV[a\x06\x9AV[\x90a\x0B\x1B\x92\x91a\x08FV[V[a\x0B)a\x0B.\x91a\x05\x92V[a\x04\xC5V[\x90V[a\x0B;\x90Ta\x0B\x1DV[\x90V[3a\x0BYa\x0BSa\x0BN_a\x0B1V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0BiWa\x0Bg\x90a\x0B\xCFV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0B\x81`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0B\x96`\xFF\x91a\x0B\x85V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xA9\x90a\x03\x8BV[\x90V[\x90V[\x90a\x0B\xC4a\x0B\xBFa\x0B\xCB\x92a\x0B\xA0V[a\x0B\xACV[\x82Ta\x0B\x8AV[\x90UV[a\x0B\xE4_a\x0B\xDF`\x01\x84\x90a\x04\"V[a\x0B\xAFV[a\x0C\x0E\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x04\x16V[\x90a\x0C\x17a\0\xB2V[\x80a\x0C!\x81a\x01\x8FV[\x03\x90\xA2V[a\x0C/\x90a\x0B>V[V[\x91\x90a\x0CPa\x0CJa\x0CE`\x013\x90a\x04\"V[a\x05\xABV[\x15a\x03\x8BV[a\x0C_Wa\x0C]\x92a\x0C{V[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0Cw`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x0C\x98a\x0C\x92a\x0C\x8D_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0C\xA8Wa\x0C\xA6\x92a\x0C\xC4V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0C\xC0`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90a\x0C\xD7a\x0C\xD2\x84a\x06\x82V[a\x06\x8EV[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\r\x9DWa\r\x04_\x80\x94a\r\x0Fa\x0C\xF8a\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\xE5V[\x84R`\x04\x84\x01a\x071V[\x03\x92Z\xF1\x80\x15a\r\x98Wa\rlW[P3\x90a\rTa\rN\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x04\x16V[\x91a\x04\x16V[\x91a\r]a\0\xB2V[\x80a\rg\x81a\x01\x8FV[\x03\x90\xA3V[a\r\x8B\x90_=\x81\x11a\r\x91W[a\r\x83\x81\x83a\x06\xBCV[\x81\x01\x90a\x06\xEBV[_a\r\x1EV[P=a\ryV[a\x07KV[a\x06\x9AV[\x90a\r\xAD\x92\x91a\x0C1V[V[3a\r\xCAa\r\xC4a\r\xBF_a\x0B1V[a\0\xCFV[\x91a\0\xCFV[\x03a\r\xDAWa\r\xD8\x90a\x0E4V[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\r\xF2`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90a\x0E\x07`\x01\x80`\xA0\x1B\x03\x91a\x0B\x85V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0E)a\x0E$a\x0E0\x92a\x04\x16V[a\x0E\x11V[\x82Ta\r\xF6V[\x90UV[\x80a\x0EOa\x0EIa\x0ED_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0E\xABWa\x0E^\x81_a\x0E\x14V[3\x90a\x0E\x93a\x0E\x8D\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x04\x16V[\x91a\x04\x16V[\x91a\x0E\x9Ca\0\xB2V[\x80a\x0E\xA6\x81a\x01\x8FV[\x03\x90\xA3V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0E\xC3`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0E\xD0\x90a\r\xAFV[V[_\x90V[\x90Pa\x0E\xF7\x92Pa\x0E\xF2\x91Pa\x0E\xEAa\x0E\xD2V[P`\x01a\x04\"V[a\x05\xABV[\x90V[3a\x0F\x15a\x0F\x0Fa\x0F\n_a\x0B1V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0F%Wa\x0F#\x90a\x0FAV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0F=`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0FW`\x01a\x0FR`\x01\x84\x90a\x04\"V[a\x0B\xAFV[a\x0F\x81\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x04\x16V[\x90a\x0F\x8Aa\0\xB2V[\x80a\x0F\x94\x81a\x01\x8FV[\x03\x90\xA2V[a\x0F\xA2\x90a\x0E\xFAV[V\xFE\xA2dipfsX\"\x12 <\xA1\x8E.\x02\x07\x1A\x17i\x92\xC6#\xA1\x80!/\x95\xC0a\xB6\x99\x7FV\xD04\xC4_\x12uH\x85\x97dsolcC\0\x08\x1D\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61058e565b61001d5f356100ac565b8063180dee36146100a757806326cc4550146100a25780635da93d7e1461009d5780636ebca5f61461009857806375829def146100935780637a3979dc1461008e578063a7cd52cb14610089578063f851a440146100845763f8e86ece0361000e5761055b565b610526565b610481565b6103b2565b610306565b6102d2565b61029f565b61024d565b610194565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100d8906100c4565b90565b6100e4816100cf565b036100eb57565b5f80fd5b905035906100fc826100db565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101445781359167ffffffffffffffff831161013f57602001926001830284011161013a57565b610106565b610102565b6100fe565b91909160408184031261018a57610162835f83016100ef565b92602082013567ffffffffffffffff811161018557610181920161010a565b9091565b6100c0565b6100bc565b5f0190565b346101c3576101ad6101a7366004610149565b91610839565b6101b56100b2565b806101bf8161018f565b0390f35b6100b8565b909182601f830112156102025781359167ffffffffffffffff83116101fd5760200192602083028401116101f857565b610106565b610102565b6100fe565b91909160408184031261024857610220835f83016100ef565b92602082013567ffffffffffffffff81116102435761023f92016101c8565b9091565b6100c0565b6100bc565b3461027c57610266610260366004610207565b91610b10565b61026e6100b2565b806102788161018f565b0390f35b6100b8565b9060208282031261029a57610297915f016100ef565b90565b6100bc565b346102cd576102b76102b2366004610281565b610c26565b6102bf6100b2565b806102c98161018f565b0390f35b6100b8565b34610301576102eb6102e5366004610149565b91610da2565b6102f36100b2565b806102fd8161018f565b0390f35b6100b8565b346103345761031e610319366004610281565b610ec7565b6103266100b2565b806103308161018f565b0390f35b6100b8565b9160608383031261038657610350825f85016100ef565b9261035e83602083016100ef565b92604082013567ffffffffffffffff81116103815761037d920161010a565b9091565b6100c0565b6100bc565b151590565b6103999061038b565b9052565b91906103b0905f60208501940190610390565b565b346103e6576103e26103d16103c8366004610339565b92919091610ed6565b6103d96100b2565b9182918261039d565b0390f35b6100b8565b90565b6104026103fd610407926100c4565b6103eb565b6100c4565b90565b610413906103ee565b90565b61041f9061040a565b90565b9061042c90610416565b5f5260205260405f2090565b1c90565b60ff1690565b6104529060086104579302610438565b61043c565b90565b906104659154610442565b90565b61047e906104796001915f92610422565b61045a565b90565b346104b1576104ad61049c610497366004610281565b610468565b6104a46100b2565b9182918261039d565b0390f35b6100b8565b5f9103126104c057565b6100bc565b60018060a01b031690565b6104e09060086104e59302610438565b6104c5565b90565b906104f391546104d0565b90565b6105015f5f906104e8565b90565b61050d906100cf565b9052565b9190610524905f60208501940190610504565b565b34610556576105363660046104b6565b6105526105416104f6565b6105496100b2565b91829182610511565b0390f35b6100b8565b346105895761057361056e366004610281565b610f99565b61057b6100b2565b806105858161018f565b0390f35b6100b8565b5f80fd5b5f1c90565b6105a36105a891610592565b61043c565b90565b6105b59054610597565b90565b91906105d76105d16105cc60013390610422565b6105ab565b1561038b565b6105e6576105e49261062d565b565b5f6315a9bc2760e11b8152806105fe6004820161018f565b0390fd5b90565b61061961061461061e92610602565b6103eb565b6100c4565b90565b61062a90610605565b90565b91908261064a61064461063f5f610621565b6100cf565b916100cf565b1461065a576106589261075b565b565b5f6375ffcc2360e01b8152806106726004820161018f565b0390fd5b61067f906103ee565b90565b61068b90610676565b90565b6106979061040a565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906106c69061069e565b810190811067ffffffffffffffff8211176106e057604052565b6106a8565b60e01b90565b5f9103126106f557565b6100bc565b60209181520190565b90825f939282370152565b9190610728816107218161072d956106fa565b8095610703565b61069e565b0190565b90916107489260208301925f81850391015261070e565b90565b6107536100b2565b3d5f823e3d90fd5b919061076e61076984610682565b61068e565b91633514d37b919092803b156108345761079b5f80946107a661078f6100b2565b978896879586946106e5565b845260048401610731565b03925af1801561082f57610803575b5033906107eb6107e57f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610416565b91610416565b916107f46100b2565b806107fe8161018f565b0390a3565b610822905f3d8111610828575b61081a81836106bc565b8101906106eb565b5f6107b5565b503d610810565b61074b565b61069a565b9061084492916105b8565b565b919061086561085f61085a60013390610422565b6105ab565b1561038b565b6108745761087292610890565b565b5f6315a9bc2760e11b81528061088c6004820161018f565b0390fd5b9190826108ad6108a76108a25f610621565b6100cf565b916100cf565b146108bd576108bb92610a25565b565b5f6375ffcc2360e01b8152806108d56004820161018f565b0390fd5b60209181520190565b90565b60209181520190565b9190610908816109018161090d956108e5565b8095610703565b61069e565b0190565b9061091c92916108ee565b90565b5f80fd5b5f80fd5b5f80fd5b903560016020038236030381121561096c57016020813591019167ffffffffffffffff821161096757600182023603831361096257565b610923565b61091f565b610927565b60200190565b9181610982916108d9565b9081610993602083028401946108e2565b92835f925b8484106109a85750505050505090565b90919293949560206109d46109ce83856001950388526109c88b8861092b565b90610911565b98610971565b940194019294939190610998565b90916109f99260208301925f818503910152610977565b90565b5090565b90565b610a0c90610a00565b9052565b9190610a23905f60208501940190610a03565b565b91610a37610a3284610682565b61068e565b90630b83249d838293803b15610b0b57610a645f8094610a6f610a586100b2565b988996879586946106e5565b8452600484016109e2565b03925af1918215610b0657610a8c92610ada575b503393926109fc565b91610ad5610ac3610abd7f586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d93610416565b93610416565b93610acc6100b2565b91829182610a10565b0390a3565b610af9905f3d8111610aff575b610af181836106bc565b8101906106eb565b5f610a83565b503d610ae7565b61074b565b61069a565b90610b1b9291610846565b565b610b29610b2e91610592565b6104c5565b90565b610b3b9054610b1d565b90565b33610b59610b53610b4e5f610b31565b6100cf565b916100cf565b03610b6957610b6790610bcf565b565b5f637bfa4b9f60e01b815280610b816004820161018f565b0390fd5b5f1b90565b90610b9660ff91610b85565b9181191691161790565b610ba99061038b565b90565b90565b90610bc4610bbf610bcb92610ba0565b610bac565b8254610b8a565b9055565b610be45f610bdf60018490610422565b610baf565b610c0e7fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610416565b90610c176100b2565b80610c218161018f565b0390a2565b610c2f90610b3e565b565b9190610c50610c4a610c4560013390610422565b6105ab565b1561038b565b610c5f57610c5d92610c7b565b565b5f6315a9bc2760e11b815280610c776004820161018f565b0390fd5b919082610c98610c92610c8d5f610621565b6100cf565b916100cf565b14610ca857610ca692610cc4565b565b5f6375ffcc2360e01b815280610cc06004820161018f565b0390fd5b9190610cd7610cd284610682565b61068e565b916346e2cc09919092803b15610d9d57610d045f8094610d0f610cf86100b2565b978896879586946106e5565b845260048401610731565b03925af18015610d9857610d6c575b503390610d54610d4e7f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610416565b91610416565b91610d5d6100b2565b80610d678161018f565b0390a3565b610d8b905f3d8111610d91575b610d8381836106bc565b8101906106eb565b5f610d1e565b503d610d79565b61074b565b61069a565b90610dad9291610c31565b565b33610dca610dc4610dbf5f610b31565b6100cf565b916100cf565b03610dda57610dd890610e34565b565b5f637bfa4b9f60e01b815280610df26004820161018f565b0390fd5b90610e0760018060a01b0391610b85565b9181191691161790565b90565b90610e29610e24610e3092610416565b610e11565b8254610df6565b9055565b80610e4f610e49610e445f610621565b6100cf565b916100cf565b14610eab57610e5e815f610e14565b3390610e93610e8d7ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610416565b91610416565b91610e9c6100b2565b80610ea68161018f565b0390a3565b5f6315a9bc2760e11b815280610ec36004820161018f565b0390fd5b610ed090610daf565b565b5f90565b9050610ef79250610ef29150610eea610ed2565b506001610422565b6105ab565b90565b33610f15610f0f610f0a5f610b31565b6100cf565b916100cf565b03610f2557610f2390610f41565b565b5f637bfa4b9f60e01b815280610f3d6004820161018f565b0390fd5b610f576001610f5260018490610422565b610baf565b610f817f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610416565b90610f8a6100b2565b80610f948161018f565b0390a2565b610fa290610efa565b56fea26469706673582212203ca18e2e02071a176992c623a180212f95c061b6997f56d034c45f127548859764736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\x8EV[a\0\x1D_5a\0\xACV[\x80c\x18\r\xEE6\x14a\0\xA7W\x80c&\xCCEP\x14a\0\xA2W\x80c]\xA9=~\x14a\0\x9DW\x80cn\xBC\xA5\xF6\x14a\0\x98W\x80cu\x82\x9D\xEF\x14a\0\x93W\x80cz9y\xDC\x14a\0\x8EW\x80c\xA7\xCDR\xCB\x14a\0\x89W\x80c\xF8Q\xA4@\x14a\0\x84Wc\xF8\xE8n\xCE\x03a\0\x0EWa\x05[V[a\x05&V[a\x04\x81V[a\x03\xB2V[a\x03\x06V[a\x02\xD2V[a\x02\x9FV[a\x02MV[a\x01\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD8\x90a\0\xC4V[\x90V[a\0\xE4\x81a\0\xCFV[\x03a\0\xEBWV[_\x80\xFD[\x90P5\x90a\0\xFC\x82a\0\xDBV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01?W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01:WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x01\x8AWa\x01b\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x85Wa\x01\x81\x92\x01a\x01\nV[\x90\x91V[a\0\xC0V[a\0\xBCV[_\x01\x90V[4a\x01\xC3Wa\x01\xADa\x01\xA76`\x04a\x01IV[\x91a\x089V[a\x01\xB5a\0\xB2V[\x80a\x01\xBF\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x02W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xFDW` \x01\x92` \x83\x02\x84\x01\x11a\x01\xF8WV[a\x01\x06V[a\x01\x02V[a\0\xFEV[\x91\x90\x91`@\x81\x84\x03\x12a\x02HWa\x02 \x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02CWa\x02?\x92\x01a\x01\xC8V[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x02|Wa\x02fa\x02`6`\x04a\x02\x07V[\x91a\x0B\x10V[a\x02na\0\xB2V[\x80a\x02x\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x90` \x82\x82\x03\x12a\x02\x9AWa\x02\x97\x91_\x01a\0\xEFV[\x90V[a\0\xBCV[4a\x02\xCDWa\x02\xB7a\x02\xB26`\x04a\x02\x81V[a\x0C&V[a\x02\xBFa\0\xB2V[\x80a\x02\xC9\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x03\x01Wa\x02\xEBa\x02\xE56`\x04a\x01IV[\x91a\r\xA2V[a\x02\xF3a\0\xB2V[\x80a\x02\xFD\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[4a\x034Wa\x03\x1Ea\x03\x196`\x04a\x02\x81V[a\x0E\xC7V[a\x03&a\0\xB2V[\x80a\x030\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[\x91``\x83\x83\x03\x12a\x03\x86Wa\x03P\x82_\x85\x01a\0\xEFV[\x92a\x03^\x83` \x83\x01a\0\xEFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x81Wa\x03}\x92\x01a\x01\nV[\x90\x91V[a\0\xC0V[a\0\xBCV[\x15\x15\x90V[a\x03\x99\x90a\x03\x8BV[\x90RV[\x91\x90a\x03\xB0\x90_` \x85\x01\x94\x01\x90a\x03\x90V[V[4a\x03\xE6Wa\x03\xE2a\x03\xD1a\x03\xC86`\x04a\x039V[\x92\x91\x90\x91a\x0E\xD6V[a\x03\xD9a\0\xB2V[\x91\x82\x91\x82a\x03\x9DV[\x03\x90\xF3[a\0\xB8V[\x90V[a\x04\x02a\x03\xFDa\x04\x07\x92a\0\xC4V[a\x03\xEBV[a\0\xC4V[\x90V[a\x04\x13\x90a\x03\xEEV[\x90V[a\x04\x1F\x90a\x04\nV[\x90V[\x90a\x04,\x90a\x04\x16V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x04R\x90`\x08a\x04W\x93\x02a\x048V[a\x04<V[\x90V[\x90a\x04e\x91Ta\x04BV[\x90V[a\x04~\x90a\x04y`\x01\x91_\x92a\x04\"V[a\x04ZV[\x90V[4a\x04\xB1Wa\x04\xADa\x04\x9Ca\x04\x976`\x04a\x02\x81V[a\x04hV[a\x04\xA4a\0\xB2V[\x91\x82\x91\x82a\x03\x9DV[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x04\xC0WV[a\0\xBCV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xE0\x90`\x08a\x04\xE5\x93\x02a\x048V[a\x04\xC5V[\x90V[\x90a\x04\xF3\x91Ta\x04\xD0V[\x90V[a\x05\x01__\x90a\x04\xE8V[\x90V[a\x05\r\x90a\0\xCFV[\x90RV[\x91\x90a\x05$\x90_` \x85\x01\x94\x01\x90a\x05\x04V[V[4a\x05VWa\x0566`\x04a\x04\xB6V[a\x05Ra\x05Aa\x04\xF6V[a\x05Ia\0\xB2V[\x91\x82\x91\x82a\x05\x11V[\x03\x90\xF3[a\0\xB8V[4a\x05\x89Wa\x05sa\x05n6`\x04a\x02\x81V[a\x0F\x99V[a\x05{a\0\xB2V[\x80a\x05\x85\x81a\x01\x8FV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x1C\x90V[a\x05\xA3a\x05\xA8\x91a\x05\x92V[a\x04<V[\x90V[a\x05\xB5\x90Ta\x05\x97V[\x90V[\x91\x90a\x05\xD7a\x05\xD1a\x05\xCC`\x013\x90a\x04\"V[a\x05\xABV[\x15a\x03\x8BV[a\x05\xE6Wa\x05\xE4\x92a\x06-V[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x05\xFE`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90V[a\x06\x19a\x06\x14a\x06\x1E\x92a\x06\x02V[a\x03\xEBV[a\0\xC4V[\x90V[a\x06*\x90a\x06\x05V[\x90V[\x91\x90\x82a\x06Ja\x06Da\x06?_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x06ZWa\x06X\x92a\x07[V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x06r`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x06\x7F\x90a\x03\xEEV[\x90V[a\x06\x8B\x90a\x06vV[\x90V[a\x06\x97\x90a\x04\nV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06\xC6\x90a\x06\x9EV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06\xE0W`@RV[a\x06\xA8V[`\xE0\x1B\x90V[_\x91\x03\x12a\x06\xF5WV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x07(\x81a\x07!\x81a\x07-\x95a\x06\xFAV[\x80\x95a\x07\x03V[a\x06\x9EV[\x01\x90V[\x90\x91a\x07H\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x07\x0EV[\x90V[a\x07Sa\0\xB2V[=_\x82>=\x90\xFD[\x91\x90a\x07na\x07i\x84a\x06\x82V[a\x06\x8EV[\x91c5\x14\xD3{\x91\x90\x92\x80;\x15a\x084Wa\x07\x9B_\x80\x94a\x07\xA6a\x07\x8Fa\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\xE5V[\x84R`\x04\x84\x01a\x071V[\x03\x92Z\xF1\x80\x15a\x08/Wa\x08\x03W[P3\x90a\x07\xEBa\x07\xE5\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x04\x16V[\x91a\x04\x16V[\x91a\x07\xF4a\0\xB2V[\x80a\x07\xFE\x81a\x01\x8FV[\x03\x90\xA3V[a\x08\"\x90_=\x81\x11a\x08(W[a\x08\x1A\x81\x83a\x06\xBCV[\x81\x01\x90a\x06\xEBV[_a\x07\xB5V[P=a\x08\x10V[a\x07KV[a\x06\x9AV[\x90a\x08D\x92\x91a\x05\xB8V[V[\x91\x90a\x08ea\x08_a\x08Z`\x013\x90a\x04\"V[a\x05\xABV[\x15a\x03\x8BV[a\x08tWa\x08r\x92a\x08\x90V[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x08\x8C`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x08\xADa\x08\xA7a\x08\xA2_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x08\xBDWa\x08\xBB\x92a\n%V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x08\xD5`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[` \x91\x81R\x01\x90V[\x90V[` \x91\x81R\x01\x90V[\x91\x90a\t\x08\x81a\t\x01\x81a\t\r\x95a\x08\xE5V[\x80\x95a\x07\x03V[a\x06\x9EV[\x01\x90V[\x90a\t\x1C\x92\x91a\x08\xEEV[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905`\x01` \x03\x826\x03\x03\x81\x12\x15a\tlW\x01` \x815\x91\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\tgW`\x01\x82\x026\x03\x83\x13a\tbWV[a\t#V[a\t\x1FV[a\t'V[` \x01\x90V[\x91\x81a\t\x82\x91a\x08\xD9V[\x90\x81a\t\x93` \x83\x02\x84\x01\x94a\x08\xE2V[\x92\x83_\x92[\x84\x84\x10a\t\xA8WPPPPPP\x90V[\x90\x91\x92\x93\x94\x95` a\t\xD4a\t\xCE\x83\x85`\x01\x95\x03\x88Ra\t\xC8\x8B\x88a\t+V[\x90a\t\x11V[\x98a\tqV[\x94\x01\x94\x01\x92\x94\x93\x91\x90a\t\x98V[\x90\x91a\t\xF9\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\twV[\x90V[P\x90V[\x90V[a\n\x0C\x90a\n\0V[\x90RV[\x91\x90a\n#\x90_` \x85\x01\x94\x01\x90a\n\x03V[V[\x91a\n7a\n2\x84a\x06\x82V[a\x06\x8EV[\x90c\x0B\x83$\x9D\x83\x82\x93\x80;\x15a\x0B\x0BWa\nd_\x80\x94a\noa\nXa\0\xB2V[\x98\x89\x96\x87\x95\x86\x94a\x06\xE5V[\x84R`\x04\x84\x01a\t\xE2V[\x03\x92Z\xF1\x91\x82\x15a\x0B\x06Wa\n\x8C\x92a\n\xDAW[P3\x93\x92a\t\xFCV[\x91a\n\xD5a\n\xC3a\n\xBD\x7FXj\xC7,\xD4z\xC1\x0B\xE2\xC6B(\xBA\xC4\x8F\xEATPh20[\x9A\xB0\xFA\x077N\xD7\x9CW\r\x93a\x04\x16V[\x93a\x04\x16V[\x93a\n\xCCa\0\xB2V[\x91\x82\x91\x82a\n\x10V[\x03\x90\xA3V[a\n\xF9\x90_=\x81\x11a\n\xFFW[a\n\xF1\x81\x83a\x06\xBCV[\x81\x01\x90a\x06\xEBV[_a\n\x83V[P=a\n\xE7V[a\x07KV[a\x06\x9AV[\x90a\x0B\x1B\x92\x91a\x08FV[V[a\x0B)a\x0B.\x91a\x05\x92V[a\x04\xC5V[\x90V[a\x0B;\x90Ta\x0B\x1DV[\x90V[3a\x0BYa\x0BSa\x0BN_a\x0B1V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0BiWa\x0Bg\x90a\x0B\xCFV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0B\x81`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[_\x1B\x90V[\x90a\x0B\x96`\xFF\x91a\x0B\x85V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\xA9\x90a\x03\x8BV[\x90V[\x90V[\x90a\x0B\xC4a\x0B\xBFa\x0B\xCB\x92a\x0B\xA0V[a\x0B\xACV[\x82Ta\x0B\x8AV[\x90UV[a\x0B\xE4_a\x0B\xDF`\x01\x84\x90a\x04\"V[a\x0B\xAFV[a\x0C\x0E\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x04\x16V[\x90a\x0C\x17a\0\xB2V[\x80a\x0C!\x81a\x01\x8FV[\x03\x90\xA2V[a\x0C/\x90a\x0B>V[V[\x91\x90a\x0CPa\x0CJa\x0CE`\x013\x90a\x04\"V[a\x05\xABV[\x15a\x03\x8BV[a\x0C_Wa\x0C]\x92a\x0C{V[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0Cw`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90\x82a\x0C\x98a\x0C\x92a\x0C\x8D_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0C\xA8Wa\x0C\xA6\x92a\x0C\xC4V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0C\xC0`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x91\x90a\x0C\xD7a\x0C\xD2\x84a\x06\x82V[a\x06\x8EV[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\r\x9DWa\r\x04_\x80\x94a\r\x0Fa\x0C\xF8a\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x06\xE5V[\x84R`\x04\x84\x01a\x071V[\x03\x92Z\xF1\x80\x15a\r\x98Wa\rlW[P3\x90a\rTa\rN\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x04\x16V[\x91a\x04\x16V[\x91a\r]a\0\xB2V[\x80a\rg\x81a\x01\x8FV[\x03\x90\xA3V[a\r\x8B\x90_=\x81\x11a\r\x91W[a\r\x83\x81\x83a\x06\xBCV[\x81\x01\x90a\x06\xEBV[_a\r\x1EV[P=a\ryV[a\x07KV[a\x06\x9AV[\x90a\r\xAD\x92\x91a\x0C1V[V[3a\r\xCAa\r\xC4a\r\xBF_a\x0B1V[a\0\xCFV[\x91a\0\xCFV[\x03a\r\xDAWa\r\xD8\x90a\x0E4V[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\r\xF2`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[\x90a\x0E\x07`\x01\x80`\xA0\x1B\x03\x91a\x0B\x85V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0E)a\x0E$a\x0E0\x92a\x04\x16V[a\x0E\x11V[\x82Ta\r\xF6V[\x90UV[\x80a\x0EOa\x0EIa\x0ED_a\x06!V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0E\xABWa\x0E^\x81_a\x0E\x14V[3\x90a\x0E\x93a\x0E\x8D\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x04\x16V[\x91a\x04\x16V[\x91a\x0E\x9Ca\0\xB2V[\x80a\x0E\xA6\x81a\x01\x8FV[\x03\x90\xA3V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0E\xC3`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0E\xD0\x90a\r\xAFV[V[_\x90V[\x90Pa\x0E\xF7\x92Pa\x0E\xF2\x91Pa\x0E\xEAa\x0E\xD2V[P`\x01a\x04\"V[a\x05\xABV[\x90V[3a\x0F\x15a\x0F\x0Fa\x0F\n_a\x0B1V[a\0\xCFV[\x91a\0\xCFV[\x03a\x0F%Wa\x0F#\x90a\x0FAV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0F=`\x04\x82\x01a\x01\x8FV[\x03\x90\xFD[a\x0FW`\x01a\x0FR`\x01\x84\x90a\x04\"V[a\x0B\xAFV[a\x0F\x81\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x04\x16V[\x90a\x0F\x8Aa\0\xB2V[\x80a\x0F\x94\x81a\x01\x8FV[\x03\x90\xA2V[a\x0F\xA2\x90a\x0E\xFAV[V\xFE\xA2dipfsX\"\x12 <\xA1\x8E.\x02\x07\x1A\x17i\x92\xC6#\xA1\x80!/\x95\xC0a\xB6\x99\x7FV\xD04\xC4_\x12uH\x85\x97dsolcC\0\x08\x1D\x003",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAdmin()` and selector `0x7bfa4b9f`.
```solidity
error NotAdmin();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAdmin> for UnderlyingRustTuple<'_> {
            fn from(value: NotAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAdmin()";
            const SELECTOR: [u8; 4] = [123u8, 250u8, 75u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroSequencerAddressNotAllowed()` and selector `0x75ffcc23`.
```solidity
error ZeroSequencerAddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroSequencerAddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroSequencerAddressNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: ZeroSequencerAddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ZeroSequencerAddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroSequencerAddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroSequencerAddressNotAllowed()";
            const SELECTOR: [u8; 4] = [117u8, 255u8, 204u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AdminTransferred(address,address)` and selector `0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6`.
```solidity
event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminTransferred {
        #[allow(missing_docs)]
        pub previousAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousAdmin: topics.1,
                    newAdmin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousAdmin.clone(),
                    self.newAdmin.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousAdmin,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAdmin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserAdded(address)` and selector `0x19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f`.
```solidity
event UserAdded(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserRemoved(address)` and selector `0xe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d`.
```solidity
event UserRemoved(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserRemoved {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletPoolWrapperBulkTransactionsSent(address,address,uint256)` and selector `0x586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d`.
```solidity
event WalletPoolWrapperBulkTransactionsSent(address indexed from, address indexed SyndicateSequencingChain, uint256 count);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletPoolWrapperBulkTransactionsSent {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub count: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletPoolWrapperBulkTransactionsSent {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletPoolWrapperBulkTransactionsSent(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                88u8,
                106u8,
                199u8,
                44u8,
                212u8,
                122u8,
                193u8,
                11u8,
                226u8,
                198u8,
                66u8,
                40u8,
                186u8,
                196u8,
                143u8,
                234u8,
                84u8,
                80u8,
                104u8,
                50u8,
                48u8,
                91u8,
                154u8,
                176u8,
                250u8,
                7u8,
                55u8,
                78u8,
                215u8,
                156u8,
                87u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    SyndicateSequencingChain: topics.2,
                    count: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.count),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.SyndicateSequencingChain.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.SyndicateSequencingChain,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for WalletPoolWrapperBulkTransactionsSent {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletPoolWrapperBulkTransactionsSent>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &WalletPoolWrapperBulkTransactionsSent,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletPoolWrapperTransactionSent(address,address)` and selector `0x806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e252`.
```solidity
event WalletPoolWrapperTransactionSent(address indexed from, address indexed SyndicateSequencingChain);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletPoolWrapperTransactionSent {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub SyndicateSequencingChain: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletPoolWrapperTransactionSent {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletPoolWrapperTransactionSent(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                128u8,
                108u8,
                134u8,
                201u8,
                217u8,
                99u8,
                125u8,
                182u8,
                80u8,
                254u8,
                67u8,
                52u8,
                144u8,
                113u8,
                70u8,
                177u8,
                40u8,
                90u8,
                177u8,
                38u8,
                71u8,
                105u8,
                104u8,
                189u8,
                129u8,
                22u8,
                219u8,
                46u8,
                201u8,
                84u8,
                226u8,
                82u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    SyndicateSequencingChain: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.SyndicateSequencingChain.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.SyndicateSequencingChain,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperTransactionSent {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletPoolWrapperTransactionSent>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &WalletPoolWrapperTransactionSent,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addToAllowlist(address)` and selector `0xf8e86ece`.
```solidity
function addToAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addToAllowlist(address)`](addToAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addToAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToAllowlist(address)";
            const SELECTOR: [u8; 4] = [248u8, 232u8, 110u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `admin()` and selector `0xf851a440`.
```solidity
function admin() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminCall {}
    ///Container type for the return parameters of the [`admin()`](adminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminCall> for UnderlyingRustTuple<'_> {
                fn from(value: adminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: adminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for adminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = adminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "admin()";
            const SELECTOR: [u8; 4] = [248u8, 81u8, 164u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowlist(address)` and selector `0xa7cd52cb`.
```solidity
function allowlist(address user) external view returns (bool isAllowed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowlist(address)`](allowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistReturn {
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistReturn) -> Self {
                    (value.isAllowed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { isAllowed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowlistReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowlist(address)";
            const SELECTOR: [u8; 4] = [167u8, 205u8, 82u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address, bytes memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(address,bytes[])` and selector `0x26cc4550`.
```solidity
function processBulkTransactions(address _SyndicateSequencingChain, bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub _SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(address,bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value._SyndicateSequencingChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _SyndicateSequencingChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(address,bytes[])";
            const SELECTOR: [u8; 4] = [38u8, 204u8, 69u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._SyndicateSequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(address,bytes)` and selector `0x6ebca5f6`.
```solidity
function processTransactionUncompressed(address _SyndicateSequencingChain, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub _SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(address,bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value._SyndicateSequencingChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _SyndicateSequencingChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(address,bytes)";
            const SELECTOR: [u8; 4] = [110u8, 188u8, 165u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._SyndicateSequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(address,bytes)` and selector `0x180dee36`.
```solidity
function processTransactionRaw(address _SyndicateSequencingChain, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub _SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(address,bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value._SyndicateSequencingChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _SyndicateSequencingChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(address,bytes)";
            const SELECTOR: [u8; 4] = [24u8, 13u8, 238u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._SyndicateSequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeFromAllowlist(address)` and selector `0x5da93d7e`.
```solidity
function removeFromAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeFromAllowlist(address)`](removeFromAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeFromAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeFromAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeFromAllowlist(address)";
            const SELECTOR: [u8; 4] = [93u8, 169u8, 61u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferAdmin(address)` and selector `0x75829def`.
```solidity
function transferAdmin(address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminCall {
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferAdmin(address)`](transferAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminCall) -> Self {
                    (value.newAdmin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAdmin: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferAdmin(address)";
            const SELECTOR: [u8; 4] = [117u8, 130u8, 157u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`WalletPoolWrapperModule`](self) function calls.
    pub enum WalletPoolWrapperModuleCalls {
        #[allow(missing_docs)]
        addToAllowlist(addToAllowlistCall),
        #[allow(missing_docs)]
        admin(adminCall),
        #[allow(missing_docs)]
        allowlist(allowlistCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        removeFromAllowlist(removeFromAllowlistCall),
        #[allow(missing_docs)]
        transferAdmin(transferAdminCall),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [24u8, 13u8, 238u8, 54u8],
            [38u8, 204u8, 69u8, 80u8],
            [93u8, 169u8, 61u8, 126u8],
            [110u8, 188u8, 165u8, 246u8],
            [117u8, 130u8, 157u8, 239u8],
            [122u8, 57u8, 121u8, 220u8],
            [167u8, 205u8, 82u8, 203u8],
            [248u8, 81u8, 164u8, 64u8],
            [248u8, 232u8, 110u8, 206u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleCalls {
        const NAME: &'static str = "WalletPoolWrapperModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToAllowlist(_) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::admin(_) => <adminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::allowlist(_) => {
                    <allowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeFromAllowlist(_) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferAdmin(_) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls>] = &[
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processTransactionRaw)
                    }
                    processTransactionRaw
                },
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processBulkTransactions)
                    }
                    processBulkTransactions
                },
                {
                    fn removeFromAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::removeFromAllowlist)
                    }
                    removeFromAllowlist
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn transferAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <transferAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::transferAdmin)
                    }
                    transferAdmin
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn allowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <allowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::allowlist)
                    }
                    allowlist
                },
                {
                    fn admin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <adminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::admin)
                    }
                    admin
                },
                {
                    fn addToAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <addToAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::addToAllowlist)
                    }
                    addToAllowlist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) custom errors.
    pub enum WalletPoolWrapperModuleErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        NotAdmin(NotAdmin),
        #[allow(missing_docs)]
        ZeroSequencerAddressNotAllowed(ZeroSequencerAddressNotAllowed),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [117u8, 255u8, 204u8, 35u8],
            [123u8, 250u8, 75u8, 159u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleErrors {
        const NAME: &'static str = "WalletPoolWrapperModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAdmin(_) => <NotAdmin as alloy_sol_types::SolError>::SELECTOR,
                Self::ZeroSequencerAddressNotAllowed(_) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::AddressNotAllowed)
                    }
                    AddressNotAllowed
                },
                {
                    fn ZeroSequencerAddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                WalletPoolWrapperModuleErrors::ZeroSequencerAddressNotAllowed,
                            )
                    }
                    ZeroSequencerAddressNotAllowed
                },
                {
                    fn NotAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <NotAdmin as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::NotAdmin)
                    }
                    NotAdmin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroSequencerAddressNotAllowed(inner) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ZeroSequencerAddressNotAllowed(inner) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) events.
    pub enum WalletPoolWrapperModuleEvents {
        #[allow(missing_docs)]
        AdminTransferred(AdminTransferred),
        #[allow(missing_docs)]
        UserAdded(UserAdded),
        #[allow(missing_docs)]
        UserRemoved(UserRemoved),
        #[allow(missing_docs)]
        WalletPoolWrapperBulkTransactionsSent(WalletPoolWrapperBulkTransactionsSent),
        #[allow(missing_docs)]
        WalletPoolWrapperTransactionSent(WalletPoolWrapperTransactionSent),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ],
            [
                88u8,
                106u8,
                199u8,
                44u8,
                212u8,
                122u8,
                193u8,
                11u8,
                226u8,
                198u8,
                66u8,
                40u8,
                186u8,
                196u8,
                143u8,
                234u8,
                84u8,
                80u8,
                104u8,
                50u8,
                48u8,
                91u8,
                154u8,
                176u8,
                250u8,
                7u8,
                55u8,
                78u8,
                215u8,
                156u8,
                87u8,
                13u8,
            ],
            [
                128u8,
                108u8,
                134u8,
                201u8,
                217u8,
                99u8,
                125u8,
                182u8,
                80u8,
                254u8,
                67u8,
                52u8,
                144u8,
                113u8,
                70u8,
                177u8,
                40u8,
                90u8,
                177u8,
                38u8,
                71u8,
                105u8,
                104u8,
                189u8,
                129u8,
                22u8,
                219u8,
                46u8,
                201u8,
                84u8,
                226u8,
                82u8,
            ],
            [
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ],
            [
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for WalletPoolWrapperModuleEvents {
        const NAME: &'static str = "WalletPoolWrapperModuleEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AdminTransferred)
                }
                Some(<UserAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserAdded)
                }
                Some(<UserRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserRemoved)
                }
                Some(
                    <WalletPoolWrapperBulkTransactionsSent as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletPoolWrapperBulkTransactionsSent as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletPoolWrapperBulkTransactionsSent)
                }
                Some(
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletPoolWrapperTransactionSent)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletPoolWrapperBulkTransactionsSent(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletPoolWrapperBulkTransactionsSent(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> WalletPoolWrapperModuleInstance<T, P, N> {
        WalletPoolWrapperModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>>,
    > {
        WalletPoolWrapperModuleInstance::<T, P, N>::deploy(provider, _admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        WalletPoolWrapperModuleInstance::<T, P, N>::deploy_builder(provider, _admin)
    }
    /**A [`WalletPoolWrapperModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`WalletPoolWrapperModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct WalletPoolWrapperModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for WalletPoolWrapperModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("WalletPoolWrapperModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> WalletPoolWrapperModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> WalletPoolWrapperModuleInstance<T, P, N> {
            WalletPoolWrapperModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToAllowlist`] function.
        pub fn addToAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToAllowlistCall, N> {
            self.call_builder(&addToAllowlistCall { user })
        }
        ///Creates a new call builder for the [`admin`] function.
        pub fn admin(&self) -> alloy_contract::SolCallBuilder<T, &P, adminCall, N> {
            self.call_builder(&adminCall {})
        }
        ///Creates a new call builder for the [`allowlist`] function.
        pub fn allowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowlistCall, N> {
            self.call_builder(&allowlistCall { user })
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer, _1, _2 })
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            _SyndicateSequencingChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    _SyndicateSequencingChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            _SyndicateSequencingChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(
                &processTransactionCall {
                    _SyndicateSequencingChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            _SyndicateSequencingChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(
                &processTransactionRawCall {
                    _SyndicateSequencingChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`removeFromAllowlist`] function.
        pub fn removeFromAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeFromAllowlistCall, N> {
            self.call_builder(&removeFromAllowlistCall { user })
        }
        ///Creates a new call builder for the [`transferAdmin`] function.
        pub fn transferAdmin(
            &self,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferAdminCall, N> {
            self.call_builder(&transferAdminCall { newAdmin })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminTransferred`] event.
        pub fn AdminTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AdminTransferred, N> {
            self.event_filter::<AdminTransferred>()
        }
        ///Creates a new event filter for the [`UserAdded`] event.
        pub fn UserAdded_filter(&self) -> alloy_contract::Event<T, &P, UserAdded, N> {
            self.event_filter::<UserAdded>()
        }
        ///Creates a new event filter for the [`UserRemoved`] event.
        pub fn UserRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UserRemoved, N> {
            self.event_filter::<UserRemoved>()
        }
        ///Creates a new event filter for the [`WalletPoolWrapperBulkTransactionsSent`] event.
        pub fn WalletPoolWrapperBulkTransactionsSent_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletPoolWrapperBulkTransactionsSent, N> {
            self.event_filter::<WalletPoolWrapperBulkTransactionsSent>()
        }
        ///Creates a new event filter for the [`WalletPoolWrapperTransactionSent`] event.
        pub fn WalletPoolWrapperTransactionSent_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletPoolWrapperTransactionSent, N> {
            self.event_filter::<WalletPoolWrapperTransactionSent>()
        }
    }
}
