/**

Generated by the following Solidity interface...
```solidity
interface WalletPoolWrapperModule {
    error AddressNotAllowed();
    error NotAdmin();
    error ZeroSequencerAddressNotAllowed();

    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
    event UserAdded(address indexed user);
    event UserRemoved(address indexed user);
    event WalletPoolWrapperBulkTransactionsSent(address indexed from, address indexed SyndicateSequencingChain, uint256 count);
    event WalletPoolWrapperTransactionSent(address indexed from, address indexed SyndicateSequencingChain);

    constructor(address _admin);

    function addToAllowlist(address user) external;
    function admin() external view returns (address);
    function allowlist(address user) external view returns (bool isAllowed);
    function isAllowed(address proposer, address, bytes memory) external view returns (bool);
    function processTransaction(address _SyndicateSequencingChain, bytes memory data) external;
    function processTransactionUncompressed(address _SyndicateSequencingChain, bytes memory data) external;
    function processTransactionsBulk(address _SyndicateSequencingChain, bytes[] memory data) external;
    function removeFromAllowlist(address user) external;
    function transferAdmin(address newAdmin) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addToAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "admin",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "isAllowed",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "_SyndicateSequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "_SyndicateSequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "_SyndicateSequencingChain",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeFromAllowlist",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferAdmin",
    "inputs": [
      {
        "name": "newAdmin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "AdminTransferred",
    "inputs": [
      {
        "name": "previousAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newAdmin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserAdded",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UserRemoved",
    "inputs": [
      {
        "name": "user",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletPoolWrapperBulkTransactionsSent",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "SyndicateSequencingChain",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "count",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "WalletPoolWrapperTransactionSent",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "SyndicateSequencingChain",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressNotAllowed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotAdmin",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroSequencerAddressNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod WalletPoolWrapperModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b610fa46102138239610fa490f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b6101126111b78038038061010781610083565b9283398101906100d6565b90565b61011e906101ca565b565b90565b90565b61013a61013561013f92610120565b610123565b61009c565b90565b61014b90610126565b90565b5f0190565b5f1b90565b9061016960018060a01b0391610153565b9181191691161790565b61018761018261018c9261009c565b610123565b61009c565b90565b61019890610173565b90565b6101a49061018f565b90565b90565b906101bf6101ba6101c69261019b565b6101a7565b8254610158565b9055565b806101e56101df6101da5f610142565b6100a7565b916100a7565b146101f6576101f4905f6101aa565b565b5f6315a9bc2760e11b81528061020e6004820161014e565b0390fdfe60806040526004361015610013575b61058e565b61001d5f356100ac565b80635da93d7e146100a75780636ebca5f6146100a257806375829def1461009d5780637a3979dc14610098578063a7cd52cb14610093578063af53ad6b1461008e578063c290f91214610089578063f851a440146100845763f8e86ece0361000e5761055b565b610526565b610482565b6103c9565b610394565b6102c5565b610219565b6101e5565b610121565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100d8906100c4565b90565b6100e4816100cf565b036100eb57565b5f80fd5b905035906100fc826100db565b565b9060208282031261011757610114915f016100ef565b90565b6100bc565b5f0190565b3461014f576101396101343660046100fe565b6106a0565b6101416100b2565b8061014b8161011c565b0390f35b6100b8565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561019a5781359167ffffffffffffffff831161019557602001926001830284011161019057565b61015c565b610158565b610154565b9190916040818403126101e0576101b8835f83016100ef565b92602082013567ffffffffffffffff81116101db576101d79201610160565b9091565b6100c0565b6100bc565b34610214576101fe6101f836600461019f565b9161094d565b6102066100b2565b806102108161011c565b0390f35b6100b8565b346102475761023161022c3660046100fe565b610a72565b6102396100b2565b806102438161011c565b0390f35b6100b8565b9160608383031261029957610263825f85016100ef565b9261027183602083016100ef565b92604082013567ffffffffffffffff8111610294576102909201610160565b9091565b6100c0565b6100bc565b151590565b6102ac9061029e565b9052565b91906102c3905f602085019401906102a3565b565b346102f9576102f56102e46102db36600461024c565b92919091610a81565b6102ec6100b2565b918291826102b0565b0390f35b6100b8565b90565b61031561031061031a926100c4565b6102fe565b6100c4565b90565b61032690610301565b90565b6103329061031d565b90565b9061033f90610329565b5f5260205260405f2090565b1c90565b60ff1690565b61036590600861036a930261034b565b61034f565b90565b906103789154610355565b90565b6103919061038c6001915f92610335565b61036d565b90565b346103c4576103c06103af6103aa3660046100fe565b61037b565b6103b76100b2565b918291826102b0565b0390f35b6100b8565b346103f8576103e26103dc36600461019f565b91610c16565b6103ea6100b2565b806103f48161011c565b0390f35b6100b8565b909182601f830112156104375781359167ffffffffffffffff831161043257602001926020830284011161042d57565b61015c565b610158565b610154565b91909160408184031261047d57610455835f83016100ef565b92602082013567ffffffffffffffff81116104785761047492016103fd565b9091565b6100c0565b6100bc565b346104b15761049b61049536600461043c565b91610eed565b6104a36100b2565b806104ad8161011c565b0390f35b6100b8565b5f9103126104c057565b6100bc565b60018060a01b031690565b6104e09060086104e5930261034b565b6104c5565b90565b906104f391546104d0565b90565b6105015f5f906104e8565b90565b61050d906100cf565b9052565b9190610524905f60208501940190610504565b565b34610556576105363660046104b6565b6105526105416104f6565b6105496100b2565b91829182610511565b0390f35b6100b8565b346105895761057361056e3660046100fe565b610f99565b61057b6100b2565b806105858161011c565b0390f35b6100b8565b5f80fd5b5f1c90565b6105a36105a891610592565b6104c5565b90565b6105b59054610597565b90565b336105d36105cd6105c85f6105ab565b6100cf565b916100cf565b036105e3576105e190610649565b565b5f637bfa4b9f60e01b8152806105fb6004820161011c565b0390fd5b5f1b90565b9061061060ff916105ff565b9181191691161790565b6106239061029e565b90565b90565b9061063e6106396106459261061a565b610626565b8254610604565b9055565b61065e5f61065960018490610335565b610629565b6106887fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610329565b906106916100b2565b8061069b8161011c565b0390a2565b6106a9906105b8565b565b6106b76106bc91610592565b61034f565b90565b6106c990546106ab565b90565b91906106eb6106e56106e060013390610335565b6106bf565b1561029e565b6106fa576106f892610741565b565b5f6315a9bc2760e11b8152806107126004820161011c565b0390fd5b90565b61072d61072861073292610716565b6102fe565b6100c4565b90565b61073e90610719565b90565b91908261075e6107586107535f610735565b6100cf565b916100cf565b1461076e5761076c9261086f565b565b5f6375ffcc2360e01b8152806107866004820161011c565b0390fd5b61079390610301565b90565b61079f9061078a565b90565b6107ab9061031d565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906107da906107b2565b810190811067ffffffffffffffff8211176107f457604052565b6107bc565b60e01b90565b5f91031261080957565b6100bc565b60209181520190565b90825f939282370152565b919061083c81610835816108419561080e565b8095610817565b6107b2565b0190565b909161085c9260208301925f818503910152610822565b90565b6108676100b2565b3d5f823e3d90fd5b919061088261087d84610796565b6107a2565b916346e2cc09919092803b15610948576108af5f80946108ba6108a36100b2565b978896879586946107f9565b845260048401610845565b03925af1801561094357610917575b5033906108ff6108f97f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610329565b91610329565b916109086100b2565b806109128161011c565b0390a3565b610936905f3d811161093c575b61092e81836107d0565b8101906107ff565b5f6108c9565b503d610924565b61085f565b6107ae565b9061095892916106cc565b565b3361097561096f61096a5f6105ab565b6100cf565b916100cf565b0361098557610983906109df565b565b5f637bfa4b9f60e01b81528061099d6004820161011c565b0390fd5b906109b260018060a01b03916105ff565b9181191691161790565b90565b906109d46109cf6109db92610329565b6109bc565b82546109a1565b9055565b806109fa6109f46109ef5f610735565b6100cf565b916100cf565b14610a5657610a09815f6109bf565b3390610a3e610a387ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610329565b91610329565b91610a476100b2565b80610a518161011c565b0390a3565b5f6315a9bc2760e11b815280610a6e6004820161011c565b0390fd5b610a7b9061095a565b565b5f90565b9050610aa29250610a9d9150610a95610a7d565b506001610335565b6106bf565b90565b9190610ac4610abe610ab960013390610335565b6106bf565b1561029e565b610ad357610ad192610aef565b565b5f6315a9bc2760e11b815280610aeb6004820161011c565b0390fd5b919082610b0c610b06610b015f610735565b6100cf565b916100cf565b14610b1c57610b1a92610b38565b565b5f6375ffcc2360e01b815280610b346004820161011c565b0390fd5b9190610b4b610b4684610796565b6107a2565b9163804e5123919092803b15610c1157610b785f8094610b83610b6c6100b2565b978896879586946107f9565b845260048401610845565b03925af18015610c0c57610be0575b503390610bc8610bc27f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610329565b91610329565b91610bd16100b2565b80610bdb8161011c565b0390a3565b610bff905f3d8111610c05575b610bf781836107d0565b8101906107ff565b5f610b92565b503d610bed565b61085f565b6107ae565b90610c219291610aa5565b565b9190610c42610c3c610c3760013390610335565b6106bf565b1561029e565b610c5157610c4f92610c6d565b565b5f6315a9bc2760e11b815280610c696004820161011c565b0390fd5b919082610c8a610c84610c7f5f610735565b6100cf565b916100cf565b14610c9a57610c9892610e02565b565b5f6375ffcc2360e01b815280610cb26004820161011c565b0390fd5b60209181520190565b90565b60209181520190565b9190610ce581610cde81610cea95610cc2565b8095610817565b6107b2565b0190565b90610cf99291610ccb565b90565b5f80fd5b5f80fd5b5f80fd5b9035600160200382360303811215610d4957016020813591019167ffffffffffffffff8211610d44576001820236038313610d3f57565b610d00565b610cfc565b610d04565b60200190565b9181610d5f91610cb6565b9081610d7060208302840194610cbf565b92835f925b848410610d855750505050505090565b9091929394956020610db1610dab8385600195038852610da58b88610d08565b90610cee565b98610d4e565b940194019294939190610d75565b9091610dd69260208301925f818503910152610d54565b90565b5090565b90565b610de990610ddd565b9052565b9190610e00905f60208501940190610de0565b565b91610e14610e0f84610796565b6107a2565b9063cdafb978838293803b15610ee857610e415f8094610e4c610e356100b2565b988996879586946107f9565b845260048401610dbf565b03925af1918215610ee357610e6992610eb7575b50339392610dd9565b91610eb2610ea0610e9a7f586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d93610329565b93610329565b93610ea96100b2565b91829182610ded565b0390a3565b610ed6905f3d8111610edc575b610ece81836107d0565b8101906107ff565b5f610e60565b503d610ec4565b61085f565b6107ae565b90610ef89291610c23565b565b33610f15610f0f610f0a5f6105ab565b6100cf565b916100cf565b03610f2557610f2390610f41565b565b5f637bfa4b9f60e01b815280610f3d6004820161011c565b0390fd5b610f576001610f5260018490610335565b610629565b610f817f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610329565b90610f8a6100b2565b80610f948161011c565b0390a2565b610fa290610efa565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x0F\xA4a\x02\x13\x829a\x0F\xA4\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x11\xB7\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01\xCAV[V[\x90V[\x90V[a\x01:a\x015a\x01?\x92a\x01 V[a\x01#V[a\0\x9CV[\x90V[a\x01K\x90a\x01&V[\x90V[_\x01\x90V[_\x1B\x90V[\x90a\x01i`\x01\x80`\xA0\x1B\x03\x91a\x01SV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x01\x87a\x01\x82a\x01\x8C\x92a\0\x9CV[a\x01#V[a\0\x9CV[\x90V[a\x01\x98\x90a\x01sV[\x90V[a\x01\xA4\x90a\x01\x8FV[\x90V[\x90V[\x90a\x01\xBFa\x01\xBAa\x01\xC6\x92a\x01\x9BV[a\x01\xA7V[\x82Ta\x01XV[\x90UV[\x80a\x01\xE5a\x01\xDFa\x01\xDA_a\x01BV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xF6Wa\x01\xF4\x90_a\x01\xAAV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x02\x0E`\x04\x82\x01a\x01NV[\x03\x90\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\x8EV[a\0\x1D_5a\0\xACV[\x80c]\xA9=~\x14a\0\xA7W\x80cn\xBC\xA5\xF6\x14a\0\xA2W\x80cu\x82\x9D\xEF\x14a\0\x9DW\x80cz9y\xDC\x14a\0\x98W\x80c\xA7\xCDR\xCB\x14a\0\x93W\x80c\xAFS\xADk\x14a\0\x8EW\x80c\xC2\x90\xF9\x12\x14a\0\x89W\x80c\xF8Q\xA4@\x14a\0\x84Wc\xF8\xE8n\xCE\x03a\0\x0EWa\x05[V[a\x05&V[a\x04\x82V[a\x03\xC9V[a\x03\x94V[a\x02\xC5V[a\x02\x19V[a\x01\xE5V[a\x01!V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD8\x90a\0\xC4V[\x90V[a\0\xE4\x81a\0\xCFV[\x03a\0\xEBWV[_\x80\xFD[\x90P5\x90a\0\xFC\x82a\0\xDBV[V[\x90` \x82\x82\x03\x12a\x01\x17Wa\x01\x14\x91_\x01a\0\xEFV[\x90V[a\0\xBCV[_\x01\x90V[4a\x01OWa\x019a\x0146`\x04a\0\xFEV[a\x06\xA0V[a\x01Aa\0\xB2V[\x80a\x01K\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x9AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x95W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x90WV[a\x01\\V[a\x01XV[a\x01TV[\x91\x90\x91`@\x81\x84\x03\x12a\x01\xE0Wa\x01\xB8\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xDBWa\x01\xD7\x92\x01a\x01`V[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x02\x14Wa\x01\xFEa\x01\xF86`\x04a\x01\x9FV[\x91a\tMV[a\x02\x06a\0\xB2V[\x80a\x02\x10\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[4a\x02GWa\x021a\x02,6`\x04a\0\xFEV[a\nrV[a\x029a\0\xB2V[\x80a\x02C\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[\x91``\x83\x83\x03\x12a\x02\x99Wa\x02c\x82_\x85\x01a\0\xEFV[\x92a\x02q\x83` \x83\x01a\0\xEFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x94Wa\x02\x90\x92\x01a\x01`V[\x90\x91V[a\0\xC0V[a\0\xBCV[\x15\x15\x90V[a\x02\xAC\x90a\x02\x9EV[\x90RV[\x91\x90a\x02\xC3\x90_` \x85\x01\x94\x01\x90a\x02\xA3V[V[4a\x02\xF9Wa\x02\xF5a\x02\xE4a\x02\xDB6`\x04a\x02LV[\x92\x91\x90\x91a\n\x81V[a\x02\xECa\0\xB2V[\x91\x82\x91\x82a\x02\xB0V[\x03\x90\xF3[a\0\xB8V[\x90V[a\x03\x15a\x03\x10a\x03\x1A\x92a\0\xC4V[a\x02\xFEV[a\0\xC4V[\x90V[a\x03&\x90a\x03\x01V[\x90V[a\x032\x90a\x03\x1DV[\x90V[\x90a\x03?\x90a\x03)V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03e\x90`\x08a\x03j\x93\x02a\x03KV[a\x03OV[\x90V[\x90a\x03x\x91Ta\x03UV[\x90V[a\x03\x91\x90a\x03\x8C`\x01\x91_\x92a\x035V[a\x03mV[\x90V[4a\x03\xC4Wa\x03\xC0a\x03\xAFa\x03\xAA6`\x04a\0\xFEV[a\x03{V[a\x03\xB7a\0\xB2V[\x91\x82\x91\x82a\x02\xB0V[\x03\x90\xF3[a\0\xB8V[4a\x03\xF8Wa\x03\xE2a\x03\xDC6`\x04a\x01\x9FV[\x91a\x0C\x16V[a\x03\xEAa\0\xB2V[\x80a\x03\xF4\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x047W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x042W` \x01\x92` \x83\x02\x84\x01\x11a\x04-WV[a\x01\\V[a\x01XV[a\x01TV[\x91\x90\x91`@\x81\x84\x03\x12a\x04}Wa\x04U\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04xWa\x04t\x92\x01a\x03\xFDV[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x04\xB1Wa\x04\x9Ba\x04\x956`\x04a\x04<V[\x91a\x0E\xEDV[a\x04\xA3a\0\xB2V[\x80a\x04\xAD\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x04\xC0WV[a\0\xBCV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xE0\x90`\x08a\x04\xE5\x93\x02a\x03KV[a\x04\xC5V[\x90V[\x90a\x04\xF3\x91Ta\x04\xD0V[\x90V[a\x05\x01__\x90a\x04\xE8V[\x90V[a\x05\r\x90a\0\xCFV[\x90RV[\x91\x90a\x05$\x90_` \x85\x01\x94\x01\x90a\x05\x04V[V[4a\x05VWa\x0566`\x04a\x04\xB6V[a\x05Ra\x05Aa\x04\xF6V[a\x05Ia\0\xB2V[\x91\x82\x91\x82a\x05\x11V[\x03\x90\xF3[a\0\xB8V[4a\x05\x89Wa\x05sa\x05n6`\x04a\0\xFEV[a\x0F\x99V[a\x05{a\0\xB2V[\x80a\x05\x85\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x1C\x90V[a\x05\xA3a\x05\xA8\x91a\x05\x92V[a\x04\xC5V[\x90V[a\x05\xB5\x90Ta\x05\x97V[\x90V[3a\x05\xD3a\x05\xCDa\x05\xC8_a\x05\xABV[a\0\xCFV[\x91a\0\xCFV[\x03a\x05\xE3Wa\x05\xE1\x90a\x06IV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x05\xFB`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[_\x1B\x90V[\x90a\x06\x10`\xFF\x91a\x05\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x06#\x90a\x02\x9EV[\x90V[\x90V[\x90a\x06>a\x069a\x06E\x92a\x06\x1AV[a\x06&V[\x82Ta\x06\x04V[\x90UV[a\x06^_a\x06Y`\x01\x84\x90a\x035V[a\x06)V[a\x06\x88\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x03)V[\x90a\x06\x91a\0\xB2V[\x80a\x06\x9B\x81a\x01\x1CV[\x03\x90\xA2V[a\x06\xA9\x90a\x05\xB8V[V[a\x06\xB7a\x06\xBC\x91a\x05\x92V[a\x03OV[\x90V[a\x06\xC9\x90Ta\x06\xABV[\x90V[\x91\x90a\x06\xEBa\x06\xE5a\x06\xE0`\x013\x90a\x035V[a\x06\xBFV[\x15a\x02\x9EV[a\x06\xFAWa\x06\xF8\x92a\x07AV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x07\x12`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x90V[a\x07-a\x07(a\x072\x92a\x07\x16V[a\x02\xFEV[a\0\xC4V[\x90V[a\x07>\x90a\x07\x19V[\x90V[\x91\x90\x82a\x07^a\x07Xa\x07S_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\x07nWa\x07l\x92a\x08oV[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x07\x86`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[a\x07\x93\x90a\x03\x01V[\x90V[a\x07\x9F\x90a\x07\x8AV[\x90V[a\x07\xAB\x90a\x03\x1DV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07\xDA\x90a\x07\xB2V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07\xF4W`@RV[a\x07\xBCV[`\xE0\x1B\x90V[_\x91\x03\x12a\x08\tWV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x08<\x81a\x085\x81a\x08A\x95a\x08\x0EV[\x80\x95a\x08\x17V[a\x07\xB2V[\x01\x90V[\x90\x91a\x08\\\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08\"V[\x90V[a\x08ga\0\xB2V[=_\x82>=\x90\xFD[\x91\x90a\x08\x82a\x08}\x84a\x07\x96V[a\x07\xA2V[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\tHWa\x08\xAF_\x80\x94a\x08\xBAa\x08\xA3a\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x07\xF9V[\x84R`\x04\x84\x01a\x08EV[\x03\x92Z\xF1\x80\x15a\tCWa\t\x17W[P3\x90a\x08\xFFa\x08\xF9\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03)V[\x91a\x03)V[\x91a\t\x08a\0\xB2V[\x80a\t\x12\x81a\x01\x1CV[\x03\x90\xA3V[a\t6\x90_=\x81\x11a\t<W[a\t.\x81\x83a\x07\xD0V[\x81\x01\x90a\x07\xFFV[_a\x08\xC9V[P=a\t$V[a\x08_V[a\x07\xAEV[\x90a\tX\x92\x91a\x06\xCCV[V[3a\tua\toa\tj_a\x05\xABV[a\0\xCFV[\x91a\0\xCFV[\x03a\t\x85Wa\t\x83\x90a\t\xDFV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\t\x9D`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x90a\t\xB2`\x01\x80`\xA0\x1B\x03\x91a\x05\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\t\xD4a\t\xCFa\t\xDB\x92a\x03)V[a\t\xBCV[\x82Ta\t\xA1V[\x90UV[\x80a\t\xFAa\t\xF4a\t\xEF_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\nVWa\n\t\x81_a\t\xBFV[3\x90a\n>a\n8\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x03)V[\x91a\x03)V[\x91a\nGa\0\xB2V[\x80a\nQ\x81a\x01\x1CV[\x03\x90\xA3V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\nn`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[a\n{\x90a\tZV[V[_\x90V[\x90Pa\n\xA2\x92Pa\n\x9D\x91Pa\n\x95a\n}V[P`\x01a\x035V[a\x06\xBFV[\x90V[\x91\x90a\n\xC4a\n\xBEa\n\xB9`\x013\x90a\x035V[a\x06\xBFV[\x15a\x02\x9EV[a\n\xD3Wa\n\xD1\x92a\n\xEFV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\n\xEB`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x91\x90\x82a\x0B\x0Ca\x0B\x06a\x0B\x01_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0B\x1CWa\x0B\x1A\x92a\x0B8V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0B4`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x91\x90a\x0BKa\x0BF\x84a\x07\x96V[a\x07\xA2V[\x91c\x80NQ#\x91\x90\x92\x80;\x15a\x0C\x11Wa\x0Bx_\x80\x94a\x0B\x83a\x0Bla\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x07\xF9V[\x84R`\x04\x84\x01a\x08EV[\x03\x92Z\xF1\x80\x15a\x0C\x0CWa\x0B\xE0W[P3\x90a\x0B\xC8a\x0B\xC2\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03)V[\x91a\x03)V[\x91a\x0B\xD1a\0\xB2V[\x80a\x0B\xDB\x81a\x01\x1CV[\x03\x90\xA3V[a\x0B\xFF\x90_=\x81\x11a\x0C\x05W[a\x0B\xF7\x81\x83a\x07\xD0V[\x81\x01\x90a\x07\xFFV[_a\x0B\x92V[P=a\x0B\xEDV[a\x08_V[a\x07\xAEV[\x90a\x0C!\x92\x91a\n\xA5V[V[\x91\x90a\x0CBa\x0C<a\x0C7`\x013\x90a\x035V[a\x06\xBFV[\x15a\x02\x9EV[a\x0CQWa\x0CO\x92a\x0CmV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0Ci`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x91\x90\x82a\x0C\x8Aa\x0C\x84a\x0C\x7F_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0C\x9AWa\x0C\x98\x92a\x0E\x02V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0C\xB2`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[` \x91\x81R\x01\x90V[\x90V[` \x91\x81R\x01\x90V[\x91\x90a\x0C\xE5\x81a\x0C\xDE\x81a\x0C\xEA\x95a\x0C\xC2V[\x80\x95a\x08\x17V[a\x07\xB2V[\x01\x90V[\x90a\x0C\xF9\x92\x91a\x0C\xCBV[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905`\x01` \x03\x826\x03\x03\x81\x12\x15a\rIW\x01` \x815\x91\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\rDW`\x01\x82\x026\x03\x83\x13a\r?WV[a\r\0V[a\x0C\xFCV[a\r\x04V[` \x01\x90V[\x91\x81a\r_\x91a\x0C\xB6V[\x90\x81a\rp` \x83\x02\x84\x01\x94a\x0C\xBFV[\x92\x83_\x92[\x84\x84\x10a\r\x85WPPPPPP\x90V[\x90\x91\x92\x93\x94\x95` a\r\xB1a\r\xAB\x83\x85`\x01\x95\x03\x88Ra\r\xA5\x8B\x88a\r\x08V[\x90a\x0C\xEEV[\x98a\rNV[\x94\x01\x94\x01\x92\x94\x93\x91\x90a\ruV[\x90\x91a\r\xD6\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\rTV[\x90V[P\x90V[\x90V[a\r\xE9\x90a\r\xDDV[\x90RV[\x91\x90a\x0E\0\x90_` \x85\x01\x94\x01\x90a\r\xE0V[V[\x91a\x0E\x14a\x0E\x0F\x84a\x07\x96V[a\x07\xA2V[\x90c\xCD\xAF\xB9x\x83\x82\x93\x80;\x15a\x0E\xE8Wa\x0EA_\x80\x94a\x0ELa\x0E5a\0\xB2V[\x98\x89\x96\x87\x95\x86\x94a\x07\xF9V[\x84R`\x04\x84\x01a\r\xBFV[\x03\x92Z\xF1\x91\x82\x15a\x0E\xE3Wa\x0Ei\x92a\x0E\xB7W[P3\x93\x92a\r\xD9V[\x91a\x0E\xB2a\x0E\xA0a\x0E\x9A\x7FXj\xC7,\xD4z\xC1\x0B\xE2\xC6B(\xBA\xC4\x8F\xEATPh20[\x9A\xB0\xFA\x077N\xD7\x9CW\r\x93a\x03)V[\x93a\x03)V[\x93a\x0E\xA9a\0\xB2V[\x91\x82\x91\x82a\r\xEDV[\x03\x90\xA3V[a\x0E\xD6\x90_=\x81\x11a\x0E\xDCW[a\x0E\xCE\x81\x83a\x07\xD0V[\x81\x01\x90a\x07\xFFV[_a\x0E`V[P=a\x0E\xC4V[a\x08_V[a\x07\xAEV[\x90a\x0E\xF8\x92\x91a\x0C#V[V[3a\x0F\x15a\x0F\x0Fa\x0F\n_a\x05\xABV[a\0\xCFV[\x91a\0\xCFV[\x03a\x0F%Wa\x0F#\x90a\x0FAV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0F=`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[a\x0FW`\x01a\x0FR`\x01\x84\x90a\x035V[a\x06)V[a\x0F\x81\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x03)V[\x90a\x0F\x8Aa\0\xB2V[\x80a\x0F\x94\x81a\x01\x1CV[\x03\x90\xA2V[a\x0F\xA2\x90a\x0E\xFAV[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61058e565b61001d5f356100ac565b80635da93d7e146100a75780636ebca5f6146100a257806375829def1461009d5780637a3979dc14610098578063a7cd52cb14610093578063af53ad6b1461008e578063c290f91214610089578063f851a440146100845763f8e86ece0361000e5761055b565b610526565b610482565b6103c9565b610394565b6102c5565b610219565b6101e5565b610121565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100d8906100c4565b90565b6100e4816100cf565b036100eb57565b5f80fd5b905035906100fc826100db565b565b9060208282031261011757610114915f016100ef565b90565b6100bc565b5f0190565b3461014f576101396101343660046100fe565b6106a0565b6101416100b2565b8061014b8161011c565b0390f35b6100b8565b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561019a5781359167ffffffffffffffff831161019557602001926001830284011161019057565b61015c565b610158565b610154565b9190916040818403126101e0576101b8835f83016100ef565b92602082013567ffffffffffffffff81116101db576101d79201610160565b9091565b6100c0565b6100bc565b34610214576101fe6101f836600461019f565b9161094d565b6102066100b2565b806102108161011c565b0390f35b6100b8565b346102475761023161022c3660046100fe565b610a72565b6102396100b2565b806102438161011c565b0390f35b6100b8565b9160608383031261029957610263825f85016100ef565b9261027183602083016100ef565b92604082013567ffffffffffffffff8111610294576102909201610160565b9091565b6100c0565b6100bc565b151590565b6102ac9061029e565b9052565b91906102c3905f602085019401906102a3565b565b346102f9576102f56102e46102db36600461024c565b92919091610a81565b6102ec6100b2565b918291826102b0565b0390f35b6100b8565b90565b61031561031061031a926100c4565b6102fe565b6100c4565b90565b61032690610301565b90565b6103329061031d565b90565b9061033f90610329565b5f5260205260405f2090565b1c90565b60ff1690565b61036590600861036a930261034b565b61034f565b90565b906103789154610355565b90565b6103919061038c6001915f92610335565b61036d565b90565b346103c4576103c06103af6103aa3660046100fe565b61037b565b6103b76100b2565b918291826102b0565b0390f35b6100b8565b346103f8576103e26103dc36600461019f565b91610c16565b6103ea6100b2565b806103f48161011c565b0390f35b6100b8565b909182601f830112156104375781359167ffffffffffffffff831161043257602001926020830284011161042d57565b61015c565b610158565b610154565b91909160408184031261047d57610455835f83016100ef565b92602082013567ffffffffffffffff81116104785761047492016103fd565b9091565b6100c0565b6100bc565b346104b15761049b61049536600461043c565b91610eed565b6104a36100b2565b806104ad8161011c565b0390f35b6100b8565b5f9103126104c057565b6100bc565b60018060a01b031690565b6104e09060086104e5930261034b565b6104c5565b90565b906104f391546104d0565b90565b6105015f5f906104e8565b90565b61050d906100cf565b9052565b9190610524905f60208501940190610504565b565b34610556576105363660046104b6565b6105526105416104f6565b6105496100b2565b91829182610511565b0390f35b6100b8565b346105895761057361056e3660046100fe565b610f99565b61057b6100b2565b806105858161011c565b0390f35b6100b8565b5f80fd5b5f1c90565b6105a36105a891610592565b6104c5565b90565b6105b59054610597565b90565b336105d36105cd6105c85f6105ab565b6100cf565b916100cf565b036105e3576105e190610649565b565b5f637bfa4b9f60e01b8152806105fb6004820161011c565b0390fd5b5f1b90565b9061061060ff916105ff565b9181191691161790565b6106239061029e565b90565b90565b9061063e6106396106459261061a565b610626565b8254610604565b9055565b61065e5f61065960018490610335565b610629565b6106887fe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d91610329565b906106916100b2565b8061069b8161011c565b0390a2565b6106a9906105b8565b565b6106b76106bc91610592565b61034f565b90565b6106c990546106ab565b90565b91906106eb6106e56106e060013390610335565b6106bf565b1561029e565b6106fa576106f892610741565b565b5f6315a9bc2760e11b8152806107126004820161011c565b0390fd5b90565b61072d61072861073292610716565b6102fe565b6100c4565b90565b61073e90610719565b90565b91908261075e6107586107535f610735565b6100cf565b916100cf565b1461076e5761076c9261086f565b565b5f6375ffcc2360e01b8152806107866004820161011c565b0390fd5b61079390610301565b90565b61079f9061078a565b90565b6107ab9061031d565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906107da906107b2565b810190811067ffffffffffffffff8211176107f457604052565b6107bc565b60e01b90565b5f91031261080957565b6100bc565b60209181520190565b90825f939282370152565b919061083c81610835816108419561080e565b8095610817565b6107b2565b0190565b909161085c9260208301925f818503910152610822565b90565b6108676100b2565b3d5f823e3d90fd5b919061088261087d84610796565b6107a2565b916346e2cc09919092803b15610948576108af5f80946108ba6108a36100b2565b978896879586946107f9565b845260048401610845565b03925af1801561094357610917575b5033906108ff6108f97f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610329565b91610329565b916109086100b2565b806109128161011c565b0390a3565b610936905f3d811161093c575b61092e81836107d0565b8101906107ff565b5f6108c9565b503d610924565b61085f565b6107ae565b9061095892916106cc565b565b3361097561096f61096a5f6105ab565b6100cf565b916100cf565b0361098557610983906109df565b565b5f637bfa4b9f60e01b81528061099d6004820161011c565b0390fd5b906109b260018060a01b03916105ff565b9181191691161790565b90565b906109d46109cf6109db92610329565b6109bc565b82546109a1565b9055565b806109fa6109f46109ef5f610735565b6100cf565b916100cf565b14610a5657610a09815f6109bf565b3390610a3e610a387ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec693610329565b91610329565b91610a476100b2565b80610a518161011c565b0390a3565b5f6315a9bc2760e11b815280610a6e6004820161011c565b0390fd5b610a7b9061095a565b565b5f90565b9050610aa29250610a9d9150610a95610a7d565b506001610335565b6106bf565b90565b9190610ac4610abe610ab960013390610335565b6106bf565b1561029e565b610ad357610ad192610aef565b565b5f6315a9bc2760e11b815280610aeb6004820161011c565b0390fd5b919082610b0c610b06610b015f610735565b6100cf565b916100cf565b14610b1c57610b1a92610b38565b565b5f6375ffcc2360e01b815280610b346004820161011c565b0390fd5b9190610b4b610b4684610796565b6107a2565b9163804e5123919092803b15610c1157610b785f8094610b83610b6c6100b2565b978896879586946107f9565b845260048401610845565b03925af18015610c0c57610be0575b503390610bc8610bc27f806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e25293610329565b91610329565b91610bd16100b2565b80610bdb8161011c565b0390a3565b610bff905f3d8111610c05575b610bf781836107d0565b8101906107ff565b5f610b92565b503d610bed565b61085f565b6107ae565b90610c219291610aa5565b565b9190610c42610c3c610c3760013390610335565b6106bf565b1561029e565b610c5157610c4f92610c6d565b565b5f6315a9bc2760e11b815280610c696004820161011c565b0390fd5b919082610c8a610c84610c7f5f610735565b6100cf565b916100cf565b14610c9a57610c9892610e02565b565b5f6375ffcc2360e01b815280610cb26004820161011c565b0390fd5b60209181520190565b90565b60209181520190565b9190610ce581610cde81610cea95610cc2565b8095610817565b6107b2565b0190565b90610cf99291610ccb565b90565b5f80fd5b5f80fd5b5f80fd5b9035600160200382360303811215610d4957016020813591019167ffffffffffffffff8211610d44576001820236038313610d3f57565b610d00565b610cfc565b610d04565b60200190565b9181610d5f91610cb6565b9081610d7060208302840194610cbf565b92835f925b848410610d855750505050505090565b9091929394956020610db1610dab8385600195038852610da58b88610d08565b90610cee565b98610d4e565b940194019294939190610d75565b9091610dd69260208301925f818503910152610d54565b90565b5090565b90565b610de990610ddd565b9052565b9190610e00905f60208501940190610de0565b565b91610e14610e0f84610796565b6107a2565b9063cdafb978838293803b15610ee857610e415f8094610e4c610e356100b2565b988996879586946107f9565b845260048401610dbf565b03925af1918215610ee357610e6992610eb7575b50339392610dd9565b91610eb2610ea0610e9a7f586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d93610329565b93610329565b93610ea96100b2565b91829182610ded565b0390a3565b610ed6905f3d8111610edc575b610ece81836107d0565b8101906107ff565b5f610e60565b503d610ec4565b61085f565b6107ae565b90610ef89291610c23565b565b33610f15610f0f610f0a5f6105ab565b6100cf565b916100cf565b03610f2557610f2390610f41565b565b5f637bfa4b9f60e01b815280610f3d6004820161011c565b0390fd5b610f576001610f5260018490610335565b610629565b610f817f19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f91610329565b90610f8a6100b2565b80610f948161011c565b0390a2565b610fa290610efa565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\x8EV[a\0\x1D_5a\0\xACV[\x80c]\xA9=~\x14a\0\xA7W\x80cn\xBC\xA5\xF6\x14a\0\xA2W\x80cu\x82\x9D\xEF\x14a\0\x9DW\x80cz9y\xDC\x14a\0\x98W\x80c\xA7\xCDR\xCB\x14a\0\x93W\x80c\xAFS\xADk\x14a\0\x8EW\x80c\xC2\x90\xF9\x12\x14a\0\x89W\x80c\xF8Q\xA4@\x14a\0\x84Wc\xF8\xE8n\xCE\x03a\0\x0EWa\x05[V[a\x05&V[a\x04\x82V[a\x03\xC9V[a\x03\x94V[a\x02\xC5V[a\x02\x19V[a\x01\xE5V[a\x01!V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xD8\x90a\0\xC4V[\x90V[a\0\xE4\x81a\0\xCFV[\x03a\0\xEBWV[_\x80\xFD[\x90P5\x90a\0\xFC\x82a\0\xDBV[V[\x90` \x82\x82\x03\x12a\x01\x17Wa\x01\x14\x91_\x01a\0\xEFV[\x90V[a\0\xBCV[_\x01\x90V[4a\x01OWa\x019a\x0146`\x04a\0\xFEV[a\x06\xA0V[a\x01Aa\0\xB2V[\x80a\x01K\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x9AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x95W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x90WV[a\x01\\V[a\x01XV[a\x01TV[\x91\x90\x91`@\x81\x84\x03\x12a\x01\xE0Wa\x01\xB8\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xDBWa\x01\xD7\x92\x01a\x01`V[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x02\x14Wa\x01\xFEa\x01\xF86`\x04a\x01\x9FV[\x91a\tMV[a\x02\x06a\0\xB2V[\x80a\x02\x10\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[4a\x02GWa\x021a\x02,6`\x04a\0\xFEV[a\nrV[a\x029a\0\xB2V[\x80a\x02C\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[\x91``\x83\x83\x03\x12a\x02\x99Wa\x02c\x82_\x85\x01a\0\xEFV[\x92a\x02q\x83` \x83\x01a\0\xEFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x94Wa\x02\x90\x92\x01a\x01`V[\x90\x91V[a\0\xC0V[a\0\xBCV[\x15\x15\x90V[a\x02\xAC\x90a\x02\x9EV[\x90RV[\x91\x90a\x02\xC3\x90_` \x85\x01\x94\x01\x90a\x02\xA3V[V[4a\x02\xF9Wa\x02\xF5a\x02\xE4a\x02\xDB6`\x04a\x02LV[\x92\x91\x90\x91a\n\x81V[a\x02\xECa\0\xB2V[\x91\x82\x91\x82a\x02\xB0V[\x03\x90\xF3[a\0\xB8V[\x90V[a\x03\x15a\x03\x10a\x03\x1A\x92a\0\xC4V[a\x02\xFEV[a\0\xC4V[\x90V[a\x03&\x90a\x03\x01V[\x90V[a\x032\x90a\x03\x1DV[\x90V[\x90a\x03?\x90a\x03)V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03e\x90`\x08a\x03j\x93\x02a\x03KV[a\x03OV[\x90V[\x90a\x03x\x91Ta\x03UV[\x90V[a\x03\x91\x90a\x03\x8C`\x01\x91_\x92a\x035V[a\x03mV[\x90V[4a\x03\xC4Wa\x03\xC0a\x03\xAFa\x03\xAA6`\x04a\0\xFEV[a\x03{V[a\x03\xB7a\0\xB2V[\x91\x82\x91\x82a\x02\xB0V[\x03\x90\xF3[a\0\xB8V[4a\x03\xF8Wa\x03\xE2a\x03\xDC6`\x04a\x01\x9FV[\x91a\x0C\x16V[a\x03\xEAa\0\xB2V[\x80a\x03\xF4\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x047W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x042W` \x01\x92` \x83\x02\x84\x01\x11a\x04-WV[a\x01\\V[a\x01XV[a\x01TV[\x91\x90\x91`@\x81\x84\x03\x12a\x04}Wa\x04U\x83_\x83\x01a\0\xEFV[\x92` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04xWa\x04t\x92\x01a\x03\xFDV[\x90\x91V[a\0\xC0V[a\0\xBCV[4a\x04\xB1Wa\x04\x9Ba\x04\x956`\x04a\x04<V[\x91a\x0E\xEDV[a\x04\xA3a\0\xB2V[\x80a\x04\xAD\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[_\x91\x03\x12a\x04\xC0WV[a\0\xBCV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xE0\x90`\x08a\x04\xE5\x93\x02a\x03KV[a\x04\xC5V[\x90V[\x90a\x04\xF3\x91Ta\x04\xD0V[\x90V[a\x05\x01__\x90a\x04\xE8V[\x90V[a\x05\r\x90a\0\xCFV[\x90RV[\x91\x90a\x05$\x90_` \x85\x01\x94\x01\x90a\x05\x04V[V[4a\x05VWa\x0566`\x04a\x04\xB6V[a\x05Ra\x05Aa\x04\xF6V[a\x05Ia\0\xB2V[\x91\x82\x91\x82a\x05\x11V[\x03\x90\xF3[a\0\xB8V[4a\x05\x89Wa\x05sa\x05n6`\x04a\0\xFEV[a\x0F\x99V[a\x05{a\0\xB2V[\x80a\x05\x85\x81a\x01\x1CV[\x03\x90\xF3[a\0\xB8V[_\x80\xFD[_\x1C\x90V[a\x05\xA3a\x05\xA8\x91a\x05\x92V[a\x04\xC5V[\x90V[a\x05\xB5\x90Ta\x05\x97V[\x90V[3a\x05\xD3a\x05\xCDa\x05\xC8_a\x05\xABV[a\0\xCFV[\x91a\0\xCFV[\x03a\x05\xE3Wa\x05\xE1\x90a\x06IV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x05\xFB`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[_\x1B\x90V[\x90a\x06\x10`\xFF\x91a\x05\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x06#\x90a\x02\x9EV[\x90V[\x90V[\x90a\x06>a\x069a\x06E\x92a\x06\x1AV[a\x06&V[\x82Ta\x06\x04V[\x90UV[a\x06^_a\x06Y`\x01\x84\x90a\x035V[a\x06)V[a\x06\x88\x7F\xE9\xDC\xE8\xC9\x92b<\xE7\x91r[!\xE8W\xE32H\xD1\xF1\x90\xA2[Qh14 \xEE\xBD\xAA\xE9\x9D\x91a\x03)V[\x90a\x06\x91a\0\xB2V[\x80a\x06\x9B\x81a\x01\x1CV[\x03\x90\xA2V[a\x06\xA9\x90a\x05\xB8V[V[a\x06\xB7a\x06\xBC\x91a\x05\x92V[a\x03OV[\x90V[a\x06\xC9\x90Ta\x06\xABV[\x90V[\x91\x90a\x06\xEBa\x06\xE5a\x06\xE0`\x013\x90a\x035V[a\x06\xBFV[\x15a\x02\x9EV[a\x06\xFAWa\x06\xF8\x92a\x07AV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x07\x12`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x90V[a\x07-a\x07(a\x072\x92a\x07\x16V[a\x02\xFEV[a\0\xC4V[\x90V[a\x07>\x90a\x07\x19V[\x90V[\x91\x90\x82a\x07^a\x07Xa\x07S_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\x07nWa\x07l\x92a\x08oV[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x07\x86`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[a\x07\x93\x90a\x03\x01V[\x90V[a\x07\x9F\x90a\x07\x8AV[\x90V[a\x07\xAB\x90a\x03\x1DV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07\xDA\x90a\x07\xB2V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07\xF4W`@RV[a\x07\xBCV[`\xE0\x1B\x90V[_\x91\x03\x12a\x08\tWV[a\0\xBCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x08<\x81a\x085\x81a\x08A\x95a\x08\x0EV[\x80\x95a\x08\x17V[a\x07\xB2V[\x01\x90V[\x90\x91a\x08\\\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x08\"V[\x90V[a\x08ga\0\xB2V[=_\x82>=\x90\xFD[\x91\x90a\x08\x82a\x08}\x84a\x07\x96V[a\x07\xA2V[\x91cF\xE2\xCC\t\x91\x90\x92\x80;\x15a\tHWa\x08\xAF_\x80\x94a\x08\xBAa\x08\xA3a\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x07\xF9V[\x84R`\x04\x84\x01a\x08EV[\x03\x92Z\xF1\x80\x15a\tCWa\t\x17W[P3\x90a\x08\xFFa\x08\xF9\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03)V[\x91a\x03)V[\x91a\t\x08a\0\xB2V[\x80a\t\x12\x81a\x01\x1CV[\x03\x90\xA3V[a\t6\x90_=\x81\x11a\t<W[a\t.\x81\x83a\x07\xD0V[\x81\x01\x90a\x07\xFFV[_a\x08\xC9V[P=a\t$V[a\x08_V[a\x07\xAEV[\x90a\tX\x92\x91a\x06\xCCV[V[3a\tua\toa\tj_a\x05\xABV[a\0\xCFV[\x91a\0\xCFV[\x03a\t\x85Wa\t\x83\x90a\t\xDFV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\t\x9D`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x90a\t\xB2`\x01\x80`\xA0\x1B\x03\x91a\x05\xFFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\t\xD4a\t\xCFa\t\xDB\x92a\x03)V[a\t\xBCV[\x82Ta\t\xA1V[\x90UV[\x80a\t\xFAa\t\xF4a\t\xEF_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\nVWa\n\t\x81_a\t\xBFV[3\x90a\n>a\n8\x7F\xF8\xCC\xB0'\xDF\xCD\x13^\0\x0E\x9DE\xE6\xCC-f%x\xA8\x82]LE\xB5\xE3.\n\xDFg\xE7\x9E\xC6\x93a\x03)V[\x91a\x03)V[\x91a\nGa\0\xB2V[\x80a\nQ\x81a\x01\x1CV[\x03\x90\xA3V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\nn`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[a\n{\x90a\tZV[V[_\x90V[\x90Pa\n\xA2\x92Pa\n\x9D\x91Pa\n\x95a\n}V[P`\x01a\x035V[a\x06\xBFV[\x90V[\x91\x90a\n\xC4a\n\xBEa\n\xB9`\x013\x90a\x035V[a\x06\xBFV[\x15a\x02\x9EV[a\n\xD3Wa\n\xD1\x92a\n\xEFV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\n\xEB`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x91\x90\x82a\x0B\x0Ca\x0B\x06a\x0B\x01_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0B\x1CWa\x0B\x1A\x92a\x0B8V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0B4`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x91\x90a\x0BKa\x0BF\x84a\x07\x96V[a\x07\xA2V[\x91c\x80NQ#\x91\x90\x92\x80;\x15a\x0C\x11Wa\x0Bx_\x80\x94a\x0B\x83a\x0Bla\0\xB2V[\x97\x88\x96\x87\x95\x86\x94a\x07\xF9V[\x84R`\x04\x84\x01a\x08EV[\x03\x92Z\xF1\x80\x15a\x0C\x0CWa\x0B\xE0W[P3\x90a\x0B\xC8a\x0B\xC2\x7F\x80l\x86\xC9\xD9c}\xB6P\xFEC4\x90qF\xB1(Z\xB1&Gih\xBD\x81\x16\xDB.\xC9T\xE2R\x93a\x03)V[\x91a\x03)V[\x91a\x0B\xD1a\0\xB2V[\x80a\x0B\xDB\x81a\x01\x1CV[\x03\x90\xA3V[a\x0B\xFF\x90_=\x81\x11a\x0C\x05W[a\x0B\xF7\x81\x83a\x07\xD0V[\x81\x01\x90a\x07\xFFV[_a\x0B\x92V[P=a\x0B\xEDV[a\x08_V[a\x07\xAEV[\x90a\x0C!\x92\x91a\n\xA5V[V[\x91\x90a\x0CBa\x0C<a\x0C7`\x013\x90a\x035V[a\x06\xBFV[\x15a\x02\x9EV[a\x0CQWa\x0CO\x92a\x0CmV[V[_c\x15\xA9\xBC'`\xE1\x1B\x81R\x80a\x0Ci`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[\x91\x90\x82a\x0C\x8Aa\x0C\x84a\x0C\x7F_a\x075V[a\0\xCFV[\x91a\0\xCFV[\x14a\x0C\x9AWa\x0C\x98\x92a\x0E\x02V[V[_cu\xFF\xCC#`\xE0\x1B\x81R\x80a\x0C\xB2`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[` \x91\x81R\x01\x90V[\x90V[` \x91\x81R\x01\x90V[\x91\x90a\x0C\xE5\x81a\x0C\xDE\x81a\x0C\xEA\x95a\x0C\xC2V[\x80\x95a\x08\x17V[a\x07\xB2V[\x01\x90V[\x90a\x0C\xF9\x92\x91a\x0C\xCBV[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905`\x01` \x03\x826\x03\x03\x81\x12\x15a\rIW\x01` \x815\x91\x01\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\rDW`\x01\x82\x026\x03\x83\x13a\r?WV[a\r\0V[a\x0C\xFCV[a\r\x04V[` \x01\x90V[\x91\x81a\r_\x91a\x0C\xB6V[\x90\x81a\rp` \x83\x02\x84\x01\x94a\x0C\xBFV[\x92\x83_\x92[\x84\x84\x10a\r\x85WPPPPPP\x90V[\x90\x91\x92\x93\x94\x95` a\r\xB1a\r\xAB\x83\x85`\x01\x95\x03\x88Ra\r\xA5\x8B\x88a\r\x08V[\x90a\x0C\xEEV[\x98a\rNV[\x94\x01\x94\x01\x92\x94\x93\x91\x90a\ruV[\x90\x91a\r\xD6\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\rTV[\x90V[P\x90V[\x90V[a\r\xE9\x90a\r\xDDV[\x90RV[\x91\x90a\x0E\0\x90_` \x85\x01\x94\x01\x90a\r\xE0V[V[\x91a\x0E\x14a\x0E\x0F\x84a\x07\x96V[a\x07\xA2V[\x90c\xCD\xAF\xB9x\x83\x82\x93\x80;\x15a\x0E\xE8Wa\x0EA_\x80\x94a\x0ELa\x0E5a\0\xB2V[\x98\x89\x96\x87\x95\x86\x94a\x07\xF9V[\x84R`\x04\x84\x01a\r\xBFV[\x03\x92Z\xF1\x91\x82\x15a\x0E\xE3Wa\x0Ei\x92a\x0E\xB7W[P3\x93\x92a\r\xD9V[\x91a\x0E\xB2a\x0E\xA0a\x0E\x9A\x7FXj\xC7,\xD4z\xC1\x0B\xE2\xC6B(\xBA\xC4\x8F\xEATPh20[\x9A\xB0\xFA\x077N\xD7\x9CW\r\x93a\x03)V[\x93a\x03)V[\x93a\x0E\xA9a\0\xB2V[\x91\x82\x91\x82a\r\xEDV[\x03\x90\xA3V[a\x0E\xD6\x90_=\x81\x11a\x0E\xDCW[a\x0E\xCE\x81\x83a\x07\xD0V[\x81\x01\x90a\x07\xFFV[_a\x0E`V[P=a\x0E\xC4V[a\x08_V[a\x07\xAEV[\x90a\x0E\xF8\x92\x91a\x0C#V[V[3a\x0F\x15a\x0F\x0Fa\x0F\n_a\x05\xABV[a\0\xCFV[\x91a\0\xCFV[\x03a\x0F%Wa\x0F#\x90a\x0FAV[V[_c{\xFAK\x9F`\xE0\x1B\x81R\x80a\x0F=`\x04\x82\x01a\x01\x1CV[\x03\x90\xFD[a\x0FW`\x01a\x0FR`\x01\x84\x90a\x035V[a\x06)V[a\x0F\x81\x7F\x19\xEF\x9AHw\x19\x9F\x89D\n&\xAC\xB2h\x95\xEC\x02\xED\x86\xF2\xDF\x1A\xEA\xA9\r\xC1\x80A\xB8\x92\xF7\x1F\x91a\x03)V[\x90a\x0F\x8Aa\0\xB2V[\x80a\x0F\x94\x81a\x01\x1CV[\x03\x90\xA2V[a\x0F\xA2\x90a\x0E\xFAV[V",
    );
    /**Custom error with signature `AddressNotAllowed()` and selector `0x2b53784e`.
```solidity
error AddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressNotAllowed> for UnderlyingRustTuple<'_> {
            fn from(value: AddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressNotAllowed()";
            const SELECTOR: [u8; 4] = [43u8, 83u8, 120u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotAdmin()` and selector `0x7bfa4b9f`.
```solidity
error NotAdmin();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotAdmin {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotAdmin> for UnderlyingRustTuple<'_> {
            fn from(value: NotAdmin) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotAdmin {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotAdmin {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotAdmin()";
            const SELECTOR: [u8; 4] = [123u8, 250u8, 75u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ZeroSequencerAddressNotAllowed()` and selector `0x75ffcc23`.
```solidity
error ZeroSequencerAddressNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroSequencerAddressNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroSequencerAddressNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: ZeroSequencerAddressNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ZeroSequencerAddressNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroSequencerAddressNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroSequencerAddressNotAllowed()";
            const SELECTOR: [u8; 4] = [117u8, 255u8, 204u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `AdminTransferred(address,address)` and selector `0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6`.
```solidity
event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AdminTransferred {
        #[allow(missing_docs)]
        pub previousAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AdminTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "AdminTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousAdmin: topics.1,
                    newAdmin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousAdmin.clone(),
                    self.newAdmin.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousAdmin,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newAdmin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AdminTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AdminTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AdminTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserAdded(address)` and selector `0x19ef9a4877199f89440a26acb26895ec02ed86f2df1aeaa90dc18041b892f71f`.
```solidity
event UserAdded(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserAdded {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UserRemoved(address)` and selector `0xe9dce8c992623ce791725b21e857e33248d1f190a25b5168313420eebdaae99d`.
```solidity
event UserRemoved(address indexed user);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UserRemoved {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UserRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UserRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { user: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.user.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.user,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UserRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UserRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UserRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletPoolWrapperBulkTransactionsSent(address,address,uint256)` and selector `0x586ac72cd47ac10be2c64228bac48fea54506832305b9ab0fa07374ed79c570d`.
```solidity
event WalletPoolWrapperBulkTransactionsSent(address indexed from, address indexed SyndicateSequencingChain, uint256 count);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletPoolWrapperBulkTransactionsSent {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub count: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletPoolWrapperBulkTransactionsSent {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletPoolWrapperBulkTransactionsSent(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                88u8,
                106u8,
                199u8,
                44u8,
                212u8,
                122u8,
                193u8,
                11u8,
                226u8,
                198u8,
                66u8,
                40u8,
                186u8,
                196u8,
                143u8,
                234u8,
                84u8,
                80u8,
                104u8,
                50u8,
                48u8,
                91u8,
                154u8,
                176u8,
                250u8,
                7u8,
                55u8,
                78u8,
                215u8,
                156u8,
                87u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    SyndicateSequencingChain: topics.2,
                    count: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.count),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.SyndicateSequencingChain.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.SyndicateSequencingChain,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData
        for WalletPoolWrapperBulkTransactionsSent {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletPoolWrapperBulkTransactionsSent>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &WalletPoolWrapperBulkTransactionsSent,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `WalletPoolWrapperTransactionSent(address,address)` and selector `0x806c86c9d9637db650fe4334907146b1285ab126476968bd8116db2ec954e252`.
```solidity
event WalletPoolWrapperTransactionSent(address indexed from, address indexed SyndicateSequencingChain);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct WalletPoolWrapperTransactionSent {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub SyndicateSequencingChain: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for WalletPoolWrapperTransactionSent {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "WalletPoolWrapperTransactionSent(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                128u8,
                108u8,
                134u8,
                201u8,
                217u8,
                99u8,
                125u8,
                182u8,
                80u8,
                254u8,
                67u8,
                52u8,
                144u8,
                113u8,
                70u8,
                177u8,
                40u8,
                90u8,
                177u8,
                38u8,
                71u8,
                105u8,
                104u8,
                189u8,
                129u8,
                22u8,
                219u8,
                46u8,
                201u8,
                84u8,
                226u8,
                82u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    SyndicateSequencingChain: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.from.clone(),
                    self.SyndicateSequencingChain.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.SyndicateSequencingChain,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperTransactionSent {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&WalletPoolWrapperTransactionSent>
        for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &WalletPoolWrapperTransactionSent,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `addToAllowlist(address)` and selector `0xf8e86ece`.
```solidity
function addToAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`addToAllowlist(address)`](addToAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addToAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addToAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addToAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addToAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addToAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addToAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addToAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addToAllowlist(address)";
            const SELECTOR: [u8; 4] = [248u8, 232u8, 110u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `admin()` and selector `0xf851a440`.
```solidity
function admin() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminCall {}
    ///Container type for the return parameters of the [`admin()`](adminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct adminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminCall> for UnderlyingRustTuple<'_> {
                fn from(value: adminCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<adminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: adminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for adminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for adminCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = adminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "admin()";
            const SELECTOR: [u8; 4] = [248u8, 81u8, 164u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `allowlist(address)` and selector `0xa7cd52cb`.
```solidity
function allowlist(address user) external view returns (bool isAllowed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowlist(address)`](allowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowlistReturn {
        #[allow(missing_docs)]
        pub isAllowed: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowlistReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowlistReturn) -> Self {
                    (value.isAllowed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { isAllowed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowlistReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowlist(address)";
            const SELECTOR: [u8; 4] = [167u8, 205u8, 82u8, 203u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address, bytes memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(address,bytes)` and selector `0x6ebca5f6`.
```solidity
function processTransaction(address _SyndicateSequencingChain, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub _SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(address,bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value._SyndicateSequencingChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _SyndicateSequencingChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(address,bytes)";
            const SELECTOR: [u8; 4] = [110u8, 188u8, 165u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._SyndicateSequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(address,bytes)` and selector `0xaf53ad6b`.
```solidity
function processTransactionUncompressed(address _SyndicateSequencingChain, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedCall {
        #[allow(missing_docs)]
        pub _SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(address,bytes)`](processTransactionUncompressedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressedReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedCall) -> Self {
                    (value._SyndicateSequencingChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _SyndicateSequencingChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressedReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressedReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(address,bytes)";
            const SELECTOR: [u8; 4] = [175u8, 83u8, 173u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._SyndicateSequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(address,bytes[])` and selector `0xc290f912`.
```solidity
function processTransactionsBulk(address _SyndicateSequencingChain, bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkCall {
        #[allow(missing_docs)]
        pub _SyndicateSequencingChain: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(address,bytes[])`](processTransactionsBulkCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulkReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkCall) -> Self {
                    (value._SyndicateSequencingChain, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _SyndicateSequencingChain: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulkReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulkReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulkReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulkCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulkReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(address,bytes[])";
            const SELECTOR: [u8; 4] = [194u8, 144u8, 249u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._SyndicateSequencingChain,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `removeFromAllowlist(address)` and selector `0x5da93d7e`.
```solidity
function removeFromAllowlist(address user) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistCall {
        #[allow(missing_docs)]
        pub user: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeFromAllowlist(address)`](removeFromAllowlistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeFromAllowlistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistCall) -> Self {
                    (value.user,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { user: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeFromAllowlistReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removeFromAllowlistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removeFromAllowlistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeFromAllowlistCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeFromAllowlistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeFromAllowlist(address)";
            const SELECTOR: [u8; 4] = [93u8, 169u8, 61u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.user,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferAdmin(address)` and selector `0x75829def`.
```solidity
function transferAdmin(address newAdmin) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminCall {
        #[allow(missing_docs)]
        pub newAdmin: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferAdmin(address)`](transferAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferAdminReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminCall) -> Self {
                    (value.newAdmin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newAdmin: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferAdminReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferAdminReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferAdmin(address)";
            const SELECTOR: [u8; 4] = [117u8, 130u8, 157u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newAdmin,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`WalletPoolWrapperModule`](self) function calls.
    pub enum WalletPoolWrapperModuleCalls {
        #[allow(missing_docs)]
        addToAllowlist(addToAllowlistCall),
        #[allow(missing_docs)]
        admin(adminCall),
        #[allow(missing_docs)]
        allowlist(allowlistCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionUncompressed(processTransactionUncompressedCall),
        #[allow(missing_docs)]
        processTransactionsBulk(processTransactionsBulkCall),
        #[allow(missing_docs)]
        removeFromAllowlist(removeFromAllowlistCall),
        #[allow(missing_docs)]
        transferAdmin(transferAdminCall),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [93u8, 169u8, 61u8, 126u8],
            [110u8, 188u8, 165u8, 246u8],
            [117u8, 130u8, 157u8, 239u8],
            [122u8, 57u8, 121u8, 220u8],
            [167u8, 205u8, 82u8, 203u8],
            [175u8, 83u8, 173u8, 107u8],
            [194u8, 144u8, 249u8, 18u8],
            [248u8, 81u8, 164u8, 64u8],
            [248u8, 232u8, 110u8, 206u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleCalls {
        const NAME: &'static str = "WalletPoolWrapperModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addToAllowlist(_) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::admin(_) => <adminCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::allowlist(_) => {
                    <allowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed(_) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk(_) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::removeFromAllowlist(_) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferAdmin(_) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls>] = &[
                {
                    fn removeFromAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::removeFromAllowlist)
                    }
                    removeFromAllowlist
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn transferAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <transferAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::transferAdmin)
                    }
                    transferAdmin
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn allowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <allowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::allowlist)
                    }
                    allowlist
                },
                {
                    fn processTransactionUncompressed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                WalletPoolWrapperModuleCalls::processTransactionUncompressed,
                            )
                    }
                    processTransactionUncompressed
                },
                {
                    fn processTransactionsBulk(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::processTransactionsBulk)
                    }
                    processTransactionsBulk
                },
                {
                    fn admin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <adminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::admin)
                    }
                    admin
                },
                {
                    fn addToAllowlist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleCalls> {
                        <addToAllowlistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleCalls::addToAllowlist)
                    }
                    addToAllowlist
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addToAllowlist(inner) => {
                    <addToAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::admin(inner) => {
                    <adminCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::allowlist(inner) => {
                    <allowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed(inner) => {
                    <processTransactionUncompressedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk(inner) => {
                    <processTransactionsBulkCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::removeFromAllowlist(inner) => {
                    <removeFromAllowlistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferAdmin(inner) => {
                    <transferAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) custom errors.
    pub enum WalletPoolWrapperModuleErrors {
        #[allow(missing_docs)]
        AddressNotAllowed(AddressNotAllowed),
        #[allow(missing_docs)]
        NotAdmin(NotAdmin),
        #[allow(missing_docs)]
        ZeroSequencerAddressNotAllowed(ZeroSequencerAddressNotAllowed),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [43u8, 83u8, 120u8, 78u8],
            [117u8, 255u8, 204u8, 35u8],
            [123u8, 250u8, 75u8, 159u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for WalletPoolWrapperModuleErrors {
        const NAME: &'static str = "WalletPoolWrapperModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressNotAllowed(_) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotAdmin(_) => <NotAdmin as alloy_sol_types::SolError>::SELECTOR,
                Self::ZeroSequencerAddressNotAllowed(_) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors>] = &[
                {
                    fn AddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <AddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::AddressNotAllowed)
                    }
                    AddressNotAllowed
                },
                {
                    fn ZeroSequencerAddressNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                WalletPoolWrapperModuleErrors::ZeroSequencerAddressNotAllowed,
                            )
                    }
                    ZeroSequencerAddressNotAllowed
                },
                {
                    fn NotAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<WalletPoolWrapperModuleErrors> {
                        <NotAdmin as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(WalletPoolWrapperModuleErrors::NotAdmin)
                    }
                    NotAdmin
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroSequencerAddressNotAllowed(inner) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressNotAllowed(inner) => {
                    <AddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotAdmin(inner) => {
                    <NotAdmin as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ZeroSequencerAddressNotAllowed(inner) => {
                    <ZeroSequencerAddressNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`WalletPoolWrapperModule`](self) events.
    pub enum WalletPoolWrapperModuleEvents {
        #[allow(missing_docs)]
        AdminTransferred(AdminTransferred),
        #[allow(missing_docs)]
        UserAdded(UserAdded),
        #[allow(missing_docs)]
        UserRemoved(UserRemoved),
        #[allow(missing_docs)]
        WalletPoolWrapperBulkTransactionsSent(WalletPoolWrapperBulkTransactionsSent),
        #[allow(missing_docs)]
        WalletPoolWrapperTransactionSent(WalletPoolWrapperTransactionSent),
    }
    #[automatically_derived]
    impl WalletPoolWrapperModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                25u8,
                239u8,
                154u8,
                72u8,
                119u8,
                25u8,
                159u8,
                137u8,
                68u8,
                10u8,
                38u8,
                172u8,
                178u8,
                104u8,
                149u8,
                236u8,
                2u8,
                237u8,
                134u8,
                242u8,
                223u8,
                26u8,
                234u8,
                169u8,
                13u8,
                193u8,
                128u8,
                65u8,
                184u8,
                146u8,
                247u8,
                31u8,
            ],
            [
                88u8,
                106u8,
                199u8,
                44u8,
                212u8,
                122u8,
                193u8,
                11u8,
                226u8,
                198u8,
                66u8,
                40u8,
                186u8,
                196u8,
                143u8,
                234u8,
                84u8,
                80u8,
                104u8,
                50u8,
                48u8,
                91u8,
                154u8,
                176u8,
                250u8,
                7u8,
                55u8,
                78u8,
                215u8,
                156u8,
                87u8,
                13u8,
            ],
            [
                128u8,
                108u8,
                134u8,
                201u8,
                217u8,
                99u8,
                125u8,
                182u8,
                80u8,
                254u8,
                67u8,
                52u8,
                144u8,
                113u8,
                70u8,
                177u8,
                40u8,
                90u8,
                177u8,
                38u8,
                71u8,
                105u8,
                104u8,
                189u8,
                129u8,
                22u8,
                219u8,
                46u8,
                201u8,
                84u8,
                226u8,
                82u8,
            ],
            [
                233u8,
                220u8,
                232u8,
                201u8,
                146u8,
                98u8,
                60u8,
                231u8,
                145u8,
                114u8,
                91u8,
                33u8,
                232u8,
                87u8,
                227u8,
                50u8,
                72u8,
                209u8,
                241u8,
                144u8,
                162u8,
                91u8,
                81u8,
                104u8,
                49u8,
                52u8,
                32u8,
                238u8,
                189u8,
                170u8,
                233u8,
                157u8,
            ],
            [
                248u8,
                204u8,
                176u8,
                39u8,
                223u8,
                205u8,
                19u8,
                94u8,
                0u8,
                14u8,
                157u8,
                69u8,
                230u8,
                204u8,
                45u8,
                102u8,
                37u8,
                120u8,
                168u8,
                130u8,
                93u8,
                76u8,
                69u8,
                181u8,
                227u8,
                46u8,
                10u8,
                223u8,
                103u8,
                231u8,
                158u8,
                198u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for WalletPoolWrapperModuleEvents {
        const NAME: &'static str = "WalletPoolWrapperModuleEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<AdminTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AdminTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AdminTransferred)
                }
                Some(<UserAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserAdded)
                }
                Some(<UserRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UserRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UserRemoved)
                }
                Some(
                    <WalletPoolWrapperBulkTransactionsSent as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletPoolWrapperBulkTransactionsSent as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletPoolWrapperBulkTransactionsSent)
                }
                Some(
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <WalletPoolWrapperTransactionSent as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::WalletPoolWrapperTransactionSent)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for WalletPoolWrapperModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletPoolWrapperBulkTransactionsSent(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::AdminTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UserRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletPoolWrapperBulkTransactionsSent(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::WalletPoolWrapperTransactionSent(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> WalletPoolWrapperModuleInstance<T, P, N> {
        WalletPoolWrapperModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>>,
    > {
        WalletPoolWrapperModuleInstance::<T, P, N>::deploy(provider, _admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        WalletPoolWrapperModuleInstance::<T, P, N>::deploy_builder(provider, _admin)
    }
    /**A [`WalletPoolWrapperModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`WalletPoolWrapperModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct WalletPoolWrapperModuleInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for WalletPoolWrapperModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("WalletPoolWrapperModuleInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`WalletPoolWrapperModule`](self) contract instance.

See the [wrapper's documentation](`WalletPoolWrapperModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<WalletPoolWrapperModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> WalletPoolWrapperModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> WalletPoolWrapperModuleInstance<T, P, N> {
            WalletPoolWrapperModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addToAllowlist`] function.
        pub fn addToAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, addToAllowlistCall, N> {
            self.call_builder(&addToAllowlistCall { user })
        }
        ///Creates a new call builder for the [`admin`] function.
        pub fn admin(&self) -> alloy_contract::SolCallBuilder<T, &P, adminCall, N> {
            self.call_builder(&adminCall {})
        }
        ///Creates a new call builder for the [`allowlist`] function.
        pub fn allowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowlistCall, N> {
            self.call_builder(&allowlistCall { user })
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(&isAllowedCall { proposer, _1, _2 })
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            _SyndicateSequencingChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(
                &processTransactionCall {
                    _SyndicateSequencingChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionUncompressed`] function.
        pub fn processTransactionUncompressed(
            &self,
            _SyndicateSequencingChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressedCall,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressedCall {
                    _SyndicateSequencingChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk`] function.
        pub fn processTransactionsBulk(
            &self,
            _SyndicateSequencingChain: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulkCall, N> {
            self.call_builder(
                &processTransactionsBulkCall {
                    _SyndicateSequencingChain,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`removeFromAllowlist`] function.
        pub fn removeFromAllowlist(
            &self,
            user: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, removeFromAllowlistCall, N> {
            self.call_builder(&removeFromAllowlistCall { user })
        }
        ///Creates a new call builder for the [`transferAdmin`] function.
        pub fn transferAdmin(
            &self,
            newAdmin: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferAdminCall, N> {
            self.call_builder(&transferAdminCall { newAdmin })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > WalletPoolWrapperModuleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`AdminTransferred`] event.
        pub fn AdminTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AdminTransferred, N> {
            self.event_filter::<AdminTransferred>()
        }
        ///Creates a new event filter for the [`UserAdded`] event.
        pub fn UserAdded_filter(&self) -> alloy_contract::Event<T, &P, UserAdded, N> {
            self.event_filter::<UserAdded>()
        }
        ///Creates a new event filter for the [`UserRemoved`] event.
        pub fn UserRemoved_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UserRemoved, N> {
            self.event_filter::<UserRemoved>()
        }
        ///Creates a new event filter for the [`WalletPoolWrapperBulkTransactionsSent`] event.
        pub fn WalletPoolWrapperBulkTransactionsSent_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletPoolWrapperBulkTransactionsSent, N> {
            self.event_filter::<WalletPoolWrapperBulkTransactionsSent>()
        }
        ///Creates a new event filter for the [`WalletPoolWrapperTransactionSent`] event.
        pub fn WalletPoolWrapperTransactionSent_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, WalletPoolWrapperTransactionSent, N> {
            self.event_filter::<WalletPoolWrapperTransactionSent>()
        }
    }
}
