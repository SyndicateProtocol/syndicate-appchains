/**

Generated by the following Solidity interface...
```solidity
interface MockArbitrumBridge {
    struct TransferCall {
        address token;
        address refundTo;
        address to;
        uint256 amount;
        uint256 maxGas;
        uint256 gasPriceBid;
        bytes data;
        uint256 ethValue;
    }

    receive() external payable;

    function getLastTransferCall() external view returns (TransferCall memory);
    function getTransferCallCount() external view returns (uint256);
    function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes memory _data) external payable returns (bytes memory);
    function setShouldRevert(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
    function transferCalls(uint256) external view returns (address token, address refundTo, address to, uint256 amount, uint256 maxGas, uint256 gasPriceBid, bytes memory data, uint256 ethValue);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "getLastTransferCall",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct MockArbitrumBridge.TransferCall",
        "components": [
          {
            "name": "token",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "refundTo",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "to",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "maxGas",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "gasPriceBid",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "ethValue",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTransferCallCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "outboundTransferCustomRefund",
    "inputs": [
      {
        "name": "_token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_refundTo",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "setShouldRevert",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferCalls",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "refundTo",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "ethValue",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockArbitrumBridge {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b61139f61002b823961139f90f35b6026565b60405190565b5f80fdfe60806040526004361015610015575b3661086c57005b61001f5f3561007e565b80630be1c22e146100795780634fb1a07b146100745780636813d7871461006f5780637e9703bd1461006a578063d3072d82146100655763f2cec07c0361000e57610837565b610705565b610665565b61031c565b61029c565b6100c6565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261009c57565b61008e565b90565b6100ad906100a1565b9052565b91906100c4905f602085019401906100a4565b565b346100f6576100d6366004610092565b6100f26100e1610874565b6100e9610084565b918291826100b1565b0390f35b61008a565b5f80fd5b60018060a01b031690565b610113906100ff565b90565b61011f8161010a565b0361012657565b5f80fd5b9050359061013782610116565b565b610142816100a1565b0361014957565b5f80fd5b9050359061015a82610139565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101a25781359167ffffffffffffffff831161019d57602001926001830284011161019857565b610164565b610160565b61015c565b9060e08282031261022c576101be815f840161012a565b926101cc826020850161012a565b926101da836040830161012a565b926101e8816060840161014d565b926101f6826080850161014d565b926102048360a0830161014d565b9260c082013567ffffffffffffffff8111610227576102239201610168565b9091565b6100fb565b61008e565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61027261027b6020936102809361026981610231565b93848093610235565b9586910161023e565b610249565b0190565b6102999160208201915f818403910152610253565b90565b6102cd6102bc6102ad3660046101a7565b96959095949194939293610ef4565b6102c4610084565b91829182610284565b0390f35b151590565b6102df816102d1565b036102e657565b5f80fd5b905035906102f7826102d6565b565b906020828203126103125761030f915f016102ea565b90565b61008e565b5f0190565b3461034a5761033461032f3660046102f9565b6110d1565b61033c610084565b8061034681610317565b0390f35b61008a565b9060208282031261036857610365915f0161014d565b90565b61008e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61039781610381565b8210156103b1576103a9600891610385565b910201905f90565b61036d565b5f1c90565b60018060a01b031690565b6103d26103d7916103b6565b6103bb565b90565b6103e490546103c6565b90565b90565b6103f66103fb916103b6565b6103e7565b90565b61040890546103ea565b90565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561043f575b602083101461043a57565b61040b565b91607f169161042f565b60209181520190565b5f5260205f2090565b905f929180549061047561046e8361041f565b8094610449565b916001811690815f146104cc5750600114610490575b505050565b61049d9192939450610452565b915f925b8184106104b457505001905f808061048b565b600181602092959395548486015201910192906104a1565b92949550505060ff19168252151560200201905f808061048b565b906104f19161045b565b90565b634e487b7160e01b5f52604160045260245ffd5b9061051290610249565b810190811067ffffffffffffffff82111761052c57604052565b6104f4565b9061055161054a92610541610084565b938480926104e7565b0383610508565b565b5f9061055e82610381565b8110156105d85761056e9161038e565b509061057b5f83016103da565b91610588600182016103da565b91610595600283016103da565b916105a2600382016103fe565b916105af600483016103fe565b916105bc600582016103fe565b916105d560076105ce60068501610531565b93016103fe565b90565b5f80fd5b6105e59061010a565b9052565b98979561064460e09661063a61065b9760608e61063361064e989a6106639f9a6106299061061f61010086019e5f8701906105dc565b60208501906105dc565b60408301906105dc565b01906100a4565b60808c01906100a4565b60a08a01906100a4565b87820360c0890152610253565b9401906100a4565b565b3461069f5761069b61068061067b36600461034f565b610553565b94610692989698949194939293610084565b988998896105e9565b0390f35b61008a565b1c90565b60ff1690565b6106be9060086106c393026106a4565b6106a8565b90565b906106d191546106ae565b90565b6106e060015f906106c6565b90565b6106ec906102d1565b9052565b9190610703905f602085019401906106e3565b565b3461073557610715366004610092565b6107316107206106d4565b610728610084565b918291826106f0565b0390f35b61008a565b6107439061010a565b9052565b610750906100a1565b9052565b61077361077c6020936107819361076a81610231565b93848093610449565b9586910161023e565b610249565b0190565b9061081c9060e08061081161010084016107a55f8801515f87019061073a565b6107b76020880151602087019061073a565b6107c96040880151604087019061073a565b6107db60608801516060870190610747565b6107ed60808801516080870190610747565b6107ff60a088015160a0870190610747565b60c087015185820360c0870152610754565b940151910190610747565b90565b6108349160208201915f818403910152610785565b90565b3461086757610847366004610092565b610863610852611340565b61085a610084565b9182918261081f565b0390f35b61008a565b5f80fd5b5f90565b61087c610870565b506108865f610381565b90565b606090565b61089a61089f916103b6565b6106a8565b90565b6108ac905461088e565b90565b60209181520190565b5f7f417262697472756d20627269646765206661696c656400000000000000000000910152565b6108ec60166020926108af565b6108f5816108b8565b0190565b61090e9060208101905f8183039101526108df565b90565b90565b61092861092361092d926100ff565b610911565b6100ff565b90565b61093990610914565b90565b61094590610930565b90565b61095190610914565b90565b61095d90610948565b90565b61096990610948565b90565b60e01b90565b9050519061097f826102d6565b565b9060208282031261099a57610997915f01610972565b90565b61008e565b6040906109c86109cf94969593966109be60608401985f8501906105dc565b60208301906105dc565b01906100a4565b565b6109d9610084565b3d5f823e3d90fd5b90565b906109f76109f0610084565b9283610508565b565b610a046101006109e4565b90565b90610a119061010a565b9052565b90610a1f906100a1565b9052565b5f80fd5b67ffffffffffffffff8111610a4557610a41602091610249565b0190565b6104f4565b90825f939282370152565b90929192610a6a610a6582610a27565b6109e4565b93818552602085019082840111610a8657610a8492610a4a565b565b610a23565b610a96913691610a55565b90565b52565b5f5260205f2090565b5490565b610ab281610aa5565b821015610acc57610ac4600891610a9c565b910201905f90565b61036d565b634e487b7160e01b5f525f60045260245ffd5b610aee905161010a565b90565b5f1b90565b90610b0760018060a01b0391610af1565b9181191691161790565b610b1a90610948565b90565b90565b90610b35610b30610b3c92610b11565b610b1d565b8254610af6565b9055565b610b4a90516100a1565b90565b90610b595f1991610af1565b9181191691161790565b610b77610b72610b7c926100a1565b610911565b6100a1565b90565b90565b90610b97610b92610b9e92610b63565b610b7f565b8254610b4d565b9055565b5190565b601f602091010490565b1b90565b91906008610bcf910291610bc95f1984610bb0565b92610bb0565b9181191691161790565b9190610bef610bea610bf793610b63565b610b7f565b908354610bb4565b9055565b610c0d91610c07610870565b91610bd9565b565b5b818110610c1b575050565b80610c285f600193610bfb565b01610c10565b9190601f8111610c3e575b505050565b610c4a610c6f93610452565b906020610c5684610ba6565b83019310610c77575b610c6890610ba6565b0190610c0f565b5f8080610c39565b9150610c6881929050610c5f565b90610c95905f19906008026106a4565b191690565b81610ca491610c85565b906002021790565b90610cb681610231565b9067ffffffffffffffff8211610d7657610cda82610cd4855461041f565b85610c2e565b602090601f8311600114610d0e57918091610cfd935f92610d02575b5050610c9a565b90555b565b90915001515f80610cf6565b601f19831691610d1d85610452565b925f5b818110610d5e57509160029391856001969410610d44575b50505002019055610d00565b610d54910151601f841690610c85565b90555f8080610d38565b91936020600181928787015181550195019201610d20565b6104f4565b90610d8591610cac565b565b90610e4860e06007610e4e94610daa5f8201610da45f8801610ae4565b90610b20565b610dc360018201610dbd60208801610ae4565b90610b20565b610ddc60028201610dd660408801610ae4565b90610b20565b610df560038201610def60608801610b40565b90610b82565b610e0e60048201610e0860808801610b40565b90610b82565b610e2760058201610e2160a08801610b40565b90610b82565b610e4060068201610e3a60c08801610ba2565b90610d7b565b019201610b40565b90610b82565b565b9190610e6157610e5f91610d87565b565b610ad1565b9081549168010000000000000000831015610e965782610e8e916001610e9495018155610aa9565b90610e50565b565b6104f4565b5f7f7375636365737300000000000000000000000000000000000000000000000000910152565b610ecf60076020926108af565b610ed881610e9b565b0190565b610ef19060208101905f818303910152610ec2565b90565b96939591949095610f03610889565b50610f0e60016108a2565b61106a57610f23610f1e8961093c565b610954565b60206323b872dd913390610f535f610f3a30610960565b95610f5e8b610f47610084565b9889978896879561096c565b85526004850161099f565b03925af1801561106557611039575b505f610f78906109e1565b9796959390919294933496610f8b6109f9565b985f8a0190610f9991610a07565b6020890190610fa791610a07565b6040880190610fb591610a07565b6060870190610fc391610a15565b6080860190610fd191610a15565b60a0850190610fdf91610a15565b610fe891610a8b565b60c0830190610ff691610a99565b60e082019061100491610a15565b61100d91610e66565b611015610084565b806020810161102390610edc565b6020820181038252036110369082610508565b90565b6110599060203d811161105e575b6110518183610508565b810190610981565b610f6d565b503d611047565b6109d1565b611072610084565b62461bcd60e51b815280611088600482016108f9565b0390fd5b9061109860ff91610af1565b9181191691161790565b6110ab906102d1565b90565b90565b906110c66110c16110cd926110a2565b6110ae565b825461108c565b9055565b6110dc9060016110b1565b565b6110e96101006109e4565b90565b5f90565b5f90565b606090565b6111016110de565b90602080808080808080896111146110ec565b81520161111f6110ec565b81520161112a6110ec565b8152016111356110f0565b8152016111406110f0565b81520161114b6110f0565b8152016111566110f4565b8152016111616110f0565b81525050565b61116f6110f9565b90565b90565b61118961118461118e92611172565b610911565b6100a1565b90565b5f7f4e6f207472616e73666572730000000000000000000000000000000000000000910152565b6111c5600c6020926108af565b6111ce81611191565b0190565b6111e79060208101905f8183039101526111b8565b90565b156111f157565b6111f9610084565b62461bcd60e51b81528061120f600482016111d2565b0390fd5b90565b61122a61122561122f92611213565b610911565b6100a1565b90565b634e487b7160e01b5f52601160045260245ffd5b61125561125b919392936100a1565b926100a1565b820391821161126657565b611232565b90611332611329600761127c6110de565b9461129361128b5f83016103da565b5f8801610a07565b6112ab6112a2600183016103da565b60208801610a07565b6112c36112ba600283016103da565b60408801610a07565b6112db6112d2600383016103fe565b60608801610a15565b6112f36112ea600483016103fe565b60808801610a15565b61130b611302600583016103fe565b60a08801610a15565b61132361131a60068301610531565b60c08801610a99565b016103fe565b60e08401610a15565b565b61133d9061126b565b90565b611348611167565b5061136d6113555f610381565b6113676113615f611175565b916100a1565b116111ea565b61139c6113965f6113906113805f610381565b61138a6001611216565b90611246565b9061038e565b50611334565b9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x13\x9Fa\0+\x829a\x13\x9F\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\x08lW\0[a\0\x1F_5a\0~V[\x80c\x0B\xE1\xC2.\x14a\0yW\x80cO\xB1\xA0{\x14a\0tW\x80ch\x13\xD7\x87\x14a\0oW\x80c~\x97\x03\xBD\x14a\0jW\x80c\xD3\x07-\x82\x14a\0eWc\xF2\xCE\xC0|\x03a\0\x0EWa\x087V[a\x07\x05V[a\x06eV[a\x03\x1CV[a\x02\x9CV[a\0\xC6V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\x9CWV[a\0\x8EV[\x90V[a\0\xAD\x90a\0\xA1V[\x90RV[\x91\x90a\0\xC4\x90_` \x85\x01\x94\x01\x90a\0\xA4V[V[4a\0\xF6Wa\0\xD66`\x04a\0\x92V[a\0\xF2a\0\xE1a\x08tV[a\0\xE9a\0\x84V[\x91\x82\x91\x82a\0\xB1V[\x03\x90\xF3[a\0\x8AV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x13\x90a\0\xFFV[\x90V[a\x01\x1F\x81a\x01\nV[\x03a\x01&WV[_\x80\xFD[\x90P5\x90a\x017\x82a\x01\x16V[V[a\x01B\x81a\0\xA1V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xA2W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x9DW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x98WV[a\x01dV[a\x01`V[a\x01\\V[\x90`\xE0\x82\x82\x03\x12a\x02,Wa\x01\xBE\x81_\x84\x01a\x01*V[\x92a\x01\xCC\x82` \x85\x01a\x01*V[\x92a\x01\xDA\x83`@\x83\x01a\x01*V[\x92a\x01\xE8\x81``\x84\x01a\x01MV[\x92a\x01\xF6\x82`\x80\x85\x01a\x01MV[\x92a\x02\x04\x83`\xA0\x83\x01a\x01MV[\x92`\xC0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02'Wa\x02#\x92\x01a\x01hV[\x90\x91V[a\0\xFBV[a\0\x8EV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02ra\x02{` \x93a\x02\x80\x93a\x02i\x81a\x021V[\x93\x84\x80\x93a\x025V[\x95\x86\x91\x01a\x02>V[a\x02IV[\x01\x90V[a\x02\x99\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02SV[\x90V[a\x02\xCDa\x02\xBCa\x02\xAD6`\x04a\x01\xA7V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x0E\xF4V[a\x02\xC4a\0\x84V[\x91\x82\x91\x82a\x02\x84V[\x03\x90\xF3[\x15\x15\x90V[a\x02\xDF\x81a\x02\xD1V[\x03a\x02\xE6WV[_\x80\xFD[\x90P5\x90a\x02\xF7\x82a\x02\xD6V[V[\x90` \x82\x82\x03\x12a\x03\x12Wa\x03\x0F\x91_\x01a\x02\xEAV[\x90V[a\0\x8EV[_\x01\x90V[4a\x03JWa\x034a\x03/6`\x04a\x02\xF9V[a\x10\xD1V[a\x03<a\0\x84V[\x80a\x03F\x81a\x03\x17V[\x03\x90\xF3[a\0\x8AV[\x90` \x82\x82\x03\x12a\x03hWa\x03e\x91_\x01a\x01MV[\x90V[a\0\x8EV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x03\x97\x81a\x03\x81V[\x82\x10\x15a\x03\xB1Wa\x03\xA9`\x08\x91a\x03\x85V[\x91\x02\x01\x90_\x90V[a\x03mV[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xD2a\x03\xD7\x91a\x03\xB6V[a\x03\xBBV[\x90V[a\x03\xE4\x90Ta\x03\xC6V[\x90V[\x90V[a\x03\xF6a\x03\xFB\x91a\x03\xB6V[a\x03\xE7V[\x90V[a\x04\x08\x90Ta\x03\xEAV[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04?W[` \x83\x10\x14a\x04:WV[a\x04\x0BV[\x91`\x7F\x16\x91a\x04/V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04ua\x04n\x83a\x04\x1FV[\x80\x94a\x04IV[\x91`\x01\x81\x16\x90\x81_\x14a\x04\xCCWP`\x01\x14a\x04\x90W[PPPV[a\x04\x9D\x91\x92\x93\x94Pa\x04RV[\x91_\x92[\x81\x84\x10a\x04\xB4WPP\x01\x90_\x80\x80a\x04\x8BV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04\xA1V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04\x8BV[\x90a\x04\xF1\x91a\x04[V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05\x12\x90a\x02IV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05,W`@RV[a\x04\xF4V[\x90a\x05Qa\x05J\x92a\x05Aa\0\x84V[\x93\x84\x80\x92a\x04\xE7V[\x03\x83a\x05\x08V[V[_\x90a\x05^\x82a\x03\x81V[\x81\x10\x15a\x05\xD8Wa\x05n\x91a\x03\x8EV[P\x90a\x05{_\x83\x01a\x03\xDAV[\x91a\x05\x88`\x01\x82\x01a\x03\xDAV[\x91a\x05\x95`\x02\x83\x01a\x03\xDAV[\x91a\x05\xA2`\x03\x82\x01a\x03\xFEV[\x91a\x05\xAF`\x04\x83\x01a\x03\xFEV[\x91a\x05\xBC`\x05\x82\x01a\x03\xFEV[\x91a\x05\xD5`\x07a\x05\xCE`\x06\x85\x01a\x051V[\x93\x01a\x03\xFEV[\x90V[_\x80\xFD[a\x05\xE5\x90a\x01\nV[\x90RV[\x98\x97\x95a\x06D`\xE0\x96a\x06:a\x06[\x97``\x8Ea\x063a\x06N\x98\x9Aa\x06c\x9F\x9Aa\x06)\x90a\x06\x1Fa\x01\0\x86\x01\x9E_\x87\x01\x90a\x05\xDCV[` \x85\x01\x90a\x05\xDCV[`@\x83\x01\x90a\x05\xDCV[\x01\x90a\0\xA4V[`\x80\x8C\x01\x90a\0\xA4V[`\xA0\x8A\x01\x90a\0\xA4V[\x87\x82\x03`\xC0\x89\x01Ra\x02SV[\x94\x01\x90a\0\xA4V[V[4a\x06\x9FWa\x06\x9Ba\x06\x80a\x06{6`\x04a\x03OV[a\x05SV[\x94a\x06\x92\x98\x96\x98\x94\x91\x94\x93\x92\x93a\0\x84V[\x98\x89\x98\x89a\x05\xE9V[\x03\x90\xF3[a\0\x8AV[\x1C\x90V[`\xFF\x16\x90V[a\x06\xBE\x90`\x08a\x06\xC3\x93\x02a\x06\xA4V[a\x06\xA8V[\x90V[\x90a\x06\xD1\x91Ta\x06\xAEV[\x90V[a\x06\xE0`\x01_\x90a\x06\xC6V[\x90V[a\x06\xEC\x90a\x02\xD1V[\x90RV[\x91\x90a\x07\x03\x90_` \x85\x01\x94\x01\x90a\x06\xE3V[V[4a\x075Wa\x07\x156`\x04a\0\x92V[a\x071a\x07 a\x06\xD4V[a\x07(a\0\x84V[\x91\x82\x91\x82a\x06\xF0V[\x03\x90\xF3[a\0\x8AV[a\x07C\x90a\x01\nV[\x90RV[a\x07P\x90a\0\xA1V[\x90RV[a\x07sa\x07|` \x93a\x07\x81\x93a\x07j\x81a\x021V[\x93\x84\x80\x93a\x04IV[\x95\x86\x91\x01a\x02>V[a\x02IV[\x01\x90V[\x90a\x08\x1C\x90`\xE0\x80a\x08\x11a\x01\0\x84\x01a\x07\xA5_\x88\x01Q_\x87\x01\x90a\x07:V[a\x07\xB7` \x88\x01Q` \x87\x01\x90a\x07:V[a\x07\xC9`@\x88\x01Q`@\x87\x01\x90a\x07:V[a\x07\xDB``\x88\x01Q``\x87\x01\x90a\x07GV[a\x07\xED`\x80\x88\x01Q`\x80\x87\x01\x90a\x07GV[a\x07\xFF`\xA0\x88\x01Q`\xA0\x87\x01\x90a\x07GV[`\xC0\x87\x01Q\x85\x82\x03`\xC0\x87\x01Ra\x07TV[\x94\x01Q\x91\x01\x90a\x07GV[\x90V[a\x084\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\x85V[\x90V[4a\x08gWa\x08G6`\x04a\0\x92V[a\x08ca\x08Ra\x13@V[a\x08Za\0\x84V[\x91\x82\x91\x82a\x08\x1FV[\x03\x90\xF3[a\0\x8AV[_\x80\xFD[_\x90V[a\x08|a\x08pV[Pa\x08\x86_a\x03\x81V[\x90V[``\x90V[a\x08\x9Aa\x08\x9F\x91a\x03\xB6V[a\x06\xA8V[\x90V[a\x08\xAC\x90Ta\x08\x8EV[\x90V[` \x91\x81R\x01\x90V[_\x7FArbitrum bridge failed\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\xEC`\x16` \x92a\x08\xAFV[a\x08\xF5\x81a\x08\xB8V[\x01\x90V[a\t\x0E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xDFV[\x90V[\x90V[a\t(a\t#a\t-\x92a\0\xFFV[a\t\x11V[a\0\xFFV[\x90V[a\t9\x90a\t\x14V[\x90V[a\tE\x90a\t0V[\x90V[a\tQ\x90a\t\x14V[\x90V[a\t]\x90a\tHV[\x90V[a\ti\x90a\tHV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\t\x7F\x82a\x02\xD6V[V[\x90` \x82\x82\x03\x12a\t\x9AWa\t\x97\x91_\x01a\trV[\x90V[a\0\x8EV[`@\x90a\t\xC8a\t\xCF\x94\x96\x95\x93\x96a\t\xBE``\x84\x01\x98_\x85\x01\x90a\x05\xDCV[` \x83\x01\x90a\x05\xDCV[\x01\x90a\0\xA4V[V[a\t\xD9a\0\x84V[=_\x82>=\x90\xFD[\x90V[\x90a\t\xF7a\t\xF0a\0\x84V[\x92\x83a\x05\x08V[V[a\n\x04a\x01\0a\t\xE4V[\x90V[\x90a\n\x11\x90a\x01\nV[\x90RV[\x90a\n\x1F\x90a\0\xA1V[\x90RV[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\nEWa\nA` \x91a\x02IV[\x01\x90V[a\x04\xF4V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\nja\ne\x82a\n'V[a\t\xE4V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\x86Wa\n\x84\x92a\nJV[V[a\n#V[a\n\x96\x916\x91a\nUV[\x90V[RV[_R` _ \x90V[T\x90V[a\n\xB2\x81a\n\xA5V[\x82\x10\x15a\n\xCCWa\n\xC4`\x08\x91a\n\x9CV[\x91\x02\x01\x90_\x90V[a\x03mV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[a\n\xEE\x90Qa\x01\nV[\x90V[_\x1B\x90V[\x90a\x0B\x07`\x01\x80`\xA0\x1B\x03\x91a\n\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x1A\x90a\tHV[\x90V[\x90V[\x90a\x0B5a\x0B0a\x0B<\x92a\x0B\x11V[a\x0B\x1DV[\x82Ta\n\xF6V[\x90UV[a\x0BJ\x90Qa\0\xA1V[\x90V[\x90a\x0BY_\x19\x91a\n\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Bwa\x0Bra\x0B|\x92a\0\xA1V[a\t\x11V[a\0\xA1V[\x90V[\x90V[\x90a\x0B\x97a\x0B\x92a\x0B\x9E\x92a\x0BcV[a\x0B\x7FV[\x82Ta\x0BMV[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0B\xCF\x91\x02\x91a\x0B\xC9_\x19\x84a\x0B\xB0V[\x92a\x0B\xB0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0B\xEFa\x0B\xEAa\x0B\xF7\x93a\x0BcV[a\x0B\x7FV[\x90\x83Ta\x0B\xB4V[\x90UV[a\x0C\r\x91a\x0C\x07a\x08pV[\x91a\x0B\xD9V[V[[\x81\x81\x10a\x0C\x1BWPPV[\x80a\x0C(_`\x01\x93a\x0B\xFBV[\x01a\x0C\x10V[\x91\x90`\x1F\x81\x11a\x0C>W[PPPV[a\x0CJa\x0Co\x93a\x04RV[\x90` a\x0CV\x84a\x0B\xA6V[\x83\x01\x93\x10a\x0CwW[a\x0Ch\x90a\x0B\xA6V[\x01\x90a\x0C\x0FV[_\x80\x80a\x0C9V[\x91Pa\x0Ch\x81\x92\x90Pa\x0C_V[\x90a\x0C\x95\x90_\x19\x90`\x08\x02a\x06\xA4V[\x19\x16\x90V[\x81a\x0C\xA4\x91a\x0C\x85V[\x90`\x02\x02\x17\x90V[\x90a\x0C\xB6\x81a\x021V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\rvWa\x0C\xDA\x82a\x0C\xD4\x85Ta\x04\x1FV[\x85a\x0C.V[` \x90`\x1F\x83\x11`\x01\x14a\r\x0EW\x91\x80\x91a\x0C\xFD\x93_\x92a\r\x02W[PPa\x0C\x9AV[\x90U[V[\x90\x91P\x01Q_\x80a\x0C\xF6V[`\x1F\x19\x83\x16\x91a\r\x1D\x85a\x04RV[\x92_[\x81\x81\x10a\r^WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\rDW[PPP\x02\x01\x90Ua\r\0V[a\rT\x91\x01Q`\x1F\x84\x16\x90a\x0C\x85V[\x90U_\x80\x80a\r8V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\r V[a\x04\xF4V[\x90a\r\x85\x91a\x0C\xACV[V[\x90a\x0EH`\xE0`\x07a\x0EN\x94a\r\xAA_\x82\x01a\r\xA4_\x88\x01a\n\xE4V[\x90a\x0B V[a\r\xC3`\x01\x82\x01a\r\xBD` \x88\x01a\n\xE4V[\x90a\x0B V[a\r\xDC`\x02\x82\x01a\r\xD6`@\x88\x01a\n\xE4V[\x90a\x0B V[a\r\xF5`\x03\x82\x01a\r\xEF``\x88\x01a\x0B@V[\x90a\x0B\x82V[a\x0E\x0E`\x04\x82\x01a\x0E\x08`\x80\x88\x01a\x0B@V[\x90a\x0B\x82V[a\x0E'`\x05\x82\x01a\x0E!`\xA0\x88\x01a\x0B@V[\x90a\x0B\x82V[a\x0E@`\x06\x82\x01a\x0E:`\xC0\x88\x01a\x0B\xA2V[\x90a\r{V[\x01\x92\x01a\x0B@V[\x90a\x0B\x82V[V[\x91\x90a\x0EaWa\x0E_\x91a\r\x87V[V[a\n\xD1V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x0E\x96W\x82a\x0E\x8E\x91`\x01a\x0E\x94\x95\x01\x81Ua\n\xA9V[\x90a\x0EPV[V[a\x04\xF4V[_\x7Fsuccess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xCF`\x07` \x92a\x08\xAFV[a\x0E\xD8\x81a\x0E\x9BV[\x01\x90V[a\x0E\xF1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xC2V[\x90V[\x96\x93\x95\x91\x94\x90\x95a\x0F\x03a\x08\x89V[Pa\x0F\x0E`\x01a\x08\xA2V[a\x10jWa\x0F#a\x0F\x1E\x89a\t<V[a\tTV[` c#\xB8r\xDD\x913\x90a\x0FS_a\x0F:0a\t`V[\x95a\x0F^\x8Ba\x0FGa\0\x84V[\x98\x89\x97\x88\x96\x87\x95a\tlV[\x85R`\x04\x85\x01a\t\x9FV[\x03\x92Z\xF1\x80\x15a\x10eWa\x109W[P_a\x0Fx\x90a\t\xE1V[\x97\x96\x95\x93\x90\x91\x92\x94\x934\x96a\x0F\x8Ba\t\xF9V[\x98_\x8A\x01\x90a\x0F\x99\x91a\n\x07V[` \x89\x01\x90a\x0F\xA7\x91a\n\x07V[`@\x88\x01\x90a\x0F\xB5\x91a\n\x07V[``\x87\x01\x90a\x0F\xC3\x91a\n\x15V[`\x80\x86\x01\x90a\x0F\xD1\x91a\n\x15V[`\xA0\x85\x01\x90a\x0F\xDF\x91a\n\x15V[a\x0F\xE8\x91a\n\x8BV[`\xC0\x83\x01\x90a\x0F\xF6\x91a\n\x99V[`\xE0\x82\x01\x90a\x10\x04\x91a\n\x15V[a\x10\r\x91a\x0EfV[a\x10\x15a\0\x84V[\x80` \x81\x01a\x10#\x90a\x0E\xDCV[` \x82\x01\x81\x03\x82R\x03a\x106\x90\x82a\x05\x08V[\x90V[a\x10Y\x90` =\x81\x11a\x10^W[a\x10Q\x81\x83a\x05\x08V[\x81\x01\x90a\t\x81V[a\x0FmV[P=a\x10GV[a\t\xD1V[a\x10ra\0\x84V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10\x88`\x04\x82\x01a\x08\xF9V[\x03\x90\xFD[\x90a\x10\x98`\xFF\x91a\n\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xAB\x90a\x02\xD1V[\x90V[\x90V[\x90a\x10\xC6a\x10\xC1a\x10\xCD\x92a\x10\xA2V[a\x10\xAEV[\x82Ta\x10\x8CV[\x90UV[a\x10\xDC\x90`\x01a\x10\xB1V[V[a\x10\xE9a\x01\0a\t\xE4V[\x90V[_\x90V[_\x90V[``\x90V[a\x11\x01a\x10\xDEV[\x90` \x80\x80\x80\x80\x80\x80\x80\x89a\x11\x14a\x10\xECV[\x81R\x01a\x11\x1Fa\x10\xECV[\x81R\x01a\x11*a\x10\xECV[\x81R\x01a\x115a\x10\xF0V[\x81R\x01a\x11@a\x10\xF0V[\x81R\x01a\x11Ka\x10\xF0V[\x81R\x01a\x11Va\x10\xF4V[\x81R\x01a\x11aa\x10\xF0V[\x81RPPV[a\x11oa\x10\xF9V[\x90V[\x90V[a\x11\x89a\x11\x84a\x11\x8E\x92a\x11rV[a\t\x11V[a\0\xA1V[\x90V[_\x7FNo transfers\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\xC5`\x0C` \x92a\x08\xAFV[a\x11\xCE\x81a\x11\x91V[\x01\x90V[a\x11\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xB8V[\x90V[\x15a\x11\xF1WV[a\x11\xF9a\0\x84V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\x0F`\x04\x82\x01a\x11\xD2V[\x03\x90\xFD[\x90V[a\x12*a\x12%a\x12/\x92a\x12\x13V[a\t\x11V[a\0\xA1V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12Ua\x12[\x91\x93\x92\x93a\0\xA1V[\x92a\0\xA1V[\x82\x03\x91\x82\x11a\x12fWV[a\x122V[\x90a\x132a\x13)`\x07a\x12|a\x10\xDEV[\x94a\x12\x93a\x12\x8B_\x83\x01a\x03\xDAV[_\x88\x01a\n\x07V[a\x12\xABa\x12\xA2`\x01\x83\x01a\x03\xDAV[` \x88\x01a\n\x07V[a\x12\xC3a\x12\xBA`\x02\x83\x01a\x03\xDAV[`@\x88\x01a\n\x07V[a\x12\xDBa\x12\xD2`\x03\x83\x01a\x03\xFEV[``\x88\x01a\n\x15V[a\x12\xF3a\x12\xEA`\x04\x83\x01a\x03\xFEV[`\x80\x88\x01a\n\x15V[a\x13\x0Ba\x13\x02`\x05\x83\x01a\x03\xFEV[`\xA0\x88\x01a\n\x15V[a\x13#a\x13\x1A`\x06\x83\x01a\x051V[`\xC0\x88\x01a\n\x99V[\x01a\x03\xFEV[`\xE0\x84\x01a\n\x15V[V[a\x13=\x90a\x12kV[\x90V[a\x13Ha\x11gV[Pa\x13ma\x13U_a\x03\x81V[a\x13ga\x13a_a\x11uV[\x91a\0\xA1V[\x11a\x11\xEAV[a\x13\x9Ca\x13\x96_a\x13\x90a\x13\x80_a\x03\x81V[a\x13\x8A`\x01a\x12\x16V[\x90a\x12FV[\x90a\x03\x8EV[Pa\x134V[\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b3661086c57005b61001f5f3561007e565b80630be1c22e146100795780634fb1a07b146100745780636813d7871461006f5780637e9703bd1461006a578063d3072d82146100655763f2cec07c0361000e57610837565b610705565b610665565b61031c565b61029c565b6100c6565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261009c57565b61008e565b90565b6100ad906100a1565b9052565b91906100c4905f602085019401906100a4565b565b346100f6576100d6366004610092565b6100f26100e1610874565b6100e9610084565b918291826100b1565b0390f35b61008a565b5f80fd5b60018060a01b031690565b610113906100ff565b90565b61011f8161010a565b0361012657565b5f80fd5b9050359061013782610116565b565b610142816100a1565b0361014957565b5f80fd5b9050359061015a82610139565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101a25781359167ffffffffffffffff831161019d57602001926001830284011161019857565b610164565b610160565b61015c565b9060e08282031261022c576101be815f840161012a565b926101cc826020850161012a565b926101da836040830161012a565b926101e8816060840161014d565b926101f6826080850161014d565b926102048360a0830161014d565b9260c082013567ffffffffffffffff8111610227576102239201610168565b9091565b6100fb565b61008e565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61027261027b6020936102809361026981610231565b93848093610235565b9586910161023e565b610249565b0190565b6102999160208201915f818403910152610253565b90565b6102cd6102bc6102ad3660046101a7565b96959095949194939293610ef4565b6102c4610084565b91829182610284565b0390f35b151590565b6102df816102d1565b036102e657565b5f80fd5b905035906102f7826102d6565b565b906020828203126103125761030f915f016102ea565b90565b61008e565b5f0190565b3461034a5761033461032f3660046102f9565b6110d1565b61033c610084565b8061034681610317565b0390f35b61008a565b9060208282031261036857610365915f0161014d565b90565b61008e565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61039781610381565b8210156103b1576103a9600891610385565b910201905f90565b61036d565b5f1c90565b60018060a01b031690565b6103d26103d7916103b6565b6103bb565b90565b6103e490546103c6565b90565b90565b6103f66103fb916103b6565b6103e7565b90565b61040890546103ea565b90565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561043f575b602083101461043a57565b61040b565b91607f169161042f565b60209181520190565b5f5260205f2090565b905f929180549061047561046e8361041f565b8094610449565b916001811690815f146104cc5750600114610490575b505050565b61049d9192939450610452565b915f925b8184106104b457505001905f808061048b565b600181602092959395548486015201910192906104a1565b92949550505060ff19168252151560200201905f808061048b565b906104f19161045b565b90565b634e487b7160e01b5f52604160045260245ffd5b9061051290610249565b810190811067ffffffffffffffff82111761052c57604052565b6104f4565b9061055161054a92610541610084565b938480926104e7565b0383610508565b565b5f9061055e82610381565b8110156105d85761056e9161038e565b509061057b5f83016103da565b91610588600182016103da565b91610595600283016103da565b916105a2600382016103fe565b916105af600483016103fe565b916105bc600582016103fe565b916105d560076105ce60068501610531565b93016103fe565b90565b5f80fd5b6105e59061010a565b9052565b98979561064460e09661063a61065b9760608e61063361064e989a6106639f9a6106299061061f61010086019e5f8701906105dc565b60208501906105dc565b60408301906105dc565b01906100a4565b60808c01906100a4565b60a08a01906100a4565b87820360c0890152610253565b9401906100a4565b565b3461069f5761069b61068061067b36600461034f565b610553565b94610692989698949194939293610084565b988998896105e9565b0390f35b61008a565b1c90565b60ff1690565b6106be9060086106c393026106a4565b6106a8565b90565b906106d191546106ae565b90565b6106e060015f906106c6565b90565b6106ec906102d1565b9052565b9190610703905f602085019401906106e3565b565b3461073557610715366004610092565b6107316107206106d4565b610728610084565b918291826106f0565b0390f35b61008a565b6107439061010a565b9052565b610750906100a1565b9052565b61077361077c6020936107819361076a81610231565b93848093610449565b9586910161023e565b610249565b0190565b9061081c9060e08061081161010084016107a55f8801515f87019061073a565b6107b76020880151602087019061073a565b6107c96040880151604087019061073a565b6107db60608801516060870190610747565b6107ed60808801516080870190610747565b6107ff60a088015160a0870190610747565b60c087015185820360c0870152610754565b940151910190610747565b90565b6108349160208201915f818403910152610785565b90565b3461086757610847366004610092565b610863610852611340565b61085a610084565b9182918261081f565b0390f35b61008a565b5f80fd5b5f90565b61087c610870565b506108865f610381565b90565b606090565b61089a61089f916103b6565b6106a8565b90565b6108ac905461088e565b90565b60209181520190565b5f7f417262697472756d20627269646765206661696c656400000000000000000000910152565b6108ec60166020926108af565b6108f5816108b8565b0190565b61090e9060208101905f8183039101526108df565b90565b90565b61092861092361092d926100ff565b610911565b6100ff565b90565b61093990610914565b90565b61094590610930565b90565b61095190610914565b90565b61095d90610948565b90565b61096990610948565b90565b60e01b90565b9050519061097f826102d6565b565b9060208282031261099a57610997915f01610972565b90565b61008e565b6040906109c86109cf94969593966109be60608401985f8501906105dc565b60208301906105dc565b01906100a4565b565b6109d9610084565b3d5f823e3d90fd5b90565b906109f76109f0610084565b9283610508565b565b610a046101006109e4565b90565b90610a119061010a565b9052565b90610a1f906100a1565b9052565b5f80fd5b67ffffffffffffffff8111610a4557610a41602091610249565b0190565b6104f4565b90825f939282370152565b90929192610a6a610a6582610a27565b6109e4565b93818552602085019082840111610a8657610a8492610a4a565b565b610a23565b610a96913691610a55565b90565b52565b5f5260205f2090565b5490565b610ab281610aa5565b821015610acc57610ac4600891610a9c565b910201905f90565b61036d565b634e487b7160e01b5f525f60045260245ffd5b610aee905161010a565b90565b5f1b90565b90610b0760018060a01b0391610af1565b9181191691161790565b610b1a90610948565b90565b90565b90610b35610b30610b3c92610b11565b610b1d565b8254610af6565b9055565b610b4a90516100a1565b90565b90610b595f1991610af1565b9181191691161790565b610b77610b72610b7c926100a1565b610911565b6100a1565b90565b90565b90610b97610b92610b9e92610b63565b610b7f565b8254610b4d565b9055565b5190565b601f602091010490565b1b90565b91906008610bcf910291610bc95f1984610bb0565b92610bb0565b9181191691161790565b9190610bef610bea610bf793610b63565b610b7f565b908354610bb4565b9055565b610c0d91610c07610870565b91610bd9565b565b5b818110610c1b575050565b80610c285f600193610bfb565b01610c10565b9190601f8111610c3e575b505050565b610c4a610c6f93610452565b906020610c5684610ba6565b83019310610c77575b610c6890610ba6565b0190610c0f565b5f8080610c39565b9150610c6881929050610c5f565b90610c95905f19906008026106a4565b191690565b81610ca491610c85565b906002021790565b90610cb681610231565b9067ffffffffffffffff8211610d7657610cda82610cd4855461041f565b85610c2e565b602090601f8311600114610d0e57918091610cfd935f92610d02575b5050610c9a565b90555b565b90915001515f80610cf6565b601f19831691610d1d85610452565b925f5b818110610d5e57509160029391856001969410610d44575b50505002019055610d00565b610d54910151601f841690610c85565b90555f8080610d38565b91936020600181928787015181550195019201610d20565b6104f4565b90610d8591610cac565b565b90610e4860e06007610e4e94610daa5f8201610da45f8801610ae4565b90610b20565b610dc360018201610dbd60208801610ae4565b90610b20565b610ddc60028201610dd660408801610ae4565b90610b20565b610df560038201610def60608801610b40565b90610b82565b610e0e60048201610e0860808801610b40565b90610b82565b610e2760058201610e2160a08801610b40565b90610b82565b610e4060068201610e3a60c08801610ba2565b90610d7b565b019201610b40565b90610b82565b565b9190610e6157610e5f91610d87565b565b610ad1565b9081549168010000000000000000831015610e965782610e8e916001610e9495018155610aa9565b90610e50565b565b6104f4565b5f7f7375636365737300000000000000000000000000000000000000000000000000910152565b610ecf60076020926108af565b610ed881610e9b565b0190565b610ef19060208101905f818303910152610ec2565b90565b96939591949095610f03610889565b50610f0e60016108a2565b61106a57610f23610f1e8961093c565b610954565b60206323b872dd913390610f535f610f3a30610960565b95610f5e8b610f47610084565b9889978896879561096c565b85526004850161099f565b03925af1801561106557611039575b505f610f78906109e1565b9796959390919294933496610f8b6109f9565b985f8a0190610f9991610a07565b6020890190610fa791610a07565b6040880190610fb591610a07565b6060870190610fc391610a15565b6080860190610fd191610a15565b60a0850190610fdf91610a15565b610fe891610a8b565b60c0830190610ff691610a99565b60e082019061100491610a15565b61100d91610e66565b611015610084565b806020810161102390610edc565b6020820181038252036110369082610508565b90565b6110599060203d811161105e575b6110518183610508565b810190610981565b610f6d565b503d611047565b6109d1565b611072610084565b62461bcd60e51b815280611088600482016108f9565b0390fd5b9061109860ff91610af1565b9181191691161790565b6110ab906102d1565b90565b90565b906110c66110c16110cd926110a2565b6110ae565b825461108c565b9055565b6110dc9060016110b1565b565b6110e96101006109e4565b90565b5f90565b5f90565b606090565b6111016110de565b90602080808080808080896111146110ec565b81520161111f6110ec565b81520161112a6110ec565b8152016111356110f0565b8152016111406110f0565b81520161114b6110f0565b8152016111566110f4565b8152016111616110f0565b81525050565b61116f6110f9565b90565b90565b61118961118461118e92611172565b610911565b6100a1565b90565b5f7f4e6f207472616e73666572730000000000000000000000000000000000000000910152565b6111c5600c6020926108af565b6111ce81611191565b0190565b6111e79060208101905f8183039101526111b8565b90565b156111f157565b6111f9610084565b62461bcd60e51b81528061120f600482016111d2565b0390fd5b90565b61122a61122561122f92611213565b610911565b6100a1565b90565b634e487b7160e01b5f52601160045260245ffd5b61125561125b919392936100a1565b926100a1565b820391821161126657565b611232565b90611332611329600761127c6110de565b9461129361128b5f83016103da565b5f8801610a07565b6112ab6112a2600183016103da565b60208801610a07565b6112c36112ba600283016103da565b60408801610a07565b6112db6112d2600383016103fe565b60608801610a15565b6112f36112ea600483016103fe565b60808801610a15565b61130b611302600583016103fe565b60a08801610a15565b61132361131a60068301610531565b60c08801610a99565b016103fe565b60e08401610a15565b565b61133d9061126b565b90565b611348611167565b5061136d6113555f610381565b6113676113615f611175565b916100a1565b116111ea565b61139c6113965f6113906113805f610381565b61138a6001611216565b90611246565b9061038e565b50611334565b9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\x08lW\0[a\0\x1F_5a\0~V[\x80c\x0B\xE1\xC2.\x14a\0yW\x80cO\xB1\xA0{\x14a\0tW\x80ch\x13\xD7\x87\x14a\0oW\x80c~\x97\x03\xBD\x14a\0jW\x80c\xD3\x07-\x82\x14a\0eWc\xF2\xCE\xC0|\x03a\0\x0EWa\x087V[a\x07\x05V[a\x06eV[a\x03\x1CV[a\x02\x9CV[a\0\xC6V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\x9CWV[a\0\x8EV[\x90V[a\0\xAD\x90a\0\xA1V[\x90RV[\x91\x90a\0\xC4\x90_` \x85\x01\x94\x01\x90a\0\xA4V[V[4a\0\xF6Wa\0\xD66`\x04a\0\x92V[a\0\xF2a\0\xE1a\x08tV[a\0\xE9a\0\x84V[\x91\x82\x91\x82a\0\xB1V[\x03\x90\xF3[a\0\x8AV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x13\x90a\0\xFFV[\x90V[a\x01\x1F\x81a\x01\nV[\x03a\x01&WV[_\x80\xFD[\x90P5\x90a\x017\x82a\x01\x16V[V[a\x01B\x81a\0\xA1V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xA2W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x9DW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x98WV[a\x01dV[a\x01`V[a\x01\\V[\x90`\xE0\x82\x82\x03\x12a\x02,Wa\x01\xBE\x81_\x84\x01a\x01*V[\x92a\x01\xCC\x82` \x85\x01a\x01*V[\x92a\x01\xDA\x83`@\x83\x01a\x01*V[\x92a\x01\xE8\x81``\x84\x01a\x01MV[\x92a\x01\xF6\x82`\x80\x85\x01a\x01MV[\x92a\x02\x04\x83`\xA0\x83\x01a\x01MV[\x92`\xC0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02'Wa\x02#\x92\x01a\x01hV[\x90\x91V[a\0\xFBV[a\0\x8EV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02ra\x02{` \x93a\x02\x80\x93a\x02i\x81a\x021V[\x93\x84\x80\x93a\x025V[\x95\x86\x91\x01a\x02>V[a\x02IV[\x01\x90V[a\x02\x99\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02SV[\x90V[a\x02\xCDa\x02\xBCa\x02\xAD6`\x04a\x01\xA7V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x0E\xF4V[a\x02\xC4a\0\x84V[\x91\x82\x91\x82a\x02\x84V[\x03\x90\xF3[\x15\x15\x90V[a\x02\xDF\x81a\x02\xD1V[\x03a\x02\xE6WV[_\x80\xFD[\x90P5\x90a\x02\xF7\x82a\x02\xD6V[V[\x90` \x82\x82\x03\x12a\x03\x12Wa\x03\x0F\x91_\x01a\x02\xEAV[\x90V[a\0\x8EV[_\x01\x90V[4a\x03JWa\x034a\x03/6`\x04a\x02\xF9V[a\x10\xD1V[a\x03<a\0\x84V[\x80a\x03F\x81a\x03\x17V[\x03\x90\xF3[a\0\x8AV[\x90` \x82\x82\x03\x12a\x03hWa\x03e\x91_\x01a\x01MV[\x90V[a\0\x8EV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x03\x97\x81a\x03\x81V[\x82\x10\x15a\x03\xB1Wa\x03\xA9`\x08\x91a\x03\x85V[\x91\x02\x01\x90_\x90V[a\x03mV[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xD2a\x03\xD7\x91a\x03\xB6V[a\x03\xBBV[\x90V[a\x03\xE4\x90Ta\x03\xC6V[\x90V[\x90V[a\x03\xF6a\x03\xFB\x91a\x03\xB6V[a\x03\xE7V[\x90V[a\x04\x08\x90Ta\x03\xEAV[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04?W[` \x83\x10\x14a\x04:WV[a\x04\x0BV[\x91`\x7F\x16\x91a\x04/V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04ua\x04n\x83a\x04\x1FV[\x80\x94a\x04IV[\x91`\x01\x81\x16\x90\x81_\x14a\x04\xCCWP`\x01\x14a\x04\x90W[PPPV[a\x04\x9D\x91\x92\x93\x94Pa\x04RV[\x91_\x92[\x81\x84\x10a\x04\xB4WPP\x01\x90_\x80\x80a\x04\x8BV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04\xA1V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04\x8BV[\x90a\x04\xF1\x91a\x04[V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x05\x12\x90a\x02IV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05,W`@RV[a\x04\xF4V[\x90a\x05Qa\x05J\x92a\x05Aa\0\x84V[\x93\x84\x80\x92a\x04\xE7V[\x03\x83a\x05\x08V[V[_\x90a\x05^\x82a\x03\x81V[\x81\x10\x15a\x05\xD8Wa\x05n\x91a\x03\x8EV[P\x90a\x05{_\x83\x01a\x03\xDAV[\x91a\x05\x88`\x01\x82\x01a\x03\xDAV[\x91a\x05\x95`\x02\x83\x01a\x03\xDAV[\x91a\x05\xA2`\x03\x82\x01a\x03\xFEV[\x91a\x05\xAF`\x04\x83\x01a\x03\xFEV[\x91a\x05\xBC`\x05\x82\x01a\x03\xFEV[\x91a\x05\xD5`\x07a\x05\xCE`\x06\x85\x01a\x051V[\x93\x01a\x03\xFEV[\x90V[_\x80\xFD[a\x05\xE5\x90a\x01\nV[\x90RV[\x98\x97\x95a\x06D`\xE0\x96a\x06:a\x06[\x97``\x8Ea\x063a\x06N\x98\x9Aa\x06c\x9F\x9Aa\x06)\x90a\x06\x1Fa\x01\0\x86\x01\x9E_\x87\x01\x90a\x05\xDCV[` \x85\x01\x90a\x05\xDCV[`@\x83\x01\x90a\x05\xDCV[\x01\x90a\0\xA4V[`\x80\x8C\x01\x90a\0\xA4V[`\xA0\x8A\x01\x90a\0\xA4V[\x87\x82\x03`\xC0\x89\x01Ra\x02SV[\x94\x01\x90a\0\xA4V[V[4a\x06\x9FWa\x06\x9Ba\x06\x80a\x06{6`\x04a\x03OV[a\x05SV[\x94a\x06\x92\x98\x96\x98\x94\x91\x94\x93\x92\x93a\0\x84V[\x98\x89\x98\x89a\x05\xE9V[\x03\x90\xF3[a\0\x8AV[\x1C\x90V[`\xFF\x16\x90V[a\x06\xBE\x90`\x08a\x06\xC3\x93\x02a\x06\xA4V[a\x06\xA8V[\x90V[\x90a\x06\xD1\x91Ta\x06\xAEV[\x90V[a\x06\xE0`\x01_\x90a\x06\xC6V[\x90V[a\x06\xEC\x90a\x02\xD1V[\x90RV[\x91\x90a\x07\x03\x90_` \x85\x01\x94\x01\x90a\x06\xE3V[V[4a\x075Wa\x07\x156`\x04a\0\x92V[a\x071a\x07 a\x06\xD4V[a\x07(a\0\x84V[\x91\x82\x91\x82a\x06\xF0V[\x03\x90\xF3[a\0\x8AV[a\x07C\x90a\x01\nV[\x90RV[a\x07P\x90a\0\xA1V[\x90RV[a\x07sa\x07|` \x93a\x07\x81\x93a\x07j\x81a\x021V[\x93\x84\x80\x93a\x04IV[\x95\x86\x91\x01a\x02>V[a\x02IV[\x01\x90V[\x90a\x08\x1C\x90`\xE0\x80a\x08\x11a\x01\0\x84\x01a\x07\xA5_\x88\x01Q_\x87\x01\x90a\x07:V[a\x07\xB7` \x88\x01Q` \x87\x01\x90a\x07:V[a\x07\xC9`@\x88\x01Q`@\x87\x01\x90a\x07:V[a\x07\xDB``\x88\x01Q``\x87\x01\x90a\x07GV[a\x07\xED`\x80\x88\x01Q`\x80\x87\x01\x90a\x07GV[a\x07\xFF`\xA0\x88\x01Q`\xA0\x87\x01\x90a\x07GV[`\xC0\x87\x01Q\x85\x82\x03`\xC0\x87\x01Ra\x07TV[\x94\x01Q\x91\x01\x90a\x07GV[\x90V[a\x084\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07\x85V[\x90V[4a\x08gWa\x08G6`\x04a\0\x92V[a\x08ca\x08Ra\x13@V[a\x08Za\0\x84V[\x91\x82\x91\x82a\x08\x1FV[\x03\x90\xF3[a\0\x8AV[_\x80\xFD[_\x90V[a\x08|a\x08pV[Pa\x08\x86_a\x03\x81V[\x90V[``\x90V[a\x08\x9Aa\x08\x9F\x91a\x03\xB6V[a\x06\xA8V[\x90V[a\x08\xAC\x90Ta\x08\x8EV[\x90V[` \x91\x81R\x01\x90V[_\x7FArbitrum bridge failed\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x08\xEC`\x16` \x92a\x08\xAFV[a\x08\xF5\x81a\x08\xB8V[\x01\x90V[a\t\x0E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xDFV[\x90V[\x90V[a\t(a\t#a\t-\x92a\0\xFFV[a\t\x11V[a\0\xFFV[\x90V[a\t9\x90a\t\x14V[\x90V[a\tE\x90a\t0V[\x90V[a\tQ\x90a\t\x14V[\x90V[a\t]\x90a\tHV[\x90V[a\ti\x90a\tHV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\t\x7F\x82a\x02\xD6V[V[\x90` \x82\x82\x03\x12a\t\x9AWa\t\x97\x91_\x01a\trV[\x90V[a\0\x8EV[`@\x90a\t\xC8a\t\xCF\x94\x96\x95\x93\x96a\t\xBE``\x84\x01\x98_\x85\x01\x90a\x05\xDCV[` \x83\x01\x90a\x05\xDCV[\x01\x90a\0\xA4V[V[a\t\xD9a\0\x84V[=_\x82>=\x90\xFD[\x90V[\x90a\t\xF7a\t\xF0a\0\x84V[\x92\x83a\x05\x08V[V[a\n\x04a\x01\0a\t\xE4V[\x90V[\x90a\n\x11\x90a\x01\nV[\x90RV[\x90a\n\x1F\x90a\0\xA1V[\x90RV[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\nEWa\nA` \x91a\x02IV[\x01\x90V[a\x04\xF4V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\nja\ne\x82a\n'V[a\t\xE4V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\n\x86Wa\n\x84\x92a\nJV[V[a\n#V[a\n\x96\x916\x91a\nUV[\x90V[RV[_R` _ \x90V[T\x90V[a\n\xB2\x81a\n\xA5V[\x82\x10\x15a\n\xCCWa\n\xC4`\x08\x91a\n\x9CV[\x91\x02\x01\x90_\x90V[a\x03mV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[a\n\xEE\x90Qa\x01\nV[\x90V[_\x1B\x90V[\x90a\x0B\x07`\x01\x80`\xA0\x1B\x03\x91a\n\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0B\x1A\x90a\tHV[\x90V[\x90V[\x90a\x0B5a\x0B0a\x0B<\x92a\x0B\x11V[a\x0B\x1DV[\x82Ta\n\xF6V[\x90UV[a\x0BJ\x90Qa\0\xA1V[\x90V[\x90a\x0BY_\x19\x91a\n\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Bwa\x0Bra\x0B|\x92a\0\xA1V[a\t\x11V[a\0\xA1V[\x90V[\x90V[\x90a\x0B\x97a\x0B\x92a\x0B\x9E\x92a\x0BcV[a\x0B\x7FV[\x82Ta\x0BMV[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0B\xCF\x91\x02\x91a\x0B\xC9_\x19\x84a\x0B\xB0V[\x92a\x0B\xB0V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0B\xEFa\x0B\xEAa\x0B\xF7\x93a\x0BcV[a\x0B\x7FV[\x90\x83Ta\x0B\xB4V[\x90UV[a\x0C\r\x91a\x0C\x07a\x08pV[\x91a\x0B\xD9V[V[[\x81\x81\x10a\x0C\x1BWPPV[\x80a\x0C(_`\x01\x93a\x0B\xFBV[\x01a\x0C\x10V[\x91\x90`\x1F\x81\x11a\x0C>W[PPPV[a\x0CJa\x0Co\x93a\x04RV[\x90` a\x0CV\x84a\x0B\xA6V[\x83\x01\x93\x10a\x0CwW[a\x0Ch\x90a\x0B\xA6V[\x01\x90a\x0C\x0FV[_\x80\x80a\x0C9V[\x91Pa\x0Ch\x81\x92\x90Pa\x0C_V[\x90a\x0C\x95\x90_\x19\x90`\x08\x02a\x06\xA4V[\x19\x16\x90V[\x81a\x0C\xA4\x91a\x0C\x85V[\x90`\x02\x02\x17\x90V[\x90a\x0C\xB6\x81a\x021V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\rvWa\x0C\xDA\x82a\x0C\xD4\x85Ta\x04\x1FV[\x85a\x0C.V[` \x90`\x1F\x83\x11`\x01\x14a\r\x0EW\x91\x80\x91a\x0C\xFD\x93_\x92a\r\x02W[PPa\x0C\x9AV[\x90U[V[\x90\x91P\x01Q_\x80a\x0C\xF6V[`\x1F\x19\x83\x16\x91a\r\x1D\x85a\x04RV[\x92_[\x81\x81\x10a\r^WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\rDW[PPP\x02\x01\x90Ua\r\0V[a\rT\x91\x01Q`\x1F\x84\x16\x90a\x0C\x85V[\x90U_\x80\x80a\r8V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\r V[a\x04\xF4V[\x90a\r\x85\x91a\x0C\xACV[V[\x90a\x0EH`\xE0`\x07a\x0EN\x94a\r\xAA_\x82\x01a\r\xA4_\x88\x01a\n\xE4V[\x90a\x0B V[a\r\xC3`\x01\x82\x01a\r\xBD` \x88\x01a\n\xE4V[\x90a\x0B V[a\r\xDC`\x02\x82\x01a\r\xD6`@\x88\x01a\n\xE4V[\x90a\x0B V[a\r\xF5`\x03\x82\x01a\r\xEF``\x88\x01a\x0B@V[\x90a\x0B\x82V[a\x0E\x0E`\x04\x82\x01a\x0E\x08`\x80\x88\x01a\x0B@V[\x90a\x0B\x82V[a\x0E'`\x05\x82\x01a\x0E!`\xA0\x88\x01a\x0B@V[\x90a\x0B\x82V[a\x0E@`\x06\x82\x01a\x0E:`\xC0\x88\x01a\x0B\xA2V[\x90a\r{V[\x01\x92\x01a\x0B@V[\x90a\x0B\x82V[V[\x91\x90a\x0EaWa\x0E_\x91a\r\x87V[V[a\n\xD1V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x0E\x96W\x82a\x0E\x8E\x91`\x01a\x0E\x94\x95\x01\x81Ua\n\xA9V[\x90a\x0EPV[V[a\x04\xF4V[_\x7Fsuccess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0E\xCF`\x07` \x92a\x08\xAFV[a\x0E\xD8\x81a\x0E\x9BV[\x01\x90V[a\x0E\xF1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0E\xC2V[\x90V[\x96\x93\x95\x91\x94\x90\x95a\x0F\x03a\x08\x89V[Pa\x0F\x0E`\x01a\x08\xA2V[a\x10jWa\x0F#a\x0F\x1E\x89a\t<V[a\tTV[` c#\xB8r\xDD\x913\x90a\x0FS_a\x0F:0a\t`V[\x95a\x0F^\x8Ba\x0FGa\0\x84V[\x98\x89\x97\x88\x96\x87\x95a\tlV[\x85R`\x04\x85\x01a\t\x9FV[\x03\x92Z\xF1\x80\x15a\x10eWa\x109W[P_a\x0Fx\x90a\t\xE1V[\x97\x96\x95\x93\x90\x91\x92\x94\x934\x96a\x0F\x8Ba\t\xF9V[\x98_\x8A\x01\x90a\x0F\x99\x91a\n\x07V[` \x89\x01\x90a\x0F\xA7\x91a\n\x07V[`@\x88\x01\x90a\x0F\xB5\x91a\n\x07V[``\x87\x01\x90a\x0F\xC3\x91a\n\x15V[`\x80\x86\x01\x90a\x0F\xD1\x91a\n\x15V[`\xA0\x85\x01\x90a\x0F\xDF\x91a\n\x15V[a\x0F\xE8\x91a\n\x8BV[`\xC0\x83\x01\x90a\x0F\xF6\x91a\n\x99V[`\xE0\x82\x01\x90a\x10\x04\x91a\n\x15V[a\x10\r\x91a\x0EfV[a\x10\x15a\0\x84V[\x80` \x81\x01a\x10#\x90a\x0E\xDCV[` \x82\x01\x81\x03\x82R\x03a\x106\x90\x82a\x05\x08V[\x90V[a\x10Y\x90` =\x81\x11a\x10^W[a\x10Q\x81\x83a\x05\x08V[\x81\x01\x90a\t\x81V[a\x0FmV[P=a\x10GV[a\t\xD1V[a\x10ra\0\x84V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10\x88`\x04\x82\x01a\x08\xF9V[\x03\x90\xFD[\x90a\x10\x98`\xFF\x91a\n\xF1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xAB\x90a\x02\xD1V[\x90V[\x90V[\x90a\x10\xC6a\x10\xC1a\x10\xCD\x92a\x10\xA2V[a\x10\xAEV[\x82Ta\x10\x8CV[\x90UV[a\x10\xDC\x90`\x01a\x10\xB1V[V[a\x10\xE9a\x01\0a\t\xE4V[\x90V[_\x90V[_\x90V[``\x90V[a\x11\x01a\x10\xDEV[\x90` \x80\x80\x80\x80\x80\x80\x80\x89a\x11\x14a\x10\xECV[\x81R\x01a\x11\x1Fa\x10\xECV[\x81R\x01a\x11*a\x10\xECV[\x81R\x01a\x115a\x10\xF0V[\x81R\x01a\x11@a\x10\xF0V[\x81R\x01a\x11Ka\x10\xF0V[\x81R\x01a\x11Va\x10\xF4V[\x81R\x01a\x11aa\x10\xF0V[\x81RPPV[a\x11oa\x10\xF9V[\x90V[\x90V[a\x11\x89a\x11\x84a\x11\x8E\x92a\x11rV[a\t\x11V[a\0\xA1V[\x90V[_\x7FNo transfers\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x11\xC5`\x0C` \x92a\x08\xAFV[a\x11\xCE\x81a\x11\x91V[\x01\x90V[a\x11\xE7\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x11\xB8V[\x90V[\x15a\x11\xF1WV[a\x11\xF9a\0\x84V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\x0F`\x04\x82\x01a\x11\xD2V[\x03\x90\xFD[\x90V[a\x12*a\x12%a\x12/\x92a\x12\x13V[a\t\x11V[a\0\xA1V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x12Ua\x12[\x91\x93\x92\x93a\0\xA1V[\x92a\0\xA1V[\x82\x03\x91\x82\x11a\x12fWV[a\x122V[\x90a\x132a\x13)`\x07a\x12|a\x10\xDEV[\x94a\x12\x93a\x12\x8B_\x83\x01a\x03\xDAV[_\x88\x01a\n\x07V[a\x12\xABa\x12\xA2`\x01\x83\x01a\x03\xDAV[` \x88\x01a\n\x07V[a\x12\xC3a\x12\xBA`\x02\x83\x01a\x03\xDAV[`@\x88\x01a\n\x07V[a\x12\xDBa\x12\xD2`\x03\x83\x01a\x03\xFEV[``\x88\x01a\n\x15V[a\x12\xF3a\x12\xEA`\x04\x83\x01a\x03\xFEV[`\x80\x88\x01a\n\x15V[a\x13\x0Ba\x13\x02`\x05\x83\x01a\x03\xFEV[`\xA0\x88\x01a\n\x15V[a\x13#a\x13\x1A`\x06\x83\x01a\x051V[`\xC0\x88\x01a\n\x99V[\x01a\x03\xFEV[`\xE0\x84\x01a\n\x15V[V[a\x13=\x90a\x12kV[\x90V[a\x13Ha\x11gV[Pa\x13ma\x13U_a\x03\x81V[a\x13ga\x13a_a\x11uV[\x91a\0\xA1V[\x11a\x11\xEAV[a\x13\x9Ca\x13\x96_a\x13\x90a\x13\x80_a\x03\x81V[a\x13\x8A`\x01a\x12\x16V[\x90a\x12FV[\x90a\x03\x8EV[Pa\x134V[\x90V",
    );
    /**```solidity
struct TransferCall { address token; address refundTo; address to; uint256 amount; uint256 maxGas; uint256 gasPriceBid; bytes data; uint256 ethValue; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransferCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub refundTo: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub ethValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransferCall> for UnderlyingRustTuple<'_> {
            fn from(value: TransferCall) -> Self {
                (
                    value.token,
                    value.refundTo,
                    value.to,
                    value.amount,
                    value.maxGas,
                    value.gasPriceBid,
                    value.data,
                    value.ethValue,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransferCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    token: tuple.0,
                    refundTo: tuple.1,
                    to: tuple.2,
                    amount: tuple.3,
                    maxGas: tuple.4,
                    gasPriceBid: tuple.5,
                    data: tuple.6,
                    ethValue: tuple.7,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for TransferCall {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for TransferCall {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.refundTo,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gasPriceBid),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethValue),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for TransferCall {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for TransferCall {
            const NAME: &'static str = "TransferCall";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "TransferCall(address token,address refundTo,address to,uint256 amount,uint256 maxGas,uint256 gasPriceBid,bytes data,uint256 ethValue)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.token,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.refundTo,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.to,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amount)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxGas)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.gasPriceBid)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.ethValue)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for TransferCall {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.token,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.refundTo,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.to,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amount,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxGas,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.gasPriceBid,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.ethValue,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.token,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.refundTo,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.to,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amount,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxGas,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.gasPriceBid,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.ethValue,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `getLastTransferCall()` and selector `0xf2cec07c`.
```solidity
function getLastTransferCall() external view returns (TransferCall memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastTransferCallCall {}
    ///Container type for the return parameters of the [`getLastTransferCall()`](getLastTransferCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastTransferCallReturn {
        #[allow(missing_docs)]
        pub _0: <TransferCall as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastTransferCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastTransferCallCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastTransferCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (TransferCall,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <TransferCall as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastTransferCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastTransferCallReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastTransferCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getLastTransferCallCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getLastTransferCallReturn;
            type ReturnTuple<'a> = (TransferCall,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getLastTransferCall()";
            const SELECTOR: [u8; 4] = [242u8, 206u8, 192u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getTransferCallCount()` and selector `0x0be1c22e`.
```solidity
function getTransferCallCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTransferCallCountCall {}
    ///Container type for the return parameters of the [`getTransferCallCount()`](getTransferCallCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTransferCallCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTransferCallCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTransferCallCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTransferCallCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTransferCallCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTransferCallCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTransferCallCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTransferCallCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getTransferCallCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTransferCallCount()";
            const SELECTOR: [u8; 4] = [11u8, 225u8, 194u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `outboundTransferCustomRefund(address,address,address,uint256,uint256,uint256,bytes)` and selector `0x4fb1a07b`.
```solidity
function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes memory _data) external payable returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct outboundTransferCustomRefundCall {
        #[allow(missing_docs)]
        pub _token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _refundTo: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`outboundTransferCustomRefund(address,address,address,uint256,uint256,uint256,bytes)`](outboundTransferCustomRefundCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct outboundTransferCustomRefundReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<outboundTransferCustomRefundCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: outboundTransferCustomRefundCall) -> Self {
                    (
                        value._token,
                        value._refundTo,
                        value._to,
                        value._amount,
                        value._maxGas,
                        value._gasPriceBid,
                        value._data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for outboundTransferCustomRefundCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _token: tuple.0,
                        _refundTo: tuple.1,
                        _to: tuple.2,
                        _amount: tuple.3,
                        _maxGas: tuple.4,
                        _gasPriceBid: tuple.5,
                        _data: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<outboundTransferCustomRefundReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: outboundTransferCustomRefundReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for outboundTransferCustomRefundReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for outboundTransferCustomRefundCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = outboundTransferCustomRefundReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "outboundTransferCustomRefund(address,address,address,uint256,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 177u8, 160u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._refundTo,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._amount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShouldRevert(bool)` and selector `0x6813d787`.
```solidity
function setShouldRevert(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setShouldRevert(bool)`](setShouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldRevertCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldRevertReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldRevert(bool)";
            const SELECTOR: [u8; 4] = [104u8, 19u8, 215u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall {}
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = shouldRevertReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferCalls(uint256)` and selector `0x7e9703bd`.
```solidity
function transferCalls(uint256) external view returns (address token, address refundTo, address to, uint256 amount, uint256 maxGas, uint256 gasPriceBid, bytes memory data, uint256 ethValue);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferCallsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferCalls(uint256)`](transferCallsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferCallsReturn {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub refundTo: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub ethValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCallsCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCallsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCallsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCallsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferCallsReturn) -> Self {
                    (
                        value.token,
                        value.refundTo,
                        value.to,
                        value.amount,
                        value.maxGas,
                        value.gasPriceBid,
                        value.data,
                        value.ethValue,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCallsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        refundTo: tuple.1,
                        to: tuple.2,
                        amount: tuple.3,
                        maxGas: tuple.4,
                        gasPriceBid: tuple.5,
                        data: tuple.6,
                        ethValue: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCallsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferCallsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferCalls(uint256)";
            const SELECTOR: [u8; 4] = [126u8, 151u8, 3u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockArbitrumBridge`](self) function calls.
    pub enum MockArbitrumBridgeCalls {
        #[allow(missing_docs)]
        getLastTransferCall(getLastTransferCallCall),
        #[allow(missing_docs)]
        getTransferCallCount(getTransferCallCountCall),
        #[allow(missing_docs)]
        outboundTransferCustomRefund(outboundTransferCustomRefundCall),
        #[allow(missing_docs)]
        setShouldRevert(setShouldRevertCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
        #[allow(missing_docs)]
        transferCalls(transferCallsCall),
    }
    #[automatically_derived]
    impl MockArbitrumBridgeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 225u8, 194u8, 46u8],
            [79u8, 177u8, 160u8, 123u8],
            [104u8, 19u8, 215u8, 135u8],
            [126u8, 151u8, 3u8, 189u8],
            [211u8, 7u8, 45u8, 130u8],
            [242u8, 206u8, 192u8, 124u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockArbitrumBridgeCalls {
        const NAME: &'static str = "MockArbitrumBridgeCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getLastTransferCall(_) => {
                    <getLastTransferCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTransferCallCount(_) => {
                    <getTransferCallCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::outboundTransferCustomRefund(_) => {
                    <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldRevert(_) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferCalls(_) => {
                    <transferCallsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls>] = &[
                {
                    fn getTransferCallCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <getTransferCallCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::getTransferCallCount)
                    }
                    getTransferCallCount
                },
                {
                    fn outboundTransferCustomRefund(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::outboundTransferCustomRefund)
                    }
                    outboundTransferCustomRefund
                },
                {
                    fn setShouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn transferCalls(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <transferCallsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::transferCalls)
                    }
                    transferCalls
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn getLastTransferCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <getLastTransferCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::getLastTransferCall)
                    }
                    getLastTransferCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getLastTransferCall(inner) => {
                    <getLastTransferCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTransferCallCount(inner) => {
                    <getTransferCallCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::outboundTransferCustomRefund(inner) => {
                    <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferCalls(inner) => {
                    <transferCallsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getLastTransferCall(inner) => {
                    <getLastTransferCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTransferCallCount(inner) => {
                    <getTransferCallCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::outboundTransferCustomRefund(inner) => {
                    <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferCalls(inner) => {
                    <transferCallsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockArbitrumBridge`](self) contract instance.

See the [wrapper's documentation](`MockArbitrumBridgeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockArbitrumBridgeInstance<T, P, N> {
        MockArbitrumBridgeInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockArbitrumBridgeInstance<T, P, N>>,
    > {
        MockArbitrumBridgeInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockArbitrumBridgeInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockArbitrumBridge`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockArbitrumBridge`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockArbitrumBridgeInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockArbitrumBridgeInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockArbitrumBridgeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbitrumBridgeInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockArbitrumBridge`](self) contract instance.

See the [wrapper's documentation](`MockArbitrumBridgeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockArbitrumBridgeInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockArbitrumBridgeInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockArbitrumBridgeInstance<T, P, N> {
            MockArbitrumBridgeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbitrumBridgeInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getLastTransferCall`] function.
        pub fn getLastTransferCall(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getLastTransferCallCall, N> {
            self.call_builder(&getLastTransferCallCall {})
        }
        ///Creates a new call builder for the [`getTransferCallCount`] function.
        pub fn getTransferCallCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getTransferCallCountCall, N> {
            self.call_builder(&getTransferCallCountCall {})
        }
        ///Creates a new call builder for the [`outboundTransferCustomRefund`] function.
        pub fn outboundTransferCustomRefund(
            &self,
            _token: alloy::sol_types::private::Address,
            _refundTo: alloy::sol_types::private::Address,
            _to: alloy::sol_types::private::Address,
            _amount: alloy::sol_types::private::primitives::aliases::U256,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, outboundTransferCustomRefundCall, N> {
            self.call_builder(
                &outboundTransferCustomRefundCall {
                    _token,
                    _refundTo,
                    _to,
                    _amount,
                    _maxGas,
                    _gasPriceBid,
                    _data,
                },
            )
        }
        ///Creates a new call builder for the [`setShouldRevert`] function.
        pub fn setShouldRevert(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShouldRevertCall, N> {
            self.call_builder(
                &setShouldRevertCall {
                    _shouldRevert,
                },
            )
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall {})
        }
        ///Creates a new call builder for the [`transferCalls`] function.
        pub fn transferCalls(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCallsCall, N> {
            self.call_builder(&transferCallsCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbitrumBridgeInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
