/**

Generated by the following Solidity interface...
```solidity
interface MockArbitrumBridge {
    struct TransferCall {
        address token;
        address refundTo;
        address to;
        uint256 amount;
        uint256 maxGas;
        uint256 gasPriceBid;
        bytes data;
        uint256 ethValue;
    }

    constructor();

    receive() external payable;

    function getGateway(address) external view returns (address);
    function getLastTransferCall() external view returns (TransferCall memory);
    function getTransferCallCount() external view returns (uint256);
    function mockGateway() external view returns (address);
    function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes memory _data) external payable returns (bytes memory);
    function setShouldRevert(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
    function transferCalls(uint256) external view returns (address token, address refundTo, address to, uint256 amount, uint256 maxGas, uint256 gasPriceBid, bytes memory data, uint256 ethValue);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "receive",
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "getGateway",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getLastTransferCall",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct MockArbitrumBridge.TransferCall",
        "components": [
          {
            "name": "token",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "refundTo",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "to",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "maxGas",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "gasPriceBid",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "ethValue",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTransferCallCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mockGateway",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "outboundTransferCustomRefund",
    "inputs": [
      {
        "name": "_token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_refundTo",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "setShouldRevert",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferCalls",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "refundTo",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxGas",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "gasPriceBid",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "ethValue",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockArbitrumBridge {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234602257600e60b0565b60146026565b6114d26100c282396114d290f35b602c565b60405190565b5f80fd5b60018060a01b031690565b90565b604d60496051926030565b603b565b6030565b90565b605b90603e565b90565b6065906054565b90565b60081b90565b90607f610100600160a81b03916068565b9181191691161790565b6090906054565b90565b90565b9060a660a260ac926089565b6093565b8254606e565b9055565b60bf60b930605e565b60016096565b56fe60806040526004361015610015575b3661095d57005b61001f5f3561009e565b80630be1c22e146100995780634fb1a07b146100945780636813d7871461008f5780637e9703bd1461008a57806395b7472c14610085578063bda009fe14610080578063d3072d821461007b5763f2cec07c0361000e57610928565b6107f6565b610764565b610711565b610685565b61033c565b6102bc565b6100e6565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100bc57565b6100ae565b90565b6100cd906100c1565b9052565b91906100e4905f602085019401906100c4565b565b34610116576100f63660046100b2565b610112610101610965565b6101096100a4565b918291826100d1565b0390f35b6100aa565b5f80fd5b60018060a01b031690565b6101339061011f565b90565b61013f8161012a565b0361014657565b5f80fd5b9050359061015782610136565b565b610162816100c1565b0361016957565b5f80fd5b9050359061017a82610159565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101c25781359167ffffffffffffffff83116101bd5760200192600183028401116101b857565b610184565b610180565b61017c565b9060e08282031261024c576101de815f840161014a565b926101ec826020850161014a565b926101fa836040830161014a565b92610208816060840161016d565b92610216826080850161016d565b926102248360a0830161016d565b9260c082013567ffffffffffffffff8111610247576102439201610188565b9091565b61011b565b6100ae565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61029261029b6020936102a09361028981610251565b93848093610255565b9586910161025e565b610269565b0190565b6102b99160208201915f818403910152610273565b90565b6102ed6102dc6102cd3660046101c7565b96959095949194939293610fe5565b6102e46100a4565b918291826102a4565b0390f35b151590565b6102ff816102f1565b0361030657565b5f80fd5b90503590610317826102f6565b565b906020828203126103325761032f915f0161030a565b90565b6100ae565b5f0190565b3461036a5761035461034f366004610319565b6111c2565b61035c6100a4565b8061036681610337565b0390f35b6100aa565b9060208282031261038857610385915f0161016d565b90565b6100ae565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6103b7816103a1565b8210156103d1576103c96008916103a5565b910201905f90565b61038d565b5f1c90565b60018060a01b031690565b6103f26103f7916103d6565b6103db565b90565b61040490546103e6565b90565b90565b61041661041b916103d6565b610407565b90565b610428905461040a565b90565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561045f575b602083101461045a57565b61042b565b91607f169161044f565b60209181520190565b5f5260205f2090565b905f929180549061049561048e8361043f565b8094610469565b916001811690815f146104ec57506001146104b0575b505050565b6104bd9192939450610472565b915f925b8184106104d457505001905f80806104ab565b600181602092959395548486015201910192906104c1565b92949550505060ff19168252151560200201905f80806104ab565b906105119161047b565b90565b634e487b7160e01b5f52604160045260245ffd5b9061053290610269565b810190811067ffffffffffffffff82111761054c57604052565b610514565b9061057161056a926105616100a4565b93848092610507565b0383610528565b565b5f9061057e826103a1565b8110156105f85761058e916103ae565b509061059b5f83016103fa565b916105a8600182016103fa565b916105b5600283016103fa565b916105c26003820161041e565b916105cf6004830161041e565b916105dc6005820161041e565b916105f560076105ee60068501610551565b930161041e565b90565b5f80fd5b6106059061012a565b9052565b98979561066460e09661065a61067b9760608e61065361066e989a6106839f9a6106499061063f61010086019e5f8701906105fc565b60208501906105fc565b60408301906105fc565b01906100c4565b60808c01906100c4565b60a08a01906100c4565b87820360c0890152610273565b9401906100c4565b565b346106bf576106bb6106a061069b36600461036f565b610573565b946106b29896989491949392936100a4565b98899889610609565b0390f35b6100aa565b1c90565b6106d89060086106dd93026106c4565b6103db565b90565b906106eb91546106c8565b90565b6106f96001806106e0565b90565b919061070f905f602085019401906105fc565b565b34610741576107213660046100b2565b61073d61072c6106ee565b6107346100a4565b918291826106fc565b0390f35b6100aa565b9060208282031261075f5761075c915f0161014a565b90565b6100ae565b346107945761079061077f61077a366004610746565b6111fa565b6107876100a4565b918291826106fc565b0390f35b6100aa565b60ff1690565b6107af9060086107b493026106c4565b610799565b90565b906107c2915461079f565b90565b6107d160015f906107b7565b90565b6107dd906102f1565b9052565b91906107f4905f602085019401906107d4565b565b34610826576108063660046100b2565b6108226108116107c5565b6108196100a4565b918291826107e1565b0390f35b6100aa565b6108349061012a565b9052565b610841906100c1565b9052565b61086461086d6020936108729361085b81610251565b93848093610469565b9586910161025e565b610269565b0190565b9061090d9060e08061090261010084016108965f8801515f87019061082b565b6108a86020880151602087019061082b565b6108ba6040880151604087019061082b565b6108cc60608801516060870190610838565b6108de60808801516080870190610838565b6108f060a088015160a0870190610838565b60c087015185820360c0870152610845565b940151910190610838565b90565b6109259160208201915f818403910152610876565b90565b34610958576109383660046100b2565b610954610943611473565b61094b6100a4565b91829182610910565b0390f35b6100aa565b5f80fd5b5f90565b61096d610961565b506109775f6103a1565b90565b606090565b61098b610990916103d6565b610799565b90565b61099d905461097f565b90565b60209181520190565b5f7f417262697472756d20627269646765206661696c656400000000000000000000910152565b6109dd60166020926109a0565b6109e6816109a9565b0190565b6109ff9060208101905f8183039101526109d0565b90565b90565b610a19610a14610a1e9261011f565b610a02565b61011f565b90565b610a2a90610a05565b90565b610a3690610a21565b90565b610a4290610a05565b90565b610a4e90610a39565b90565b610a5a90610a39565b90565b60e01b90565b90505190610a70826102f6565b565b90602082820312610a8b57610a88915f01610a63565b90565b6100ae565b604090610ab9610ac09496959396610aaf60608401985f8501906105fc565b60208301906105fc565b01906100c4565b565b610aca6100a4565b3d5f823e3d90fd5b90565b90610ae8610ae16100a4565b9283610528565b565b610af5610100610ad5565b90565b90610b029061012a565b9052565b90610b10906100c1565b9052565b5f80fd5b67ffffffffffffffff8111610b3657610b32602091610269565b0190565b610514565b90825f939282370152565b90929192610b5b610b5682610b18565b610ad5565b93818552602085019082840111610b7757610b7592610b3b565b565b610b14565b610b87913691610b46565b90565b52565b5f5260205f2090565b5490565b610ba381610b96565b821015610bbd57610bb5600891610b8d565b910201905f90565b61038d565b634e487b7160e01b5f525f60045260245ffd5b610bdf905161012a565b90565b5f1b90565b90610bf860018060a01b0391610be2565b9181191691161790565b610c0b90610a39565b90565b90565b90610c26610c21610c2d92610c02565b610c0e565b8254610be7565b9055565b610c3b90516100c1565b90565b90610c4a5f1991610be2565b9181191691161790565b610c68610c63610c6d926100c1565b610a02565b6100c1565b90565b90565b90610c88610c83610c8f92610c54565b610c70565b8254610c3e565b9055565b5190565b601f602091010490565b1b90565b91906008610cc0910291610cba5f1984610ca1565b92610ca1565b9181191691161790565b9190610ce0610cdb610ce893610c54565b610c70565b908354610ca5565b9055565b610cfe91610cf8610961565b91610cca565b565b5b818110610d0c575050565b80610d195f600193610cec565b01610d01565b9190601f8111610d2f575b505050565b610d3b610d6093610472565b906020610d4784610c97565b83019310610d68575b610d5990610c97565b0190610d00565b5f8080610d2a565b9150610d5981929050610d50565b90610d86905f19906008026106c4565b191690565b81610d9591610d76565b906002021790565b90610da781610251565b9067ffffffffffffffff8211610e6757610dcb82610dc5855461043f565b85610d1f565b602090601f8311600114610dff57918091610dee935f92610df3575b5050610d8b565b90555b565b90915001515f80610de7565b601f19831691610e0e85610472565b925f5b818110610e4f57509160029391856001969410610e35575b50505002019055610df1565b610e45910151601f841690610d76565b90555f8080610e29565b91936020600181928787015181550195019201610e11565b610514565b90610e7691610d9d565b565b90610f3960e06007610f3f94610e9b5f8201610e955f8801610bd5565b90610c11565b610eb460018201610eae60208801610bd5565b90610c11565b610ecd60028201610ec760408801610bd5565b90610c11565b610ee660038201610ee060608801610c31565b90610c73565b610eff60048201610ef960808801610c31565b90610c73565b610f1860058201610f1260a08801610c31565b90610c73565b610f3160068201610f2b60c08801610c93565b90610e6c565b019201610c31565b90610c73565b565b9190610f5257610f5091610e78565b565b610bc2565b9081549168010000000000000000831015610f875782610f7f916001610f8595018155610b9a565b90610f41565b565b610514565b5f7f7375636365737300000000000000000000000000000000000000000000000000910152565b610fc060076020926109a0565b610fc981610f8c565b0190565b610fe29060208101905f818303910152610fb3565b90565b96939591949095610ff461097a565b50610fff6001610993565b61115b5761101461100f89610a2d565b610a45565b60206323b872dd9133906110445f61102b30610a51565b9561104f8b6110386100a4565b98899788968795610a5d565b855260048501610a90565b03925af180156111565761112a575b505f61106990610ad2565b979695939091929493349661107c610aea565b985f8a019061108a91610af8565b602089019061109891610af8565b60408801906110a691610af8565b60608701906110b491610b06565b60808601906110c291610b06565b60a08501906110d091610b06565b6110d991610b7c565b60c08301906110e791610b8a565b60e08201906110f591610b06565b6110fe91610f57565b6111066100a4565b806020810161111490610fcd565b6020820181038252036111279082610528565b90565b61114a9060203d811161114f575b6111428183610528565b810190610a72565b61105e565b503d611138565b610ac2565b6111636100a4565b62461bcd60e51b815280611179600482016109ea565b0390fd5b9061118960ff91610be2565b9181191691161790565b61119c906102f1565b90565b90565b906111b76111b26111be92611193565b61119f565b825461117d565b9055565b6111cd9060016111a2565b565b5f90565b60081c90565b6111e56111ea916111d3565b6103db565b90565b6111f790546111d9565b90565b506112036111cf565b5061120e60016111ed565b90565b61121c610100610ad5565b90565b5f90565b5f90565b606090565b611234611211565b906020808080808080808961124761121f565b81520161125261121f565b81520161125d61121f565b815201611268611223565b815201611273611223565b81520161127e611223565b815201611289611227565b815201611294611223565b81525050565b6112a261122c565b90565b90565b6112bc6112b76112c1926112a5565b610a02565b6100c1565b90565b5f7f4e6f207472616e73666572730000000000000000000000000000000000000000910152565b6112f8600c6020926109a0565b611301816112c4565b0190565b61131a9060208101905f8183039101526112eb565b90565b1561132457565b61132c6100a4565b62461bcd60e51b81528061134260048201611305565b0390fd5b90565b61135d61135861136292611346565b610a02565b6100c1565b90565b634e487b7160e01b5f52601160045260245ffd5b61138861138e919392936100c1565b926100c1565b820391821161139957565b611365565b9061146561145c60076113af611211565b946113c66113be5f83016103fa565b5f8801610af8565b6113de6113d5600183016103fa565b60208801610af8565b6113f66113ed600283016103fa565b60408801610af8565b61140e6114056003830161041e565b60608801610b06565b61142661141d6004830161041e565b60808801610b06565b61143e6114356005830161041e565b60a08801610b06565b61145661144d60068301610551565b60c08801610b8a565b0161041e565b60e08401610b06565b565b6114709061139e565b90565b61147b61129a565b506114a06114885f6103a1565b61149a6114945f6112a8565b916100c1565b1161131d565b6114cf6114c95f6114c36114b35f6103a1565b6114bd6001611349565b90611379565b906103ae565b50611467565b9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\"W`\x0E`\xB0V[`\x14`&V[a\x14\xD2a\0\xC2\x829a\x14\xD2\x90\xF3[`,V[`@Q\x90V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[`M`I`Q\x92`0V[`;V[`0V[\x90V[`[\x90`>V[\x90V[`e\x90`TV[\x90V[`\x08\x1B\x90V[\x90`\x7Fa\x01\0`\x01`\xA8\x1B\x03\x91`hV[\x91\x81\x19\x16\x91\x16\x17\x90V[`\x90\x90`TV[\x90V[\x90V[\x90`\xA6`\xA2`\xAC\x92`\x89V[`\x93V[\x82T`nV[\x90UV[`\xBF`\xB90`^V[`\x01`\x96V[V\xFE`\x80`@R`\x046\x10\x15a\0\x15W[6a\t]W\0[a\0\x1F_5a\0\x9EV[\x80c\x0B\xE1\xC2.\x14a\0\x99W\x80cO\xB1\xA0{\x14a\0\x94W\x80ch\x13\xD7\x87\x14a\0\x8FW\x80c~\x97\x03\xBD\x14a\0\x8AW\x80c\x95\xB7G,\x14a\0\x85W\x80c\xBD\xA0\t\xFE\x14a\0\x80W\x80c\xD3\x07-\x82\x14a\0{Wc\xF2\xCE\xC0|\x03a\0\x0EWa\t(V[a\x07\xF6V[a\x07dV[a\x07\x11V[a\x06\x85V[a\x03<V[a\x02\xBCV[a\0\xE6V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xBCWV[a\0\xAEV[\x90V[a\0\xCD\x90a\0\xC1V[\x90RV[\x91\x90a\0\xE4\x90_` \x85\x01\x94\x01\x90a\0\xC4V[V[4a\x01\x16Wa\0\xF66`\x04a\0\xB2V[a\x01\x12a\x01\x01a\teV[a\x01\ta\0\xA4V[\x91\x82\x91\x82a\0\xD1V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x013\x90a\x01\x1FV[\x90V[a\x01?\x81a\x01*V[\x03a\x01FWV[_\x80\xFD[\x90P5\x90a\x01W\x82a\x016V[V[a\x01b\x81a\0\xC1V[\x03a\x01iWV[_\x80\xFD[\x90P5\x90a\x01z\x82a\x01YV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xC2W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xBDW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xB8WV[a\x01\x84V[a\x01\x80V[a\x01|V[\x90`\xE0\x82\x82\x03\x12a\x02LWa\x01\xDE\x81_\x84\x01a\x01JV[\x92a\x01\xEC\x82` \x85\x01a\x01JV[\x92a\x01\xFA\x83`@\x83\x01a\x01JV[\x92a\x02\x08\x81``\x84\x01a\x01mV[\x92a\x02\x16\x82`\x80\x85\x01a\x01mV[\x92a\x02$\x83`\xA0\x83\x01a\x01mV[\x92`\xC0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02GWa\x02C\x92\x01a\x01\x88V[\x90\x91V[a\x01\x1BV[a\0\xAEV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\x92a\x02\x9B` \x93a\x02\xA0\x93a\x02\x89\x81a\x02QV[\x93\x84\x80\x93a\x02UV[\x95\x86\x91\x01a\x02^V[a\x02iV[\x01\x90V[a\x02\xB9\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02sV[\x90V[a\x02\xEDa\x02\xDCa\x02\xCD6`\x04a\x01\xC7V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x0F\xE5V[a\x02\xE4a\0\xA4V[\x91\x82\x91\x82a\x02\xA4V[\x03\x90\xF3[\x15\x15\x90V[a\x02\xFF\x81a\x02\xF1V[\x03a\x03\x06WV[_\x80\xFD[\x90P5\x90a\x03\x17\x82a\x02\xF6V[V[\x90` \x82\x82\x03\x12a\x032Wa\x03/\x91_\x01a\x03\nV[\x90V[a\0\xAEV[_\x01\x90V[4a\x03jWa\x03Ta\x03O6`\x04a\x03\x19V[a\x11\xC2V[a\x03\\a\0\xA4V[\x80a\x03f\x81a\x037V[\x03\x90\xF3[a\0\xAAV[\x90` \x82\x82\x03\x12a\x03\x88Wa\x03\x85\x91_\x01a\x01mV[\x90V[a\0\xAEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x03\xB7\x81a\x03\xA1V[\x82\x10\x15a\x03\xD1Wa\x03\xC9`\x08\x91a\x03\xA5V[\x91\x02\x01\x90_\x90V[a\x03\x8DV[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xF2a\x03\xF7\x91a\x03\xD6V[a\x03\xDBV[\x90V[a\x04\x04\x90Ta\x03\xE6V[\x90V[\x90V[a\x04\x16a\x04\x1B\x91a\x03\xD6V[a\x04\x07V[\x90V[a\x04(\x90Ta\x04\nV[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04_W[` \x83\x10\x14a\x04ZWV[a\x04+V[\x91`\x7F\x16\x91a\x04OV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04\x95a\x04\x8E\x83a\x04?V[\x80\x94a\x04iV[\x91`\x01\x81\x16\x90\x81_\x14a\x04\xECWP`\x01\x14a\x04\xB0W[PPPV[a\x04\xBD\x91\x92\x93\x94Pa\x04rV[\x91_\x92[\x81\x84\x10a\x04\xD4WPP\x01\x90_\x80\x80a\x04\xABV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04\xC1V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04\xABV[\x90a\x05\x11\x91a\x04{V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x052\x90a\x02iV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05LW`@RV[a\x05\x14V[\x90a\x05qa\x05j\x92a\x05aa\0\xA4V[\x93\x84\x80\x92a\x05\x07V[\x03\x83a\x05(V[V[_\x90a\x05~\x82a\x03\xA1V[\x81\x10\x15a\x05\xF8Wa\x05\x8E\x91a\x03\xAEV[P\x90a\x05\x9B_\x83\x01a\x03\xFAV[\x91a\x05\xA8`\x01\x82\x01a\x03\xFAV[\x91a\x05\xB5`\x02\x83\x01a\x03\xFAV[\x91a\x05\xC2`\x03\x82\x01a\x04\x1EV[\x91a\x05\xCF`\x04\x83\x01a\x04\x1EV[\x91a\x05\xDC`\x05\x82\x01a\x04\x1EV[\x91a\x05\xF5`\x07a\x05\xEE`\x06\x85\x01a\x05QV[\x93\x01a\x04\x1EV[\x90V[_\x80\xFD[a\x06\x05\x90a\x01*V[\x90RV[\x98\x97\x95a\x06d`\xE0\x96a\x06Za\x06{\x97``\x8Ea\x06Sa\x06n\x98\x9Aa\x06\x83\x9F\x9Aa\x06I\x90a\x06?a\x01\0\x86\x01\x9E_\x87\x01\x90a\x05\xFCV[` \x85\x01\x90a\x05\xFCV[`@\x83\x01\x90a\x05\xFCV[\x01\x90a\0\xC4V[`\x80\x8C\x01\x90a\0\xC4V[`\xA0\x8A\x01\x90a\0\xC4V[\x87\x82\x03`\xC0\x89\x01Ra\x02sV[\x94\x01\x90a\0\xC4V[V[4a\x06\xBFWa\x06\xBBa\x06\xA0a\x06\x9B6`\x04a\x03oV[a\x05sV[\x94a\x06\xB2\x98\x96\x98\x94\x91\x94\x93\x92\x93a\0\xA4V[\x98\x89\x98\x89a\x06\tV[\x03\x90\xF3[a\0\xAAV[\x1C\x90V[a\x06\xD8\x90`\x08a\x06\xDD\x93\x02a\x06\xC4V[a\x03\xDBV[\x90V[\x90a\x06\xEB\x91Ta\x06\xC8V[\x90V[a\x06\xF9`\x01\x80a\x06\xE0V[\x90V[\x91\x90a\x07\x0F\x90_` \x85\x01\x94\x01\x90a\x05\xFCV[V[4a\x07AWa\x07!6`\x04a\0\xB2V[a\x07=a\x07,a\x06\xEEV[a\x074a\0\xA4V[\x91\x82\x91\x82a\x06\xFCV[\x03\x90\xF3[a\0\xAAV[\x90` \x82\x82\x03\x12a\x07_Wa\x07\\\x91_\x01a\x01JV[\x90V[a\0\xAEV[4a\x07\x94Wa\x07\x90a\x07\x7Fa\x07z6`\x04a\x07FV[a\x11\xFAV[a\x07\x87a\0\xA4V[\x91\x82\x91\x82a\x06\xFCV[\x03\x90\xF3[a\0\xAAV[`\xFF\x16\x90V[a\x07\xAF\x90`\x08a\x07\xB4\x93\x02a\x06\xC4V[a\x07\x99V[\x90V[\x90a\x07\xC2\x91Ta\x07\x9FV[\x90V[a\x07\xD1`\x01_\x90a\x07\xB7V[\x90V[a\x07\xDD\x90a\x02\xF1V[\x90RV[\x91\x90a\x07\xF4\x90_` \x85\x01\x94\x01\x90a\x07\xD4V[V[4a\x08&Wa\x08\x066`\x04a\0\xB2V[a\x08\"a\x08\x11a\x07\xC5V[a\x08\x19a\0\xA4V[\x91\x82\x91\x82a\x07\xE1V[\x03\x90\xF3[a\0\xAAV[a\x084\x90a\x01*V[\x90RV[a\x08A\x90a\0\xC1V[\x90RV[a\x08da\x08m` \x93a\x08r\x93a\x08[\x81a\x02QV[\x93\x84\x80\x93a\x04iV[\x95\x86\x91\x01a\x02^V[a\x02iV[\x01\x90V[\x90a\t\r\x90`\xE0\x80a\t\x02a\x01\0\x84\x01a\x08\x96_\x88\x01Q_\x87\x01\x90a\x08+V[a\x08\xA8` \x88\x01Q` \x87\x01\x90a\x08+V[a\x08\xBA`@\x88\x01Q`@\x87\x01\x90a\x08+V[a\x08\xCC``\x88\x01Q``\x87\x01\x90a\x088V[a\x08\xDE`\x80\x88\x01Q`\x80\x87\x01\x90a\x088V[a\x08\xF0`\xA0\x88\x01Q`\xA0\x87\x01\x90a\x088V[`\xC0\x87\x01Q\x85\x82\x03`\xC0\x87\x01Ra\x08EV[\x94\x01Q\x91\x01\x90a\x088V[\x90V[a\t%\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x08vV[\x90V[4a\tXWa\t86`\x04a\0\xB2V[a\tTa\tCa\x14sV[a\tKa\0\xA4V[\x91\x82\x91\x82a\t\x10V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[_\x90V[a\tma\taV[Pa\tw_a\x03\xA1V[\x90V[``\x90V[a\t\x8Ba\t\x90\x91a\x03\xD6V[a\x07\x99V[\x90V[a\t\x9D\x90Ta\t\x7FV[\x90V[` \x91\x81R\x01\x90V[_\x7FArbitrum bridge failed\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\xDD`\x16` \x92a\t\xA0V[a\t\xE6\x81a\t\xA9V[\x01\x90V[a\t\xFF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\xD0V[\x90V[\x90V[a\n\x19a\n\x14a\n\x1E\x92a\x01\x1FV[a\n\x02V[a\x01\x1FV[\x90V[a\n*\x90a\n\x05V[\x90V[a\n6\x90a\n!V[\x90V[a\nB\x90a\n\x05V[\x90V[a\nN\x90a\n9V[\x90V[a\nZ\x90a\n9V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\np\x82a\x02\xF6V[V[\x90` \x82\x82\x03\x12a\n\x8BWa\n\x88\x91_\x01a\ncV[\x90V[a\0\xAEV[`@\x90a\n\xB9a\n\xC0\x94\x96\x95\x93\x96a\n\xAF``\x84\x01\x98_\x85\x01\x90a\x05\xFCV[` \x83\x01\x90a\x05\xFCV[\x01\x90a\0\xC4V[V[a\n\xCAa\0\xA4V[=_\x82>=\x90\xFD[\x90V[\x90a\n\xE8a\n\xE1a\0\xA4V[\x92\x83a\x05(V[V[a\n\xF5a\x01\0a\n\xD5V[\x90V[\x90a\x0B\x02\x90a\x01*V[\x90RV[\x90a\x0B\x10\x90a\0\xC1V[\x90RV[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B6Wa\x0B2` \x91a\x02iV[\x01\x90V[a\x05\x14V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x0B[a\x0BV\x82a\x0B\x18V[a\n\xD5V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x0BwWa\x0Bu\x92a\x0B;V[V[a\x0B\x14V[a\x0B\x87\x916\x91a\x0BFV[\x90V[RV[_R` _ \x90V[T\x90V[a\x0B\xA3\x81a\x0B\x96V[\x82\x10\x15a\x0B\xBDWa\x0B\xB5`\x08\x91a\x0B\x8DV[\x91\x02\x01\x90_\x90V[a\x03\x8DV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[a\x0B\xDF\x90Qa\x01*V[\x90V[_\x1B\x90V[\x90a\x0B\xF8`\x01\x80`\xA0\x1B\x03\x91a\x0B\xE2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\x0B\x90a\n9V[\x90V[\x90V[\x90a\x0C&a\x0C!a\x0C-\x92a\x0C\x02V[a\x0C\x0EV[\x82Ta\x0B\xE7V[\x90UV[a\x0C;\x90Qa\0\xC1V[\x90V[\x90a\x0CJ_\x19\x91a\x0B\xE2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Cha\x0Cca\x0Cm\x92a\0\xC1V[a\n\x02V[a\0\xC1V[\x90V[\x90V[\x90a\x0C\x88a\x0C\x83a\x0C\x8F\x92a\x0CTV[a\x0CpV[\x82Ta\x0C>V[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0C\xC0\x91\x02\x91a\x0C\xBA_\x19\x84a\x0C\xA1V[\x92a\x0C\xA1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0C\xE0a\x0C\xDBa\x0C\xE8\x93a\x0CTV[a\x0CpV[\x90\x83Ta\x0C\xA5V[\x90UV[a\x0C\xFE\x91a\x0C\xF8a\taV[\x91a\x0C\xCAV[V[[\x81\x81\x10a\r\x0CWPPV[\x80a\r\x19_`\x01\x93a\x0C\xECV[\x01a\r\x01V[\x91\x90`\x1F\x81\x11a\r/W[PPPV[a\r;a\r`\x93a\x04rV[\x90` a\rG\x84a\x0C\x97V[\x83\x01\x93\x10a\rhW[a\rY\x90a\x0C\x97V[\x01\x90a\r\0V[_\x80\x80a\r*V[\x91Pa\rY\x81\x92\x90Pa\rPV[\x90a\r\x86\x90_\x19\x90`\x08\x02a\x06\xC4V[\x19\x16\x90V[\x81a\r\x95\x91a\rvV[\x90`\x02\x02\x17\x90V[\x90a\r\xA7\x81a\x02QV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0EgWa\r\xCB\x82a\r\xC5\x85Ta\x04?V[\x85a\r\x1FV[` \x90`\x1F\x83\x11`\x01\x14a\r\xFFW\x91\x80\x91a\r\xEE\x93_\x92a\r\xF3W[PPa\r\x8BV[\x90U[V[\x90\x91P\x01Q_\x80a\r\xE7V[`\x1F\x19\x83\x16\x91a\x0E\x0E\x85a\x04rV[\x92_[\x81\x81\x10a\x0EOWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0E5W[PPP\x02\x01\x90Ua\r\xF1V[a\x0EE\x91\x01Q`\x1F\x84\x16\x90a\rvV[\x90U_\x80\x80a\x0E)V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x0E\x11V[a\x05\x14V[\x90a\x0Ev\x91a\r\x9DV[V[\x90a\x0F9`\xE0`\x07a\x0F?\x94a\x0E\x9B_\x82\x01a\x0E\x95_\x88\x01a\x0B\xD5V[\x90a\x0C\x11V[a\x0E\xB4`\x01\x82\x01a\x0E\xAE` \x88\x01a\x0B\xD5V[\x90a\x0C\x11V[a\x0E\xCD`\x02\x82\x01a\x0E\xC7`@\x88\x01a\x0B\xD5V[\x90a\x0C\x11V[a\x0E\xE6`\x03\x82\x01a\x0E\xE0``\x88\x01a\x0C1V[\x90a\x0CsV[a\x0E\xFF`\x04\x82\x01a\x0E\xF9`\x80\x88\x01a\x0C1V[\x90a\x0CsV[a\x0F\x18`\x05\x82\x01a\x0F\x12`\xA0\x88\x01a\x0C1V[\x90a\x0CsV[a\x0F1`\x06\x82\x01a\x0F+`\xC0\x88\x01a\x0C\x93V[\x90a\x0ElV[\x01\x92\x01a\x0C1V[\x90a\x0CsV[V[\x91\x90a\x0FRWa\x0FP\x91a\x0ExV[V[a\x0B\xC2V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x0F\x87W\x82a\x0F\x7F\x91`\x01a\x0F\x85\x95\x01\x81Ua\x0B\x9AV[\x90a\x0FAV[V[a\x05\x14V[_\x7Fsuccess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\xC0`\x07` \x92a\t\xA0V[a\x0F\xC9\x81a\x0F\x8CV[\x01\x90V[a\x0F\xE2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\xB3V[\x90V[\x96\x93\x95\x91\x94\x90\x95a\x0F\xF4a\tzV[Pa\x0F\xFF`\x01a\t\x93V[a\x11[Wa\x10\x14a\x10\x0F\x89a\n-V[a\nEV[` c#\xB8r\xDD\x913\x90a\x10D_a\x10+0a\nQV[\x95a\x10O\x8Ba\x108a\0\xA4V[\x98\x89\x97\x88\x96\x87\x95a\n]V[\x85R`\x04\x85\x01a\n\x90V[\x03\x92Z\xF1\x80\x15a\x11VWa\x11*W[P_a\x10i\x90a\n\xD2V[\x97\x96\x95\x93\x90\x91\x92\x94\x934\x96a\x10|a\n\xEAV[\x98_\x8A\x01\x90a\x10\x8A\x91a\n\xF8V[` \x89\x01\x90a\x10\x98\x91a\n\xF8V[`@\x88\x01\x90a\x10\xA6\x91a\n\xF8V[``\x87\x01\x90a\x10\xB4\x91a\x0B\x06V[`\x80\x86\x01\x90a\x10\xC2\x91a\x0B\x06V[`\xA0\x85\x01\x90a\x10\xD0\x91a\x0B\x06V[a\x10\xD9\x91a\x0B|V[`\xC0\x83\x01\x90a\x10\xE7\x91a\x0B\x8AV[`\xE0\x82\x01\x90a\x10\xF5\x91a\x0B\x06V[a\x10\xFE\x91a\x0FWV[a\x11\x06a\0\xA4V[\x80` \x81\x01a\x11\x14\x90a\x0F\xCDV[` \x82\x01\x81\x03\x82R\x03a\x11'\x90\x82a\x05(V[\x90V[a\x11J\x90` =\x81\x11a\x11OW[a\x11B\x81\x83a\x05(V[\x81\x01\x90a\nrV[a\x10^V[P=a\x118V[a\n\xC2V[a\x11ca\0\xA4V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x11y`\x04\x82\x01a\t\xEAV[\x03\x90\xFD[\x90a\x11\x89`\xFF\x91a\x0B\xE2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\x9C\x90a\x02\xF1V[\x90V[\x90V[\x90a\x11\xB7a\x11\xB2a\x11\xBE\x92a\x11\x93V[a\x11\x9FV[\x82Ta\x11}V[\x90UV[a\x11\xCD\x90`\x01a\x11\xA2V[V[_\x90V[`\x08\x1C\x90V[a\x11\xE5a\x11\xEA\x91a\x11\xD3V[a\x03\xDBV[\x90V[a\x11\xF7\x90Ta\x11\xD9V[\x90V[Pa\x12\x03a\x11\xCFV[Pa\x12\x0E`\x01a\x11\xEDV[\x90V[a\x12\x1Ca\x01\0a\n\xD5V[\x90V[_\x90V[_\x90V[``\x90V[a\x124a\x12\x11V[\x90` \x80\x80\x80\x80\x80\x80\x80\x89a\x12Ga\x12\x1FV[\x81R\x01a\x12Ra\x12\x1FV[\x81R\x01a\x12]a\x12\x1FV[\x81R\x01a\x12ha\x12#V[\x81R\x01a\x12sa\x12#V[\x81R\x01a\x12~a\x12#V[\x81R\x01a\x12\x89a\x12'V[\x81R\x01a\x12\x94a\x12#V[\x81RPPV[a\x12\xA2a\x12,V[\x90V[\x90V[a\x12\xBCa\x12\xB7a\x12\xC1\x92a\x12\xA5V[a\n\x02V[a\0\xC1V[\x90V[_\x7FNo transfers\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12\xF8`\x0C` \x92a\t\xA0V[a\x13\x01\x81a\x12\xC4V[\x01\x90V[a\x13\x1A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12\xEBV[\x90V[\x15a\x13$WV[a\x13,a\0\xA4V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13B`\x04\x82\x01a\x13\x05V[\x03\x90\xFD[\x90V[a\x13]a\x13Xa\x13b\x92a\x13FV[a\n\x02V[a\0\xC1V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\x88a\x13\x8E\x91\x93\x92\x93a\0\xC1V[\x92a\0\xC1V[\x82\x03\x91\x82\x11a\x13\x99WV[a\x13eV[\x90a\x14ea\x14\\`\x07a\x13\xAFa\x12\x11V[\x94a\x13\xC6a\x13\xBE_\x83\x01a\x03\xFAV[_\x88\x01a\n\xF8V[a\x13\xDEa\x13\xD5`\x01\x83\x01a\x03\xFAV[` \x88\x01a\n\xF8V[a\x13\xF6a\x13\xED`\x02\x83\x01a\x03\xFAV[`@\x88\x01a\n\xF8V[a\x14\x0Ea\x14\x05`\x03\x83\x01a\x04\x1EV[``\x88\x01a\x0B\x06V[a\x14&a\x14\x1D`\x04\x83\x01a\x04\x1EV[`\x80\x88\x01a\x0B\x06V[a\x14>a\x145`\x05\x83\x01a\x04\x1EV[`\xA0\x88\x01a\x0B\x06V[a\x14Va\x14M`\x06\x83\x01a\x05QV[`\xC0\x88\x01a\x0B\x8AV[\x01a\x04\x1EV[`\xE0\x84\x01a\x0B\x06V[V[a\x14p\x90a\x13\x9EV[\x90V[a\x14{a\x12\x9AV[Pa\x14\xA0a\x14\x88_a\x03\xA1V[a\x14\x9Aa\x14\x94_a\x12\xA8V[\x91a\0\xC1V[\x11a\x13\x1DV[a\x14\xCFa\x14\xC9_a\x14\xC3a\x14\xB3_a\x03\xA1V[a\x14\xBD`\x01a\x13IV[\x90a\x13yV[\x90a\x03\xAEV[Pa\x14gV[\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610015575b3661095d57005b61001f5f3561009e565b80630be1c22e146100995780634fb1a07b146100945780636813d7871461008f5780637e9703bd1461008a57806395b7472c14610085578063bda009fe14610080578063d3072d821461007b5763f2cec07c0361000e57610928565b6107f6565b610764565b610711565b610685565b61033c565b6102bc565b6100e6565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f9103126100bc57565b6100ae565b90565b6100cd906100c1565b9052565b91906100e4905f602085019401906100c4565b565b34610116576100f63660046100b2565b610112610101610965565b6101096100a4565b918291826100d1565b0390f35b6100aa565b5f80fd5b60018060a01b031690565b6101339061011f565b90565b61013f8161012a565b0361014657565b5f80fd5b9050359061015782610136565b565b610162816100c1565b0361016957565b5f80fd5b9050359061017a82610159565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101c25781359167ffffffffffffffff83116101bd5760200192600183028401116101b857565b610184565b610180565b61017c565b9060e08282031261024c576101de815f840161014a565b926101ec826020850161014a565b926101fa836040830161014a565b92610208816060840161016d565b92610216826080850161016d565b926102248360a0830161016d565b9260c082013567ffffffffffffffff8111610247576102439201610188565b9091565b61011b565b6100ae565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61029261029b6020936102a09361028981610251565b93848093610255565b9586910161025e565b610269565b0190565b6102b99160208201915f818403910152610273565b90565b6102ed6102dc6102cd3660046101c7565b96959095949194939293610fe5565b6102e46100a4565b918291826102a4565b0390f35b151590565b6102ff816102f1565b0361030657565b5f80fd5b90503590610317826102f6565b565b906020828203126103325761032f915f0161030a565b90565b6100ae565b5f0190565b3461036a5761035461034f366004610319565b6111c2565b61035c6100a4565b8061036681610337565b0390f35b6100aa565b9060208282031261038857610385915f0161016d565b90565b6100ae565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6103b7816103a1565b8210156103d1576103c96008916103a5565b910201905f90565b61038d565b5f1c90565b60018060a01b031690565b6103f26103f7916103d6565b6103db565b90565b61040490546103e6565b90565b90565b61041661041b916103d6565b610407565b90565b610428905461040a565b90565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561045f575b602083101461045a57565b61042b565b91607f169161044f565b60209181520190565b5f5260205f2090565b905f929180549061049561048e8361043f565b8094610469565b916001811690815f146104ec57506001146104b0575b505050565b6104bd9192939450610472565b915f925b8184106104d457505001905f80806104ab565b600181602092959395548486015201910192906104c1565b92949550505060ff19168252151560200201905f80806104ab565b906105119161047b565b90565b634e487b7160e01b5f52604160045260245ffd5b9061053290610269565b810190811067ffffffffffffffff82111761054c57604052565b610514565b9061057161056a926105616100a4565b93848092610507565b0383610528565b565b5f9061057e826103a1565b8110156105f85761058e916103ae565b509061059b5f83016103fa565b916105a8600182016103fa565b916105b5600283016103fa565b916105c26003820161041e565b916105cf6004830161041e565b916105dc6005820161041e565b916105f560076105ee60068501610551565b930161041e565b90565b5f80fd5b6106059061012a565b9052565b98979561066460e09661065a61067b9760608e61065361066e989a6106839f9a6106499061063f61010086019e5f8701906105fc565b60208501906105fc565b60408301906105fc565b01906100c4565b60808c01906100c4565b60a08a01906100c4565b87820360c0890152610273565b9401906100c4565b565b346106bf576106bb6106a061069b36600461036f565b610573565b946106b29896989491949392936100a4565b98899889610609565b0390f35b6100aa565b1c90565b6106d89060086106dd93026106c4565b6103db565b90565b906106eb91546106c8565b90565b6106f96001806106e0565b90565b919061070f905f602085019401906105fc565b565b34610741576107213660046100b2565b61073d61072c6106ee565b6107346100a4565b918291826106fc565b0390f35b6100aa565b9060208282031261075f5761075c915f0161014a565b90565b6100ae565b346107945761079061077f61077a366004610746565b6111fa565b6107876100a4565b918291826106fc565b0390f35b6100aa565b60ff1690565b6107af9060086107b493026106c4565b610799565b90565b906107c2915461079f565b90565b6107d160015f906107b7565b90565b6107dd906102f1565b9052565b91906107f4905f602085019401906107d4565b565b34610826576108063660046100b2565b6108226108116107c5565b6108196100a4565b918291826107e1565b0390f35b6100aa565b6108349061012a565b9052565b610841906100c1565b9052565b61086461086d6020936108729361085b81610251565b93848093610469565b9586910161025e565b610269565b0190565b9061090d9060e08061090261010084016108965f8801515f87019061082b565b6108a86020880151602087019061082b565b6108ba6040880151604087019061082b565b6108cc60608801516060870190610838565b6108de60808801516080870190610838565b6108f060a088015160a0870190610838565b60c087015185820360c0870152610845565b940151910190610838565b90565b6109259160208201915f818403910152610876565b90565b34610958576109383660046100b2565b610954610943611473565b61094b6100a4565b91829182610910565b0390f35b6100aa565b5f80fd5b5f90565b61096d610961565b506109775f6103a1565b90565b606090565b61098b610990916103d6565b610799565b90565b61099d905461097f565b90565b60209181520190565b5f7f417262697472756d20627269646765206661696c656400000000000000000000910152565b6109dd60166020926109a0565b6109e6816109a9565b0190565b6109ff9060208101905f8183039101526109d0565b90565b90565b610a19610a14610a1e9261011f565b610a02565b61011f565b90565b610a2a90610a05565b90565b610a3690610a21565b90565b610a4290610a05565b90565b610a4e90610a39565b90565b610a5a90610a39565b90565b60e01b90565b90505190610a70826102f6565b565b90602082820312610a8b57610a88915f01610a63565b90565b6100ae565b604090610ab9610ac09496959396610aaf60608401985f8501906105fc565b60208301906105fc565b01906100c4565b565b610aca6100a4565b3d5f823e3d90fd5b90565b90610ae8610ae16100a4565b9283610528565b565b610af5610100610ad5565b90565b90610b029061012a565b9052565b90610b10906100c1565b9052565b5f80fd5b67ffffffffffffffff8111610b3657610b32602091610269565b0190565b610514565b90825f939282370152565b90929192610b5b610b5682610b18565b610ad5565b93818552602085019082840111610b7757610b7592610b3b565b565b610b14565b610b87913691610b46565b90565b52565b5f5260205f2090565b5490565b610ba381610b96565b821015610bbd57610bb5600891610b8d565b910201905f90565b61038d565b634e487b7160e01b5f525f60045260245ffd5b610bdf905161012a565b90565b5f1b90565b90610bf860018060a01b0391610be2565b9181191691161790565b610c0b90610a39565b90565b90565b90610c26610c21610c2d92610c02565b610c0e565b8254610be7565b9055565b610c3b90516100c1565b90565b90610c4a5f1991610be2565b9181191691161790565b610c68610c63610c6d926100c1565b610a02565b6100c1565b90565b90565b90610c88610c83610c8f92610c54565b610c70565b8254610c3e565b9055565b5190565b601f602091010490565b1b90565b91906008610cc0910291610cba5f1984610ca1565b92610ca1565b9181191691161790565b9190610ce0610cdb610ce893610c54565b610c70565b908354610ca5565b9055565b610cfe91610cf8610961565b91610cca565b565b5b818110610d0c575050565b80610d195f600193610cec565b01610d01565b9190601f8111610d2f575b505050565b610d3b610d6093610472565b906020610d4784610c97565b83019310610d68575b610d5990610c97565b0190610d00565b5f8080610d2a565b9150610d5981929050610d50565b90610d86905f19906008026106c4565b191690565b81610d9591610d76565b906002021790565b90610da781610251565b9067ffffffffffffffff8211610e6757610dcb82610dc5855461043f565b85610d1f565b602090601f8311600114610dff57918091610dee935f92610df3575b5050610d8b565b90555b565b90915001515f80610de7565b601f19831691610e0e85610472565b925f5b818110610e4f57509160029391856001969410610e35575b50505002019055610df1565b610e45910151601f841690610d76565b90555f8080610e29565b91936020600181928787015181550195019201610e11565b610514565b90610e7691610d9d565b565b90610f3960e06007610f3f94610e9b5f8201610e955f8801610bd5565b90610c11565b610eb460018201610eae60208801610bd5565b90610c11565b610ecd60028201610ec760408801610bd5565b90610c11565b610ee660038201610ee060608801610c31565b90610c73565b610eff60048201610ef960808801610c31565b90610c73565b610f1860058201610f1260a08801610c31565b90610c73565b610f3160068201610f2b60c08801610c93565b90610e6c565b019201610c31565b90610c73565b565b9190610f5257610f5091610e78565b565b610bc2565b9081549168010000000000000000831015610f875782610f7f916001610f8595018155610b9a565b90610f41565b565b610514565b5f7f7375636365737300000000000000000000000000000000000000000000000000910152565b610fc060076020926109a0565b610fc981610f8c565b0190565b610fe29060208101905f818303910152610fb3565b90565b96939591949095610ff461097a565b50610fff6001610993565b61115b5761101461100f89610a2d565b610a45565b60206323b872dd9133906110445f61102b30610a51565b9561104f8b6110386100a4565b98899788968795610a5d565b855260048501610a90565b03925af180156111565761112a575b505f61106990610ad2565b979695939091929493349661107c610aea565b985f8a019061108a91610af8565b602089019061109891610af8565b60408801906110a691610af8565b60608701906110b491610b06565b60808601906110c291610b06565b60a08501906110d091610b06565b6110d991610b7c565b60c08301906110e791610b8a565b60e08201906110f591610b06565b6110fe91610f57565b6111066100a4565b806020810161111490610fcd565b6020820181038252036111279082610528565b90565b61114a9060203d811161114f575b6111428183610528565b810190610a72565b61105e565b503d611138565b610ac2565b6111636100a4565b62461bcd60e51b815280611179600482016109ea565b0390fd5b9061118960ff91610be2565b9181191691161790565b61119c906102f1565b90565b90565b906111b76111b26111be92611193565b61119f565b825461117d565b9055565b6111cd9060016111a2565b565b5f90565b60081c90565b6111e56111ea916111d3565b6103db565b90565b6111f790546111d9565b90565b506112036111cf565b5061120e60016111ed565b90565b61121c610100610ad5565b90565b5f90565b5f90565b606090565b611234611211565b906020808080808080808961124761121f565b81520161125261121f565b81520161125d61121f565b815201611268611223565b815201611273611223565b81520161127e611223565b815201611289611227565b815201611294611223565b81525050565b6112a261122c565b90565b90565b6112bc6112b76112c1926112a5565b610a02565b6100c1565b90565b5f7f4e6f207472616e73666572730000000000000000000000000000000000000000910152565b6112f8600c6020926109a0565b611301816112c4565b0190565b61131a9060208101905f8183039101526112eb565b90565b1561132457565b61132c6100a4565b62461bcd60e51b81528061134260048201611305565b0390fd5b90565b61135d61135861136292611346565b610a02565b6100c1565b90565b634e487b7160e01b5f52601160045260245ffd5b61138861138e919392936100c1565b926100c1565b820391821161139957565b611365565b9061146561145c60076113af611211565b946113c66113be5f83016103fa565b5f8801610af8565b6113de6113d5600183016103fa565b60208801610af8565b6113f66113ed600283016103fa565b60408801610af8565b61140e6114056003830161041e565b60608801610b06565b61142661141d6004830161041e565b60808801610b06565b61143e6114356005830161041e565b60a08801610b06565b61145661144d60068301610551565b60c08801610b8a565b0161041e565b60e08401610b06565b565b6114709061139e565b90565b61147b61129a565b506114a06114885f6103a1565b61149a6114945f6112a8565b916100c1565b1161131d565b6114cf6114c95f6114c36114b35f6103a1565b6114bd6001611349565b90611379565b906103ae565b50611467565b9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x15W[6a\t]W\0[a\0\x1F_5a\0\x9EV[\x80c\x0B\xE1\xC2.\x14a\0\x99W\x80cO\xB1\xA0{\x14a\0\x94W\x80ch\x13\xD7\x87\x14a\0\x8FW\x80c~\x97\x03\xBD\x14a\0\x8AW\x80c\x95\xB7G,\x14a\0\x85W\x80c\xBD\xA0\t\xFE\x14a\0\x80W\x80c\xD3\x07-\x82\x14a\0{Wc\xF2\xCE\xC0|\x03a\0\x0EWa\t(V[a\x07\xF6V[a\x07dV[a\x07\x11V[a\x06\x85V[a\x03<V[a\x02\xBCV[a\0\xE6V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\xBCWV[a\0\xAEV[\x90V[a\0\xCD\x90a\0\xC1V[\x90RV[\x91\x90a\0\xE4\x90_` \x85\x01\x94\x01\x90a\0\xC4V[V[4a\x01\x16Wa\0\xF66`\x04a\0\xB2V[a\x01\x12a\x01\x01a\teV[a\x01\ta\0\xA4V[\x91\x82\x91\x82a\0\xD1V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x013\x90a\x01\x1FV[\x90V[a\x01?\x81a\x01*V[\x03a\x01FWV[_\x80\xFD[\x90P5\x90a\x01W\x82a\x016V[V[a\x01b\x81a\0\xC1V[\x03a\x01iWV[_\x80\xFD[\x90P5\x90a\x01z\x82a\x01YV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xC2W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xBDW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xB8WV[a\x01\x84V[a\x01\x80V[a\x01|V[\x90`\xE0\x82\x82\x03\x12a\x02LWa\x01\xDE\x81_\x84\x01a\x01JV[\x92a\x01\xEC\x82` \x85\x01a\x01JV[\x92a\x01\xFA\x83`@\x83\x01a\x01JV[\x92a\x02\x08\x81``\x84\x01a\x01mV[\x92a\x02\x16\x82`\x80\x85\x01a\x01mV[\x92a\x02$\x83`\xA0\x83\x01a\x01mV[\x92`\xC0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02GWa\x02C\x92\x01a\x01\x88V[\x90\x91V[a\x01\x1BV[a\0\xAEV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x02\x92a\x02\x9B` \x93a\x02\xA0\x93a\x02\x89\x81a\x02QV[\x93\x84\x80\x93a\x02UV[\x95\x86\x91\x01a\x02^V[a\x02iV[\x01\x90V[a\x02\xB9\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02sV[\x90V[a\x02\xEDa\x02\xDCa\x02\xCD6`\x04a\x01\xC7V[\x96\x95\x90\x95\x94\x91\x94\x93\x92\x93a\x0F\xE5V[a\x02\xE4a\0\xA4V[\x91\x82\x91\x82a\x02\xA4V[\x03\x90\xF3[\x15\x15\x90V[a\x02\xFF\x81a\x02\xF1V[\x03a\x03\x06WV[_\x80\xFD[\x90P5\x90a\x03\x17\x82a\x02\xF6V[V[\x90` \x82\x82\x03\x12a\x032Wa\x03/\x91_\x01a\x03\nV[\x90V[a\0\xAEV[_\x01\x90V[4a\x03jWa\x03Ta\x03O6`\x04a\x03\x19V[a\x11\xC2V[a\x03\\a\0\xA4V[\x80a\x03f\x81a\x037V[\x03\x90\xF3[a\0\xAAV[\x90` \x82\x82\x03\x12a\x03\x88Wa\x03\x85\x91_\x01a\x01mV[\x90V[a\0\xAEV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x03\xB7\x81a\x03\xA1V[\x82\x10\x15a\x03\xD1Wa\x03\xC9`\x08\x91a\x03\xA5V[\x91\x02\x01\x90_\x90V[a\x03\x8DV[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x03\xF2a\x03\xF7\x91a\x03\xD6V[a\x03\xDBV[\x90V[a\x04\x04\x90Ta\x03\xE6V[\x90V[\x90V[a\x04\x16a\x04\x1B\x91a\x03\xD6V[a\x04\x07V[\x90V[a\x04(\x90Ta\x04\nV[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x04_W[` \x83\x10\x14a\x04ZWV[a\x04+V[\x91`\x7F\x16\x91a\x04OV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x04\x95a\x04\x8E\x83a\x04?V[\x80\x94a\x04iV[\x91`\x01\x81\x16\x90\x81_\x14a\x04\xECWP`\x01\x14a\x04\xB0W[PPPV[a\x04\xBD\x91\x92\x93\x94Pa\x04rV[\x91_\x92[\x81\x84\x10a\x04\xD4WPP\x01\x90_\x80\x80a\x04\xABV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x04\xC1V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x04\xABV[\x90a\x05\x11\x91a\x04{V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x052\x90a\x02iV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05LW`@RV[a\x05\x14V[\x90a\x05qa\x05j\x92a\x05aa\0\xA4V[\x93\x84\x80\x92a\x05\x07V[\x03\x83a\x05(V[V[_\x90a\x05~\x82a\x03\xA1V[\x81\x10\x15a\x05\xF8Wa\x05\x8E\x91a\x03\xAEV[P\x90a\x05\x9B_\x83\x01a\x03\xFAV[\x91a\x05\xA8`\x01\x82\x01a\x03\xFAV[\x91a\x05\xB5`\x02\x83\x01a\x03\xFAV[\x91a\x05\xC2`\x03\x82\x01a\x04\x1EV[\x91a\x05\xCF`\x04\x83\x01a\x04\x1EV[\x91a\x05\xDC`\x05\x82\x01a\x04\x1EV[\x91a\x05\xF5`\x07a\x05\xEE`\x06\x85\x01a\x05QV[\x93\x01a\x04\x1EV[\x90V[_\x80\xFD[a\x06\x05\x90a\x01*V[\x90RV[\x98\x97\x95a\x06d`\xE0\x96a\x06Za\x06{\x97``\x8Ea\x06Sa\x06n\x98\x9Aa\x06\x83\x9F\x9Aa\x06I\x90a\x06?a\x01\0\x86\x01\x9E_\x87\x01\x90a\x05\xFCV[` \x85\x01\x90a\x05\xFCV[`@\x83\x01\x90a\x05\xFCV[\x01\x90a\0\xC4V[`\x80\x8C\x01\x90a\0\xC4V[`\xA0\x8A\x01\x90a\0\xC4V[\x87\x82\x03`\xC0\x89\x01Ra\x02sV[\x94\x01\x90a\0\xC4V[V[4a\x06\xBFWa\x06\xBBa\x06\xA0a\x06\x9B6`\x04a\x03oV[a\x05sV[\x94a\x06\xB2\x98\x96\x98\x94\x91\x94\x93\x92\x93a\0\xA4V[\x98\x89\x98\x89a\x06\tV[\x03\x90\xF3[a\0\xAAV[\x1C\x90V[a\x06\xD8\x90`\x08a\x06\xDD\x93\x02a\x06\xC4V[a\x03\xDBV[\x90V[\x90a\x06\xEB\x91Ta\x06\xC8V[\x90V[a\x06\xF9`\x01\x80a\x06\xE0V[\x90V[\x91\x90a\x07\x0F\x90_` \x85\x01\x94\x01\x90a\x05\xFCV[V[4a\x07AWa\x07!6`\x04a\0\xB2V[a\x07=a\x07,a\x06\xEEV[a\x074a\0\xA4V[\x91\x82\x91\x82a\x06\xFCV[\x03\x90\xF3[a\0\xAAV[\x90` \x82\x82\x03\x12a\x07_Wa\x07\\\x91_\x01a\x01JV[\x90V[a\0\xAEV[4a\x07\x94Wa\x07\x90a\x07\x7Fa\x07z6`\x04a\x07FV[a\x11\xFAV[a\x07\x87a\0\xA4V[\x91\x82\x91\x82a\x06\xFCV[\x03\x90\xF3[a\0\xAAV[`\xFF\x16\x90V[a\x07\xAF\x90`\x08a\x07\xB4\x93\x02a\x06\xC4V[a\x07\x99V[\x90V[\x90a\x07\xC2\x91Ta\x07\x9FV[\x90V[a\x07\xD1`\x01_\x90a\x07\xB7V[\x90V[a\x07\xDD\x90a\x02\xF1V[\x90RV[\x91\x90a\x07\xF4\x90_` \x85\x01\x94\x01\x90a\x07\xD4V[V[4a\x08&Wa\x08\x066`\x04a\0\xB2V[a\x08\"a\x08\x11a\x07\xC5V[a\x08\x19a\0\xA4V[\x91\x82\x91\x82a\x07\xE1V[\x03\x90\xF3[a\0\xAAV[a\x084\x90a\x01*V[\x90RV[a\x08A\x90a\0\xC1V[\x90RV[a\x08da\x08m` \x93a\x08r\x93a\x08[\x81a\x02QV[\x93\x84\x80\x93a\x04iV[\x95\x86\x91\x01a\x02^V[a\x02iV[\x01\x90V[\x90a\t\r\x90`\xE0\x80a\t\x02a\x01\0\x84\x01a\x08\x96_\x88\x01Q_\x87\x01\x90a\x08+V[a\x08\xA8` \x88\x01Q` \x87\x01\x90a\x08+V[a\x08\xBA`@\x88\x01Q`@\x87\x01\x90a\x08+V[a\x08\xCC``\x88\x01Q``\x87\x01\x90a\x088V[a\x08\xDE`\x80\x88\x01Q`\x80\x87\x01\x90a\x088V[a\x08\xF0`\xA0\x88\x01Q`\xA0\x87\x01\x90a\x088V[`\xC0\x87\x01Q\x85\x82\x03`\xC0\x87\x01Ra\x08EV[\x94\x01Q\x91\x01\x90a\x088V[\x90V[a\t%\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x08vV[\x90V[4a\tXWa\t86`\x04a\0\xB2V[a\tTa\tCa\x14sV[a\tKa\0\xA4V[\x91\x82\x91\x82a\t\x10V[\x03\x90\xF3[a\0\xAAV[_\x80\xFD[_\x90V[a\tma\taV[Pa\tw_a\x03\xA1V[\x90V[``\x90V[a\t\x8Ba\t\x90\x91a\x03\xD6V[a\x07\x99V[\x90V[a\t\x9D\x90Ta\t\x7FV[\x90V[` \x91\x81R\x01\x90V[_\x7FArbitrum bridge failed\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\t\xDD`\x16` \x92a\t\xA0V[a\t\xE6\x81a\t\xA9V[\x01\x90V[a\t\xFF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t\xD0V[\x90V[\x90V[a\n\x19a\n\x14a\n\x1E\x92a\x01\x1FV[a\n\x02V[a\x01\x1FV[\x90V[a\n*\x90a\n\x05V[\x90V[a\n6\x90a\n!V[\x90V[a\nB\x90a\n\x05V[\x90V[a\nN\x90a\n9V[\x90V[a\nZ\x90a\n9V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\np\x82a\x02\xF6V[V[\x90` \x82\x82\x03\x12a\n\x8BWa\n\x88\x91_\x01a\ncV[\x90V[a\0\xAEV[`@\x90a\n\xB9a\n\xC0\x94\x96\x95\x93\x96a\n\xAF``\x84\x01\x98_\x85\x01\x90a\x05\xFCV[` \x83\x01\x90a\x05\xFCV[\x01\x90a\0\xC4V[V[a\n\xCAa\0\xA4V[=_\x82>=\x90\xFD[\x90V[\x90a\n\xE8a\n\xE1a\0\xA4V[\x92\x83a\x05(V[V[a\n\xF5a\x01\0a\n\xD5V[\x90V[\x90a\x0B\x02\x90a\x01*V[\x90RV[\x90a\x0B\x10\x90a\0\xC1V[\x90RV[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B6Wa\x0B2` \x91a\x02iV[\x01\x90V[a\x05\x14V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\x0B[a\x0BV\x82a\x0B\x18V[a\n\xD5V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x0BwWa\x0Bu\x92a\x0B;V[V[a\x0B\x14V[a\x0B\x87\x916\x91a\x0BFV[\x90V[RV[_R` _ \x90V[T\x90V[a\x0B\xA3\x81a\x0B\x96V[\x82\x10\x15a\x0B\xBDWa\x0B\xB5`\x08\x91a\x0B\x8DV[\x91\x02\x01\x90_\x90V[a\x03\x8DV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[a\x0B\xDF\x90Qa\x01*V[\x90V[_\x1B\x90V[\x90a\x0B\xF8`\x01\x80`\xA0\x1B\x03\x91a\x0B\xE2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0C\x0B\x90a\n9V[\x90V[\x90V[\x90a\x0C&a\x0C!a\x0C-\x92a\x0C\x02V[a\x0C\x0EV[\x82Ta\x0B\xE7V[\x90UV[a\x0C;\x90Qa\0\xC1V[\x90V[\x90a\x0CJ_\x19\x91a\x0B\xE2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Cha\x0Cca\x0Cm\x92a\0\xC1V[a\n\x02V[a\0\xC1V[\x90V[\x90V[\x90a\x0C\x88a\x0C\x83a\x0C\x8F\x92a\x0CTV[a\x0CpV[\x82Ta\x0C>V[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0C\xC0\x91\x02\x91a\x0C\xBA_\x19\x84a\x0C\xA1V[\x92a\x0C\xA1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0C\xE0a\x0C\xDBa\x0C\xE8\x93a\x0CTV[a\x0CpV[\x90\x83Ta\x0C\xA5V[\x90UV[a\x0C\xFE\x91a\x0C\xF8a\taV[\x91a\x0C\xCAV[V[[\x81\x81\x10a\r\x0CWPPV[\x80a\r\x19_`\x01\x93a\x0C\xECV[\x01a\r\x01V[\x91\x90`\x1F\x81\x11a\r/W[PPPV[a\r;a\r`\x93a\x04rV[\x90` a\rG\x84a\x0C\x97V[\x83\x01\x93\x10a\rhW[a\rY\x90a\x0C\x97V[\x01\x90a\r\0V[_\x80\x80a\r*V[\x91Pa\rY\x81\x92\x90Pa\rPV[\x90a\r\x86\x90_\x19\x90`\x08\x02a\x06\xC4V[\x19\x16\x90V[\x81a\r\x95\x91a\rvV[\x90`\x02\x02\x17\x90V[\x90a\r\xA7\x81a\x02QV[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0EgWa\r\xCB\x82a\r\xC5\x85Ta\x04?V[\x85a\r\x1FV[` \x90`\x1F\x83\x11`\x01\x14a\r\xFFW\x91\x80\x91a\r\xEE\x93_\x92a\r\xF3W[PPa\r\x8BV[\x90U[V[\x90\x91P\x01Q_\x80a\r\xE7V[`\x1F\x19\x83\x16\x91a\x0E\x0E\x85a\x04rV[\x92_[\x81\x81\x10a\x0EOWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0E5W[PPP\x02\x01\x90Ua\r\xF1V[a\x0EE\x91\x01Q`\x1F\x84\x16\x90a\rvV[\x90U_\x80\x80a\x0E)V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x0E\x11V[a\x05\x14V[\x90a\x0Ev\x91a\r\x9DV[V[\x90a\x0F9`\xE0`\x07a\x0F?\x94a\x0E\x9B_\x82\x01a\x0E\x95_\x88\x01a\x0B\xD5V[\x90a\x0C\x11V[a\x0E\xB4`\x01\x82\x01a\x0E\xAE` \x88\x01a\x0B\xD5V[\x90a\x0C\x11V[a\x0E\xCD`\x02\x82\x01a\x0E\xC7`@\x88\x01a\x0B\xD5V[\x90a\x0C\x11V[a\x0E\xE6`\x03\x82\x01a\x0E\xE0``\x88\x01a\x0C1V[\x90a\x0CsV[a\x0E\xFF`\x04\x82\x01a\x0E\xF9`\x80\x88\x01a\x0C1V[\x90a\x0CsV[a\x0F\x18`\x05\x82\x01a\x0F\x12`\xA0\x88\x01a\x0C1V[\x90a\x0CsV[a\x0F1`\x06\x82\x01a\x0F+`\xC0\x88\x01a\x0C\x93V[\x90a\x0ElV[\x01\x92\x01a\x0C1V[\x90a\x0CsV[V[\x91\x90a\x0FRWa\x0FP\x91a\x0ExV[V[a\x0B\xC2V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x0F\x87W\x82a\x0F\x7F\x91`\x01a\x0F\x85\x95\x01\x81Ua\x0B\x9AV[\x90a\x0FAV[V[a\x05\x14V[_\x7Fsuccess\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0F\xC0`\x07` \x92a\t\xA0V[a\x0F\xC9\x81a\x0F\x8CV[\x01\x90V[a\x0F\xE2\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0F\xB3V[\x90V[\x96\x93\x95\x91\x94\x90\x95a\x0F\xF4a\tzV[Pa\x0F\xFF`\x01a\t\x93V[a\x11[Wa\x10\x14a\x10\x0F\x89a\n-V[a\nEV[` c#\xB8r\xDD\x913\x90a\x10D_a\x10+0a\nQV[\x95a\x10O\x8Ba\x108a\0\xA4V[\x98\x89\x97\x88\x96\x87\x95a\n]V[\x85R`\x04\x85\x01a\n\x90V[\x03\x92Z\xF1\x80\x15a\x11VWa\x11*W[P_a\x10i\x90a\n\xD2V[\x97\x96\x95\x93\x90\x91\x92\x94\x934\x96a\x10|a\n\xEAV[\x98_\x8A\x01\x90a\x10\x8A\x91a\n\xF8V[` \x89\x01\x90a\x10\x98\x91a\n\xF8V[`@\x88\x01\x90a\x10\xA6\x91a\n\xF8V[``\x87\x01\x90a\x10\xB4\x91a\x0B\x06V[`\x80\x86\x01\x90a\x10\xC2\x91a\x0B\x06V[`\xA0\x85\x01\x90a\x10\xD0\x91a\x0B\x06V[a\x10\xD9\x91a\x0B|V[`\xC0\x83\x01\x90a\x10\xE7\x91a\x0B\x8AV[`\xE0\x82\x01\x90a\x10\xF5\x91a\x0B\x06V[a\x10\xFE\x91a\x0FWV[a\x11\x06a\0\xA4V[\x80` \x81\x01a\x11\x14\x90a\x0F\xCDV[` \x82\x01\x81\x03\x82R\x03a\x11'\x90\x82a\x05(V[\x90V[a\x11J\x90` =\x81\x11a\x11OW[a\x11B\x81\x83a\x05(V[\x81\x01\x90a\nrV[a\x10^V[P=a\x118V[a\n\xC2V[a\x11ca\0\xA4V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x11y`\x04\x82\x01a\t\xEAV[\x03\x90\xFD[\x90a\x11\x89`\xFF\x91a\x0B\xE2V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11\x9C\x90a\x02\xF1V[\x90V[\x90V[\x90a\x11\xB7a\x11\xB2a\x11\xBE\x92a\x11\x93V[a\x11\x9FV[\x82Ta\x11}V[\x90UV[a\x11\xCD\x90`\x01a\x11\xA2V[V[_\x90V[`\x08\x1C\x90V[a\x11\xE5a\x11\xEA\x91a\x11\xD3V[a\x03\xDBV[\x90V[a\x11\xF7\x90Ta\x11\xD9V[\x90V[Pa\x12\x03a\x11\xCFV[Pa\x12\x0E`\x01a\x11\xEDV[\x90V[a\x12\x1Ca\x01\0a\n\xD5V[\x90V[_\x90V[_\x90V[``\x90V[a\x124a\x12\x11V[\x90` \x80\x80\x80\x80\x80\x80\x80\x89a\x12Ga\x12\x1FV[\x81R\x01a\x12Ra\x12\x1FV[\x81R\x01a\x12]a\x12\x1FV[\x81R\x01a\x12ha\x12#V[\x81R\x01a\x12sa\x12#V[\x81R\x01a\x12~a\x12#V[\x81R\x01a\x12\x89a\x12'V[\x81R\x01a\x12\x94a\x12#V[\x81RPPV[a\x12\xA2a\x12,V[\x90V[\x90V[a\x12\xBCa\x12\xB7a\x12\xC1\x92a\x12\xA5V[a\n\x02V[a\0\xC1V[\x90V[_\x7FNo transfers\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x12\xF8`\x0C` \x92a\t\xA0V[a\x13\x01\x81a\x12\xC4V[\x01\x90V[a\x13\x1A\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12\xEBV[\x90V[\x15a\x13$WV[a\x13,a\0\xA4V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x13B`\x04\x82\x01a\x13\x05V[\x03\x90\xFD[\x90V[a\x13]a\x13Xa\x13b\x92a\x13FV[a\n\x02V[a\0\xC1V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\x88a\x13\x8E\x91\x93\x92\x93a\0\xC1V[\x92a\0\xC1V[\x82\x03\x91\x82\x11a\x13\x99WV[a\x13eV[\x90a\x14ea\x14\\`\x07a\x13\xAFa\x12\x11V[\x94a\x13\xC6a\x13\xBE_\x83\x01a\x03\xFAV[_\x88\x01a\n\xF8V[a\x13\xDEa\x13\xD5`\x01\x83\x01a\x03\xFAV[` \x88\x01a\n\xF8V[a\x13\xF6a\x13\xED`\x02\x83\x01a\x03\xFAV[`@\x88\x01a\n\xF8V[a\x14\x0Ea\x14\x05`\x03\x83\x01a\x04\x1EV[``\x88\x01a\x0B\x06V[a\x14&a\x14\x1D`\x04\x83\x01a\x04\x1EV[`\x80\x88\x01a\x0B\x06V[a\x14>a\x145`\x05\x83\x01a\x04\x1EV[`\xA0\x88\x01a\x0B\x06V[a\x14Va\x14M`\x06\x83\x01a\x05QV[`\xC0\x88\x01a\x0B\x8AV[\x01a\x04\x1EV[`\xE0\x84\x01a\x0B\x06V[V[a\x14p\x90a\x13\x9EV[\x90V[a\x14{a\x12\x9AV[Pa\x14\xA0a\x14\x88_a\x03\xA1V[a\x14\x9Aa\x14\x94_a\x12\xA8V[\x91a\0\xC1V[\x11a\x13\x1DV[a\x14\xCFa\x14\xC9_a\x14\xC3a\x14\xB3_a\x03\xA1V[a\x14\xBD`\x01a\x13IV[\x90a\x13yV[\x90a\x03\xAEV[Pa\x14gV[\x90V",
    );
    /**```solidity
struct TransferCall { address token; address refundTo; address to; uint256 amount; uint256 maxGas; uint256 gasPriceBid; bytes data; uint256 ethValue; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransferCall {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub refundTo: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub ethValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransferCall> for UnderlyingRustTuple<'_> {
            fn from(value: TransferCall) -> Self {
                (
                    value.token,
                    value.refundTo,
                    value.to,
                    value.amount,
                    value.maxGas,
                    value.gasPriceBid,
                    value.data,
                    value.ethValue,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransferCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    token: tuple.0,
                    refundTo: tuple.1,
                    to: tuple.2,
                    amount: tuple.3,
                    maxGas: tuple.4,
                    gasPriceBid: tuple.5,
                    data: tuple.6,
                    ethValue: tuple.7,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for TransferCall {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for TransferCall {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.refundTo,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.gasPriceBid),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.ethValue),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for TransferCall {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for TransferCall {
            const NAME: &'static str = "TransferCall";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "TransferCall(address token,address refundTo,address to,uint256 amount,uint256 maxGas,uint256 gasPriceBid,bytes data,uint256 ethValue)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.token,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.refundTo,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.to,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amount)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.maxGas)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.gasPriceBid)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.ethValue)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for TransferCall {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.token,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.refundTo,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.to,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amount,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxGas,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.gasPriceBid,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.ethValue,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.token,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.refundTo,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.to,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amount,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxGas,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.gasPriceBid,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.ethValue,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `getGateway(address)` and selector `0xbda009fe`.
```solidity
function getGateway(address) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getGatewayCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`getGateway(address)`](getGatewayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getGatewayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getGatewayCall> for UnderlyingRustTuple<'_> {
                fn from(value: getGatewayCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getGatewayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getGatewayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getGatewayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getGatewayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getGatewayCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getGatewayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getGateway(address)";
            const SELECTOR: [u8; 4] = [189u8, 160u8, 9u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getLastTransferCall()` and selector `0xf2cec07c`.
```solidity
function getLastTransferCall() external view returns (TransferCall memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastTransferCallCall {}
    ///Container type for the return parameters of the [`getLastTransferCall()`](getLastTransferCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastTransferCallReturn {
        #[allow(missing_docs)]
        pub _0: <TransferCall as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastTransferCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastTransferCallCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastTransferCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (TransferCall,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <TransferCall as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastTransferCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastTransferCallReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastTransferCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getLastTransferCallCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getLastTransferCallReturn;
            type ReturnTuple<'a> = (TransferCall,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getLastTransferCall()";
            const SELECTOR: [u8; 4] = [242u8, 206u8, 192u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getTransferCallCount()` and selector `0x0be1c22e`.
```solidity
function getTransferCallCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTransferCallCountCall {}
    ///Container type for the return parameters of the [`getTransferCallCount()`](getTransferCallCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTransferCallCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTransferCallCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTransferCallCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTransferCallCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTransferCallCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTransferCallCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTransferCallCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTransferCallCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getTransferCallCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTransferCallCount()";
            const SELECTOR: [u8; 4] = [11u8, 225u8, 194u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `mockGateway()` and selector `0x95b7472c`.
```solidity
function mockGateway() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mockGatewayCall {}
    ///Container type for the return parameters of the [`mockGateway()`](mockGatewayCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mockGatewayReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mockGatewayCall> for UnderlyingRustTuple<'_> {
                fn from(value: mockGatewayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mockGatewayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mockGatewayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mockGatewayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mockGatewayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mockGatewayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mockGatewayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mockGateway()";
            const SELECTOR: [u8; 4] = [149u8, 183u8, 71u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `outboundTransferCustomRefund(address,address,address,uint256,uint256,uint256,bytes)` and selector `0x4fb1a07b`.
```solidity
function outboundTransferCustomRefund(address _token, address _refundTo, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes memory _data) external payable returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct outboundTransferCustomRefundCall {
        #[allow(missing_docs)]
        pub _token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _refundTo: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`outboundTransferCustomRefund(address,address,address,uint256,uint256,uint256,bytes)`](outboundTransferCustomRefundCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct outboundTransferCustomRefundReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<outboundTransferCustomRefundCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: outboundTransferCustomRefundCall) -> Self {
                    (
                        value._token,
                        value._refundTo,
                        value._to,
                        value._amount,
                        value._maxGas,
                        value._gasPriceBid,
                        value._data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for outboundTransferCustomRefundCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _token: tuple.0,
                        _refundTo: tuple.1,
                        _to: tuple.2,
                        _amount: tuple.3,
                        _maxGas: tuple.4,
                        _gasPriceBid: tuple.5,
                        _data: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<outboundTransferCustomRefundReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: outboundTransferCustomRefundReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for outboundTransferCustomRefundReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for outboundTransferCustomRefundCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = outboundTransferCustomRefundReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "outboundTransferCustomRefund(address,address,address,uint256,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 177u8, 160u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._refundTo,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._amount),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxGas),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasPriceBid),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShouldRevert(bool)` and selector `0x6813d787`.
```solidity
function setShouldRevert(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setShouldRevert(bool)`](setShouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldRevertCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldRevertReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldRevert(bool)";
            const SELECTOR: [u8; 4] = [104u8, 19u8, 215u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall {}
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = shouldRevertReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferCalls(uint256)` and selector `0x7e9703bd`.
```solidity
function transferCalls(uint256) external view returns (address token, address refundTo, address to, uint256 amount, uint256 maxGas, uint256 gasPriceBid, bytes memory data, uint256 ethValue);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferCallsCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferCalls(uint256)`](transferCallsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferCallsReturn {
        #[allow(missing_docs)]
        pub token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub refundTo: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxGas: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub ethValue: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCallsCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCallsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCallsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCallsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferCallsReturn) -> Self {
                    (
                        value.token,
                        value.refundTo,
                        value.to,
                        value.amount,
                        value.maxGas,
                        value.gasPriceBid,
                        value.data,
                        value.ethValue,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCallsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        token: tuple.0,
                        refundTo: tuple.1,
                        to: tuple.2,
                        amount: tuple.3,
                        maxGas: tuple.4,
                        gasPriceBid: tuple.5,
                        data: tuple.6,
                        ethValue: tuple.7,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCallsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferCallsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferCalls(uint256)";
            const SELECTOR: [u8; 4] = [126u8, 151u8, 3u8, 189u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockArbitrumBridge`](self) function calls.
    pub enum MockArbitrumBridgeCalls {
        #[allow(missing_docs)]
        getGateway(getGatewayCall),
        #[allow(missing_docs)]
        getLastTransferCall(getLastTransferCallCall),
        #[allow(missing_docs)]
        getTransferCallCount(getTransferCallCountCall),
        #[allow(missing_docs)]
        mockGateway(mockGatewayCall),
        #[allow(missing_docs)]
        outboundTransferCustomRefund(outboundTransferCustomRefundCall),
        #[allow(missing_docs)]
        setShouldRevert(setShouldRevertCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
        #[allow(missing_docs)]
        transferCalls(transferCallsCall),
    }
    #[automatically_derived]
    impl MockArbitrumBridgeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 225u8, 194u8, 46u8],
            [79u8, 177u8, 160u8, 123u8],
            [104u8, 19u8, 215u8, 135u8],
            [126u8, 151u8, 3u8, 189u8],
            [149u8, 183u8, 71u8, 44u8],
            [189u8, 160u8, 9u8, 254u8],
            [211u8, 7u8, 45u8, 130u8],
            [242u8, 206u8, 192u8, 124u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockArbitrumBridgeCalls {
        const NAME: &'static str = "MockArbitrumBridgeCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getGateway(_) => {
                    <getGatewayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getLastTransferCall(_) => {
                    <getLastTransferCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTransferCallCount(_) => {
                    <getTransferCallCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::mockGateway(_) => {
                    <mockGatewayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::outboundTransferCustomRefund(_) => {
                    <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldRevert(_) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferCalls(_) => {
                    <transferCallsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls>] = &[
                {
                    fn getTransferCallCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <getTransferCallCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::getTransferCallCount)
                    }
                    getTransferCallCount
                },
                {
                    fn outboundTransferCustomRefund(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::outboundTransferCustomRefund)
                    }
                    outboundTransferCustomRefund
                },
                {
                    fn setShouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn transferCalls(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <transferCallsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::transferCalls)
                    }
                    transferCalls
                },
                {
                    fn mockGateway(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <mockGatewayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::mockGateway)
                    }
                    mockGateway
                },
                {
                    fn getGateway(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <getGatewayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::getGateway)
                    }
                    getGateway
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn getLastTransferCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbitrumBridgeCalls> {
                        <getLastTransferCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbitrumBridgeCalls::getLastTransferCall)
                    }
                    getLastTransferCall
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getGateway(inner) => {
                    <getGatewayCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getLastTransferCall(inner) => {
                    <getLastTransferCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTransferCallCount(inner) => {
                    <getTransferCallCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::mockGateway(inner) => {
                    <mockGatewayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::outboundTransferCustomRefund(inner) => {
                    <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferCalls(inner) => {
                    <transferCallsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getGateway(inner) => {
                    <getGatewayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getLastTransferCall(inner) => {
                    <getLastTransferCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTransferCallCount(inner) => {
                    <getTransferCallCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::mockGateway(inner) => {
                    <mockGatewayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::outboundTransferCustomRefund(inner) => {
                    <outboundTransferCustomRefundCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferCalls(inner) => {
                    <transferCallsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockArbitrumBridge`](self) contract instance.

See the [wrapper's documentation](`MockArbitrumBridgeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockArbitrumBridgeInstance<T, P, N> {
        MockArbitrumBridgeInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockArbitrumBridgeInstance<T, P, N>>,
    > {
        MockArbitrumBridgeInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockArbitrumBridgeInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockArbitrumBridge`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockArbitrumBridge`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockArbitrumBridgeInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockArbitrumBridgeInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockArbitrumBridgeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbitrumBridgeInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockArbitrumBridge`](self) contract instance.

See the [wrapper's documentation](`MockArbitrumBridgeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockArbitrumBridgeInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockArbitrumBridgeInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockArbitrumBridgeInstance<T, P, N> {
            MockArbitrumBridgeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbitrumBridgeInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getGateway`] function.
        pub fn getGateway(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getGatewayCall, N> {
            self.call_builder(&getGatewayCall { _0 })
        }
        ///Creates a new call builder for the [`getLastTransferCall`] function.
        pub fn getLastTransferCall(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getLastTransferCallCall, N> {
            self.call_builder(&getLastTransferCallCall {})
        }
        ///Creates a new call builder for the [`getTransferCallCount`] function.
        pub fn getTransferCallCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getTransferCallCountCall, N> {
            self.call_builder(&getTransferCallCountCall {})
        }
        ///Creates a new call builder for the [`mockGateway`] function.
        pub fn mockGateway(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, mockGatewayCall, N> {
            self.call_builder(&mockGatewayCall {})
        }
        ///Creates a new call builder for the [`outboundTransferCustomRefund`] function.
        pub fn outboundTransferCustomRefund(
            &self,
            _token: alloy::sol_types::private::Address,
            _refundTo: alloy::sol_types::private::Address,
            _to: alloy::sol_types::private::Address,
            _amount: alloy::sol_types::private::primitives::aliases::U256,
            _maxGas: alloy::sol_types::private::primitives::aliases::U256,
            _gasPriceBid: alloy::sol_types::private::primitives::aliases::U256,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, outboundTransferCustomRefundCall, N> {
            self.call_builder(
                &outboundTransferCustomRefundCall {
                    _token,
                    _refundTo,
                    _to,
                    _amount,
                    _maxGas,
                    _gasPriceBid,
                    _data,
                },
            )
        }
        ///Creates a new call builder for the [`setShouldRevert`] function.
        pub fn setShouldRevert(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShouldRevertCall, N> {
            self.call_builder(
                &setShouldRevertCall {
                    _shouldRevert,
                },
            )
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall {})
        }
        ///Creates a new call builder for the [`transferCalls`] function.
        pub fn transferCalls(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferCallsCall, N> {
            self.call_builder(&transferCallsCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbitrumBridgeInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
