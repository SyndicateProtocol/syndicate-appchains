/**

Generated by the following Solidity interface...
```solidity
interface BlockHashRelayer {
    error InsufficientAllowance(uint256 allowance, uint256 amount);

    constructor(address _arbInbox, address _syndToken);

    function L1_BLOCK_ADDRESS() external view returns (address);
    function arbInbox() external view returns (address);
    function sendBlockHashes(address _gasArchive) external;
    function sendBlockHashes(address _gasArchive, uint256 _gasLimit, uint256 _maxFeePerGas) external;
    function syndToken() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_arbInbox",
        "type": "address",
        "internalType": "contract IArbInbox"
      },
      {
        "name": "_syndToken",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "L1_BLOCK_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "arbInbox",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IArbInbox"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "sendBlockHashes",
    "inputs": [
      {
        "name": "_gasArchive",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "sendBlockHashes",
    "inputs": [
      {
        "name": "_gasArchive",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_gasLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_maxFeePerGas",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "syndToken",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IERC20"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "InsufficientAllowance",
    "inputs": [
      {
        "name": "allowance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod BlockHashRelayer {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c080604052346100fa57604081610b43803803809161001f8285610111565b8339810103126100fa5780516001600160a01b038116918282036100fa5760200151906001600160a01b038216908183036100fa575f9360209360449260805260a052604051948593849263095ea7b360e01b84526004840152811960248401525af18015610106576100ca575b6040516109fa9081610149823960805181818161036101528181610576015261085c015260a0518181816101060152818161050801526105e80152f35b6020813d6020116100fe575b816100e360209383610111565b810103126100fa5751801515036100fa575f61008d565b5f80fd5b3d91506100d6565b6040513d5f823e3d90fd5b601f909101601f19168101906001600160401b0382119082101761013457604052565b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c80633b8f26a41461059a578063557819a41461052c5780636213821d146104be578063861f862c146100a05763f350c0d614610050575f80fd5b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c5760206040517342000000000000000000000000000000000000158152f35b5f80fd5b3461009c5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576100d761095a565b60243590604435908183028381048314841517156103c45773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f9161048c575b5082811061045c575060205f916064604051809481937f23b872dd0000000000000000000000000000000000000000000000000000000083523360048401523060248401528760448401525af180156103b957610425575b50604051917f09bd5a600000000000000000000000000000000000000000000000000000000083526020836004817342000000000000000000000000000000000000155afa9283156103b9575f936103f1575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c457601f73ffffffffffffffffffffffffffffffffffffffff94610144947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093602098604051928a8401947f84211ca90000000000000000000000000000000000000000000000000000000086526024850152406044840152604483526102cc60648461097d565b6040519a8b998a987f549e8426000000000000000000000000000000000000000000000000000000008a521660048901525f60248901525f604489015233606489015233608489015260a488015260c487015260e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b6103b09060203d6020116103b2575b6103a8818361097d565b8101906109eb565b005b503d61039e565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9092506020813d60201161041d575b8161040d6020938361097d565b8101031261009c5751918561021a565b3d9150610400565b6020813d602011610454575b8161043e6020938361097d565b8101031261009c575180151581146101c7575f80fd5b3d9150610431565b90507f2a1b2dd8000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b90506020813d6020116104b6575b816104a76020938361097d565b8101031261009c57518661016f565b3d915061049a565b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576105d161095a565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f91610928575b50651319718a500081106108f3575060205f916064604051809481937f23b872dd000000000000000000000000000000000000000000000000000000008352336004840152306024840152651319718a500060448401525af180156103b9576108bc575b506040517f09bd5a600000000000000000000000000000000000000000000000000000000081526020816004817342000000000000000000000000000000000000155afa9081156103b9575f9161088a575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c45761014473ffffffffffffffffffffffffffffffffffffffff917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209560405197878901917f84211ca900000000000000000000000000000000000000000000000000000000835260248a0152406044890152604488526107b760648961097d565b60405197889687957f549e84260000000000000000000000000000000000000000000000000000000087521660048601525f60248601525f60448601523360648601523360848601526203345060a48601526305f5e10060c4860152651319718a500060e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b90506020813d6020116108b4575b816108a56020938361097d565b8101031261009c575182610707565b3d9150610898565b6020813d6020116108eb575b816108d56020938361097d565b8101031261009c575180151581146106b5575f80fd5b3d91506108c8565b7f2a1b2dd8000000000000000000000000000000000000000000000000000000005f52600452651319718a500060245260445ffd5b90506020813d602011610952575b816109436020938361097d565b8101031261009c575183610651565b3d9150610936565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361009c57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109be57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261009c57519056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0\x80`@R4a\0\xFAW`@\x81a\x0BC\x808\x03\x80\x91a\0\x1F\x82\x85a\x01\x11V[\x839\x81\x01\x03\x12a\0\xFAW\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x91\x82\x82\x03a\0\xFAW` \x01Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x81\x83\x03a\0\xFAW_\x93` \x93`D\x92`\x80R`\xA0R`@Q\x94\x85\x93\x84\x92c\t^\xA7\xB3`\xE0\x1B\x84R`\x04\x84\x01R\x81\x19`$\x84\x01RZ\xF1\x80\x15a\x01\x06Wa\0\xCAW[`@Qa\t\xFA\x90\x81a\x01I\x829`\x80Q\x81\x81\x81a\x03a\x01R\x81\x81a\x05v\x01Ra\x08\\\x01R`\xA0Q\x81\x81\x81a\x01\x06\x01R\x81\x81a\x05\x08\x01Ra\x05\xE8\x01R\xF3[` \x81=` \x11a\0\xFEW[\x81a\0\xE3` \x93\x83a\x01\x11V[\x81\x01\x03\x12a\0\xFAWQ\x80\x15\x15\x03a\0\xFAW_a\0\x8DV[_\x80\xFD[=\x91Pa\0\xD6V[`@Q=_\x82>=\x90\xFD[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x014W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c;\x8F&\xA4\x14a\x05\x9AW\x80cUx\x19\xA4\x14a\x05,W\x80cb\x13\x82\x1D\x14a\x04\xBEW\x80c\x86\x1F\x86,\x14a\0\xA0Wc\xF3P\xC0\xD6\x14a\0PW_\x80\xFD[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@QsB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x81R\xF3[_\x80\xFD[4a\0\x9CW``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\0\xD7a\tZV[`$5\x90`D5\x90\x81\x83\x02\x83\x81\x04\x83\x14\x84\x15\x17\x15a\x03\xC4Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x04\x8CW[P\x82\x81\x10a\x04\\WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01R\x87`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x04%W[P`@Q\x91\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` \x83`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x92\x83\x15a\x03\xB9W_\x93a\x03\xF1W[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4W`\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94a\x01D\x94\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93` \x98`@Q\x92\x8A\x84\x01\x94\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86R`$\x85\x01R@`D\x84\x01R`D\x83Ra\x02\xCC`d\x84a\t}V[`@Q\x9A\x8B\x99\x8A\x98\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8AR\x16`\x04\x89\x01R_`$\x89\x01R_`D\x89\x01R3`d\x89\x01R3`\x84\x89\x01R`\xA4\x88\x01R`\xC4\x87\x01R`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[a\x03\xB0\x90` =` \x11a\x03\xB2W[a\x03\xA8\x81\x83a\t}V[\x81\x01\x90a\t\xEBV[\0[P=a\x03\x9EV[`@Q=_\x82>=\x90\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x92P` \x81=` \x11a\x04\x1DW[\x81a\x04\r` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x91\x85a\x02\x1AV[=\x91Pa\x04\0V[` \x81=` \x11a\x04TW[\x81a\x04>` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x01\xC7W_\x80\xFD[=\x91Pa\x041V[\x90P\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R`$R`D_\xFD[\x90P` \x81=` \x11a\x04\xB6W[\x81a\x04\xA7` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x86a\x01oV[=\x91Pa\x04\x9AV[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\x05\xD1a\tZV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\t(W[Pe\x13\x19q\x8AP\0\x81\x10a\x08\xF3WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01Re\x13\x19q\x8AP\0`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x08\xBCW[P`@Q\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x08\x8AW[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4Wa\x01Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x95`@Q\x97\x87\x89\x01\x91\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`$\x8A\x01R@`D\x89\x01R`D\x88Ra\x07\xB7`d\x89a\t}V[`@Q\x97\x88\x96\x87\x95\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x16`\x04\x86\x01R_`$\x86\x01R_`D\x86\x01R3`d\x86\x01R3`\x84\x86\x01Rb\x034P`\xA4\x86\x01Rc\x05\xF5\xE1\0`\xC4\x86\x01Re\x13\x19q\x8AP\0`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[\x90P` \x81=` \x11a\x08\xB4W[\x81a\x08\xA5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x82a\x07\x07V[=\x91Pa\x08\x98V[` \x81=` \x11a\x08\xEBW[\x81a\x08\xD5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x06\xB5W_\x80\xFD[=\x91Pa\x08\xC8V[\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04Re\x13\x19q\x8AP\0`$R`D_\xFD[\x90P` \x81=` \x11a\tRW[\x81a\tC` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x83a\x06QV[=\x91Pa\t6V[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\0\x9CWV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xBEW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0\x9CWQ\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c80633b8f26a41461059a578063557819a41461052c5780636213821d146104be578063861f862c146100a05763f350c0d614610050575f80fd5b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c5760206040517342000000000000000000000000000000000000158152f35b5f80fd5b3461009c5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576100d761095a565b60243590604435908183028381048314841517156103c45773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f9161048c575b5082811061045c575060205f916064604051809481937f23b872dd0000000000000000000000000000000000000000000000000000000083523360048401523060248401528760448401525af180156103b957610425575b50604051917f09bd5a600000000000000000000000000000000000000000000000000000000083526020836004817342000000000000000000000000000000000000155afa9283156103b9575f936103f1575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c457601f73ffffffffffffffffffffffffffffffffffffffff94610144947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093602098604051928a8401947f84211ca90000000000000000000000000000000000000000000000000000000086526024850152406044840152604483526102cc60648461097d565b6040519a8b998a987f549e8426000000000000000000000000000000000000000000000000000000008a521660048901525f60248901525f604489015233606489015233608489015260a488015260c487015260e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b6103b09060203d6020116103b2575b6103a8818361097d565b8101906109eb565b005b503d61039e565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9092506020813d60201161041d575b8161040d6020938361097d565b8101031261009c5751918561021a565b3d9150610400565b6020813d602011610454575b8161043e6020938361097d565b8101031261009c575180151581146101c7575f80fd5b3d9150610431565b90507f2a1b2dd8000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b90506020813d6020116104b6575b816104a76020938361097d565b8101031261009c57518661016f565b3d915061049a565b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576105d161095a565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f91610928575b50651319718a500081106108f3575060205f916064604051809481937f23b872dd000000000000000000000000000000000000000000000000000000008352336004840152306024840152651319718a500060448401525af180156103b9576108bc575b506040517f09bd5a600000000000000000000000000000000000000000000000000000000081526020816004817342000000000000000000000000000000000000155afa9081156103b9575f9161088a575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c45761014473ffffffffffffffffffffffffffffffffffffffff917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209560405197878901917f84211ca900000000000000000000000000000000000000000000000000000000835260248a0152406044890152604488526107b760648961097d565b60405197889687957f549e84260000000000000000000000000000000000000000000000000000000087521660048601525f60248601525f60448601523360648601523360848601526203345060a48601526305f5e10060c4860152651319718a500060e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b90506020813d6020116108b4575b816108a56020938361097d565b8101031261009c575182610707565b3d9150610898565b6020813d6020116108eb575b816108d56020938361097d565b8101031261009c575180151581146106b5575f80fd5b3d91506108c8565b7f2a1b2dd8000000000000000000000000000000000000000000000000000000005f52600452651319718a500060245260445ffd5b90506020813d602011610952575b816109436020938361097d565b8101031261009c575183610651565b3d9150610936565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361009c57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109be57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261009c57519056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c;\x8F&\xA4\x14a\x05\x9AW\x80cUx\x19\xA4\x14a\x05,W\x80cb\x13\x82\x1D\x14a\x04\xBEW\x80c\x86\x1F\x86,\x14a\0\xA0Wc\xF3P\xC0\xD6\x14a\0PW_\x80\xFD[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@QsB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x81R\xF3[_\x80\xFD[4a\0\x9CW``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\0\xD7a\tZV[`$5\x90`D5\x90\x81\x83\x02\x83\x81\x04\x83\x14\x84\x15\x17\x15a\x03\xC4Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x04\x8CW[P\x82\x81\x10a\x04\\WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01R\x87`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x04%W[P`@Q\x91\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` \x83`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x92\x83\x15a\x03\xB9W_\x93a\x03\xF1W[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4W`\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94a\x01D\x94\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93` \x98`@Q\x92\x8A\x84\x01\x94\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86R`$\x85\x01R@`D\x84\x01R`D\x83Ra\x02\xCC`d\x84a\t}V[`@Q\x9A\x8B\x99\x8A\x98\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8AR\x16`\x04\x89\x01R_`$\x89\x01R_`D\x89\x01R3`d\x89\x01R3`\x84\x89\x01R`\xA4\x88\x01R`\xC4\x87\x01R`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[a\x03\xB0\x90` =` \x11a\x03\xB2W[a\x03\xA8\x81\x83a\t}V[\x81\x01\x90a\t\xEBV[\0[P=a\x03\x9EV[`@Q=_\x82>=\x90\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x92P` \x81=` \x11a\x04\x1DW[\x81a\x04\r` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x91\x85a\x02\x1AV[=\x91Pa\x04\0V[` \x81=` \x11a\x04TW[\x81a\x04>` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x01\xC7W_\x80\xFD[=\x91Pa\x041V[\x90P\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R`$R`D_\xFD[\x90P` \x81=` \x11a\x04\xB6W[\x81a\x04\xA7` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x86a\x01oV[=\x91Pa\x04\x9AV[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\x05\xD1a\tZV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\t(W[Pe\x13\x19q\x8AP\0\x81\x10a\x08\xF3WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01Re\x13\x19q\x8AP\0`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x08\xBCW[P`@Q\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x08\x8AW[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4Wa\x01Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x95`@Q\x97\x87\x89\x01\x91\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`$\x8A\x01R@`D\x89\x01R`D\x88Ra\x07\xB7`d\x89a\t}V[`@Q\x97\x88\x96\x87\x95\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x16`\x04\x86\x01R_`$\x86\x01R_`D\x86\x01R3`d\x86\x01R3`\x84\x86\x01Rb\x034P`\xA4\x86\x01Rc\x05\xF5\xE1\0`\xC4\x86\x01Re\x13\x19q\x8AP\0`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[\x90P` \x81=` \x11a\x08\xB4W[\x81a\x08\xA5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x82a\x07\x07V[=\x91Pa\x08\x98V[` \x81=` \x11a\x08\xEBW[\x81a\x08\xD5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x06\xB5W_\x80\xFD[=\x91Pa\x08\xC8V[\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04Re\x13\x19q\x8AP\0`$R`D_\xFD[\x90P` \x81=` \x11a\tRW[\x81a\tC` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x83a\x06QV[=\x91Pa\t6V[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\0\x9CWV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xBEW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0\x9CWQ\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientAllowance(uint256,uint256)` and selector `0x2a1b2dd8`.
```solidity
error InsufficientAllowance(uint256 allowance, uint256 amount);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientAllowance {
        #[allow(missing_docs)]
        pub allowance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientAllowance> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientAllowance) -> Self {
                (value.allowance, value.amount)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientAllowance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    allowance: tuple.0,
                    amount: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientAllowance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientAllowance(uint256,uint256)";
            const SELECTOR: [u8; 4] = [42u8, 27u8, 45u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _arbInbox, address _syndToken);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _arbInbox: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _syndToken: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._arbInbox, value._syndToken)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _arbInbox: tuple.0,
                        _syndToken: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._arbInbox,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._syndToken,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `L1_BLOCK_ADDRESS()` and selector `0xf350c0d6`.
```solidity
function L1_BLOCK_ADDRESS() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct L1_BLOCK_ADDRESSCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`L1_BLOCK_ADDRESS()`](L1_BLOCK_ADDRESSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct L1_BLOCK_ADDRESSReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<L1_BLOCK_ADDRESSCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: L1_BLOCK_ADDRESSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for L1_BLOCK_ADDRESSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<L1_BLOCK_ADDRESSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: L1_BLOCK_ADDRESSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for L1_BLOCK_ADDRESSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for L1_BLOCK_ADDRESSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "L1_BLOCK_ADDRESS()";
            const SELECTOR: [u8; 4] = [243u8, 80u8, 192u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: L1_BLOCK_ADDRESSReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: L1_BLOCK_ADDRESSReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `arbInbox()` and selector `0x557819a4`.
```solidity
function arbInbox() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arbInboxCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`arbInbox()`](arbInboxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arbInboxReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arbInboxCall> for UnderlyingRustTuple<'_> {
                fn from(value: arbInboxCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arbInboxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arbInboxReturn> for UnderlyingRustTuple<'_> {
                fn from(value: arbInboxReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arbInboxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for arbInboxCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "arbInbox()";
            const SELECTOR: [u8; 4] = [85u8, 120u8, 25u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: arbInboxReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: arbInboxReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `sendBlockHashes(address)` and selector `0x3b8f26a4`.
```solidity
function sendBlockHashes(address _gasArchive) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendBlockHashes_0Call {
        #[allow(missing_docs)]
        pub _gasArchive: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`sendBlockHashes(address)`](sendBlockHashes_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendBlockHashes_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendBlockHashes_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: sendBlockHashes_0Call) -> Self {
                    (value._gasArchive,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sendBlockHashes_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _gasArchive: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendBlockHashes_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: sendBlockHashes_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sendBlockHashes_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl sendBlockHashes_0Return {
            fn _tokenize(
                &self,
            ) -> <sendBlockHashes_0Call as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sendBlockHashes_0Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sendBlockHashes_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sendBlockHashes(address)";
            const SELECTOR: [u8; 4] = [59u8, 143u8, 38u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._gasArchive,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                sendBlockHashes_0Return::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `sendBlockHashes(address,uint256,uint256)` and selector `0x861f862c`.
```solidity
function sendBlockHashes(address _gasArchive, uint256 _gasLimit, uint256 _maxFeePerGas) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendBlockHashes_1Call {
        #[allow(missing_docs)]
        pub _gasArchive: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _gasLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _maxFeePerGas: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`sendBlockHashes(address,uint256,uint256)`](sendBlockHashes_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendBlockHashes_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendBlockHashes_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: sendBlockHashes_1Call) -> Self {
                    (value._gasArchive, value._gasLimit, value._maxFeePerGas)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sendBlockHashes_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _gasArchive: tuple.0,
                        _gasLimit: tuple.1,
                        _maxFeePerGas: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendBlockHashes_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: sendBlockHashes_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for sendBlockHashes_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl sendBlockHashes_1Return {
            fn _tokenize(
                &self,
            ) -> <sendBlockHashes_1Call as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sendBlockHashes_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sendBlockHashes_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sendBlockHashes(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [134u8, 31u8, 134u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._gasArchive,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._gasLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._maxFeePerGas),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                sendBlockHashes_1Return::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `syndToken()` and selector `0x6213821d`.
```solidity
function syndToken() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndTokenCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`syndToken()`](syndTokenCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndTokenReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndTokenCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndTokenCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndTokenCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndTokenReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndTokenReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndTokenReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndTokenCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "syndToken()";
            const SELECTOR: [u8; 4] = [98u8, 19u8, 130u8, 29u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: syndTokenReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: syndTokenReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`BlockHashRelayer`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum BlockHashRelayerCalls {
        #[allow(missing_docs)]
        L1_BLOCK_ADDRESS(L1_BLOCK_ADDRESSCall),
        #[allow(missing_docs)]
        arbInbox(arbInboxCall),
        #[allow(missing_docs)]
        sendBlockHashes_0(sendBlockHashes_0Call),
        #[allow(missing_docs)]
        sendBlockHashes_1(sendBlockHashes_1Call),
        #[allow(missing_docs)]
        syndToken(syndTokenCall),
    }
    #[automatically_derived]
    impl BlockHashRelayerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [59u8, 143u8, 38u8, 164u8],
            [85u8, 120u8, 25u8, 164u8],
            [98u8, 19u8, 130u8, 29u8],
            [134u8, 31u8, 134u8, 44u8],
            [243u8, 80u8, 192u8, 214u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BlockHashRelayerCalls {
        const NAME: &'static str = "BlockHashRelayerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::L1_BLOCK_ADDRESS(_) => {
                    <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::arbInbox(_) => <arbInboxCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::sendBlockHashes_0(_) => {
                    <sendBlockHashes_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sendBlockHashes_1(_) => {
                    <sendBlockHashes_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::syndToken(_) => {
                    <syndTokenCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<BlockHashRelayerCalls>] = &[
                {
                    fn sendBlockHashes_0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <sendBlockHashes_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(BlockHashRelayerCalls::sendBlockHashes_0)
                    }
                    sendBlockHashes_0
                },
                {
                    fn arbInbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <arbInboxCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(BlockHashRelayerCalls::arbInbox)
                    }
                    arbInbox
                },
                {
                    fn syndToken(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <syndTokenCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(BlockHashRelayerCalls::syndToken)
                    }
                    syndToken
                },
                {
                    fn sendBlockHashes_1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <sendBlockHashes_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(BlockHashRelayerCalls::sendBlockHashes_1)
                    }
                    sendBlockHashes_1
                },
                {
                    fn L1_BLOCK_ADDRESS(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(BlockHashRelayerCalls::L1_BLOCK_ADDRESS)
                    }
                    L1_BLOCK_ADDRESS
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<BlockHashRelayerCalls>] = &[
                {
                    fn sendBlockHashes_0(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <sendBlockHashes_0Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashRelayerCalls::sendBlockHashes_0)
                    }
                    sendBlockHashes_0
                },
                {
                    fn arbInbox(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <arbInboxCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashRelayerCalls::arbInbox)
                    }
                    arbInbox
                },
                {
                    fn syndToken(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <syndTokenCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashRelayerCalls::syndToken)
                    }
                    syndToken
                },
                {
                    fn sendBlockHashes_1(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <sendBlockHashes_1Call as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashRelayerCalls::sendBlockHashes_1)
                    }
                    sendBlockHashes_1
                },
                {
                    fn L1_BLOCK_ADDRESS(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerCalls> {
                        <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashRelayerCalls::L1_BLOCK_ADDRESS)
                    }
                    L1_BLOCK_ADDRESS
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::L1_BLOCK_ADDRESS(inner) => {
                    <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::arbInbox(inner) => {
                    <arbInboxCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::sendBlockHashes_0(inner) => {
                    <sendBlockHashes_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sendBlockHashes_1(inner) => {
                    <sendBlockHashes_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::syndToken(inner) => {
                    <syndTokenCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::L1_BLOCK_ADDRESS(inner) => {
                    <L1_BLOCK_ADDRESSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::arbInbox(inner) => {
                    <arbInboxCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sendBlockHashes_0(inner) => {
                    <sendBlockHashes_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sendBlockHashes_1(inner) => {
                    <sendBlockHashes_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::syndToken(inner) => {
                    <syndTokenCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`BlockHashRelayer`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum BlockHashRelayerErrors {
        #[allow(missing_docs)]
        InsufficientAllowance(InsufficientAllowance),
    }
    #[automatically_derived]
    impl BlockHashRelayerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[42u8, 27u8, 45u8, 216u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for BlockHashRelayerErrors {
        const NAME: &'static str = "BlockHashRelayerErrors";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InsufficientAllowance(_) => {
                    <InsufficientAllowance as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<BlockHashRelayerErrors>] = &[
                {
                    fn InsufficientAllowance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerErrors> {
                        <InsufficientAllowance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(BlockHashRelayerErrors::InsufficientAllowance)
                    }
                    InsufficientAllowance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<BlockHashRelayerErrors>] = &[
                {
                    fn InsufficientAllowance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<BlockHashRelayerErrors> {
                        <InsufficientAllowance as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(BlockHashRelayerErrors::InsufficientAllowance)
                    }
                    InsufficientAllowance
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InsufficientAllowance(inner) => {
                    <InsufficientAllowance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InsufficientAllowance(inner) => {
                    <InsufficientAllowance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`BlockHashRelayer`](self) contract instance.

See the [wrapper's documentation](`BlockHashRelayerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> BlockHashRelayerInstance<P, N> {
        BlockHashRelayerInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _arbInbox: alloy::sol_types::private::Address,
        _syndToken: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<BlockHashRelayerInstance<P, N>>,
    > {
        BlockHashRelayerInstance::<P, N>::deploy(provider, _arbInbox, _syndToken)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _arbInbox: alloy::sol_types::private::Address,
        _syndToken: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        BlockHashRelayerInstance::<P, N>::deploy_builder(provider, _arbInbox, _syndToken)
    }
    /**A [`BlockHashRelayer`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`BlockHashRelayer`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct BlockHashRelayerInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for BlockHashRelayerInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("BlockHashRelayerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > BlockHashRelayerInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`BlockHashRelayer`](self) contract instance.

See the [wrapper's documentation](`BlockHashRelayerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _arbInbox: alloy::sol_types::private::Address,
            _syndToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<BlockHashRelayerInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider, _arbInbox, _syndToken);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _arbInbox: alloy::sol_types::private::Address,
            _syndToken: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _arbInbox,
                            _syndToken,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> BlockHashRelayerInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> BlockHashRelayerInstance<P, N> {
            BlockHashRelayerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > BlockHashRelayerInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`L1_BLOCK_ADDRESS`] function.
        pub fn L1_BLOCK_ADDRESS(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, L1_BLOCK_ADDRESSCall, N> {
            self.call_builder(&L1_BLOCK_ADDRESSCall)
        }
        ///Creates a new call builder for the [`arbInbox`] function.
        pub fn arbInbox(&self) -> alloy_contract::SolCallBuilder<&P, arbInboxCall, N> {
            self.call_builder(&arbInboxCall)
        }
        ///Creates a new call builder for the [`sendBlockHashes_0`] function.
        pub fn sendBlockHashes_0(
            &self,
            _gasArchive: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, sendBlockHashes_0Call, N> {
            self.call_builder(
                &sendBlockHashes_0Call {
                    _gasArchive,
                },
            )
        }
        ///Creates a new call builder for the [`sendBlockHashes_1`] function.
        pub fn sendBlockHashes_1(
            &self,
            _gasArchive: alloy::sol_types::private::Address,
            _gasLimit: alloy::sol_types::private::primitives::aliases::U256,
            _maxFeePerGas: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, sendBlockHashes_1Call, N> {
            self.call_builder(
                &sendBlockHashes_1Call {
                    _gasArchive,
                    _gasLimit,
                    _maxFeePerGas,
                },
            )
        }
        ///Creates a new call builder for the [`syndToken`] function.
        pub fn syndToken(&self) -> alloy_contract::SolCallBuilder<&P, syndTokenCall, N> {
            self.call_builder(&syndTokenCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > BlockHashRelayerInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
