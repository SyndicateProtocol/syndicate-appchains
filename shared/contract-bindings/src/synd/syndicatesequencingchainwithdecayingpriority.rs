/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChainWithDecayingPriority {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrSenderNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);
    event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);

    constructor(uint256 _appchainId);

    function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
    function PRIORITY_DECAY_RATE() external view returns (uint256);
    function accumulator() external view returns (bytes32);
    function appchainId() external view returns (uint256);
    function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function isArbChain() external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
    function processTransaction(bytes memory data, uint256 priority) external;
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data, uint256 priority) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ACCUMULATOR_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "PRIORITY_DECAY_RATE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "accumulator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appchainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEffectivePriority",
    "inputs": [
      {
        "name": "originalPriority",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "submittedTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isArbChain",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prependZeroByte",
    "inputs": [
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "priorities",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "originalPriority",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrSenderNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChainWithDecayingPriority {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c060405234610048576100196100146100f9565b61011a565b61002161004d565b611cb16106bd8239608051818181610aa00152611a17015260a05181610a470152611cb190f35b610053565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007f90610057565b810190811060018060401b0382111761009757604052565b610061565b906100af6100a861004d565b9283610075565b565b5f80fd5b90565b6100c1816100b5565b036100c857565b5f80fd5b905051906100d9826100b8565b565b906020828203126100f4576100f1915f016100cc565b90565b6100b1565b61011761252d8038038061010c8161009c565b9283398101906100db565b90565b610123906101d2565b565b90565b90565b61013f61013a61014492610125565b610128565b6100b5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b6101846018602092610147565b61018d81610150565b0190565b6101a69060208101905f818303910152610177565b90565b156101b057565b6101b861004d565b62461bcd60e51b8152806101ce60048201610191565b0390fd5b6101da610335565b6101f7816101f06101ea5f61012b565b916100b5565b14156101a9565b60a052565b60018060a01b031690565b61021b610216610220926101fc565b610128565b6101fc565b90565b61022c90610207565b90565b61023890610223565b90565b610245606461022f565b90565b61025190610207565b90565b61025d90610248565b90565b151590565b61026f9051610260565b90565b60e01b90565b5f0190565b61028561004d565b3d5f823e3d90fd5b60207f6c65640000000000000000000000000000000000000000000000000000000000917f41726253797320707265636f6d70696c652076616c69646174696f6e206661695f8201520152565b6102e76023604092610147565b6102f08161028d565b0190565b6103099060208101905f8183039101526102da565b90565b1561031357565b61031b61004d565b62461bcd60e51b815280610331600482016102f4565b0390fd5b61033d6104dd565b61034d61034861023b565b610254565b3b61036061035a5f61012b565b916100b5565b116080526103776103716080610265565b15610260565b8015610389575b6103879061030c565b565b506103b5602061039f61039a61023b565b610254565b63a3b1b31d906103ad61004d565b938492610272565b825281806103c560048201610278565b03915afa801561042357610387915f916103f5575b506103ed6103e75f61012b565b916100b5565b11905061037e565b610416915060203d811161041c575b61040e8183610075565b8101906100db565b5f6103da565b503d610404565b61027d565b60a01b90565b9061043d60ff60a01b91610428565b9181191691161790565b61045090610260565b90565b90565b9061046b61046661047292610447565b610453565b825461042e565b9055565b61047f90610207565b90565b61048b90610476565b90565b5f1b90565b906104a460018060a01b039161048e565b9181191691161790565b6104b790610476565b90565b90565b906104d26104cd6104d9926104ae565b6104ba565b8254610493565b9055565b6104e63361054a565b6104f15f6001610456565b6104f961004d565b6101bf810181811060018060401b038211176105455761052182916101bf61236e8439610278565b03905ff080156105405761053761053e91610482565b60016104bd565b565b61027d565b610061565b610553906105ab565b565b61056961056461056e92610125565b610128565b6101fc565b90565b61057a90610555565b90565b610586906101fc565b90565b6105929061057d565b9052565b91906105a9905f60208501940190610589565b565b806105c66105c06105bb5f610571565b61057d565b9161057d565b146105d6576105d49061065d565b565b6105f96105e25f610571565b5f918291631e4fbdf760e01b835260048301610596565b0390fd5b5f1c90565b60018060a01b031690565b61061961061e916105fd565b610602565b90565b61062b905461060d565b90565b61063790610248565b90565b90565b9061065261064d6106599261062e565b61063a565b8254610493565b9055565b6106665f610621565b610670825f61063d565b906106a461069e7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361062e565b9161062e565b916106ad61004d565b806106b781610278565b0390a356fe60806040526004361015610013575b610b2a565b61001d5f3561015c565b80630338115414610157578063050ec1381461015257806311992f8c1461014d5780631c0b636714610148578063366cbab7146101435780633d44ae8b1461013e57806346e2cc0914610139578063485cc955146101345780635b3cd6e21461012f57806363d964371461012a578063715018a6146101255780637a3979dc14610120578063804e51231461011b57806383d3c115146101165780638da5cb5b14610111578063cdafb9781461010c578063d4f0eb4d14610107578063d878134214610102578063ea161ce6146100fd5763f2fde38b0361000e57610af7565b610ac2565b610a69565b610a12565b6109c0565b610955565b6108fd565b61088f565b610856565b6107aa565b610775565b6106e5565b610617565b61057c565b610547565b6104b5565b6103e0565b6103a9565b610298565b6101a4565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261017a57565b61016c565b90565b61018b9061017f565b9052565b91906101a2905f60208501940190610182565b565b346101d4576101b4366004610170565b6101d06101bf610b5b565b6101c7610162565b9182918261018f565b0390f35b610168565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102235781359167ffffffffffffffff831161021e57602001926001830284011161021957565b6101e5565b6101e1565b6101dd565b90565b61023481610228565b0361023b57565b5f80fd5b9050359061024c8261022b565b565b9160408383031261028e575f83013567ffffffffffffffff81116102895761027b836102869286016101e9565b93909460200161023f565b90565b6101d9565b61016c565b5f0190565b346102c7576102b16102ab36600461024e565b91610c55565b6102b9610162565b806102c381610293565b0390f35b610168565b909182601f830112156103065781359167ffffffffffffffff83116103015760200192602083028401116102fc57565b6101e5565b6101e1565b6101dd565b909182601f830112156103455781359167ffffffffffffffff831161034057602001926020830284011161033b57565b6101e5565b6101e1565b6101dd565b90916040828403126103a4575f82013567ffffffffffffffff811161039f57836103759184016102cc565b929093602082013567ffffffffffffffff811161039a57610396920161030b565b9091565b6101d9565b6101d9565b61016c565b346103db576103c56103bc36600461034a565b92919091610df2565b6103cd610162565b806103d781610293565b0390f35b610168565b3461040f576103f96103f336600461024e565b91610fe9565b610401610162565b8061040b81610293565b0390f35b610168565b90602082820312610445575f82013567ffffffffffffffff81116104405761043c92016101e9565b9091565b6101d9565b61016c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61048b610494602093610499936104828161044a565b9384809361044e565b95869101610457565b610462565b0190565b6104b29160208201915f81840391015261046c565b90565b346104e6576104e26104d16104cb366004610414565b906110b6565b6104d9610162565b9182918261049d565b0390f35b610168565b90565b90565b61050561050061050a926104eb565b6104ee565b610228565b90565b610517600a6104f1565b90565b61052261050d565b90565b61052e90610228565b9052565b9190610545905f60208501940190610525565b565b3461057757610557366004610170565b61057361056261051a565b61056a610162565b91829182610532565b0390f35b610168565b346105ab5761059561058f366004610414565b906111d2565b61059d610162565b806105a781610293565b0390f35b610168565b60018060a01b031690565b6105c4906105b0565b90565b6105d0816105bb565b036105d757565b5f80fd5b905035906105e8826105c7565b565b9190604083820312610612578061060661060f925f86016105db565b936020016105db565b90565b61016c565b346106465761063061062a3660046105ea565b90611384565b610638610162565b8061064281610293565b0390f35b610168565b1c90565b60018060a01b031690565b61066a90600861066f930261064b565b61064f565b90565b9061067d915461065a565b90565b61068c60015f90610672565b90565b6106a361069e6106a8926105b0565b6104ee565b6105b0565b90565b6106b49061068f565b90565b6106c0906106ab565b90565b6106cc906106b7565b9052565b91906106e3905f602085019401906106c3565b565b34610715576106f5366004610170565b610711610700610680565b610708610162565b918291826106d0565b0390f35b610168565b90565b5f1b90565b61073661073161073b9261071a565b61071d565b61017f565b90565b6107677f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b90610722565b90565b61077261073e565b90565b346107a557610785366004610170565b6107a161079061076a565b610798610162565b9182918261018f565b0390f35b610168565b346107d8576107ba366004610170565b6107c26113b5565b6107ca610162565b806107d481610293565b0390f35b610168565b9160608383031261082a576107f4825f85016105db565b9261080283602083016105db565b92604082013567ffffffffffffffff81116108255761082192016101e9565b9091565b6101d9565b61016c565b151590565b61083d9061082f565b9052565b9190610854905f60208501940190610834565b565b3461088a5761088661087561086c3660046107dd565b92919091611471565b61087d610162565b91829182610841565b0390f35b610168565b346108be576108a86108a2366004610414565b90611563565b6108b0610162565b806108ba81610293565b0390f35b610168565b90916060828403126108f8576108f56108de845f850161023f565b936108ec816020860161023f565b9360400161023f565b90565b61016c565b3461092e5761092a6109196109133660046108c3565b916115e1565b610921610162565b91829182610532565b0390f35b610168565b61093c906105bb565b9052565b9190610953905f60208501940190610933565b565b3461098557610965366004610170565b610981610970611687565b610978610162565b91829182610940565b0390f35b610168565b906020828203126109bb575f82013567ffffffffffffffff81116109b6576109b292016102cc565b9091565b6101d9565b61016c565b346109ef576109d96109d336600461098a565b9061169c565b6109e1610162565b806109eb81610293565b0390f35b610168565b90602082820312610a0d57610a0a915f016105db565b90565b61016c565b34610a4057610a2a610a253660046109f4565b6117c4565b610a32610162565b80610a3c81610293565b0390f35b610168565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610a9957610a79366004610170565b610a95610a84610a45565b610a8c610162565b91829182610532565b0390f35b610168565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610af257610ad2366004610170565b610aee610add610a9e565b610ae5610162565b91829182610841565b0390f35b610168565b34610b2557610b0f610b0a3660046109f4565b611834565b610b17610162565b80610b2181610293565b0390f35b610168565b5f80fd5b5f90565b5f1c90565b90565b610b46610b4b91610b32565b610b37565b90565b610b589054610b3a565b90565b610b63610b2e565b50610b765f610b7061183f565b01610b4e565b90565b9190610b96610b9033329086859192909192611471565b1561082f565b610ba557610ba392610c02565b565b5f631b8e828b60e31b815280610bbd60048201610293565b0390fd5b610bca906106ab565b90565b604090610bf9610bee610c009597969460608401908482035f86015261046c565b966020830190610525565b0190610525565b565b90610c0e9033926110b6565b914292610c50610c3e7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610bc1565b94610c47610162565b93849384610bcd565b0390a2565b90610c609291610b79565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610ccd6032604092610c6a565b610cd681610c73565b0190565b610cef9060208101905f818303910152610cc0565b90565b15610cf957565b610d01610162565b62461bcd60e51b815280610d1760048201610cda565b0390fd5b90565b610d32610d2d610d3792610d1b565b6104ee565b610228565b90565b6001610d469101610228565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610dab570180359067ffffffffffffffff8211610da657602001916001820236038313610da157565b610d65565b610d61565b610d5d565b90821015610dcb576020610dc79202810190610d69565b9091565b610d49565b9190811015610de0576020020190565b610d49565b35610def8161022b565b90565b9092610dff828590610c62565b93610e2685610e20610e1a610e15888790610c66565b610228565b91610228565b14610cf2565b610e2f5f610d1e565b5b80610e43610e3d88610228565b91610228565b1015610eea57610e7190610e67333290610e5f88878691610db0565b929091611471565b610e76575b610d3a565b610e30565b33610e8c610e8687868591610db0565b906110b6565b90610ea1610e9c89888691610dd0565b610de5565b4292610ee2610ed07f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610bc1565b94610ed9610162565b93849384610bcd565b0390a2610e6c565b505050505050565b9190610f0f610f0933329086859192909192611471565b1561082f565b610f1e57610f1c92610f9d565b565b5f631b8e828b60e31b815280610f3660048201610293565b0390fd5b90825f939282370152565b9190610f5f81610f5881610f649561044e565b8095610f3a565b610462565b0190565b610f94610f89604093610f9b9698979560608501918583035f870152610f45565b966020830190610525565b0190610525565b565b90913391929092610fe442610fd27f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610bc1565b95610fdb610162565b94859485610f68565b0390a2565b90610ff49291610ef2565b565b606090565b60ff60f81b1690565b60f81b90565b61101e61101961102392610d1b565b611004565b610ffb565b90565b90565b61103561103a91610ffb565b611026565b9052565b905090565b9091826110538161105a9361103e565b8093610f3a565b0190565b8061106f6001926110769694611029565b0191611043565b90565b634e487b7160e01b5f52604160045260245ffd5b9061109790610462565b810190811067ffffffffffffffff8211176110b157604052565b611079565b6110f4906110c2610ff6565b506110e56110cf5f61100a565b91936110d9610162565b9485936020850161105e565b6020820181038252038261108d565b90565b9061111361110d33329085859192909192611471565b1561082f565b61112257611120916111be565b565b5f631b8e828b60e31b81528061113a60048201610293565b0390fd5b5f80fd5b9061115561114e610162565b928361108d565b565b67ffffffffffffffff811161117557611171602091610462565b0190565b611079565b9092919261118f61118a82611157565b611142565b938185526020850190828401116111ab576111a992610f3a565b565b61113e565b6111bb91369161117a565b90565b6111d0916111cb916111b0565b611a0c565b565b906111dc916110f7565b565b906111f0916111eb611bd4565b6112f7565b565b60a01c90565b60ff1690565b61120a61120f916111f2565b6111f8565b90565b61121c90546111fe565b90565b61123361122e61123892610d1b565b6104ee565b6105b0565b90565b6112449061121f565b90565b60a01b90565b9061125c60ff60a01b91611247565b9181191691161790565b61126f9061082f565b90565b90565b9061128a61128561129192611266565b611272565b825461124d565b9055565b61129e9061068f565b90565b6112aa90611295565b90565b906112be60018060a01b039161071d565b9181191691161790565b6112d190611295565b90565b90565b906112ec6112e76112f3926112c8565b6112d4565b82546112ad565b9055565b6113016001611212565b611369578161132061131a6113155f61123b565b6105bb565b916105bb565b1461134d5761134661133f61134b9361133a600180611275565b6112a1565b60016112d7565b611834565b565b5f632e7f3c7f60e11b81528061136560048201610293565b0390fd5b5f62dc149f60e41b81528061138060048201610293565b0390fd5b9061138e916111de565b565b611398611bd4565b6113a06113a2565b565b6113b36113ae5f61123b565b611c45565b565b6113bd611390565b565b5f90565b6113cf6113d491610b32565b61064f565b90565b6113e190546113c3565b90565b60e01b90565b6113f38161082f565b036113fa57565b5f80fd5b9050519061140b826113ea565b565b9060208282031261142657611423915f016113fe565b90565b61016c565b61145161145e959394929461144760608401965f850190610933565b6020830190610933565b6040818503910152610f45565b90565b611469610162565b3d5f823e3d90fd5b926114b4602093946114816113bf565b506114bf61149761149260016113d7565b6106b7565b93637a3979dc9295976114a8610162565b988997889687966113e4565b86526004860161142b565b03915afa908115611503575f916114d5575b5090565b6114f6915060203d81116114fc575b6114ee818361108d565b81019061140d565b5f6114d1565b503d6114e4565b611461565b9061152461151e33329085859192909192611471565b1561082f565b611533576115319161154f565b565b5f631b8e828b60e31b81528061154b60048201610293565b0390fd5b6115619161155c916110b6565b611a0c565b565b9061156d91611508565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61159661159c91939293610228565b92610228565b82039182116115a757565b611573565b6115bb6115c191939293610228565b92610228565b916115cd838202610228565b9281840414901517156115dc57565b611573565b916115ea61156f565b50806115fe6115f884610228565b91610228565b11156116525761161f9161161191611587565b61161961050d565b906115ac565b8061163261162c84610228565b91610228565b10156116445761164191611587565b90565b505061164f5f610d1e565b90565b505090565b5f90565b60018060a01b031690565b61167261167791610b32565b61165b565b90565b6116849054611666565b90565b61168f611657565b506116995f61167a565b90565b6116a7818390610c62565b916116b15f610d1e565b5b806116c56116bf86610228565b91610228565b101561171a576116f3906116e93332906116e187878691610db0565b929091611471565b6116f8575b610d3a565b6116b2565b61171561171061170a86868591610db0565b906110b6565b611a0c565b6116ee565b50505050565b6117319061172c611bd4565b611733565b565b8061174e6117486117435f61123b565b6105bb565b916105bb565b146117a85761176661175f826112a1565b60016112d7565b6117907f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610bc1565b90611799610162565b806117a381610293565b0390a2565b5f632e7f3c7f60e11b8152806117c060048201610293565b0390fd5b6117cd90611720565b565b6117e0906117db611bd4565b6117e2565b565b806117fd6117f76117f25f61123b565b6105bb565b916105bb565b1461180d5761180b90611c45565b565b6118306118195f61123b565b5f918291631e4fbdf760e01b835260048301610940565b0390fd5b61183d906117cf565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61188861188361188d92610228565b6104ee565b611867565b90565b6118999061068f565b90565b6118a590611890565b90565b6118b2606461189c565b90565b6118be906106ab565b90565b905051906118ce8261022b565b565b906020828203126118e9576118e6915f016118c1565b90565b61016c565b60200190565b60601b90565b611903906118f4565b90565b61190f906118fa565b90565b61191e611923916105bb565b611906565b9052565b60c01b90565b61193690611927565b90565b61194561194a91611867565b61192d565b9052565b90565b61195d6119629161017f565b61194e565b9052565b92611994600861199c9461198c60148861198460209b9a8699611912565b018092611939565b018092611939565b018092611951565b0190565b6020816119b26119ba93839695611951565b018092611951565b0190565b906119ca5f199161071d565b9181191691161790565b6119dd9061017f565b90565b6119e990610b32565b90565b90611a016119fc611a08926119d4565b6119e0565b82546119be565b9055565b611a14611863565b507f00000000000000000000000000000000000000000000000000000000000000005f14611bc357611a676020611a51611a4c6118a8565b6118b5565b63a3b1b31d90611a5f610162565b9384926113e4565b82528180611a7760048201610293565b03915afa908115611bbe57611b4b91611a97915f91611b90575b50611874565b5b5f611aa161183f565b91611aea33611adb611ab242611874565b88611ac5611abf8261044a565b916118ee565b2090611acf610162565b95869460208601611966565b6020820181038252038261108d565b611afc611af68261044a565b916118ee565b20611b31611b0b838501610b4e565b611b22611b16610162565b938492602084016119a0565b6020820181038252038261108d565b611b43611b3d8261044a565b916118ee565b2091016119ec565b33611b8b611b797f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610bc1565b92611b82610162565b9182918261049d565b0390a2565b611bb1915060203d8111611bb7575b611ba9818361108d565b8101906118d0565b5f611a91565b503d611b9f565b611461565b611b4b611bcf43611874565b611a98565b611bdc611687565b611bf5611bef611bea611ca4565b6105bb565b916105bb565b03611bfc57565b611c1e611c07611ca4565b5f91829163118cdaa760e01b835260048301610940565b0390fd5b90565b90611c3a611c35611c4192610bc1565b611c22565b82546112ad565b9055565b611c4e5f61167a565b611c58825f611c25565b90611c8c611c867f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610bc1565b91610bc1565b91611c95610162565b80611c9f81610293565b0390a3565b611cac611657565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4a\0HWa\0\x19a\0\x14a\0\xF9V[a\x01\x1AV[a\0!a\0MV[a\x1C\xB1a\x06\xBD\x829`\x80Q\x81\x81\x81a\n\xA0\x01Ra\x1A\x17\x01R`\xA0Q\x81a\nG\x01Ra\x1C\xB1\x90\xF3[a\0SV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\x7F\x90a\0WV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x97W`@RV[a\0aV[\x90a\0\xAFa\0\xA8a\0MV[\x92\x83a\0uV[V[_\x80\xFD[\x90V[a\0\xC1\x81a\0\xB5V[\x03a\0\xC8WV[_\x80\xFD[\x90PQ\x90a\0\xD9\x82a\0\xB8V[V[\x90` \x82\x82\x03\x12a\0\xF4Wa\0\xF1\x91_\x01a\0\xCCV[\x90V[a\0\xB1V[a\x01\x17a%-\x808\x03\x80a\x01\x0C\x81a\0\x9CV[\x92\x839\x81\x01\x90a\0\xDBV[\x90V[a\x01#\x90a\x01\xD2V[V[\x90V[\x90V[a\x01?a\x01:a\x01D\x92a\x01%V[a\x01(V[a\0\xB5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01\x84`\x18` \x92a\x01GV[a\x01\x8D\x81a\x01PV[\x01\x90V[a\x01\xA6\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01wV[\x90V[\x15a\x01\xB0WV[a\x01\xB8a\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xCE`\x04\x82\x01a\x01\x91V[\x03\x90\xFD[a\x01\xDAa\x035V[a\x01\xF7\x81a\x01\xF0a\x01\xEA_a\x01+V[\x91a\0\xB5V[\x14\x15a\x01\xA9V[`\xA0RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x1Ba\x02\x16a\x02 \x92a\x01\xFCV[a\x01(V[a\x01\xFCV[\x90V[a\x02,\x90a\x02\x07V[\x90V[a\x028\x90a\x02#V[\x90V[a\x02E`da\x02/V[\x90V[a\x02Q\x90a\x02\x07V[\x90V[a\x02]\x90a\x02HV[\x90V[\x15\x15\x90V[a\x02o\x90Qa\x02`V[\x90V[`\xE0\x1B\x90V[_\x01\x90V[a\x02\x85a\0MV[=_\x82>=\x90\xFD[` \x7Fled\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FArbSys precompile validation fai_\x82\x01R\x01RV[a\x02\xE7`#`@\x92a\x01GV[a\x02\xF0\x81a\x02\x8DV[\x01\x90V[a\x03\t\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xDAV[\x90V[\x15a\x03\x13WV[a\x03\x1Ba\0MV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x031`\x04\x82\x01a\x02\xF4V[\x03\x90\xFD[a\x03=a\x04\xDDV[a\x03Ma\x03Ha\x02;V[a\x02TV[;a\x03`a\x03Z_a\x01+V[\x91a\0\xB5V[\x11`\x80Ra\x03wa\x03q`\x80a\x02eV[\x15a\x02`V[\x80\x15a\x03\x89W[a\x03\x87\x90a\x03\x0CV[V[Pa\x03\xB5` a\x03\x9Fa\x03\x9Aa\x02;V[a\x02TV[c\xA3\xB1\xB3\x1D\x90a\x03\xADa\0MV[\x93\x84\x92a\x02rV[\x82R\x81\x80a\x03\xC5`\x04\x82\x01a\x02xV[\x03\x91Z\xFA\x80\x15a\x04#Wa\x03\x87\x91_\x91a\x03\xF5W[Pa\x03\xEDa\x03\xE7_a\x01+V[\x91a\0\xB5V[\x11\x90Pa\x03~V[a\x04\x16\x91P` =\x81\x11a\x04\x1CW[a\x04\x0E\x81\x83a\0uV[\x81\x01\x90a\0\xDBV[_a\x03\xDAV[P=a\x04\x04V[a\x02}V[`\xA0\x1B\x90V[\x90a\x04=`\xFF`\xA0\x1B\x91a\x04(V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04P\x90a\x02`V[\x90V[\x90V[\x90a\x04ka\x04fa\x04r\x92a\x04GV[a\x04SV[\x82Ta\x04.V[\x90UV[a\x04\x7F\x90a\x02\x07V[\x90V[a\x04\x8B\x90a\x04vV[\x90V[_\x1B\x90V[\x90a\x04\xA4`\x01\x80`\xA0\x1B\x03\x91a\x04\x8EV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xB7\x90a\x04vV[\x90V[\x90V[\x90a\x04\xD2a\x04\xCDa\x04\xD9\x92a\x04\xAEV[a\x04\xBAV[\x82Ta\x04\x93V[\x90UV[a\x04\xE63a\x05JV[a\x04\xF1_`\x01a\x04VV[a\x04\xF9a\0MV[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x05EWa\x05!\x82\x91a\x01\xBFa#n\x849a\x02xV[\x03\x90_\xF0\x80\x15a\x05@Wa\x057a\x05>\x91a\x04\x82V[`\x01a\x04\xBDV[V[a\x02}V[a\0aV[a\x05S\x90a\x05\xABV[V[a\x05ia\x05da\x05n\x92a\x01%V[a\x01(V[a\x01\xFCV[\x90V[a\x05z\x90a\x05UV[\x90V[a\x05\x86\x90a\x01\xFCV[\x90V[a\x05\x92\x90a\x05}V[\x90RV[\x91\x90a\x05\xA9\x90_` \x85\x01\x94\x01\x90a\x05\x89V[V[\x80a\x05\xC6a\x05\xC0a\x05\xBB_a\x05qV[a\x05}V[\x91a\x05}V[\x14a\x05\xD6Wa\x05\xD4\x90a\x06]V[V[a\x05\xF9a\x05\xE2_a\x05qV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\x96V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\x19a\x06\x1E\x91a\x05\xFDV[a\x06\x02V[\x90V[a\x06+\x90Ta\x06\rV[\x90V[a\x067\x90a\x02HV[\x90V[\x90V[\x90a\x06Ra\x06Ma\x06Y\x92a\x06.V[a\x06:V[\x82Ta\x04\x93V[\x90UV[a\x06f_a\x06!V[a\x06p\x82_a\x06=V[\x90a\x06\xA4a\x06\x9E\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06.V[\x91a\x06.V[\x91a\x06\xADa\0MV[\x80a\x06\xB7\x81a\x02xV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B*V[a\0\x1D_5a\x01\\V[\x80c\x038\x11T\x14a\x01WW\x80c\x05\x0E\xC18\x14a\x01RW\x80c\x11\x99/\x8C\x14a\x01MW\x80c\x1C\x0Bcg\x14a\x01HW\x80c6l\xBA\xB7\x14a\x01CW\x80c=D\xAE\x8B\x14a\x01>W\x80cF\xE2\xCC\t\x14a\x019W\x80cH\\\xC9U\x14a\x014W\x80c[<\xD6\xE2\x14a\x01/W\x80cc\xD9d7\x14a\x01*W\x80cqP\x18\xA6\x14a\x01%W\x80cz9y\xDC\x14a\x01 W\x80c\x80NQ#\x14a\x01\x1BW\x80c\x83\xD3\xC1\x15\x14a\x01\x16W\x80c\x8D\xA5\xCB[\x14a\x01\x11W\x80c\xCD\xAF\xB9x\x14a\x01\x0CW\x80c\xD4\xF0\xEBM\x14a\x01\x07W\x80c\xD8x\x13B\x14a\x01\x02W\x80c\xEA\x16\x1C\xE6\x14a\0\xFDWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\n\xF7V[a\n\xC2V[a\niV[a\n\x12V[a\t\xC0V[a\tUV[a\x08\xFDV[a\x08\x8FV[a\x08VV[a\x07\xAAV[a\x07uV[a\x06\xE5V[a\x06\x17V[a\x05|V[a\x05GV[a\x04\xB5V[a\x03\xE0V[a\x03\xA9V[a\x02\x98V[a\x01\xA4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01zWV[a\x01lV[\x90V[a\x01\x8B\x90a\x01\x7FV[\x90RV[\x91\x90a\x01\xA2\x90_` \x85\x01\x94\x01\x90a\x01\x82V[V[4a\x01\xD4Wa\x01\xB46`\x04a\x01pV[a\x01\xD0a\x01\xBFa\x0B[V[a\x01\xC7a\x01bV[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01hV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02#W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x1EW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\x19WV[a\x01\xE5V[a\x01\xE1V[a\x01\xDDV[\x90V[a\x024\x81a\x02(V[\x03a\x02;WV[_\x80\xFD[\x90P5\x90a\x02L\x82a\x02+V[V[\x91`@\x83\x83\x03\x12a\x02\x8EW_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x89Wa\x02{\x83a\x02\x86\x92\x86\x01a\x01\xE9V[\x93\x90\x94` \x01a\x02?V[\x90V[a\x01\xD9V[a\x01lV[_\x01\x90V[4a\x02\xC7Wa\x02\xB1a\x02\xAB6`\x04a\x02NV[\x91a\x0CUV[a\x02\xB9a\x01bV[\x80a\x02\xC3\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x06W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x01W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xFCWV[a\x01\xE5V[a\x01\xE1V[a\x01\xDDV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03EW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x01\x92` \x83\x02\x84\x01\x11a\x03;WV[a\x01\xE5V[a\x01\xE1V[a\x01\xDDV[\x90\x91`@\x82\x84\x03\x12a\x03\xA4W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x9FW\x83a\x03u\x91\x84\x01a\x02\xCCV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x9AWa\x03\x96\x92\x01a\x03\x0BV[\x90\x91V[a\x01\xD9V[a\x01\xD9V[a\x01lV[4a\x03\xDBWa\x03\xC5a\x03\xBC6`\x04a\x03JV[\x92\x91\x90\x91a\r\xF2V[a\x03\xCDa\x01bV[\x80a\x03\xD7\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[4a\x04\x0FWa\x03\xF9a\x03\xF36`\x04a\x02NV[\x91a\x0F\xE9V[a\x04\x01a\x01bV[\x80a\x04\x0B\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\x04EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04@Wa\x04<\x92\x01a\x01\xE9V[\x90\x91V[a\x01\xD9V[a\x01lV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x04\x8Ba\x04\x94` \x93a\x04\x99\x93a\x04\x82\x81a\x04JV[\x93\x84\x80\x93a\x04NV[\x95\x86\x91\x01a\x04WV[a\x04bV[\x01\x90V[a\x04\xB2\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04lV[\x90V[4a\x04\xE6Wa\x04\xE2a\x04\xD1a\x04\xCB6`\x04a\x04\x14V[\x90a\x10\xB6V[a\x04\xD9a\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xF3[a\x01hV[\x90V[\x90V[a\x05\x05a\x05\0a\x05\n\x92a\x04\xEBV[a\x04\xEEV[a\x02(V[\x90V[a\x05\x17`\na\x04\xF1V[\x90V[a\x05\"a\x05\rV[\x90V[a\x05.\x90a\x02(V[\x90RV[\x91\x90a\x05E\x90_` \x85\x01\x94\x01\x90a\x05%V[V[4a\x05wWa\x05W6`\x04a\x01pV[a\x05sa\x05ba\x05\x1AV[a\x05ja\x01bV[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\x01hV[4a\x05\xABWa\x05\x95a\x05\x8F6`\x04a\x04\x14V[\x90a\x11\xD2V[a\x05\x9Da\x01bV[\x80a\x05\xA7\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xC4\x90a\x05\xB0V[\x90V[a\x05\xD0\x81a\x05\xBBV[\x03a\x05\xD7WV[_\x80\xFD[\x90P5\x90a\x05\xE8\x82a\x05\xC7V[V[\x91\x90`@\x83\x82\x03\x12a\x06\x12W\x80a\x06\x06a\x06\x0F\x92_\x86\x01a\x05\xDBV[\x93` \x01a\x05\xDBV[\x90V[a\x01lV[4a\x06FWa\x060a\x06*6`\x04a\x05\xEAV[\x90a\x13\x84V[a\x068a\x01bV[\x80a\x06B\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06j\x90`\x08a\x06o\x93\x02a\x06KV[a\x06OV[\x90V[\x90a\x06}\x91Ta\x06ZV[\x90V[a\x06\x8C`\x01_\x90a\x06rV[\x90V[a\x06\xA3a\x06\x9Ea\x06\xA8\x92a\x05\xB0V[a\x04\xEEV[a\x05\xB0V[\x90V[a\x06\xB4\x90a\x06\x8FV[\x90V[a\x06\xC0\x90a\x06\xABV[\x90V[a\x06\xCC\x90a\x06\xB7V[\x90RV[\x91\x90a\x06\xE3\x90_` \x85\x01\x94\x01\x90a\x06\xC3V[V[4a\x07\x15Wa\x06\xF56`\x04a\x01pV[a\x07\x11a\x07\0a\x06\x80V[a\x07\x08a\x01bV[\x91\x82\x91\x82a\x06\xD0V[\x03\x90\xF3[a\x01hV[\x90V[_\x1B\x90V[a\x076a\x071a\x07;\x92a\x07\x1AV[a\x07\x1DV[a\x01\x7FV[\x90V[a\x07g\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x07\"V[\x90V[a\x07ra\x07>V[\x90V[4a\x07\xA5Wa\x07\x856`\x04a\x01pV[a\x07\xA1a\x07\x90a\x07jV[a\x07\x98a\x01bV[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01hV[4a\x07\xD8Wa\x07\xBA6`\x04a\x01pV[a\x07\xC2a\x13\xB5V[a\x07\xCAa\x01bV[\x80a\x07\xD4\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x91``\x83\x83\x03\x12a\x08*Wa\x07\xF4\x82_\x85\x01a\x05\xDBV[\x92a\x08\x02\x83` \x83\x01a\x05\xDBV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08%Wa\x08!\x92\x01a\x01\xE9V[\x90\x91V[a\x01\xD9V[a\x01lV[\x15\x15\x90V[a\x08=\x90a\x08/V[\x90RV[\x91\x90a\x08T\x90_` \x85\x01\x94\x01\x90a\x084V[V[4a\x08\x8AWa\x08\x86a\x08ua\x08l6`\x04a\x07\xDDV[\x92\x91\x90\x91a\x14qV[a\x08}a\x01bV[\x91\x82\x91\x82a\x08AV[\x03\x90\xF3[a\x01hV[4a\x08\xBEWa\x08\xA8a\x08\xA26`\x04a\x04\x14V[\x90a\x15cV[a\x08\xB0a\x01bV[\x80a\x08\xBA\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90\x91``\x82\x84\x03\x12a\x08\xF8Wa\x08\xF5a\x08\xDE\x84_\x85\x01a\x02?V[\x93a\x08\xEC\x81` \x86\x01a\x02?V[\x93`@\x01a\x02?V[\x90V[a\x01lV[4a\t.Wa\t*a\t\x19a\t\x136`\x04a\x08\xC3V[\x91a\x15\xE1V[a\t!a\x01bV[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\x01hV[a\t<\x90a\x05\xBBV[\x90RV[\x91\x90a\tS\x90_` \x85\x01\x94\x01\x90a\t3V[V[4a\t\x85Wa\te6`\x04a\x01pV[a\t\x81a\tpa\x16\x87V[a\txa\x01bV[\x91\x82\x91\x82a\t@V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\t\xBBW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xB6Wa\t\xB2\x92\x01a\x02\xCCV[\x90\x91V[a\x01\xD9V[a\x01lV[4a\t\xEFWa\t\xD9a\t\xD36`\x04a\t\x8AV[\x90a\x16\x9CV[a\t\xE1a\x01bV[\x80a\t\xEB\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\n\rWa\n\n\x91_\x01a\x05\xDBV[\x90V[a\x01lV[4a\n@Wa\n*a\n%6`\x04a\t\xF4V[a\x17\xC4V[a\n2a\x01bV[\x80a\n<\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\x99Wa\ny6`\x04a\x01pV[a\n\x95a\n\x84a\nEV[a\n\x8Ca\x01bV[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\x01hV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\xF2Wa\n\xD26`\x04a\x01pV[a\n\xEEa\n\xDDa\n\x9EV[a\n\xE5a\x01bV[\x91\x82\x91\x82a\x08AV[\x03\x90\xF3[a\x01hV[4a\x0B%Wa\x0B\x0Fa\x0B\n6`\x04a\t\xF4V[a\x184V[a\x0B\x17a\x01bV[\x80a\x0B!\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x0BFa\x0BK\x91a\x0B2V[a\x0B7V[\x90V[a\x0BX\x90Ta\x0B:V[\x90V[a\x0Bca\x0B.V[Pa\x0Bv_a\x0Bpa\x18?V[\x01a\x0BNV[\x90V[\x91\x90a\x0B\x96a\x0B\x9032\x90\x86\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x0B\xA5Wa\x0B\xA3\x92a\x0C\x02V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0B\xBD`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[a\x0B\xCA\x90a\x06\xABV[\x90V[`@\x90a\x0B\xF9a\x0B\xEEa\x0C\0\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x04lV[\x96` \x83\x01\x90a\x05%V[\x01\x90a\x05%V[V[\x90a\x0C\x0E\x903\x92a\x10\xB6V[\x91B\x92a\x0CPa\x0C>\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\xC1V[\x94a\x0CGa\x01bV[\x93\x84\x93\x84a\x0B\xCDV[\x03\x90\xA2V[\x90a\x0C`\x92\x91a\x0ByV[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0C\xCD`2`@\x92a\x0CjV[a\x0C\xD6\x81a\x0CsV[\x01\x90V[a\x0C\xEF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\xC0V[\x90V[\x15a\x0C\xF9WV[a\r\x01a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\x17`\x04\x82\x01a\x0C\xDAV[\x03\x90\xFD[\x90V[a\r2a\r-a\r7\x92a\r\x1BV[a\x04\xEEV[a\x02(V[\x90V[`\x01a\rF\x91\x01a\x02(V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\r\xABW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r\xA6W` \x01\x91`\x01\x82\x026\x03\x83\x13a\r\xA1WV[a\reV[a\raV[a\r]V[\x90\x82\x10\x15a\r\xCBW` a\r\xC7\x92\x02\x81\x01\x90a\riV[\x90\x91V[a\rIV[\x91\x90\x81\x10\x15a\r\xE0W` \x02\x01\x90V[a\rIV[5a\r\xEF\x81a\x02+V[\x90V[\x90\x92a\r\xFF\x82\x85\x90a\x0CbV[\x93a\x0E&\x85a\x0E a\x0E\x1Aa\x0E\x15\x88\x87\x90a\x0CfV[a\x02(V[\x91a\x02(V[\x14a\x0C\xF2V[a\x0E/_a\r\x1EV[[\x80a\x0ECa\x0E=\x88a\x02(V[\x91a\x02(V[\x10\x15a\x0E\xEAWa\x0Eq\x90a\x0Eg32\x90a\x0E_\x88\x87\x86\x91a\r\xB0V[\x92\x90\x91a\x14qV[a\x0EvW[a\r:V[a\x0E0V[3a\x0E\x8Ca\x0E\x86\x87\x86\x85\x91a\r\xB0V[\x90a\x10\xB6V[\x90a\x0E\xA1a\x0E\x9C\x89\x88\x86\x91a\r\xD0V[a\r\xE5V[B\x92a\x0E\xE2a\x0E\xD0\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\xC1V[\x94a\x0E\xD9a\x01bV[\x93\x84\x93\x84a\x0B\xCDV[\x03\x90\xA2a\x0ElV[PPPPPPV[\x91\x90a\x0F\x0Fa\x0F\t32\x90\x86\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x0F\x1EWa\x0F\x1C\x92a\x0F\x9DV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0F6`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0F_\x81a\x0FX\x81a\x0Fd\x95a\x04NV[\x80\x95a\x0F:V[a\x04bV[\x01\x90V[a\x0F\x94a\x0F\x89`@\x93a\x0F\x9B\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0FEV[\x96` \x83\x01\x90a\x05%V[\x01\x90a\x05%V[V[\x90\x913\x91\x92\x90\x92a\x0F\xE4Ba\x0F\xD2\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0B\xC1V[\x95a\x0F\xDBa\x01bV[\x94\x85\x94\x85a\x0FhV[\x03\x90\xA2V[\x90a\x0F\xF4\x92\x91a\x0E\xF2V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10\x1Ea\x10\x19a\x10#\x92a\r\x1BV[a\x10\x04V[a\x0F\xFBV[\x90V[\x90V[a\x105a\x10:\x91a\x0F\xFBV[a\x10&V[\x90RV[\x90P\x90V[\x90\x91\x82a\x10S\x81a\x10Z\x93a\x10>V[\x80\x93a\x0F:V[\x01\x90V[\x80a\x10o`\x01\x92a\x10v\x96\x94a\x10)V[\x01\x91a\x10CV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x10\x97\x90a\x04bV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\xB1W`@RV[a\x10yV[a\x10\xF4\x90a\x10\xC2a\x0F\xF6V[Pa\x10\xE5a\x10\xCF_a\x10\nV[\x91\x93a\x10\xD9a\x01bV[\x94\x85\x93` \x85\x01a\x10^V[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x8DV[\x90V[\x90a\x11\x13a\x11\r32\x90\x85\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x11\"Wa\x11 \x91a\x11\xBEV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x11:`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[_\x80\xFD[\x90a\x11Ua\x11Na\x01bV[\x92\x83a\x10\x8DV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x11uWa\x11q` \x91a\x04bV[\x01\x90V[a\x10yV[\x90\x92\x91\x92a\x11\x8Fa\x11\x8A\x82a\x11WV[a\x11BV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x11\xABWa\x11\xA9\x92a\x0F:V[V[a\x11>V[a\x11\xBB\x916\x91a\x11zV[\x90V[a\x11\xD0\x91a\x11\xCB\x91a\x11\xB0V[a\x1A\x0CV[V[\x90a\x11\xDC\x91a\x10\xF7V[V[\x90a\x11\xF0\x91a\x11\xEBa\x1B\xD4V[a\x12\xF7V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x12\na\x12\x0F\x91a\x11\xF2V[a\x11\xF8V[\x90V[a\x12\x1C\x90Ta\x11\xFEV[\x90V[a\x123a\x12.a\x128\x92a\r\x1BV[a\x04\xEEV[a\x05\xB0V[\x90V[a\x12D\x90a\x12\x1FV[\x90V[`\xA0\x1B\x90V[\x90a\x12\\`\xFF`\xA0\x1B\x91a\x12GV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12o\x90a\x08/V[\x90V[\x90V[\x90a\x12\x8Aa\x12\x85a\x12\x91\x92a\x12fV[a\x12rV[\x82Ta\x12MV[\x90UV[a\x12\x9E\x90a\x06\x8FV[\x90V[a\x12\xAA\x90a\x12\x95V[\x90V[\x90a\x12\xBE`\x01\x80`\xA0\x1B\x03\x91a\x07\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xD1\x90a\x12\x95V[\x90V[\x90V[\x90a\x12\xECa\x12\xE7a\x12\xF3\x92a\x12\xC8V[a\x12\xD4V[\x82Ta\x12\xADV[\x90UV[a\x13\x01`\x01a\x12\x12V[a\x13iW\x81a\x13 a\x13\x1Aa\x13\x15_a\x12;V[a\x05\xBBV[\x91a\x05\xBBV[\x14a\x13MWa\x13Fa\x13?a\x13K\x93a\x13:`\x01\x80a\x12uV[a\x12\xA1V[`\x01a\x12\xD7V[a\x184V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x13e`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\x80`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[\x90a\x13\x8E\x91a\x11\xDEV[V[a\x13\x98a\x1B\xD4V[a\x13\xA0a\x13\xA2V[V[a\x13\xB3a\x13\xAE_a\x12;V[a\x1CEV[V[a\x13\xBDa\x13\x90V[V[_\x90V[a\x13\xCFa\x13\xD4\x91a\x0B2V[a\x06OV[\x90V[a\x13\xE1\x90Ta\x13\xC3V[\x90V[`\xE0\x1B\x90V[a\x13\xF3\x81a\x08/V[\x03a\x13\xFAWV[_\x80\xFD[\x90PQ\x90a\x14\x0B\x82a\x13\xEAV[V[\x90` \x82\x82\x03\x12a\x14&Wa\x14#\x91_\x01a\x13\xFEV[\x90V[a\x01lV[a\x14Qa\x14^\x95\x93\x94\x92\x94a\x14G``\x84\x01\x96_\x85\x01\x90a\t3V[` \x83\x01\x90a\t3V[`@\x81\x85\x03\x91\x01Ra\x0FEV[\x90V[a\x14ia\x01bV[=_\x82>=\x90\xFD[\x92a\x14\xB4` \x93\x94a\x14\x81a\x13\xBFV[Pa\x14\xBFa\x14\x97a\x14\x92`\x01a\x13\xD7V[a\x06\xB7V[\x93cz9y\xDC\x92\x95\x97a\x14\xA8a\x01bV[\x98\x89\x97\x88\x96\x87\x96a\x13\xE4V[\x86R`\x04\x86\x01a\x14+V[\x03\x91Z\xFA\x90\x81\x15a\x15\x03W_\x91a\x14\xD5W[P\x90V[a\x14\xF6\x91P` =\x81\x11a\x14\xFCW[a\x14\xEE\x81\x83a\x10\x8DV[\x81\x01\x90a\x14\rV[_a\x14\xD1V[P=a\x14\xE4V[a\x14aV[\x90a\x15$a\x15\x1E32\x90\x85\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x153Wa\x151\x91a\x15OV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x15K`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[a\x15a\x91a\x15\\\x91a\x10\xB6V[a\x1A\x0CV[V[\x90a\x15m\x91a\x15\x08V[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\x96a\x15\x9C\x91\x93\x92\x93a\x02(V[\x92a\x02(V[\x82\x03\x91\x82\x11a\x15\xA7WV[a\x15sV[a\x15\xBBa\x15\xC1\x91\x93\x92\x93a\x02(V[\x92a\x02(V[\x91a\x15\xCD\x83\x82\x02a\x02(V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\xDCWV[a\x15sV[\x91a\x15\xEAa\x15oV[P\x80a\x15\xFEa\x15\xF8\x84a\x02(V[\x91a\x02(V[\x11\x15a\x16RWa\x16\x1F\x91a\x16\x11\x91a\x15\x87V[a\x16\x19a\x05\rV[\x90a\x15\xACV[\x80a\x162a\x16,\x84a\x02(V[\x91a\x02(V[\x10\x15a\x16DWa\x16A\x91a\x15\x87V[\x90V[PPa\x16O_a\r\x1EV[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16ra\x16w\x91a\x0B2V[a\x16[V[\x90V[a\x16\x84\x90Ta\x16fV[\x90V[a\x16\x8Fa\x16WV[Pa\x16\x99_a\x16zV[\x90V[a\x16\xA7\x81\x83\x90a\x0CbV[\x91a\x16\xB1_a\r\x1EV[[\x80a\x16\xC5a\x16\xBF\x86a\x02(V[\x91a\x02(V[\x10\x15a\x17\x1AWa\x16\xF3\x90a\x16\xE932\x90a\x16\xE1\x87\x87\x86\x91a\r\xB0V[\x92\x90\x91a\x14qV[a\x16\xF8W[a\r:V[a\x16\xB2V[a\x17\x15a\x17\x10a\x17\n\x86\x86\x85\x91a\r\xB0V[\x90a\x10\xB6V[a\x1A\x0CV[a\x16\xEEV[PPPPV[a\x171\x90a\x17,a\x1B\xD4V[a\x173V[V[\x80a\x17Na\x17Ha\x17C_a\x12;V[a\x05\xBBV[\x91a\x05\xBBV[\x14a\x17\xA8Wa\x17fa\x17_\x82a\x12\xA1V[`\x01a\x12\xD7V[a\x17\x90\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0B\xC1V[\x90a\x17\x99a\x01bV[\x80a\x17\xA3\x81a\x02\x93V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x17\xC0`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[a\x17\xCD\x90a\x17 V[V[a\x17\xE0\x90a\x17\xDBa\x1B\xD4V[a\x17\xE2V[V[\x80a\x17\xFDa\x17\xF7a\x17\xF2_a\x12;V[a\x05\xBBV[\x91a\x05\xBBV[\x14a\x18\rWa\x18\x0B\x90a\x1CEV[V[a\x180a\x18\x19_a\x12;V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t@V[\x03\x90\xFD[a\x18=\x90a\x17\xCFV[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x18\x88a\x18\x83a\x18\x8D\x92a\x02(V[a\x04\xEEV[a\x18gV[\x90V[a\x18\x99\x90a\x06\x8FV[\x90V[a\x18\xA5\x90a\x18\x90V[\x90V[a\x18\xB2`da\x18\x9CV[\x90V[a\x18\xBE\x90a\x06\xABV[\x90V[\x90PQ\x90a\x18\xCE\x82a\x02+V[V[\x90` \x82\x82\x03\x12a\x18\xE9Wa\x18\xE6\x91_\x01a\x18\xC1V[\x90V[a\x01lV[` \x01\x90V[``\x1B\x90V[a\x19\x03\x90a\x18\xF4V[\x90V[a\x19\x0F\x90a\x18\xFAV[\x90V[a\x19\x1Ea\x19#\x91a\x05\xBBV[a\x19\x06V[\x90RV[`\xC0\x1B\x90V[a\x196\x90a\x19'V[\x90V[a\x19Ea\x19J\x91a\x18gV[a\x19-V[\x90RV[\x90V[a\x19]a\x19b\x91a\x01\x7FV[a\x19NV[\x90RV[\x92a\x19\x94`\x08a\x19\x9C\x94a\x19\x8C`\x14\x88a\x19\x84` \x9B\x9A\x86\x99a\x19\x12V[\x01\x80\x92a\x199V[\x01\x80\x92a\x199V[\x01\x80\x92a\x19QV[\x01\x90V[` \x81a\x19\xB2a\x19\xBA\x93\x83\x96\x95a\x19QV[\x01\x80\x92a\x19QV[\x01\x90V[\x90a\x19\xCA_\x19\x91a\x07\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xDD\x90a\x01\x7FV[\x90V[a\x19\xE9\x90a\x0B2V[\x90V[\x90a\x1A\x01a\x19\xFCa\x1A\x08\x92a\x19\xD4V[a\x19\xE0V[\x82Ta\x19\xBEV[\x90UV[a\x1A\x14a\x18cV[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x1B\xC3Wa\x1Ag` a\x1AQa\x1ALa\x18\xA8V[a\x18\xB5V[c\xA3\xB1\xB3\x1D\x90a\x1A_a\x01bV[\x93\x84\x92a\x13\xE4V[\x82R\x81\x80a\x1Aw`\x04\x82\x01a\x02\x93V[\x03\x91Z\xFA\x90\x81\x15a\x1B\xBEWa\x1BK\x91a\x1A\x97\x91_\x91a\x1B\x90W[Pa\x18tV[[_a\x1A\xA1a\x18?V[\x91a\x1A\xEA3a\x1A\xDBa\x1A\xB2Ba\x18tV[\x88a\x1A\xC5a\x1A\xBF\x82a\x04JV[\x91a\x18\xEEV[ \x90a\x1A\xCFa\x01bV[\x95\x86\x94` \x86\x01a\x19fV[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x8DV[a\x1A\xFCa\x1A\xF6\x82a\x04JV[\x91a\x18\xEEV[ a\x1B1a\x1B\x0B\x83\x85\x01a\x0BNV[a\x1B\"a\x1B\x16a\x01bV[\x93\x84\x92` \x84\x01a\x19\xA0V[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x8DV[a\x1BCa\x1B=\x82a\x04JV[\x91a\x18\xEEV[ \x91\x01a\x19\xECV[3a\x1B\x8Ba\x1By\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0B\xC1V[\x92a\x1B\x82a\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xA2V[a\x1B\xB1\x91P` =\x81\x11a\x1B\xB7W[a\x1B\xA9\x81\x83a\x10\x8DV[\x81\x01\x90a\x18\xD0V[_a\x1A\x91V[P=a\x1B\x9FV[a\x14aV[a\x1BKa\x1B\xCFCa\x18tV[a\x1A\x98V[a\x1B\xDCa\x16\x87V[a\x1B\xF5a\x1B\xEFa\x1B\xEAa\x1C\xA4V[a\x05\xBBV[\x91a\x05\xBBV[\x03a\x1B\xFCWV[a\x1C\x1Ea\x1C\x07a\x1C\xA4V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t@V[\x03\x90\xFD[\x90V[\x90a\x1C:a\x1C5a\x1CA\x92a\x0B\xC1V[a\x1C\"V[\x82Ta\x12\xADV[\x90UV[a\x1CN_a\x16zV[a\x1CX\x82_a\x1C%V[\x90a\x1C\x8Ca\x1C\x86\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\xC1V[\x91a\x0B\xC1V[\x91a\x1C\x95a\x01bV[\x80a\x1C\x9F\x81a\x02\x93V[\x03\x90\xA3V[a\x1C\xACa\x16WV[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610b2a565b61001d5f3561015c565b80630338115414610157578063050ec1381461015257806311992f8c1461014d5780631c0b636714610148578063366cbab7146101435780633d44ae8b1461013e57806346e2cc0914610139578063485cc955146101345780635b3cd6e21461012f57806363d964371461012a578063715018a6146101255780637a3979dc14610120578063804e51231461011b57806383d3c115146101165780638da5cb5b14610111578063cdafb9781461010c578063d4f0eb4d14610107578063d878134214610102578063ea161ce6146100fd5763f2fde38b0361000e57610af7565b610ac2565b610a69565b610a12565b6109c0565b610955565b6108fd565b61088f565b610856565b6107aa565b610775565b6106e5565b610617565b61057c565b610547565b6104b5565b6103e0565b6103a9565b610298565b6101a4565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261017a57565b61016c565b90565b61018b9061017f565b9052565b91906101a2905f60208501940190610182565b565b346101d4576101b4366004610170565b6101d06101bf610b5b565b6101c7610162565b9182918261018f565b0390f35b610168565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102235781359167ffffffffffffffff831161021e57602001926001830284011161021957565b6101e5565b6101e1565b6101dd565b90565b61023481610228565b0361023b57565b5f80fd5b9050359061024c8261022b565b565b9160408383031261028e575f83013567ffffffffffffffff81116102895761027b836102869286016101e9565b93909460200161023f565b90565b6101d9565b61016c565b5f0190565b346102c7576102b16102ab36600461024e565b91610c55565b6102b9610162565b806102c381610293565b0390f35b610168565b909182601f830112156103065781359167ffffffffffffffff83116103015760200192602083028401116102fc57565b6101e5565b6101e1565b6101dd565b909182601f830112156103455781359167ffffffffffffffff831161034057602001926020830284011161033b57565b6101e5565b6101e1565b6101dd565b90916040828403126103a4575f82013567ffffffffffffffff811161039f57836103759184016102cc565b929093602082013567ffffffffffffffff811161039a57610396920161030b565b9091565b6101d9565b6101d9565b61016c565b346103db576103c56103bc36600461034a565b92919091610df2565b6103cd610162565b806103d781610293565b0390f35b610168565b3461040f576103f96103f336600461024e565b91610fe9565b610401610162565b8061040b81610293565b0390f35b610168565b90602082820312610445575f82013567ffffffffffffffff81116104405761043c92016101e9565b9091565b6101d9565b61016c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61048b610494602093610499936104828161044a565b9384809361044e565b95869101610457565b610462565b0190565b6104b29160208201915f81840391015261046c565b90565b346104e6576104e26104d16104cb366004610414565b906110b6565b6104d9610162565b9182918261049d565b0390f35b610168565b90565b90565b61050561050061050a926104eb565b6104ee565b610228565b90565b610517600a6104f1565b90565b61052261050d565b90565b61052e90610228565b9052565b9190610545905f60208501940190610525565b565b3461057757610557366004610170565b61057361056261051a565b61056a610162565b91829182610532565b0390f35b610168565b346105ab5761059561058f366004610414565b906111d2565b61059d610162565b806105a781610293565b0390f35b610168565b60018060a01b031690565b6105c4906105b0565b90565b6105d0816105bb565b036105d757565b5f80fd5b905035906105e8826105c7565b565b9190604083820312610612578061060661060f925f86016105db565b936020016105db565b90565b61016c565b346106465761063061062a3660046105ea565b90611384565b610638610162565b8061064281610293565b0390f35b610168565b1c90565b60018060a01b031690565b61066a90600861066f930261064b565b61064f565b90565b9061067d915461065a565b90565b61068c60015f90610672565b90565b6106a361069e6106a8926105b0565b6104ee565b6105b0565b90565b6106b49061068f565b90565b6106c0906106ab565b90565b6106cc906106b7565b9052565b91906106e3905f602085019401906106c3565b565b34610715576106f5366004610170565b610711610700610680565b610708610162565b918291826106d0565b0390f35b610168565b90565b5f1b90565b61073661073161073b9261071a565b61071d565b61017f565b90565b6107677f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b90610722565b90565b61077261073e565b90565b346107a557610785366004610170565b6107a161079061076a565b610798610162565b9182918261018f565b0390f35b610168565b346107d8576107ba366004610170565b6107c26113b5565b6107ca610162565b806107d481610293565b0390f35b610168565b9160608383031261082a576107f4825f85016105db565b9261080283602083016105db565b92604082013567ffffffffffffffff81116108255761082192016101e9565b9091565b6101d9565b61016c565b151590565b61083d9061082f565b9052565b9190610854905f60208501940190610834565b565b3461088a5761088661087561086c3660046107dd565b92919091611471565b61087d610162565b91829182610841565b0390f35b610168565b346108be576108a86108a2366004610414565b90611563565b6108b0610162565b806108ba81610293565b0390f35b610168565b90916060828403126108f8576108f56108de845f850161023f565b936108ec816020860161023f565b9360400161023f565b90565b61016c565b3461092e5761092a6109196109133660046108c3565b916115e1565b610921610162565b91829182610532565b0390f35b610168565b61093c906105bb565b9052565b9190610953905f60208501940190610933565b565b3461098557610965366004610170565b610981610970611687565b610978610162565b91829182610940565b0390f35b610168565b906020828203126109bb575f82013567ffffffffffffffff81116109b6576109b292016102cc565b9091565b6101d9565b61016c565b346109ef576109d96109d336600461098a565b9061169c565b6109e1610162565b806109eb81610293565b0390f35b610168565b90602082820312610a0d57610a0a915f016105db565b90565b61016c565b34610a4057610a2a610a253660046109f4565b6117c4565b610a32610162565b80610a3c81610293565b0390f35b610168565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610a9957610a79366004610170565b610a95610a84610a45565b610a8c610162565b91829182610532565b0390f35b610168565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610af257610ad2366004610170565b610aee610add610a9e565b610ae5610162565b91829182610841565b0390f35b610168565b34610b2557610b0f610b0a3660046109f4565b611834565b610b17610162565b80610b2181610293565b0390f35b610168565b5f80fd5b5f90565b5f1c90565b90565b610b46610b4b91610b32565b610b37565b90565b610b589054610b3a565b90565b610b63610b2e565b50610b765f610b7061183f565b01610b4e565b90565b9190610b96610b9033329086859192909192611471565b1561082f565b610ba557610ba392610c02565b565b5f631b8e828b60e31b815280610bbd60048201610293565b0390fd5b610bca906106ab565b90565b604090610bf9610bee610c009597969460608401908482035f86015261046c565b966020830190610525565b0190610525565b565b90610c0e9033926110b6565b914292610c50610c3e7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610bc1565b94610c47610162565b93849384610bcd565b0390a2565b90610c609291610b79565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610ccd6032604092610c6a565b610cd681610c73565b0190565b610cef9060208101905f818303910152610cc0565b90565b15610cf957565b610d01610162565b62461bcd60e51b815280610d1760048201610cda565b0390fd5b90565b610d32610d2d610d3792610d1b565b6104ee565b610228565b90565b6001610d469101610228565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610dab570180359067ffffffffffffffff8211610da657602001916001820236038313610da157565b610d65565b610d61565b610d5d565b90821015610dcb576020610dc79202810190610d69565b9091565b610d49565b9190811015610de0576020020190565b610d49565b35610def8161022b565b90565b9092610dff828590610c62565b93610e2685610e20610e1a610e15888790610c66565b610228565b91610228565b14610cf2565b610e2f5f610d1e565b5b80610e43610e3d88610228565b91610228565b1015610eea57610e7190610e67333290610e5f88878691610db0565b929091611471565b610e76575b610d3a565b610e30565b33610e8c610e8687868591610db0565b906110b6565b90610ea1610e9c89888691610dd0565b610de5565b4292610ee2610ed07f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610bc1565b94610ed9610162565b93849384610bcd565b0390a2610e6c565b505050505050565b9190610f0f610f0933329086859192909192611471565b1561082f565b610f1e57610f1c92610f9d565b565b5f631b8e828b60e31b815280610f3660048201610293565b0390fd5b90825f939282370152565b9190610f5f81610f5881610f649561044e565b8095610f3a565b610462565b0190565b610f94610f89604093610f9b9698979560608501918583035f870152610f45565b966020830190610525565b0190610525565b565b90913391929092610fe442610fd27f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610bc1565b95610fdb610162565b94859485610f68565b0390a2565b90610ff49291610ef2565b565b606090565b60ff60f81b1690565b60f81b90565b61101e61101961102392610d1b565b611004565b610ffb565b90565b90565b61103561103a91610ffb565b611026565b9052565b905090565b9091826110538161105a9361103e565b8093610f3a565b0190565b8061106f6001926110769694611029565b0191611043565b90565b634e487b7160e01b5f52604160045260245ffd5b9061109790610462565b810190811067ffffffffffffffff8211176110b157604052565b611079565b6110f4906110c2610ff6565b506110e56110cf5f61100a565b91936110d9610162565b9485936020850161105e565b6020820181038252038261108d565b90565b9061111361110d33329085859192909192611471565b1561082f565b61112257611120916111be565b565b5f631b8e828b60e31b81528061113a60048201610293565b0390fd5b5f80fd5b9061115561114e610162565b928361108d565b565b67ffffffffffffffff811161117557611171602091610462565b0190565b611079565b9092919261118f61118a82611157565b611142565b938185526020850190828401116111ab576111a992610f3a565b565b61113e565b6111bb91369161117a565b90565b6111d0916111cb916111b0565b611a0c565b565b906111dc916110f7565b565b906111f0916111eb611bd4565b6112f7565b565b60a01c90565b60ff1690565b61120a61120f916111f2565b6111f8565b90565b61121c90546111fe565b90565b61123361122e61123892610d1b565b6104ee565b6105b0565b90565b6112449061121f565b90565b60a01b90565b9061125c60ff60a01b91611247565b9181191691161790565b61126f9061082f565b90565b90565b9061128a61128561129192611266565b611272565b825461124d565b9055565b61129e9061068f565b90565b6112aa90611295565b90565b906112be60018060a01b039161071d565b9181191691161790565b6112d190611295565b90565b90565b906112ec6112e76112f3926112c8565b6112d4565b82546112ad565b9055565b6113016001611212565b611369578161132061131a6113155f61123b565b6105bb565b916105bb565b1461134d5761134661133f61134b9361133a600180611275565b6112a1565b60016112d7565b611834565b565b5f632e7f3c7f60e11b81528061136560048201610293565b0390fd5b5f62dc149f60e41b81528061138060048201610293565b0390fd5b9061138e916111de565b565b611398611bd4565b6113a06113a2565b565b6113b36113ae5f61123b565b611c45565b565b6113bd611390565b565b5f90565b6113cf6113d491610b32565b61064f565b90565b6113e190546113c3565b90565b60e01b90565b6113f38161082f565b036113fa57565b5f80fd5b9050519061140b826113ea565b565b9060208282031261142657611423915f016113fe565b90565b61016c565b61145161145e959394929461144760608401965f850190610933565b6020830190610933565b6040818503910152610f45565b90565b611469610162565b3d5f823e3d90fd5b926114b4602093946114816113bf565b506114bf61149761149260016113d7565b6106b7565b93637a3979dc9295976114a8610162565b988997889687966113e4565b86526004860161142b565b03915afa908115611503575f916114d5575b5090565b6114f6915060203d81116114fc575b6114ee818361108d565b81019061140d565b5f6114d1565b503d6114e4565b611461565b9061152461151e33329085859192909192611471565b1561082f565b611533576115319161154f565b565b5f631b8e828b60e31b81528061154b60048201610293565b0390fd5b6115619161155c916110b6565b611a0c565b565b9061156d91611508565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61159661159c91939293610228565b92610228565b82039182116115a757565b611573565b6115bb6115c191939293610228565b92610228565b916115cd838202610228565b9281840414901517156115dc57565b611573565b916115ea61156f565b50806115fe6115f884610228565b91610228565b11156116525761161f9161161191611587565b61161961050d565b906115ac565b8061163261162c84610228565b91610228565b10156116445761164191611587565b90565b505061164f5f610d1e565b90565b505090565b5f90565b60018060a01b031690565b61167261167791610b32565b61165b565b90565b6116849054611666565b90565b61168f611657565b506116995f61167a565b90565b6116a7818390610c62565b916116b15f610d1e565b5b806116c56116bf86610228565b91610228565b101561171a576116f3906116e93332906116e187878691610db0565b929091611471565b6116f8575b610d3a565b6116b2565b61171561171061170a86868591610db0565b906110b6565b611a0c565b6116ee565b50505050565b6117319061172c611bd4565b611733565b565b8061174e6117486117435f61123b565b6105bb565b916105bb565b146117a85761176661175f826112a1565b60016112d7565b6117907f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610bc1565b90611799610162565b806117a381610293565b0390a2565b5f632e7f3c7f60e11b8152806117c060048201610293565b0390fd5b6117cd90611720565b565b6117e0906117db611bd4565b6117e2565b565b806117fd6117f76117f25f61123b565b6105bb565b916105bb565b1461180d5761180b90611c45565b565b6118306118195f61123b565b5f918291631e4fbdf760e01b835260048301610940565b0390fd5b61183d906117cf565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61188861188361188d92610228565b6104ee565b611867565b90565b6118999061068f565b90565b6118a590611890565b90565b6118b2606461189c565b90565b6118be906106ab565b90565b905051906118ce8261022b565b565b906020828203126118e9576118e6915f016118c1565b90565b61016c565b60200190565b60601b90565b611903906118f4565b90565b61190f906118fa565b90565b61191e611923916105bb565b611906565b9052565b60c01b90565b61193690611927565b90565b61194561194a91611867565b61192d565b9052565b90565b61195d6119629161017f565b61194e565b9052565b92611994600861199c9461198c60148861198460209b9a8699611912565b018092611939565b018092611939565b018092611951565b0190565b6020816119b26119ba93839695611951565b018092611951565b0190565b906119ca5f199161071d565b9181191691161790565b6119dd9061017f565b90565b6119e990610b32565b90565b90611a016119fc611a08926119d4565b6119e0565b82546119be565b9055565b611a14611863565b507f00000000000000000000000000000000000000000000000000000000000000005f14611bc357611a676020611a51611a4c6118a8565b6118b5565b63a3b1b31d90611a5f610162565b9384926113e4565b82528180611a7760048201610293565b03915afa908115611bbe57611b4b91611a97915f91611b90575b50611874565b5b5f611aa161183f565b91611aea33611adb611ab242611874565b88611ac5611abf8261044a565b916118ee565b2090611acf610162565b95869460208601611966565b6020820181038252038261108d565b611afc611af68261044a565b916118ee565b20611b31611b0b838501610b4e565b611b22611b16610162565b938492602084016119a0565b6020820181038252038261108d565b611b43611b3d8261044a565b916118ee565b2091016119ec565b33611b8b611b797f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610bc1565b92611b82610162565b9182918261049d565b0390a2565b611bb1915060203d8111611bb7575b611ba9818361108d565b8101906118d0565b5f611a91565b503d611b9f565b611461565b611b4b611bcf43611874565b611a98565b611bdc611687565b611bf5611bef611bea611ca4565b6105bb565b916105bb565b03611bfc57565b611c1e611c07611ca4565b5f91829163118cdaa760e01b835260048301610940565b0390fd5b90565b90611c3a611c35611c4192610bc1565b611c22565b82546112ad565b9055565b611c4e5f61167a565b611c58825f611c25565b90611c8c611c867f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610bc1565b91610bc1565b91611c95610162565b80611c9f81610293565b0390a3565b611cac611657565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B*V[a\0\x1D_5a\x01\\V[\x80c\x038\x11T\x14a\x01WW\x80c\x05\x0E\xC18\x14a\x01RW\x80c\x11\x99/\x8C\x14a\x01MW\x80c\x1C\x0Bcg\x14a\x01HW\x80c6l\xBA\xB7\x14a\x01CW\x80c=D\xAE\x8B\x14a\x01>W\x80cF\xE2\xCC\t\x14a\x019W\x80cH\\\xC9U\x14a\x014W\x80c[<\xD6\xE2\x14a\x01/W\x80cc\xD9d7\x14a\x01*W\x80cqP\x18\xA6\x14a\x01%W\x80cz9y\xDC\x14a\x01 W\x80c\x80NQ#\x14a\x01\x1BW\x80c\x83\xD3\xC1\x15\x14a\x01\x16W\x80c\x8D\xA5\xCB[\x14a\x01\x11W\x80c\xCD\xAF\xB9x\x14a\x01\x0CW\x80c\xD4\xF0\xEBM\x14a\x01\x07W\x80c\xD8x\x13B\x14a\x01\x02W\x80c\xEA\x16\x1C\xE6\x14a\0\xFDWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\n\xF7V[a\n\xC2V[a\niV[a\n\x12V[a\t\xC0V[a\tUV[a\x08\xFDV[a\x08\x8FV[a\x08VV[a\x07\xAAV[a\x07uV[a\x06\xE5V[a\x06\x17V[a\x05|V[a\x05GV[a\x04\xB5V[a\x03\xE0V[a\x03\xA9V[a\x02\x98V[a\x01\xA4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01zWV[a\x01lV[\x90V[a\x01\x8B\x90a\x01\x7FV[\x90RV[\x91\x90a\x01\xA2\x90_` \x85\x01\x94\x01\x90a\x01\x82V[V[4a\x01\xD4Wa\x01\xB46`\x04a\x01pV[a\x01\xD0a\x01\xBFa\x0B[V[a\x01\xC7a\x01bV[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01hV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02#W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x1EW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\x19WV[a\x01\xE5V[a\x01\xE1V[a\x01\xDDV[\x90V[a\x024\x81a\x02(V[\x03a\x02;WV[_\x80\xFD[\x90P5\x90a\x02L\x82a\x02+V[V[\x91`@\x83\x83\x03\x12a\x02\x8EW_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x89Wa\x02{\x83a\x02\x86\x92\x86\x01a\x01\xE9V[\x93\x90\x94` \x01a\x02?V[\x90V[a\x01\xD9V[a\x01lV[_\x01\x90V[4a\x02\xC7Wa\x02\xB1a\x02\xAB6`\x04a\x02NV[\x91a\x0CUV[a\x02\xB9a\x01bV[\x80a\x02\xC3\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x06W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x01W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xFCWV[a\x01\xE5V[a\x01\xE1V[a\x01\xDDV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03EW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03@W` \x01\x92` \x83\x02\x84\x01\x11a\x03;WV[a\x01\xE5V[a\x01\xE1V[a\x01\xDDV[\x90\x91`@\x82\x84\x03\x12a\x03\xA4W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x9FW\x83a\x03u\x91\x84\x01a\x02\xCCV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x9AWa\x03\x96\x92\x01a\x03\x0BV[\x90\x91V[a\x01\xD9V[a\x01\xD9V[a\x01lV[4a\x03\xDBWa\x03\xC5a\x03\xBC6`\x04a\x03JV[\x92\x91\x90\x91a\r\xF2V[a\x03\xCDa\x01bV[\x80a\x03\xD7\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[4a\x04\x0FWa\x03\xF9a\x03\xF36`\x04a\x02NV[\x91a\x0F\xE9V[a\x04\x01a\x01bV[\x80a\x04\x0B\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\x04EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04@Wa\x04<\x92\x01a\x01\xE9V[\x90\x91V[a\x01\xD9V[a\x01lV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x04\x8Ba\x04\x94` \x93a\x04\x99\x93a\x04\x82\x81a\x04JV[\x93\x84\x80\x93a\x04NV[\x95\x86\x91\x01a\x04WV[a\x04bV[\x01\x90V[a\x04\xB2\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04lV[\x90V[4a\x04\xE6Wa\x04\xE2a\x04\xD1a\x04\xCB6`\x04a\x04\x14V[\x90a\x10\xB6V[a\x04\xD9a\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xF3[a\x01hV[\x90V[\x90V[a\x05\x05a\x05\0a\x05\n\x92a\x04\xEBV[a\x04\xEEV[a\x02(V[\x90V[a\x05\x17`\na\x04\xF1V[\x90V[a\x05\"a\x05\rV[\x90V[a\x05.\x90a\x02(V[\x90RV[\x91\x90a\x05E\x90_` \x85\x01\x94\x01\x90a\x05%V[V[4a\x05wWa\x05W6`\x04a\x01pV[a\x05sa\x05ba\x05\x1AV[a\x05ja\x01bV[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\x01hV[4a\x05\xABWa\x05\x95a\x05\x8F6`\x04a\x04\x14V[\x90a\x11\xD2V[a\x05\x9Da\x01bV[\x80a\x05\xA7\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xC4\x90a\x05\xB0V[\x90V[a\x05\xD0\x81a\x05\xBBV[\x03a\x05\xD7WV[_\x80\xFD[\x90P5\x90a\x05\xE8\x82a\x05\xC7V[V[\x91\x90`@\x83\x82\x03\x12a\x06\x12W\x80a\x06\x06a\x06\x0F\x92_\x86\x01a\x05\xDBV[\x93` \x01a\x05\xDBV[\x90V[a\x01lV[4a\x06FWa\x060a\x06*6`\x04a\x05\xEAV[\x90a\x13\x84V[a\x068a\x01bV[\x80a\x06B\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06j\x90`\x08a\x06o\x93\x02a\x06KV[a\x06OV[\x90V[\x90a\x06}\x91Ta\x06ZV[\x90V[a\x06\x8C`\x01_\x90a\x06rV[\x90V[a\x06\xA3a\x06\x9Ea\x06\xA8\x92a\x05\xB0V[a\x04\xEEV[a\x05\xB0V[\x90V[a\x06\xB4\x90a\x06\x8FV[\x90V[a\x06\xC0\x90a\x06\xABV[\x90V[a\x06\xCC\x90a\x06\xB7V[\x90RV[\x91\x90a\x06\xE3\x90_` \x85\x01\x94\x01\x90a\x06\xC3V[V[4a\x07\x15Wa\x06\xF56`\x04a\x01pV[a\x07\x11a\x07\0a\x06\x80V[a\x07\x08a\x01bV[\x91\x82\x91\x82a\x06\xD0V[\x03\x90\xF3[a\x01hV[\x90V[_\x1B\x90V[a\x076a\x071a\x07;\x92a\x07\x1AV[a\x07\x1DV[a\x01\x7FV[\x90V[a\x07g\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x07\"V[\x90V[a\x07ra\x07>V[\x90V[4a\x07\xA5Wa\x07\x856`\x04a\x01pV[a\x07\xA1a\x07\x90a\x07jV[a\x07\x98a\x01bV[\x91\x82\x91\x82a\x01\x8FV[\x03\x90\xF3[a\x01hV[4a\x07\xD8Wa\x07\xBA6`\x04a\x01pV[a\x07\xC2a\x13\xB5V[a\x07\xCAa\x01bV[\x80a\x07\xD4\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x91``\x83\x83\x03\x12a\x08*Wa\x07\xF4\x82_\x85\x01a\x05\xDBV[\x92a\x08\x02\x83` \x83\x01a\x05\xDBV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08%Wa\x08!\x92\x01a\x01\xE9V[\x90\x91V[a\x01\xD9V[a\x01lV[\x15\x15\x90V[a\x08=\x90a\x08/V[\x90RV[\x91\x90a\x08T\x90_` \x85\x01\x94\x01\x90a\x084V[V[4a\x08\x8AWa\x08\x86a\x08ua\x08l6`\x04a\x07\xDDV[\x92\x91\x90\x91a\x14qV[a\x08}a\x01bV[\x91\x82\x91\x82a\x08AV[\x03\x90\xF3[a\x01hV[4a\x08\xBEWa\x08\xA8a\x08\xA26`\x04a\x04\x14V[\x90a\x15cV[a\x08\xB0a\x01bV[\x80a\x08\xBA\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90\x91``\x82\x84\x03\x12a\x08\xF8Wa\x08\xF5a\x08\xDE\x84_\x85\x01a\x02?V[\x93a\x08\xEC\x81` \x86\x01a\x02?V[\x93`@\x01a\x02?V[\x90V[a\x01lV[4a\t.Wa\t*a\t\x19a\t\x136`\x04a\x08\xC3V[\x91a\x15\xE1V[a\t!a\x01bV[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\x01hV[a\t<\x90a\x05\xBBV[\x90RV[\x91\x90a\tS\x90_` \x85\x01\x94\x01\x90a\t3V[V[4a\t\x85Wa\te6`\x04a\x01pV[a\t\x81a\tpa\x16\x87V[a\txa\x01bV[\x91\x82\x91\x82a\t@V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\t\xBBW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xB6Wa\t\xB2\x92\x01a\x02\xCCV[\x90\x91V[a\x01\xD9V[a\x01lV[4a\t\xEFWa\t\xD9a\t\xD36`\x04a\t\x8AV[\x90a\x16\x9CV[a\t\xE1a\x01bV[\x80a\t\xEB\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\n\rWa\n\n\x91_\x01a\x05\xDBV[\x90V[a\x01lV[4a\n@Wa\n*a\n%6`\x04a\t\xF4V[a\x17\xC4V[a\n2a\x01bV[\x80a\n<\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\x99Wa\ny6`\x04a\x01pV[a\n\x95a\n\x84a\nEV[a\n\x8Ca\x01bV[\x91\x82\x91\x82a\x052V[\x03\x90\xF3[a\x01hV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\xF2Wa\n\xD26`\x04a\x01pV[a\n\xEEa\n\xDDa\n\x9EV[a\n\xE5a\x01bV[\x91\x82\x91\x82a\x08AV[\x03\x90\xF3[a\x01hV[4a\x0B%Wa\x0B\x0Fa\x0B\n6`\x04a\t\xF4V[a\x184V[a\x0B\x17a\x01bV[\x80a\x0B!\x81a\x02\x93V[\x03\x90\xF3[a\x01hV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\x0BFa\x0BK\x91a\x0B2V[a\x0B7V[\x90V[a\x0BX\x90Ta\x0B:V[\x90V[a\x0Bca\x0B.V[Pa\x0Bv_a\x0Bpa\x18?V[\x01a\x0BNV[\x90V[\x91\x90a\x0B\x96a\x0B\x9032\x90\x86\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x0B\xA5Wa\x0B\xA3\x92a\x0C\x02V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0B\xBD`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[a\x0B\xCA\x90a\x06\xABV[\x90V[`@\x90a\x0B\xF9a\x0B\xEEa\x0C\0\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x04lV[\x96` \x83\x01\x90a\x05%V[\x01\x90a\x05%V[V[\x90a\x0C\x0E\x903\x92a\x10\xB6V[\x91B\x92a\x0CPa\x0C>\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\xC1V[\x94a\x0CGa\x01bV[\x93\x84\x93\x84a\x0B\xCDV[\x03\x90\xA2V[\x90a\x0C`\x92\x91a\x0ByV[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0C\xCD`2`@\x92a\x0CjV[a\x0C\xD6\x81a\x0CsV[\x01\x90V[a\x0C\xEF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\xC0V[\x90V[\x15a\x0C\xF9WV[a\r\x01a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\x17`\x04\x82\x01a\x0C\xDAV[\x03\x90\xFD[\x90V[a\r2a\r-a\r7\x92a\r\x1BV[a\x04\xEEV[a\x02(V[\x90V[`\x01a\rF\x91\x01a\x02(V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\r\xABW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r\xA6W` \x01\x91`\x01\x82\x026\x03\x83\x13a\r\xA1WV[a\reV[a\raV[a\r]V[\x90\x82\x10\x15a\r\xCBW` a\r\xC7\x92\x02\x81\x01\x90a\riV[\x90\x91V[a\rIV[\x91\x90\x81\x10\x15a\r\xE0W` \x02\x01\x90V[a\rIV[5a\r\xEF\x81a\x02+V[\x90V[\x90\x92a\r\xFF\x82\x85\x90a\x0CbV[\x93a\x0E&\x85a\x0E a\x0E\x1Aa\x0E\x15\x88\x87\x90a\x0CfV[a\x02(V[\x91a\x02(V[\x14a\x0C\xF2V[a\x0E/_a\r\x1EV[[\x80a\x0ECa\x0E=\x88a\x02(V[\x91a\x02(V[\x10\x15a\x0E\xEAWa\x0Eq\x90a\x0Eg32\x90a\x0E_\x88\x87\x86\x91a\r\xB0V[\x92\x90\x91a\x14qV[a\x0EvW[a\r:V[a\x0E0V[3a\x0E\x8Ca\x0E\x86\x87\x86\x85\x91a\r\xB0V[\x90a\x10\xB6V[\x90a\x0E\xA1a\x0E\x9C\x89\x88\x86\x91a\r\xD0V[a\r\xE5V[B\x92a\x0E\xE2a\x0E\xD0\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\xC1V[\x94a\x0E\xD9a\x01bV[\x93\x84\x93\x84a\x0B\xCDV[\x03\x90\xA2a\x0ElV[PPPPPPV[\x91\x90a\x0F\x0Fa\x0F\t32\x90\x86\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x0F\x1EWa\x0F\x1C\x92a\x0F\x9DV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0F6`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0F_\x81a\x0FX\x81a\x0Fd\x95a\x04NV[\x80\x95a\x0F:V[a\x04bV[\x01\x90V[a\x0F\x94a\x0F\x89`@\x93a\x0F\x9B\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0FEV[\x96` \x83\x01\x90a\x05%V[\x01\x90a\x05%V[V[\x90\x913\x91\x92\x90\x92a\x0F\xE4Ba\x0F\xD2\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0B\xC1V[\x95a\x0F\xDBa\x01bV[\x94\x85\x94\x85a\x0FhV[\x03\x90\xA2V[\x90a\x0F\xF4\x92\x91a\x0E\xF2V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10\x1Ea\x10\x19a\x10#\x92a\r\x1BV[a\x10\x04V[a\x0F\xFBV[\x90V[\x90V[a\x105a\x10:\x91a\x0F\xFBV[a\x10&V[\x90RV[\x90P\x90V[\x90\x91\x82a\x10S\x81a\x10Z\x93a\x10>V[\x80\x93a\x0F:V[\x01\x90V[\x80a\x10o`\x01\x92a\x10v\x96\x94a\x10)V[\x01\x91a\x10CV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x10\x97\x90a\x04bV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\xB1W`@RV[a\x10yV[a\x10\xF4\x90a\x10\xC2a\x0F\xF6V[Pa\x10\xE5a\x10\xCF_a\x10\nV[\x91\x93a\x10\xD9a\x01bV[\x94\x85\x93` \x85\x01a\x10^V[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x8DV[\x90V[\x90a\x11\x13a\x11\r32\x90\x85\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x11\"Wa\x11 \x91a\x11\xBEV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x11:`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[_\x80\xFD[\x90a\x11Ua\x11Na\x01bV[\x92\x83a\x10\x8DV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x11uWa\x11q` \x91a\x04bV[\x01\x90V[a\x10yV[\x90\x92\x91\x92a\x11\x8Fa\x11\x8A\x82a\x11WV[a\x11BV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x11\xABWa\x11\xA9\x92a\x0F:V[V[a\x11>V[a\x11\xBB\x916\x91a\x11zV[\x90V[a\x11\xD0\x91a\x11\xCB\x91a\x11\xB0V[a\x1A\x0CV[V[\x90a\x11\xDC\x91a\x10\xF7V[V[\x90a\x11\xF0\x91a\x11\xEBa\x1B\xD4V[a\x12\xF7V[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x12\na\x12\x0F\x91a\x11\xF2V[a\x11\xF8V[\x90V[a\x12\x1C\x90Ta\x11\xFEV[\x90V[a\x123a\x12.a\x128\x92a\r\x1BV[a\x04\xEEV[a\x05\xB0V[\x90V[a\x12D\x90a\x12\x1FV[\x90V[`\xA0\x1B\x90V[\x90a\x12\\`\xFF`\xA0\x1B\x91a\x12GV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12o\x90a\x08/V[\x90V[\x90V[\x90a\x12\x8Aa\x12\x85a\x12\x91\x92a\x12fV[a\x12rV[\x82Ta\x12MV[\x90UV[a\x12\x9E\x90a\x06\x8FV[\x90V[a\x12\xAA\x90a\x12\x95V[\x90V[\x90a\x12\xBE`\x01\x80`\xA0\x1B\x03\x91a\x07\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xD1\x90a\x12\x95V[\x90V[\x90V[\x90a\x12\xECa\x12\xE7a\x12\xF3\x92a\x12\xC8V[a\x12\xD4V[\x82Ta\x12\xADV[\x90UV[a\x13\x01`\x01a\x12\x12V[a\x13iW\x81a\x13 a\x13\x1Aa\x13\x15_a\x12;V[a\x05\xBBV[\x91a\x05\xBBV[\x14a\x13MWa\x13Fa\x13?a\x13K\x93a\x13:`\x01\x80a\x12uV[a\x12\xA1V[`\x01a\x12\xD7V[a\x184V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x13e`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\x80`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[\x90a\x13\x8E\x91a\x11\xDEV[V[a\x13\x98a\x1B\xD4V[a\x13\xA0a\x13\xA2V[V[a\x13\xB3a\x13\xAE_a\x12;V[a\x1CEV[V[a\x13\xBDa\x13\x90V[V[_\x90V[a\x13\xCFa\x13\xD4\x91a\x0B2V[a\x06OV[\x90V[a\x13\xE1\x90Ta\x13\xC3V[\x90V[`\xE0\x1B\x90V[a\x13\xF3\x81a\x08/V[\x03a\x13\xFAWV[_\x80\xFD[\x90PQ\x90a\x14\x0B\x82a\x13\xEAV[V[\x90` \x82\x82\x03\x12a\x14&Wa\x14#\x91_\x01a\x13\xFEV[\x90V[a\x01lV[a\x14Qa\x14^\x95\x93\x94\x92\x94a\x14G``\x84\x01\x96_\x85\x01\x90a\t3V[` \x83\x01\x90a\t3V[`@\x81\x85\x03\x91\x01Ra\x0FEV[\x90V[a\x14ia\x01bV[=_\x82>=\x90\xFD[\x92a\x14\xB4` \x93\x94a\x14\x81a\x13\xBFV[Pa\x14\xBFa\x14\x97a\x14\x92`\x01a\x13\xD7V[a\x06\xB7V[\x93cz9y\xDC\x92\x95\x97a\x14\xA8a\x01bV[\x98\x89\x97\x88\x96\x87\x96a\x13\xE4V[\x86R`\x04\x86\x01a\x14+V[\x03\x91Z\xFA\x90\x81\x15a\x15\x03W_\x91a\x14\xD5W[P\x90V[a\x14\xF6\x91P` =\x81\x11a\x14\xFCW[a\x14\xEE\x81\x83a\x10\x8DV[\x81\x01\x90a\x14\rV[_a\x14\xD1V[P=a\x14\xE4V[a\x14aV[\x90a\x15$a\x15\x1E32\x90\x85\x85\x91\x92\x90\x91\x92a\x14qV[\x15a\x08/V[a\x153Wa\x151\x91a\x15OV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x15K`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[a\x15a\x91a\x15\\\x91a\x10\xB6V[a\x1A\x0CV[V[\x90a\x15m\x91a\x15\x08V[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\x96a\x15\x9C\x91\x93\x92\x93a\x02(V[\x92a\x02(V[\x82\x03\x91\x82\x11a\x15\xA7WV[a\x15sV[a\x15\xBBa\x15\xC1\x91\x93\x92\x93a\x02(V[\x92a\x02(V[\x91a\x15\xCD\x83\x82\x02a\x02(V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\xDCWV[a\x15sV[\x91a\x15\xEAa\x15oV[P\x80a\x15\xFEa\x15\xF8\x84a\x02(V[\x91a\x02(V[\x11\x15a\x16RWa\x16\x1F\x91a\x16\x11\x91a\x15\x87V[a\x16\x19a\x05\rV[\x90a\x15\xACV[\x80a\x162a\x16,\x84a\x02(V[\x91a\x02(V[\x10\x15a\x16DWa\x16A\x91a\x15\x87V[\x90V[PPa\x16O_a\r\x1EV[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16ra\x16w\x91a\x0B2V[a\x16[V[\x90V[a\x16\x84\x90Ta\x16fV[\x90V[a\x16\x8Fa\x16WV[Pa\x16\x99_a\x16zV[\x90V[a\x16\xA7\x81\x83\x90a\x0CbV[\x91a\x16\xB1_a\r\x1EV[[\x80a\x16\xC5a\x16\xBF\x86a\x02(V[\x91a\x02(V[\x10\x15a\x17\x1AWa\x16\xF3\x90a\x16\xE932\x90a\x16\xE1\x87\x87\x86\x91a\r\xB0V[\x92\x90\x91a\x14qV[a\x16\xF8W[a\r:V[a\x16\xB2V[a\x17\x15a\x17\x10a\x17\n\x86\x86\x85\x91a\r\xB0V[\x90a\x10\xB6V[a\x1A\x0CV[a\x16\xEEV[PPPPV[a\x171\x90a\x17,a\x1B\xD4V[a\x173V[V[\x80a\x17Na\x17Ha\x17C_a\x12;V[a\x05\xBBV[\x91a\x05\xBBV[\x14a\x17\xA8Wa\x17fa\x17_\x82a\x12\xA1V[`\x01a\x12\xD7V[a\x17\x90\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0B\xC1V[\x90a\x17\x99a\x01bV[\x80a\x17\xA3\x81a\x02\x93V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x17\xC0`\x04\x82\x01a\x02\x93V[\x03\x90\xFD[a\x17\xCD\x90a\x17 V[V[a\x17\xE0\x90a\x17\xDBa\x1B\xD4V[a\x17\xE2V[V[\x80a\x17\xFDa\x17\xF7a\x17\xF2_a\x12;V[a\x05\xBBV[\x91a\x05\xBBV[\x14a\x18\rWa\x18\x0B\x90a\x1CEV[V[a\x180a\x18\x19_a\x12;V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t@V[\x03\x90\xFD[a\x18=\x90a\x17\xCFV[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x18\x88a\x18\x83a\x18\x8D\x92a\x02(V[a\x04\xEEV[a\x18gV[\x90V[a\x18\x99\x90a\x06\x8FV[\x90V[a\x18\xA5\x90a\x18\x90V[\x90V[a\x18\xB2`da\x18\x9CV[\x90V[a\x18\xBE\x90a\x06\xABV[\x90V[\x90PQ\x90a\x18\xCE\x82a\x02+V[V[\x90` \x82\x82\x03\x12a\x18\xE9Wa\x18\xE6\x91_\x01a\x18\xC1V[\x90V[a\x01lV[` \x01\x90V[``\x1B\x90V[a\x19\x03\x90a\x18\xF4V[\x90V[a\x19\x0F\x90a\x18\xFAV[\x90V[a\x19\x1Ea\x19#\x91a\x05\xBBV[a\x19\x06V[\x90RV[`\xC0\x1B\x90V[a\x196\x90a\x19'V[\x90V[a\x19Ea\x19J\x91a\x18gV[a\x19-V[\x90RV[\x90V[a\x19]a\x19b\x91a\x01\x7FV[a\x19NV[\x90RV[\x92a\x19\x94`\x08a\x19\x9C\x94a\x19\x8C`\x14\x88a\x19\x84` \x9B\x9A\x86\x99a\x19\x12V[\x01\x80\x92a\x199V[\x01\x80\x92a\x199V[\x01\x80\x92a\x19QV[\x01\x90V[` \x81a\x19\xB2a\x19\xBA\x93\x83\x96\x95a\x19QV[\x01\x80\x92a\x19QV[\x01\x90V[\x90a\x19\xCA_\x19\x91a\x07\x1DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xDD\x90a\x01\x7FV[\x90V[a\x19\xE9\x90a\x0B2V[\x90V[\x90a\x1A\x01a\x19\xFCa\x1A\x08\x92a\x19\xD4V[a\x19\xE0V[\x82Ta\x19\xBEV[\x90UV[a\x1A\x14a\x18cV[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x1B\xC3Wa\x1Ag` a\x1AQa\x1ALa\x18\xA8V[a\x18\xB5V[c\xA3\xB1\xB3\x1D\x90a\x1A_a\x01bV[\x93\x84\x92a\x13\xE4V[\x82R\x81\x80a\x1Aw`\x04\x82\x01a\x02\x93V[\x03\x91Z\xFA\x90\x81\x15a\x1B\xBEWa\x1BK\x91a\x1A\x97\x91_\x91a\x1B\x90W[Pa\x18tV[[_a\x1A\xA1a\x18?V[\x91a\x1A\xEA3a\x1A\xDBa\x1A\xB2Ba\x18tV[\x88a\x1A\xC5a\x1A\xBF\x82a\x04JV[\x91a\x18\xEEV[ \x90a\x1A\xCFa\x01bV[\x95\x86\x94` \x86\x01a\x19fV[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x8DV[a\x1A\xFCa\x1A\xF6\x82a\x04JV[\x91a\x18\xEEV[ a\x1B1a\x1B\x0B\x83\x85\x01a\x0BNV[a\x1B\"a\x1B\x16a\x01bV[\x93\x84\x92` \x84\x01a\x19\xA0V[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x8DV[a\x1BCa\x1B=\x82a\x04JV[\x91a\x18\xEEV[ \x91\x01a\x19\xECV[3a\x1B\x8Ba\x1By\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0B\xC1V[\x92a\x1B\x82a\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xA2V[a\x1B\xB1\x91P` =\x81\x11a\x1B\xB7W[a\x1B\xA9\x81\x83a\x10\x8DV[\x81\x01\x90a\x18\xD0V[_a\x1A\x91V[P=a\x1B\x9FV[a\x14aV[a\x1BKa\x1B\xCFCa\x18tV[a\x1A\x98V[a\x1B\xDCa\x16\x87V[a\x1B\xF5a\x1B\xEFa\x1B\xEAa\x1C\xA4V[a\x05\xBBV[\x91a\x05\xBBV[\x03a\x1B\xFCWV[a\x1C\x1Ea\x1C\x07a\x1C\xA4V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t@V[\x03\x90\xFD[\x90V[\x90a\x1C:a\x1C5a\x1CA\x92a\x0B\xC1V[a\x1C\"V[\x82Ta\x12\xADV[\x90UV[a\x1CN_a\x16zV[a\x1CX\x82_a\x1C%V[\x90a\x1C\x8Ca\x1C\x86\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\xC1V[\x91a\x0B\xC1V[\x91a\x1C\x95a\x01bV[\x80a\x1C\x9F\x81a\x02\x93V[\x03\x90\xA3V[a\x1C\xACa\x16WV[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrSenderNotAllowed()` and selector `0xdc741458`.
```solidity
error TransactionOrSenderNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrSenderNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrSenderNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrSenderNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrSenderNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrSenderNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrSenderNotAllowed()";
            const SELECTOR: [u8; 4] = [220u8, 116u8, 20u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_0 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_0 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes,uint256,uint256)` and selector `0x4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2`.
```solidity
event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_1 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                    originalPriority: data.1,
                    timestamp: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appchainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appchainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appchainId),
                )
            }
        }
    };
    /**Function with signature `ACCUMULATOR_STORAGE_LOCATION()` and selector `0x63d96437`.
```solidity
function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`ACCUMULATOR_STORAGE_LOCATION()`](ACCUMULATOR_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ACCUMULATOR_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ACCUMULATOR_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ACCUMULATOR_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [99u8, 217u8, 100u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `PRIORITY_DECAY_RATE()` and selector `0x3d44ae8b`.
```solidity
function PRIORITY_DECAY_RATE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATECall {}
    ///Container type for the return parameters of the [`PRIORITY_DECAY_RATE()`](PRIORITY_DECAY_RATECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRIORITY_DECAY_RATECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRIORITY_DECAY_RATEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRIORITY_DECAY_RATE()";
            const SELECTOR: [u8; 4] = [61u8, 68u8, 174u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `accumulator()` and selector `0x03381154`.
```solidity
function accumulator() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorCall {}
    ///Container type for the return parameters of the [`accumulator()`](accumulatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for accumulatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = accumulatorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "accumulator()";
            const SELECTOR: [u8; 4] = [3u8, 56u8, 17u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appchainId()` and selector `0xd8781342`.
```solidity
function appchainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdCall {}
    ///Container type for the return parameters of the [`appchainId()`](appchainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appchainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainId()";
            const SELECTOR: [u8; 4] = [216u8, 120u8, 19u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEffectivePriority(uint256,uint256,uint256)` and selector `0x83d3c115`.
```solidity
function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityCall {
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEffectivePriority(uint256,uint256,uint256)`](calculateEffectivePriorityCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityCall) -> Self {
                    (
                        value.originalPriority,
                        value.submittedTimestamp,
                        value.currentTimestamp,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        originalPriority: tuple.0,
                        submittedTimestamp: tuple.1,
                        currentTimestamp: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEffectivePriorityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEffectivePriorityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEffectivePriority(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 193u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.submittedTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isArbChain()` and selector `0xea161ce6`.
```solidity
function isArbChain() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArbChainCall {}
    ///Container type for the return parameters of the [`isArbChain()`](isArbChainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isArbChainReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArbChainCall> for UnderlyingRustTuple<'_> {
                fn from(value: isArbChainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArbChainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isArbChainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isArbChainReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isArbChainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isArbChainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isArbChainReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isArbChain()";
            const SELECTOR: [u8; 4] = [234u8, 22u8, 28u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prependZeroByte(bytes)` and selector `0x366cbab7`.
```solidity
function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteCall {
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`prependZeroByte(bytes)`](prependZeroByteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteCall> for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteCall) -> Self {
                    (value._data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prependZeroByteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for prependZeroByteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prependZeroByteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prependZeroByteReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prependZeroByte(bytes)";
            const SELECTOR: [u8; 4] = [54u8, 108u8, 186u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes,uint256)` and selector `0x1c0b6367`.
```solidity
function processTransaction(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes,uint256)`](processTransaction_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 11u8, 99u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransaction_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes,uint256)` and selector `0x050ec138`.
```solidity
function processTransactionUncompressed(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes,uint256)`](processTransactionUncompressed_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes,uint256)";
            const SELECTOR: [u8; 4] = [5u8, 14u8, 193u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressed_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[],uint256[])` and selector `0x11992f8c`.
```solidity
function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub priorities: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[],uint256[])`](processTransactionsBulk_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Call) -> Self {
                    (value.data, value.priorities)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priorities: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[],uint256[])";
            const SELECTOR: [u8; 4] = [17u8, 153u8, 47u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.priorities),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulk_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) function calls.
    pub enum SyndicateSequencingChainWithDecayingPriorityCalls {
        #[allow(missing_docs)]
        ACCUMULATOR_STORAGE_LOCATION(ACCUMULATOR_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        PRIORITY_DECAY_RATE(PRIORITY_DECAY_RATECall),
        #[allow(missing_docs)]
        accumulator(accumulatorCall),
        #[allow(missing_docs)]
        appchainId(appchainIdCall),
        #[allow(missing_docs)]
        calculateEffectivePriority(calculateEffectivePriorityCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        isArbChain(isArbChainCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        prependZeroByte(prependZeroByteCall),
        #[allow(missing_docs)]
        processTransaction_0(processTransaction_0Call),
        #[allow(missing_docs)]
        processTransaction_1(processTransaction_1Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_0(processTransactionUncompressed_0Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_1(processTransactionUncompressed_1Call),
        #[allow(missing_docs)]
        processTransactionsBulk_0(processTransactionsBulk_0Call),
        #[allow(missing_docs)]
        processTransactionsBulk_1(processTransactionsBulk_1Call),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [3u8, 56u8, 17u8, 84u8],
            [5u8, 14u8, 193u8, 56u8],
            [17u8, 153u8, 47u8, 140u8],
            [28u8, 11u8, 99u8, 103u8],
            [54u8, 108u8, 186u8, 183u8],
            [61u8, 68u8, 174u8, 139u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [99u8, 217u8, 100u8, 55u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [128u8, 78u8, 81u8, 35u8],
            [131u8, 211u8, 193u8, 21u8],
            [141u8, 165u8, 203u8, 91u8],
            [205u8, 175u8, 185u8, 120u8],
            [212u8, 240u8, 235u8, 77u8],
            [216u8, 120u8, 19u8, 66u8],
            [234u8, 22u8, 28u8, 230u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityCalls {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 20usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(_) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::PRIORITY_DECAY_RATE(_) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::accumulator(_) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainId(_) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEffectivePriority(_) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isArbChain(_) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prependZeroByte(_) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_0(_) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_1(_) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_0(_) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_1(_) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_0(_) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_1(_) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityCalls,
            >] = &[
                {
                    fn accumulator(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <accumulatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::accumulator,
                            )
                    }
                    accumulator
                },
                {
                    fn processTransactionUncompressed_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_0,
                            )
                    }
                    processTransactionUncompressed_0
                },
                {
                    fn processTransactionsBulk_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_0,
                            )
                    }
                    processTransactionsBulk_0
                },
                {
                    fn processTransaction_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_0,
                            )
                    }
                    processTransaction_0
                },
                {
                    fn prependZeroByte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <prependZeroByteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::prependZeroByte,
                            )
                    }
                    prependZeroByte
                },
                {
                    fn PRIORITY_DECAY_RATE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::PRIORITY_DECAY_RATE,
                            )
                    }
                    PRIORITY_DECAY_RATE
                },
                {
                    fn processTransaction_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_1,
                            )
                    }
                    processTransaction_1
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::initialize,
                            )
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn ACCUMULATOR_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::ACCUMULATOR_STORAGE_LOCATION,
                            )
                    }
                    ACCUMULATOR_STORAGE_LOCATION
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::isAllowed,
                            )
                    }
                    isAllowed
                },
                {
                    fn processTransactionUncompressed_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_1,
                            )
                    }
                    processTransactionUncompressed_1
                },
                {
                    fn calculateEffectivePriority(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::calculateEffectivePriority,
                            )
                    }
                    calculateEffectivePriority
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::owner,
                            )
                    }
                    owner
                },
                {
                    fn processTransactionsBulk_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_1,
                            )
                    }
                    processTransactionsBulk_1
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn appchainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <appchainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::appchainId,
                            )
                    }
                    appchainId
                },
                {
                    fn isArbChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <isArbChainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::isArbChain,
                            )
                    }
                    isArbChain
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isArbChain(inner) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isArbChain(inner) => {
                    <isArbChainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) custom errors.
    pub enum SyndicateSequencingChainWithDecayingPriorityErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrSenderNotAllowed(TransactionOrSenderNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [220u8, 116u8, 20u8, 88u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityErrors {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrSenderNotAllowed(_) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityErrors,
            >] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrSenderNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::TransactionOrSenderNotAllowed,
                            )
                    }
                    TransactionOrSenderNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) events.
    pub enum SyndicateSequencingChainWithDecayingPriorityEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed_0(TransactionProcessed_0),
        #[allow(missing_docs)]
        TransactionProcessed_1(TransactionProcessed_1),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_0)
                }
                Some(
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_1)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        >,
    > {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy(provider, _appchainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appchainId)
    }
    /**A [`SyndicateSequencingChainWithDecayingPriority`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChainWithDecayingPriority`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainWithDecayingPriorityInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainWithDecayingPriorityInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _appchainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appchainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
            SyndicateSequencingChainWithDecayingPriorityInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ACCUMULATOR_STORAGE_LOCATION`] function.
        pub fn ACCUMULATOR_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ACCUMULATOR_STORAGE_LOCATIONCall, N> {
            self.call_builder(
                &ACCUMULATOR_STORAGE_LOCATIONCall {
                },
            )
        }
        ///Creates a new call builder for the [`PRIORITY_DECAY_RATE`] function.
        pub fn PRIORITY_DECAY_RATE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRIORITY_DECAY_RATECall, N> {
            self.call_builder(&PRIORITY_DECAY_RATECall {})
        }
        ///Creates a new call builder for the [`accumulator`] function.
        pub fn accumulator(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, accumulatorCall, N> {
            self.call_builder(&accumulatorCall {})
        }
        ///Creates a new call builder for the [`appchainId`] function.
        pub fn appchainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appchainIdCall, N> {
            self.call_builder(&appchainIdCall {})
        }
        ///Creates a new call builder for the [`calculateEffectivePriority`] function.
        pub fn calculateEffectivePriority(
            &self,
            originalPriority: alloy::sol_types::private::primitives::aliases::U256,
            submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
            currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEffectivePriorityCall, N> {
            self.call_builder(
                &calculateEffectivePriorityCall {
                    originalPriority,
                    submittedTimestamp,
                    currentTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`isArbChain`] function.
        pub fn isArbChain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, isArbChainCall, N> {
            self.call_builder(&isArbChainCall {})
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`prependZeroByte`] function.
        pub fn prependZeroByte(
            &self,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, prependZeroByteCall, N> {
            self.call_builder(&prependZeroByteCall { _data })
        }
        ///Creates a new call builder for the [`processTransaction_0`] function.
        pub fn processTransaction_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_0Call, N> {
            self.call_builder(
                &processTransaction_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_1`] function.
        pub fn processTransaction_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_1Call, N> {
            self.call_builder(&processTransaction_1Call { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_0`] function.
        pub fn processTransactionUncompressed_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_0Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_1`] function.
        pub fn processTransactionUncompressed_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_1Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_0`] function.
        pub fn processTransactionsBulk_0(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            priorities: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_0Call, N> {
            self.call_builder(
                &processTransactionsBulk_0Call {
                    data,
                    priorities,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_1`] function.
        pub fn processTransactionsBulk_1(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_1Call, N> {
            self.call_builder(
                &processTransactionsBulk_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_0`] event.
        pub fn TransactionProcessed_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_0, N> {
            self.event_filter::<TransactionProcessed_0>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_1`] event.
        pub fn TransactionProcessed_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_1, N> {
            self.event_filter::<TransactionProcessed_1>()
        }
    }
}
