/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChainWithDecayingPriority {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrSenderNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed msgSender, bytes data);
    event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);

    constructor(uint256 _appchainId);

    function PRIORITY_DECAY_RATE() external view returns (uint256);
    function appchainId() external view returns (uint256);
    function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
    function processTransaction(bytes memory data, uint256 priority) external;
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data, uint256 priority) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "PRIORITY_DECAY_RATE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appchainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEffectivePriority",
    "inputs": [
      {
        "name": "originalPriority",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "submittedTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prependZeroByte",
    "inputs": [
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "priorities",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "originalPriority",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrSenderNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChainWithDecayingPriority {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b61010a565b61002161003d565b6117e46104ce82396080518161092d01526117e490f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107611ea7803803806100fc8161008c565b9283398101906100cb565b90565b610113906101c2565b565b90565b90565b61012f61012a61013492610115565b610118565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b6101746018602092610137565b61017d81610140565b0190565b6101969060208101905f818303910152610167565b90565b156101a057565b6101a861003d565b62461bcd60e51b8152806101be60048201610181565b0390fd5b6101ca6102e2565b6101e7816101e06101da5f61011b565b916100a5565b1415610199565b608052565b60a01b90565b9061020160ff60a01b916101ec565b9181191691161790565b151590565b6102199061020b565b90565b90565b9061023461022f61023b92610210565b61021c565b82546101f2565b9055565b5f0190565b61024c61003d565b3d5f823e3d90fd5b60018060a01b031690565b61027361026e61027892610254565b610118565b610254565b90565b6102849061025f565b90565b6102909061027b565b90565b5f1b90565b906102a960018060a01b0391610293565b9181191691161790565b6102bc9061027b565b90565b90565b906102d76102d26102de926102b3565b6102bf565b8254610298565b9055565b6102eb3361034f565b6102f65f600161021f565b6102fe61003d565b6101f5810181811060018060401b0382111761034a5761032682916101f5611cb2843961023f565b03905ff080156103455761033c61034391610287565b60016102c2565b565b610244565b610051565b610358906103b0565b565b61036e61036961037392610115565b610118565b610254565b90565b61037f9061035a565b90565b61038b90610254565b90565b61039790610382565b9052565b91906103ae905f6020850194019061038e565b565b806103cb6103c56103c05f610376565b610382565b91610382565b146103db576103d99061046e565b565b6103fe6103e75f610376565b5f918291631e4fbdf760e01b83526004830161039b565b0390fd5b5f1c90565b60018060a01b031690565b61041e61042391610402565b610407565b90565b6104309054610412565b90565b61043c9061025f565b90565b61044890610433565b90565b90565b9061046361045e61046a9261043f565b61044b565b8254610298565b9055565b6104775f610426565b610481825f61044e565b906104b56104af7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361043f565b9161043f565b916104be61003d565b806104c88161023f565b0390a356fe60806040526004361015610013575b6109b7565b61001d5f3561012c565b8063050ec1381461012757806311992f8c146101225780631c0b63671461011d578063366cbab7146101185780633d44ae8b1461011357806346e2cc091461010e578063485cc955146101095780635b3cd6e214610104578063715018a6146100ff5780637a3979dc146100fa578063804e5123146100f557806383d3c115146100f05780638da5cb5b146100eb578063cdafb978146100e6578063d4f0eb4d146100e1578063d8781342146100dc5763f2fde38b0361000e57610984565b61094f565b6108f8565b6108a6565b61083b565b6107e3565b610775565b61073c565b610690565b61065b565b61058d565b6104f2565b6104bd565b61041c565b610347565b610310565b6101ff565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561018a5781359167ffffffffffffffff831161018557602001926001830284011161018057565b61014c565b610148565b610144565b90565b61019b8161018f565b036101a257565b5f80fd5b905035906101b382610192565b565b916040838303126101f5575f83013567ffffffffffffffff81116101f0576101e2836101ed928601610150565b9390946020016101a6565b90565b610140565b61013c565b5f0190565b3461022e576102186102123660046101b5565b91610a97565b610220610132565b8061022a816101fa565b0390f35b610138565b909182601f8301121561026d5781359167ffffffffffffffff831161026857602001926020830284011161026357565b61014c565b610148565b610144565b909182601f830112156102ac5781359167ffffffffffffffff83116102a75760200192602083028401116102a257565b61014c565b610148565b610144565b909160408284031261030b575f82013567ffffffffffffffff811161030657836102dc918401610233565b929093602082013567ffffffffffffffff8111610301576102fd9201610272565b9091565b610140565b610140565b61013c565b346103425761032c6103233660046102b1565b92919091610c34565b610334610132565b8061033e816101fa565b0390f35b610138565b346103765761036061035a3660046101b5565b91610e2b565b610368610132565b80610372816101fa565b0390f35b610138565b906020828203126103ac575f82013567ffffffffffffffff81116103a7576103a39201610150565b9091565b610140565b61013c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6103f26103fb602093610400936103e9816103b1565b938480936103b5565b958691016103be565b6103c9565b0190565b6104199160208201915f8184039101526103d3565b90565b3461044d5761044961043861043236600461037b565b90610ef8565b610440610132565b91829182610404565b0390f35b610138565b5f91031261045c57565b61013c565b90565b90565b61047b61047661048092610461565b610464565b61018f565b90565b61048d600a610467565b90565b610498610483565b90565b6104a49061018f565b9052565b91906104bb905f6020850194019061049b565b565b346104ed576104cd366004610452565b6104e96104d8610490565b6104e0610132565b918291826104a8565b0390f35b610138565b346105215761050b61050536600461037b565b90610fe1565b610513610132565b8061051d816101fa565b0390f35b610138565b60018060a01b031690565b61053a90610526565b90565b61054681610531565b0361054d57565b5f80fd5b9050359061055e8261053d565b565b9190604083820312610588578061057c610585925f8601610551565b93602001610551565b90565b61013c565b346105bc576105a66105a0366004610560565b90611198565b6105ae610132565b806105b8816101fa565b0390f35b610138565b1c90565b60018060a01b031690565b6105e09060086105e593026105c1565b6105c5565b90565b906105f391546105d0565b90565b61060260015f906105e8565b90565b61061961061461061e92610526565b610464565b610526565b90565b61062a90610605565b90565b61063690610621565b90565b6106429061062d565b9052565b9190610659905f60208501940190610639565b565b3461068b5761066b366004610452565b6106876106766105f6565b61067e610132565b91829182610646565b0390f35b610138565b346106be576106a0366004610452565b6106a86111c9565b6106b0610132565b806106ba816101fa565b0390f35b610138565b91606083830312610710576106da825f8501610551565b926106e88360208301610551565b92604082013567ffffffffffffffff811161070b576107079201610150565b9091565b610140565b61013c565b151590565b61072390610715565b9052565b919061073a905f6020850194019061071a565b565b346107705761076c61075b6107523660046106c3565b9291909161128a565b610763610132565b91829182610727565b0390f35b610138565b346107a45761078e61078836600461037b565b906113b9565b610796610132565b806107a0816101fa565b0390f35b610138565b90916060828403126107de576107db6107c4845f85016101a6565b936107d281602086016101a6565b936040016101a6565b90565b61013c565b34610814576108106107ff6107f93660046107a9565b91611437565b610807610132565b918291826104a8565b0390f35b610138565b61082290610531565b9052565b9190610839905f60208501940190610819565b565b3461086b5761084b366004610452565b6108676108566114dd565b61085e610132565b91829182610826565b0390f35b610138565b906020828203126108a1575f82013567ffffffffffffffff811161089c576108989201610233565b9091565b610140565b61013c565b346108d5576108bf6108b9366004610870565b906114f2565b6108c7610132565b806108d1816101fa565b0390f35b610138565b906020828203126108f3576108f0915f01610551565b90565b61013c565b346109265761091061090b3660046108da565b611656565b610918610132565b80610922816101fa565b0390f35b610138565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461097f5761095f366004610452565b61097b61096a61092b565b610972610132565b918291826104a8565b0390f35b610138565b346109b25761099c6109973660046108da565b6116c6565b6109a4610132565b806109ae816101fa565b0390f35b610138565b5f80fd5b91906109d86109d23332908685919290919261128a565b15610715565b6109e7576109e592610a44565b565b5f631b8e828b60e31b8152806109ff600482016101fa565b0390fd5b610a0c90610621565b90565b604090610a3b610a30610a429597969460608401908482035f8601526103d3565b96602083019061049b565b019061049b565b565b90610a50903392610ef8565b914292610a92610a807f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610a03565b94610a89610132565b93849384610a0f565b0390a2565b90610aa292916109bb565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610b0f6032604092610aac565b610b1881610ab5565b0190565b610b319060208101905f818303910152610b02565b90565b15610b3b57565b610b43610132565b62461bcd60e51b815280610b5960048201610b1c565b0390fd5b90565b610b74610b6f610b7992610b5d565b610464565b61018f565b90565b6001610b88910161018f565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610bed570180359067ffffffffffffffff8211610be857602001916001820236038313610be357565b610ba7565b610ba3565b610b9f565b90821015610c0d576020610c099202810190610bab565b9091565b610b8b565b9190811015610c22576020020190565b610b8b565b35610c3181610192565b90565b9092610c41828590610aa4565b93610c6885610c62610c5c610c57888790610aa8565b61018f565b9161018f565b14610b34565b610c715f610b60565b5b80610c85610c7f8861018f565b9161018f565b1015610d2c57610cb390610ca9333290610ca188878691610bf2565b92909161128a565b610cb8575b610b7c565b610c72565b33610cce610cc887868591610bf2565b90610ef8565b90610ce3610cde89888691610c12565b610c27565b4292610d24610d127f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610a03565b94610d1b610132565b93849384610a0f565b0390a2610cae565b505050505050565b9190610d51610d4b3332908685919290919261128a565b15610715565b610d6057610d5e92610ddf565b565b5f631b8e828b60e31b815280610d78600482016101fa565b0390fd5b90825f939282370152565b9190610da181610d9a81610da6956103b5565b8095610d7c565b6103c9565b0190565b610dd6610dcb604093610ddd9698979560608501918583035f870152610d87565b96602083019061049b565b019061049b565b565b90913391929092610e2642610e147f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610a03565b95610e1d610132565b94859485610daa565b0390a2565b90610e369291610d34565b565b606090565b60ff60f81b1690565b60f81b90565b610e60610e5b610e6592610b5d565b610e46565b610e3d565b90565b90565b610e77610e7c91610e3d565b610e68565b9052565b905090565b909182610e9581610e9c93610e80565b8093610d7c565b0190565b80610eb1600192610eb89694610e6b565b0191610e85565b90565b634e487b7160e01b5f52604160045260245ffd5b90610ed9906103c9565b810190811067ffffffffffffffff821117610ef357604052565b610ebb565b610f3690610f04610e38565b50610f27610f115f610e4c565b9193610f1b610132565b94859360208501610ea0565b60208201810382520382610ecf565b90565b90610f55610f4f3332908585919290919261128a565b15610715565b610f6457610f6291610f9a565b565b5f631b8e828b60e31b815280610f7c600482016101fa565b0390fd5b9091610f979260208301925f818503910152610d87565b90565b339091610fc77f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610a03565b92610fdc610fd3610132565b92839283610f80565b0390a2565b90610feb91610f39565b565b90610fff91610ffa6116d1565b61110b565b565b60a01c90565b60ff1690565b61101961101e91611001565b611007565b90565b61102b905461100d565b90565b61104261103d61104792610b5d565b610464565b610526565b90565b6110539061102e565b90565b60a01b90565b9061106b60ff60a01b91611056565b9181191691161790565b61107e90610715565b90565b90565b906110996110946110a092611075565b611081565b825461105c565b9055565b6110ad90610605565b90565b6110b9906110a4565b90565b5f1b90565b906110d260018060a01b03916110bc565b9181191691161790565b6110e5906110a4565b90565b90565b906111006110fb611107926110dc565b6110e8565b82546110c1565b9055565b6111156001611021565b61117d578161113461112e6111295f61104a565b610531565b91610531565b146111615761115a61115361115f9361114e600180611084565b6110b0565b60016110eb565b6116c6565b565b5f632e7f3c7f60e11b815280611179600482016101fa565b0390fd5b5f62dc149f60e41b815280611194600482016101fa565b0390fd5b906111a291610fed565b565b6111ac6116d1565b6111b46111b6565b565b6111c76111c25f61104a565b611742565b565b6111d16111a4565b565b5f90565b5f1c90565b6111e86111ed916111d7565b6105c5565b90565b6111fa90546111dc565b90565b60e01b90565b61120c81610715565b0361121357565b5f80fd5b9050519061122482611203565b565b9060208282031261123f5761123c915f01611217565b90565b61013c565b61126a611277959394929461126060608401965f850190610819565b6020830190610819565b6040818503910152610d87565b90565b611282610132565b3d5f823e3d90fd5b926112cd6020939461129a6111d3565b506112d86112b06112ab60016111f0565b61062d565b93637a3979dc9295976112c1610132565b988997889687966111fd565b865260048601611244565b03915afa90811561131c575f916112ee575b5090565b61130f915060203d8111611315575b6113078183610ecf565b810190611226565b5f6112ea565b503d6112fd565b61127a565b9061133d6113373332908585919290919261128a565b15610715565b61134c5761134a91611368565b565b5f631b8e828b60e31b815280611364600482016101fa565b0390fd5b90611374903392610ef8565b906113b46113a27f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610a03565b926113ab610132565b91829182610404565b0390a2565b906113c391611321565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b6113ec6113f29193929361018f565b9261018f565b82039182116113fd57565b6113c9565b6114116114179193929361018f565b9261018f565b9161142383820261018f565b92818404149015171561143257565b6113c9565b916114406113c5565b508061145461144e8461018f565b9161018f565b11156114a85761147591611467916113dd565b61146f610483565b90611402565b806114886114828461018f565b9161018f565b101561149a57611497916113dd565b90565b50506114a55f610b60565b90565b505090565b5f90565b60018060a01b031690565b6114c86114cd916111d7565b6114b1565b90565b6114da90546114bc565b90565b6114e56114ad565b506114ef5f6114d0565b90565b6114fd818390610aa4565b916115075f610b60565b5b8061151b6115158661018f565b9161018f565b10156115ac576115499061153f33329061153787878691610bf2565b92909161128a565b61154e575b610b7c565b611508565b3361156461155e86868591610bf2565b90610ef8565b906115a46115927f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610a03565b9261159b610132565b91829182610404565b0390a2611544565b50505050565b6115c3906115be6116d1565b6115c5565b565b806115e06115da6115d55f61104a565b610531565b91610531565b1461163a576115f86115f1826110b0565b60016110eb565b6116227f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610a03565b9061162b610132565b80611635816101fa565b0390a2565b5f632e7f3c7f60e11b815280611652600482016101fa565b0390fd5b61165f906115b2565b565b6116729061166d6116d1565b611674565b565b8061168f6116896116845f61104a565b610531565b91610531565b1461169f5761169d90611742565b565b6116c26116ab5f61104a565b5f918291631e4fbdf760e01b835260048301610826565b0390fd5b6116cf90611661565b565b6116d96114dd565b6116f26116ec6116e76117a1565b610531565b91610531565b036116f957565b61171b6117046117a1565b5f91829163118cdaa760e01b835260048301610826565b0390fd5b90565b9061173761173261173e92610a03565b61171f565b82546110c1565b9055565b61174b5f6114d0565b611755825f611722565b906117896117837f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610a03565b91610a03565b91611792610132565b8061179c816101fa565b0390a3565b6117a96114ad565b50339056fea264697066735822122080ac9612c85cfe9dbb847936a455eda7937a00befc22204ad3ed7b7787fb7c8d64736f6c634300081c0033608060405234601c57600e6020565b6101ca61002b82396101ca90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056fea2646970667358221220360925ed8f75b656cff2caed286db820dd79dd8ff1971df461ad9166cea8e6e864736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\nV[a\0!a\0=V[a\x17\xE4a\x04\xCE\x829`\x80Q\x81a\t-\x01Ra\x17\xE4\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x1E\xA7\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[a\x01\x13\x90a\x01\xC2V[V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01t`\x18` \x92a\x017V[a\x01}\x81a\x01@V[\x01\x90V[a\x01\x96\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01gV[\x90V[\x15a\x01\xA0WV[a\x01\xA8a\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xBE`\x04\x82\x01a\x01\x81V[\x03\x90\xFD[a\x01\xCAa\x02\xE2V[a\x01\xE7\x81a\x01\xE0a\x01\xDA_a\x01\x1BV[\x91a\0\xA5V[\x14\x15a\x01\x99V[`\x80RV[`\xA0\x1B\x90V[\x90a\x02\x01`\xFF`\xA0\x1B\x91a\x01\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x19\x90a\x02\x0BV[\x90V[\x90V[\x90a\x024a\x02/a\x02;\x92a\x02\x10V[a\x02\x1CV[\x82Ta\x01\xF2V[\x90UV[_\x01\x90V[a\x02La\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02sa\x02na\x02x\x92a\x02TV[a\x01\x18V[a\x02TV[\x90V[a\x02\x84\x90a\x02_V[\x90V[a\x02\x90\x90a\x02{V[\x90V[_\x1B\x90V[\x90a\x02\xA9`\x01\x80`\xA0\x1B\x03\x91a\x02\x93V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xBC\x90a\x02{V[\x90V[\x90V[\x90a\x02\xD7a\x02\xD2a\x02\xDE\x92a\x02\xB3V[a\x02\xBFV[\x82Ta\x02\x98V[\x90UV[a\x02\xEB3a\x03OV[a\x02\xF6_`\x01a\x02\x1FV[a\x02\xFEa\0=V[a\x01\xF5\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03JWa\x03&\x82\x91a\x01\xF5a\x1C\xB2\x849a\x02?V[\x03\x90_\xF0\x80\x15a\x03EWa\x03<a\x03C\x91a\x02\x87V[`\x01a\x02\xC2V[V[a\x02DV[a\0QV[a\x03X\x90a\x03\xB0V[V[a\x03na\x03ia\x03s\x92a\x01\x15V[a\x01\x18V[a\x02TV[\x90V[a\x03\x7F\x90a\x03ZV[\x90V[a\x03\x8B\x90a\x02TV[\x90V[a\x03\x97\x90a\x03\x82V[\x90RV[\x91\x90a\x03\xAE\x90_` \x85\x01\x94\x01\x90a\x03\x8EV[V[\x80a\x03\xCBa\x03\xC5a\x03\xC0_a\x03vV[a\x03\x82V[\x91a\x03\x82V[\x14a\x03\xDBWa\x03\xD9\x90a\x04nV[V[a\x03\xFEa\x03\xE7_a\x03vV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x9BV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x1Ea\x04#\x91a\x04\x02V[a\x04\x07V[\x90V[a\x040\x90Ta\x04\x12V[\x90V[a\x04<\x90a\x02_V[\x90V[a\x04H\x90a\x043V[\x90V[\x90V[\x90a\x04ca\x04^a\x04j\x92a\x04?V[a\x04KV[\x82Ta\x02\x98V[\x90UV[a\x04w_a\x04&V[a\x04\x81\x82_a\x04NV[\x90a\x04\xB5a\x04\xAF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04?V[\x91a\x04?V[\x91a\x04\xBEa\0=V[\x80a\x04\xC8\x81a\x02?V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\t\xB7V[a\0\x1D_5a\x01,V[\x80c\x05\x0E\xC18\x14a\x01'W\x80c\x11\x99/\x8C\x14a\x01\"W\x80c\x1C\x0Bcg\x14a\x01\x1DW\x80c6l\xBA\xB7\x14a\x01\x18W\x80c=D\xAE\x8B\x14a\x01\x13W\x80cF\xE2\xCC\t\x14a\x01\x0EW\x80cH\\\xC9U\x14a\x01\tW\x80c[<\xD6\xE2\x14a\x01\x04W\x80cqP\x18\xA6\x14a\0\xFFW\x80cz9y\xDC\x14a\0\xFAW\x80c\x80NQ#\x14a\0\xF5W\x80c\x83\xD3\xC1\x15\x14a\0\xF0W\x80c\x8D\xA5\xCB[\x14a\0\xEBW\x80c\xCD\xAF\xB9x\x14a\0\xE6W\x80c\xD4\xF0\xEBM\x14a\0\xE1W\x80c\xD8x\x13B\x14a\0\xDCWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\t\x84V[a\tOV[a\x08\xF8V[a\x08\xA6V[a\x08;V[a\x07\xE3V[a\x07uV[a\x07<V[a\x06\x90V[a\x06[V[a\x05\x8DV[a\x04\xF2V[a\x04\xBDV[a\x04\x1CV[a\x03GV[a\x03\x10V[a\x01\xFFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x8AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x85W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x80WV[a\x01LV[a\x01HV[a\x01DV[\x90V[a\x01\x9B\x81a\x01\x8FV[\x03a\x01\xA2WV[_\x80\xFD[\x90P5\x90a\x01\xB3\x82a\x01\x92V[V[\x91`@\x83\x83\x03\x12a\x01\xF5W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xF0Wa\x01\xE2\x83a\x01\xED\x92\x86\x01a\x01PV[\x93\x90\x94` \x01a\x01\xA6V[\x90V[a\x01@V[a\x01<V[_\x01\x90V[4a\x02.Wa\x02\x18a\x02\x126`\x04a\x01\xB5V[\x91a\n\x97V[a\x02 a\x012V[\x80a\x02*\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02mW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02hW` \x01\x92` \x83\x02\x84\x01\x11a\x02cWV[a\x01LV[a\x01HV[a\x01DV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\xACW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xA7W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xA2WV[a\x01LV[a\x01HV[a\x01DV[\x90\x91`@\x82\x84\x03\x12a\x03\x0BW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x06W\x83a\x02\xDC\x91\x84\x01a\x023V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x01Wa\x02\xFD\x92\x01a\x02rV[\x90\x91V[a\x01@V[a\x01@V[a\x01<V[4a\x03BWa\x03,a\x03#6`\x04a\x02\xB1V[\x92\x91\x90\x91a\x0C4V[a\x034a\x012V[\x80a\x03>\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[4a\x03vWa\x03`a\x03Z6`\x04a\x01\xB5V[\x91a\x0E+V[a\x03ha\x012V[\x80a\x03r\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90` \x82\x82\x03\x12a\x03\xACW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xA7Wa\x03\xA3\x92\x01a\x01PV[\x90\x91V[a\x01@V[a\x01<V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x03\xF2a\x03\xFB` \x93a\x04\0\x93a\x03\xE9\x81a\x03\xB1V[\x93\x84\x80\x93a\x03\xB5V[\x95\x86\x91\x01a\x03\xBEV[a\x03\xC9V[\x01\x90V[a\x04\x19\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xD3V[\x90V[4a\x04MWa\x04Ia\x048a\x0426`\x04a\x03{V[\x90a\x0E\xF8V[a\x04@a\x012V[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x018V[_\x91\x03\x12a\x04\\WV[a\x01<V[\x90V[\x90V[a\x04{a\x04va\x04\x80\x92a\x04aV[a\x04dV[a\x01\x8FV[\x90V[a\x04\x8D`\na\x04gV[\x90V[a\x04\x98a\x04\x83V[\x90V[a\x04\xA4\x90a\x01\x8FV[\x90RV[\x91\x90a\x04\xBB\x90_` \x85\x01\x94\x01\x90a\x04\x9BV[V[4a\x04\xEDWa\x04\xCD6`\x04a\x04RV[a\x04\xE9a\x04\xD8a\x04\x90V[a\x04\xE0a\x012V[\x91\x82\x91\x82a\x04\xA8V[\x03\x90\xF3[a\x018V[4a\x05!Wa\x05\x0Ba\x05\x056`\x04a\x03{V[\x90a\x0F\xE1V[a\x05\x13a\x012V[\x80a\x05\x1D\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05:\x90a\x05&V[\x90V[a\x05F\x81a\x051V[\x03a\x05MWV[_\x80\xFD[\x90P5\x90a\x05^\x82a\x05=V[V[\x91\x90`@\x83\x82\x03\x12a\x05\x88W\x80a\x05|a\x05\x85\x92_\x86\x01a\x05QV[\x93` \x01a\x05QV[\x90V[a\x01<V[4a\x05\xBCWa\x05\xA6a\x05\xA06`\x04a\x05`V[\x90a\x11\x98V[a\x05\xAEa\x012V[\x80a\x05\xB8\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xE0\x90`\x08a\x05\xE5\x93\x02a\x05\xC1V[a\x05\xC5V[\x90V[\x90a\x05\xF3\x91Ta\x05\xD0V[\x90V[a\x06\x02`\x01_\x90a\x05\xE8V[\x90V[a\x06\x19a\x06\x14a\x06\x1E\x92a\x05&V[a\x04dV[a\x05&V[\x90V[a\x06*\x90a\x06\x05V[\x90V[a\x066\x90a\x06!V[\x90V[a\x06B\x90a\x06-V[\x90RV[\x91\x90a\x06Y\x90_` \x85\x01\x94\x01\x90a\x069V[V[4a\x06\x8BWa\x06k6`\x04a\x04RV[a\x06\x87a\x06va\x05\xF6V[a\x06~a\x012V[\x91\x82\x91\x82a\x06FV[\x03\x90\xF3[a\x018V[4a\x06\xBEWa\x06\xA06`\x04a\x04RV[a\x06\xA8a\x11\xC9V[a\x06\xB0a\x012V[\x80a\x06\xBA\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x91``\x83\x83\x03\x12a\x07\x10Wa\x06\xDA\x82_\x85\x01a\x05QV[\x92a\x06\xE8\x83` \x83\x01a\x05QV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x0BWa\x07\x07\x92\x01a\x01PV[\x90\x91V[a\x01@V[a\x01<V[\x15\x15\x90V[a\x07#\x90a\x07\x15V[\x90RV[\x91\x90a\x07:\x90_` \x85\x01\x94\x01\x90a\x07\x1AV[V[4a\x07pWa\x07la\x07[a\x07R6`\x04a\x06\xC3V[\x92\x91\x90\x91a\x12\x8AV[a\x07ca\x012V[\x91\x82\x91\x82a\x07'V[\x03\x90\xF3[a\x018V[4a\x07\xA4Wa\x07\x8Ea\x07\x886`\x04a\x03{V[\x90a\x13\xB9V[a\x07\x96a\x012V[\x80a\x07\xA0\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90\x91``\x82\x84\x03\x12a\x07\xDEWa\x07\xDBa\x07\xC4\x84_\x85\x01a\x01\xA6V[\x93a\x07\xD2\x81` \x86\x01a\x01\xA6V[\x93`@\x01a\x01\xA6V[\x90V[a\x01<V[4a\x08\x14Wa\x08\x10a\x07\xFFa\x07\xF96`\x04a\x07\xA9V[\x91a\x147V[a\x08\x07a\x012V[\x91\x82\x91\x82a\x04\xA8V[\x03\x90\xF3[a\x018V[a\x08\"\x90a\x051V[\x90RV[\x91\x90a\x089\x90_` \x85\x01\x94\x01\x90a\x08\x19V[V[4a\x08kWa\x08K6`\x04a\x04RV[a\x08ga\x08Va\x14\xDDV[a\x08^a\x012V[\x91\x82\x91\x82a\x08&V[\x03\x90\xF3[a\x018V[\x90` \x82\x82\x03\x12a\x08\xA1W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x9CWa\x08\x98\x92\x01a\x023V[\x90\x91V[a\x01@V[a\x01<V[4a\x08\xD5Wa\x08\xBFa\x08\xB96`\x04a\x08pV[\x90a\x14\xF2V[a\x08\xC7a\x012V[\x80a\x08\xD1\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90` \x82\x82\x03\x12a\x08\xF3Wa\x08\xF0\x91_\x01a\x05QV[\x90V[a\x01<V[4a\t&Wa\t\x10a\t\x0B6`\x04a\x08\xDAV[a\x16VV[a\t\x18a\x012V[\x80a\t\"\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\t\x7FWa\t_6`\x04a\x04RV[a\t{a\tja\t+V[a\tra\x012V[\x91\x82\x91\x82a\x04\xA8V[\x03\x90\xF3[a\x018V[4a\t\xB2Wa\t\x9Ca\t\x976`\x04a\x08\xDAV[a\x16\xC6V[a\t\xA4a\x012V[\x80a\t\xAE\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[_\x80\xFD[\x91\x90a\t\xD8a\t\xD232\x90\x86\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\t\xE7Wa\t\xE5\x92a\nDV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\xFF`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[a\n\x0C\x90a\x06!V[\x90V[`@\x90a\n;a\n0a\nB\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x03\xD3V[\x96` \x83\x01\x90a\x04\x9BV[\x01\x90a\x04\x9BV[V[\x90a\nP\x903\x92a\x0E\xF8V[\x91B\x92a\n\x92a\n\x80\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\x03V[\x94a\n\x89a\x012V[\x93\x84\x93\x84a\n\x0FV[\x03\x90\xA2V[\x90a\n\xA2\x92\x91a\t\xBBV[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0B\x0F`2`@\x92a\n\xACV[a\x0B\x18\x81a\n\xB5V[\x01\x90V[a\x0B1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\x02V[\x90V[\x15a\x0B;WV[a\x0BCa\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0BY`\x04\x82\x01a\x0B\x1CV[\x03\x90\xFD[\x90V[a\x0Bta\x0Boa\x0By\x92a\x0B]V[a\x04dV[a\x01\x8FV[\x90V[`\x01a\x0B\x88\x91\x01a\x01\x8FV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0B\xEDW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\xE8W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0B\xE3WV[a\x0B\xA7V[a\x0B\xA3V[a\x0B\x9FV[\x90\x82\x10\x15a\x0C\rW` a\x0C\t\x92\x02\x81\x01\x90a\x0B\xABV[\x90\x91V[a\x0B\x8BV[\x91\x90\x81\x10\x15a\x0C\"W` \x02\x01\x90V[a\x0B\x8BV[5a\x0C1\x81a\x01\x92V[\x90V[\x90\x92a\x0CA\x82\x85\x90a\n\xA4V[\x93a\x0Ch\x85a\x0Cba\x0C\\a\x0CW\x88\x87\x90a\n\xA8V[a\x01\x8FV[\x91a\x01\x8FV[\x14a\x0B4V[a\x0Cq_a\x0B`V[[\x80a\x0C\x85a\x0C\x7F\x88a\x01\x8FV[\x91a\x01\x8FV[\x10\x15a\r,Wa\x0C\xB3\x90a\x0C\xA932\x90a\x0C\xA1\x88\x87\x86\x91a\x0B\xF2V[\x92\x90\x91a\x12\x8AV[a\x0C\xB8W[a\x0B|V[a\x0CrV[3a\x0C\xCEa\x0C\xC8\x87\x86\x85\x91a\x0B\xF2V[\x90a\x0E\xF8V[\x90a\x0C\xE3a\x0C\xDE\x89\x88\x86\x91a\x0C\x12V[a\x0C'V[B\x92a\r$a\r\x12\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\x03V[\x94a\r\x1Ba\x012V[\x93\x84\x93\x84a\n\x0FV[\x03\x90\xA2a\x0C\xAEV[PPPPPPV[\x91\x90a\rQa\rK32\x90\x86\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\r`Wa\r^\x92a\r\xDFV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\rx`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r\xA1\x81a\r\x9A\x81a\r\xA6\x95a\x03\xB5V[\x80\x95a\r|V[a\x03\xC9V[\x01\x90V[a\r\xD6a\r\xCB`@\x93a\r\xDD\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\r\x87V[\x96` \x83\x01\x90a\x04\x9BV[\x01\x90a\x04\x9BV[V[\x90\x913\x91\x92\x90\x92a\x0E&Ba\x0E\x14\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\n\x03V[\x95a\x0E\x1Da\x012V[\x94\x85\x94\x85a\r\xAAV[\x03\x90\xA2V[\x90a\x0E6\x92\x91a\r4V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0E`a\x0E[a\x0Ee\x92a\x0B]V[a\x0EFV[a\x0E=V[\x90V[\x90V[a\x0Ewa\x0E|\x91a\x0E=V[a\x0EhV[\x90RV[\x90P\x90V[\x90\x91\x82a\x0E\x95\x81a\x0E\x9C\x93a\x0E\x80V[\x80\x93a\r|V[\x01\x90V[\x80a\x0E\xB1`\x01\x92a\x0E\xB8\x96\x94a\x0EkV[\x01\x91a\x0E\x85V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0E\xD9\x90a\x03\xC9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xF3W`@RV[a\x0E\xBBV[a\x0F6\x90a\x0F\x04a\x0E8V[Pa\x0F'a\x0F\x11_a\x0ELV[\x91\x93a\x0F\x1Ba\x012V[\x94\x85\x93` \x85\x01a\x0E\xA0V[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\xCFV[\x90V[\x90a\x0FUa\x0FO32\x90\x85\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\x0FdWa\x0Fb\x91a\x0F\x9AV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0F|`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90\x91a\x0F\x97\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\r\x87V[\x90V[3\x90\x91a\x0F\xC7\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\x03V[\x92a\x0F\xDCa\x0F\xD3a\x012V[\x92\x83\x92\x83a\x0F\x80V[\x03\x90\xA2V[\x90a\x0F\xEB\x91a\x0F9V[V[\x90a\x0F\xFF\x91a\x0F\xFAa\x16\xD1V[a\x11\x0BV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x10\x19a\x10\x1E\x91a\x10\x01V[a\x10\x07V[\x90V[a\x10+\x90Ta\x10\rV[\x90V[a\x10Ba\x10=a\x10G\x92a\x0B]V[a\x04dV[a\x05&V[\x90V[a\x10S\x90a\x10.V[\x90V[`\xA0\x1B\x90V[\x90a\x10k`\xFF`\xA0\x1B\x91a\x10VV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10~\x90a\x07\x15V[\x90V[\x90V[\x90a\x10\x99a\x10\x94a\x10\xA0\x92a\x10uV[a\x10\x81V[\x82Ta\x10\\V[\x90UV[a\x10\xAD\x90a\x06\x05V[\x90V[a\x10\xB9\x90a\x10\xA4V[\x90V[_\x1B\x90V[\x90a\x10\xD2`\x01\x80`\xA0\x1B\x03\x91a\x10\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xE5\x90a\x10\xA4V[\x90V[\x90V[\x90a\x11\0a\x10\xFBa\x11\x07\x92a\x10\xDCV[a\x10\xE8V[\x82Ta\x10\xC1V[\x90UV[a\x11\x15`\x01a\x10!V[a\x11}W\x81a\x114a\x11.a\x11)_a\x10JV[a\x051V[\x91a\x051V[\x14a\x11aWa\x11Za\x11Sa\x11_\x93a\x11N`\x01\x80a\x10\x84V[a\x10\xB0V[`\x01a\x10\xEBV[a\x16\xC6V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x11y`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x11\x94`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90a\x11\xA2\x91a\x0F\xEDV[V[a\x11\xACa\x16\xD1V[a\x11\xB4a\x11\xB6V[V[a\x11\xC7a\x11\xC2_a\x10JV[a\x17BV[V[a\x11\xD1a\x11\xA4V[V[_\x90V[_\x1C\x90V[a\x11\xE8a\x11\xED\x91a\x11\xD7V[a\x05\xC5V[\x90V[a\x11\xFA\x90Ta\x11\xDCV[\x90V[`\xE0\x1B\x90V[a\x12\x0C\x81a\x07\x15V[\x03a\x12\x13WV[_\x80\xFD[\x90PQ\x90a\x12$\x82a\x12\x03V[V[\x90` \x82\x82\x03\x12a\x12?Wa\x12<\x91_\x01a\x12\x17V[\x90V[a\x01<V[a\x12ja\x12w\x95\x93\x94\x92\x94a\x12```\x84\x01\x96_\x85\x01\x90a\x08\x19V[` \x83\x01\x90a\x08\x19V[`@\x81\x85\x03\x91\x01Ra\r\x87V[\x90V[a\x12\x82a\x012V[=_\x82>=\x90\xFD[\x92a\x12\xCD` \x93\x94a\x12\x9Aa\x11\xD3V[Pa\x12\xD8a\x12\xB0a\x12\xAB`\x01a\x11\xF0V[a\x06-V[\x93cz9y\xDC\x92\x95\x97a\x12\xC1a\x012V[\x98\x89\x97\x88\x96\x87\x96a\x11\xFDV[\x86R`\x04\x86\x01a\x12DV[\x03\x91Z\xFA\x90\x81\x15a\x13\x1CW_\x91a\x12\xEEW[P\x90V[a\x13\x0F\x91P` =\x81\x11a\x13\x15W[a\x13\x07\x81\x83a\x0E\xCFV[\x81\x01\x90a\x12&V[_a\x12\xEAV[P=a\x12\xFDV[a\x12zV[\x90a\x13=a\x13732\x90\x85\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\x13LWa\x13J\x91a\x13hV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x13d`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90a\x13t\x903\x92a\x0E\xF8V[\x90a\x13\xB4a\x13\xA2\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\x03V[\x92a\x13\xABa\x012V[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xA2V[\x90a\x13\xC3\x91a\x13!V[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\xECa\x13\xF2\x91\x93\x92\x93a\x01\x8FV[\x92a\x01\x8FV[\x82\x03\x91\x82\x11a\x13\xFDWV[a\x13\xC9V[a\x14\x11a\x14\x17\x91\x93\x92\x93a\x01\x8FV[\x92a\x01\x8FV[\x91a\x14#\x83\x82\x02a\x01\x8FV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x142WV[a\x13\xC9V[\x91a\x14@a\x13\xC5V[P\x80a\x14Ta\x14N\x84a\x01\x8FV[\x91a\x01\x8FV[\x11\x15a\x14\xA8Wa\x14u\x91a\x14g\x91a\x13\xDDV[a\x14oa\x04\x83V[\x90a\x14\x02V[\x80a\x14\x88a\x14\x82\x84a\x01\x8FV[\x91a\x01\x8FV[\x10\x15a\x14\x9AWa\x14\x97\x91a\x13\xDDV[\x90V[PPa\x14\xA5_a\x0B`V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x14\xC8a\x14\xCD\x91a\x11\xD7V[a\x14\xB1V[\x90V[a\x14\xDA\x90Ta\x14\xBCV[\x90V[a\x14\xE5a\x14\xADV[Pa\x14\xEF_a\x14\xD0V[\x90V[a\x14\xFD\x81\x83\x90a\n\xA4V[\x91a\x15\x07_a\x0B`V[[\x80a\x15\x1Ba\x15\x15\x86a\x01\x8FV[\x91a\x01\x8FV[\x10\x15a\x15\xACWa\x15I\x90a\x15?32\x90a\x157\x87\x87\x86\x91a\x0B\xF2V[\x92\x90\x91a\x12\x8AV[a\x15NW[a\x0B|V[a\x15\x08V[3a\x15da\x15^\x86\x86\x85\x91a\x0B\xF2V[\x90a\x0E\xF8V[\x90a\x15\xA4a\x15\x92\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\x03V[\x92a\x15\x9Ba\x012V[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xA2a\x15DV[PPPPV[a\x15\xC3\x90a\x15\xBEa\x16\xD1V[a\x15\xC5V[V[\x80a\x15\xE0a\x15\xDAa\x15\xD5_a\x10JV[a\x051V[\x91a\x051V[\x14a\x16:Wa\x15\xF8a\x15\xF1\x82a\x10\xB0V[`\x01a\x10\xEBV[a\x16\"\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\n\x03V[\x90a\x16+a\x012V[\x80a\x165\x81a\x01\xFAV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x16R`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[a\x16_\x90a\x15\xB2V[V[a\x16r\x90a\x16ma\x16\xD1V[a\x16tV[V[\x80a\x16\x8Fa\x16\x89a\x16\x84_a\x10JV[a\x051V[\x91a\x051V[\x14a\x16\x9FWa\x16\x9D\x90a\x17BV[V[a\x16\xC2a\x16\xAB_a\x10JV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x08&V[\x03\x90\xFD[a\x16\xCF\x90a\x16aV[V[a\x16\xD9a\x14\xDDV[a\x16\xF2a\x16\xECa\x16\xE7a\x17\xA1V[a\x051V[\x91a\x051V[\x03a\x16\xF9WV[a\x17\x1Ba\x17\x04a\x17\xA1V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x08&V[\x03\x90\xFD[\x90V[\x90a\x177a\x172a\x17>\x92a\n\x03V[a\x17\x1FV[\x82Ta\x10\xC1V[\x90UV[a\x17K_a\x14\xD0V[a\x17U\x82_a\x17\"V[\x90a\x17\x89a\x17\x83\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\n\x03V[\x91a\n\x03V[\x91a\x17\x92a\x012V[\x80a\x17\x9C\x81a\x01\xFAV[\x03\x90\xA3V[a\x17\xA9a\x14\xADV[P3\x90V\xFE\xA2dipfsX\"\x12 \x80\xAC\x96\x12\xC8\\\xFE\x9D\xBB\x84y6\xA4U\xED\xA7\x93z\0\xBE\xFC\" J\xD3\xED{w\x87\xFB|\x8DdsolcC\0\x08\x1C\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\xCAa\0+\x829a\x01\xCA\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V\xFE\xA2dipfsX\"\x12 6\t%\xED\x8Fu\xB6V\xCF\xF2\xCA\xED(m\xB8 \xDDy\xDD\x8F\xF1\x97\x1D\xF4a\xAD\x91f\xCE\xA8\xE6\xE8dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6109b7565b61001d5f3561012c565b8063050ec1381461012757806311992f8c146101225780631c0b63671461011d578063366cbab7146101185780633d44ae8b1461011357806346e2cc091461010e578063485cc955146101095780635b3cd6e214610104578063715018a6146100ff5780637a3979dc146100fa578063804e5123146100f557806383d3c115146100f05780638da5cb5b146100eb578063cdafb978146100e6578063d4f0eb4d146100e1578063d8781342146100dc5763f2fde38b0361000e57610984565b61094f565b6108f8565b6108a6565b61083b565b6107e3565b610775565b61073c565b610690565b61065b565b61058d565b6104f2565b6104bd565b61041c565b610347565b610310565b6101ff565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561018a5781359167ffffffffffffffff831161018557602001926001830284011161018057565b61014c565b610148565b610144565b90565b61019b8161018f565b036101a257565b5f80fd5b905035906101b382610192565b565b916040838303126101f5575f83013567ffffffffffffffff81116101f0576101e2836101ed928601610150565b9390946020016101a6565b90565b610140565b61013c565b5f0190565b3461022e576102186102123660046101b5565b91610a97565b610220610132565b8061022a816101fa565b0390f35b610138565b909182601f8301121561026d5781359167ffffffffffffffff831161026857602001926020830284011161026357565b61014c565b610148565b610144565b909182601f830112156102ac5781359167ffffffffffffffff83116102a75760200192602083028401116102a257565b61014c565b610148565b610144565b909160408284031261030b575f82013567ffffffffffffffff811161030657836102dc918401610233565b929093602082013567ffffffffffffffff8111610301576102fd9201610272565b9091565b610140565b610140565b61013c565b346103425761032c6103233660046102b1565b92919091610c34565b610334610132565b8061033e816101fa565b0390f35b610138565b346103765761036061035a3660046101b5565b91610e2b565b610368610132565b80610372816101fa565b0390f35b610138565b906020828203126103ac575f82013567ffffffffffffffff81116103a7576103a39201610150565b9091565b610140565b61013c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b6103f26103fb602093610400936103e9816103b1565b938480936103b5565b958691016103be565b6103c9565b0190565b6104199160208201915f8184039101526103d3565b90565b3461044d5761044961043861043236600461037b565b90610ef8565b610440610132565b91829182610404565b0390f35b610138565b5f91031261045c57565b61013c565b90565b90565b61047b61047661048092610461565b610464565b61018f565b90565b61048d600a610467565b90565b610498610483565b90565b6104a49061018f565b9052565b91906104bb905f6020850194019061049b565b565b346104ed576104cd366004610452565b6104e96104d8610490565b6104e0610132565b918291826104a8565b0390f35b610138565b346105215761050b61050536600461037b565b90610fe1565b610513610132565b8061051d816101fa565b0390f35b610138565b60018060a01b031690565b61053a90610526565b90565b61054681610531565b0361054d57565b5f80fd5b9050359061055e8261053d565b565b9190604083820312610588578061057c610585925f8601610551565b93602001610551565b90565b61013c565b346105bc576105a66105a0366004610560565b90611198565b6105ae610132565b806105b8816101fa565b0390f35b610138565b1c90565b60018060a01b031690565b6105e09060086105e593026105c1565b6105c5565b90565b906105f391546105d0565b90565b61060260015f906105e8565b90565b61061961061461061e92610526565b610464565b610526565b90565b61062a90610605565b90565b61063690610621565b90565b6106429061062d565b9052565b9190610659905f60208501940190610639565b565b3461068b5761066b366004610452565b6106876106766105f6565b61067e610132565b91829182610646565b0390f35b610138565b346106be576106a0366004610452565b6106a86111c9565b6106b0610132565b806106ba816101fa565b0390f35b610138565b91606083830312610710576106da825f8501610551565b926106e88360208301610551565b92604082013567ffffffffffffffff811161070b576107079201610150565b9091565b610140565b61013c565b151590565b61072390610715565b9052565b919061073a905f6020850194019061071a565b565b346107705761076c61075b6107523660046106c3565b9291909161128a565b610763610132565b91829182610727565b0390f35b610138565b346107a45761078e61078836600461037b565b906113b9565b610796610132565b806107a0816101fa565b0390f35b610138565b90916060828403126107de576107db6107c4845f85016101a6565b936107d281602086016101a6565b936040016101a6565b90565b61013c565b34610814576108106107ff6107f93660046107a9565b91611437565b610807610132565b918291826104a8565b0390f35b610138565b61082290610531565b9052565b9190610839905f60208501940190610819565b565b3461086b5761084b366004610452565b6108676108566114dd565b61085e610132565b91829182610826565b0390f35b610138565b906020828203126108a1575f82013567ffffffffffffffff811161089c576108989201610233565b9091565b610140565b61013c565b346108d5576108bf6108b9366004610870565b906114f2565b6108c7610132565b806108d1816101fa565b0390f35b610138565b906020828203126108f3576108f0915f01610551565b90565b61013c565b346109265761091061090b3660046108da565b611656565b610918610132565b80610922816101fa565b0390f35b610138565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461097f5761095f366004610452565b61097b61096a61092b565b610972610132565b918291826104a8565b0390f35b610138565b346109b25761099c6109973660046108da565b6116c6565b6109a4610132565b806109ae816101fa565b0390f35b610138565b5f80fd5b91906109d86109d23332908685919290919261128a565b15610715565b6109e7576109e592610a44565b565b5f631b8e828b60e31b8152806109ff600482016101fa565b0390fd5b610a0c90610621565b90565b604090610a3b610a30610a429597969460608401908482035f8601526103d3565b96602083019061049b565b019061049b565b565b90610a50903392610ef8565b914292610a92610a807f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610a03565b94610a89610132565b93849384610a0f565b0390a2565b90610aa292916109bb565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610b0f6032604092610aac565b610b1881610ab5565b0190565b610b319060208101905f818303910152610b02565b90565b15610b3b57565b610b43610132565b62461bcd60e51b815280610b5960048201610b1c565b0390fd5b90565b610b74610b6f610b7992610b5d565b610464565b61018f565b90565b6001610b88910161018f565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610bed570180359067ffffffffffffffff8211610be857602001916001820236038313610be357565b610ba7565b610ba3565b610b9f565b90821015610c0d576020610c099202810190610bab565b9091565b610b8b565b9190811015610c22576020020190565b610b8b565b35610c3181610192565b90565b9092610c41828590610aa4565b93610c6885610c62610c5c610c57888790610aa8565b61018f565b9161018f565b14610b34565b610c715f610b60565b5b80610c85610c7f8861018f565b9161018f565b1015610d2c57610cb390610ca9333290610ca188878691610bf2565b92909161128a565b610cb8575b610b7c565b610c72565b33610cce610cc887868591610bf2565b90610ef8565b90610ce3610cde89888691610c12565b610c27565b4292610d24610d127f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610a03565b94610d1b610132565b93849384610a0f565b0390a2610cae565b505050505050565b9190610d51610d4b3332908685919290919261128a565b15610715565b610d6057610d5e92610ddf565b565b5f631b8e828b60e31b815280610d78600482016101fa565b0390fd5b90825f939282370152565b9190610da181610d9a81610da6956103b5565b8095610d7c565b6103c9565b0190565b610dd6610dcb604093610ddd9698979560608501918583035f870152610d87565b96602083019061049b565b019061049b565b565b90913391929092610e2642610e147f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610a03565b95610e1d610132565b94859485610daa565b0390a2565b90610e369291610d34565b565b606090565b60ff60f81b1690565b60f81b90565b610e60610e5b610e6592610b5d565b610e46565b610e3d565b90565b90565b610e77610e7c91610e3d565b610e68565b9052565b905090565b909182610e9581610e9c93610e80565b8093610d7c565b0190565b80610eb1600192610eb89694610e6b565b0191610e85565b90565b634e487b7160e01b5f52604160045260245ffd5b90610ed9906103c9565b810190811067ffffffffffffffff821117610ef357604052565b610ebb565b610f3690610f04610e38565b50610f27610f115f610e4c565b9193610f1b610132565b94859360208501610ea0565b60208201810382520382610ecf565b90565b90610f55610f4f3332908585919290919261128a565b15610715565b610f6457610f6291610f9a565b565b5f631b8e828b60e31b815280610f7c600482016101fa565b0390fd5b9091610f979260208301925f818503910152610d87565b90565b339091610fc77f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610a03565b92610fdc610fd3610132565b92839283610f80565b0390a2565b90610feb91610f39565b565b90610fff91610ffa6116d1565b61110b565b565b60a01c90565b60ff1690565b61101961101e91611001565b611007565b90565b61102b905461100d565b90565b61104261103d61104792610b5d565b610464565b610526565b90565b6110539061102e565b90565b60a01b90565b9061106b60ff60a01b91611056565b9181191691161790565b61107e90610715565b90565b90565b906110996110946110a092611075565b611081565b825461105c565b9055565b6110ad90610605565b90565b6110b9906110a4565b90565b5f1b90565b906110d260018060a01b03916110bc565b9181191691161790565b6110e5906110a4565b90565b90565b906111006110fb611107926110dc565b6110e8565b82546110c1565b9055565b6111156001611021565b61117d578161113461112e6111295f61104a565b610531565b91610531565b146111615761115a61115361115f9361114e600180611084565b6110b0565b60016110eb565b6116c6565b565b5f632e7f3c7f60e11b815280611179600482016101fa565b0390fd5b5f62dc149f60e41b815280611194600482016101fa565b0390fd5b906111a291610fed565b565b6111ac6116d1565b6111b46111b6565b565b6111c76111c25f61104a565b611742565b565b6111d16111a4565b565b5f90565b5f1c90565b6111e86111ed916111d7565b6105c5565b90565b6111fa90546111dc565b90565b60e01b90565b61120c81610715565b0361121357565b5f80fd5b9050519061122482611203565b565b9060208282031261123f5761123c915f01611217565b90565b61013c565b61126a611277959394929461126060608401965f850190610819565b6020830190610819565b6040818503910152610d87565b90565b611282610132565b3d5f823e3d90fd5b926112cd6020939461129a6111d3565b506112d86112b06112ab60016111f0565b61062d565b93637a3979dc9295976112c1610132565b988997889687966111fd565b865260048601611244565b03915afa90811561131c575f916112ee575b5090565b61130f915060203d8111611315575b6113078183610ecf565b810190611226565b5f6112ea565b503d6112fd565b61127a565b9061133d6113373332908585919290919261128a565b15610715565b61134c5761134a91611368565b565b5f631b8e828b60e31b815280611364600482016101fa565b0390fd5b90611374903392610ef8565b906113b46113a27f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610a03565b926113ab610132565b91829182610404565b0390a2565b906113c391611321565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b6113ec6113f29193929361018f565b9261018f565b82039182116113fd57565b6113c9565b6114116114179193929361018f565b9261018f565b9161142383820261018f565b92818404149015171561143257565b6113c9565b916114406113c5565b508061145461144e8461018f565b9161018f565b11156114a85761147591611467916113dd565b61146f610483565b90611402565b806114886114828461018f565b9161018f565b101561149a57611497916113dd565b90565b50506114a55f610b60565b90565b505090565b5f90565b60018060a01b031690565b6114c86114cd916111d7565b6114b1565b90565b6114da90546114bc565b90565b6114e56114ad565b506114ef5f6114d0565b90565b6114fd818390610aa4565b916115075f610b60565b5b8061151b6115158661018f565b9161018f565b10156115ac576115499061153f33329061153787878691610bf2565b92909161128a565b61154e575b610b7c565b611508565b3361156461155e86868591610bf2565b90610ef8565b906115a46115927f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610a03565b9261159b610132565b91829182610404565b0390a2611544565b50505050565b6115c3906115be6116d1565b6115c5565b565b806115e06115da6115d55f61104a565b610531565b91610531565b1461163a576115f86115f1826110b0565b60016110eb565b6116227f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610a03565b9061162b610132565b80611635816101fa565b0390a2565b5f632e7f3c7f60e11b815280611652600482016101fa565b0390fd5b61165f906115b2565b565b6116729061166d6116d1565b611674565b565b8061168f6116896116845f61104a565b610531565b91610531565b1461169f5761169d90611742565b565b6116c26116ab5f61104a565b5f918291631e4fbdf760e01b835260048301610826565b0390fd5b6116cf90611661565b565b6116d96114dd565b6116f26116ec6116e76117a1565b610531565b91610531565b036116f957565b61171b6117046117a1565b5f91829163118cdaa760e01b835260048301610826565b0390fd5b90565b9061173761173261173e92610a03565b61171f565b82546110c1565b9055565b61174b5f6114d0565b611755825f611722565b906117896117837f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610a03565b91610a03565b91611792610132565b8061179c816101fa565b0390a3565b6117a96114ad565b50339056fea264697066735822122080ac9612c85cfe9dbb847936a455eda7937a00befc22204ad3ed7b7787fb7c8d64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\t\xB7V[a\0\x1D_5a\x01,V[\x80c\x05\x0E\xC18\x14a\x01'W\x80c\x11\x99/\x8C\x14a\x01\"W\x80c\x1C\x0Bcg\x14a\x01\x1DW\x80c6l\xBA\xB7\x14a\x01\x18W\x80c=D\xAE\x8B\x14a\x01\x13W\x80cF\xE2\xCC\t\x14a\x01\x0EW\x80cH\\\xC9U\x14a\x01\tW\x80c[<\xD6\xE2\x14a\x01\x04W\x80cqP\x18\xA6\x14a\0\xFFW\x80cz9y\xDC\x14a\0\xFAW\x80c\x80NQ#\x14a\0\xF5W\x80c\x83\xD3\xC1\x15\x14a\0\xF0W\x80c\x8D\xA5\xCB[\x14a\0\xEBW\x80c\xCD\xAF\xB9x\x14a\0\xE6W\x80c\xD4\xF0\xEBM\x14a\0\xE1W\x80c\xD8x\x13B\x14a\0\xDCWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\t\x84V[a\tOV[a\x08\xF8V[a\x08\xA6V[a\x08;V[a\x07\xE3V[a\x07uV[a\x07<V[a\x06\x90V[a\x06[V[a\x05\x8DV[a\x04\xF2V[a\x04\xBDV[a\x04\x1CV[a\x03GV[a\x03\x10V[a\x01\xFFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x8AW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x85W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x80WV[a\x01LV[a\x01HV[a\x01DV[\x90V[a\x01\x9B\x81a\x01\x8FV[\x03a\x01\xA2WV[_\x80\xFD[\x90P5\x90a\x01\xB3\x82a\x01\x92V[V[\x91`@\x83\x83\x03\x12a\x01\xF5W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xF0Wa\x01\xE2\x83a\x01\xED\x92\x86\x01a\x01PV[\x93\x90\x94` \x01a\x01\xA6V[\x90V[a\x01@V[a\x01<V[_\x01\x90V[4a\x02.Wa\x02\x18a\x02\x126`\x04a\x01\xB5V[\x91a\n\x97V[a\x02 a\x012V[\x80a\x02*\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02mW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02hW` \x01\x92` \x83\x02\x84\x01\x11a\x02cWV[a\x01LV[a\x01HV[a\x01DV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\xACW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xA7W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xA2WV[a\x01LV[a\x01HV[a\x01DV[\x90\x91`@\x82\x84\x03\x12a\x03\x0BW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x06W\x83a\x02\xDC\x91\x84\x01a\x023V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x01Wa\x02\xFD\x92\x01a\x02rV[\x90\x91V[a\x01@V[a\x01@V[a\x01<V[4a\x03BWa\x03,a\x03#6`\x04a\x02\xB1V[\x92\x91\x90\x91a\x0C4V[a\x034a\x012V[\x80a\x03>\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[4a\x03vWa\x03`a\x03Z6`\x04a\x01\xB5V[\x91a\x0E+V[a\x03ha\x012V[\x80a\x03r\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90` \x82\x82\x03\x12a\x03\xACW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xA7Wa\x03\xA3\x92\x01a\x01PV[\x90\x91V[a\x01@V[a\x01<V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x03\xF2a\x03\xFB` \x93a\x04\0\x93a\x03\xE9\x81a\x03\xB1V[\x93\x84\x80\x93a\x03\xB5V[\x95\x86\x91\x01a\x03\xBEV[a\x03\xC9V[\x01\x90V[a\x04\x19\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x03\xD3V[\x90V[4a\x04MWa\x04Ia\x048a\x0426`\x04a\x03{V[\x90a\x0E\xF8V[a\x04@a\x012V[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xF3[a\x018V[_\x91\x03\x12a\x04\\WV[a\x01<V[\x90V[\x90V[a\x04{a\x04va\x04\x80\x92a\x04aV[a\x04dV[a\x01\x8FV[\x90V[a\x04\x8D`\na\x04gV[\x90V[a\x04\x98a\x04\x83V[\x90V[a\x04\xA4\x90a\x01\x8FV[\x90RV[\x91\x90a\x04\xBB\x90_` \x85\x01\x94\x01\x90a\x04\x9BV[V[4a\x04\xEDWa\x04\xCD6`\x04a\x04RV[a\x04\xE9a\x04\xD8a\x04\x90V[a\x04\xE0a\x012V[\x91\x82\x91\x82a\x04\xA8V[\x03\x90\xF3[a\x018V[4a\x05!Wa\x05\x0Ba\x05\x056`\x04a\x03{V[\x90a\x0F\xE1V[a\x05\x13a\x012V[\x80a\x05\x1D\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05:\x90a\x05&V[\x90V[a\x05F\x81a\x051V[\x03a\x05MWV[_\x80\xFD[\x90P5\x90a\x05^\x82a\x05=V[V[\x91\x90`@\x83\x82\x03\x12a\x05\x88W\x80a\x05|a\x05\x85\x92_\x86\x01a\x05QV[\x93` \x01a\x05QV[\x90V[a\x01<V[4a\x05\xBCWa\x05\xA6a\x05\xA06`\x04a\x05`V[\x90a\x11\x98V[a\x05\xAEa\x012V[\x80a\x05\xB8\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xE0\x90`\x08a\x05\xE5\x93\x02a\x05\xC1V[a\x05\xC5V[\x90V[\x90a\x05\xF3\x91Ta\x05\xD0V[\x90V[a\x06\x02`\x01_\x90a\x05\xE8V[\x90V[a\x06\x19a\x06\x14a\x06\x1E\x92a\x05&V[a\x04dV[a\x05&V[\x90V[a\x06*\x90a\x06\x05V[\x90V[a\x066\x90a\x06!V[\x90V[a\x06B\x90a\x06-V[\x90RV[\x91\x90a\x06Y\x90_` \x85\x01\x94\x01\x90a\x069V[V[4a\x06\x8BWa\x06k6`\x04a\x04RV[a\x06\x87a\x06va\x05\xF6V[a\x06~a\x012V[\x91\x82\x91\x82a\x06FV[\x03\x90\xF3[a\x018V[4a\x06\xBEWa\x06\xA06`\x04a\x04RV[a\x06\xA8a\x11\xC9V[a\x06\xB0a\x012V[\x80a\x06\xBA\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x91``\x83\x83\x03\x12a\x07\x10Wa\x06\xDA\x82_\x85\x01a\x05QV[\x92a\x06\xE8\x83` \x83\x01a\x05QV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x0BWa\x07\x07\x92\x01a\x01PV[\x90\x91V[a\x01@V[a\x01<V[\x15\x15\x90V[a\x07#\x90a\x07\x15V[\x90RV[\x91\x90a\x07:\x90_` \x85\x01\x94\x01\x90a\x07\x1AV[V[4a\x07pWa\x07la\x07[a\x07R6`\x04a\x06\xC3V[\x92\x91\x90\x91a\x12\x8AV[a\x07ca\x012V[\x91\x82\x91\x82a\x07'V[\x03\x90\xF3[a\x018V[4a\x07\xA4Wa\x07\x8Ea\x07\x886`\x04a\x03{V[\x90a\x13\xB9V[a\x07\x96a\x012V[\x80a\x07\xA0\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90\x91``\x82\x84\x03\x12a\x07\xDEWa\x07\xDBa\x07\xC4\x84_\x85\x01a\x01\xA6V[\x93a\x07\xD2\x81` \x86\x01a\x01\xA6V[\x93`@\x01a\x01\xA6V[\x90V[a\x01<V[4a\x08\x14Wa\x08\x10a\x07\xFFa\x07\xF96`\x04a\x07\xA9V[\x91a\x147V[a\x08\x07a\x012V[\x91\x82\x91\x82a\x04\xA8V[\x03\x90\xF3[a\x018V[a\x08\"\x90a\x051V[\x90RV[\x91\x90a\x089\x90_` \x85\x01\x94\x01\x90a\x08\x19V[V[4a\x08kWa\x08K6`\x04a\x04RV[a\x08ga\x08Va\x14\xDDV[a\x08^a\x012V[\x91\x82\x91\x82a\x08&V[\x03\x90\xF3[a\x018V[\x90` \x82\x82\x03\x12a\x08\xA1W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x9CWa\x08\x98\x92\x01a\x023V[\x90\x91V[a\x01@V[a\x01<V[4a\x08\xD5Wa\x08\xBFa\x08\xB96`\x04a\x08pV[\x90a\x14\xF2V[a\x08\xC7a\x012V[\x80a\x08\xD1\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x90` \x82\x82\x03\x12a\x08\xF3Wa\x08\xF0\x91_\x01a\x05QV[\x90V[a\x01<V[4a\t&Wa\t\x10a\t\x0B6`\x04a\x08\xDAV[a\x16VV[a\t\x18a\x012V[\x80a\t\"\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\t\x7FWa\t_6`\x04a\x04RV[a\t{a\tja\t+V[a\tra\x012V[\x91\x82\x91\x82a\x04\xA8V[\x03\x90\xF3[a\x018V[4a\t\xB2Wa\t\x9Ca\t\x976`\x04a\x08\xDAV[a\x16\xC6V[a\t\xA4a\x012V[\x80a\t\xAE\x81a\x01\xFAV[\x03\x90\xF3[a\x018V[_\x80\xFD[\x91\x90a\t\xD8a\t\xD232\x90\x86\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\t\xE7Wa\t\xE5\x92a\nDV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\t\xFF`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[a\n\x0C\x90a\x06!V[\x90V[`@\x90a\n;a\n0a\nB\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x03\xD3V[\x96` \x83\x01\x90a\x04\x9BV[\x01\x90a\x04\x9BV[V[\x90a\nP\x903\x92a\x0E\xF8V[\x91B\x92a\n\x92a\n\x80\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\x03V[\x94a\n\x89a\x012V[\x93\x84\x93\x84a\n\x0FV[\x03\x90\xA2V[\x90a\n\xA2\x92\x91a\t\xBBV[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0B\x0F`2`@\x92a\n\xACV[a\x0B\x18\x81a\n\xB5V[\x01\x90V[a\x0B1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\x02V[\x90V[\x15a\x0B;WV[a\x0BCa\x012V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0BY`\x04\x82\x01a\x0B\x1CV[\x03\x90\xFD[\x90V[a\x0Bta\x0Boa\x0By\x92a\x0B]V[a\x04dV[a\x01\x8FV[\x90V[`\x01a\x0B\x88\x91\x01a\x01\x8FV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0B\xEDW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\xE8W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0B\xE3WV[a\x0B\xA7V[a\x0B\xA3V[a\x0B\x9FV[\x90\x82\x10\x15a\x0C\rW` a\x0C\t\x92\x02\x81\x01\x90a\x0B\xABV[\x90\x91V[a\x0B\x8BV[\x91\x90\x81\x10\x15a\x0C\"W` \x02\x01\x90V[a\x0B\x8BV[5a\x0C1\x81a\x01\x92V[\x90V[\x90\x92a\x0CA\x82\x85\x90a\n\xA4V[\x93a\x0Ch\x85a\x0Cba\x0C\\a\x0CW\x88\x87\x90a\n\xA8V[a\x01\x8FV[\x91a\x01\x8FV[\x14a\x0B4V[a\x0Cq_a\x0B`V[[\x80a\x0C\x85a\x0C\x7F\x88a\x01\x8FV[\x91a\x01\x8FV[\x10\x15a\r,Wa\x0C\xB3\x90a\x0C\xA932\x90a\x0C\xA1\x88\x87\x86\x91a\x0B\xF2V[\x92\x90\x91a\x12\x8AV[a\x0C\xB8W[a\x0B|V[a\x0CrV[3a\x0C\xCEa\x0C\xC8\x87\x86\x85\x91a\x0B\xF2V[\x90a\x0E\xF8V[\x90a\x0C\xE3a\x0C\xDE\x89\x88\x86\x91a\x0C\x12V[a\x0C'V[B\x92a\r$a\r\x12\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\n\x03V[\x94a\r\x1Ba\x012V[\x93\x84\x93\x84a\n\x0FV[\x03\x90\xA2a\x0C\xAEV[PPPPPPV[\x91\x90a\rQa\rK32\x90\x86\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\r`Wa\r^\x92a\r\xDFV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\rx`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r\xA1\x81a\r\x9A\x81a\r\xA6\x95a\x03\xB5V[\x80\x95a\r|V[a\x03\xC9V[\x01\x90V[a\r\xD6a\r\xCB`@\x93a\r\xDD\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\r\x87V[\x96` \x83\x01\x90a\x04\x9BV[\x01\x90a\x04\x9BV[V[\x90\x913\x91\x92\x90\x92a\x0E&Ba\x0E\x14\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\n\x03V[\x95a\x0E\x1Da\x012V[\x94\x85\x94\x85a\r\xAAV[\x03\x90\xA2V[\x90a\x0E6\x92\x91a\r4V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0E`a\x0E[a\x0Ee\x92a\x0B]V[a\x0EFV[a\x0E=V[\x90V[\x90V[a\x0Ewa\x0E|\x91a\x0E=V[a\x0EhV[\x90RV[\x90P\x90V[\x90\x91\x82a\x0E\x95\x81a\x0E\x9C\x93a\x0E\x80V[\x80\x93a\r|V[\x01\x90V[\x80a\x0E\xB1`\x01\x92a\x0E\xB8\x96\x94a\x0EkV[\x01\x91a\x0E\x85V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0E\xD9\x90a\x03\xC9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xF3W`@RV[a\x0E\xBBV[a\x0F6\x90a\x0F\x04a\x0E8V[Pa\x0F'a\x0F\x11_a\x0ELV[\x91\x93a\x0F\x1Ba\x012V[\x94\x85\x93` \x85\x01a\x0E\xA0V[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\xCFV[\x90V[\x90a\x0FUa\x0FO32\x90\x85\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\x0FdWa\x0Fb\x91a\x0F\x9AV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0F|`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90\x91a\x0F\x97\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\r\x87V[\x90V[3\x90\x91a\x0F\xC7\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\x03V[\x92a\x0F\xDCa\x0F\xD3a\x012V[\x92\x83\x92\x83a\x0F\x80V[\x03\x90\xA2V[\x90a\x0F\xEB\x91a\x0F9V[V[\x90a\x0F\xFF\x91a\x0F\xFAa\x16\xD1V[a\x11\x0BV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x10\x19a\x10\x1E\x91a\x10\x01V[a\x10\x07V[\x90V[a\x10+\x90Ta\x10\rV[\x90V[a\x10Ba\x10=a\x10G\x92a\x0B]V[a\x04dV[a\x05&V[\x90V[a\x10S\x90a\x10.V[\x90V[`\xA0\x1B\x90V[\x90a\x10k`\xFF`\xA0\x1B\x91a\x10VV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10~\x90a\x07\x15V[\x90V[\x90V[\x90a\x10\x99a\x10\x94a\x10\xA0\x92a\x10uV[a\x10\x81V[\x82Ta\x10\\V[\x90UV[a\x10\xAD\x90a\x06\x05V[\x90V[a\x10\xB9\x90a\x10\xA4V[\x90V[_\x1B\x90V[\x90a\x10\xD2`\x01\x80`\xA0\x1B\x03\x91a\x10\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xE5\x90a\x10\xA4V[\x90V[\x90V[\x90a\x11\0a\x10\xFBa\x11\x07\x92a\x10\xDCV[a\x10\xE8V[\x82Ta\x10\xC1V[\x90UV[a\x11\x15`\x01a\x10!V[a\x11}W\x81a\x114a\x11.a\x11)_a\x10JV[a\x051V[\x91a\x051V[\x14a\x11aWa\x11Za\x11Sa\x11_\x93a\x11N`\x01\x80a\x10\x84V[a\x10\xB0V[`\x01a\x10\xEBV[a\x16\xC6V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x11y`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x11\x94`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90a\x11\xA2\x91a\x0F\xEDV[V[a\x11\xACa\x16\xD1V[a\x11\xB4a\x11\xB6V[V[a\x11\xC7a\x11\xC2_a\x10JV[a\x17BV[V[a\x11\xD1a\x11\xA4V[V[_\x90V[_\x1C\x90V[a\x11\xE8a\x11\xED\x91a\x11\xD7V[a\x05\xC5V[\x90V[a\x11\xFA\x90Ta\x11\xDCV[\x90V[`\xE0\x1B\x90V[a\x12\x0C\x81a\x07\x15V[\x03a\x12\x13WV[_\x80\xFD[\x90PQ\x90a\x12$\x82a\x12\x03V[V[\x90` \x82\x82\x03\x12a\x12?Wa\x12<\x91_\x01a\x12\x17V[\x90V[a\x01<V[a\x12ja\x12w\x95\x93\x94\x92\x94a\x12```\x84\x01\x96_\x85\x01\x90a\x08\x19V[` \x83\x01\x90a\x08\x19V[`@\x81\x85\x03\x91\x01Ra\r\x87V[\x90V[a\x12\x82a\x012V[=_\x82>=\x90\xFD[\x92a\x12\xCD` \x93\x94a\x12\x9Aa\x11\xD3V[Pa\x12\xD8a\x12\xB0a\x12\xAB`\x01a\x11\xF0V[a\x06-V[\x93cz9y\xDC\x92\x95\x97a\x12\xC1a\x012V[\x98\x89\x97\x88\x96\x87\x96a\x11\xFDV[\x86R`\x04\x86\x01a\x12DV[\x03\x91Z\xFA\x90\x81\x15a\x13\x1CW_\x91a\x12\xEEW[P\x90V[a\x13\x0F\x91P` =\x81\x11a\x13\x15W[a\x13\x07\x81\x83a\x0E\xCFV[\x81\x01\x90a\x12&V[_a\x12\xEAV[P=a\x12\xFDV[a\x12zV[\x90a\x13=a\x13732\x90\x85\x85\x91\x92\x90\x91\x92a\x12\x8AV[\x15a\x07\x15V[a\x13LWa\x13J\x91a\x13hV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x13d`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[\x90a\x13t\x903\x92a\x0E\xF8V[\x90a\x13\xB4a\x13\xA2\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\x03V[\x92a\x13\xABa\x012V[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xA2V[\x90a\x13\xC3\x91a\x13!V[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\xECa\x13\xF2\x91\x93\x92\x93a\x01\x8FV[\x92a\x01\x8FV[\x82\x03\x91\x82\x11a\x13\xFDWV[a\x13\xC9V[a\x14\x11a\x14\x17\x91\x93\x92\x93a\x01\x8FV[\x92a\x01\x8FV[\x91a\x14#\x83\x82\x02a\x01\x8FV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x142WV[a\x13\xC9V[\x91a\x14@a\x13\xC5V[P\x80a\x14Ta\x14N\x84a\x01\x8FV[\x91a\x01\x8FV[\x11\x15a\x14\xA8Wa\x14u\x91a\x14g\x91a\x13\xDDV[a\x14oa\x04\x83V[\x90a\x14\x02V[\x80a\x14\x88a\x14\x82\x84a\x01\x8FV[\x91a\x01\x8FV[\x10\x15a\x14\x9AWa\x14\x97\x91a\x13\xDDV[\x90V[PPa\x14\xA5_a\x0B`V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x14\xC8a\x14\xCD\x91a\x11\xD7V[a\x14\xB1V[\x90V[a\x14\xDA\x90Ta\x14\xBCV[\x90V[a\x14\xE5a\x14\xADV[Pa\x14\xEF_a\x14\xD0V[\x90V[a\x14\xFD\x81\x83\x90a\n\xA4V[\x91a\x15\x07_a\x0B`V[[\x80a\x15\x1Ba\x15\x15\x86a\x01\x8FV[\x91a\x01\x8FV[\x10\x15a\x15\xACWa\x15I\x90a\x15?32\x90a\x157\x87\x87\x86\x91a\x0B\xF2V[\x92\x90\x91a\x12\x8AV[a\x15NW[a\x0B|V[a\x15\x08V[3a\x15da\x15^\x86\x86\x85\x91a\x0B\xF2V[\x90a\x0E\xF8V[\x90a\x15\xA4a\x15\x92\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\n\x03V[\x92a\x15\x9Ba\x012V[\x91\x82\x91\x82a\x04\x04V[\x03\x90\xA2a\x15DV[PPPPV[a\x15\xC3\x90a\x15\xBEa\x16\xD1V[a\x15\xC5V[V[\x80a\x15\xE0a\x15\xDAa\x15\xD5_a\x10JV[a\x051V[\x91a\x051V[\x14a\x16:Wa\x15\xF8a\x15\xF1\x82a\x10\xB0V[`\x01a\x10\xEBV[a\x16\"\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\n\x03V[\x90a\x16+a\x012V[\x80a\x165\x81a\x01\xFAV[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x16R`\x04\x82\x01a\x01\xFAV[\x03\x90\xFD[a\x16_\x90a\x15\xB2V[V[a\x16r\x90a\x16ma\x16\xD1V[a\x16tV[V[\x80a\x16\x8Fa\x16\x89a\x16\x84_a\x10JV[a\x051V[\x91a\x051V[\x14a\x16\x9FWa\x16\x9D\x90a\x17BV[V[a\x16\xC2a\x16\xAB_a\x10JV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x08&V[\x03\x90\xFD[a\x16\xCF\x90a\x16aV[V[a\x16\xD9a\x14\xDDV[a\x16\xF2a\x16\xECa\x16\xE7a\x17\xA1V[a\x051V[\x91a\x051V[\x03a\x16\xF9WV[a\x17\x1Ba\x17\x04a\x17\xA1V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x08&V[\x03\x90\xFD[\x90V[\x90a\x177a\x172a\x17>\x92a\n\x03V[a\x17\x1FV[\x82Ta\x10\xC1V[\x90UV[a\x17K_a\x14\xD0V[a\x17U\x82_a\x17\"V[\x90a\x17\x89a\x17\x83\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\n\x03V[\x91a\n\x03V[\x91a\x17\x92a\x012V[\x80a\x17\x9C\x81a\x01\xFAV[\x03\x90\xA3V[a\x17\xA9a\x14\xADV[P3\x90V\xFE\xA2dipfsX\"\x12 \x80\xAC\x96\x12\xC8\\\xFE\x9D\xBB\x84y6\xA4U\xED\xA7\x93z\0\xBE\xFC\" J\xD3\xED{w\x87\xFB|\x8DdsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrSenderNotAllowed()` and selector `0xdc741458`.
```solidity
error TransactionOrSenderNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrSenderNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrSenderNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrSenderNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrSenderNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrSenderNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrSenderNotAllowed()";
            const SELECTOR: [u8; 4] = [220u8, 116u8, 20u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed msgSender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_0 {
        #[allow(missing_docs)]
        pub msgSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_0 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    msgSender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.msgSender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.msgSender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes,uint256,uint256)` and selector `0x4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2`.
```solidity
event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_1 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                    originalPriority: data.1,
                    timestamp: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appchainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appchainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appchainId),
                )
            }
        }
    };
    /**Function with signature `PRIORITY_DECAY_RATE()` and selector `0x3d44ae8b`.
```solidity
function PRIORITY_DECAY_RATE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATECall {}
    ///Container type for the return parameters of the [`PRIORITY_DECAY_RATE()`](PRIORITY_DECAY_RATECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRIORITY_DECAY_RATECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRIORITY_DECAY_RATEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRIORITY_DECAY_RATE()";
            const SELECTOR: [u8; 4] = [61u8, 68u8, 174u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appchainId()` and selector `0xd8781342`.
```solidity
function appchainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdCall {}
    ///Container type for the return parameters of the [`appchainId()`](appchainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appchainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainId()";
            const SELECTOR: [u8; 4] = [216u8, 120u8, 19u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEffectivePriority(uint256,uint256,uint256)` and selector `0x83d3c115`.
```solidity
function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityCall {
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEffectivePriority(uint256,uint256,uint256)`](calculateEffectivePriorityCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityCall) -> Self {
                    (
                        value.originalPriority,
                        value.submittedTimestamp,
                        value.currentTimestamp,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        originalPriority: tuple.0,
                        submittedTimestamp: tuple.1,
                        currentTimestamp: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEffectivePriorityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEffectivePriorityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEffectivePriority(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 193u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.submittedTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prependZeroByte(bytes)` and selector `0x366cbab7`.
```solidity
function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteCall {
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`prependZeroByte(bytes)`](prependZeroByteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteCall> for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteCall) -> Self {
                    (value._data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prependZeroByteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for prependZeroByteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prependZeroByteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prependZeroByteReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prependZeroByte(bytes)";
            const SELECTOR: [u8; 4] = [54u8, 108u8, 186u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes,uint256)` and selector `0x1c0b6367`.
```solidity
function processTransaction(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes,uint256)`](processTransaction_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 11u8, 99u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransaction_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes,uint256)` and selector `0x050ec138`.
```solidity
function processTransactionUncompressed(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes,uint256)`](processTransactionUncompressed_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes,uint256)";
            const SELECTOR: [u8; 4] = [5u8, 14u8, 193u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressed_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[],uint256[])` and selector `0x11992f8c`.
```solidity
function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub priorities: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[],uint256[])`](processTransactionsBulk_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Call) -> Self {
                    (value.data, value.priorities)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priorities: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[],uint256[])";
            const SELECTOR: [u8; 4] = [17u8, 153u8, 47u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.priorities),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulk_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) function calls.
    pub enum SyndicateSequencingChainWithDecayingPriorityCalls {
        #[allow(missing_docs)]
        PRIORITY_DECAY_RATE(PRIORITY_DECAY_RATECall),
        #[allow(missing_docs)]
        appchainId(appchainIdCall),
        #[allow(missing_docs)]
        calculateEffectivePriority(calculateEffectivePriorityCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        prependZeroByte(prependZeroByteCall),
        #[allow(missing_docs)]
        processTransaction_0(processTransaction_0Call),
        #[allow(missing_docs)]
        processTransaction_1(processTransaction_1Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_0(processTransactionUncompressed_0Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_1(processTransactionUncompressed_1Call),
        #[allow(missing_docs)]
        processTransactionsBulk_0(processTransactionsBulk_0Call),
        #[allow(missing_docs)]
        processTransactionsBulk_1(processTransactionsBulk_1Call),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 14u8, 193u8, 56u8],
            [17u8, 153u8, 47u8, 140u8],
            [28u8, 11u8, 99u8, 103u8],
            [54u8, 108u8, 186u8, 183u8],
            [61u8, 68u8, 174u8, 139u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [128u8, 78u8, 81u8, 35u8],
            [131u8, 211u8, 193u8, 21u8],
            [141u8, 165u8, 203u8, 91u8],
            [205u8, 175u8, 185u8, 120u8],
            [212u8, 240u8, 235u8, 77u8],
            [216u8, 120u8, 19u8, 66u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityCalls {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 17usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::PRIORITY_DECAY_RATE(_) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainId(_) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEffectivePriority(_) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prependZeroByte(_) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_0(_) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_1(_) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_0(_) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_1(_) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_0(_) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_1(_) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityCalls,
            >] = &[
                {
                    fn processTransactionUncompressed_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_0,
                            )
                    }
                    processTransactionUncompressed_0
                },
                {
                    fn processTransactionsBulk_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_0,
                            )
                    }
                    processTransactionsBulk_0
                },
                {
                    fn processTransaction_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_0,
                            )
                    }
                    processTransaction_0
                },
                {
                    fn prependZeroByte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <prependZeroByteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::prependZeroByte,
                            )
                    }
                    prependZeroByte
                },
                {
                    fn PRIORITY_DECAY_RATE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::PRIORITY_DECAY_RATE,
                            )
                    }
                    PRIORITY_DECAY_RATE
                },
                {
                    fn processTransaction_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_1,
                            )
                    }
                    processTransaction_1
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::initialize,
                            )
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::isAllowed,
                            )
                    }
                    isAllowed
                },
                {
                    fn processTransactionUncompressed_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_1,
                            )
                    }
                    processTransactionUncompressed_1
                },
                {
                    fn calculateEffectivePriority(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::calculateEffectivePriority,
                            )
                    }
                    calculateEffectivePriority
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::owner,
                            )
                    }
                    owner
                },
                {
                    fn processTransactionsBulk_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_1,
                            )
                    }
                    processTransactionsBulk_1
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn appchainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <appchainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::appchainId,
                            )
                    }
                    appchainId
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) custom errors.
    pub enum SyndicateSequencingChainWithDecayingPriorityErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrSenderNotAllowed(TransactionOrSenderNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [220u8, 116u8, 20u8, 88u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityErrors {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrSenderNotAllowed(_) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityErrors,
            >] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrSenderNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::TransactionOrSenderNotAllowed,
                            )
                    }
                    TransactionOrSenderNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) events.
    pub enum SyndicateSequencingChainWithDecayingPriorityEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed_0(TransactionProcessed_0),
        #[allow(missing_docs)]
        TransactionProcessed_1(TransactionProcessed_1),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_0)
                }
                Some(
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_1)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        >,
    > {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy(provider, _appchainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appchainId)
    }
    /**A [`SyndicateSequencingChainWithDecayingPriority`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChainWithDecayingPriority`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainWithDecayingPriorityInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainWithDecayingPriorityInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _appchainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appchainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
            SyndicateSequencingChainWithDecayingPriorityInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`PRIORITY_DECAY_RATE`] function.
        pub fn PRIORITY_DECAY_RATE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRIORITY_DECAY_RATECall, N> {
            self.call_builder(&PRIORITY_DECAY_RATECall {})
        }
        ///Creates a new call builder for the [`appchainId`] function.
        pub fn appchainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appchainIdCall, N> {
            self.call_builder(&appchainIdCall {})
        }
        ///Creates a new call builder for the [`calculateEffectivePriority`] function.
        pub fn calculateEffectivePriority(
            &self,
            originalPriority: alloy::sol_types::private::primitives::aliases::U256,
            submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
            currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEffectivePriorityCall, N> {
            self.call_builder(
                &calculateEffectivePriorityCall {
                    originalPriority,
                    submittedTimestamp,
                    currentTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`prependZeroByte`] function.
        pub fn prependZeroByte(
            &self,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, prependZeroByteCall, N> {
            self.call_builder(&prependZeroByteCall { _data })
        }
        ///Creates a new call builder for the [`processTransaction_0`] function.
        pub fn processTransaction_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_0Call, N> {
            self.call_builder(
                &processTransaction_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_1`] function.
        pub fn processTransaction_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_1Call, N> {
            self.call_builder(&processTransaction_1Call { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_0`] function.
        pub fn processTransactionUncompressed_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_0Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_1`] function.
        pub fn processTransactionUncompressed_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_1Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_0`] function.
        pub fn processTransactionsBulk_0(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            priorities: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_0Call, N> {
            self.call_builder(
                &processTransactionsBulk_0Call {
                    data,
                    priorities,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_1`] function.
        pub fn processTransactionsBulk_1(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_1Call, N> {
            self.call_builder(
                &processTransactionsBulk_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_0`] event.
        pub fn TransactionProcessed_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_0, N> {
            self.event_filter::<TransactionProcessed_0>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_1`] event.
        pub fn TransactionProcessed_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_1, N> {
            self.event_filter::<TransactionProcessed_1>()
        }
    }
}
