/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChainWithDecayingPriority {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrSenderNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);
    event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);

    constructor(uint256 _appchainId);

    function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
    function PRIORITY_DECAY_RATE() external view returns (uint256);
    function accumulator() external view returns (bytes32);
    function appchainId() external view returns (uint256);
    function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
    function processTransaction(bytes memory data, uint256 priority) external;
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data, uint256 priority) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ACCUMULATOR_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "PRIORITY_DECAY_RATE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "accumulator",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appchainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEffectivePriority",
    "inputs": [
      {
        "name": "originalPriority",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "submittedTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prependZeroByte",
    "inputs": [
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "priorities",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "originalPriority",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrSenderNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChainWithDecayingPriority {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60c060405234610041576100196100146100f2565b610113565b610021610046565b611c4a6106908239608051816119ae015260a05181610a370152611c4a90f35b61004c565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007890610050565b810190811060018060401b0382111761009057604052565b61005a565b906100a86100a1610046565b928361006e565b565b5f80fd5b90565b6100ba816100ae565b036100c157565b5f80fd5b905051906100d2826100b1565b565b906020828203126100ed576100ea915f016100c5565b90565b6100aa565b6101106124998038038061010581610095565b9283398101906100d4565b90565b61011c906101cb565b565b90565b90565b61013861013361013d9261011e565b610121565b6100ae565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b61017d6018602092610140565b61018681610149565b0190565b61019f9060208101905f818303910152610170565b90565b156101a957565b6101b1610046565b62461bcd60e51b8152806101c76004820161018a565b0390fd5b6101d3610308565b6101f0816101e96101e35f610124565b916100ae565b14156101a2565b60a052565b60018060a01b031690565b61021461020f610219926101f5565b610121565b6101f5565b90565b61022590610200565b90565b6102319061021c565b90565b61023e6064610228565b90565b61024a90610200565b90565b61025690610241565b90565b151590565b6102689051610259565b90565b60e01b90565b5f0190565b61027e610046565b3d5f823e3d90fd5b5f7f61726273797320707265636f6d70696c65206661696c65640000000000000000910152565b6102ba6018602092610140565b6102c381610286565b0190565b6102dc9060208101905f8183039101526102ad565b90565b156102e657565b6102ee610046565b62461bcd60e51b815280610304600482016102c7565b0390fd5b6103106104b0565b61032061031b610234565b61024d565b3b61033361032d5f610124565b916100ae565b1160805261034a610344608061025e565b15610259565b801561035c575b61035a906102df565b565b50610388602061037261036d610234565b61024d565b63a3b1b31d90610380610046565b93849261026b565b8252818061039860048201610271565b03915afa80156103f65761035a915f916103c8575b506103c06103ba5f610124565b916100ae565b119050610351565b6103e9915060203d81116103ef575b6103e1818361006e565b8101906100d4565b5f6103ad565b503d6103d7565b610276565b60a01b90565b9061041060ff60a01b916103fb565b9181191691161790565b61042390610259565b90565b90565b9061043e6104396104459261041a565b610426565b8254610401565b9055565b61045290610200565b90565b61045e90610449565b90565b5f1b90565b9061047760018060a01b0391610461565b9181191691161790565b61048a90610449565b90565b90565b906104a56104a06104ac92610481565b61048d565b8254610466565b9055565b6104b93361051d565b6104c45f6001610429565b6104cc610046565b6101bf810181811060018060401b03821117610518576104f482916101bf6122da8439610271565b03905ff080156105135761050a61051191610455565b6001610490565b565b610276565b61005a565b6105269061057e565b565b61053c6105376105419261011e565b610121565b6101f5565b90565b61054d90610528565b90565b610559906101f5565b90565b61056590610550565b9052565b919061057c905f6020850194019061055c565b565b8061059961059361058e5f610544565b610550565b91610550565b146105a9576105a790610630565b565b6105cc6105b55f610544565b5f918291631e4fbdf760e01b835260048301610569565b0390fd5b5f1c90565b60018060a01b031690565b6105ec6105f1916105d0565b6105d5565b90565b6105fe90546105e0565b90565b61060a90610241565b90565b90565b9061062561062061062c92610601565b61060d565b8254610466565b9055565b6106395f6105f4565b610643825f610610565b906106776106717f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610601565b91610601565b91610680610046565b8061068a81610271565b0390a356fe60806040526004361015610013575b610ac1565b61001d5f3561014c565b80630338115414610147578063050ec1381461014257806311992f8c1461013d5780631c0b636714610138578063366cbab7146101335780633d44ae8b1461012e57806346e2cc0914610129578063485cc955146101245780635b3cd6e21461011f57806363d964371461011a578063715018a6146101155780637a3979dc14610110578063804e51231461010b57806383d3c115146101065780638da5cb5b14610101578063cdafb978146100fc578063d4f0eb4d146100f7578063d8781342146100f25763f2fde38b0361000e57610a8e565b610a59565b610a02565b6109b0565b610945565b6108ed565b61087f565b610846565b61079a565b610765565b6106d5565b610607565b61056c565b610537565b6104a5565b6103d0565b610399565b610288565b610194565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261016a57565b61015c565b90565b61017b9061016f565b9052565b9190610192905f60208501940190610172565b565b346101c4576101a4366004610160565b6101c06101af610af2565b6101b7610152565b9182918261017f565b0390f35b610158565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102135781359167ffffffffffffffff831161020e57602001926001830284011161020957565b6101d5565b6101d1565b6101cd565b90565b61022481610218565b0361022b57565b5f80fd5b9050359061023c8261021b565b565b9160408383031261027e575f83013567ffffffffffffffff81116102795761026b836102769286016101d9565b93909460200161022f565b90565b6101c9565b61015c565b5f0190565b346102b7576102a161029b36600461023e565b91610bec565b6102a9610152565b806102b381610283565b0390f35b610158565b909182601f830112156102f65781359167ffffffffffffffff83116102f15760200192602083028401116102ec57565b6101d5565b6101d1565b6101cd565b909182601f830112156103355781359167ffffffffffffffff831161033057602001926020830284011161032b57565b6101d5565b6101d1565b6101cd565b9091604082840312610394575f82013567ffffffffffffffff811161038f57836103659184016102bc565b929093602082013567ffffffffffffffff811161038a5761038692016102fb565b9091565b6101c9565b6101c9565b61015c565b346103cb576103b56103ac36600461033a565b92919091610d89565b6103bd610152565b806103c781610283565b0390f35b610158565b346103ff576103e96103e336600461023e565b91610f80565b6103f1610152565b806103fb81610283565b0390f35b610158565b90602082820312610435575f82013567ffffffffffffffff81116104305761042c92016101d9565b9091565b6101c9565b61015c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61047b610484602093610489936104728161043a565b9384809361043e565b95869101610447565b610452565b0190565b6104a29160208201915f81840391015261045c565b90565b346104d6576104d26104c16104bb366004610404565b9061104d565b6104c9610152565b9182918261048d565b0390f35b610158565b90565b90565b6104f56104f06104fa926104db565b6104de565b610218565b90565b610507600a6104e1565b90565b6105126104fd565b90565b61051e90610218565b9052565b9190610535905f60208501940190610515565b565b3461056757610547366004610160565b61056361055261050a565b61055a610152565b91829182610522565b0390f35b610158565b3461059b5761058561057f366004610404565b90611169565b61058d610152565b8061059781610283565b0390f35b610158565b60018060a01b031690565b6105b4906105a0565b90565b6105c0816105ab565b036105c757565b5f80fd5b905035906105d8826105b7565b565b919060408382031261060257806105f66105ff925f86016105cb565b936020016105cb565b90565b61015c565b346106365761062061061a3660046105da565b9061131b565b610628610152565b8061063281610283565b0390f35b610158565b1c90565b60018060a01b031690565b61065a90600861065f930261063b565b61063f565b90565b9061066d915461064a565b90565b61067c60015f90610662565b90565b61069361068e610698926105a0565b6104de565b6105a0565b90565b6106a49061067f565b90565b6106b09061069b565b90565b6106bc906106a7565b9052565b91906106d3905f602085019401906106b3565b565b34610705576106e5366004610160565b6107016106f0610670565b6106f8610152565b918291826106c0565b0390f35b610158565b90565b5f1b90565b61072661072161072b9261070a565b61070d565b61016f565b90565b6107577f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b90610712565b90565b61076261072e565b90565b3461079557610775366004610160565b61079161078061075a565b610788610152565b9182918261017f565b0390f35b610158565b346107c8576107aa366004610160565b6107b261134c565b6107ba610152565b806107c481610283565b0390f35b610158565b9160608383031261081a576107e4825f85016105cb565b926107f283602083016105cb565b92604082013567ffffffffffffffff81116108155761081192016101d9565b9091565b6101c9565b61015c565b151590565b61082d9061081f565b9052565b9190610844905f60208501940190610824565b565b3461087a5761087661086561085c3660046107cd565b92919091611408565b61086d610152565b91829182610831565b0390f35b610158565b346108ae57610898610892366004610404565b906114fa565b6108a0610152565b806108aa81610283565b0390f35b610158565b90916060828403126108e8576108e56108ce845f850161022f565b936108dc816020860161022f565b9360400161022f565b90565b61015c565b3461091e5761091a6109096109033660046108b3565b91611578565b610911610152565b91829182610522565b0390f35b610158565b61092c906105ab565b9052565b9190610943905f60208501940190610923565b565b3461097557610955366004610160565b61097161096061161e565b610968610152565b91829182610930565b0390f35b610158565b906020828203126109ab575f82013567ffffffffffffffff81116109a6576109a292016102bc565b9091565b6101c9565b61015c565b346109df576109c96109c336600461097a565b90611633565b6109d1610152565b806109db81610283565b0390f35b610158565b906020828203126109fd576109fa915f016105cb565b90565b61015c565b34610a3057610a1a610a153660046109e4565b61175b565b610a22610152565b80610a2c81610283565b0390f35b610158565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610a8957610a69366004610160565b610a85610a74610a35565b610a7c610152565b91829182610522565b0390f35b610158565b34610abc57610aa6610aa13660046109e4565b6117cb565b610aae610152565b80610ab881610283565b0390f35b610158565b5f80fd5b5f90565b5f1c90565b90565b610add610ae291610ac9565b610ace565b90565b610aef9054610ad1565b90565b610afa610ac5565b50610b0d5f610b076117d6565b01610ae5565b90565b9190610b2d610b2733329086859192909192611408565b1561081f565b610b3c57610b3a92610b99565b565b5f631b8e828b60e31b815280610b5460048201610283565b0390fd5b610b619061069b565b90565b604090610b90610b85610b979597969460608401908482035f86015261045c565b966020830190610515565b0190610515565b565b90610ba590339261104d565b914292610be7610bd57f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b58565b94610bde610152565b93849384610b64565b0390a2565b90610bf79291610b10565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610c646032604092610c01565b610c6d81610c0a565b0190565b610c869060208101905f818303910152610c57565b90565b15610c9057565b610c98610152565b62461bcd60e51b815280610cae60048201610c71565b0390fd5b90565b610cc9610cc4610cce92610cb2565b6104de565b610218565b90565b6001610cdd9101610218565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610d42570180359067ffffffffffffffff8211610d3d57602001916001820236038313610d3857565b610cfc565b610cf8565b610cf4565b90821015610d62576020610d5e9202810190610d00565b9091565b610ce0565b9190811015610d77576020020190565b610ce0565b35610d868161021b565b90565b9092610d96828590610bf9565b93610dbd85610db7610db1610dac888790610bfd565b610218565b91610218565b14610c89565b610dc65f610cb5565b5b80610dda610dd488610218565b91610218565b1015610e8157610e0890610dfe333290610df688878691610d47565b929091611408565b610e0d575b610cd1565b610dc7565b33610e23610e1d87868591610d47565b9061104d565b90610e38610e3389888691610d67565b610d7c565b4292610e79610e677f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b58565b94610e70610152565b93849384610b64565b0390a2610e03565b505050505050565b9190610ea6610ea033329086859192909192611408565b1561081f565b610eb557610eb392610f34565b565b5f631b8e828b60e31b815280610ecd60048201610283565b0390fd5b90825f939282370152565b9190610ef681610eef81610efb9561043e565b8095610ed1565b610452565b0190565b610f2b610f20604093610f329698979560608501918583035f870152610edc565b966020830190610515565b0190610515565b565b90913391929092610f7b42610f697f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610b58565b95610f72610152565b94859485610eff565b0390a2565b90610f8b9291610e89565b565b606090565b60ff60f81b1690565b60f81b90565b610fb5610fb0610fba92610cb2565b610f9b565b610f92565b90565b90565b610fcc610fd191610f92565b610fbd565b9052565b905090565b909182610fea81610ff193610fd5565b8093610ed1565b0190565b8061100660019261100d9694610fc0565b0191610fda565b90565b634e487b7160e01b5f52604160045260245ffd5b9061102e90610452565b810190811067ffffffffffffffff82111761104857604052565b611010565b61108b90611059610f8d565b5061107c6110665f610fa1565b9193611070610152565b94859360208501610ff5565b60208201810382520382611024565b90565b906110aa6110a433329085859192909192611408565b1561081f565b6110b9576110b791611155565b565b5f631b8e828b60e31b8152806110d160048201610283565b0390fd5b5f80fd5b906110ec6110e5610152565b9283611024565b565b67ffffffffffffffff811161110c57611108602091610452565b0190565b611010565b90929192611126611121826110ee565b6110d9565b938185526020850190828401116111425761114092610ed1565b565b6110d5565b611152913691611111565b90565b6111679161116291611147565b6119a3565b565b906111739161108e565b565b9061118791611182611b6d565b61128e565b565b60a01c90565b60ff1690565b6111a16111a691611189565b61118f565b90565b6111b39054611195565b90565b6111ca6111c56111cf92610cb2565b6104de565b6105a0565b90565b6111db906111b6565b90565b60a01b90565b906111f360ff60a01b916111de565b9181191691161790565b6112069061081f565b90565b90565b9061122161121c611228926111fd565b611209565b82546111e4565b9055565b6112359061067f565b90565b6112419061122c565b90565b9061125560018060a01b039161070d565b9181191691161790565b6112689061122c565b90565b90565b9061128361127e61128a9261125f565b61126b565b8254611244565b9055565b61129860016111a9565b61130057816112b76112b16112ac5f6111d2565b6105ab565b916105ab565b146112e4576112dd6112d66112e2936112d160018061120c565b611238565b600161126e565b6117cb565b565b5f632e7f3c7f60e11b8152806112fc60048201610283565b0390fd5b5f62dc149f60e41b81528061131760048201610283565b0390fd5b9061132591611175565b565b61132f611b6d565b611337611339565b565b61134a6113455f6111d2565b611bde565b565b611354611327565b565b5f90565b61136661136b91610ac9565b61063f565b90565b611378905461135a565b90565b60e01b90565b61138a8161081f565b0361139157565b5f80fd5b905051906113a282611381565b565b906020828203126113bd576113ba915f01611395565b90565b61015c565b6113e86113f595939492946113de60608401965f850190610923565b6020830190610923565b6040818503910152610edc565b90565b611400610152565b3d5f823e3d90fd5b9261144b60209394611418611356565b5061145661142e611429600161136e565b6106a7565b93637a3979dc92959761143f610152565b9889978896879661137b565b8652600486016113c2565b03915afa90811561149a575f9161146c575b5090565b61148d915060203d8111611493575b6114858183611024565b8101906113a4565b5f611468565b503d61147b565b6113f8565b906114bb6114b533329085859192909192611408565b1561081f565b6114ca576114c8916114e6565b565b5f631b8e828b60e31b8152806114e260048201610283565b0390fd5b6114f8916114f39161104d565b6119a3565b565b906115049161149f565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61152d61153391939293610218565b92610218565b820391821161153e57565b61150a565b61155261155891939293610218565b92610218565b91611564838202610218565b92818404149015171561157357565b61150a565b91611581611506565b508061159561158f84610218565b91610218565b11156115e9576115b6916115a89161151e565b6115b06104fd565b90611543565b806115c96115c384610218565b91610218565b10156115db576115d89161151e565b90565b50506115e65f610cb5565b90565b505090565b5f90565b60018060a01b031690565b61160961160e91610ac9565b6115f2565b90565b61161b90546115fd565b90565b6116266115ee565b506116305f611611565b90565b61163e818390610bf9565b916116485f610cb5565b5b8061165c61165686610218565b91610218565b10156116b15761168a9061168033329061167887878691610d47565b929091611408565b61168f575b610cd1565b611649565b6116ac6116a76116a186868591610d47565b9061104d565b6119a3565b611685565b50505050565b6116c8906116c3611b6d565b6116ca565b565b806116e56116df6116da5f6111d2565b6105ab565b916105ab565b1461173f576116fd6116f682611238565b600161126e565b6117277f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610b58565b90611730610152565b8061173a81610283565b0390a2565b5f632e7f3c7f60e11b81528061175760048201610283565b0390fd5b611764906116b7565b565b61177790611772611b6d565b611779565b565b8061179461178e6117895f6111d2565b6105ab565b916105ab565b146117a4576117a290611bde565b565b6117c76117b05f6111d2565b5f918291631e4fbdf760e01b835260048301610930565b0390fd5b6117d490611766565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61181f61181a61182492610218565b6104de565b6117fe565b90565b6118309061067f565b90565b61183c90611827565b90565b6118496064611833565b90565b6118559061069b565b90565b905051906118658261021b565b565b906020828203126118805761187d915f01611858565b90565b61015c565b60200190565b60601b90565b61189a9061188b565b90565b6118a690611891565b90565b6118b56118ba916105ab565b61189d565b9052565b60c01b90565b6118cd906118be565b90565b6118dc6118e1916117fe565b6118c4565b9052565b90565b6118f46118f99161016f565b6118e5565b9052565b9261192b60086119339461192360148861191b60209b9a86996118a9565b0180926118d0565b0180926118d0565b0180926118e8565b0190565b602081611949611951938396956118e8565b0180926118e8565b0190565b906119615f199161070d565b9181191691161790565b6119749061016f565b90565b61198090610ac9565b90565b9061199861199361199f9261196b565b611977565b8254611955565b9055565b6119ab6117fa565b507f00000000000000000000000000000000000000000000000000000000000000005f14611b5c576119fe60206119e86119e361183f565b61184c565b63a3b1b31d906119f6610152565b93849261137b565b82528180611a0e60048201610283565b03915afa908115611b5757611ae491611a2e915f91611b29575b5061180b565b5b5f611a386117d6565b91611aca611a47838501610ae5565b91611a9033611a81611a584261180b565b8a611a6b611a658261043a565b91611885565b2090611a75610152565b958694602086016118fd565b60208201810382520382611024565b611aa2611a9c8261043a565b91611885565b2091611abb611aaf610152565b93849260208401611937565b60208201810382520382611024565b611adc611ad68261043a565b91611885565b209101611983565b33611b24611b127f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610b58565b92611b1b610152565b9182918261048d565b0390a2565b611b4a915060203d8111611b50575b611b428183611024565b810190611867565b5f611a28565b503d611b38565b6113f8565b611ae4611b684361180b565b611a2f565b611b7561161e565b611b8e611b88611b83611c3d565b6105ab565b916105ab565b03611b9557565b611bb7611ba0611c3d565b5f91829163118cdaa760e01b835260048301610930565b0390fd5b90565b90611bd3611bce611bda92610b58565b611bbb565b8254611244565b9055565b611be75f611611565b611bf1825f611bbe565b90611c25611c1f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610b58565b91610b58565b91611c2e610152565b80611c3881610283565b0390a3565b611c456115ee565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xC0`@R4a\0AWa\0\x19a\0\x14a\0\xF2V[a\x01\x13V[a\0!a\0FV[a\x1CJa\x06\x90\x829`\x80Q\x81a\x19\xAE\x01R`\xA0Q\x81a\n7\x01Ra\x1CJ\x90\xF3[a\0LV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0x\x90a\0PV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x90W`@RV[a\0ZV[\x90a\0\xA8a\0\xA1a\0FV[\x92\x83a\0nV[V[_\x80\xFD[\x90V[a\0\xBA\x81a\0\xAEV[\x03a\0\xC1WV[_\x80\xFD[\x90PQ\x90a\0\xD2\x82a\0\xB1V[V[\x90` \x82\x82\x03\x12a\0\xEDWa\0\xEA\x91_\x01a\0\xC5V[\x90V[a\0\xAAV[a\x01\x10a$\x99\x808\x03\x80a\x01\x05\x81a\0\x95V[\x92\x839\x81\x01\x90a\0\xD4V[\x90V[a\x01\x1C\x90a\x01\xCBV[V[\x90V[\x90V[a\x018a\x013a\x01=\x92a\x01\x1EV[a\x01!V[a\0\xAEV[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01}`\x18` \x92a\x01@V[a\x01\x86\x81a\x01IV[\x01\x90V[a\x01\x9F\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01pV[\x90V[\x15a\x01\xA9WV[a\x01\xB1a\0FV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xC7`\x04\x82\x01a\x01\x8AV[\x03\x90\xFD[a\x01\xD3a\x03\x08V[a\x01\xF0\x81a\x01\xE9a\x01\xE3_a\x01$V[\x91a\0\xAEV[\x14\x15a\x01\xA2V[`\xA0RV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02\x14a\x02\x0Fa\x02\x19\x92a\x01\xF5V[a\x01!V[a\x01\xF5V[\x90V[a\x02%\x90a\x02\0V[\x90V[a\x021\x90a\x02\x1CV[\x90V[a\x02>`da\x02(V[\x90V[a\x02J\x90a\x02\0V[\x90V[a\x02V\x90a\x02AV[\x90V[\x15\x15\x90V[a\x02h\x90Qa\x02YV[\x90V[`\xE0\x1B\x90V[_\x01\x90V[a\x02~a\0FV[=_\x82>=\x90\xFD[_\x7Farbsys precompile failed\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xBA`\x18` \x92a\x01@V[a\x02\xC3\x81a\x02\x86V[\x01\x90V[a\x02\xDC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xADV[\x90V[\x15a\x02\xE6WV[a\x02\xEEa\0FV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x03\x04`\x04\x82\x01a\x02\xC7V[\x03\x90\xFD[a\x03\x10a\x04\xB0V[a\x03 a\x03\x1Ba\x024V[a\x02MV[;a\x033a\x03-_a\x01$V[\x91a\0\xAEV[\x11`\x80Ra\x03Ja\x03D`\x80a\x02^V[\x15a\x02YV[\x80\x15a\x03\\W[a\x03Z\x90a\x02\xDFV[V[Pa\x03\x88` a\x03ra\x03ma\x024V[a\x02MV[c\xA3\xB1\xB3\x1D\x90a\x03\x80a\0FV[\x93\x84\x92a\x02kV[\x82R\x81\x80a\x03\x98`\x04\x82\x01a\x02qV[\x03\x91Z\xFA\x80\x15a\x03\xF6Wa\x03Z\x91_\x91a\x03\xC8W[Pa\x03\xC0a\x03\xBA_a\x01$V[\x91a\0\xAEV[\x11\x90Pa\x03QV[a\x03\xE9\x91P` =\x81\x11a\x03\xEFW[a\x03\xE1\x81\x83a\0nV[\x81\x01\x90a\0\xD4V[_a\x03\xADV[P=a\x03\xD7V[a\x02vV[`\xA0\x1B\x90V[\x90a\x04\x10`\xFF`\xA0\x1B\x91a\x03\xFBV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04#\x90a\x02YV[\x90V[\x90V[\x90a\x04>a\x049a\x04E\x92a\x04\x1AV[a\x04&V[\x82Ta\x04\x01V[\x90UV[a\x04R\x90a\x02\0V[\x90V[a\x04^\x90a\x04IV[\x90V[_\x1B\x90V[\x90a\x04w`\x01\x80`\xA0\x1B\x03\x91a\x04aV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\x8A\x90a\x04IV[\x90V[\x90V[\x90a\x04\xA5a\x04\xA0a\x04\xAC\x92a\x04\x81V[a\x04\x8DV[\x82Ta\x04fV[\x90UV[a\x04\xB93a\x05\x1DV[a\x04\xC4_`\x01a\x04)V[a\x04\xCCa\0FV[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x05\x18Wa\x04\xF4\x82\x91a\x01\xBFa\"\xDA\x849a\x02qV[\x03\x90_\xF0\x80\x15a\x05\x13Wa\x05\na\x05\x11\x91a\x04UV[`\x01a\x04\x90V[V[a\x02vV[a\0ZV[a\x05&\x90a\x05~V[V[a\x05<a\x057a\x05A\x92a\x01\x1EV[a\x01!V[a\x01\xF5V[\x90V[a\x05M\x90a\x05(V[\x90V[a\x05Y\x90a\x01\xF5V[\x90V[a\x05e\x90a\x05PV[\x90RV[\x91\x90a\x05|\x90_` \x85\x01\x94\x01\x90a\x05\\V[V[\x80a\x05\x99a\x05\x93a\x05\x8E_a\x05DV[a\x05PV[\x91a\x05PV[\x14a\x05\xA9Wa\x05\xA7\x90a\x060V[V[a\x05\xCCa\x05\xB5_a\x05DV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05iV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xECa\x05\xF1\x91a\x05\xD0V[a\x05\xD5V[\x90V[a\x05\xFE\x90Ta\x05\xE0V[\x90V[a\x06\n\x90a\x02AV[\x90V[\x90V[\x90a\x06%a\x06 a\x06,\x92a\x06\x01V[a\x06\rV[\x82Ta\x04fV[\x90UV[a\x069_a\x05\xF4V[a\x06C\x82_a\x06\x10V[\x90a\x06wa\x06q\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x06\x01V[\x91a\x06\x01V[\x91a\x06\x80a\0FV[\x80a\x06\x8A\x81a\x02qV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\n\xC1V[a\0\x1D_5a\x01LV[\x80c\x038\x11T\x14a\x01GW\x80c\x05\x0E\xC18\x14a\x01BW\x80c\x11\x99/\x8C\x14a\x01=W\x80c\x1C\x0Bcg\x14a\x018W\x80c6l\xBA\xB7\x14a\x013W\x80c=D\xAE\x8B\x14a\x01.W\x80cF\xE2\xCC\t\x14a\x01)W\x80cH\\\xC9U\x14a\x01$W\x80c[<\xD6\xE2\x14a\x01\x1FW\x80cc\xD9d7\x14a\x01\x1AW\x80cqP\x18\xA6\x14a\x01\x15W\x80cz9y\xDC\x14a\x01\x10W\x80c\x80NQ#\x14a\x01\x0BW\x80c\x83\xD3\xC1\x15\x14a\x01\x06W\x80c\x8D\xA5\xCB[\x14a\x01\x01W\x80c\xCD\xAF\xB9x\x14a\0\xFCW\x80c\xD4\xF0\xEBM\x14a\0\xF7W\x80c\xD8x\x13B\x14a\0\xF2Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\n\x8EV[a\nYV[a\n\x02V[a\t\xB0V[a\tEV[a\x08\xEDV[a\x08\x7FV[a\x08FV[a\x07\x9AV[a\x07eV[a\x06\xD5V[a\x06\x07V[a\x05lV[a\x057V[a\x04\xA5V[a\x03\xD0V[a\x03\x99V[a\x02\x88V[a\x01\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[\x90V[a\x01{\x90a\x01oV[\x90RV[\x91\x90a\x01\x92\x90_` \x85\x01\x94\x01\x90a\x01rV[V[4a\x01\xC4Wa\x01\xA46`\x04a\x01`V[a\x01\xC0a\x01\xAFa\n\xF2V[a\x01\xB7a\x01RV[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x13W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x0EW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\tWV[a\x01\xD5V[a\x01\xD1V[a\x01\xCDV[\x90V[a\x02$\x81a\x02\x18V[\x03a\x02+WV[_\x80\xFD[\x90P5\x90a\x02<\x82a\x02\x1BV[V[\x91`@\x83\x83\x03\x12a\x02~W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02yWa\x02k\x83a\x02v\x92\x86\x01a\x01\xD9V[\x93\x90\x94` \x01a\x02/V[\x90V[a\x01\xC9V[a\x01\\V[_\x01\x90V[4a\x02\xB7Wa\x02\xA1a\x02\x9B6`\x04a\x02>V[\x91a\x0B\xECV[a\x02\xA9a\x01RV[\x80a\x02\xB3\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\xF6W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xF1W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xECWV[a\x01\xD5V[a\x01\xD1V[a\x01\xCDV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x035W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x030W` \x01\x92` \x83\x02\x84\x01\x11a\x03+WV[a\x01\xD5V[a\x01\xD1V[a\x01\xCDV[\x90\x91`@\x82\x84\x03\x12a\x03\x94W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x8FW\x83a\x03e\x91\x84\x01a\x02\xBCV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x8AWa\x03\x86\x92\x01a\x02\xFBV[\x90\x91V[a\x01\xC9V[a\x01\xC9V[a\x01\\V[4a\x03\xCBWa\x03\xB5a\x03\xAC6`\x04a\x03:V[\x92\x91\x90\x91a\r\x89V[a\x03\xBDa\x01RV[\x80a\x03\xC7\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[4a\x03\xFFWa\x03\xE9a\x03\xE36`\x04a\x02>V[\x91a\x0F\x80V[a\x03\xF1a\x01RV[\x80a\x03\xFB\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x045W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x040Wa\x04,\x92\x01a\x01\xD9V[\x90\x91V[a\x01\xC9V[a\x01\\V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x04{a\x04\x84` \x93a\x04\x89\x93a\x04r\x81a\x04:V[\x93\x84\x80\x93a\x04>V[\x95\x86\x91\x01a\x04GV[a\x04RV[\x01\x90V[a\x04\xA2\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04\\V[\x90V[4a\x04\xD6Wa\x04\xD2a\x04\xC1a\x04\xBB6`\x04a\x04\x04V[\x90a\x10MV[a\x04\xC9a\x01RV[\x91\x82\x91\x82a\x04\x8DV[\x03\x90\xF3[a\x01XV[\x90V[\x90V[a\x04\xF5a\x04\xF0a\x04\xFA\x92a\x04\xDBV[a\x04\xDEV[a\x02\x18V[\x90V[a\x05\x07`\na\x04\xE1V[\x90V[a\x05\x12a\x04\xFDV[\x90V[a\x05\x1E\x90a\x02\x18V[\x90RV[\x91\x90a\x055\x90_` \x85\x01\x94\x01\x90a\x05\x15V[V[4a\x05gWa\x05G6`\x04a\x01`V[a\x05ca\x05Ra\x05\nV[a\x05Za\x01RV[\x91\x82\x91\x82a\x05\"V[\x03\x90\xF3[a\x01XV[4a\x05\x9BWa\x05\x85a\x05\x7F6`\x04a\x04\x04V[\x90a\x11iV[a\x05\x8Da\x01RV[\x80a\x05\x97\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xB4\x90a\x05\xA0V[\x90V[a\x05\xC0\x81a\x05\xABV[\x03a\x05\xC7WV[_\x80\xFD[\x90P5\x90a\x05\xD8\x82a\x05\xB7V[V[\x91\x90`@\x83\x82\x03\x12a\x06\x02W\x80a\x05\xF6a\x05\xFF\x92_\x86\x01a\x05\xCBV[\x93` \x01a\x05\xCBV[\x90V[a\x01\\V[4a\x066Wa\x06 a\x06\x1A6`\x04a\x05\xDAV[\x90a\x13\x1BV[a\x06(a\x01RV[\x80a\x062\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06Z\x90`\x08a\x06_\x93\x02a\x06;V[a\x06?V[\x90V[\x90a\x06m\x91Ta\x06JV[\x90V[a\x06|`\x01_\x90a\x06bV[\x90V[a\x06\x93a\x06\x8Ea\x06\x98\x92a\x05\xA0V[a\x04\xDEV[a\x05\xA0V[\x90V[a\x06\xA4\x90a\x06\x7FV[\x90V[a\x06\xB0\x90a\x06\x9BV[\x90V[a\x06\xBC\x90a\x06\xA7V[\x90RV[\x91\x90a\x06\xD3\x90_` \x85\x01\x94\x01\x90a\x06\xB3V[V[4a\x07\x05Wa\x06\xE56`\x04a\x01`V[a\x07\x01a\x06\xF0a\x06pV[a\x06\xF8a\x01RV[\x91\x82\x91\x82a\x06\xC0V[\x03\x90\xF3[a\x01XV[\x90V[_\x1B\x90V[a\x07&a\x07!a\x07+\x92a\x07\nV[a\x07\rV[a\x01oV[\x90V[a\x07W\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x07\x12V[\x90V[a\x07ba\x07.V[\x90V[4a\x07\x95Wa\x07u6`\x04a\x01`V[a\x07\x91a\x07\x80a\x07ZV[a\x07\x88a\x01RV[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\x01XV[4a\x07\xC8Wa\x07\xAA6`\x04a\x01`V[a\x07\xB2a\x13LV[a\x07\xBAa\x01RV[\x80a\x07\xC4\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x91``\x83\x83\x03\x12a\x08\x1AWa\x07\xE4\x82_\x85\x01a\x05\xCBV[\x92a\x07\xF2\x83` \x83\x01a\x05\xCBV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x15Wa\x08\x11\x92\x01a\x01\xD9V[\x90\x91V[a\x01\xC9V[a\x01\\V[\x15\x15\x90V[a\x08-\x90a\x08\x1FV[\x90RV[\x91\x90a\x08D\x90_` \x85\x01\x94\x01\x90a\x08$V[V[4a\x08zWa\x08va\x08ea\x08\\6`\x04a\x07\xCDV[\x92\x91\x90\x91a\x14\x08V[a\x08ma\x01RV[\x91\x82\x91\x82a\x081V[\x03\x90\xF3[a\x01XV[4a\x08\xAEWa\x08\x98a\x08\x926`\x04a\x04\x04V[\x90a\x14\xFAV[a\x08\xA0a\x01RV[\x80a\x08\xAA\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90\x91``\x82\x84\x03\x12a\x08\xE8Wa\x08\xE5a\x08\xCE\x84_\x85\x01a\x02/V[\x93a\x08\xDC\x81` \x86\x01a\x02/V[\x93`@\x01a\x02/V[\x90V[a\x01\\V[4a\t\x1EWa\t\x1Aa\t\ta\t\x036`\x04a\x08\xB3V[\x91a\x15xV[a\t\x11a\x01RV[\x91\x82\x91\x82a\x05\"V[\x03\x90\xF3[a\x01XV[a\t,\x90a\x05\xABV[\x90RV[\x91\x90a\tC\x90_` \x85\x01\x94\x01\x90a\t#V[V[4a\tuWa\tU6`\x04a\x01`V[a\tqa\t`a\x16\x1EV[a\tha\x01RV[\x91\x82\x91\x82a\t0V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\t\xABW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xA6Wa\t\xA2\x92\x01a\x02\xBCV[\x90\x91V[a\x01\xC9V[a\x01\\V[4a\t\xDFWa\t\xC9a\t\xC36`\x04a\tzV[\x90a\x163V[a\t\xD1a\x01RV[\x80a\t\xDB\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\t\xFDWa\t\xFA\x91_\x01a\x05\xCBV[\x90V[a\x01\\V[4a\n0Wa\n\x1Aa\n\x156`\x04a\t\xE4V[a\x17[V[a\n\"a\x01RV[\x80a\n,\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\x89Wa\ni6`\x04a\x01`V[a\n\x85a\nta\n5V[a\n|a\x01RV[\x91\x82\x91\x82a\x05\"V[\x03\x90\xF3[a\x01XV[4a\n\xBCWa\n\xA6a\n\xA16`\x04a\t\xE4V[a\x17\xCBV[a\n\xAEa\x01RV[\x80a\n\xB8\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\n\xDDa\n\xE2\x91a\n\xC9V[a\n\xCEV[\x90V[a\n\xEF\x90Ta\n\xD1V[\x90V[a\n\xFAa\n\xC5V[Pa\x0B\r_a\x0B\x07a\x17\xD6V[\x01a\n\xE5V[\x90V[\x91\x90a\x0B-a\x0B'32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x0B<Wa\x0B:\x92a\x0B\x99V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0BT`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[a\x0Ba\x90a\x06\x9BV[\x90V[`@\x90a\x0B\x90a\x0B\x85a\x0B\x97\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x04\\V[\x96` \x83\x01\x90a\x05\x15V[\x01\x90a\x05\x15V[V[\x90a\x0B\xA5\x903\x92a\x10MV[\x91B\x92a\x0B\xE7a\x0B\xD5\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0BXV[\x94a\x0B\xDEa\x01RV[\x93\x84\x93\x84a\x0BdV[\x03\x90\xA2V[\x90a\x0B\xF7\x92\x91a\x0B\x10V[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0Cd`2`@\x92a\x0C\x01V[a\x0Cm\x81a\x0C\nV[\x01\x90V[a\x0C\x86\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0CWV[\x90V[\x15a\x0C\x90WV[a\x0C\x98a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\xAE`\x04\x82\x01a\x0CqV[\x03\x90\xFD[\x90V[a\x0C\xC9a\x0C\xC4a\x0C\xCE\x92a\x0C\xB2V[a\x04\xDEV[a\x02\x18V[\x90V[`\x01a\x0C\xDD\x91\x01a\x02\x18V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\rBW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r=W` \x01\x91`\x01\x82\x026\x03\x83\x13a\r8WV[a\x0C\xFCV[a\x0C\xF8V[a\x0C\xF4V[\x90\x82\x10\x15a\rbW` a\r^\x92\x02\x81\x01\x90a\r\0V[\x90\x91V[a\x0C\xE0V[\x91\x90\x81\x10\x15a\rwW` \x02\x01\x90V[a\x0C\xE0V[5a\r\x86\x81a\x02\x1BV[\x90V[\x90\x92a\r\x96\x82\x85\x90a\x0B\xF9V[\x93a\r\xBD\x85a\r\xB7a\r\xB1a\r\xAC\x88\x87\x90a\x0B\xFDV[a\x02\x18V[\x91a\x02\x18V[\x14a\x0C\x89V[a\r\xC6_a\x0C\xB5V[[\x80a\r\xDAa\r\xD4\x88a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x0E\x81Wa\x0E\x08\x90a\r\xFE32\x90a\r\xF6\x88\x87\x86\x91a\rGV[\x92\x90\x91a\x14\x08V[a\x0E\rW[a\x0C\xD1V[a\r\xC7V[3a\x0E#a\x0E\x1D\x87\x86\x85\x91a\rGV[\x90a\x10MV[\x90a\x0E8a\x0E3\x89\x88\x86\x91a\rgV[a\r|V[B\x92a\x0Eya\x0Eg\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0BXV[\x94a\x0Epa\x01RV[\x93\x84\x93\x84a\x0BdV[\x03\x90\xA2a\x0E\x03V[PPPPPPV[\x91\x90a\x0E\xA6a\x0E\xA032\x90\x86\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x0E\xB5Wa\x0E\xB3\x92a\x0F4V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E\xCD`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0E\xF6\x81a\x0E\xEF\x81a\x0E\xFB\x95a\x04>V[\x80\x95a\x0E\xD1V[a\x04RV[\x01\x90V[a\x0F+a\x0F `@\x93a\x0F2\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0E\xDCV[\x96` \x83\x01\x90a\x05\x15V[\x01\x90a\x05\x15V[V[\x90\x913\x91\x92\x90\x92a\x0F{Ba\x0Fi\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0BXV[\x95a\x0Fra\x01RV[\x94\x85\x94\x85a\x0E\xFFV[\x03\x90\xA2V[\x90a\x0F\x8B\x92\x91a\x0E\x89V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0F\xB5a\x0F\xB0a\x0F\xBA\x92a\x0C\xB2V[a\x0F\x9BV[a\x0F\x92V[\x90V[\x90V[a\x0F\xCCa\x0F\xD1\x91a\x0F\x92V[a\x0F\xBDV[\x90RV[\x90P\x90V[\x90\x91\x82a\x0F\xEA\x81a\x0F\xF1\x93a\x0F\xD5V[\x80\x93a\x0E\xD1V[\x01\x90V[\x80a\x10\x06`\x01\x92a\x10\r\x96\x94a\x0F\xC0V[\x01\x91a\x0F\xDAV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x10.\x90a\x04RV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10HW`@RV[a\x10\x10V[a\x10\x8B\x90a\x10Ya\x0F\x8DV[Pa\x10|a\x10f_a\x0F\xA1V[\x91\x93a\x10pa\x01RV[\x94\x85\x93` \x85\x01a\x0F\xF5V[` \x82\x01\x81\x03\x82R\x03\x82a\x10$V[\x90V[\x90a\x10\xAAa\x10\xA432\x90\x85\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x10\xB9Wa\x10\xB7\x91a\x11UV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x10\xD1`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[_\x80\xFD[\x90a\x10\xECa\x10\xE5a\x01RV[\x92\x83a\x10$V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x11\x0CWa\x11\x08` \x91a\x04RV[\x01\x90V[a\x10\x10V[\x90\x92\x91\x92a\x11&a\x11!\x82a\x10\xEEV[a\x10\xD9V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x11BWa\x11@\x92a\x0E\xD1V[V[a\x10\xD5V[a\x11R\x916\x91a\x11\x11V[\x90V[a\x11g\x91a\x11b\x91a\x11GV[a\x19\xA3V[V[\x90a\x11s\x91a\x10\x8EV[V[\x90a\x11\x87\x91a\x11\x82a\x1BmV[a\x12\x8EV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x11\xA1a\x11\xA6\x91a\x11\x89V[a\x11\x8FV[\x90V[a\x11\xB3\x90Ta\x11\x95V[\x90V[a\x11\xCAa\x11\xC5a\x11\xCF\x92a\x0C\xB2V[a\x04\xDEV[a\x05\xA0V[\x90V[a\x11\xDB\x90a\x11\xB6V[\x90V[`\xA0\x1B\x90V[\x90a\x11\xF3`\xFF`\xA0\x1B\x91a\x11\xDEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x06\x90a\x08\x1FV[\x90V[\x90V[\x90a\x12!a\x12\x1Ca\x12(\x92a\x11\xFDV[a\x12\tV[\x82Ta\x11\xE4V[\x90UV[a\x125\x90a\x06\x7FV[\x90V[a\x12A\x90a\x12,V[\x90V[\x90a\x12U`\x01\x80`\xA0\x1B\x03\x91a\x07\rV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12h\x90a\x12,V[\x90V[\x90V[\x90a\x12\x83a\x12~a\x12\x8A\x92a\x12_V[a\x12kV[\x82Ta\x12DV[\x90UV[a\x12\x98`\x01a\x11\xA9V[a\x13\0W\x81a\x12\xB7a\x12\xB1a\x12\xAC_a\x11\xD2V[a\x05\xABV[\x91a\x05\xABV[\x14a\x12\xE4Wa\x12\xDDa\x12\xD6a\x12\xE2\x93a\x12\xD1`\x01\x80a\x12\x0CV[a\x128V[`\x01a\x12nV[a\x17\xCBV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x12\xFC`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\x17`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[\x90a\x13%\x91a\x11uV[V[a\x13/a\x1BmV[a\x137a\x139V[V[a\x13Ja\x13E_a\x11\xD2V[a\x1B\xDEV[V[a\x13Ta\x13'V[V[_\x90V[a\x13fa\x13k\x91a\n\xC9V[a\x06?V[\x90V[a\x13x\x90Ta\x13ZV[\x90V[`\xE0\x1B\x90V[a\x13\x8A\x81a\x08\x1FV[\x03a\x13\x91WV[_\x80\xFD[\x90PQ\x90a\x13\xA2\x82a\x13\x81V[V[\x90` \x82\x82\x03\x12a\x13\xBDWa\x13\xBA\x91_\x01a\x13\x95V[\x90V[a\x01\\V[a\x13\xE8a\x13\xF5\x95\x93\x94\x92\x94a\x13\xDE``\x84\x01\x96_\x85\x01\x90a\t#V[` \x83\x01\x90a\t#V[`@\x81\x85\x03\x91\x01Ra\x0E\xDCV[\x90V[a\x14\0a\x01RV[=_\x82>=\x90\xFD[\x92a\x14K` \x93\x94a\x14\x18a\x13VV[Pa\x14Va\x14.a\x14)`\x01a\x13nV[a\x06\xA7V[\x93cz9y\xDC\x92\x95\x97a\x14?a\x01RV[\x98\x89\x97\x88\x96\x87\x96a\x13{V[\x86R`\x04\x86\x01a\x13\xC2V[\x03\x91Z\xFA\x90\x81\x15a\x14\x9AW_\x91a\x14lW[P\x90V[a\x14\x8D\x91P` =\x81\x11a\x14\x93W[a\x14\x85\x81\x83a\x10$V[\x81\x01\x90a\x13\xA4V[_a\x14hV[P=a\x14{V[a\x13\xF8V[\x90a\x14\xBBa\x14\xB532\x90\x85\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x14\xCAWa\x14\xC8\x91a\x14\xE6V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x14\xE2`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[a\x14\xF8\x91a\x14\xF3\x91a\x10MV[a\x19\xA3V[V[\x90a\x15\x04\x91a\x14\x9FV[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15-a\x153\x91\x93\x92\x93a\x02\x18V[\x92a\x02\x18V[\x82\x03\x91\x82\x11a\x15>WV[a\x15\nV[a\x15Ra\x15X\x91\x93\x92\x93a\x02\x18V[\x92a\x02\x18V[\x91a\x15d\x83\x82\x02a\x02\x18V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15sWV[a\x15\nV[\x91a\x15\x81a\x15\x06V[P\x80a\x15\x95a\x15\x8F\x84a\x02\x18V[\x91a\x02\x18V[\x11\x15a\x15\xE9Wa\x15\xB6\x91a\x15\xA8\x91a\x15\x1EV[a\x15\xB0a\x04\xFDV[\x90a\x15CV[\x80a\x15\xC9a\x15\xC3\x84a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x15\xDBWa\x15\xD8\x91a\x15\x1EV[\x90V[PPa\x15\xE6_a\x0C\xB5V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\ta\x16\x0E\x91a\n\xC9V[a\x15\xF2V[\x90V[a\x16\x1B\x90Ta\x15\xFDV[\x90V[a\x16&a\x15\xEEV[Pa\x160_a\x16\x11V[\x90V[a\x16>\x81\x83\x90a\x0B\xF9V[\x91a\x16H_a\x0C\xB5V[[\x80a\x16\\a\x16V\x86a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x16\xB1Wa\x16\x8A\x90a\x16\x8032\x90a\x16x\x87\x87\x86\x91a\rGV[\x92\x90\x91a\x14\x08V[a\x16\x8FW[a\x0C\xD1V[a\x16IV[a\x16\xACa\x16\xA7a\x16\xA1\x86\x86\x85\x91a\rGV[\x90a\x10MV[a\x19\xA3V[a\x16\x85V[PPPPV[a\x16\xC8\x90a\x16\xC3a\x1BmV[a\x16\xCAV[V[\x80a\x16\xE5a\x16\xDFa\x16\xDA_a\x11\xD2V[a\x05\xABV[\x91a\x05\xABV[\x14a\x17?Wa\x16\xFDa\x16\xF6\x82a\x128V[`\x01a\x12nV[a\x17'\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0BXV[\x90a\x170a\x01RV[\x80a\x17:\x81a\x02\x83V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x17W`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[a\x17d\x90a\x16\xB7V[V[a\x17w\x90a\x17ra\x1BmV[a\x17yV[V[\x80a\x17\x94a\x17\x8Ea\x17\x89_a\x11\xD2V[a\x05\xABV[\x91a\x05\xABV[\x14a\x17\xA4Wa\x17\xA2\x90a\x1B\xDEV[V[a\x17\xC7a\x17\xB0_a\x11\xD2V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t0V[\x03\x90\xFD[a\x17\xD4\x90a\x17fV[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x18\x1Fa\x18\x1Aa\x18$\x92a\x02\x18V[a\x04\xDEV[a\x17\xFEV[\x90V[a\x180\x90a\x06\x7FV[\x90V[a\x18<\x90a\x18'V[\x90V[a\x18I`da\x183V[\x90V[a\x18U\x90a\x06\x9BV[\x90V[\x90PQ\x90a\x18e\x82a\x02\x1BV[V[\x90` \x82\x82\x03\x12a\x18\x80Wa\x18}\x91_\x01a\x18XV[\x90V[a\x01\\V[` \x01\x90V[``\x1B\x90V[a\x18\x9A\x90a\x18\x8BV[\x90V[a\x18\xA6\x90a\x18\x91V[\x90V[a\x18\xB5a\x18\xBA\x91a\x05\xABV[a\x18\x9DV[\x90RV[`\xC0\x1B\x90V[a\x18\xCD\x90a\x18\xBEV[\x90V[a\x18\xDCa\x18\xE1\x91a\x17\xFEV[a\x18\xC4V[\x90RV[\x90V[a\x18\xF4a\x18\xF9\x91a\x01oV[a\x18\xE5V[\x90RV[\x92a\x19+`\x08a\x193\x94a\x19#`\x14\x88a\x19\x1B` \x9B\x9A\x86\x99a\x18\xA9V[\x01\x80\x92a\x18\xD0V[\x01\x80\x92a\x18\xD0V[\x01\x80\x92a\x18\xE8V[\x01\x90V[` \x81a\x19Ia\x19Q\x93\x83\x96\x95a\x18\xE8V[\x01\x80\x92a\x18\xE8V[\x01\x90V[\x90a\x19a_\x19\x91a\x07\rV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19t\x90a\x01oV[\x90V[a\x19\x80\x90a\n\xC9V[\x90V[\x90a\x19\x98a\x19\x93a\x19\x9F\x92a\x19kV[a\x19wV[\x82Ta\x19UV[\x90UV[a\x19\xABa\x17\xFAV[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x1B\\Wa\x19\xFE` a\x19\xE8a\x19\xE3a\x18?V[a\x18LV[c\xA3\xB1\xB3\x1D\x90a\x19\xF6a\x01RV[\x93\x84\x92a\x13{V[\x82R\x81\x80a\x1A\x0E`\x04\x82\x01a\x02\x83V[\x03\x91Z\xFA\x90\x81\x15a\x1BWWa\x1A\xE4\x91a\x1A.\x91_\x91a\x1B)W[Pa\x18\x0BV[[_a\x1A8a\x17\xD6V[\x91a\x1A\xCAa\x1AG\x83\x85\x01a\n\xE5V[\x91a\x1A\x903a\x1A\x81a\x1AXBa\x18\x0BV[\x8Aa\x1Aka\x1Ae\x82a\x04:V[\x91a\x18\x85V[ \x90a\x1Aua\x01RV[\x95\x86\x94` \x86\x01a\x18\xFDV[` \x82\x01\x81\x03\x82R\x03\x82a\x10$V[a\x1A\xA2a\x1A\x9C\x82a\x04:V[\x91a\x18\x85V[ \x91a\x1A\xBBa\x1A\xAFa\x01RV[\x93\x84\x92` \x84\x01a\x197V[` \x82\x01\x81\x03\x82R\x03\x82a\x10$V[a\x1A\xDCa\x1A\xD6\x82a\x04:V[\x91a\x18\x85V[ \x91\x01a\x19\x83V[3a\x1B$a\x1B\x12\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0BXV[\x92a\x1B\x1Ba\x01RV[\x91\x82\x91\x82a\x04\x8DV[\x03\x90\xA2V[a\x1BJ\x91P` =\x81\x11a\x1BPW[a\x1BB\x81\x83a\x10$V[\x81\x01\x90a\x18gV[_a\x1A(V[P=a\x1B8V[a\x13\xF8V[a\x1A\xE4a\x1BhCa\x18\x0BV[a\x1A/V[a\x1Bua\x16\x1EV[a\x1B\x8Ea\x1B\x88a\x1B\x83a\x1C=V[a\x05\xABV[\x91a\x05\xABV[\x03a\x1B\x95WV[a\x1B\xB7a\x1B\xA0a\x1C=V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t0V[\x03\x90\xFD[\x90V[\x90a\x1B\xD3a\x1B\xCEa\x1B\xDA\x92a\x0BXV[a\x1B\xBBV[\x82Ta\x12DV[\x90UV[a\x1B\xE7_a\x16\x11V[a\x1B\xF1\x82_a\x1B\xBEV[\x90a\x1C%a\x1C\x1F\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0BXV[\x91a\x0BXV[\x91a\x1C.a\x01RV[\x80a\x1C8\x81a\x02\x83V[\x03\x90\xA3V[a\x1CEa\x15\xEEV[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610ac1565b61001d5f3561014c565b80630338115414610147578063050ec1381461014257806311992f8c1461013d5780631c0b636714610138578063366cbab7146101335780633d44ae8b1461012e57806346e2cc0914610129578063485cc955146101245780635b3cd6e21461011f57806363d964371461011a578063715018a6146101155780637a3979dc14610110578063804e51231461010b57806383d3c115146101065780638da5cb5b14610101578063cdafb978146100fc578063d4f0eb4d146100f7578063d8781342146100f25763f2fde38b0361000e57610a8e565b610a59565b610a02565b6109b0565b610945565b6108ed565b61087f565b610846565b61079a565b610765565b6106d5565b610607565b61056c565b610537565b6104a5565b6103d0565b610399565b610288565b610194565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261016a57565b61015c565b90565b61017b9061016f565b9052565b9190610192905f60208501940190610172565b565b346101c4576101a4366004610160565b6101c06101af610af2565b6101b7610152565b9182918261017f565b0390f35b610158565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156102135781359167ffffffffffffffff831161020e57602001926001830284011161020957565b6101d5565b6101d1565b6101cd565b90565b61022481610218565b0361022b57565b5f80fd5b9050359061023c8261021b565b565b9160408383031261027e575f83013567ffffffffffffffff81116102795761026b836102769286016101d9565b93909460200161022f565b90565b6101c9565b61015c565b5f0190565b346102b7576102a161029b36600461023e565b91610bec565b6102a9610152565b806102b381610283565b0390f35b610158565b909182601f830112156102f65781359167ffffffffffffffff83116102f15760200192602083028401116102ec57565b6101d5565b6101d1565b6101cd565b909182601f830112156103355781359167ffffffffffffffff831161033057602001926020830284011161032b57565b6101d5565b6101d1565b6101cd565b9091604082840312610394575f82013567ffffffffffffffff811161038f57836103659184016102bc565b929093602082013567ffffffffffffffff811161038a5761038692016102fb565b9091565b6101c9565b6101c9565b61015c565b346103cb576103b56103ac36600461033a565b92919091610d89565b6103bd610152565b806103c781610283565b0390f35b610158565b346103ff576103e96103e336600461023e565b91610f80565b6103f1610152565b806103fb81610283565b0390f35b610158565b90602082820312610435575f82013567ffffffffffffffff81116104305761042c92016101d9565b9091565b6101c9565b61015c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61047b610484602093610489936104728161043a565b9384809361043e565b95869101610447565b610452565b0190565b6104a29160208201915f81840391015261045c565b90565b346104d6576104d26104c16104bb366004610404565b9061104d565b6104c9610152565b9182918261048d565b0390f35b610158565b90565b90565b6104f56104f06104fa926104db565b6104de565b610218565b90565b610507600a6104e1565b90565b6105126104fd565b90565b61051e90610218565b9052565b9190610535905f60208501940190610515565b565b3461056757610547366004610160565b61056361055261050a565b61055a610152565b91829182610522565b0390f35b610158565b3461059b5761058561057f366004610404565b90611169565b61058d610152565b8061059781610283565b0390f35b610158565b60018060a01b031690565b6105b4906105a0565b90565b6105c0816105ab565b036105c757565b5f80fd5b905035906105d8826105b7565b565b919060408382031261060257806105f66105ff925f86016105cb565b936020016105cb565b90565b61015c565b346106365761062061061a3660046105da565b9061131b565b610628610152565b8061063281610283565b0390f35b610158565b1c90565b60018060a01b031690565b61065a90600861065f930261063b565b61063f565b90565b9061066d915461064a565b90565b61067c60015f90610662565b90565b61069361068e610698926105a0565b6104de565b6105a0565b90565b6106a49061067f565b90565b6106b09061069b565b90565b6106bc906106a7565b9052565b91906106d3905f602085019401906106b3565b565b34610705576106e5366004610160565b6107016106f0610670565b6106f8610152565b918291826106c0565b0390f35b610158565b90565b5f1b90565b61072661072161072b9261070a565b61070d565b61016f565b90565b6107577f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b90610712565b90565b61076261072e565b90565b3461079557610775366004610160565b61079161078061075a565b610788610152565b9182918261017f565b0390f35b610158565b346107c8576107aa366004610160565b6107b261134c565b6107ba610152565b806107c481610283565b0390f35b610158565b9160608383031261081a576107e4825f85016105cb565b926107f283602083016105cb565b92604082013567ffffffffffffffff81116108155761081192016101d9565b9091565b6101c9565b61015c565b151590565b61082d9061081f565b9052565b9190610844905f60208501940190610824565b565b3461087a5761087661086561085c3660046107cd565b92919091611408565b61086d610152565b91829182610831565b0390f35b610158565b346108ae57610898610892366004610404565b906114fa565b6108a0610152565b806108aa81610283565b0390f35b610158565b90916060828403126108e8576108e56108ce845f850161022f565b936108dc816020860161022f565b9360400161022f565b90565b61015c565b3461091e5761091a6109096109033660046108b3565b91611578565b610911610152565b91829182610522565b0390f35b610158565b61092c906105ab565b9052565b9190610943905f60208501940190610923565b565b3461097557610955366004610160565b61097161096061161e565b610968610152565b91829182610930565b0390f35b610158565b906020828203126109ab575f82013567ffffffffffffffff81116109a6576109a292016102bc565b9091565b6101c9565b61015c565b346109df576109c96109c336600461097a565b90611633565b6109d1610152565b806109db81610283565b0390f35b610158565b906020828203126109fd576109fa915f016105cb565b90565b61015c565b34610a3057610a1a610a153660046109e4565b61175b565b610a22610152565b80610a2c81610283565b0390f35b610158565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610a8957610a69366004610160565b610a85610a74610a35565b610a7c610152565b91829182610522565b0390f35b610158565b34610abc57610aa6610aa13660046109e4565b6117cb565b610aae610152565b80610ab881610283565b0390f35b610158565b5f80fd5b5f90565b5f1c90565b90565b610add610ae291610ac9565b610ace565b90565b610aef9054610ad1565b90565b610afa610ac5565b50610b0d5f610b076117d6565b01610ae5565b90565b9190610b2d610b2733329086859192909192611408565b1561081f565b610b3c57610b3a92610b99565b565b5f631b8e828b60e31b815280610b5460048201610283565b0390fd5b610b619061069b565b90565b604090610b90610b85610b979597969460608401908482035f86015261045c565b966020830190610515565b0190610515565b565b90610ba590339261104d565b914292610be7610bd57f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b58565b94610bde610152565b93849384610b64565b0390a2565b90610bf79291610b10565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610c646032604092610c01565b610c6d81610c0a565b0190565b610c869060208101905f818303910152610c57565b90565b15610c9057565b610c98610152565b62461bcd60e51b815280610cae60048201610c71565b0390fd5b90565b610cc9610cc4610cce92610cb2565b6104de565b610218565b90565b6001610cdd9101610218565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610d42570180359067ffffffffffffffff8211610d3d57602001916001820236038313610d3857565b610cfc565b610cf8565b610cf4565b90821015610d62576020610d5e9202810190610d00565b9091565b610ce0565b9190811015610d77576020020190565b610ce0565b35610d868161021b565b90565b9092610d96828590610bf9565b93610dbd85610db7610db1610dac888790610bfd565b610218565b91610218565b14610c89565b610dc65f610cb5565b5b80610dda610dd488610218565b91610218565b1015610e8157610e0890610dfe333290610df688878691610d47565b929091611408565b610e0d575b610cd1565b610dc7565b33610e23610e1d87868591610d47565b9061104d565b90610e38610e3389888691610d67565b610d7c565b4292610e79610e677f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b58565b94610e70610152565b93849384610b64565b0390a2610e03565b505050505050565b9190610ea6610ea033329086859192909192611408565b1561081f565b610eb557610eb392610f34565b565b5f631b8e828b60e31b815280610ecd60048201610283565b0390fd5b90825f939282370152565b9190610ef681610eef81610efb9561043e565b8095610ed1565b610452565b0190565b610f2b610f20604093610f329698979560608501918583035f870152610edc565b966020830190610515565b0190610515565b565b90913391929092610f7b42610f697f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610b58565b95610f72610152565b94859485610eff565b0390a2565b90610f8b9291610e89565b565b606090565b60ff60f81b1690565b60f81b90565b610fb5610fb0610fba92610cb2565b610f9b565b610f92565b90565b90565b610fcc610fd191610f92565b610fbd565b9052565b905090565b909182610fea81610ff193610fd5565b8093610ed1565b0190565b8061100660019261100d9694610fc0565b0191610fda565b90565b634e487b7160e01b5f52604160045260245ffd5b9061102e90610452565b810190811067ffffffffffffffff82111761104857604052565b611010565b61108b90611059610f8d565b5061107c6110665f610fa1565b9193611070610152565b94859360208501610ff5565b60208201810382520382611024565b90565b906110aa6110a433329085859192909192611408565b1561081f565b6110b9576110b791611155565b565b5f631b8e828b60e31b8152806110d160048201610283565b0390fd5b5f80fd5b906110ec6110e5610152565b9283611024565b565b67ffffffffffffffff811161110c57611108602091610452565b0190565b611010565b90929192611126611121826110ee565b6110d9565b938185526020850190828401116111425761114092610ed1565b565b6110d5565b611152913691611111565b90565b6111679161116291611147565b6119a3565b565b906111739161108e565b565b9061118791611182611b6d565b61128e565b565b60a01c90565b60ff1690565b6111a16111a691611189565b61118f565b90565b6111b39054611195565b90565b6111ca6111c56111cf92610cb2565b6104de565b6105a0565b90565b6111db906111b6565b90565b60a01b90565b906111f360ff60a01b916111de565b9181191691161790565b6112069061081f565b90565b90565b9061122161121c611228926111fd565b611209565b82546111e4565b9055565b6112359061067f565b90565b6112419061122c565b90565b9061125560018060a01b039161070d565b9181191691161790565b6112689061122c565b90565b90565b9061128361127e61128a9261125f565b61126b565b8254611244565b9055565b61129860016111a9565b61130057816112b76112b16112ac5f6111d2565b6105ab565b916105ab565b146112e4576112dd6112d66112e2936112d160018061120c565b611238565b600161126e565b6117cb565b565b5f632e7f3c7f60e11b8152806112fc60048201610283565b0390fd5b5f62dc149f60e41b81528061131760048201610283565b0390fd5b9061132591611175565b565b61132f611b6d565b611337611339565b565b61134a6113455f6111d2565b611bde565b565b611354611327565b565b5f90565b61136661136b91610ac9565b61063f565b90565b611378905461135a565b90565b60e01b90565b61138a8161081f565b0361139157565b5f80fd5b905051906113a282611381565b565b906020828203126113bd576113ba915f01611395565b90565b61015c565b6113e86113f595939492946113de60608401965f850190610923565b6020830190610923565b6040818503910152610edc565b90565b611400610152565b3d5f823e3d90fd5b9261144b60209394611418611356565b5061145661142e611429600161136e565b6106a7565b93637a3979dc92959761143f610152565b9889978896879661137b565b8652600486016113c2565b03915afa90811561149a575f9161146c575b5090565b61148d915060203d8111611493575b6114858183611024565b8101906113a4565b5f611468565b503d61147b565b6113f8565b906114bb6114b533329085859192909192611408565b1561081f565b6114ca576114c8916114e6565b565b5f631b8e828b60e31b8152806114e260048201610283565b0390fd5b6114f8916114f39161104d565b6119a3565b565b906115049161149f565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61152d61153391939293610218565b92610218565b820391821161153e57565b61150a565b61155261155891939293610218565b92610218565b91611564838202610218565b92818404149015171561157357565b61150a565b91611581611506565b508061159561158f84610218565b91610218565b11156115e9576115b6916115a89161151e565b6115b06104fd565b90611543565b806115c96115c384610218565b91610218565b10156115db576115d89161151e565b90565b50506115e65f610cb5565b90565b505090565b5f90565b60018060a01b031690565b61160961160e91610ac9565b6115f2565b90565b61161b90546115fd565b90565b6116266115ee565b506116305f611611565b90565b61163e818390610bf9565b916116485f610cb5565b5b8061165c61165686610218565b91610218565b10156116b15761168a9061168033329061167887878691610d47565b929091611408565b61168f575b610cd1565b611649565b6116ac6116a76116a186868591610d47565b9061104d565b6119a3565b611685565b50505050565b6116c8906116c3611b6d565b6116ca565b565b806116e56116df6116da5f6111d2565b6105ab565b916105ab565b1461173f576116fd6116f682611238565b600161126e565b6117277f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610b58565b90611730610152565b8061173a81610283565b0390a2565b5f632e7f3c7f60e11b81528061175760048201610283565b0390fd5b611764906116b7565b565b61177790611772611b6d565b611779565b565b8061179461178e6117895f6111d2565b6105ab565b916105ab565b146117a4576117a290611bde565b565b6117c76117b05f6111d2565b5f918291631e4fbdf760e01b835260048301610930565b0390fd5b6117d490611766565b565b7f847fe1a0bfd701c2dbb0b62670ad8712eed4c0ff4d2c6c0917f4c8d260ed0b9090565b5f90565b67ffffffffffffffff1690565b61181f61181a61182492610218565b6104de565b6117fe565b90565b6118309061067f565b90565b61183c90611827565b90565b6118496064611833565b90565b6118559061069b565b90565b905051906118658261021b565b565b906020828203126118805761187d915f01611858565b90565b61015c565b60200190565b60601b90565b61189a9061188b565b90565b6118a690611891565b90565b6118b56118ba916105ab565b61189d565b9052565b60c01b90565b6118cd906118be565b90565b6118dc6118e1916117fe565b6118c4565b9052565b90565b6118f46118f99161016f565b6118e5565b9052565b9261192b60086119339461192360148861191b60209b9a86996118a9565b0180926118d0565b0180926118d0565b0180926118e8565b0190565b602081611949611951938396956118e8565b0180926118e8565b0190565b906119615f199161070d565b9181191691161790565b6119749061016f565b90565b61198090610ac9565b90565b9061199861199361199f9261196b565b611977565b8254611955565b9055565b6119ab6117fa565b507f00000000000000000000000000000000000000000000000000000000000000005f14611b5c576119fe60206119e86119e361183f565b61184c565b63a3b1b31d906119f6610152565b93849261137b565b82528180611a0e60048201610283565b03915afa908115611b5757611ae491611a2e915f91611b29575b5061180b565b5b5f611a386117d6565b91611aca611a47838501610ae5565b91611a9033611a81611a584261180b565b8a611a6b611a658261043a565b91611885565b2090611a75610152565b958694602086016118fd565b60208201810382520382611024565b611aa2611a9c8261043a565b91611885565b2091611abb611aaf610152565b93849260208401611937565b60208201810382520382611024565b611adc611ad68261043a565b91611885565b209101611983565b33611b24611b127f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610b58565b92611b1b610152565b9182918261048d565b0390a2565b611b4a915060203d8111611b50575b611b428183611024565b810190611867565b5f611a28565b503d611b38565b6113f8565b611ae4611b684361180b565b611a2f565b611b7561161e565b611b8e611b88611b83611c3d565b6105ab565b916105ab565b03611b9557565b611bb7611ba0611c3d565b5f91829163118cdaa760e01b835260048301610930565b0390fd5b90565b90611bd3611bce611bda92610b58565b611bbb565b8254611244565b9055565b611be75f611611565b611bf1825f611bbe565b90611c25611c1f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610b58565b91610b58565b91611c2e610152565b80611c3881610283565b0390a3565b611c456115ee565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\n\xC1V[a\0\x1D_5a\x01LV[\x80c\x038\x11T\x14a\x01GW\x80c\x05\x0E\xC18\x14a\x01BW\x80c\x11\x99/\x8C\x14a\x01=W\x80c\x1C\x0Bcg\x14a\x018W\x80c6l\xBA\xB7\x14a\x013W\x80c=D\xAE\x8B\x14a\x01.W\x80cF\xE2\xCC\t\x14a\x01)W\x80cH\\\xC9U\x14a\x01$W\x80c[<\xD6\xE2\x14a\x01\x1FW\x80cc\xD9d7\x14a\x01\x1AW\x80cqP\x18\xA6\x14a\x01\x15W\x80cz9y\xDC\x14a\x01\x10W\x80c\x80NQ#\x14a\x01\x0BW\x80c\x83\xD3\xC1\x15\x14a\x01\x06W\x80c\x8D\xA5\xCB[\x14a\x01\x01W\x80c\xCD\xAF\xB9x\x14a\0\xFCW\x80c\xD4\xF0\xEBM\x14a\0\xF7W\x80c\xD8x\x13B\x14a\0\xF2Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\n\x8EV[a\nYV[a\n\x02V[a\t\xB0V[a\tEV[a\x08\xEDV[a\x08\x7FV[a\x08FV[a\x07\x9AV[a\x07eV[a\x06\xD5V[a\x06\x07V[a\x05lV[a\x057V[a\x04\xA5V[a\x03\xD0V[a\x03\x99V[a\x02\x88V[a\x01\x94V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\x01jWV[a\x01\\V[\x90V[a\x01{\x90a\x01oV[\x90RV[\x91\x90a\x01\x92\x90_` \x85\x01\x94\x01\x90a\x01rV[V[4a\x01\xC4Wa\x01\xA46`\x04a\x01`V[a\x01\xC0a\x01\xAFa\n\xF2V[a\x01\xB7a\x01RV[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x13W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x0EW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\tWV[a\x01\xD5V[a\x01\xD1V[a\x01\xCDV[\x90V[a\x02$\x81a\x02\x18V[\x03a\x02+WV[_\x80\xFD[\x90P5\x90a\x02<\x82a\x02\x1BV[V[\x91`@\x83\x83\x03\x12a\x02~W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02yWa\x02k\x83a\x02v\x92\x86\x01a\x01\xD9V[\x93\x90\x94` \x01a\x02/V[\x90V[a\x01\xC9V[a\x01\\V[_\x01\x90V[4a\x02\xB7Wa\x02\xA1a\x02\x9B6`\x04a\x02>V[\x91a\x0B\xECV[a\x02\xA9a\x01RV[\x80a\x02\xB3\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\xF6W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xF1W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xECWV[a\x01\xD5V[a\x01\xD1V[a\x01\xCDV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x035W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x030W` \x01\x92` \x83\x02\x84\x01\x11a\x03+WV[a\x01\xD5V[a\x01\xD1V[a\x01\xCDV[\x90\x91`@\x82\x84\x03\x12a\x03\x94W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x8FW\x83a\x03e\x91\x84\x01a\x02\xBCV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\x8AWa\x03\x86\x92\x01a\x02\xFBV[\x90\x91V[a\x01\xC9V[a\x01\xC9V[a\x01\\V[4a\x03\xCBWa\x03\xB5a\x03\xAC6`\x04a\x03:V[\x92\x91\x90\x91a\r\x89V[a\x03\xBDa\x01RV[\x80a\x03\xC7\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[4a\x03\xFFWa\x03\xE9a\x03\xE36`\x04a\x02>V[\x91a\x0F\x80V[a\x03\xF1a\x01RV[\x80a\x03\xFB\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x045W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x040Wa\x04,\x92\x01a\x01\xD9V[\x90\x91V[a\x01\xC9V[a\x01\\V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x04{a\x04\x84` \x93a\x04\x89\x93a\x04r\x81a\x04:V[\x93\x84\x80\x93a\x04>V[\x95\x86\x91\x01a\x04GV[a\x04RV[\x01\x90V[a\x04\xA2\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04\\V[\x90V[4a\x04\xD6Wa\x04\xD2a\x04\xC1a\x04\xBB6`\x04a\x04\x04V[\x90a\x10MV[a\x04\xC9a\x01RV[\x91\x82\x91\x82a\x04\x8DV[\x03\x90\xF3[a\x01XV[\x90V[\x90V[a\x04\xF5a\x04\xF0a\x04\xFA\x92a\x04\xDBV[a\x04\xDEV[a\x02\x18V[\x90V[a\x05\x07`\na\x04\xE1V[\x90V[a\x05\x12a\x04\xFDV[\x90V[a\x05\x1E\x90a\x02\x18V[\x90RV[\x91\x90a\x055\x90_` \x85\x01\x94\x01\x90a\x05\x15V[V[4a\x05gWa\x05G6`\x04a\x01`V[a\x05ca\x05Ra\x05\nV[a\x05Za\x01RV[\x91\x82\x91\x82a\x05\"V[\x03\x90\xF3[a\x01XV[4a\x05\x9BWa\x05\x85a\x05\x7F6`\x04a\x04\x04V[\x90a\x11iV[a\x05\x8Da\x01RV[\x80a\x05\x97\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xB4\x90a\x05\xA0V[\x90V[a\x05\xC0\x81a\x05\xABV[\x03a\x05\xC7WV[_\x80\xFD[\x90P5\x90a\x05\xD8\x82a\x05\xB7V[V[\x91\x90`@\x83\x82\x03\x12a\x06\x02W\x80a\x05\xF6a\x05\xFF\x92_\x86\x01a\x05\xCBV[\x93` \x01a\x05\xCBV[\x90V[a\x01\\V[4a\x066Wa\x06 a\x06\x1A6`\x04a\x05\xDAV[\x90a\x13\x1BV[a\x06(a\x01RV[\x80a\x062\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06Z\x90`\x08a\x06_\x93\x02a\x06;V[a\x06?V[\x90V[\x90a\x06m\x91Ta\x06JV[\x90V[a\x06|`\x01_\x90a\x06bV[\x90V[a\x06\x93a\x06\x8Ea\x06\x98\x92a\x05\xA0V[a\x04\xDEV[a\x05\xA0V[\x90V[a\x06\xA4\x90a\x06\x7FV[\x90V[a\x06\xB0\x90a\x06\x9BV[\x90V[a\x06\xBC\x90a\x06\xA7V[\x90RV[\x91\x90a\x06\xD3\x90_` \x85\x01\x94\x01\x90a\x06\xB3V[V[4a\x07\x05Wa\x06\xE56`\x04a\x01`V[a\x07\x01a\x06\xF0a\x06pV[a\x06\xF8a\x01RV[\x91\x82\x91\x82a\x06\xC0V[\x03\x90\xF3[a\x01XV[\x90V[_\x1B\x90V[a\x07&a\x07!a\x07+\x92a\x07\nV[a\x07\rV[a\x01oV[\x90V[a\x07W\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90a\x07\x12V[\x90V[a\x07ba\x07.V[\x90V[4a\x07\x95Wa\x07u6`\x04a\x01`V[a\x07\x91a\x07\x80a\x07ZV[a\x07\x88a\x01RV[\x91\x82\x91\x82a\x01\x7FV[\x03\x90\xF3[a\x01XV[4a\x07\xC8Wa\x07\xAA6`\x04a\x01`V[a\x07\xB2a\x13LV[a\x07\xBAa\x01RV[\x80a\x07\xC4\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x91``\x83\x83\x03\x12a\x08\x1AWa\x07\xE4\x82_\x85\x01a\x05\xCBV[\x92a\x07\xF2\x83` \x83\x01a\x05\xCBV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08\x15Wa\x08\x11\x92\x01a\x01\xD9V[\x90\x91V[a\x01\xC9V[a\x01\\V[\x15\x15\x90V[a\x08-\x90a\x08\x1FV[\x90RV[\x91\x90a\x08D\x90_` \x85\x01\x94\x01\x90a\x08$V[V[4a\x08zWa\x08va\x08ea\x08\\6`\x04a\x07\xCDV[\x92\x91\x90\x91a\x14\x08V[a\x08ma\x01RV[\x91\x82\x91\x82a\x081V[\x03\x90\xF3[a\x01XV[4a\x08\xAEWa\x08\x98a\x08\x926`\x04a\x04\x04V[\x90a\x14\xFAV[a\x08\xA0a\x01RV[\x80a\x08\xAA\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90\x91``\x82\x84\x03\x12a\x08\xE8Wa\x08\xE5a\x08\xCE\x84_\x85\x01a\x02/V[\x93a\x08\xDC\x81` \x86\x01a\x02/V[\x93`@\x01a\x02/V[\x90V[a\x01\\V[4a\t\x1EWa\t\x1Aa\t\ta\t\x036`\x04a\x08\xB3V[\x91a\x15xV[a\t\x11a\x01RV[\x91\x82\x91\x82a\x05\"V[\x03\x90\xF3[a\x01XV[a\t,\x90a\x05\xABV[\x90RV[\x91\x90a\tC\x90_` \x85\x01\x94\x01\x90a\t#V[V[4a\tuWa\tU6`\x04a\x01`V[a\tqa\t`a\x16\x1EV[a\tha\x01RV[\x91\x82\x91\x82a\t0V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\t\xABW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\t\xA6Wa\t\xA2\x92\x01a\x02\xBCV[\x90\x91V[a\x01\xC9V[a\x01\\V[4a\t\xDFWa\t\xC9a\t\xC36`\x04a\tzV[\x90a\x163V[a\t\xD1a\x01RV[\x80a\t\xDB\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\t\xFDWa\t\xFA\x91_\x01a\x05\xCBV[\x90V[a\x01\\V[4a\n0Wa\n\x1Aa\n\x156`\x04a\t\xE4V[a\x17[V[a\n\"a\x01RV[\x80a\n,\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\x89Wa\ni6`\x04a\x01`V[a\n\x85a\nta\n5V[a\n|a\x01RV[\x91\x82\x91\x82a\x05\"V[\x03\x90\xF3[a\x01XV[4a\n\xBCWa\n\xA6a\n\xA16`\x04a\t\xE4V[a\x17\xCBV[a\n\xAEa\x01RV[\x80a\n\xB8\x81a\x02\x83V[\x03\x90\xF3[a\x01XV[_\x80\xFD[_\x90V[_\x1C\x90V[\x90V[a\n\xDDa\n\xE2\x91a\n\xC9V[a\n\xCEV[\x90V[a\n\xEF\x90Ta\n\xD1V[\x90V[a\n\xFAa\n\xC5V[Pa\x0B\r_a\x0B\x07a\x17\xD6V[\x01a\n\xE5V[\x90V[\x91\x90a\x0B-a\x0B'32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x0B<Wa\x0B:\x92a\x0B\x99V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0BT`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[a\x0Ba\x90a\x06\x9BV[\x90V[`@\x90a\x0B\x90a\x0B\x85a\x0B\x97\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x04\\V[\x96` \x83\x01\x90a\x05\x15V[\x01\x90a\x05\x15V[V[\x90a\x0B\xA5\x903\x92a\x10MV[\x91B\x92a\x0B\xE7a\x0B\xD5\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0BXV[\x94a\x0B\xDEa\x01RV[\x93\x84\x93\x84a\x0BdV[\x03\x90\xA2V[\x90a\x0B\xF7\x92\x91a\x0B\x10V[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0Cd`2`@\x92a\x0C\x01V[a\x0Cm\x81a\x0C\nV[\x01\x90V[a\x0C\x86\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0CWV[\x90V[\x15a\x0C\x90WV[a\x0C\x98a\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\xAE`\x04\x82\x01a\x0CqV[\x03\x90\xFD[\x90V[a\x0C\xC9a\x0C\xC4a\x0C\xCE\x92a\x0C\xB2V[a\x04\xDEV[a\x02\x18V[\x90V[`\x01a\x0C\xDD\x91\x01a\x02\x18V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\rBW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\r=W` \x01\x91`\x01\x82\x026\x03\x83\x13a\r8WV[a\x0C\xFCV[a\x0C\xF8V[a\x0C\xF4V[\x90\x82\x10\x15a\rbW` a\r^\x92\x02\x81\x01\x90a\r\0V[\x90\x91V[a\x0C\xE0V[\x91\x90\x81\x10\x15a\rwW` \x02\x01\x90V[a\x0C\xE0V[5a\r\x86\x81a\x02\x1BV[\x90V[\x90\x92a\r\x96\x82\x85\x90a\x0B\xF9V[\x93a\r\xBD\x85a\r\xB7a\r\xB1a\r\xAC\x88\x87\x90a\x0B\xFDV[a\x02\x18V[\x91a\x02\x18V[\x14a\x0C\x89V[a\r\xC6_a\x0C\xB5V[[\x80a\r\xDAa\r\xD4\x88a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x0E\x81Wa\x0E\x08\x90a\r\xFE32\x90a\r\xF6\x88\x87\x86\x91a\rGV[\x92\x90\x91a\x14\x08V[a\x0E\rW[a\x0C\xD1V[a\r\xC7V[3a\x0E#a\x0E\x1D\x87\x86\x85\x91a\rGV[\x90a\x10MV[\x90a\x0E8a\x0E3\x89\x88\x86\x91a\rgV[a\r|V[B\x92a\x0Eya\x0Eg\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0BXV[\x94a\x0Epa\x01RV[\x93\x84\x93\x84a\x0BdV[\x03\x90\xA2a\x0E\x03V[PPPPPPV[\x91\x90a\x0E\xA6a\x0E\xA032\x90\x86\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x0E\xB5Wa\x0E\xB3\x92a\x0F4V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E\xCD`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0E\xF6\x81a\x0E\xEF\x81a\x0E\xFB\x95a\x04>V[\x80\x95a\x0E\xD1V[a\x04RV[\x01\x90V[a\x0F+a\x0F `@\x93a\x0F2\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0E\xDCV[\x96` \x83\x01\x90a\x05\x15V[\x01\x90a\x05\x15V[V[\x90\x913\x91\x92\x90\x92a\x0F{Ba\x0Fi\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0BXV[\x95a\x0Fra\x01RV[\x94\x85\x94\x85a\x0E\xFFV[\x03\x90\xA2V[\x90a\x0F\x8B\x92\x91a\x0E\x89V[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x0F\xB5a\x0F\xB0a\x0F\xBA\x92a\x0C\xB2V[a\x0F\x9BV[a\x0F\x92V[\x90V[\x90V[a\x0F\xCCa\x0F\xD1\x91a\x0F\x92V[a\x0F\xBDV[\x90RV[\x90P\x90V[\x90\x91\x82a\x0F\xEA\x81a\x0F\xF1\x93a\x0F\xD5V[\x80\x93a\x0E\xD1V[\x01\x90V[\x80a\x10\x06`\x01\x92a\x10\r\x96\x94a\x0F\xC0V[\x01\x91a\x0F\xDAV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x10.\x90a\x04RV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10HW`@RV[a\x10\x10V[a\x10\x8B\x90a\x10Ya\x0F\x8DV[Pa\x10|a\x10f_a\x0F\xA1V[\x91\x93a\x10pa\x01RV[\x94\x85\x93` \x85\x01a\x0F\xF5V[` \x82\x01\x81\x03\x82R\x03\x82a\x10$V[\x90V[\x90a\x10\xAAa\x10\xA432\x90\x85\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x10\xB9Wa\x10\xB7\x91a\x11UV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x10\xD1`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[_\x80\xFD[\x90a\x10\xECa\x10\xE5a\x01RV[\x92\x83a\x10$V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x11\x0CWa\x11\x08` \x91a\x04RV[\x01\x90V[a\x10\x10V[\x90\x92\x91\x92a\x11&a\x11!\x82a\x10\xEEV[a\x10\xD9V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x11BWa\x11@\x92a\x0E\xD1V[V[a\x10\xD5V[a\x11R\x916\x91a\x11\x11V[\x90V[a\x11g\x91a\x11b\x91a\x11GV[a\x19\xA3V[V[\x90a\x11s\x91a\x10\x8EV[V[\x90a\x11\x87\x91a\x11\x82a\x1BmV[a\x12\x8EV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x11\xA1a\x11\xA6\x91a\x11\x89V[a\x11\x8FV[\x90V[a\x11\xB3\x90Ta\x11\x95V[\x90V[a\x11\xCAa\x11\xC5a\x11\xCF\x92a\x0C\xB2V[a\x04\xDEV[a\x05\xA0V[\x90V[a\x11\xDB\x90a\x11\xB6V[\x90V[`\xA0\x1B\x90V[\x90a\x11\xF3`\xFF`\xA0\x1B\x91a\x11\xDEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\x06\x90a\x08\x1FV[\x90V[\x90V[\x90a\x12!a\x12\x1Ca\x12(\x92a\x11\xFDV[a\x12\tV[\x82Ta\x11\xE4V[\x90UV[a\x125\x90a\x06\x7FV[\x90V[a\x12A\x90a\x12,V[\x90V[\x90a\x12U`\x01\x80`\xA0\x1B\x03\x91a\x07\rV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12h\x90a\x12,V[\x90V[\x90V[\x90a\x12\x83a\x12~a\x12\x8A\x92a\x12_V[a\x12kV[\x82Ta\x12DV[\x90UV[a\x12\x98`\x01a\x11\xA9V[a\x13\0W\x81a\x12\xB7a\x12\xB1a\x12\xAC_a\x11\xD2V[a\x05\xABV[\x91a\x05\xABV[\x14a\x12\xE4Wa\x12\xDDa\x12\xD6a\x12\xE2\x93a\x12\xD1`\x01\x80a\x12\x0CV[a\x128V[`\x01a\x12nV[a\x17\xCBV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x12\xFC`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\x17`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[\x90a\x13%\x91a\x11uV[V[a\x13/a\x1BmV[a\x137a\x139V[V[a\x13Ja\x13E_a\x11\xD2V[a\x1B\xDEV[V[a\x13Ta\x13'V[V[_\x90V[a\x13fa\x13k\x91a\n\xC9V[a\x06?V[\x90V[a\x13x\x90Ta\x13ZV[\x90V[`\xE0\x1B\x90V[a\x13\x8A\x81a\x08\x1FV[\x03a\x13\x91WV[_\x80\xFD[\x90PQ\x90a\x13\xA2\x82a\x13\x81V[V[\x90` \x82\x82\x03\x12a\x13\xBDWa\x13\xBA\x91_\x01a\x13\x95V[\x90V[a\x01\\V[a\x13\xE8a\x13\xF5\x95\x93\x94\x92\x94a\x13\xDE``\x84\x01\x96_\x85\x01\x90a\t#V[` \x83\x01\x90a\t#V[`@\x81\x85\x03\x91\x01Ra\x0E\xDCV[\x90V[a\x14\0a\x01RV[=_\x82>=\x90\xFD[\x92a\x14K` \x93\x94a\x14\x18a\x13VV[Pa\x14Va\x14.a\x14)`\x01a\x13nV[a\x06\xA7V[\x93cz9y\xDC\x92\x95\x97a\x14?a\x01RV[\x98\x89\x97\x88\x96\x87\x96a\x13{V[\x86R`\x04\x86\x01a\x13\xC2V[\x03\x91Z\xFA\x90\x81\x15a\x14\x9AW_\x91a\x14lW[P\x90V[a\x14\x8D\x91P` =\x81\x11a\x14\x93W[a\x14\x85\x81\x83a\x10$V[\x81\x01\x90a\x13\xA4V[_a\x14hV[P=a\x14{V[a\x13\xF8V[\x90a\x14\xBBa\x14\xB532\x90\x85\x85\x91\x92\x90\x91\x92a\x14\x08V[\x15a\x08\x1FV[a\x14\xCAWa\x14\xC8\x91a\x14\xE6V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x14\xE2`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[a\x14\xF8\x91a\x14\xF3\x91a\x10MV[a\x19\xA3V[V[\x90a\x15\x04\x91a\x14\x9FV[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15-a\x153\x91\x93\x92\x93a\x02\x18V[\x92a\x02\x18V[\x82\x03\x91\x82\x11a\x15>WV[a\x15\nV[a\x15Ra\x15X\x91\x93\x92\x93a\x02\x18V[\x92a\x02\x18V[\x91a\x15d\x83\x82\x02a\x02\x18V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15sWV[a\x15\nV[\x91a\x15\x81a\x15\x06V[P\x80a\x15\x95a\x15\x8F\x84a\x02\x18V[\x91a\x02\x18V[\x11\x15a\x15\xE9Wa\x15\xB6\x91a\x15\xA8\x91a\x15\x1EV[a\x15\xB0a\x04\xFDV[\x90a\x15CV[\x80a\x15\xC9a\x15\xC3\x84a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x15\xDBWa\x15\xD8\x91a\x15\x1EV[\x90V[PPa\x15\xE6_a\x0C\xB5V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\ta\x16\x0E\x91a\n\xC9V[a\x15\xF2V[\x90V[a\x16\x1B\x90Ta\x15\xFDV[\x90V[a\x16&a\x15\xEEV[Pa\x160_a\x16\x11V[\x90V[a\x16>\x81\x83\x90a\x0B\xF9V[\x91a\x16H_a\x0C\xB5V[[\x80a\x16\\a\x16V\x86a\x02\x18V[\x91a\x02\x18V[\x10\x15a\x16\xB1Wa\x16\x8A\x90a\x16\x8032\x90a\x16x\x87\x87\x86\x91a\rGV[\x92\x90\x91a\x14\x08V[a\x16\x8FW[a\x0C\xD1V[a\x16IV[a\x16\xACa\x16\xA7a\x16\xA1\x86\x86\x85\x91a\rGV[\x90a\x10MV[a\x19\xA3V[a\x16\x85V[PPPPV[a\x16\xC8\x90a\x16\xC3a\x1BmV[a\x16\xCAV[V[\x80a\x16\xE5a\x16\xDFa\x16\xDA_a\x11\xD2V[a\x05\xABV[\x91a\x05\xABV[\x14a\x17?Wa\x16\xFDa\x16\xF6\x82a\x128V[`\x01a\x12nV[a\x17'\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0BXV[\x90a\x170a\x01RV[\x80a\x17:\x81a\x02\x83V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x17W`\x04\x82\x01a\x02\x83V[\x03\x90\xFD[a\x17d\x90a\x16\xB7V[V[a\x17w\x90a\x17ra\x1BmV[a\x17yV[V[\x80a\x17\x94a\x17\x8Ea\x17\x89_a\x11\xD2V[a\x05\xABV[\x91a\x05\xABV[\x14a\x17\xA4Wa\x17\xA2\x90a\x1B\xDEV[V[a\x17\xC7a\x17\xB0_a\x11\xD2V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t0V[\x03\x90\xFD[a\x17\xD4\x90a\x17fV[V[\x7F\x84\x7F\xE1\xA0\xBF\xD7\x01\xC2\xDB\xB0\xB6&p\xAD\x87\x12\xEE\xD4\xC0\xFFM,l\t\x17\xF4\xC8\xD2`\xED\x0B\x90\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x18\x1Fa\x18\x1Aa\x18$\x92a\x02\x18V[a\x04\xDEV[a\x17\xFEV[\x90V[a\x180\x90a\x06\x7FV[\x90V[a\x18<\x90a\x18'V[\x90V[a\x18I`da\x183V[\x90V[a\x18U\x90a\x06\x9BV[\x90V[\x90PQ\x90a\x18e\x82a\x02\x1BV[V[\x90` \x82\x82\x03\x12a\x18\x80Wa\x18}\x91_\x01a\x18XV[\x90V[a\x01\\V[` \x01\x90V[``\x1B\x90V[a\x18\x9A\x90a\x18\x8BV[\x90V[a\x18\xA6\x90a\x18\x91V[\x90V[a\x18\xB5a\x18\xBA\x91a\x05\xABV[a\x18\x9DV[\x90RV[`\xC0\x1B\x90V[a\x18\xCD\x90a\x18\xBEV[\x90V[a\x18\xDCa\x18\xE1\x91a\x17\xFEV[a\x18\xC4V[\x90RV[\x90V[a\x18\xF4a\x18\xF9\x91a\x01oV[a\x18\xE5V[\x90RV[\x92a\x19+`\x08a\x193\x94a\x19#`\x14\x88a\x19\x1B` \x9B\x9A\x86\x99a\x18\xA9V[\x01\x80\x92a\x18\xD0V[\x01\x80\x92a\x18\xD0V[\x01\x80\x92a\x18\xE8V[\x01\x90V[` \x81a\x19Ia\x19Q\x93\x83\x96\x95a\x18\xE8V[\x01\x80\x92a\x18\xE8V[\x01\x90V[\x90a\x19a_\x19\x91a\x07\rV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19t\x90a\x01oV[\x90V[a\x19\x80\x90a\n\xC9V[\x90V[\x90a\x19\x98a\x19\x93a\x19\x9F\x92a\x19kV[a\x19wV[\x82Ta\x19UV[\x90UV[a\x19\xABa\x17\xFAV[P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x14a\x1B\\Wa\x19\xFE` a\x19\xE8a\x19\xE3a\x18?V[a\x18LV[c\xA3\xB1\xB3\x1D\x90a\x19\xF6a\x01RV[\x93\x84\x92a\x13{V[\x82R\x81\x80a\x1A\x0E`\x04\x82\x01a\x02\x83V[\x03\x91Z\xFA\x90\x81\x15a\x1BWWa\x1A\xE4\x91a\x1A.\x91_\x91a\x1B)W[Pa\x18\x0BV[[_a\x1A8a\x17\xD6V[\x91a\x1A\xCAa\x1AG\x83\x85\x01a\n\xE5V[\x91a\x1A\x903a\x1A\x81a\x1AXBa\x18\x0BV[\x8Aa\x1Aka\x1Ae\x82a\x04:V[\x91a\x18\x85V[ \x90a\x1Aua\x01RV[\x95\x86\x94` \x86\x01a\x18\xFDV[` \x82\x01\x81\x03\x82R\x03\x82a\x10$V[a\x1A\xA2a\x1A\x9C\x82a\x04:V[\x91a\x18\x85V[ \x91a\x1A\xBBa\x1A\xAFa\x01RV[\x93\x84\x92` \x84\x01a\x197V[` \x82\x01\x81\x03\x82R\x03\x82a\x10$V[a\x1A\xDCa\x1A\xD6\x82a\x04:V[\x91a\x18\x85V[ \x91\x01a\x19\x83V[3a\x1B$a\x1B\x12\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0BXV[\x92a\x1B\x1Ba\x01RV[\x91\x82\x91\x82a\x04\x8DV[\x03\x90\xA2V[a\x1BJ\x91P` =\x81\x11a\x1BPW[a\x1BB\x81\x83a\x10$V[\x81\x01\x90a\x18gV[_a\x1A(V[P=a\x1B8V[a\x13\xF8V[a\x1A\xE4a\x1BhCa\x18\x0BV[a\x1A/V[a\x1Bua\x16\x1EV[a\x1B\x8Ea\x1B\x88a\x1B\x83a\x1C=V[a\x05\xABV[\x91a\x05\xABV[\x03a\x1B\x95WV[a\x1B\xB7a\x1B\xA0a\x1C=V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t0V[\x03\x90\xFD[\x90V[\x90a\x1B\xD3a\x1B\xCEa\x1B\xDA\x92a\x0BXV[a\x1B\xBBV[\x82Ta\x12DV[\x90UV[a\x1B\xE7_a\x16\x11V[a\x1B\xF1\x82_a\x1B\xBEV[\x90a\x1C%a\x1C\x1F\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0BXV[\x91a\x0BXV[\x91a\x1C.a\x01RV[\x80a\x1C8\x81a\x02\x83V[\x03\x90\xA3V[a\x1CEa\x15\xEEV[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrSenderNotAllowed()` and selector `0xdc741458`.
```solidity
error TransactionOrSenderNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrSenderNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrSenderNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrSenderNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrSenderNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrSenderNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrSenderNotAllowed()";
            const SELECTOR: [u8; 4] = [220u8, 116u8, 20u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_0 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_0 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes,uint256,uint256)` and selector `0x4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2`.
```solidity
event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_1 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                    originalPriority: data.1,
                    timestamp: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appchainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appchainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appchainId),
                )
            }
        }
    };
    /**Function with signature `ACCUMULATOR_STORAGE_LOCATION()` and selector `0x63d96437`.
```solidity
function ACCUMULATOR_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`ACCUMULATOR_STORAGE_LOCATION()`](ACCUMULATOR_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ACCUMULATOR_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ACCUMULATOR_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ACCUMULATOR_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ACCUMULATOR_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ACCUMULATOR_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ACCUMULATOR_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ACCUMULATOR_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [99u8, 217u8, 100u8, 55u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `PRIORITY_DECAY_RATE()` and selector `0x3d44ae8b`.
```solidity
function PRIORITY_DECAY_RATE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATECall {}
    ///Container type for the return parameters of the [`PRIORITY_DECAY_RATE()`](PRIORITY_DECAY_RATECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRIORITY_DECAY_RATECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRIORITY_DECAY_RATEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRIORITY_DECAY_RATE()";
            const SELECTOR: [u8; 4] = [61u8, 68u8, 174u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `accumulator()` and selector `0x03381154`.
```solidity
function accumulator() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorCall {}
    ///Container type for the return parameters of the [`accumulator()`](accumulatorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct accumulatorReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorCall> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<accumulatorReturn> for UnderlyingRustTuple<'_> {
                fn from(value: accumulatorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for accumulatorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for accumulatorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = accumulatorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "accumulator()";
            const SELECTOR: [u8; 4] = [3u8, 56u8, 17u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appchainId()` and selector `0xd8781342`.
```solidity
function appchainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdCall {}
    ///Container type for the return parameters of the [`appchainId()`](appchainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appchainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainId()";
            const SELECTOR: [u8; 4] = [216u8, 120u8, 19u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEffectivePriority(uint256,uint256,uint256)` and selector `0x83d3c115`.
```solidity
function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityCall {
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEffectivePriority(uint256,uint256,uint256)`](calculateEffectivePriorityCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityCall) -> Self {
                    (
                        value.originalPriority,
                        value.submittedTimestamp,
                        value.currentTimestamp,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        originalPriority: tuple.0,
                        submittedTimestamp: tuple.1,
                        currentTimestamp: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEffectivePriorityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEffectivePriorityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEffectivePriority(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 193u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.submittedTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prependZeroByte(bytes)` and selector `0x366cbab7`.
```solidity
function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteCall {
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`prependZeroByte(bytes)`](prependZeroByteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteCall> for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteCall) -> Self {
                    (value._data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prependZeroByteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for prependZeroByteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prependZeroByteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prependZeroByteReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prependZeroByte(bytes)";
            const SELECTOR: [u8; 4] = [54u8, 108u8, 186u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes,uint256)` and selector `0x1c0b6367`.
```solidity
function processTransaction(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes,uint256)`](processTransaction_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 11u8, 99u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransaction_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes,uint256)` and selector `0x050ec138`.
```solidity
function processTransactionUncompressed(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes,uint256)`](processTransactionUncompressed_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes,uint256)";
            const SELECTOR: [u8; 4] = [5u8, 14u8, 193u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressed_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[],uint256[])` and selector `0x11992f8c`.
```solidity
function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub priorities: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[],uint256[])`](processTransactionsBulk_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Call) -> Self {
                    (value.data, value.priorities)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priorities: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[],uint256[])";
            const SELECTOR: [u8; 4] = [17u8, 153u8, 47u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.priorities),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulk_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) function calls.
    pub enum SyndicateSequencingChainWithDecayingPriorityCalls {
        #[allow(missing_docs)]
        ACCUMULATOR_STORAGE_LOCATION(ACCUMULATOR_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        PRIORITY_DECAY_RATE(PRIORITY_DECAY_RATECall),
        #[allow(missing_docs)]
        accumulator(accumulatorCall),
        #[allow(missing_docs)]
        appchainId(appchainIdCall),
        #[allow(missing_docs)]
        calculateEffectivePriority(calculateEffectivePriorityCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        prependZeroByte(prependZeroByteCall),
        #[allow(missing_docs)]
        processTransaction_0(processTransaction_0Call),
        #[allow(missing_docs)]
        processTransaction_1(processTransaction_1Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_0(processTransactionUncompressed_0Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_1(processTransactionUncompressed_1Call),
        #[allow(missing_docs)]
        processTransactionsBulk_0(processTransactionsBulk_0Call),
        #[allow(missing_docs)]
        processTransactionsBulk_1(processTransactionsBulk_1Call),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [3u8, 56u8, 17u8, 84u8],
            [5u8, 14u8, 193u8, 56u8],
            [17u8, 153u8, 47u8, 140u8],
            [28u8, 11u8, 99u8, 103u8],
            [54u8, 108u8, 186u8, 183u8],
            [61u8, 68u8, 174u8, 139u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [99u8, 217u8, 100u8, 55u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [128u8, 78u8, 81u8, 35u8],
            [131u8, 211u8, 193u8, 21u8],
            [141u8, 165u8, 203u8, 91u8],
            [205u8, 175u8, 185u8, 120u8],
            [212u8, 240u8, 235u8, 77u8],
            [216u8, 120u8, 19u8, 66u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityCalls {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(_) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::PRIORITY_DECAY_RATE(_) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::accumulator(_) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainId(_) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEffectivePriority(_) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prependZeroByte(_) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_0(_) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_1(_) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_0(_) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_1(_) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_0(_) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_1(_) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityCalls,
            >] = &[
                {
                    fn accumulator(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <accumulatorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::accumulator,
                            )
                    }
                    accumulator
                },
                {
                    fn processTransactionUncompressed_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_0,
                            )
                    }
                    processTransactionUncompressed_0
                },
                {
                    fn processTransactionsBulk_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_0,
                            )
                    }
                    processTransactionsBulk_0
                },
                {
                    fn processTransaction_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_0,
                            )
                    }
                    processTransaction_0
                },
                {
                    fn prependZeroByte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <prependZeroByteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::prependZeroByte,
                            )
                    }
                    prependZeroByte
                },
                {
                    fn PRIORITY_DECAY_RATE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::PRIORITY_DECAY_RATE,
                            )
                    }
                    PRIORITY_DECAY_RATE
                },
                {
                    fn processTransaction_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_1,
                            )
                    }
                    processTransaction_1
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::initialize,
                            )
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn ACCUMULATOR_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::ACCUMULATOR_STORAGE_LOCATION,
                            )
                    }
                    ACCUMULATOR_STORAGE_LOCATION
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::isAllowed,
                            )
                    }
                    isAllowed
                },
                {
                    fn processTransactionUncompressed_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_1,
                            )
                    }
                    processTransactionUncompressed_1
                },
                {
                    fn calculateEffectivePriority(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::calculateEffectivePriority,
                            )
                    }
                    calculateEffectivePriority
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::owner,
                            )
                    }
                    owner
                },
                {
                    fn processTransactionsBulk_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_1,
                            )
                    }
                    processTransactionsBulk_1
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn appchainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <appchainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::appchainId,
                            )
                    }
                    appchainId
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ACCUMULATOR_STORAGE_LOCATION(inner) => {
                    <ACCUMULATOR_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::accumulator(inner) => {
                    <accumulatorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) custom errors.
    pub enum SyndicateSequencingChainWithDecayingPriorityErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrSenderNotAllowed(TransactionOrSenderNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [220u8, 116u8, 20u8, 88u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityErrors {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrSenderNotAllowed(_) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityErrors,
            >] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrSenderNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::TransactionOrSenderNotAllowed,
                            )
                    }
                    TransactionOrSenderNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) events.
    pub enum SyndicateSequencingChainWithDecayingPriorityEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed_0(TransactionProcessed_0),
        #[allow(missing_docs)]
        TransactionProcessed_1(TransactionProcessed_1),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_0)
                }
                Some(
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_1)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        >,
    > {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy(provider, _appchainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appchainId)
    }
    /**A [`SyndicateSequencingChainWithDecayingPriority`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChainWithDecayingPriority`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainWithDecayingPriorityInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainWithDecayingPriorityInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _appchainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appchainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
            SyndicateSequencingChainWithDecayingPriorityInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`ACCUMULATOR_STORAGE_LOCATION`] function.
        pub fn ACCUMULATOR_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ACCUMULATOR_STORAGE_LOCATIONCall, N> {
            self.call_builder(
                &ACCUMULATOR_STORAGE_LOCATIONCall {
                },
            )
        }
        ///Creates a new call builder for the [`PRIORITY_DECAY_RATE`] function.
        pub fn PRIORITY_DECAY_RATE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRIORITY_DECAY_RATECall, N> {
            self.call_builder(&PRIORITY_DECAY_RATECall {})
        }
        ///Creates a new call builder for the [`accumulator`] function.
        pub fn accumulator(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, accumulatorCall, N> {
            self.call_builder(&accumulatorCall {})
        }
        ///Creates a new call builder for the [`appchainId`] function.
        pub fn appchainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appchainIdCall, N> {
            self.call_builder(&appchainIdCall {})
        }
        ///Creates a new call builder for the [`calculateEffectivePriority`] function.
        pub fn calculateEffectivePriority(
            &self,
            originalPriority: alloy::sol_types::private::primitives::aliases::U256,
            submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
            currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEffectivePriorityCall, N> {
            self.call_builder(
                &calculateEffectivePriorityCall {
                    originalPriority,
                    submittedTimestamp,
                    currentTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`prependZeroByte`] function.
        pub fn prependZeroByte(
            &self,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, prependZeroByteCall, N> {
            self.call_builder(&prependZeroByteCall { _data })
        }
        ///Creates a new call builder for the [`processTransaction_0`] function.
        pub fn processTransaction_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_0Call, N> {
            self.call_builder(
                &processTransaction_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_1`] function.
        pub fn processTransaction_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_1Call, N> {
            self.call_builder(&processTransaction_1Call { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_0`] function.
        pub fn processTransactionUncompressed_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_0Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_1`] function.
        pub fn processTransactionUncompressed_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_1Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_0`] function.
        pub fn processTransactionsBulk_0(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            priorities: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_0Call, N> {
            self.call_builder(
                &processTransactionsBulk_0Call {
                    data,
                    priorities,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_1`] function.
        pub fn processTransactionsBulk_1(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_1Call, N> {
            self.call_builder(
                &processTransactionsBulk_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_0`] event.
        pub fn TransactionProcessed_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_0, N> {
            self.event_filter::<TransactionProcessed_0>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_1`] event.
        pub fn TransactionProcessed_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_1, N> {
            self.event_filter::<TransactionProcessed_1>()
        }
    }
}
