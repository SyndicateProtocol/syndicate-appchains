/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChainWithDecayingPriority {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrProposerNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);
    event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);

    constructor(uint256 _appChainId);

    function PRIORITY_DECAY_RATE() external view returns (uint256);
    function appChainId() external view returns (uint256);
    function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processBulkTransactions(bytes[] memory data, uint256[] memory priorities) external;
    function processTransaction(bytes memory data, uint256 priority) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data, uint256 priority) external;
    function processTransactionRaw(bytes memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "PRIORITY_DECAY_RATE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEffectivePriority",
    "inputs": [
      {
        "name": "originalPriority",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "submittedTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "priorities",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "originalPriority",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrProposerNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChainWithDecayingPriority {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b61010a565b61002161003d565b61179e6104ce823960805181610764015261179e90f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107611e61803803806100fc8161008c565b9283398101906100cb565b90565b610113906101c2565b565b90565b90565b61012f61012a61013492610115565b610118565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b6101746018602092610137565b61017d81610140565b0190565b6101969060208101905f818303910152610167565b90565b156101a057565b6101a861003d565b62461bcd60e51b8152806101be60048201610181565b0390fd5b6101ca6102e2565b6101e7816101e06101da5f61011b565b916100a5565b1415610199565b608052565b60a01b90565b9061020160ff60a01b916101ec565b9181191691161790565b151590565b6102199061020b565b90565b90565b9061023461022f61023b92610210565b61021c565b82546101f2565b9055565b5f0190565b61024c61003d565b3d5f823e3d90fd5b60018060a01b031690565b61027361026e61027892610254565b610118565b610254565b90565b6102849061025f565b90565b6102909061027b565b90565b5f1b90565b906102a960018060a01b0391610293565b9181191691161790565b6102bc9061027b565b90565b90565b906102d76102d26102de926102b3565b6102bf565b8254610298565b9055565b6102eb3361034f565b6102f65f600161021f565b6102fe61003d565b6101f5810181811060018060401b0382111761034a5761032682916101f5611c6c843961023f565b03905ff080156103455761033c61034391610287565b60016102c2565b565b610244565b610051565b610358906103b0565b565b61036e61036961037392610115565b610118565b610254565b90565b61037f9061035a565b90565b61038b90610254565b90565b61039790610382565b9052565b91906103ae905f6020850194019061038e565b565b806103cb6103c56103c05f610376565b610382565b91610382565b146103db576103d99061046e565b565b6103fe6103e75f610376565b5f918291631e4fbdf760e01b83526004830161039b565b0390fd5b5f1c90565b60018060a01b031690565b61041e61042391610402565b610407565b90565b6104309054610412565b90565b61043c9061025f565b90565b61044890610433565b90565b90565b9061046361045e61046a9261043f565b61044b565b8254610298565b9055565b6104775f610426565b610481825f61044e565b906104b56104af7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361043f565b9161043f565b916104be61003d565b806104c88161023f565b0390a356fe60806040526004361015610013575b610906565b61001d5f3561011c565b80630b83249d146101175780631c0b636714610112578063333d87fe1461010d5780633514d37b146101085780633d44ae8b1461010357806346e2cc09146100fe578063485cc955146100f95780634fac3d44146100f45780635b3cd6e2146100ef578063715018a6146100ea5780637a3979dc146100e557806383470923146100e057806383d3c115146100db5780638da5cb5b146100d6578063d4f0eb4d146100d15763f2fde38b0361000e576108d3565b6108a0565b61084d565b6107f5565b610786565b610729565b61067d565b610648565b610577565b6104a5565b61040a565b6103d5565b610336565b6102cc565b610298565b6101ba565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561017a5781359167ffffffffffffffff831161017557602001926020830284011161017057565b61013c565b610138565b610134565b906020828203126101b0575f82013567ffffffffffffffff81116101ab576101a79201610140565b9091565b610130565b61012c565b5f0190565b346101e9576101d36101cd36600461017f565b90610a3a565b6101db610122565b806101e5816101b5565b0390f35b610128565b909182601f830112156102285781359167ffffffffffffffff831161022357602001926001830284011161021e57565b61013c565b610138565b610134565b90565b6102398161022d565b0361024057565b5f80fd5b9050359061025182610230565b565b91604083830312610293575f83013567ffffffffffffffff811161028e576102808361028b9286016101ee565b939094602001610244565b90565b610130565b61012c565b346102c7576102b16102ab366004610253565b91610bca565b6102b9610122565b806102c3816101b5565b0390f35b610128565b346102fb576102e56102df366004610253565b91610cce565b6102ed610122565b806102f7816101b5565b0390f35b610128565b90602082820312610331575f82013567ffffffffffffffff811161032c5761032892016101ee565b9091565b610130565b61012c565b346103655761034f610349366004610300565b90610d83565b610357610122565b80610361816101b5565b0390f35b610128565b5f91031261037457565b61012c565b90565b90565b61039361038e61039892610379565b61037c565b61022d565b90565b6103a5600a61037f565b90565b6103b061039b565b90565b6103bc9061022d565b9052565b91906103d3905f602085019401906103b3565b565b34610405576103e536600461036a565b6104016103f06103a8565b6103f8610122565b918291826103c0565b0390f35b610128565b346104395761042361041d366004610300565b90610e27565b61042b610122565b80610435816101b5565b0390f35b610128565b60018060a01b031690565b6104529061043e565b90565b61045e81610449565b0361046557565b5f80fd5b9050359061047682610455565b565b91906040838203126104a0578061049461049d925f8601610469565b93602001610469565b90565b61012c565b346104d4576104be6104b8366004610478565b90610fde565b6104c6610122565b806104d0816101b5565b0390f35b610128565b909182601f830112156105135781359167ffffffffffffffff831161050e57602001926020830284011161050957565b61013c565b610138565b610134565b9091604082840312610572575f82013567ffffffffffffffff811161056d5783610543918401610140565b929093602082013567ffffffffffffffff81116105685761056492016104d9565b9091565b610130565b610130565b61012c565b346105a95761059361058a366004610518565b929190916110c1565b61059b610122565b806105a5816101b5565b0390f35b610128565b1c90565b60018060a01b031690565b6105cd9060086105d293026105ae565b6105b2565b90565b906105e091546105bd565b90565b6105ef60015f906105d5565b90565b61060661060161060b9261043e565b61037c565b61043e565b90565b610617906105f2565b90565b6106239061060e565b90565b61062f9061061a565b9052565b9190610646905f60208501940190610626565b565b346106785761065836600461036a565b6106746106636105e3565b61066b610122565b91829182610633565b0390f35b610128565b346106ab5761068d36600461036a565b6106956111e6565b61069d610122565b806106a7816101b5565b0390f35b610128565b916060838303126106fd576106c7825f8501610469565b926106d58360208301610469565b92604082013567ffffffffffffffff81116106f8576106f492016101ee565b9091565b610130565b61012c565b151590565b61071090610702565b9052565b9190610727905f60208501940190610707565b565b3461075d5761075961074861073f3660046106b0565b929190916112e4565b610750610122565b91829182610714565b0390f35b610128565b7f000000000000000000000000000000000000000000000000000000000000000090565b346107b65761079636600461036a565b6107b26107a1610762565b6107a9610122565b918291826103c0565b0390f35b610128565b90916060828403126107f0576107ed6107d6845f8501610244565b936107e48160208601610244565b93604001610244565b90565b61012c565b346108265761082261081161080b3660046107bb565b916113ed565b610819610122565b918291826103c0565b0390f35b610128565b61083490610449565b9052565b919061084b905f6020850194019061082b565b565b3461087d5761085d36600461036a565b610879610868611493565b610870610122565b91829182610838565b0390f35b610128565b9060208282031261089b57610898915f01610469565b90565b61012c565b346108ce576108b86108b3366004610882565b61154c565b6108c0610122565b806108ca816101b5565b0390f35b610128565b34610901576108eb6108e6366004610882565b6115bc565b6108f3610122565b806108fd816101b5565b0390f35b610128565b5f80fd5b5090565b90565b61092561092061092a9261090e565b61037c565b61022d565b90565b6001610939910161022d565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561099e570180359067ffffffffffffffff82116109995760200191600182023603831361099457565b610958565b610954565b610950565b908210156109be5760206109ba920281019061095c565b9091565b61093c565b6109cc9061060e565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610a10610a19602093610a1e93610a07816109cf565b938480936109d3565b958691016109dc565b6109e7565b0190565b610a379160208201915f8184039101526109f1565b90565b610a4581839061090a565b91610a4f5f610911565b5b80610a63610a5d8661022d565b9161022d565b1015610af457610a9190610a87333290610a7f878786916109a3565b9290916112e4565b610a96575b61092d565b610a50565b33610aac610aa6868685916109a3565b9061164a565b90610aec610ada7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926109c3565b92610ae3610122565b91829182610a22565b0390a2610a8c565b50505050565b9190610b17610b11333290868591929091926112e4565b15610702565b610b2657610b2492610b77565b565b5f6361aec64960e11b815280610b3e600482016101b5565b0390fd5b604090610b6e610b63610b759597969460608401908482035f8601526109f1565b9660208301906103b3565b01906103b3565b565b90610b8390339261164a565b914292610bc5610bb37f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2946109c3565b94610bbc610122565b93849384610b42565b0390a2565b90610bd59291610afa565b565b9190610bf4610bee333290868591929091926112e4565b15610702565b610c0357610c0192610c82565b565b5f6361aec64960e11b815280610c1b600482016101b5565b0390fd5b90825f939282370152565b9190610c4481610c3d81610c49956109d3565b8095610c1f565b6109e7565b0190565b610c79610c6e604093610c809698979560608501918583035f870152610c2a565b9660208301906103b3565b01906103b3565b565b90913391929092610cc942610cb77f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2956109c3565b95610cc0610122565b94859485610c4d565b0390a2565b90610cd99291610bd7565b565b90610cf7610cf1333290858591929091926112e4565b15610702565b610d0657610d0491610d3c565b565b5f6361aec64960e11b815280610d1e600482016101b5565b0390fd5b9091610d399260208301925f818503910152610c2a565b90565b339091610d697f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926109c3565b92610d7e610d75610122565b92839283610d22565b0390a2565b90610d8d91610cdb565b565b90610dab610da5333290858591929091926112e4565b15610702565b610dba57610db891610dd6565b565b5f6361aec64960e11b815280610dd2600482016101b5565b0390fd5b90610de290339261164a565b90610e22610e107f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926109c3565b92610e19610122565b91829182610a22565b0390a2565b90610e3191610d8f565b565b90610e4591610e4061168b565b610f51565b565b60a01c90565b60ff1690565b610e5f610e6491610e47565b610e4d565b90565b610e719054610e53565b90565b610e88610e83610e8d9261090e565b61037c565b61043e565b90565b610e9990610e74565b90565b60a01b90565b90610eb160ff60a01b91610e9c565b9181191691161790565b610ec490610702565b90565b90565b90610edf610eda610ee692610ebb565b610ec7565b8254610ea2565b9055565b610ef3906105f2565b90565b610eff90610eea565b90565b5f1b90565b90610f1860018060a01b0391610f02565b9181191691161790565b610f2b90610eea565b90565b90565b90610f46610f41610f4d92610f22565b610f2e565b8254610f07565b9055565b610f5b6001610e67565b610fc35781610f7a610f74610f6f5f610e90565b610449565b91610449565b14610fa757610fa0610f99610fa593610f94600180610eca565b610ef6565b6001610f31565b6115bc565b565b5f632e7f3c7f60e11b815280610fbf600482016101b5565b0390fd5b5f62dc149f60e41b815280610fda600482016101b5565b0390fd5b90610fe891610e33565b565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b6110516032604092610fee565b61105a81610ff7565b0190565b6110739060208101905f818303910152611044565b90565b1561107d57565b611085610122565b62461bcd60e51b81528061109b6004820161105e565b0390fd5b91908110156110af576020020190565b61093c565b356110be81610230565b90565b90926110ce82859061090a565b936110f5856110ef6110e96110e4888790610fea565b61022d565b9161022d565b14611076565b6110fe5f610911565b5b8061111261110c8861022d565b9161022d565b10156111b9576111409061113633329061112e888786916109a3565b9290916112e4565b611145575b61092d565b6110ff565b3361115b611155878685916109a3565b9061164a565b9061117061116b8988869161109f565b6110b4565b42926111b161119f7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2946109c3565b946111a8610122565b93849384610b42565b0390a261113b565b505050505050565b6111c961168b565b6111d16111d3565b565b6111e46111df5f610e90565b6116fc565b565b6111ee6111c1565b565b5f90565b5f1c90565b61120561120a916111f4565b6105b2565b90565b61121790546111f9565b90565b634e487b7160e01b5f52604160045260245ffd5b90611238906109e7565b810190811067ffffffffffffffff82111761125257604052565b61121a565b60e01b90565b61126681610702565b0361126d57565b5f80fd5b9050519061127e8261125d565b565b9060208282031261129957611296915f01611271565b90565b61012c565b6112c46112d195939492946112ba60608401965f85019061082b565b602083019061082b565b6040818503910152610c2a565b90565b6112dc610122565b3d5f823e3d90fd5b92611327602093946112f46111f0565b5061133261130a611305600161120d565b61061a565b93637a3979dc92959761131b610122565b98899788968796611257565b86526004860161129e565b03915afa908115611376575f91611348575b5090565b611369915060203d811161136f575b611361818361122e565b810190611280565b5f611344565b503d611357565b6112d4565b5f90565b634e487b7160e01b5f52601160045260245ffd5b6113a26113a89193929361022d565b9261022d565b82039182116113b357565b61137f565b6113c76113cd9193929361022d565b9261022d565b916113d983820261022d565b9281840414901517156113e857565b61137f565b916113f661137b565b508061140a6114048461022d565b9161022d565b111561145e5761142b9161141d91611393565b61142561039b565b906113b8565b8061143e6114388461022d565b9161022d565b10156114505761144d91611393565b90565b505061145b5f610911565b90565b505090565b5f90565b60018060a01b031690565b61147e611483916111f4565b611467565b90565b6114909054611472565b90565b61149b611463565b506114a55f611486565b90565b6114b9906114b461168b565b6114bb565b565b806114d66114d06114cb5f610e90565b610449565b91610449565b14611530576114ee6114e782610ef6565b6001610f31565b6115187f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916109c3565b90611521610122565b8061152b816101b5565b0390a2565b5f632e7f3c7f60e11b815280611548600482016101b5565b0390fd5b611555906114a8565b565b6115689061156361168b565b61156a565b565b8061158561157f61157a5f610e90565b610449565b91610449565b1461159557611593906116fc565b565b6115b86115a15f610e90565b5f918291631e4fbdf760e01b835260048301610838565b0390fd5b6115c590611557565b565b606090565b60ff60f81b1690565b60f81b90565b6115ef6115ea6115f49261090e565b6115d5565b6115cc565b90565b90565b61160661160b916115cc565b6115f7565b9052565b905090565b9091826116248161162b9361160f565b8093610c1f565b0190565b8061164060019261164796946115fa565b0191611614565b90565b611688906116566115c7565b506116796116635f6115db565b919361166d610122565b9485936020850161162f565b6020820181038252038261122e565b90565b611693611493565b6116ac6116a66116a161175b565b610449565b91610449565b036116b357565b6116d56116be61175b565b5f91829163118cdaa760e01b835260048301610838565b0390fd5b90565b906116f16116ec6116f8926109c3565b6116d9565b8254610f07565b9055565b6117055f611486565b61170f825f6116dc565b9061174361173d7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936109c3565b916109c3565b9161174c610122565b80611756816101b5565b0390a3565b611763611463565b50339056fea264697066735822122011e74c004bf267dbc721147a1c78f81a4b5f21d8524a787d01348f613aa342e964736f6c634300081d0033608060405234601c57600e6020565b6101ca61002b82396101ca90f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056fea26469706673582212205baa94c760d01094dc1eb4e8e08181ad9e7e2911290105d06b0e345979f7b0c664736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\nV[a\0!a\0=V[a\x17\x9Ea\x04\xCE\x829`\x80Q\x81a\x07d\x01Ra\x17\x9E\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a\x1Ea\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[a\x01\x13\x90a\x01\xC2V[V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01t`\x18` \x92a\x017V[a\x01}\x81a\x01@V[\x01\x90V[a\x01\x96\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01gV[\x90V[\x15a\x01\xA0WV[a\x01\xA8a\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xBE`\x04\x82\x01a\x01\x81V[\x03\x90\xFD[a\x01\xCAa\x02\xE2V[a\x01\xE7\x81a\x01\xE0a\x01\xDA_a\x01\x1BV[\x91a\0\xA5V[\x14\x15a\x01\x99V[`\x80RV[`\xA0\x1B\x90V[\x90a\x02\x01`\xFF`\xA0\x1B\x91a\x01\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x19\x90a\x02\x0BV[\x90V[\x90V[\x90a\x024a\x02/a\x02;\x92a\x02\x10V[a\x02\x1CV[\x82Ta\x01\xF2V[\x90UV[_\x01\x90V[a\x02La\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02sa\x02na\x02x\x92a\x02TV[a\x01\x18V[a\x02TV[\x90V[a\x02\x84\x90a\x02_V[\x90V[a\x02\x90\x90a\x02{V[\x90V[_\x1B\x90V[\x90a\x02\xA9`\x01\x80`\xA0\x1B\x03\x91a\x02\x93V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xBC\x90a\x02{V[\x90V[\x90V[\x90a\x02\xD7a\x02\xD2a\x02\xDE\x92a\x02\xB3V[a\x02\xBFV[\x82Ta\x02\x98V[\x90UV[a\x02\xEB3a\x03OV[a\x02\xF6_`\x01a\x02\x1FV[a\x02\xFEa\0=V[a\x01\xF5\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03JWa\x03&\x82\x91a\x01\xF5a\x1Cl\x849a\x02?V[\x03\x90_\xF0\x80\x15a\x03EWa\x03<a\x03C\x91a\x02\x87V[`\x01a\x02\xC2V[V[a\x02DV[a\0QV[a\x03X\x90a\x03\xB0V[V[a\x03na\x03ia\x03s\x92a\x01\x15V[a\x01\x18V[a\x02TV[\x90V[a\x03\x7F\x90a\x03ZV[\x90V[a\x03\x8B\x90a\x02TV[\x90V[a\x03\x97\x90a\x03\x82V[\x90RV[\x91\x90a\x03\xAE\x90_` \x85\x01\x94\x01\x90a\x03\x8EV[V[\x80a\x03\xCBa\x03\xC5a\x03\xC0_a\x03vV[a\x03\x82V[\x91a\x03\x82V[\x14a\x03\xDBWa\x03\xD9\x90a\x04nV[V[a\x03\xFEa\x03\xE7_a\x03vV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x9BV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\x1Ea\x04#\x91a\x04\x02V[a\x04\x07V[\x90V[a\x040\x90Ta\x04\x12V[\x90V[a\x04<\x90a\x02_V[\x90V[a\x04H\x90a\x043V[\x90V[\x90V[\x90a\x04ca\x04^a\x04j\x92a\x04?V[a\x04KV[\x82Ta\x02\x98V[\x90UV[a\x04w_a\x04&V[a\x04\x81\x82_a\x04NV[\x90a\x04\xB5a\x04\xAF\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04?V[\x91a\x04?V[\x91a\x04\xBEa\0=V[\x80a\x04\xC8\x81a\x02?V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\t\x06V[a\0\x1D_5a\x01\x1CV[\x80c\x0B\x83$\x9D\x14a\x01\x17W\x80c\x1C\x0Bcg\x14a\x01\x12W\x80c3=\x87\xFE\x14a\x01\rW\x80c5\x14\xD3{\x14a\x01\x08W\x80c=D\xAE\x8B\x14a\x01\x03W\x80cF\xE2\xCC\t\x14a\0\xFEW\x80cH\\\xC9U\x14a\0\xF9W\x80cO\xAC=D\x14a\0\xF4W\x80c[<\xD6\xE2\x14a\0\xEFW\x80cqP\x18\xA6\x14a\0\xEAW\x80cz9y\xDC\x14a\0\xE5W\x80c\x83G\t#\x14a\0\xE0W\x80c\x83\xD3\xC1\x15\x14a\0\xDBW\x80c\x8D\xA5\xCB[\x14a\0\xD6W\x80c\xD4\xF0\xEBM\x14a\0\xD1Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x08\xD3V[a\x08\xA0V[a\x08MV[a\x07\xF5V[a\x07\x86V[a\x07)V[a\x06}V[a\x06HV[a\x05wV[a\x04\xA5V[a\x04\nV[a\x03\xD5V[a\x036V[a\x02\xCCV[a\x02\x98V[a\x01\xBAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01zW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01uW` \x01\x92` \x83\x02\x84\x01\x11a\x01pWV[a\x01<V[a\x018V[a\x014V[\x90` \x82\x82\x03\x12a\x01\xB0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xABWa\x01\xA7\x92\x01a\x01@V[\x90\x91V[a\x010V[a\x01,V[_\x01\x90V[4a\x01\xE9Wa\x01\xD3a\x01\xCD6`\x04a\x01\x7FV[\x90a\n:V[a\x01\xDBa\x01\"V[\x80a\x01\xE5\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02(W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02#W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\x1EWV[a\x01<V[a\x018V[a\x014V[\x90V[a\x029\x81a\x02-V[\x03a\x02@WV[_\x80\xFD[\x90P5\x90a\x02Q\x82a\x020V[V[\x91`@\x83\x83\x03\x12a\x02\x93W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8EWa\x02\x80\x83a\x02\x8B\x92\x86\x01a\x01\xEEV[\x93\x90\x94` \x01a\x02DV[\x90V[a\x010V[a\x01,V[4a\x02\xC7Wa\x02\xB1a\x02\xAB6`\x04a\x02SV[\x91a\x0B\xCAV[a\x02\xB9a\x01\"V[\x80a\x02\xC3\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[4a\x02\xFBWa\x02\xE5a\x02\xDF6`\x04a\x02SV[\x91a\x0C\xCEV[a\x02\xEDa\x01\"V[\x80a\x02\xF7\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x031W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03,Wa\x03(\x92\x01a\x01\xEEV[\x90\x91V[a\x010V[a\x01,V[4a\x03eWa\x03Oa\x03I6`\x04a\x03\0V[\x90a\r\x83V[a\x03Wa\x01\"V[\x80a\x03a\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[_\x91\x03\x12a\x03tWV[a\x01,V[\x90V[\x90V[a\x03\x93a\x03\x8Ea\x03\x98\x92a\x03yV[a\x03|V[a\x02-V[\x90V[a\x03\xA5`\na\x03\x7FV[\x90V[a\x03\xB0a\x03\x9BV[\x90V[a\x03\xBC\x90a\x02-V[\x90RV[\x91\x90a\x03\xD3\x90_` \x85\x01\x94\x01\x90a\x03\xB3V[V[4a\x04\x05Wa\x03\xE56`\x04a\x03jV[a\x04\x01a\x03\xF0a\x03\xA8V[a\x03\xF8a\x01\"V[\x91\x82\x91\x82a\x03\xC0V[\x03\x90\xF3[a\x01(V[4a\x049Wa\x04#a\x04\x1D6`\x04a\x03\0V[\x90a\x0E'V[a\x04+a\x01\"V[\x80a\x045\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04R\x90a\x04>V[\x90V[a\x04^\x81a\x04IV[\x03a\x04eWV[_\x80\xFD[\x90P5\x90a\x04v\x82a\x04UV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xA0W\x80a\x04\x94a\x04\x9D\x92_\x86\x01a\x04iV[\x93` \x01a\x04iV[\x90V[a\x01,V[4a\x04\xD4Wa\x04\xBEa\x04\xB86`\x04a\x04xV[\x90a\x0F\xDEV[a\x04\xC6a\x01\"V[\x80a\x04\xD0\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x13W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x0EW` \x01\x92` \x83\x02\x84\x01\x11a\x05\tWV[a\x01<V[a\x018V[a\x014V[\x90\x91`@\x82\x84\x03\x12a\x05rW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05mW\x83a\x05C\x91\x84\x01a\x01@V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05hWa\x05d\x92\x01a\x04\xD9V[\x90\x91V[a\x010V[a\x010V[a\x01,V[4a\x05\xA9Wa\x05\x93a\x05\x8A6`\x04a\x05\x18V[\x92\x91\x90\x91a\x10\xC1V[a\x05\x9Ba\x01\"V[\x80a\x05\xA5\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xCD\x90`\x08a\x05\xD2\x93\x02a\x05\xAEV[a\x05\xB2V[\x90V[\x90a\x05\xE0\x91Ta\x05\xBDV[\x90V[a\x05\xEF`\x01_\x90a\x05\xD5V[\x90V[a\x06\x06a\x06\x01a\x06\x0B\x92a\x04>V[a\x03|V[a\x04>V[\x90V[a\x06\x17\x90a\x05\xF2V[\x90V[a\x06#\x90a\x06\x0EV[\x90V[a\x06/\x90a\x06\x1AV[\x90RV[\x91\x90a\x06F\x90_` \x85\x01\x94\x01\x90a\x06&V[V[4a\x06xWa\x06X6`\x04a\x03jV[a\x06ta\x06ca\x05\xE3V[a\x06ka\x01\"V[\x91\x82\x91\x82a\x063V[\x03\x90\xF3[a\x01(V[4a\x06\xABWa\x06\x8D6`\x04a\x03jV[a\x06\x95a\x11\xE6V[a\x06\x9Da\x01\"V[\x80a\x06\xA7\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x91``\x83\x83\x03\x12a\x06\xFDWa\x06\xC7\x82_\x85\x01a\x04iV[\x92a\x06\xD5\x83` \x83\x01a\x04iV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xF8Wa\x06\xF4\x92\x01a\x01\xEEV[\x90\x91V[a\x010V[a\x01,V[\x15\x15\x90V[a\x07\x10\x90a\x07\x02V[\x90RV[\x91\x90a\x07'\x90_` \x85\x01\x94\x01\x90a\x07\x07V[V[4a\x07]Wa\x07Ya\x07Ha\x07?6`\x04a\x06\xB0V[\x92\x91\x90\x91a\x12\xE4V[a\x07Pa\x01\"V[\x91\x82\x91\x82a\x07\x14V[\x03\x90\xF3[a\x01(V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x07\xB6Wa\x07\x966`\x04a\x03jV[a\x07\xB2a\x07\xA1a\x07bV[a\x07\xA9a\x01\"V[\x91\x82\x91\x82a\x03\xC0V[\x03\x90\xF3[a\x01(V[\x90\x91``\x82\x84\x03\x12a\x07\xF0Wa\x07\xEDa\x07\xD6\x84_\x85\x01a\x02DV[\x93a\x07\xE4\x81` \x86\x01a\x02DV[\x93`@\x01a\x02DV[\x90V[a\x01,V[4a\x08&Wa\x08\"a\x08\x11a\x08\x0B6`\x04a\x07\xBBV[\x91a\x13\xEDV[a\x08\x19a\x01\"V[\x91\x82\x91\x82a\x03\xC0V[\x03\x90\xF3[a\x01(V[a\x084\x90a\x04IV[\x90RV[\x91\x90a\x08K\x90_` \x85\x01\x94\x01\x90a\x08+V[V[4a\x08}Wa\x08]6`\x04a\x03jV[a\x08ya\x08ha\x14\x93V[a\x08pa\x01\"V[\x91\x82\x91\x82a\x088V[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x08\x9BWa\x08\x98\x91_\x01a\x04iV[\x90V[a\x01,V[4a\x08\xCEWa\x08\xB8a\x08\xB36`\x04a\x08\x82V[a\x15LV[a\x08\xC0a\x01\"V[\x80a\x08\xCA\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[4a\t\x01Wa\x08\xEBa\x08\xE66`\x04a\x08\x82V[a\x15\xBCV[a\x08\xF3a\x01\"V[\x80a\x08\xFD\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[_\x80\xFD[P\x90V[\x90V[a\t%a\t a\t*\x92a\t\x0EV[a\x03|V[a\x02-V[\x90V[`\x01a\t9\x91\x01a\x02-V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\t\x9EW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\t\x99W` \x01\x91`\x01\x82\x026\x03\x83\x13a\t\x94WV[a\tXV[a\tTV[a\tPV[\x90\x82\x10\x15a\t\xBEW` a\t\xBA\x92\x02\x81\x01\x90a\t\\V[\x90\x91V[a\t<V[a\t\xCC\x90a\x06\x0EV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\n\x10a\n\x19` \x93a\n\x1E\x93a\n\x07\x81a\t\xCFV[\x93\x84\x80\x93a\t\xD3V[\x95\x86\x91\x01a\t\xDCV[a\t\xE7V[\x01\x90V[a\n7\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\t\xF1V[\x90V[a\nE\x81\x83\x90a\t\nV[\x91a\nO_a\t\x11V[[\x80a\nca\n]\x86a\x02-V[\x91a\x02-V[\x10\x15a\n\xF4Wa\n\x91\x90a\n\x8732\x90a\n\x7F\x87\x87\x86\x91a\t\xA3V[\x92\x90\x91a\x12\xE4V[a\n\x96W[a\t-V[a\nPV[3a\n\xACa\n\xA6\x86\x86\x85\x91a\t\xA3V[\x90a\x16JV[\x90a\n\xECa\n\xDA\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\t\xC3V[\x92a\n\xE3a\x01\"V[\x91\x82\x91\x82a\n\"V[\x03\x90\xA2a\n\x8CV[PPPPV[\x91\x90a\x0B\x17a\x0B\x1132\x90\x86\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\x0B&Wa\x0B$\x92a\x0BwV[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0B>`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[`@\x90a\x0Bna\x0Bca\x0Bu\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\t\xF1V[\x96` \x83\x01\x90a\x03\xB3V[\x01\x90a\x03\xB3V[V[\x90a\x0B\x83\x903\x92a\x16JV[\x91B\x92a\x0B\xC5a\x0B\xB3\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\t\xC3V[\x94a\x0B\xBCa\x01\"V[\x93\x84\x93\x84a\x0BBV[\x03\x90\xA2V[\x90a\x0B\xD5\x92\x91a\n\xFAV[V[\x91\x90a\x0B\xF4a\x0B\xEE32\x90\x86\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\x0C\x03Wa\x0C\x01\x92a\x0C\x82V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0C\x1B`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0CD\x81a\x0C=\x81a\x0CI\x95a\t\xD3V[\x80\x95a\x0C\x1FV[a\t\xE7V[\x01\x90V[a\x0Cya\x0Cn`@\x93a\x0C\x80\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0C*V[\x96` \x83\x01\x90a\x03\xB3V[\x01\x90a\x03\xB3V[V[\x90\x913\x91\x92\x90\x92a\x0C\xC9Ba\x0C\xB7\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\t\xC3V[\x95a\x0C\xC0a\x01\"V[\x94\x85\x94\x85a\x0CMV[\x03\x90\xA2V[\x90a\x0C\xD9\x92\x91a\x0B\xD7V[V[\x90a\x0C\xF7a\x0C\xF132\x90\x85\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\r\x06Wa\r\x04\x91a\r<V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\r\x1E`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90\x91a\r9\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0C*V[\x90V[3\x90\x91a\ri\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\t\xC3V[\x92a\r~a\rua\x01\"V[\x92\x83\x92\x83a\r\"V[\x03\x90\xA2V[\x90a\r\x8D\x91a\x0C\xDBV[V[\x90a\r\xABa\r\xA532\x90\x85\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\r\xBAWa\r\xB8\x91a\r\xD6V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\r\xD2`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90a\r\xE2\x903\x92a\x16JV[\x90a\x0E\"a\x0E\x10\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\t\xC3V[\x92a\x0E\x19a\x01\"V[\x91\x82\x91\x82a\n\"V[\x03\x90\xA2V[\x90a\x0E1\x91a\r\x8FV[V[\x90a\x0EE\x91a\x0E@a\x16\x8BV[a\x0FQV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0E_a\x0Ed\x91a\x0EGV[a\x0EMV[\x90V[a\x0Eq\x90Ta\x0ESV[\x90V[a\x0E\x88a\x0E\x83a\x0E\x8D\x92a\t\x0EV[a\x03|V[a\x04>V[\x90V[a\x0E\x99\x90a\x0EtV[\x90V[`\xA0\x1B\x90V[\x90a\x0E\xB1`\xFF`\xA0\x1B\x91a\x0E\x9CV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xC4\x90a\x07\x02V[\x90V[\x90V[\x90a\x0E\xDFa\x0E\xDAa\x0E\xE6\x92a\x0E\xBBV[a\x0E\xC7V[\x82Ta\x0E\xA2V[\x90UV[a\x0E\xF3\x90a\x05\xF2V[\x90V[a\x0E\xFF\x90a\x0E\xEAV[\x90V[_\x1B\x90V[\x90a\x0F\x18`\x01\x80`\xA0\x1B\x03\x91a\x0F\x02V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F+\x90a\x0E\xEAV[\x90V[\x90V[\x90a\x0FFa\x0FAa\x0FM\x92a\x0F\"V[a\x0F.V[\x82Ta\x0F\x07V[\x90UV[a\x0F[`\x01a\x0EgV[a\x0F\xC3W\x81a\x0Fza\x0Fta\x0Fo_a\x0E\x90V[a\x04IV[\x91a\x04IV[\x14a\x0F\xA7Wa\x0F\xA0a\x0F\x99a\x0F\xA5\x93a\x0F\x94`\x01\x80a\x0E\xCAV[a\x0E\xF6V[`\x01a\x0F1V[a\x15\xBCV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0F\xBF`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0F\xDA`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90a\x0F\xE8\x91a\x0E3V[V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x10Q`2`@\x92a\x0F\xEEV[a\x10Z\x81a\x0F\xF7V[\x01\x90V[a\x10s\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x10DV[\x90V[\x15a\x10}WV[a\x10\x85a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10\x9B`\x04\x82\x01a\x10^V[\x03\x90\xFD[\x91\x90\x81\x10\x15a\x10\xAFW` \x02\x01\x90V[a\t<V[5a\x10\xBE\x81a\x020V[\x90V[\x90\x92a\x10\xCE\x82\x85\x90a\t\nV[\x93a\x10\xF5\x85a\x10\xEFa\x10\xE9a\x10\xE4\x88\x87\x90a\x0F\xEAV[a\x02-V[\x91a\x02-V[\x14a\x10vV[a\x10\xFE_a\t\x11V[[\x80a\x11\x12a\x11\x0C\x88a\x02-V[\x91a\x02-V[\x10\x15a\x11\xB9Wa\x11@\x90a\x11632\x90a\x11.\x88\x87\x86\x91a\t\xA3V[\x92\x90\x91a\x12\xE4V[a\x11EW[a\t-V[a\x10\xFFV[3a\x11[a\x11U\x87\x86\x85\x91a\t\xA3V[\x90a\x16JV[\x90a\x11pa\x11k\x89\x88\x86\x91a\x10\x9FV[a\x10\xB4V[B\x92a\x11\xB1a\x11\x9F\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\t\xC3V[\x94a\x11\xA8a\x01\"V[\x93\x84\x93\x84a\x0BBV[\x03\x90\xA2a\x11;V[PPPPPPV[a\x11\xC9a\x16\x8BV[a\x11\xD1a\x11\xD3V[V[a\x11\xE4a\x11\xDF_a\x0E\x90V[a\x16\xFCV[V[a\x11\xEEa\x11\xC1V[V[_\x90V[_\x1C\x90V[a\x12\x05a\x12\n\x91a\x11\xF4V[a\x05\xB2V[\x90V[a\x12\x17\x90Ta\x11\xF9V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x128\x90a\t\xE7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12RW`@RV[a\x12\x1AV[`\xE0\x1B\x90V[a\x12f\x81a\x07\x02V[\x03a\x12mWV[_\x80\xFD[\x90PQ\x90a\x12~\x82a\x12]V[V[\x90` \x82\x82\x03\x12a\x12\x99Wa\x12\x96\x91_\x01a\x12qV[\x90V[a\x01,V[a\x12\xC4a\x12\xD1\x95\x93\x94\x92\x94a\x12\xBA``\x84\x01\x96_\x85\x01\x90a\x08+V[` \x83\x01\x90a\x08+V[`@\x81\x85\x03\x91\x01Ra\x0C*V[\x90V[a\x12\xDCa\x01\"V[=_\x82>=\x90\xFD[\x92a\x13'` \x93\x94a\x12\xF4a\x11\xF0V[Pa\x132a\x13\na\x13\x05`\x01a\x12\rV[a\x06\x1AV[\x93cz9y\xDC\x92\x95\x97a\x13\x1Ba\x01\"V[\x98\x89\x97\x88\x96\x87\x96a\x12WV[\x86R`\x04\x86\x01a\x12\x9EV[\x03\x91Z\xFA\x90\x81\x15a\x13vW_\x91a\x13HW[P\x90V[a\x13i\x91P` =\x81\x11a\x13oW[a\x13a\x81\x83a\x12.V[\x81\x01\x90a\x12\x80V[_a\x13DV[P=a\x13WV[a\x12\xD4V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\xA2a\x13\xA8\x91\x93\x92\x93a\x02-V[\x92a\x02-V[\x82\x03\x91\x82\x11a\x13\xB3WV[a\x13\x7FV[a\x13\xC7a\x13\xCD\x91\x93\x92\x93a\x02-V[\x92a\x02-V[\x91a\x13\xD9\x83\x82\x02a\x02-V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x13\xE8WV[a\x13\x7FV[\x91a\x13\xF6a\x13{V[P\x80a\x14\na\x14\x04\x84a\x02-V[\x91a\x02-V[\x11\x15a\x14^Wa\x14+\x91a\x14\x1D\x91a\x13\x93V[a\x14%a\x03\x9BV[\x90a\x13\xB8V[\x80a\x14>a\x148\x84a\x02-V[\x91a\x02-V[\x10\x15a\x14PWa\x14M\x91a\x13\x93V[\x90V[PPa\x14[_a\t\x11V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x14~a\x14\x83\x91a\x11\xF4V[a\x14gV[\x90V[a\x14\x90\x90Ta\x14rV[\x90V[a\x14\x9Ba\x14cV[Pa\x14\xA5_a\x14\x86V[\x90V[a\x14\xB9\x90a\x14\xB4a\x16\x8BV[a\x14\xBBV[V[\x80a\x14\xD6a\x14\xD0a\x14\xCB_a\x0E\x90V[a\x04IV[\x91a\x04IV[\x14a\x150Wa\x14\xEEa\x14\xE7\x82a\x0E\xF6V[`\x01a\x0F1V[a\x15\x18\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\t\xC3V[\x90a\x15!a\x01\"V[\x80a\x15+\x81a\x01\xB5V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x15H`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[a\x15U\x90a\x14\xA8V[V[a\x15h\x90a\x15ca\x16\x8BV[a\x15jV[V[\x80a\x15\x85a\x15\x7Fa\x15z_a\x0E\x90V[a\x04IV[\x91a\x04IV[\x14a\x15\x95Wa\x15\x93\x90a\x16\xFCV[V[a\x15\xB8a\x15\xA1_a\x0E\x90V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x088V[\x03\x90\xFD[a\x15\xC5\x90a\x15WV[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x15\xEFa\x15\xEAa\x15\xF4\x92a\t\x0EV[a\x15\xD5V[a\x15\xCCV[\x90V[\x90V[a\x16\x06a\x16\x0B\x91a\x15\xCCV[a\x15\xF7V[\x90RV[\x90P\x90V[\x90\x91\x82a\x16$\x81a\x16+\x93a\x16\x0FV[\x80\x93a\x0C\x1FV[\x01\x90V[\x80a\x16@`\x01\x92a\x16G\x96\x94a\x15\xFAV[\x01\x91a\x16\x14V[\x90V[a\x16\x88\x90a\x16Va\x15\xC7V[Pa\x16ya\x16c_a\x15\xDBV[\x91\x93a\x16ma\x01\"V[\x94\x85\x93` \x85\x01a\x16/V[` \x82\x01\x81\x03\x82R\x03\x82a\x12.V[\x90V[a\x16\x93a\x14\x93V[a\x16\xACa\x16\xA6a\x16\xA1a\x17[V[a\x04IV[\x91a\x04IV[\x03a\x16\xB3WV[a\x16\xD5a\x16\xBEa\x17[V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x088V[\x03\x90\xFD[\x90V[\x90a\x16\xF1a\x16\xECa\x16\xF8\x92a\t\xC3V[a\x16\xD9V[\x82Ta\x0F\x07V[\x90UV[a\x17\x05_a\x14\x86V[a\x17\x0F\x82_a\x16\xDCV[\x90a\x17Ca\x17=\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\t\xC3V[\x91a\t\xC3V[\x91a\x17La\x01\"V[\x80a\x17V\x81a\x01\xB5V[\x03\x90\xA3V[a\x17ca\x14cV[P3\x90V\xFE\xA2dipfsX\"\x12 \x11\xE7L\0K\xF2g\xDB\xC7!\x14z\x1Cx\xF8\x1AK_!\xD8RJx}\x014\x8Fa:\xA3B\xE9dsolcC\0\x08\x1D\x003`\x80`@R4`\x1CW`\x0E` V[a\x01\xCAa\0+\x829a\x01\xCA\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V\xFE\xA2dipfsX\"\x12 [\xAA\x94\xC7`\xD0\x10\x94\xDC\x1E\xB4\xE8\xE0\x81\x81\xAD\x9E~)\x11)\x01\x05\xD0k\x0E4Yy\xF7\xB0\xC6dsolcC\0\x08\x1D\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610906565b61001d5f3561011c565b80630b83249d146101175780631c0b636714610112578063333d87fe1461010d5780633514d37b146101085780633d44ae8b1461010357806346e2cc09146100fe578063485cc955146100f95780634fac3d44146100f45780635b3cd6e2146100ef578063715018a6146100ea5780637a3979dc146100e557806383470923146100e057806383d3c115146100db5780638da5cb5b146100d6578063d4f0eb4d146100d15763f2fde38b0361000e576108d3565b6108a0565b61084d565b6107f5565b610786565b610729565b61067d565b610648565b610577565b6104a5565b61040a565b6103d5565b610336565b6102cc565b610298565b6101ba565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f8301121561017a5781359167ffffffffffffffff831161017557602001926020830284011161017057565b61013c565b610138565b610134565b906020828203126101b0575f82013567ffffffffffffffff81116101ab576101a79201610140565b9091565b610130565b61012c565b5f0190565b346101e9576101d36101cd36600461017f565b90610a3a565b6101db610122565b806101e5816101b5565b0390f35b610128565b909182601f830112156102285781359167ffffffffffffffff831161022357602001926001830284011161021e57565b61013c565b610138565b610134565b90565b6102398161022d565b0361024057565b5f80fd5b9050359061025182610230565b565b91604083830312610293575f83013567ffffffffffffffff811161028e576102808361028b9286016101ee565b939094602001610244565b90565b610130565b61012c565b346102c7576102b16102ab366004610253565b91610bca565b6102b9610122565b806102c3816101b5565b0390f35b610128565b346102fb576102e56102df366004610253565b91610cce565b6102ed610122565b806102f7816101b5565b0390f35b610128565b90602082820312610331575f82013567ffffffffffffffff811161032c5761032892016101ee565b9091565b610130565b61012c565b346103655761034f610349366004610300565b90610d83565b610357610122565b80610361816101b5565b0390f35b610128565b5f91031261037457565b61012c565b90565b90565b61039361038e61039892610379565b61037c565b61022d565b90565b6103a5600a61037f565b90565b6103b061039b565b90565b6103bc9061022d565b9052565b91906103d3905f602085019401906103b3565b565b34610405576103e536600461036a565b6104016103f06103a8565b6103f8610122565b918291826103c0565b0390f35b610128565b346104395761042361041d366004610300565b90610e27565b61042b610122565b80610435816101b5565b0390f35b610128565b60018060a01b031690565b6104529061043e565b90565b61045e81610449565b0361046557565b5f80fd5b9050359061047682610455565b565b91906040838203126104a0578061049461049d925f8601610469565b93602001610469565b90565b61012c565b346104d4576104be6104b8366004610478565b90610fde565b6104c6610122565b806104d0816101b5565b0390f35b610128565b909182601f830112156105135781359167ffffffffffffffff831161050e57602001926020830284011161050957565b61013c565b610138565b610134565b9091604082840312610572575f82013567ffffffffffffffff811161056d5783610543918401610140565b929093602082013567ffffffffffffffff81116105685761056492016104d9565b9091565b610130565b610130565b61012c565b346105a95761059361058a366004610518565b929190916110c1565b61059b610122565b806105a5816101b5565b0390f35b610128565b1c90565b60018060a01b031690565b6105cd9060086105d293026105ae565b6105b2565b90565b906105e091546105bd565b90565b6105ef60015f906105d5565b90565b61060661060161060b9261043e565b61037c565b61043e565b90565b610617906105f2565b90565b6106239061060e565b90565b61062f9061061a565b9052565b9190610646905f60208501940190610626565b565b346106785761065836600461036a565b6106746106636105e3565b61066b610122565b91829182610633565b0390f35b610128565b346106ab5761068d36600461036a565b6106956111e6565b61069d610122565b806106a7816101b5565b0390f35b610128565b916060838303126106fd576106c7825f8501610469565b926106d58360208301610469565b92604082013567ffffffffffffffff81116106f8576106f492016101ee565b9091565b610130565b61012c565b151590565b61071090610702565b9052565b9190610727905f60208501940190610707565b565b3461075d5761075961074861073f3660046106b0565b929190916112e4565b610750610122565b91829182610714565b0390f35b610128565b7f000000000000000000000000000000000000000000000000000000000000000090565b346107b65761079636600461036a565b6107b26107a1610762565b6107a9610122565b918291826103c0565b0390f35b610128565b90916060828403126107f0576107ed6107d6845f8501610244565b936107e48160208601610244565b93604001610244565b90565b61012c565b346108265761082261081161080b3660046107bb565b916113ed565b610819610122565b918291826103c0565b0390f35b610128565b61083490610449565b9052565b919061084b905f6020850194019061082b565b565b3461087d5761085d36600461036a565b610879610868611493565b610870610122565b91829182610838565b0390f35b610128565b9060208282031261089b57610898915f01610469565b90565b61012c565b346108ce576108b86108b3366004610882565b61154c565b6108c0610122565b806108ca816101b5565b0390f35b610128565b34610901576108eb6108e6366004610882565b6115bc565b6108f3610122565b806108fd816101b5565b0390f35b610128565b5f80fd5b5090565b90565b61092561092061092a9261090e565b61037c565b61022d565b90565b6001610939910161022d565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b90359060016020038136030382121561099e570180359067ffffffffffffffff82116109995760200191600182023603831361099457565b610958565b610954565b610950565b908210156109be5760206109ba920281019061095c565b9091565b61093c565b6109cc9061060e565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610a10610a19602093610a1e93610a07816109cf565b938480936109d3565b958691016109dc565b6109e7565b0190565b610a379160208201915f8184039101526109f1565b90565b610a4581839061090a565b91610a4f5f610911565b5b80610a63610a5d8661022d565b9161022d565b1015610af457610a9190610a87333290610a7f878786916109a3565b9290916112e4565b610a96575b61092d565b610a50565b33610aac610aa6868685916109a3565b9061164a565b90610aec610ada7f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926109c3565b92610ae3610122565b91829182610a22565b0390a2610a8c565b50505050565b9190610b17610b11333290868591929091926112e4565b15610702565b610b2657610b2492610b77565b565b5f6361aec64960e11b815280610b3e600482016101b5565b0390fd5b604090610b6e610b63610b759597969460608401908482035f8601526109f1565b9660208301906103b3565b01906103b3565b565b90610b8390339261164a565b914292610bc5610bb37f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2946109c3565b94610bbc610122565b93849384610b42565b0390a2565b90610bd59291610afa565b565b9190610bf4610bee333290868591929091926112e4565b15610702565b610c0357610c0192610c82565b565b5f6361aec64960e11b815280610c1b600482016101b5565b0390fd5b90825f939282370152565b9190610c4481610c3d81610c49956109d3565b8095610c1f565b6109e7565b0190565b610c79610c6e604093610c809698979560608501918583035f870152610c2a565b9660208301906103b3565b01906103b3565b565b90913391929092610cc942610cb77f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2956109c3565b95610cc0610122565b94859485610c4d565b0390a2565b90610cd99291610bd7565b565b90610cf7610cf1333290858591929091926112e4565b15610702565b610d0657610d0491610d3c565b565b5f6361aec64960e11b815280610d1e600482016101b5565b0390fd5b9091610d399260208301925f818503910152610c2a565b90565b339091610d697f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926109c3565b92610d7e610d75610122565b92839283610d22565b0390a2565b90610d8d91610cdb565b565b90610dab610da5333290858591929091926112e4565b15610702565b610dba57610db891610dd6565b565b5f6361aec64960e11b815280610dd2600482016101b5565b0390fd5b90610de290339261164a565b90610e22610e107f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f926109c3565b92610e19610122565b91829182610a22565b0390a2565b90610e3191610d8f565b565b90610e4591610e4061168b565b610f51565b565b60a01c90565b60ff1690565b610e5f610e6491610e47565b610e4d565b90565b610e719054610e53565b90565b610e88610e83610e8d9261090e565b61037c565b61043e565b90565b610e9990610e74565b90565b60a01b90565b90610eb160ff60a01b91610e9c565b9181191691161790565b610ec490610702565b90565b90565b90610edf610eda610ee692610ebb565b610ec7565b8254610ea2565b9055565b610ef3906105f2565b90565b610eff90610eea565b90565b5f1b90565b90610f1860018060a01b0391610f02565b9181191691161790565b610f2b90610eea565b90565b90565b90610f46610f41610f4d92610f22565b610f2e565b8254610f07565b9055565b610f5b6001610e67565b610fc35781610f7a610f74610f6f5f610e90565b610449565b91610449565b14610fa757610fa0610f99610fa593610f94600180610eca565b610ef6565b6001610f31565b6115bc565b565b5f632e7f3c7f60e11b815280610fbf600482016101b5565b0390fd5b5f62dc149f60e41b815280610fda600482016101b5565b0390fd5b90610fe891610e33565b565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b6110516032604092610fee565b61105a81610ff7565b0190565b6110739060208101905f818303910152611044565b90565b1561107d57565b611085610122565b62461bcd60e51b81528061109b6004820161105e565b0390fd5b91908110156110af576020020190565b61093c565b356110be81610230565b90565b90926110ce82859061090a565b936110f5856110ef6110e96110e4888790610fea565b61022d565b9161022d565b14611076565b6110fe5f610911565b5b8061111261110c8861022d565b9161022d565b10156111b9576111409061113633329061112e888786916109a3565b9290916112e4565b611145575b61092d565b6110ff565b3361115b611155878685916109a3565b9061164a565b9061117061116b8988869161109f565b6110b4565b42926111b161119f7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2946109c3565b946111a8610122565b93849384610b42565b0390a261113b565b505050505050565b6111c961168b565b6111d16111d3565b565b6111e46111df5f610e90565b6116fc565b565b6111ee6111c1565b565b5f90565b5f1c90565b61120561120a916111f4565b6105b2565b90565b61121790546111f9565b90565b634e487b7160e01b5f52604160045260245ffd5b90611238906109e7565b810190811067ffffffffffffffff82111761125257604052565b61121a565b60e01b90565b61126681610702565b0361126d57565b5f80fd5b9050519061127e8261125d565b565b9060208282031261129957611296915f01611271565b90565b61012c565b6112c46112d195939492946112ba60608401965f85019061082b565b602083019061082b565b6040818503910152610c2a565b90565b6112dc610122565b3d5f823e3d90fd5b92611327602093946112f46111f0565b5061133261130a611305600161120d565b61061a565b93637a3979dc92959761131b610122565b98899788968796611257565b86526004860161129e565b03915afa908115611376575f91611348575b5090565b611369915060203d811161136f575b611361818361122e565b810190611280565b5f611344565b503d611357565b6112d4565b5f90565b634e487b7160e01b5f52601160045260245ffd5b6113a26113a89193929361022d565b9261022d565b82039182116113b357565b61137f565b6113c76113cd9193929361022d565b9261022d565b916113d983820261022d565b9281840414901517156113e857565b61137f565b916113f661137b565b508061140a6114048461022d565b9161022d565b111561145e5761142b9161141d91611393565b61142561039b565b906113b8565b8061143e6114388461022d565b9161022d565b10156114505761144d91611393565b90565b505061145b5f610911565b90565b505090565b5f90565b60018060a01b031690565b61147e611483916111f4565b611467565b90565b6114909054611472565b90565b61149b611463565b506114a55f611486565b90565b6114b9906114b461168b565b6114bb565b565b806114d66114d06114cb5f610e90565b610449565b91610449565b14611530576114ee6114e782610ef6565b6001610f31565b6115187f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9916109c3565b90611521610122565b8061152b816101b5565b0390a2565b5f632e7f3c7f60e11b815280611548600482016101b5565b0390fd5b611555906114a8565b565b6115689061156361168b565b61156a565b565b8061158561157f61157a5f610e90565b610449565b91610449565b1461159557611593906116fc565b565b6115b86115a15f610e90565b5f918291631e4fbdf760e01b835260048301610838565b0390fd5b6115c590611557565b565b606090565b60ff60f81b1690565b60f81b90565b6115ef6115ea6115f49261090e565b6115d5565b6115cc565b90565b90565b61160661160b916115cc565b6115f7565b9052565b905090565b9091826116248161162b9361160f565b8093610c1f565b0190565b8061164060019261164796946115fa565b0191611614565b90565b611688906116566115c7565b506116796116635f6115db565b919361166d610122565b9485936020850161162f565b6020820181038252038261122e565b90565b611693611493565b6116ac6116a66116a161175b565b610449565b91610449565b036116b357565b6116d56116be61175b565b5f91829163118cdaa760e01b835260048301610838565b0390fd5b90565b906116f16116ec6116f8926109c3565b6116d9565b8254610f07565b9055565b6117055f611486565b61170f825f6116dc565b9061174361173d7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936109c3565b916109c3565b9161174c610122565b80611756816101b5565b0390a3565b611763611463565b50339056fea264697066735822122011e74c004bf267dbc721147a1c78f81a4b5f21d8524a787d01348f613aa342e964736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\t\x06V[a\0\x1D_5a\x01\x1CV[\x80c\x0B\x83$\x9D\x14a\x01\x17W\x80c\x1C\x0Bcg\x14a\x01\x12W\x80c3=\x87\xFE\x14a\x01\rW\x80c5\x14\xD3{\x14a\x01\x08W\x80c=D\xAE\x8B\x14a\x01\x03W\x80cF\xE2\xCC\t\x14a\0\xFEW\x80cH\\\xC9U\x14a\0\xF9W\x80cO\xAC=D\x14a\0\xF4W\x80c[<\xD6\xE2\x14a\0\xEFW\x80cqP\x18\xA6\x14a\0\xEAW\x80cz9y\xDC\x14a\0\xE5W\x80c\x83G\t#\x14a\0\xE0W\x80c\x83\xD3\xC1\x15\x14a\0\xDBW\x80c\x8D\xA5\xCB[\x14a\0\xD6W\x80c\xD4\xF0\xEBM\x14a\0\xD1Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x08\xD3V[a\x08\xA0V[a\x08MV[a\x07\xF5V[a\x07\x86V[a\x07)V[a\x06}V[a\x06HV[a\x05wV[a\x04\xA5V[a\x04\nV[a\x03\xD5V[a\x036V[a\x02\xCCV[a\x02\x98V[a\x01\xBAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01zW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01uW` \x01\x92` \x83\x02\x84\x01\x11a\x01pWV[a\x01<V[a\x018V[a\x014V[\x90` \x82\x82\x03\x12a\x01\xB0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xABWa\x01\xA7\x92\x01a\x01@V[\x90\x91V[a\x010V[a\x01,V[_\x01\x90V[4a\x01\xE9Wa\x01\xD3a\x01\xCD6`\x04a\x01\x7FV[\x90a\n:V[a\x01\xDBa\x01\"V[\x80a\x01\xE5\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02(W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02#W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02\x1EWV[a\x01<V[a\x018V[a\x014V[\x90V[a\x029\x81a\x02-V[\x03a\x02@WV[_\x80\xFD[\x90P5\x90a\x02Q\x82a\x020V[V[\x91`@\x83\x83\x03\x12a\x02\x93W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\x8EWa\x02\x80\x83a\x02\x8B\x92\x86\x01a\x01\xEEV[\x93\x90\x94` \x01a\x02DV[\x90V[a\x010V[a\x01,V[4a\x02\xC7Wa\x02\xB1a\x02\xAB6`\x04a\x02SV[\x91a\x0B\xCAV[a\x02\xB9a\x01\"V[\x80a\x02\xC3\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[4a\x02\xFBWa\x02\xE5a\x02\xDF6`\x04a\x02SV[\x91a\x0C\xCEV[a\x02\xEDa\x01\"V[\x80a\x02\xF7\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x031W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03,Wa\x03(\x92\x01a\x01\xEEV[\x90\x91V[a\x010V[a\x01,V[4a\x03eWa\x03Oa\x03I6`\x04a\x03\0V[\x90a\r\x83V[a\x03Wa\x01\"V[\x80a\x03a\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[_\x91\x03\x12a\x03tWV[a\x01,V[\x90V[\x90V[a\x03\x93a\x03\x8Ea\x03\x98\x92a\x03yV[a\x03|V[a\x02-V[\x90V[a\x03\xA5`\na\x03\x7FV[\x90V[a\x03\xB0a\x03\x9BV[\x90V[a\x03\xBC\x90a\x02-V[\x90RV[\x91\x90a\x03\xD3\x90_` \x85\x01\x94\x01\x90a\x03\xB3V[V[4a\x04\x05Wa\x03\xE56`\x04a\x03jV[a\x04\x01a\x03\xF0a\x03\xA8V[a\x03\xF8a\x01\"V[\x91\x82\x91\x82a\x03\xC0V[\x03\x90\xF3[a\x01(V[4a\x049Wa\x04#a\x04\x1D6`\x04a\x03\0V[\x90a\x0E'V[a\x04+a\x01\"V[\x80a\x045\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04R\x90a\x04>V[\x90V[a\x04^\x81a\x04IV[\x03a\x04eWV[_\x80\xFD[\x90P5\x90a\x04v\x82a\x04UV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xA0W\x80a\x04\x94a\x04\x9D\x92_\x86\x01a\x04iV[\x93` \x01a\x04iV[\x90V[a\x01,V[4a\x04\xD4Wa\x04\xBEa\x04\xB86`\x04a\x04xV[\x90a\x0F\xDEV[a\x04\xC6a\x01\"V[\x80a\x04\xD0\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x05\x13W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\x0EW` \x01\x92` \x83\x02\x84\x01\x11a\x05\tWV[a\x01<V[a\x018V[a\x014V[\x90\x91`@\x82\x84\x03\x12a\x05rW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05mW\x83a\x05C\x91\x84\x01a\x01@V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05hWa\x05d\x92\x01a\x04\xD9V[\x90\x91V[a\x010V[a\x010V[a\x01,V[4a\x05\xA9Wa\x05\x93a\x05\x8A6`\x04a\x05\x18V[\x92\x91\x90\x91a\x10\xC1V[a\x05\x9Ba\x01\"V[\x80a\x05\xA5\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05\xCD\x90`\x08a\x05\xD2\x93\x02a\x05\xAEV[a\x05\xB2V[\x90V[\x90a\x05\xE0\x91Ta\x05\xBDV[\x90V[a\x05\xEF`\x01_\x90a\x05\xD5V[\x90V[a\x06\x06a\x06\x01a\x06\x0B\x92a\x04>V[a\x03|V[a\x04>V[\x90V[a\x06\x17\x90a\x05\xF2V[\x90V[a\x06#\x90a\x06\x0EV[\x90V[a\x06/\x90a\x06\x1AV[\x90RV[\x91\x90a\x06F\x90_` \x85\x01\x94\x01\x90a\x06&V[V[4a\x06xWa\x06X6`\x04a\x03jV[a\x06ta\x06ca\x05\xE3V[a\x06ka\x01\"V[\x91\x82\x91\x82a\x063V[\x03\x90\xF3[a\x01(V[4a\x06\xABWa\x06\x8D6`\x04a\x03jV[a\x06\x95a\x11\xE6V[a\x06\x9Da\x01\"V[\x80a\x06\xA7\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[\x91``\x83\x83\x03\x12a\x06\xFDWa\x06\xC7\x82_\x85\x01a\x04iV[\x92a\x06\xD5\x83` \x83\x01a\x04iV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xF8Wa\x06\xF4\x92\x01a\x01\xEEV[\x90\x91V[a\x010V[a\x01,V[\x15\x15\x90V[a\x07\x10\x90a\x07\x02V[\x90RV[\x91\x90a\x07'\x90_` \x85\x01\x94\x01\x90a\x07\x07V[V[4a\x07]Wa\x07Ya\x07Ha\x07?6`\x04a\x06\xB0V[\x92\x91\x90\x91a\x12\xE4V[a\x07Pa\x01\"V[\x91\x82\x91\x82a\x07\x14V[\x03\x90\xF3[a\x01(V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x07\xB6Wa\x07\x966`\x04a\x03jV[a\x07\xB2a\x07\xA1a\x07bV[a\x07\xA9a\x01\"V[\x91\x82\x91\x82a\x03\xC0V[\x03\x90\xF3[a\x01(V[\x90\x91``\x82\x84\x03\x12a\x07\xF0Wa\x07\xEDa\x07\xD6\x84_\x85\x01a\x02DV[\x93a\x07\xE4\x81` \x86\x01a\x02DV[\x93`@\x01a\x02DV[\x90V[a\x01,V[4a\x08&Wa\x08\"a\x08\x11a\x08\x0B6`\x04a\x07\xBBV[\x91a\x13\xEDV[a\x08\x19a\x01\"V[\x91\x82\x91\x82a\x03\xC0V[\x03\x90\xF3[a\x01(V[a\x084\x90a\x04IV[\x90RV[\x91\x90a\x08K\x90_` \x85\x01\x94\x01\x90a\x08+V[V[4a\x08}Wa\x08]6`\x04a\x03jV[a\x08ya\x08ha\x14\x93V[a\x08pa\x01\"V[\x91\x82\x91\x82a\x088V[\x03\x90\xF3[a\x01(V[\x90` \x82\x82\x03\x12a\x08\x9BWa\x08\x98\x91_\x01a\x04iV[\x90V[a\x01,V[4a\x08\xCEWa\x08\xB8a\x08\xB36`\x04a\x08\x82V[a\x15LV[a\x08\xC0a\x01\"V[\x80a\x08\xCA\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[4a\t\x01Wa\x08\xEBa\x08\xE66`\x04a\x08\x82V[a\x15\xBCV[a\x08\xF3a\x01\"V[\x80a\x08\xFD\x81a\x01\xB5V[\x03\x90\xF3[a\x01(V[_\x80\xFD[P\x90V[\x90V[a\t%a\t a\t*\x92a\t\x0EV[a\x03|V[a\x02-V[\x90V[`\x01a\t9\x91\x01a\x02-V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\t\x9EW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\t\x99W` \x01\x91`\x01\x82\x026\x03\x83\x13a\t\x94WV[a\tXV[a\tTV[a\tPV[\x90\x82\x10\x15a\t\xBEW` a\t\xBA\x92\x02\x81\x01\x90a\t\\V[\x90\x91V[a\t<V[a\t\xCC\x90a\x06\x0EV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\n\x10a\n\x19` \x93a\n\x1E\x93a\n\x07\x81a\t\xCFV[\x93\x84\x80\x93a\t\xD3V[\x95\x86\x91\x01a\t\xDCV[a\t\xE7V[\x01\x90V[a\n7\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\t\xF1V[\x90V[a\nE\x81\x83\x90a\t\nV[\x91a\nO_a\t\x11V[[\x80a\nca\n]\x86a\x02-V[\x91a\x02-V[\x10\x15a\n\xF4Wa\n\x91\x90a\n\x8732\x90a\n\x7F\x87\x87\x86\x91a\t\xA3V[\x92\x90\x91a\x12\xE4V[a\n\x96W[a\t-V[a\nPV[3a\n\xACa\n\xA6\x86\x86\x85\x91a\t\xA3V[\x90a\x16JV[\x90a\n\xECa\n\xDA\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\t\xC3V[\x92a\n\xE3a\x01\"V[\x91\x82\x91\x82a\n\"V[\x03\x90\xA2a\n\x8CV[PPPPV[\x91\x90a\x0B\x17a\x0B\x1132\x90\x86\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\x0B&Wa\x0B$\x92a\x0BwV[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0B>`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[`@\x90a\x0Bna\x0Bca\x0Bu\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\t\xF1V[\x96` \x83\x01\x90a\x03\xB3V[\x01\x90a\x03\xB3V[V[\x90a\x0B\x83\x903\x92a\x16JV[\x91B\x92a\x0B\xC5a\x0B\xB3\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\t\xC3V[\x94a\x0B\xBCa\x01\"V[\x93\x84\x93\x84a\x0BBV[\x03\x90\xA2V[\x90a\x0B\xD5\x92\x91a\n\xFAV[V[\x91\x90a\x0B\xF4a\x0B\xEE32\x90\x86\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\x0C\x03Wa\x0C\x01\x92a\x0C\x82V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0C\x1B`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0CD\x81a\x0C=\x81a\x0CI\x95a\t\xD3V[\x80\x95a\x0C\x1FV[a\t\xE7V[\x01\x90V[a\x0Cya\x0Cn`@\x93a\x0C\x80\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0C*V[\x96` \x83\x01\x90a\x03\xB3V[\x01\x90a\x03\xB3V[V[\x90\x913\x91\x92\x90\x92a\x0C\xC9Ba\x0C\xB7\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\t\xC3V[\x95a\x0C\xC0a\x01\"V[\x94\x85\x94\x85a\x0CMV[\x03\x90\xA2V[\x90a\x0C\xD9\x92\x91a\x0B\xD7V[V[\x90a\x0C\xF7a\x0C\xF132\x90\x85\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\r\x06Wa\r\x04\x91a\r<V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\r\x1E`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90\x91a\r9\x92` \x83\x01\x92_\x81\x85\x03\x91\x01Ra\x0C*V[\x90V[3\x90\x91a\ri\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\t\xC3V[\x92a\r~a\rua\x01\"V[\x92\x83\x92\x83a\r\"V[\x03\x90\xA2V[\x90a\r\x8D\x91a\x0C\xDBV[V[\x90a\r\xABa\r\xA532\x90\x85\x85\x91\x92\x90\x91\x92a\x12\xE4V[\x15a\x07\x02V[a\r\xBAWa\r\xB8\x91a\r\xD6V[V[_ca\xAE\xC6I`\xE1\x1B\x81R\x80a\r\xD2`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90a\r\xE2\x903\x92a\x16JV[\x90a\x0E\"a\x0E\x10\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\t\xC3V[\x92a\x0E\x19a\x01\"V[\x91\x82\x91\x82a\n\"V[\x03\x90\xA2V[\x90a\x0E1\x91a\r\x8FV[V[\x90a\x0EE\x91a\x0E@a\x16\x8BV[a\x0FQV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x0E_a\x0Ed\x91a\x0EGV[a\x0EMV[\x90V[a\x0Eq\x90Ta\x0ESV[\x90V[a\x0E\x88a\x0E\x83a\x0E\x8D\x92a\t\x0EV[a\x03|V[a\x04>V[\x90V[a\x0E\x99\x90a\x0EtV[\x90V[`\xA0\x1B\x90V[\x90a\x0E\xB1`\xFF`\xA0\x1B\x91a\x0E\x9CV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xC4\x90a\x07\x02V[\x90V[\x90V[\x90a\x0E\xDFa\x0E\xDAa\x0E\xE6\x92a\x0E\xBBV[a\x0E\xC7V[\x82Ta\x0E\xA2V[\x90UV[a\x0E\xF3\x90a\x05\xF2V[\x90V[a\x0E\xFF\x90a\x0E\xEAV[\x90V[_\x1B\x90V[\x90a\x0F\x18`\x01\x80`\xA0\x1B\x03\x91a\x0F\x02V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F+\x90a\x0E\xEAV[\x90V[\x90V[\x90a\x0FFa\x0FAa\x0FM\x92a\x0F\"V[a\x0F.V[\x82Ta\x0F\x07V[\x90UV[a\x0F[`\x01a\x0EgV[a\x0F\xC3W\x81a\x0Fza\x0Fta\x0Fo_a\x0E\x90V[a\x04IV[\x91a\x04IV[\x14a\x0F\xA7Wa\x0F\xA0a\x0F\x99a\x0F\xA5\x93a\x0F\x94`\x01\x80a\x0E\xCAV[a\x0E\xF6V[`\x01a\x0F1V[a\x15\xBCV[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x0F\xBF`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x0F\xDA`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[\x90a\x0F\xE8\x91a\x0E3V[V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x10Q`2`@\x92a\x0F\xEEV[a\x10Z\x81a\x0F\xF7V[\x01\x90V[a\x10s\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x10DV[\x90V[\x15a\x10}WV[a\x10\x85a\x01\"V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x10\x9B`\x04\x82\x01a\x10^V[\x03\x90\xFD[\x91\x90\x81\x10\x15a\x10\xAFW` \x02\x01\x90V[a\t<V[5a\x10\xBE\x81a\x020V[\x90V[\x90\x92a\x10\xCE\x82\x85\x90a\t\nV[\x93a\x10\xF5\x85a\x10\xEFa\x10\xE9a\x10\xE4\x88\x87\x90a\x0F\xEAV[a\x02-V[\x91a\x02-V[\x14a\x10vV[a\x10\xFE_a\t\x11V[[\x80a\x11\x12a\x11\x0C\x88a\x02-V[\x91a\x02-V[\x10\x15a\x11\xB9Wa\x11@\x90a\x11632\x90a\x11.\x88\x87\x86\x91a\t\xA3V[\x92\x90\x91a\x12\xE4V[a\x11EW[a\t-V[a\x10\xFFV[3a\x11[a\x11U\x87\x86\x85\x91a\t\xA3V[\x90a\x16JV[\x90a\x11pa\x11k\x89\x88\x86\x91a\x10\x9FV[a\x10\xB4V[B\x92a\x11\xB1a\x11\x9F\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\t\xC3V[\x94a\x11\xA8a\x01\"V[\x93\x84\x93\x84a\x0BBV[\x03\x90\xA2a\x11;V[PPPPPPV[a\x11\xC9a\x16\x8BV[a\x11\xD1a\x11\xD3V[V[a\x11\xE4a\x11\xDF_a\x0E\x90V[a\x16\xFCV[V[a\x11\xEEa\x11\xC1V[V[_\x90V[_\x1C\x90V[a\x12\x05a\x12\n\x91a\x11\xF4V[a\x05\xB2V[\x90V[a\x12\x17\x90Ta\x11\xF9V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x128\x90a\t\xE7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x12RW`@RV[a\x12\x1AV[`\xE0\x1B\x90V[a\x12f\x81a\x07\x02V[\x03a\x12mWV[_\x80\xFD[\x90PQ\x90a\x12~\x82a\x12]V[V[\x90` \x82\x82\x03\x12a\x12\x99Wa\x12\x96\x91_\x01a\x12qV[\x90V[a\x01,V[a\x12\xC4a\x12\xD1\x95\x93\x94\x92\x94a\x12\xBA``\x84\x01\x96_\x85\x01\x90a\x08+V[` \x83\x01\x90a\x08+V[`@\x81\x85\x03\x91\x01Ra\x0C*V[\x90V[a\x12\xDCa\x01\"V[=_\x82>=\x90\xFD[\x92a\x13'` \x93\x94a\x12\xF4a\x11\xF0V[Pa\x132a\x13\na\x13\x05`\x01a\x12\rV[a\x06\x1AV[\x93cz9y\xDC\x92\x95\x97a\x13\x1Ba\x01\"V[\x98\x89\x97\x88\x96\x87\x96a\x12WV[\x86R`\x04\x86\x01a\x12\x9EV[\x03\x91Z\xFA\x90\x81\x15a\x13vW_\x91a\x13HW[P\x90V[a\x13i\x91P` =\x81\x11a\x13oW[a\x13a\x81\x83a\x12.V[\x81\x01\x90a\x12\x80V[_a\x13DV[P=a\x13WV[a\x12\xD4V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x13\xA2a\x13\xA8\x91\x93\x92\x93a\x02-V[\x92a\x02-V[\x82\x03\x91\x82\x11a\x13\xB3WV[a\x13\x7FV[a\x13\xC7a\x13\xCD\x91\x93\x92\x93a\x02-V[\x92a\x02-V[\x91a\x13\xD9\x83\x82\x02a\x02-V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x13\xE8WV[a\x13\x7FV[\x91a\x13\xF6a\x13{V[P\x80a\x14\na\x14\x04\x84a\x02-V[\x91a\x02-V[\x11\x15a\x14^Wa\x14+\x91a\x14\x1D\x91a\x13\x93V[a\x14%a\x03\x9BV[\x90a\x13\xB8V[\x80a\x14>a\x148\x84a\x02-V[\x91a\x02-V[\x10\x15a\x14PWa\x14M\x91a\x13\x93V[\x90V[PPa\x14[_a\t\x11V[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x14~a\x14\x83\x91a\x11\xF4V[a\x14gV[\x90V[a\x14\x90\x90Ta\x14rV[\x90V[a\x14\x9Ba\x14cV[Pa\x14\xA5_a\x14\x86V[\x90V[a\x14\xB9\x90a\x14\xB4a\x16\x8BV[a\x14\xBBV[V[\x80a\x14\xD6a\x14\xD0a\x14\xCB_a\x0E\x90V[a\x04IV[\x91a\x04IV[\x14a\x150Wa\x14\xEEa\x14\xE7\x82a\x0E\xF6V[`\x01a\x0F1V[a\x15\x18\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\t\xC3V[\x90a\x15!a\x01\"V[\x80a\x15+\x81a\x01\xB5V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x15H`\x04\x82\x01a\x01\xB5V[\x03\x90\xFD[a\x15U\x90a\x14\xA8V[V[a\x15h\x90a\x15ca\x16\x8BV[a\x15jV[V[\x80a\x15\x85a\x15\x7Fa\x15z_a\x0E\x90V[a\x04IV[\x91a\x04IV[\x14a\x15\x95Wa\x15\x93\x90a\x16\xFCV[V[a\x15\xB8a\x15\xA1_a\x0E\x90V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x088V[\x03\x90\xFD[a\x15\xC5\x90a\x15WV[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x15\xEFa\x15\xEAa\x15\xF4\x92a\t\x0EV[a\x15\xD5V[a\x15\xCCV[\x90V[\x90V[a\x16\x06a\x16\x0B\x91a\x15\xCCV[a\x15\xF7V[\x90RV[\x90P\x90V[\x90\x91\x82a\x16$\x81a\x16+\x93a\x16\x0FV[\x80\x93a\x0C\x1FV[\x01\x90V[\x80a\x16@`\x01\x92a\x16G\x96\x94a\x15\xFAV[\x01\x91a\x16\x14V[\x90V[a\x16\x88\x90a\x16Va\x15\xC7V[Pa\x16ya\x16c_a\x15\xDBV[\x91\x93a\x16ma\x01\"V[\x94\x85\x93` \x85\x01a\x16/V[` \x82\x01\x81\x03\x82R\x03\x82a\x12.V[\x90V[a\x16\x93a\x14\x93V[a\x16\xACa\x16\xA6a\x16\xA1a\x17[V[a\x04IV[\x91a\x04IV[\x03a\x16\xB3WV[a\x16\xD5a\x16\xBEa\x17[V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x088V[\x03\x90\xFD[\x90V[\x90a\x16\xF1a\x16\xECa\x16\xF8\x92a\t\xC3V[a\x16\xD9V[\x82Ta\x0F\x07V[\x90UV[a\x17\x05_a\x14\x86V[a\x17\x0F\x82_a\x16\xDCV[\x90a\x17Ca\x17=\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\t\xC3V[\x91a\t\xC3V[\x91a\x17La\x01\"V[\x80a\x17V\x81a\x01\xB5V[\x03\x90\xA3V[a\x17ca\x14cV[P3\x90V\xFE\xA2dipfsX\"\x12 \x11\xE7L\0K\xF2g\xDB\xC7!\x14z\x1Cx\xF8\x1AK_!\xD8RJx}\x014\x8Fa:\xA3B\xE9dsolcC\0\x08\x1D\x003",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrProposerNotAllowed()` and selector `0xc35d8c92`.
```solidity
error TransactionOrProposerNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrProposerNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrProposerNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrProposerNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrProposerNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrProposerNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrProposerNotAllowed()";
            const SELECTOR: [u8; 4] = [195u8, 93u8, 140u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_0 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_0 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes,uint256,uint256)` and selector `0x4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2`.
```solidity
event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_1 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                    originalPriority: data.1,
                    timestamp: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appChainId),
                )
            }
        }
    };
    /**Function with signature `PRIORITY_DECAY_RATE()` and selector `0x3d44ae8b`.
```solidity
function PRIORITY_DECAY_RATE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATECall {}
    ///Container type for the return parameters of the [`PRIORITY_DECAY_RATE()`](PRIORITY_DECAY_RATECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRIORITY_DECAY_RATECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRIORITY_DECAY_RATEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRIORITY_DECAY_RATE()";
            const SELECTOR: [u8; 4] = [61u8, 68u8, 174u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appChainId()` and selector `0x83470923`.
```solidity
function appChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdCall {}
    ///Container type for the return parameters of the [`appChainId()`](appChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appChainId()";
            const SELECTOR: [u8; 4] = [131u8, 71u8, 9u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEffectivePriority(uint256,uint256,uint256)` and selector `0x83d3c115`.
```solidity
function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityCall {
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEffectivePriority(uint256,uint256,uint256)`](calculateEffectivePriorityCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityCall) -> Self {
                    (
                        value.originalPriority,
                        value.submittedTimestamp,
                        value.currentTimestamp,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        originalPriority: tuple.0,
                        submittedTimestamp: tuple.1,
                        currentTimestamp: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEffectivePriorityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEffectivePriorityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEffectivePriority(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 193u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.submittedTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactions_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_0Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactions_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactions_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[],uint256[])` and selector `0x4fac3d44`.
```solidity
function processBulkTransactions(bytes[] memory data, uint256[] memory priorities) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub priorities: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[],uint256[])`](processBulkTransactions_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_1Call) -> Self {
                    (value.data, value.priorities)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priorities: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactions_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactions_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[],uint256[])";
            const SELECTOR: [u8; 4] = [79u8, 172u8, 61u8, 68u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.priorities),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes,uint256)` and selector `0x1c0b6367`.
```solidity
function processTransaction(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes,uint256)`](processTransaction_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 11u8, 99u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransaction_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes,uint256)` and selector `0x333d87fe`.
```solidity
function processTransactionRaw(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes,uint256)`](processTransactionRaw_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRaw_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRaw_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes,uint256)";
            const SELECTOR: [u8; 4] = [51u8, 61u8, 135u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRaw_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRaw_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRaw_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) function calls.
    pub enum SyndicateSequencingChainWithDecayingPriorityCalls {
        #[allow(missing_docs)]
        PRIORITY_DECAY_RATE(PRIORITY_DECAY_RATECall),
        #[allow(missing_docs)]
        appChainId(appChainIdCall),
        #[allow(missing_docs)]
        calculateEffectivePriority(calculateEffectivePriorityCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        processBulkTransactions_0(processBulkTransactions_0Call),
        #[allow(missing_docs)]
        processBulkTransactions_1(processBulkTransactions_1Call),
        #[allow(missing_docs)]
        processTransaction_0(processTransaction_0Call),
        #[allow(missing_docs)]
        processTransaction_1(processTransaction_1Call),
        #[allow(missing_docs)]
        processTransactionRaw_0(processTransactionRaw_0Call),
        #[allow(missing_docs)]
        processTransactionRaw_1(processTransactionRaw_1Call),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [28u8, 11u8, 99u8, 103u8],
            [51u8, 61u8, 135u8, 254u8],
            [53u8, 20u8, 211u8, 123u8],
            [61u8, 68u8, 174u8, 139u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [79u8, 172u8, 61u8, 68u8],
            [91u8, 60u8, 214u8, 226u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [131u8, 71u8, 9u8, 35u8],
            [131u8, 211u8, 193u8, 21u8],
            [141u8, 165u8, 203u8, 91u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityCalls {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 16usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::PRIORITY_DECAY_RATE(_) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appChainId(_) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEffectivePriority(_) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions_0(_) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions_1(_) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_0(_) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_1(_) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw_0(_) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw_1(_) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityCalls,
            >] = &[
                {
                    fn processBulkTransactions_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processBulkTransactions_0,
                            )
                    }
                    processBulkTransactions_0
                },
                {
                    fn processTransaction_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_0,
                            )
                    }
                    processTransaction_0
                },
                {
                    fn processTransactionRaw_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionRaw_0,
                            )
                    }
                    processTransactionRaw_0
                },
                {
                    fn processTransactionRaw_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionRaw_1,
                            )
                    }
                    processTransactionRaw_1
                },
                {
                    fn PRIORITY_DECAY_RATE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::PRIORITY_DECAY_RATE,
                            )
                    }
                    PRIORITY_DECAY_RATE
                },
                {
                    fn processTransaction_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_1,
                            )
                    }
                    processTransaction_1
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::initialize,
                            )
                    }
                    initialize
                },
                {
                    fn processBulkTransactions_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processBulkTransactions_1,
                            )
                    }
                    processBulkTransactions_1
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::isAllowed,
                            )
                    }
                    isAllowed
                },
                {
                    fn appChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <appChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::appChainId,
                            )
                    }
                    appChainId
                },
                {
                    fn calculateEffectivePriority(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::calculateEffectivePriority,
                            )
                    }
                    calculateEffectivePriority
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::owner,
                            )
                    }
                    owner
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions_0(inner) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions_1(inner) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw_0(inner) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw_1(inner) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions_0(inner) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions_1(inner) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw_0(inner) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw_1(inner) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) custom errors.
    pub enum SyndicateSequencingChainWithDecayingPriorityErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrProposerNotAllowed(TransactionOrProposerNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [195u8, 93u8, 140u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityErrors {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrProposerNotAllowed(_) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityErrors,
            >] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrProposerNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::TransactionOrProposerNotAllowed,
                            )
                    }
                    TransactionOrProposerNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) events.
    pub enum SyndicateSequencingChainWithDecayingPriorityEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed_0(TransactionProcessed_0),
        #[allow(missing_docs)]
        TransactionProcessed_1(TransactionProcessed_1),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_0)
                }
                Some(
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_1)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        >,
    > {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy(provider, _appChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appChainId)
    }
    /**A [`SyndicateSequencingChainWithDecayingPriority`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChainWithDecayingPriority`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainWithDecayingPriorityInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainWithDecayingPriorityInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _appChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
            SyndicateSequencingChainWithDecayingPriorityInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`PRIORITY_DECAY_RATE`] function.
        pub fn PRIORITY_DECAY_RATE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRIORITY_DECAY_RATECall, N> {
            self.call_builder(&PRIORITY_DECAY_RATECall {})
        }
        ///Creates a new call builder for the [`appChainId`] function.
        pub fn appChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appChainIdCall, N> {
            self.call_builder(&appChainIdCall {})
        }
        ///Creates a new call builder for the [`calculateEffectivePriority`] function.
        pub fn calculateEffectivePriority(
            &self,
            originalPriority: alloy::sol_types::private::primitives::aliases::U256,
            submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
            currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEffectivePriorityCall, N> {
            self.call_builder(
                &calculateEffectivePriorityCall {
                    originalPriority,
                    submittedTimestamp,
                    currentTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions_0`] function.
        pub fn processBulkTransactions_0(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactions_0Call, N> {
            self.call_builder(
                &processBulkTransactions_0Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processBulkTransactions_1`] function.
        pub fn processBulkTransactions_1(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            priorities: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactions_1Call, N> {
            self.call_builder(
                &processBulkTransactions_1Call {
                    data,
                    priorities,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_0`] function.
        pub fn processTransaction_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_0Call, N> {
            self.call_builder(
                &processTransaction_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_1`] function.
        pub fn processTransaction_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_1Call, N> {
            self.call_builder(&processTransaction_1Call { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw_0`] function.
        pub fn processTransactionRaw_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRaw_0Call, N> {
            self.call_builder(
                &processTransactionRaw_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionRaw_1`] function.
        pub fn processTransactionRaw_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRaw_1Call, N> {
            self.call_builder(
                &processTransactionRaw_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_0`] event.
        pub fn TransactionProcessed_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_0, N> {
            self.event_filter::<TransactionProcessed_0>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_1`] event.
        pub fn TransactionProcessed_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_1, N> {
            self.event_filter::<TransactionProcessed_1>()
        }
    }
}
