/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChainWithDecayingPriority {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrProposerNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);
    event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);

    constructor(uint256 _appChainId);

    function PRIORITY_DECAY_RATE() external view returns (uint256);
    function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
    function appChainId() external view returns (uint256);
    function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function processBulkTransactions(bytes[] memory data) external;
    function processBulkTransactions(bytes[] memory data, uint256[] memory priorities) external;
    function processTransaction(bytes memory data, uint256 priority) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data, uint256 priority) external;
    function processTransactionRaw(bytes memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function txAcc() external view returns (bytes32);
    function txCount() external view returns (uint64);
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appChainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "PRIORITY_DECAY_RATE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TX_DATA_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEffectivePriority",
    "inputs": [
      {
        "name": "originalPriority",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "submittedTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "priorities",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "txAcc",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "txCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "originalPriority",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrProposerNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChainWithDecayingPriority {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b61010a565b61002161003d565b611d806104d58239608051816108520152611d8090f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107612414803803806100fc8161008c565b9283398101906100cb565b90565b610113906101c2565b565b90565b90565b61012f61012a61013492610115565b610118565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b6101746018602092610137565b61017d81610140565b0190565b6101969060208101905f818303910152610167565b90565b156101a057565b6101a861003d565b62461bcd60e51b8152806101be60048201610181565b0390fd5b6101ca6102e2565b6101e7816101e06101da5f61011b565b916100a5565b1415610199565b608052565b60a01b90565b9061020160ff60a01b916101ec565b9181191691161790565b151590565b6102199061020b565b90565b90565b9061023461022f61023b92610210565b61021c565b82546101f2565b9055565b5f0190565b61024c61003d565b3d5f823e3d90fd5b60018060a01b031690565b61027361026e61027892610254565b610118565b610254565b90565b6102849061025f565b90565b6102909061027b565b90565b5f1b90565b906102a960018060a01b0391610293565b9181191691161790565b6102bc9061027b565b90565b90565b906102d76102d26102de926102b3565b6102bf565b8254610298565b9055565b6102eb3361034f565b6102f65f600161021f565b6102fe61003d565b6101bf810181811060018060401b0382111761034a5761032682916101bf612255843961023f565b03905ff080156103455761033c61034391610287565b60016102c2565b565b610244565b610051565b610358906103b0565b565b61036e61036961037392610115565b610118565b610254565b90565b61037f9061035a565b90565b61038b90610254565b90565b61039790610382565b9052565b91906103ae905f6020850194019061038e565b565b806103cb6103c56103c05f610376565b610382565b91610382565b146103db576103d990610475565b565b6104056103e75f610376565b6103ef61003d565b918291631e4fbdf760e01b83526004830161039b565b0390fd5b5f1c90565b60018060a01b031690565b61042561042a91610409565b61040e565b90565b6104379054610419565b90565b6104439061025f565b90565b61044f9061043a565b90565b90565b9061046a61046561047192610446565b610452565b8254610298565b9055565b61047e5f61042d565b610488825f610455565b906104bc6104b67f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610446565b91610446565b916104c561003d565b806104cf8161023f565b0390a356fe60806040526004361015610013575b610a84565b61001d5f3561014c565b80630b83249d146101475780631c0b636714610142578063327048641461013d578063333d87fe146101385780633514d37b146101335780633c5406871461012e5780633d44ae8b1461012957806346e2cc0914610124578063485cc9551461011f5780634fac3d441461011a5780635b3cd6e214610115578063715018a6146101105780637a3979dc1461010b578063834709231461010657806383d3c115146101015780638da5cb5b146100fc5780639d91597b146100f7578063d4f0eb4d146100f25763f2fde38b0361000e57610a51565b610a1e565b6109cb565b61093b565b6108e3565b610874565b610817565b61076b565b610736565b610665565b610593565b6104f8565b6104c3565b610432565b6103cf565b610365565b610330565b6102c8565b6101ea565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101aa5781359167ffffffffffffffff83116101a55760200192602083028401116101a057565b61016c565b610168565b610164565b906020828203126101e0575f82013567ffffffffffffffff81116101db576101d79201610170565b9091565b610160565b61015c565b5f0190565b34610219576102036101fd3660046101af565b90610b41565b61020b610152565b80610215816101e5565b0390f35b610158565b909182601f830112156102585781359167ffffffffffffffff831161025357602001926001830284011161024e57565b61016c565b610168565b610164565b90565b6102698161025d565b0361027057565b5f80fd5b9050359061028182610260565b565b916040838303126102c3575f83013567ffffffffffffffff81116102be576102b0836102bb92860161021e565b939094602001610274565b90565b610160565b61015c565b346102f7576102e16102db366004610283565b91610cfe565b6102e9610152565b806102f3816101e5565b0390f35b610158565b5f91031261030657565b61015c565b90565b6103179061030b565b9052565b919061032e905f6020850194019061030e565b565b34610360576103403660046102fc565b61035c61034b610d38565b610353610152565b9182918261031b565b0390f35b610158565b346103945761037e610378366004610283565b91610e54565b610386610152565b80610390816101e5565b0390f35b610158565b906020828203126103ca575f82013567ffffffffffffffff81116103c5576103c1920161021e565b9091565b610160565b61015c565b346103fe576103e86103e2366004610399565b90610f82565b6103f0610152565b806103fa816101e5565b0390f35b610158565b67ffffffffffffffff1690565b61041990610403565b9052565b9190610430905f60208501940190610410565b565b34610462576104423660046102fc565b61045e61044d610fc0565b610455610152565b9182918261041d565b0390f35b610158565b90565b90565b61048161047c61048692610467565b61046a565b61025d565b90565b610493600a61046d565b90565b61049e610489565b90565b6104aa9061025d565b9052565b91906104c1905f602085019401906104a1565b565b346104f3576104d33660046102fc565b6104ef6104de610496565b6104e6610152565b918291826104ae565b0390f35b610158565b346105275761051161050b366004610399565b90611043565b610519610152565b80610523816101e5565b0390f35b610158565b60018060a01b031690565b6105409061052c565b90565b61054c81610537565b0361055357565b5f80fd5b9050359061056482610543565b565b919060408382031261058e578061058261058b925f8601610557565b93602001610557565b90565b61015c565b346105c2576105ac6105a6366004610566565b90611203565b6105b4610152565b806105be816101e5565b0390f35b610158565b909182601f830112156106015781359167ffffffffffffffff83116105fc5760200192602083028401116105f757565b61016c565b610168565b610164565b9091604082840312610660575f82013567ffffffffffffffff811161065b5783610631918401610170565b929093602082013567ffffffffffffffff81116106565761065292016105c7565b9091565b610160565b610160565b61015c565b3461069757610681610678366004610606565b929190916112e6565b610689610152565b80610693816101e5565b0390f35b610158565b1c90565b60018060a01b031690565b6106bb9060086106c0930261069c565b6106a0565b90565b906106ce91546106ab565b90565b6106dd60015f906106c3565b90565b6106f46106ef6106f99261052c565b61046a565b61052c565b90565b610705906106e0565b90565b610711906106fc565b90565b61071d90610708565b9052565b9190610734905f60208501940190610714565b565b34610766576107463660046102fc565b6107626107516106d1565b610759610152565b91829182610721565b0390f35b610158565b346107995761077b3660046102fc565b61078361140b565b61078b610152565b80610795816101e5565b0390f35b610158565b916060838303126107eb576107b5825f8501610557565b926107c38360208301610557565b92604082013567ffffffffffffffff81116107e6576107e2920161021e565b9091565b610160565b61015c565b151590565b6107fe906107f0565b9052565b9190610815905f602085019401906107f5565b565b3461084b5761084761083661082d36600461079e565b929190916114c7565b61083e610152565b91829182610802565b0390f35b610158565b7f000000000000000000000000000000000000000000000000000000000000000090565b346108a4576108843660046102fc565b6108a061088f610850565b610897610152565b918291826104ae565b0390f35b610158565b90916060828403126108de576108db6108c4845f8501610274565b936108d28160208601610274565b93604001610274565b90565b61015c565b34610914576109106108ff6108f93660046108a9565b916115d0565b610907610152565b918291826104ae565b0390f35b610158565b61092290610537565b9052565b9190610939905f60208501940190610919565b565b3461096b5761094b3660046102fc565b610967610956611676565b61095e610152565b91829182610926565b0390f35b610158565b90565b5f1b90565b61098c61098761099192610970565b610973565b61030b565b90565b6109bd7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a969610978565b90565b6109c8610994565b90565b346109fb576109db3660046102fc565b6109f76109e66109c0565b6109ee610152565b9182918261031b565b0390f35b610158565b90602082820312610a1957610a16915f01610557565b90565b61015c565b34610a4c57610a36610a31366004610a00565b611736565b610a3e610152565b80610a48816101e5565b0390f35b610158565b34610a7f57610a69610a64366004610a00565b6117ad565b610a71610152565b80610a7b816101e5565b0390f35b610158565b5f80fd5b5090565b90565b610aa3610a9e610aa892610a8c565b61046a565b61025d565b90565b6001610ab7910161025d565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610b1c570180359067ffffffffffffffff8211610b1757602001916001820236038313610b1257565b610ad6565b610ad2565b610ace565b90821015610b3c576020610b389202810190610ada565b9091565b610aba565b90610b4d828290610a88565b91610b575f610a8f565b5b80610b6b610b658661025d565b9161025d565b1015610bc257610b9990610b8f333290610b8786888691610b21565b9290916114c7565b610b9e575b610aab565b610b58565b610bbd33610bb7610bb186888691610b21565b9061183b565b90611ac9565b610b94565b50505050565b9190610be5610bdf333290868591929091926114c7565b156107f0565b610bf457610bf292610cab565b565b610bfc610152565b6361aec64960e11b815280610c13600482016101e5565b0390fd5b610c20906106fc565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610c64610c6d602093610c7293610c5b81610c23565b93848093610c27565b95869101610c30565b610c3b565b0190565b604090610ca2610c97610ca99597969460608401908482035f860152610c45565b9660208301906104a1565b01906104a1565b565b90610cb790339261183b565b914292610cf9610ce77f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610c17565b94610cf0610152565b93849384610c76565b0390a2565b90610d099291610bc8565b565b5f90565b5f1c90565b90565b610d23610d2891610d0f565b610d14565b90565b610d359054610d17565b90565b610d40610d0b565b50610d535f610d4d611c78565b01610d2b565b90565b9190610d73610d6d333290868591929091926114c7565b156107f0565b610d8257610d8092610e08565b565b610d8a610152565b6361aec64960e11b815280610da1600482016101e5565b0390fd5b90825f939282370152565b9190610dca81610dc381610dcf95610c27565b8095610da5565b610c3b565b0190565b610dff610df4604093610e069698979560608501918583035f870152610db0565b9660208301906104a1565b01906104a1565b565b90913391929092610e4f42610e3d7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610c17565b95610e46610152565b94859485610dd3565b0390a2565b90610e5f9291610d56565b565b90610e7d610e77333290858591929091926114c7565b156107f0565b610e8c57610e8a91610f6c565b565b610e94610152565b6361aec64960e11b815280610eab600482016101e5565b0390fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90610ed190610c3b565b810190811067ffffffffffffffff821117610eeb57604052565b610eb3565b90610f03610efc610152565b9283610ec7565b565b67ffffffffffffffff8111610f2357610f1f602091610c3b565b0190565b610eb3565b90929192610f3d610f3882610f05565b610ef0565b93818552602085019082840111610f5957610f5792610da5565b565b610eaf565b610f69913691610f28565b90565b610f7a610f80923392610f5e565b90611ac9565b565b90610f8c91610e61565b565b5f90565b67ffffffffffffffff1690565b610fab610fb091610d0f565b610f92565b90565b610fbd9054610f9f565b90565b610fc8610f8e565b50610fdc6001610fd6611c78565b01610fb3565b90565b90610ffb610ff5333290858591929091926114c7565b156107f0565b61100a576110089161102d565b565b611012610152565b6361aec64960e11b815280611029600482016101e5565b0390fd5b61103b61104192339261183b565b90611ac9565b565b9061104d91610fdf565b565b906110619161105c611c9c565b611168565b565b60a01c90565b60ff1690565b61107b61108091611063565b611069565b90565b61108d905461106f565b90565b6110a461109f6110a992610a8c565b61046a565b61052c565b90565b6110b590611090565b90565b60a01b90565b906110cd60ff60a01b916110b8565b9181191691161790565b6110e0906107f0565b90565b90565b906110fb6110f6611102926110d7565b6110e3565b82546110be565b9055565b61110f906106e0565b90565b61111b90611106565b90565b9061112f60018060a01b0391610973565b9181191691161790565b61114290611106565b90565b90565b9061115d61115861116492611139565b611145565b825461111e565b9055565b6111726001611083565b6111e1578161119161118b6111865f6110ac565b610537565b91610537565b146111be576111b76111b06111bc936111ab6001806110e6565b611112565b6001611148565b6117ad565b565b6111c6610152565b632e7f3c7f60e11b8152806111dd600482016101e5565b0390fd5b6111e9610152565b62dc149f60e41b8152806111ff600482016101e5565b0390fd5b9061120d9161104f565b565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b6112766032604092611213565b61127f8161121c565b0190565b6112989060208101905f818303910152611269565b90565b156112a257565b6112aa610152565b62461bcd60e51b8152806112c060048201611283565b0390fd5b91908110156112d4576020020190565b610aba565b356112e381610260565b90565b90926112f3828590610a88565b9361131a8561131461130e61130988879061120f565b61025d565b9161025d565b1461129b565b6113235f610a8f565b5b806113376113318861025d565b9161025d565b10156113de576113659061135b33329061135388878691610b21565b9290916114c7565b61136a575b610aab565b611324565b3361138061137a87868591610b21565b9061183b565b90611395611390898886916112c4565b6112d9565b42926113d66113c47f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610c17565b946113cd610152565b93849384610c76565b0390a2611360565b505050505050565b6113ee611c9c565b6113f66113f8565b565b6114096114045f6110ac565b611d14565b565b6114136113e6565b565b5f90565b61142561142a91610d0f565b6106a0565b90565b6114379054611419565b90565b60e01b90565b611449816107f0565b0361145057565b5f80fd5b9050519061146182611440565b565b9060208282031261147c57611479915f01611454565b90565b61015c565b6114a76114b4959394929461149d60608401965f850190610919565b6020830190610919565b6040818503910152610db0565b90565b6114bf610152565b3d5f823e3d90fd5b9261150a602093946114d7611415565b506115156114ed6114e8600161142d565b610708565b93637a3979dc9295976114fe610152565b9889978896879661143a565b865260048601611481565b03915afa908115611559575f9161152b575b5090565b61154c915060203d8111611552575b6115448183610ec7565b810190611463565b5f611527565b503d61153a565b6114b7565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61158561158b9193929361025d565b9261025d565b820391821161159657565b611562565b6115aa6115b09193929361025d565b9261025d565b916115bc83820261025d565b9281840414901517156115cb57565b611562565b916115d961155e565b50806115ed6115e78461025d565b9161025d565b11156116415761160e9161160091611576565b611608610489565b9061159b565b8061162161161b8461025d565b9161025d565b10156116335761163091611576565b90565b505061163e5f610a8f565b90565b505090565b5f90565b60018060a01b031690565b61166161166691610d0f565b61164a565b90565b6116739054611655565b90565b61167e611646565b506116885f611669565b90565b61169c90611697611c9c565b61169e565b565b806116b96116b36116ae5f6110ac565b610537565b91610537565b14611713576116d16116ca82611112565b6001611148565b6116fb7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610c17565b90611704610152565b8061170e816101e5565b0390a2565b61171b610152565b632e7f3c7f60e11b815280611732600482016101e5565b0390fd5b61173f9061168b565b565b6117529061174d611c9c565b611754565b565b8061176f6117696117645f6110ac565b610537565b91610537565b1461177f5761177d90611d14565b565b6117a961178b5f6110ac565b611793610152565b918291631e4fbdf760e01b835260048301610926565b0390fd5b6117b690611741565b565b606090565b60ff60f81b1690565b60f81b90565b6117e06117db6117e592610a8c565b6117c6565b6117bd565b90565b90565b6117f76117fc916117bd565b6117e8565b9052565b905090565b9091826118158161181c93611800565b8093610da5565b0190565b8061183160019261183896946117eb565b0191611805565b90565b611879906118476117b8565b5061186a6118545f6117cc565b919361185e610152565b94859360208501611820565b60208201810382520382610ec7565b90565b611885906106e0565b90565b6118919061187c565b90565b61189e6064611888565b90565b6118aa906106fc565b90565b905051906118ba82610260565b565b906020828203126118d5576118d2915f016118ad565b90565b61015c565b60200190565b90565b6118ef6118f49161030b565b6118e0565b9052565b60601b90565b611907906118f8565b90565b611913906118fe565b90565b61192261192791610537565b61190a565b9052565b90565b61193a61193f9161025d565b61192b565b9052565b60c01b90565b61195290611943565b90565b61196161196691610403565b611949565b9052565b6119ba946119aa60206008966119a26014839c9b9861199a8589611992829b6119b29d6118e3565b018092611916565b01809261192e565b01809261192e565b018092611955565b0180926118e3565b0190565b906119ca5f1991610973565b9181191691161790565b6119dd9061030b565b90565b6119e990610d0f565b90565b90611a016119fc611a08926119d4565b6119e0565b82546119be565b9055565b90565b611a23611a1e611a2892611a0c565b61046a565b610403565b90565b611a37611a3d91610403565b91610403565b019067ffffffffffffffff8211611a5057565b611562565b90611a6867ffffffffffffffff91610973565b9181191691161790565b611a86611a81611a8b92610403565b61046a565b610403565b90565b90565b90611aa6611aa1611aad92611a72565b611a8e565b8254611a55565b9055565b611ac69160208201915f818403910152610c45565b90565b611b9a611ad4611c78565b611b7543611ae8611ae3611894565b6118a1565b3b611afb611af55f610a8f565b9161025d565b11611bde575b611b5a611b0f5f8501610d2b565b611b4b879342611b2160018901610fb3565b908b611b35611b2f82610c23565b916118da565b2092611b3f610152565b9788966020880161196a565b60208201810382520382610ec7565b611b6c611b6682610c23565b916118da565b205f83016119ec565b611b946001611b8381611a0f565b920191611b8f83610fb3565b611a2b565b90611a91565b611bd9611bc77f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610c17565b92611bd0610152565b91829182611ab1565b0390a2565b611c096020611bf3611bee611894565b6118a1565b63a3b1b31d90611c01610152565b93849261143a565b82528180611c19600482016101e5565b03915afa80915f92611c48575b50155f14611c4157506001611c3c575b5b611b01565b611c36565b9050611c37565b611c6a91925060203d8111611c71575b611c628183610ec7565b8101906118bc565b905f611c26565b503d611c58565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b611ca4611676565b611cbd611cb7611cb2611d73565b610537565b91610537565b03611cc457565b611ced611ccf611d73565b611cd7610152565b91829163118cdaa760e01b835260048301610926565b0390fd5b90565b90611d09611d04611d1092610c17565b611cf1565b825461111e565b9055565b611d1d5f611669565b611d27825f611cf4565b90611d5b611d557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610c17565b91610c17565b91611d64610152565b80611d6e816101e5565b0390a3565b611d7b611646565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\nV[a\0!a\0=V[a\x1D\x80a\x04\xD5\x829`\x80Q\x81a\x08R\x01Ra\x1D\x80\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a$\x14\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[a\x01\x13\x90a\x01\xC2V[V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01t`\x18` \x92a\x017V[a\x01}\x81a\x01@V[\x01\x90V[a\x01\x96\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01gV[\x90V[\x15a\x01\xA0WV[a\x01\xA8a\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xBE`\x04\x82\x01a\x01\x81V[\x03\x90\xFD[a\x01\xCAa\x02\xE2V[a\x01\xE7\x81a\x01\xE0a\x01\xDA_a\x01\x1BV[\x91a\0\xA5V[\x14\x15a\x01\x99V[`\x80RV[`\xA0\x1B\x90V[\x90a\x02\x01`\xFF`\xA0\x1B\x91a\x01\xECV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02\x19\x90a\x02\x0BV[\x90V[\x90V[\x90a\x024a\x02/a\x02;\x92a\x02\x10V[a\x02\x1CV[\x82Ta\x01\xF2V[\x90UV[_\x01\x90V[a\x02La\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02sa\x02na\x02x\x92a\x02TV[a\x01\x18V[a\x02TV[\x90V[a\x02\x84\x90a\x02_V[\x90V[a\x02\x90\x90a\x02{V[\x90V[_\x1B\x90V[\x90a\x02\xA9`\x01\x80`\xA0\x1B\x03\x91a\x02\x93V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xBC\x90a\x02{V[\x90V[\x90V[\x90a\x02\xD7a\x02\xD2a\x02\xDE\x92a\x02\xB3V[a\x02\xBFV[\x82Ta\x02\x98V[\x90UV[a\x02\xEB3a\x03OV[a\x02\xF6_`\x01a\x02\x1FV[a\x02\xFEa\0=V[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03JWa\x03&\x82\x91a\x01\xBFa\"U\x849a\x02?V[\x03\x90_\xF0\x80\x15a\x03EWa\x03<a\x03C\x91a\x02\x87V[`\x01a\x02\xC2V[V[a\x02DV[a\0QV[a\x03X\x90a\x03\xB0V[V[a\x03na\x03ia\x03s\x92a\x01\x15V[a\x01\x18V[a\x02TV[\x90V[a\x03\x7F\x90a\x03ZV[\x90V[a\x03\x8B\x90a\x02TV[\x90V[a\x03\x97\x90a\x03\x82V[\x90RV[\x91\x90a\x03\xAE\x90_` \x85\x01\x94\x01\x90a\x03\x8EV[V[\x80a\x03\xCBa\x03\xC5a\x03\xC0_a\x03vV[a\x03\x82V[\x91a\x03\x82V[\x14a\x03\xDBWa\x03\xD9\x90a\x04uV[V[a\x04\x05a\x03\xE7_a\x03vV[a\x03\xEFa\0=V[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\x9BV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04%a\x04*\x91a\x04\tV[a\x04\x0EV[\x90V[a\x047\x90Ta\x04\x19V[\x90V[a\x04C\x90a\x02_V[\x90V[a\x04O\x90a\x04:V[\x90V[\x90V[\x90a\x04ja\x04ea\x04q\x92a\x04FV[a\x04RV[\x82Ta\x02\x98V[\x90UV[a\x04~_a\x04-V[a\x04\x88\x82_a\x04UV[\x90a\x04\xBCa\x04\xB6\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04FV[\x91a\x04FV[\x91a\x04\xC5a\0=V[\x80a\x04\xCF\x81a\x02?V[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\n\x84V[a\0\x1D_5a\x01LV[\x80c\x0B\x83$\x9D\x14a\x01GW\x80c\x1C\x0Bcg\x14a\x01BW\x80c2pHd\x14a\x01=W\x80c3=\x87\xFE\x14a\x018W\x80c5\x14\xD3{\x14a\x013W\x80c<T\x06\x87\x14a\x01.W\x80c=D\xAE\x8B\x14a\x01)W\x80cF\xE2\xCC\t\x14a\x01$W\x80cH\\\xC9U\x14a\x01\x1FW\x80cO\xAC=D\x14a\x01\x1AW\x80c[<\xD6\xE2\x14a\x01\x15W\x80cqP\x18\xA6\x14a\x01\x10W\x80cz9y\xDC\x14a\x01\x0BW\x80c\x83G\t#\x14a\x01\x06W\x80c\x83\xD3\xC1\x15\x14a\x01\x01W\x80c\x8D\xA5\xCB[\x14a\0\xFCW\x80c\x9D\x91Y{\x14a\0\xF7W\x80c\xD4\xF0\xEBM\x14a\0\xF2Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\nQV[a\n\x1EV[a\t\xCBV[a\t;V[a\x08\xE3V[a\x08tV[a\x08\x17V[a\x07kV[a\x076V[a\x06eV[a\x05\x93V[a\x04\xF8V[a\x04\xC3V[a\x042V[a\x03\xCFV[a\x03eV[a\x030V[a\x02\xC8V[a\x01\xEAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xAAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xA5W` \x01\x92` \x83\x02\x84\x01\x11a\x01\xA0WV[a\x01lV[a\x01hV[a\x01dV[\x90` \x82\x82\x03\x12a\x01\xE0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xDBWa\x01\xD7\x92\x01a\x01pV[\x90\x91V[a\x01`V[a\x01\\V[_\x01\x90V[4a\x02\x19Wa\x02\x03a\x01\xFD6`\x04a\x01\xAFV[\x90a\x0BAV[a\x02\x0Ba\x01RV[\x80a\x02\x15\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02XW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02SW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02NWV[a\x01lV[a\x01hV[a\x01dV[\x90V[a\x02i\x81a\x02]V[\x03a\x02pWV[_\x80\xFD[\x90P5\x90a\x02\x81\x82a\x02`V[V[\x91`@\x83\x83\x03\x12a\x02\xC3W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xBEWa\x02\xB0\x83a\x02\xBB\x92\x86\x01a\x02\x1EV[\x93\x90\x94` \x01a\x02tV[\x90V[a\x01`V[a\x01\\V[4a\x02\xF7Wa\x02\xE1a\x02\xDB6`\x04a\x02\x83V[\x91a\x0C\xFEV[a\x02\xE9a\x01RV[\x80a\x02\xF3\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[_\x91\x03\x12a\x03\x06WV[a\x01\\V[\x90V[a\x03\x17\x90a\x03\x0BV[\x90RV[\x91\x90a\x03.\x90_` \x85\x01\x94\x01\x90a\x03\x0EV[V[4a\x03`Wa\x03@6`\x04a\x02\xFCV[a\x03\\a\x03Ka\r8V[a\x03Sa\x01RV[\x91\x82\x91\x82a\x03\x1BV[\x03\x90\xF3[a\x01XV[4a\x03\x94Wa\x03~a\x03x6`\x04a\x02\x83V[\x91a\x0ETV[a\x03\x86a\x01RV[\x80a\x03\x90\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x03\xCAW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xC5Wa\x03\xC1\x92\x01a\x02\x1EV[\x90\x91V[a\x01`V[a\x01\\V[4a\x03\xFEWa\x03\xE8a\x03\xE26`\x04a\x03\x99V[\x90a\x0F\x82V[a\x03\xF0a\x01RV[\x80a\x03\xFA\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\x19\x90a\x04\x03V[\x90RV[\x91\x90a\x040\x90_` \x85\x01\x94\x01\x90a\x04\x10V[V[4a\x04bWa\x04B6`\x04a\x02\xFCV[a\x04^a\x04Ma\x0F\xC0V[a\x04Ua\x01RV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01XV[\x90V[\x90V[a\x04\x81a\x04|a\x04\x86\x92a\x04gV[a\x04jV[a\x02]V[\x90V[a\x04\x93`\na\x04mV[\x90V[a\x04\x9Ea\x04\x89V[\x90V[a\x04\xAA\x90a\x02]V[\x90RV[\x91\x90a\x04\xC1\x90_` \x85\x01\x94\x01\x90a\x04\xA1V[V[4a\x04\xF3Wa\x04\xD36`\x04a\x02\xFCV[a\x04\xEFa\x04\xDEa\x04\x96V[a\x04\xE6a\x01RV[\x91\x82\x91\x82a\x04\xAEV[\x03\x90\xF3[a\x01XV[4a\x05'Wa\x05\x11a\x05\x0B6`\x04a\x03\x99V[\x90a\x10CV[a\x05\x19a\x01RV[\x80a\x05#\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05@\x90a\x05,V[\x90V[a\x05L\x81a\x057V[\x03a\x05SWV[_\x80\xFD[\x90P5\x90a\x05d\x82a\x05CV[V[\x91\x90`@\x83\x82\x03\x12a\x05\x8EW\x80a\x05\x82a\x05\x8B\x92_\x86\x01a\x05WV[\x93` \x01a\x05WV[\x90V[a\x01\\V[4a\x05\xC2Wa\x05\xACa\x05\xA66`\x04a\x05fV[\x90a\x12\x03V[a\x05\xB4a\x01RV[\x80a\x05\xBE\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x01W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\xFCW` \x01\x92` \x83\x02\x84\x01\x11a\x05\xF7WV[a\x01lV[a\x01hV[a\x01dV[\x90\x91`@\x82\x84\x03\x12a\x06`W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06[W\x83a\x061\x91\x84\x01a\x01pV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06VWa\x06R\x92\x01a\x05\xC7V[\x90\x91V[a\x01`V[a\x01`V[a\x01\\V[4a\x06\x97Wa\x06\x81a\x06x6`\x04a\x06\x06V[\x92\x91\x90\x91a\x12\xE6V[a\x06\x89a\x01RV[\x80a\x06\x93\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\xBB\x90`\x08a\x06\xC0\x93\x02a\x06\x9CV[a\x06\xA0V[\x90V[\x90a\x06\xCE\x91Ta\x06\xABV[\x90V[a\x06\xDD`\x01_\x90a\x06\xC3V[\x90V[a\x06\xF4a\x06\xEFa\x06\xF9\x92a\x05,V[a\x04jV[a\x05,V[\x90V[a\x07\x05\x90a\x06\xE0V[\x90V[a\x07\x11\x90a\x06\xFCV[\x90V[a\x07\x1D\x90a\x07\x08V[\x90RV[\x91\x90a\x074\x90_` \x85\x01\x94\x01\x90a\x07\x14V[V[4a\x07fWa\x07F6`\x04a\x02\xFCV[a\x07ba\x07Qa\x06\xD1V[a\x07Ya\x01RV[\x91\x82\x91\x82a\x07!V[\x03\x90\xF3[a\x01XV[4a\x07\x99Wa\x07{6`\x04a\x02\xFCV[a\x07\x83a\x14\x0BV[a\x07\x8Ba\x01RV[\x80a\x07\x95\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x91``\x83\x83\x03\x12a\x07\xEBWa\x07\xB5\x82_\x85\x01a\x05WV[\x92a\x07\xC3\x83` \x83\x01a\x05WV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xE6Wa\x07\xE2\x92\x01a\x02\x1EV[\x90\x91V[a\x01`V[a\x01\\V[\x15\x15\x90V[a\x07\xFE\x90a\x07\xF0V[\x90RV[\x91\x90a\x08\x15\x90_` \x85\x01\x94\x01\x90a\x07\xF5V[V[4a\x08KWa\x08Ga\x086a\x08-6`\x04a\x07\x9EV[\x92\x91\x90\x91a\x14\xC7V[a\x08>a\x01RV[\x91\x82\x91\x82a\x08\x02V[\x03\x90\xF3[a\x01XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x08\xA4Wa\x08\x846`\x04a\x02\xFCV[a\x08\xA0a\x08\x8Fa\x08PV[a\x08\x97a\x01RV[\x91\x82\x91\x82a\x04\xAEV[\x03\x90\xF3[a\x01XV[\x90\x91``\x82\x84\x03\x12a\x08\xDEWa\x08\xDBa\x08\xC4\x84_\x85\x01a\x02tV[\x93a\x08\xD2\x81` \x86\x01a\x02tV[\x93`@\x01a\x02tV[\x90V[a\x01\\V[4a\t\x14Wa\t\x10a\x08\xFFa\x08\xF96`\x04a\x08\xA9V[\x91a\x15\xD0V[a\t\x07a\x01RV[\x91\x82\x91\x82a\x04\xAEV[\x03\x90\xF3[a\x01XV[a\t\"\x90a\x057V[\x90RV[\x91\x90a\t9\x90_` \x85\x01\x94\x01\x90a\t\x19V[V[4a\tkWa\tK6`\x04a\x02\xFCV[a\tga\tVa\x16vV[a\t^a\x01RV[\x91\x82\x91\x82a\t&V[\x03\x90\xF3[a\x01XV[\x90V[_\x1B\x90V[a\t\x8Ca\t\x87a\t\x91\x92a\tpV[a\tsV[a\x03\x0BV[\x90V[a\t\xBD\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\txV[\x90V[a\t\xC8a\t\x94V[\x90V[4a\t\xFBWa\t\xDB6`\x04a\x02\xFCV[a\t\xF7a\t\xE6a\t\xC0V[a\t\xEEa\x01RV[\x91\x82\x91\x82a\x03\x1BV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\n\x19Wa\n\x16\x91_\x01a\x05WV[\x90V[a\x01\\V[4a\nLWa\n6a\n16`\x04a\n\0V[a\x176V[a\n>a\x01RV[\x80a\nH\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[4a\n\x7FWa\nia\nd6`\x04a\n\0V[a\x17\xADV[a\nqa\x01RV[\x80a\n{\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[_\x80\xFD[P\x90V[\x90V[a\n\xA3a\n\x9Ea\n\xA8\x92a\n\x8CV[a\x04jV[a\x02]V[\x90V[`\x01a\n\xB7\x91\x01a\x02]V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0B\x1CW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\x17W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0B\x12WV[a\n\xD6V[a\n\xD2V[a\n\xCEV[\x90\x82\x10\x15a\x0B<W` a\x0B8\x92\x02\x81\x01\x90a\n\xDAV[\x90\x91V[a\n\xBAV[\x90a\x0BM\x82\x82\x90a\n\x88V[\x91a\x0BW_a\n\x8FV[[\x80a\x0Bka\x0Be\x86a\x02]V[\x91a\x02]V[\x10\x15a\x0B\xC2Wa\x0B\x99\x90a\x0B\x8F32\x90a\x0B\x87\x86\x88\x86\x91a\x0B!V[\x92\x90\x91a\x14\xC7V[a\x0B\x9EW[a\n\xABV[a\x0BXV[a\x0B\xBD3a\x0B\xB7a\x0B\xB1\x86\x88\x86\x91a\x0B!V[\x90a\x18;V[\x90a\x1A\xC9V[a\x0B\x94V[PPPPV[\x91\x90a\x0B\xE5a\x0B\xDF32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\x0B\xF4Wa\x0B\xF2\x92a\x0C\xABV[V[a\x0B\xFCa\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0C\x13`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x0C \x90a\x06\xFCV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x0Cda\x0Cm` \x93a\x0Cr\x93a\x0C[\x81a\x0C#V[\x93\x84\x80\x93a\x0C'V[\x95\x86\x91\x01a\x0C0V[a\x0C;V[\x01\x90V[`@\x90a\x0C\xA2a\x0C\x97a\x0C\xA9\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0CEV[\x96` \x83\x01\x90a\x04\xA1V[\x01\x90a\x04\xA1V[V[\x90a\x0C\xB7\x903\x92a\x18;V[\x91B\x92a\x0C\xF9a\x0C\xE7\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0C\x17V[\x94a\x0C\xF0a\x01RV[\x93\x84\x93\x84a\x0CvV[\x03\x90\xA2V[\x90a\r\t\x92\x91a\x0B\xC8V[V[_\x90V[_\x1C\x90V[\x90V[a\r#a\r(\x91a\r\x0FV[a\r\x14V[\x90V[a\r5\x90Ta\r\x17V[\x90V[a\r@a\r\x0BV[Pa\rS_a\rMa\x1CxV[\x01a\r+V[\x90V[\x91\x90a\rsa\rm32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\r\x82Wa\r\x80\x92a\x0E\x08V[V[a\r\x8Aa\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\r\xA1`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r\xCA\x81a\r\xC3\x81a\r\xCF\x95a\x0C'V[\x80\x95a\r\xA5V[a\x0C;V[\x01\x90V[a\r\xFFa\r\xF4`@\x93a\x0E\x06\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\r\xB0V[\x96` \x83\x01\x90a\x04\xA1V[\x01\x90a\x04\xA1V[V[\x90\x913\x91\x92\x90\x92a\x0EOBa\x0E=\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0C\x17V[\x95a\x0EFa\x01RV[\x94\x85\x94\x85a\r\xD3V[\x03\x90\xA2V[\x90a\x0E_\x92\x91a\rVV[V[\x90a\x0E}a\x0Ew32\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\x0E\x8CWa\x0E\x8A\x91a\x0FlV[V[a\x0E\x94a\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0E\xAB`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0E\xD1\x90a\x0C;V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xEBW`@RV[a\x0E\xB3V[\x90a\x0F\x03a\x0E\xFCa\x01RV[\x92\x83a\x0E\xC7V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0F#Wa\x0F\x1F` \x91a\x0C;V[\x01\x90V[a\x0E\xB3V[\x90\x92\x91\x92a\x0F=a\x0F8\x82a\x0F\x05V[a\x0E\xF0V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x0FYWa\x0FW\x92a\r\xA5V[V[a\x0E\xAFV[a\x0Fi\x916\x91a\x0F(V[\x90V[a\x0Fza\x0F\x80\x923\x92a\x0F^V[\x90a\x1A\xC9V[V[\x90a\x0F\x8C\x91a\x0EaV[V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\xABa\x0F\xB0\x91a\r\x0FV[a\x0F\x92V[\x90V[a\x0F\xBD\x90Ta\x0F\x9FV[\x90V[a\x0F\xC8a\x0F\x8EV[Pa\x0F\xDC`\x01a\x0F\xD6a\x1CxV[\x01a\x0F\xB3V[\x90V[\x90a\x0F\xFBa\x0F\xF532\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\x10\nWa\x10\x08\x91a\x10-V[V[a\x10\x12a\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x10)`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x10;a\x10A\x923\x92a\x18;V[\x90a\x1A\xC9V[V[\x90a\x10M\x91a\x0F\xDFV[V[\x90a\x10a\x91a\x10\\a\x1C\x9CV[a\x11hV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x10{a\x10\x80\x91a\x10cV[a\x10iV[\x90V[a\x10\x8D\x90Ta\x10oV[\x90V[a\x10\xA4a\x10\x9Fa\x10\xA9\x92a\n\x8CV[a\x04jV[a\x05,V[\x90V[a\x10\xB5\x90a\x10\x90V[\x90V[`\xA0\x1B\x90V[\x90a\x10\xCD`\xFF`\xA0\x1B\x91a\x10\xB8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xE0\x90a\x07\xF0V[\x90V[\x90V[\x90a\x10\xFBa\x10\xF6a\x11\x02\x92a\x10\xD7V[a\x10\xE3V[\x82Ta\x10\xBEV[\x90UV[a\x11\x0F\x90a\x06\xE0V[\x90V[a\x11\x1B\x90a\x11\x06V[\x90V[\x90a\x11/`\x01\x80`\xA0\x1B\x03\x91a\tsV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11B\x90a\x11\x06V[\x90V[\x90V[\x90a\x11]a\x11Xa\x11d\x92a\x119V[a\x11EV[\x82Ta\x11\x1EV[\x90UV[a\x11r`\x01a\x10\x83V[a\x11\xE1W\x81a\x11\x91a\x11\x8Ba\x11\x86_a\x10\xACV[a\x057V[\x91a\x057V[\x14a\x11\xBEWa\x11\xB7a\x11\xB0a\x11\xBC\x93a\x11\xAB`\x01\x80a\x10\xE6V[a\x11\x12V[`\x01a\x11HV[a\x17\xADV[V[a\x11\xC6a\x01RV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x11\xDD`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x11\xE9a\x01RV[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x11\xFF`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[\x90a\x12\r\x91a\x10OV[V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x12v`2`@\x92a\x12\x13V[a\x12\x7F\x81a\x12\x1CV[\x01\x90V[a\x12\x98\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12iV[\x90V[\x15a\x12\xA2WV[a\x12\xAAa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xC0`\x04\x82\x01a\x12\x83V[\x03\x90\xFD[\x91\x90\x81\x10\x15a\x12\xD4W` \x02\x01\x90V[a\n\xBAV[5a\x12\xE3\x81a\x02`V[\x90V[\x90\x92a\x12\xF3\x82\x85\x90a\n\x88V[\x93a\x13\x1A\x85a\x13\x14a\x13\x0Ea\x13\t\x88\x87\x90a\x12\x0FV[a\x02]V[\x91a\x02]V[\x14a\x12\x9BV[a\x13#_a\n\x8FV[[\x80a\x137a\x131\x88a\x02]V[\x91a\x02]V[\x10\x15a\x13\xDEWa\x13e\x90a\x13[32\x90a\x13S\x88\x87\x86\x91a\x0B!V[\x92\x90\x91a\x14\xC7V[a\x13jW[a\n\xABV[a\x13$V[3a\x13\x80a\x13z\x87\x86\x85\x91a\x0B!V[\x90a\x18;V[\x90a\x13\x95a\x13\x90\x89\x88\x86\x91a\x12\xC4V[a\x12\xD9V[B\x92a\x13\xD6a\x13\xC4\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0C\x17V[\x94a\x13\xCDa\x01RV[\x93\x84\x93\x84a\x0CvV[\x03\x90\xA2a\x13`V[PPPPPPV[a\x13\xEEa\x1C\x9CV[a\x13\xF6a\x13\xF8V[V[a\x14\ta\x14\x04_a\x10\xACV[a\x1D\x14V[V[a\x14\x13a\x13\xE6V[V[_\x90V[a\x14%a\x14*\x91a\r\x0FV[a\x06\xA0V[\x90V[a\x147\x90Ta\x14\x19V[\x90V[`\xE0\x1B\x90V[a\x14I\x81a\x07\xF0V[\x03a\x14PWV[_\x80\xFD[\x90PQ\x90a\x14a\x82a\x14@V[V[\x90` \x82\x82\x03\x12a\x14|Wa\x14y\x91_\x01a\x14TV[\x90V[a\x01\\V[a\x14\xA7a\x14\xB4\x95\x93\x94\x92\x94a\x14\x9D``\x84\x01\x96_\x85\x01\x90a\t\x19V[` \x83\x01\x90a\t\x19V[`@\x81\x85\x03\x91\x01Ra\r\xB0V[\x90V[a\x14\xBFa\x01RV[=_\x82>=\x90\xFD[\x92a\x15\n` \x93\x94a\x14\xD7a\x14\x15V[Pa\x15\x15a\x14\xEDa\x14\xE8`\x01a\x14-V[a\x07\x08V[\x93cz9y\xDC\x92\x95\x97a\x14\xFEa\x01RV[\x98\x89\x97\x88\x96\x87\x96a\x14:V[\x86R`\x04\x86\x01a\x14\x81V[\x03\x91Z\xFA\x90\x81\x15a\x15YW_\x91a\x15+W[P\x90V[a\x15L\x91P` =\x81\x11a\x15RW[a\x15D\x81\x83a\x0E\xC7V[\x81\x01\x90a\x14cV[_a\x15'V[P=a\x15:V[a\x14\xB7V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\x85a\x15\x8B\x91\x93\x92\x93a\x02]V[\x92a\x02]V[\x82\x03\x91\x82\x11a\x15\x96WV[a\x15bV[a\x15\xAAa\x15\xB0\x91\x93\x92\x93a\x02]V[\x92a\x02]V[\x91a\x15\xBC\x83\x82\x02a\x02]V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\xCBWV[a\x15bV[\x91a\x15\xD9a\x15^V[P\x80a\x15\xEDa\x15\xE7\x84a\x02]V[\x91a\x02]V[\x11\x15a\x16AWa\x16\x0E\x91a\x16\0\x91a\x15vV[a\x16\x08a\x04\x89V[\x90a\x15\x9BV[\x80a\x16!a\x16\x1B\x84a\x02]V[\x91a\x02]V[\x10\x15a\x163Wa\x160\x91a\x15vV[\x90V[PPa\x16>_a\n\x8FV[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16aa\x16f\x91a\r\x0FV[a\x16JV[\x90V[a\x16s\x90Ta\x16UV[\x90V[a\x16~a\x16FV[Pa\x16\x88_a\x16iV[\x90V[a\x16\x9C\x90a\x16\x97a\x1C\x9CV[a\x16\x9EV[V[\x80a\x16\xB9a\x16\xB3a\x16\xAE_a\x10\xACV[a\x057V[\x91a\x057V[\x14a\x17\x13Wa\x16\xD1a\x16\xCA\x82a\x11\x12V[`\x01a\x11HV[a\x16\xFB\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0C\x17V[\x90a\x17\x04a\x01RV[\x80a\x17\x0E\x81a\x01\xE5V[\x03\x90\xA2V[a\x17\x1Ba\x01RV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x172`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x17?\x90a\x16\x8BV[V[a\x17R\x90a\x17Ma\x1C\x9CV[a\x17TV[V[\x80a\x17oa\x17ia\x17d_a\x10\xACV[a\x057V[\x91a\x057V[\x14a\x17\x7FWa\x17}\x90a\x1D\x14V[V[a\x17\xA9a\x17\x8B_a\x10\xACV[a\x17\x93a\x01RV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t&V[\x03\x90\xFD[a\x17\xB6\x90a\x17AV[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x17\xE0a\x17\xDBa\x17\xE5\x92a\n\x8CV[a\x17\xC6V[a\x17\xBDV[\x90V[\x90V[a\x17\xF7a\x17\xFC\x91a\x17\xBDV[a\x17\xE8V[\x90RV[\x90P\x90V[\x90\x91\x82a\x18\x15\x81a\x18\x1C\x93a\x18\0V[\x80\x93a\r\xA5V[\x01\x90V[\x80a\x181`\x01\x92a\x188\x96\x94a\x17\xEBV[\x01\x91a\x18\x05V[\x90V[a\x18y\x90a\x18Ga\x17\xB8V[Pa\x18ja\x18T_a\x17\xCCV[\x91\x93a\x18^a\x01RV[\x94\x85\x93` \x85\x01a\x18 V[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\xC7V[\x90V[a\x18\x85\x90a\x06\xE0V[\x90V[a\x18\x91\x90a\x18|V[\x90V[a\x18\x9E`da\x18\x88V[\x90V[a\x18\xAA\x90a\x06\xFCV[\x90V[\x90PQ\x90a\x18\xBA\x82a\x02`V[V[\x90` \x82\x82\x03\x12a\x18\xD5Wa\x18\xD2\x91_\x01a\x18\xADV[\x90V[a\x01\\V[` \x01\x90V[\x90V[a\x18\xEFa\x18\xF4\x91a\x03\x0BV[a\x18\xE0V[\x90RV[``\x1B\x90V[a\x19\x07\x90a\x18\xF8V[\x90V[a\x19\x13\x90a\x18\xFEV[\x90V[a\x19\"a\x19'\x91a\x057V[a\x19\nV[\x90RV[\x90V[a\x19:a\x19?\x91a\x02]V[a\x19+V[\x90RV[`\xC0\x1B\x90V[a\x19R\x90a\x19CV[\x90V[a\x19aa\x19f\x91a\x04\x03V[a\x19IV[\x90RV[a\x19\xBA\x94a\x19\xAA` `\x08\x96a\x19\xA2`\x14\x83\x9C\x9B\x98a\x19\x9A\x85\x89a\x19\x92\x82\x9Ba\x19\xB2\x9Da\x18\xE3V[\x01\x80\x92a\x19\x16V[\x01\x80\x92a\x19.V[\x01\x80\x92a\x19.V[\x01\x80\x92a\x19UV[\x01\x80\x92a\x18\xE3V[\x01\x90V[\x90a\x19\xCA_\x19\x91a\tsV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xDD\x90a\x03\x0BV[\x90V[a\x19\xE9\x90a\r\x0FV[\x90V[\x90a\x1A\x01a\x19\xFCa\x1A\x08\x92a\x19\xD4V[a\x19\xE0V[\x82Ta\x19\xBEV[\x90UV[\x90V[a\x1A#a\x1A\x1Ea\x1A(\x92a\x1A\x0CV[a\x04jV[a\x04\x03V[\x90V[a\x1A7a\x1A=\x91a\x04\x03V[\x91a\x04\x03V[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1APWV[a\x15bV[\x90a\x1Ahg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\tsV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\x86a\x1A\x81a\x1A\x8B\x92a\x04\x03V[a\x04jV[a\x04\x03V[\x90V[\x90V[\x90a\x1A\xA6a\x1A\xA1a\x1A\xAD\x92a\x1ArV[a\x1A\x8EV[\x82Ta\x1AUV[\x90UV[a\x1A\xC6\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0CEV[\x90V[a\x1B\x9Aa\x1A\xD4a\x1CxV[a\x1BuCa\x1A\xE8a\x1A\xE3a\x18\x94V[a\x18\xA1V[;a\x1A\xFBa\x1A\xF5_a\n\x8FV[\x91a\x02]V[\x11a\x1B\xDEW[a\x1BZa\x1B\x0F_\x85\x01a\r+V[a\x1BK\x87\x93Ba\x1B!`\x01\x89\x01a\x0F\xB3V[\x90\x8Ba\x1B5a\x1B/\x82a\x0C#V[\x91a\x18\xDAV[ \x92a\x1B?a\x01RV[\x97\x88\x96` \x88\x01a\x19jV[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\xC7V[a\x1Bla\x1Bf\x82a\x0C#V[\x91a\x18\xDAV[ _\x83\x01a\x19\xECV[a\x1B\x94`\x01a\x1B\x83\x81a\x1A\x0FV[\x92\x01\x91a\x1B\x8F\x83a\x0F\xB3V[a\x1A+V[\x90a\x1A\x91V[a\x1B\xD9a\x1B\xC7\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0C\x17V[\x92a\x1B\xD0a\x01RV[\x91\x82\x91\x82a\x1A\xB1V[\x03\x90\xA2V[a\x1C\t` a\x1B\xF3a\x1B\xEEa\x18\x94V[a\x18\xA1V[c\xA3\xB1\xB3\x1D\x90a\x1C\x01a\x01RV[\x93\x84\x92a\x14:V[\x82R\x81\x80a\x1C\x19`\x04\x82\x01a\x01\xE5V[\x03\x91Z\xFA\x80\x91_\x92a\x1CHW[P\x15_\x14a\x1CAWP`\x01a\x1C<W[[a\x1B\x01V[a\x1C6V[\x90Pa\x1C7V[a\x1Cj\x91\x92P` =\x81\x11a\x1CqW[a\x1Cb\x81\x83a\x0E\xC7V[\x81\x01\x90a\x18\xBCV[\x90_a\x1C&V[P=a\x1CXV[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x1C\xA4a\x16vV[a\x1C\xBDa\x1C\xB7a\x1C\xB2a\x1DsV[a\x057V[\x91a\x057V[\x03a\x1C\xC4WV[a\x1C\xEDa\x1C\xCFa\x1DsV[a\x1C\xD7a\x01RV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t&V[\x03\x90\xFD[\x90V[\x90a\x1D\ta\x1D\x04a\x1D\x10\x92a\x0C\x17V[a\x1C\xF1V[\x82Ta\x11\x1EV[\x90UV[a\x1D\x1D_a\x16iV[a\x1D'\x82_a\x1C\xF4V[\x90a\x1D[a\x1DU\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\x17V[\x91a\x0C\x17V[\x91a\x1Dda\x01RV[\x80a\x1Dn\x81a\x01\xE5V[\x03\x90\xA3V[a\x1D{a\x16FV[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610a84565b61001d5f3561014c565b80630b83249d146101475780631c0b636714610142578063327048641461013d578063333d87fe146101385780633514d37b146101335780633c5406871461012e5780633d44ae8b1461012957806346e2cc0914610124578063485cc9551461011f5780634fac3d441461011a5780635b3cd6e214610115578063715018a6146101105780637a3979dc1461010b578063834709231461010657806383d3c115146101015780638da5cb5b146100fc5780639d91597b146100f7578063d4f0eb4d146100f25763f2fde38b0361000e57610a51565b610a1e565b6109cb565b61093b565b6108e3565b610874565b610817565b61076b565b610736565b610665565b610593565b6104f8565b6104c3565b610432565b6103cf565b610365565b610330565b6102c8565b6101ea565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101aa5781359167ffffffffffffffff83116101a55760200192602083028401116101a057565b61016c565b610168565b610164565b906020828203126101e0575f82013567ffffffffffffffff81116101db576101d79201610170565b9091565b610160565b61015c565b5f0190565b34610219576102036101fd3660046101af565b90610b41565b61020b610152565b80610215816101e5565b0390f35b610158565b909182601f830112156102585781359167ffffffffffffffff831161025357602001926001830284011161024e57565b61016c565b610168565b610164565b90565b6102698161025d565b0361027057565b5f80fd5b9050359061028182610260565b565b916040838303126102c3575f83013567ffffffffffffffff81116102be576102b0836102bb92860161021e565b939094602001610274565b90565b610160565b61015c565b346102f7576102e16102db366004610283565b91610cfe565b6102e9610152565b806102f3816101e5565b0390f35b610158565b5f91031261030657565b61015c565b90565b6103179061030b565b9052565b919061032e905f6020850194019061030e565b565b34610360576103403660046102fc565b61035c61034b610d38565b610353610152565b9182918261031b565b0390f35b610158565b346103945761037e610378366004610283565b91610e54565b610386610152565b80610390816101e5565b0390f35b610158565b906020828203126103ca575f82013567ffffffffffffffff81116103c5576103c1920161021e565b9091565b610160565b61015c565b346103fe576103e86103e2366004610399565b90610f82565b6103f0610152565b806103fa816101e5565b0390f35b610158565b67ffffffffffffffff1690565b61041990610403565b9052565b9190610430905f60208501940190610410565b565b34610462576104423660046102fc565b61045e61044d610fc0565b610455610152565b9182918261041d565b0390f35b610158565b90565b90565b61048161047c61048692610467565b61046a565b61025d565b90565b610493600a61046d565b90565b61049e610489565b90565b6104aa9061025d565b9052565b91906104c1905f602085019401906104a1565b565b346104f3576104d33660046102fc565b6104ef6104de610496565b6104e6610152565b918291826104ae565b0390f35b610158565b346105275761051161050b366004610399565b90611043565b610519610152565b80610523816101e5565b0390f35b610158565b60018060a01b031690565b6105409061052c565b90565b61054c81610537565b0361055357565b5f80fd5b9050359061056482610543565b565b919060408382031261058e578061058261058b925f8601610557565b93602001610557565b90565b61015c565b346105c2576105ac6105a6366004610566565b90611203565b6105b4610152565b806105be816101e5565b0390f35b610158565b909182601f830112156106015781359167ffffffffffffffff83116105fc5760200192602083028401116105f757565b61016c565b610168565b610164565b9091604082840312610660575f82013567ffffffffffffffff811161065b5783610631918401610170565b929093602082013567ffffffffffffffff81116106565761065292016105c7565b9091565b610160565b610160565b61015c565b3461069757610681610678366004610606565b929190916112e6565b610689610152565b80610693816101e5565b0390f35b610158565b1c90565b60018060a01b031690565b6106bb9060086106c0930261069c565b6106a0565b90565b906106ce91546106ab565b90565b6106dd60015f906106c3565b90565b6106f46106ef6106f99261052c565b61046a565b61052c565b90565b610705906106e0565b90565b610711906106fc565b90565b61071d90610708565b9052565b9190610734905f60208501940190610714565b565b34610766576107463660046102fc565b6107626107516106d1565b610759610152565b91829182610721565b0390f35b610158565b346107995761077b3660046102fc565b61078361140b565b61078b610152565b80610795816101e5565b0390f35b610158565b916060838303126107eb576107b5825f8501610557565b926107c38360208301610557565b92604082013567ffffffffffffffff81116107e6576107e2920161021e565b9091565b610160565b61015c565b151590565b6107fe906107f0565b9052565b9190610815905f602085019401906107f5565b565b3461084b5761084761083661082d36600461079e565b929190916114c7565b61083e610152565b91829182610802565b0390f35b610158565b7f000000000000000000000000000000000000000000000000000000000000000090565b346108a4576108843660046102fc565b6108a061088f610850565b610897610152565b918291826104ae565b0390f35b610158565b90916060828403126108de576108db6108c4845f8501610274565b936108d28160208601610274565b93604001610274565b90565b61015c565b34610914576109106108ff6108f93660046108a9565b916115d0565b610907610152565b918291826104ae565b0390f35b610158565b61092290610537565b9052565b9190610939905f60208501940190610919565b565b3461096b5761094b3660046102fc565b610967610956611676565b61095e610152565b91829182610926565b0390f35b610158565b90565b5f1b90565b61098c61098761099192610970565b610973565b61030b565b90565b6109bd7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a969610978565b90565b6109c8610994565b90565b346109fb576109db3660046102fc565b6109f76109e66109c0565b6109ee610152565b9182918261031b565b0390f35b610158565b90602082820312610a1957610a16915f01610557565b90565b61015c565b34610a4c57610a36610a31366004610a00565b611736565b610a3e610152565b80610a48816101e5565b0390f35b610158565b34610a7f57610a69610a64366004610a00565b6117ad565b610a71610152565b80610a7b816101e5565b0390f35b610158565b5f80fd5b5090565b90565b610aa3610a9e610aa892610a8c565b61046a565b61025d565b90565b6001610ab7910161025d565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610b1c570180359067ffffffffffffffff8211610b1757602001916001820236038313610b1257565b610ad6565b610ad2565b610ace565b90821015610b3c576020610b389202810190610ada565b9091565b610aba565b90610b4d828290610a88565b91610b575f610a8f565b5b80610b6b610b658661025d565b9161025d565b1015610bc257610b9990610b8f333290610b8786888691610b21565b9290916114c7565b610b9e575b610aab565b610b58565b610bbd33610bb7610bb186888691610b21565b9061183b565b90611ac9565b610b94565b50505050565b9190610be5610bdf333290868591929091926114c7565b156107f0565b610bf457610bf292610cab565b565b610bfc610152565b6361aec64960e11b815280610c13600482016101e5565b0390fd5b610c20906106fc565b90565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b610c64610c6d602093610c7293610c5b81610c23565b93848093610c27565b95869101610c30565b610c3b565b0190565b604090610ca2610c97610ca99597969460608401908482035f860152610c45565b9660208301906104a1565b01906104a1565b565b90610cb790339261183b565b914292610cf9610ce77f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610c17565b94610cf0610152565b93849384610c76565b0390a2565b90610d099291610bc8565b565b5f90565b5f1c90565b90565b610d23610d2891610d0f565b610d14565b90565b610d359054610d17565b90565b610d40610d0b565b50610d535f610d4d611c78565b01610d2b565b90565b9190610d73610d6d333290868591929091926114c7565b156107f0565b610d8257610d8092610e08565b565b610d8a610152565b6361aec64960e11b815280610da1600482016101e5565b0390fd5b90825f939282370152565b9190610dca81610dc381610dcf95610c27565b8095610da5565b610c3b565b0190565b610dff610df4604093610e069698979560608501918583035f870152610db0565b9660208301906104a1565b01906104a1565b565b90913391929092610e4f42610e3d7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610c17565b95610e46610152565b94859485610dd3565b0390a2565b90610e5f9291610d56565b565b90610e7d610e77333290858591929091926114c7565b156107f0565b610e8c57610e8a91610f6c565b565b610e94610152565b6361aec64960e11b815280610eab600482016101e5565b0390fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b90610ed190610c3b565b810190811067ffffffffffffffff821117610eeb57604052565b610eb3565b90610f03610efc610152565b9283610ec7565b565b67ffffffffffffffff8111610f2357610f1f602091610c3b565b0190565b610eb3565b90929192610f3d610f3882610f05565b610ef0565b93818552602085019082840111610f5957610f5792610da5565b565b610eaf565b610f69913691610f28565b90565b610f7a610f80923392610f5e565b90611ac9565b565b90610f8c91610e61565b565b5f90565b67ffffffffffffffff1690565b610fab610fb091610d0f565b610f92565b90565b610fbd9054610f9f565b90565b610fc8610f8e565b50610fdc6001610fd6611c78565b01610fb3565b90565b90610ffb610ff5333290858591929091926114c7565b156107f0565b61100a576110089161102d565b565b611012610152565b6361aec64960e11b815280611029600482016101e5565b0390fd5b61103b61104192339261183b565b90611ac9565b565b9061104d91610fdf565b565b906110619161105c611c9c565b611168565b565b60a01c90565b60ff1690565b61107b61108091611063565b611069565b90565b61108d905461106f565b90565b6110a461109f6110a992610a8c565b61046a565b61052c565b90565b6110b590611090565b90565b60a01b90565b906110cd60ff60a01b916110b8565b9181191691161790565b6110e0906107f0565b90565b90565b906110fb6110f6611102926110d7565b6110e3565b82546110be565b9055565b61110f906106e0565b90565b61111b90611106565b90565b9061112f60018060a01b0391610973565b9181191691161790565b61114290611106565b90565b90565b9061115d61115861116492611139565b611145565b825461111e565b9055565b6111726001611083565b6111e1578161119161118b6111865f6110ac565b610537565b91610537565b146111be576111b76111b06111bc936111ab6001806110e6565b611112565b6001611148565b6117ad565b565b6111c6610152565b632e7f3c7f60e11b8152806111dd600482016101e5565b0390fd5b6111e9610152565b62dc149f60e41b8152806111ff600482016101e5565b0390fd5b9061120d9161104f565b565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b6112766032604092611213565b61127f8161121c565b0190565b6112989060208101905f818303910152611269565b90565b156112a257565b6112aa610152565b62461bcd60e51b8152806112c060048201611283565b0390fd5b91908110156112d4576020020190565b610aba565b356112e381610260565b90565b90926112f3828590610a88565b9361131a8561131461130e61130988879061120f565b61025d565b9161025d565b1461129b565b6113235f610a8f565b5b806113376113318861025d565b9161025d565b10156113de576113659061135b33329061135388878691610b21565b9290916114c7565b61136a575b610aab565b611324565b3361138061137a87868591610b21565b9061183b565b90611395611390898886916112c4565b6112d9565b42926113d66113c47f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610c17565b946113cd610152565b93849384610c76565b0390a2611360565b505050505050565b6113ee611c9c565b6113f66113f8565b565b6114096114045f6110ac565b611d14565b565b6114136113e6565b565b5f90565b61142561142a91610d0f565b6106a0565b90565b6114379054611419565b90565b60e01b90565b611449816107f0565b0361145057565b5f80fd5b9050519061146182611440565b565b9060208282031261147c57611479915f01611454565b90565b61015c565b6114a76114b4959394929461149d60608401965f850190610919565b6020830190610919565b6040818503910152610db0565b90565b6114bf610152565b3d5f823e3d90fd5b9261150a602093946114d7611415565b506115156114ed6114e8600161142d565b610708565b93637a3979dc9295976114fe610152565b9889978896879661143a565b865260048601611481565b03915afa908115611559575f9161152b575b5090565b61154c915060203d8111611552575b6115448183610ec7565b810190611463565b5f611527565b503d61153a565b6114b7565b5f90565b634e487b7160e01b5f52601160045260245ffd5b61158561158b9193929361025d565b9261025d565b820391821161159657565b611562565b6115aa6115b09193929361025d565b9261025d565b916115bc83820261025d565b9281840414901517156115cb57565b611562565b916115d961155e565b50806115ed6115e78461025d565b9161025d565b11156116415761160e9161160091611576565b611608610489565b9061159b565b8061162161161b8461025d565b9161025d565b10156116335761163091611576565b90565b505061163e5f610a8f565b90565b505090565b5f90565b60018060a01b031690565b61166161166691610d0f565b61164a565b90565b6116739054611655565b90565b61167e611646565b506116885f611669565b90565b61169c90611697611c9c565b61169e565b565b806116b96116b36116ae5f6110ac565b610537565b91610537565b14611713576116d16116ca82611112565b6001611148565b6116fb7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610c17565b90611704610152565b8061170e816101e5565b0390a2565b61171b610152565b632e7f3c7f60e11b815280611732600482016101e5565b0390fd5b61173f9061168b565b565b6117529061174d611c9c565b611754565b565b8061176f6117696117645f6110ac565b610537565b91610537565b1461177f5761177d90611d14565b565b6117a961178b5f6110ac565b611793610152565b918291631e4fbdf760e01b835260048301610926565b0390fd5b6117b690611741565b565b606090565b60ff60f81b1690565b60f81b90565b6117e06117db6117e592610a8c565b6117c6565b6117bd565b90565b90565b6117f76117fc916117bd565b6117e8565b9052565b905090565b9091826118158161181c93611800565b8093610da5565b0190565b8061183160019261183896946117eb565b0191611805565b90565b611879906118476117b8565b5061186a6118545f6117cc565b919361185e610152565b94859360208501611820565b60208201810382520382610ec7565b90565b611885906106e0565b90565b6118919061187c565b90565b61189e6064611888565b90565b6118aa906106fc565b90565b905051906118ba82610260565b565b906020828203126118d5576118d2915f016118ad565b90565b61015c565b60200190565b90565b6118ef6118f49161030b565b6118e0565b9052565b60601b90565b611907906118f8565b90565b611913906118fe565b90565b61192261192791610537565b61190a565b9052565b90565b61193a61193f9161025d565b61192b565b9052565b60c01b90565b61195290611943565b90565b61196161196691610403565b611949565b9052565b6119ba946119aa60206008966119a26014839c9b9861199a8589611992829b6119b29d6118e3565b018092611916565b01809261192e565b01809261192e565b018092611955565b0180926118e3565b0190565b906119ca5f1991610973565b9181191691161790565b6119dd9061030b565b90565b6119e990610d0f565b90565b90611a016119fc611a08926119d4565b6119e0565b82546119be565b9055565b90565b611a23611a1e611a2892611a0c565b61046a565b610403565b90565b611a37611a3d91610403565b91610403565b019067ffffffffffffffff8211611a5057565b611562565b90611a6867ffffffffffffffff91610973565b9181191691161790565b611a86611a81611a8b92610403565b61046a565b610403565b90565b90565b90611aa6611aa1611aad92611a72565b611a8e565b8254611a55565b9055565b611ac69160208201915f818403910152610c45565b90565b611b9a611ad4611c78565b611b7543611ae8611ae3611894565b6118a1565b3b611afb611af55f610a8f565b9161025d565b11611bde575b611b5a611b0f5f8501610d2b565b611b4b879342611b2160018901610fb3565b908b611b35611b2f82610c23565b916118da565b2092611b3f610152565b9788966020880161196a565b60208201810382520382610ec7565b611b6c611b6682610c23565b916118da565b205f83016119ec565b611b946001611b8381611a0f565b920191611b8f83610fb3565b611a2b565b90611a91565b611bd9611bc77f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610c17565b92611bd0610152565b91829182611ab1565b0390a2565b611c096020611bf3611bee611894565b6118a1565b63a3b1b31d90611c01610152565b93849261143a565b82528180611c19600482016101e5565b03915afa80915f92611c48575b50155f14611c4157506001611c3c575b5b611b01565b611c36565b9050611c37565b611c6a91925060203d8111611c71575b611c628183610ec7565b8101906118bc565b905f611c26565b503d611c58565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b611ca4611676565b611cbd611cb7611cb2611d73565b610537565b91610537565b03611cc457565b611ced611ccf611d73565b611cd7610152565b91829163118cdaa760e01b835260048301610926565b0390fd5b90565b90611d09611d04611d1092610c17565b611cf1565b825461111e565b9055565b611d1d5f611669565b611d27825f611cf4565b90611d5b611d557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610c17565b91610c17565b91611d64610152565b80611d6e816101e5565b0390a3565b611d7b611646565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\n\x84V[a\0\x1D_5a\x01LV[\x80c\x0B\x83$\x9D\x14a\x01GW\x80c\x1C\x0Bcg\x14a\x01BW\x80c2pHd\x14a\x01=W\x80c3=\x87\xFE\x14a\x018W\x80c5\x14\xD3{\x14a\x013W\x80c<T\x06\x87\x14a\x01.W\x80c=D\xAE\x8B\x14a\x01)W\x80cF\xE2\xCC\t\x14a\x01$W\x80cH\\\xC9U\x14a\x01\x1FW\x80cO\xAC=D\x14a\x01\x1AW\x80c[<\xD6\xE2\x14a\x01\x15W\x80cqP\x18\xA6\x14a\x01\x10W\x80cz9y\xDC\x14a\x01\x0BW\x80c\x83G\t#\x14a\x01\x06W\x80c\x83\xD3\xC1\x15\x14a\x01\x01W\x80c\x8D\xA5\xCB[\x14a\0\xFCW\x80c\x9D\x91Y{\x14a\0\xF7W\x80c\xD4\xF0\xEBM\x14a\0\xF2Wc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\nQV[a\n\x1EV[a\t\xCBV[a\t;V[a\x08\xE3V[a\x08tV[a\x08\x17V[a\x07kV[a\x076V[a\x06eV[a\x05\x93V[a\x04\xF8V[a\x04\xC3V[a\x042V[a\x03\xCFV[a\x03eV[a\x030V[a\x02\xC8V[a\x01\xEAV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xAAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xA5W` \x01\x92` \x83\x02\x84\x01\x11a\x01\xA0WV[a\x01lV[a\x01hV[a\x01dV[\x90` \x82\x82\x03\x12a\x01\xE0W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xDBWa\x01\xD7\x92\x01a\x01pV[\x90\x91V[a\x01`V[a\x01\\V[_\x01\x90V[4a\x02\x19Wa\x02\x03a\x01\xFD6`\x04a\x01\xAFV[\x90a\x0BAV[a\x02\x0Ba\x01RV[\x80a\x02\x15\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02XW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02SW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x02NWV[a\x01lV[a\x01hV[a\x01dV[\x90V[a\x02i\x81a\x02]V[\x03a\x02pWV[_\x80\xFD[\x90P5\x90a\x02\x81\x82a\x02`V[V[\x91`@\x83\x83\x03\x12a\x02\xC3W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xBEWa\x02\xB0\x83a\x02\xBB\x92\x86\x01a\x02\x1EV[\x93\x90\x94` \x01a\x02tV[\x90V[a\x01`V[a\x01\\V[4a\x02\xF7Wa\x02\xE1a\x02\xDB6`\x04a\x02\x83V[\x91a\x0C\xFEV[a\x02\xE9a\x01RV[\x80a\x02\xF3\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[_\x91\x03\x12a\x03\x06WV[a\x01\\V[\x90V[a\x03\x17\x90a\x03\x0BV[\x90RV[\x91\x90a\x03.\x90_` \x85\x01\x94\x01\x90a\x03\x0EV[V[4a\x03`Wa\x03@6`\x04a\x02\xFCV[a\x03\\a\x03Ka\r8V[a\x03Sa\x01RV[\x91\x82\x91\x82a\x03\x1BV[\x03\x90\xF3[a\x01XV[4a\x03\x94Wa\x03~a\x03x6`\x04a\x02\x83V[\x91a\x0ETV[a\x03\x86a\x01RV[\x80a\x03\x90\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\x03\xCAW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xC5Wa\x03\xC1\x92\x01a\x02\x1EV[\x90\x91V[a\x01`V[a\x01\\V[4a\x03\xFEWa\x03\xE8a\x03\xE26`\x04a\x03\x99V[\x90a\x0F\x82V[a\x03\xF0a\x01RV[\x80a\x03\xFA\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x04\x19\x90a\x04\x03V[\x90RV[\x91\x90a\x040\x90_` \x85\x01\x94\x01\x90a\x04\x10V[V[4a\x04bWa\x04B6`\x04a\x02\xFCV[a\x04^a\x04Ma\x0F\xC0V[a\x04Ua\x01RV[\x91\x82\x91\x82a\x04\x1DV[\x03\x90\xF3[a\x01XV[\x90V[\x90V[a\x04\x81a\x04|a\x04\x86\x92a\x04gV[a\x04jV[a\x02]V[\x90V[a\x04\x93`\na\x04mV[\x90V[a\x04\x9Ea\x04\x89V[\x90V[a\x04\xAA\x90a\x02]V[\x90RV[\x91\x90a\x04\xC1\x90_` \x85\x01\x94\x01\x90a\x04\xA1V[V[4a\x04\xF3Wa\x04\xD36`\x04a\x02\xFCV[a\x04\xEFa\x04\xDEa\x04\x96V[a\x04\xE6a\x01RV[\x91\x82\x91\x82a\x04\xAEV[\x03\x90\xF3[a\x01XV[4a\x05'Wa\x05\x11a\x05\x0B6`\x04a\x03\x99V[\x90a\x10CV[a\x05\x19a\x01RV[\x80a\x05#\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x05@\x90a\x05,V[\x90V[a\x05L\x81a\x057V[\x03a\x05SWV[_\x80\xFD[\x90P5\x90a\x05d\x82a\x05CV[V[\x91\x90`@\x83\x82\x03\x12a\x05\x8EW\x80a\x05\x82a\x05\x8B\x92_\x86\x01a\x05WV[\x93` \x01a\x05WV[\x90V[a\x01\\V[4a\x05\xC2Wa\x05\xACa\x05\xA66`\x04a\x05fV[\x90a\x12\x03V[a\x05\xB4a\x01RV[\x80a\x05\xBE\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x01W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x05\xFCW` \x01\x92` \x83\x02\x84\x01\x11a\x05\xF7WV[a\x01lV[a\x01hV[a\x01dV[\x90\x91`@\x82\x84\x03\x12a\x06`W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06[W\x83a\x061\x91\x84\x01a\x01pV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06VWa\x06R\x92\x01a\x05\xC7V[\x90\x91V[a\x01`V[a\x01`V[a\x01\\V[4a\x06\x97Wa\x06\x81a\x06x6`\x04a\x06\x06V[\x92\x91\x90\x91a\x12\xE6V[a\x06\x89a\x01RV[\x80a\x06\x93\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\xBB\x90`\x08a\x06\xC0\x93\x02a\x06\x9CV[a\x06\xA0V[\x90V[\x90a\x06\xCE\x91Ta\x06\xABV[\x90V[a\x06\xDD`\x01_\x90a\x06\xC3V[\x90V[a\x06\xF4a\x06\xEFa\x06\xF9\x92a\x05,V[a\x04jV[a\x05,V[\x90V[a\x07\x05\x90a\x06\xE0V[\x90V[a\x07\x11\x90a\x06\xFCV[\x90V[a\x07\x1D\x90a\x07\x08V[\x90RV[\x91\x90a\x074\x90_` \x85\x01\x94\x01\x90a\x07\x14V[V[4a\x07fWa\x07F6`\x04a\x02\xFCV[a\x07ba\x07Qa\x06\xD1V[a\x07Ya\x01RV[\x91\x82\x91\x82a\x07!V[\x03\x90\xF3[a\x01XV[4a\x07\x99Wa\x07{6`\x04a\x02\xFCV[a\x07\x83a\x14\x0BV[a\x07\x8Ba\x01RV[\x80a\x07\x95\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[\x91``\x83\x83\x03\x12a\x07\xEBWa\x07\xB5\x82_\x85\x01a\x05WV[\x92a\x07\xC3\x83` \x83\x01a\x05WV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xE6Wa\x07\xE2\x92\x01a\x02\x1EV[\x90\x91V[a\x01`V[a\x01\\V[\x15\x15\x90V[a\x07\xFE\x90a\x07\xF0V[\x90RV[\x91\x90a\x08\x15\x90_` \x85\x01\x94\x01\x90a\x07\xF5V[V[4a\x08KWa\x08Ga\x086a\x08-6`\x04a\x07\x9EV[\x92\x91\x90\x91a\x14\xC7V[a\x08>a\x01RV[\x91\x82\x91\x82a\x08\x02V[\x03\x90\xF3[a\x01XV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x08\xA4Wa\x08\x846`\x04a\x02\xFCV[a\x08\xA0a\x08\x8Fa\x08PV[a\x08\x97a\x01RV[\x91\x82\x91\x82a\x04\xAEV[\x03\x90\xF3[a\x01XV[\x90\x91``\x82\x84\x03\x12a\x08\xDEWa\x08\xDBa\x08\xC4\x84_\x85\x01a\x02tV[\x93a\x08\xD2\x81` \x86\x01a\x02tV[\x93`@\x01a\x02tV[\x90V[a\x01\\V[4a\t\x14Wa\t\x10a\x08\xFFa\x08\xF96`\x04a\x08\xA9V[\x91a\x15\xD0V[a\t\x07a\x01RV[\x91\x82\x91\x82a\x04\xAEV[\x03\x90\xF3[a\x01XV[a\t\"\x90a\x057V[\x90RV[\x91\x90a\t9\x90_` \x85\x01\x94\x01\x90a\t\x19V[V[4a\tkWa\tK6`\x04a\x02\xFCV[a\tga\tVa\x16vV[a\t^a\x01RV[\x91\x82\x91\x82a\t&V[\x03\x90\xF3[a\x01XV[\x90V[_\x1B\x90V[a\t\x8Ca\t\x87a\t\x91\x92a\tpV[a\tsV[a\x03\x0BV[\x90V[a\t\xBD\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\txV[\x90V[a\t\xC8a\t\x94V[\x90V[4a\t\xFBWa\t\xDB6`\x04a\x02\xFCV[a\t\xF7a\t\xE6a\t\xC0V[a\t\xEEa\x01RV[\x91\x82\x91\x82a\x03\x1BV[\x03\x90\xF3[a\x01XV[\x90` \x82\x82\x03\x12a\n\x19Wa\n\x16\x91_\x01a\x05WV[\x90V[a\x01\\V[4a\nLWa\n6a\n16`\x04a\n\0V[a\x176V[a\n>a\x01RV[\x80a\nH\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[4a\n\x7FWa\nia\nd6`\x04a\n\0V[a\x17\xADV[a\nqa\x01RV[\x80a\n{\x81a\x01\xE5V[\x03\x90\xF3[a\x01XV[_\x80\xFD[P\x90V[\x90V[a\n\xA3a\n\x9Ea\n\xA8\x92a\n\x8CV[a\x04jV[a\x02]V[\x90V[`\x01a\n\xB7\x91\x01a\x02]V[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\x0B\x1CW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0B\x17W` \x01\x91`\x01\x82\x026\x03\x83\x13a\x0B\x12WV[a\n\xD6V[a\n\xD2V[a\n\xCEV[\x90\x82\x10\x15a\x0B<W` a\x0B8\x92\x02\x81\x01\x90a\n\xDAV[\x90\x91V[a\n\xBAV[\x90a\x0BM\x82\x82\x90a\n\x88V[\x91a\x0BW_a\n\x8FV[[\x80a\x0Bka\x0Be\x86a\x02]V[\x91a\x02]V[\x10\x15a\x0B\xC2Wa\x0B\x99\x90a\x0B\x8F32\x90a\x0B\x87\x86\x88\x86\x91a\x0B!V[\x92\x90\x91a\x14\xC7V[a\x0B\x9EW[a\n\xABV[a\x0BXV[a\x0B\xBD3a\x0B\xB7a\x0B\xB1\x86\x88\x86\x91a\x0B!V[\x90a\x18;V[\x90a\x1A\xC9V[a\x0B\x94V[PPPPV[\x91\x90a\x0B\xE5a\x0B\xDF32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\x0B\xF4Wa\x0B\xF2\x92a\x0C\xABV[V[a\x0B\xFCa\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0C\x13`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x0C \x90a\x06\xFCV[\x90V[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x0Cda\x0Cm` \x93a\x0Cr\x93a\x0C[\x81a\x0C#V[\x93\x84\x80\x93a\x0C'V[\x95\x86\x91\x01a\x0C0V[a\x0C;V[\x01\x90V[`@\x90a\x0C\xA2a\x0C\x97a\x0C\xA9\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x0CEV[\x96` \x83\x01\x90a\x04\xA1V[\x01\x90a\x04\xA1V[V[\x90a\x0C\xB7\x903\x92a\x18;V[\x91B\x92a\x0C\xF9a\x0C\xE7\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0C\x17V[\x94a\x0C\xF0a\x01RV[\x93\x84\x93\x84a\x0CvV[\x03\x90\xA2V[\x90a\r\t\x92\x91a\x0B\xC8V[V[_\x90V[_\x1C\x90V[\x90V[a\r#a\r(\x91a\r\x0FV[a\r\x14V[\x90V[a\r5\x90Ta\r\x17V[\x90V[a\r@a\r\x0BV[Pa\rS_a\rMa\x1CxV[\x01a\r+V[\x90V[\x91\x90a\rsa\rm32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\r\x82Wa\r\x80\x92a\x0E\x08V[V[a\r\x8Aa\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\r\xA1`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r\xCA\x81a\r\xC3\x81a\r\xCF\x95a\x0C'V[\x80\x95a\r\xA5V[a\x0C;V[\x01\x90V[a\r\xFFa\r\xF4`@\x93a\x0E\x06\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\r\xB0V[\x96` \x83\x01\x90a\x04\xA1V[\x01\x90a\x04\xA1V[V[\x90\x913\x91\x92\x90\x92a\x0EOBa\x0E=\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0C\x17V[\x95a\x0EFa\x01RV[\x94\x85\x94\x85a\r\xD3V[\x03\x90\xA2V[\x90a\x0E_\x92\x91a\rVV[V[\x90a\x0E}a\x0Ew32\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\x0E\x8CWa\x0E\x8A\x91a\x0FlV[V[a\x0E\x94a\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x0E\xAB`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x0E\xD1\x90a\x0C;V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x0E\xEBW`@RV[a\x0E\xB3V[\x90a\x0F\x03a\x0E\xFCa\x01RV[\x92\x83a\x0E\xC7V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0F#Wa\x0F\x1F` \x91a\x0C;V[\x01\x90V[a\x0E\xB3V[\x90\x92\x91\x92a\x0F=a\x0F8\x82a\x0F\x05V[a\x0E\xF0V[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x0FYWa\x0FW\x92a\r\xA5V[V[a\x0E\xAFV[a\x0Fi\x916\x91a\x0F(V[\x90V[a\x0Fza\x0F\x80\x923\x92a\x0F^V[\x90a\x1A\xC9V[V[\x90a\x0F\x8C\x91a\x0EaV[V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\xABa\x0F\xB0\x91a\r\x0FV[a\x0F\x92V[\x90V[a\x0F\xBD\x90Ta\x0F\x9FV[\x90V[a\x0F\xC8a\x0F\x8EV[Pa\x0F\xDC`\x01a\x0F\xD6a\x1CxV[\x01a\x0F\xB3V[\x90V[\x90a\x0F\xFBa\x0F\xF532\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xC7V[\x15a\x07\xF0V[a\x10\nWa\x10\x08\x91a\x10-V[V[a\x10\x12a\x01RV[ca\xAE\xC6I`\xE1\x1B\x81R\x80a\x10)`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x10;a\x10A\x923\x92a\x18;V[\x90a\x1A\xC9V[V[\x90a\x10M\x91a\x0F\xDFV[V[\x90a\x10a\x91a\x10\\a\x1C\x9CV[a\x11hV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x10{a\x10\x80\x91a\x10cV[a\x10iV[\x90V[a\x10\x8D\x90Ta\x10oV[\x90V[a\x10\xA4a\x10\x9Fa\x10\xA9\x92a\n\x8CV[a\x04jV[a\x05,V[\x90V[a\x10\xB5\x90a\x10\x90V[\x90V[`\xA0\x1B\x90V[\x90a\x10\xCD`\xFF`\xA0\x1B\x91a\x10\xB8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x10\xE0\x90a\x07\xF0V[\x90V[\x90V[\x90a\x10\xFBa\x10\xF6a\x11\x02\x92a\x10\xD7V[a\x10\xE3V[\x82Ta\x10\xBEV[\x90UV[a\x11\x0F\x90a\x06\xE0V[\x90V[a\x11\x1B\x90a\x11\x06V[\x90V[\x90a\x11/`\x01\x80`\xA0\x1B\x03\x91a\tsV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x11B\x90a\x11\x06V[\x90V[\x90V[\x90a\x11]a\x11Xa\x11d\x92a\x119V[a\x11EV[\x82Ta\x11\x1EV[\x90UV[a\x11r`\x01a\x10\x83V[a\x11\xE1W\x81a\x11\x91a\x11\x8Ba\x11\x86_a\x10\xACV[a\x057V[\x91a\x057V[\x14a\x11\xBEWa\x11\xB7a\x11\xB0a\x11\xBC\x93a\x11\xAB`\x01\x80a\x10\xE6V[a\x11\x12V[`\x01a\x11HV[a\x17\xADV[V[a\x11\xC6a\x01RV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x11\xDD`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x11\xE9a\x01RV[b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x11\xFF`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[\x90a\x12\r\x91a\x10OV[V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x12v`2`@\x92a\x12\x13V[a\x12\x7F\x81a\x12\x1CV[\x01\x90V[a\x12\x98\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x12iV[\x90V[\x15a\x12\xA2WV[a\x12\xAAa\x01RV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xC0`\x04\x82\x01a\x12\x83V[\x03\x90\xFD[\x91\x90\x81\x10\x15a\x12\xD4W` \x02\x01\x90V[a\n\xBAV[5a\x12\xE3\x81a\x02`V[\x90V[\x90\x92a\x12\xF3\x82\x85\x90a\n\x88V[\x93a\x13\x1A\x85a\x13\x14a\x13\x0Ea\x13\t\x88\x87\x90a\x12\x0FV[a\x02]V[\x91a\x02]V[\x14a\x12\x9BV[a\x13#_a\n\x8FV[[\x80a\x137a\x131\x88a\x02]V[\x91a\x02]V[\x10\x15a\x13\xDEWa\x13e\x90a\x13[32\x90a\x13S\x88\x87\x86\x91a\x0B!V[\x92\x90\x91a\x14\xC7V[a\x13jW[a\n\xABV[a\x13$V[3a\x13\x80a\x13z\x87\x86\x85\x91a\x0B!V[\x90a\x18;V[\x90a\x13\x95a\x13\x90\x89\x88\x86\x91a\x12\xC4V[a\x12\xD9V[B\x92a\x13\xD6a\x13\xC4\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0C\x17V[\x94a\x13\xCDa\x01RV[\x93\x84\x93\x84a\x0CvV[\x03\x90\xA2a\x13`V[PPPPPPV[a\x13\xEEa\x1C\x9CV[a\x13\xF6a\x13\xF8V[V[a\x14\ta\x14\x04_a\x10\xACV[a\x1D\x14V[V[a\x14\x13a\x13\xE6V[V[_\x90V[a\x14%a\x14*\x91a\r\x0FV[a\x06\xA0V[\x90V[a\x147\x90Ta\x14\x19V[\x90V[`\xE0\x1B\x90V[a\x14I\x81a\x07\xF0V[\x03a\x14PWV[_\x80\xFD[\x90PQ\x90a\x14a\x82a\x14@V[V[\x90` \x82\x82\x03\x12a\x14|Wa\x14y\x91_\x01a\x14TV[\x90V[a\x01\\V[a\x14\xA7a\x14\xB4\x95\x93\x94\x92\x94a\x14\x9D``\x84\x01\x96_\x85\x01\x90a\t\x19V[` \x83\x01\x90a\t\x19V[`@\x81\x85\x03\x91\x01Ra\r\xB0V[\x90V[a\x14\xBFa\x01RV[=_\x82>=\x90\xFD[\x92a\x15\n` \x93\x94a\x14\xD7a\x14\x15V[Pa\x15\x15a\x14\xEDa\x14\xE8`\x01a\x14-V[a\x07\x08V[\x93cz9y\xDC\x92\x95\x97a\x14\xFEa\x01RV[\x98\x89\x97\x88\x96\x87\x96a\x14:V[\x86R`\x04\x86\x01a\x14\x81V[\x03\x91Z\xFA\x90\x81\x15a\x15YW_\x91a\x15+W[P\x90V[a\x15L\x91P` =\x81\x11a\x15RW[a\x15D\x81\x83a\x0E\xC7V[\x81\x01\x90a\x14cV[_a\x15'V[P=a\x15:V[a\x14\xB7V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\x85a\x15\x8B\x91\x93\x92\x93a\x02]V[\x92a\x02]V[\x82\x03\x91\x82\x11a\x15\x96WV[a\x15bV[a\x15\xAAa\x15\xB0\x91\x93\x92\x93a\x02]V[\x92a\x02]V[\x91a\x15\xBC\x83\x82\x02a\x02]V[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x15\xCBWV[a\x15bV[\x91a\x15\xD9a\x15^V[P\x80a\x15\xEDa\x15\xE7\x84a\x02]V[\x91a\x02]V[\x11\x15a\x16AWa\x16\x0E\x91a\x16\0\x91a\x15vV[a\x16\x08a\x04\x89V[\x90a\x15\x9BV[\x80a\x16!a\x16\x1B\x84a\x02]V[\x91a\x02]V[\x10\x15a\x163Wa\x160\x91a\x15vV[\x90V[PPa\x16>_a\n\x8FV[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16aa\x16f\x91a\r\x0FV[a\x16JV[\x90V[a\x16s\x90Ta\x16UV[\x90V[a\x16~a\x16FV[Pa\x16\x88_a\x16iV[\x90V[a\x16\x9C\x90a\x16\x97a\x1C\x9CV[a\x16\x9EV[V[\x80a\x16\xB9a\x16\xB3a\x16\xAE_a\x10\xACV[a\x057V[\x91a\x057V[\x14a\x17\x13Wa\x16\xD1a\x16\xCA\x82a\x11\x12V[`\x01a\x11HV[a\x16\xFB\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0C\x17V[\x90a\x17\x04a\x01RV[\x80a\x17\x0E\x81a\x01\xE5V[\x03\x90\xA2V[a\x17\x1Ba\x01RV[c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x172`\x04\x82\x01a\x01\xE5V[\x03\x90\xFD[a\x17?\x90a\x16\x8BV[V[a\x17R\x90a\x17Ma\x1C\x9CV[a\x17TV[V[\x80a\x17oa\x17ia\x17d_a\x10\xACV[a\x057V[\x91a\x057V[\x14a\x17\x7FWa\x17}\x90a\x1D\x14V[V[a\x17\xA9a\x17\x8B_a\x10\xACV[a\x17\x93a\x01RV[\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t&V[\x03\x90\xFD[a\x17\xB6\x90a\x17AV[V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x17\xE0a\x17\xDBa\x17\xE5\x92a\n\x8CV[a\x17\xC6V[a\x17\xBDV[\x90V[\x90V[a\x17\xF7a\x17\xFC\x91a\x17\xBDV[a\x17\xE8V[\x90RV[\x90P\x90V[\x90\x91\x82a\x18\x15\x81a\x18\x1C\x93a\x18\0V[\x80\x93a\r\xA5V[\x01\x90V[\x80a\x181`\x01\x92a\x188\x96\x94a\x17\xEBV[\x01\x91a\x18\x05V[\x90V[a\x18y\x90a\x18Ga\x17\xB8V[Pa\x18ja\x18T_a\x17\xCCV[\x91\x93a\x18^a\x01RV[\x94\x85\x93` \x85\x01a\x18 V[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\xC7V[\x90V[a\x18\x85\x90a\x06\xE0V[\x90V[a\x18\x91\x90a\x18|V[\x90V[a\x18\x9E`da\x18\x88V[\x90V[a\x18\xAA\x90a\x06\xFCV[\x90V[\x90PQ\x90a\x18\xBA\x82a\x02`V[V[\x90` \x82\x82\x03\x12a\x18\xD5Wa\x18\xD2\x91_\x01a\x18\xADV[\x90V[a\x01\\V[` \x01\x90V[\x90V[a\x18\xEFa\x18\xF4\x91a\x03\x0BV[a\x18\xE0V[\x90RV[``\x1B\x90V[a\x19\x07\x90a\x18\xF8V[\x90V[a\x19\x13\x90a\x18\xFEV[\x90V[a\x19\"a\x19'\x91a\x057V[a\x19\nV[\x90RV[\x90V[a\x19:a\x19?\x91a\x02]V[a\x19+V[\x90RV[`\xC0\x1B\x90V[a\x19R\x90a\x19CV[\x90V[a\x19aa\x19f\x91a\x04\x03V[a\x19IV[\x90RV[a\x19\xBA\x94a\x19\xAA` `\x08\x96a\x19\xA2`\x14\x83\x9C\x9B\x98a\x19\x9A\x85\x89a\x19\x92\x82\x9Ba\x19\xB2\x9Da\x18\xE3V[\x01\x80\x92a\x19\x16V[\x01\x80\x92a\x19.V[\x01\x80\x92a\x19.V[\x01\x80\x92a\x19UV[\x01\x80\x92a\x18\xE3V[\x01\x90V[\x90a\x19\xCA_\x19\x91a\tsV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xDD\x90a\x03\x0BV[\x90V[a\x19\xE9\x90a\r\x0FV[\x90V[\x90a\x1A\x01a\x19\xFCa\x1A\x08\x92a\x19\xD4V[a\x19\xE0V[\x82Ta\x19\xBEV[\x90UV[\x90V[a\x1A#a\x1A\x1Ea\x1A(\x92a\x1A\x0CV[a\x04jV[a\x04\x03V[\x90V[a\x1A7a\x1A=\x91a\x04\x03V[\x91a\x04\x03V[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1APWV[a\x15bV[\x90a\x1Ahg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\tsV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\x86a\x1A\x81a\x1A\x8B\x92a\x04\x03V[a\x04jV[a\x04\x03V[\x90V[\x90V[\x90a\x1A\xA6a\x1A\xA1a\x1A\xAD\x92a\x1ArV[a\x1A\x8EV[\x82Ta\x1AUV[\x90UV[a\x1A\xC6\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0CEV[\x90V[a\x1B\x9Aa\x1A\xD4a\x1CxV[a\x1BuCa\x1A\xE8a\x1A\xE3a\x18\x94V[a\x18\xA1V[;a\x1A\xFBa\x1A\xF5_a\n\x8FV[\x91a\x02]V[\x11a\x1B\xDEW[a\x1BZa\x1B\x0F_\x85\x01a\r+V[a\x1BK\x87\x93Ba\x1B!`\x01\x89\x01a\x0F\xB3V[\x90\x8Ba\x1B5a\x1B/\x82a\x0C#V[\x91a\x18\xDAV[ \x92a\x1B?a\x01RV[\x97\x88\x96` \x88\x01a\x19jV[` \x82\x01\x81\x03\x82R\x03\x82a\x0E\xC7V[a\x1Bla\x1Bf\x82a\x0C#V[\x91a\x18\xDAV[ _\x83\x01a\x19\xECV[a\x1B\x94`\x01a\x1B\x83\x81a\x1A\x0FV[\x92\x01\x91a\x1B\x8F\x83a\x0F\xB3V[a\x1A+V[\x90a\x1A\x91V[a\x1B\xD9a\x1B\xC7\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0C\x17V[\x92a\x1B\xD0a\x01RV[\x91\x82\x91\x82a\x1A\xB1V[\x03\x90\xA2V[a\x1C\t` a\x1B\xF3a\x1B\xEEa\x18\x94V[a\x18\xA1V[c\xA3\xB1\xB3\x1D\x90a\x1C\x01a\x01RV[\x93\x84\x92a\x14:V[\x82R\x81\x80a\x1C\x19`\x04\x82\x01a\x01\xE5V[\x03\x91Z\xFA\x80\x91_\x92a\x1CHW[P\x15_\x14a\x1CAWP`\x01a\x1C<W[[a\x1B\x01V[a\x1C6V[\x90Pa\x1C7V[a\x1Cj\x91\x92P` =\x81\x11a\x1CqW[a\x1Cb\x81\x83a\x0E\xC7V[\x81\x01\x90a\x18\xBCV[\x90_a\x1C&V[P=a\x1CXV[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x1C\xA4a\x16vV[a\x1C\xBDa\x1C\xB7a\x1C\xB2a\x1DsV[a\x057V[\x91a\x057V[\x03a\x1C\xC4WV[a\x1C\xEDa\x1C\xCFa\x1DsV[a\x1C\xD7a\x01RV[\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t&V[\x03\x90\xFD[\x90V[\x90a\x1D\ta\x1D\x04a\x1D\x10\x92a\x0C\x17V[a\x1C\xF1V[\x82Ta\x11\x1EV[\x90UV[a\x1D\x1D_a\x16iV[a\x1D'\x82_a\x1C\xF4V[\x90a\x1D[a\x1DU\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0C\x17V[\x91a\x0C\x17V[\x91a\x1Dda\x01RV[\x80a\x1Dn\x81a\x01\xE5V[\x03\x90\xA3V[a\x1D{a\x16FV[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrProposerNotAllowed()` and selector `0xc35d8c92`.
```solidity
error TransactionOrProposerNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrProposerNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrProposerNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrProposerNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrProposerNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrProposerNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrProposerNotAllowed()";
            const SELECTOR: [u8; 4] = [195u8, 93u8, 140u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_0 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_0 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes,uint256,uint256)` and selector `0x4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2`.
```solidity
event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_1 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                    originalPriority: data.1,
                    timestamp: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appChainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appChainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appChainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appChainId),
                )
            }
        }
    };
    /**Function with signature `PRIORITY_DECAY_RATE()` and selector `0x3d44ae8b`.
```solidity
function PRIORITY_DECAY_RATE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATECall {}
    ///Container type for the return parameters of the [`PRIORITY_DECAY_RATE()`](PRIORITY_DECAY_RATECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRIORITY_DECAY_RATECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRIORITY_DECAY_RATEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRIORITY_DECAY_RATE()";
            const SELECTOR: [u8; 4] = [61u8, 68u8, 174u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TX_DATA_STORAGE_LOCATION()` and selector `0x9d91597b`.
```solidity
function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`TX_DATA_STORAGE_LOCATION()`](TX_DATA_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TX_DATA_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TX_DATA_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TX_DATA_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [157u8, 145u8, 89u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appChainId()` and selector `0x83470923`.
```solidity
function appChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdCall {}
    ///Container type for the return parameters of the [`appChainId()`](appChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appChainId()";
            const SELECTOR: [u8; 4] = [131u8, 71u8, 9u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEffectivePriority(uint256,uint256,uint256)` and selector `0x83d3c115`.
```solidity
function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityCall {
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEffectivePriority(uint256,uint256,uint256)`](calculateEffectivePriorityCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityCall) -> Self {
                    (
                        value.originalPriority,
                        value.submittedTimestamp,
                        value.currentTimestamp,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        originalPriority: tuple.0,
                        submittedTimestamp: tuple.1,
                        currentTimestamp: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEffectivePriorityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEffectivePriorityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEffectivePriority(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 193u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.submittedTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactions_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_0Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactions_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactions_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[],uint256[])` and selector `0x4fac3d44`.
```solidity
function processBulkTransactions(bytes[] memory data, uint256[] memory priorities) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub priorities: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[],uint256[])`](processBulkTransactions_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactions_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_1Call) -> Self {
                    (value.data, value.priorities)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priorities: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactions_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactions_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactions_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactions_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactions_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[],uint256[])";
            const SELECTOR: [u8; 4] = [79u8, 172u8, 61u8, 68u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.priorities),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes,uint256)` and selector `0x1c0b6367`.
```solidity
function processTransaction(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes,uint256)`](processTransaction_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 11u8, 99u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransaction_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes,uint256)` and selector `0x333d87fe`.
```solidity
function processTransactionRaw(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes,uint256)`](processTransactionRaw_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRaw_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRaw_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes,uint256)";
            const SELECTOR: [u8; 4] = [51u8, 61u8, 135u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRaw_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRaw_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRaw_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRaw_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRaw_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRaw_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRaw_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txAcc()` and selector `0x32704864`.
```solidity
function txAcc() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccCall {}
    ///Container type for the return parameters of the [`txAcc()`](txAccCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccCall> for UnderlyingRustTuple<'_> {
                fn from(value: txAccCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txAccReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txAccCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txAccReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txAcc()";
            const SELECTOR: [u8; 4] = [50u8, 112u8, 72u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txCount()` and selector `0x3c540687`.
```solidity
function txCount() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountCall {}
    ///Container type for the return parameters of the [`txCount()`](txCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: txCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txCount()";
            const SELECTOR: [u8; 4] = [60u8, 84u8, 6u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) function calls.
    pub enum SyndicateSequencingChainWithDecayingPriorityCalls {
        #[allow(missing_docs)]
        PRIORITY_DECAY_RATE(PRIORITY_DECAY_RATECall),
        #[allow(missing_docs)]
        TX_DATA_STORAGE_LOCATION(TX_DATA_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        appChainId(appChainIdCall),
        #[allow(missing_docs)]
        calculateEffectivePriority(calculateEffectivePriorityCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        processBulkTransactions_0(processBulkTransactions_0Call),
        #[allow(missing_docs)]
        processBulkTransactions_1(processBulkTransactions_1Call),
        #[allow(missing_docs)]
        processTransaction_0(processTransaction_0Call),
        #[allow(missing_docs)]
        processTransaction_1(processTransaction_1Call),
        #[allow(missing_docs)]
        processTransactionRaw_0(processTransactionRaw_0Call),
        #[allow(missing_docs)]
        processTransactionRaw_1(processTransactionRaw_1Call),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        txAcc(txAccCall),
        #[allow(missing_docs)]
        txCount(txCountCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [28u8, 11u8, 99u8, 103u8],
            [50u8, 112u8, 72u8, 100u8],
            [51u8, 61u8, 135u8, 254u8],
            [53u8, 20u8, 211u8, 123u8],
            [60u8, 84u8, 6u8, 135u8],
            [61u8, 68u8, 174u8, 139u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [79u8, 172u8, 61u8, 68u8],
            [91u8, 60u8, 214u8, 226u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [131u8, 71u8, 9u8, 35u8],
            [131u8, 211u8, 193u8, 21u8],
            [141u8, 165u8, 203u8, 91u8],
            [157u8, 145u8, 89u8, 123u8],
            [212u8, 240u8, 235u8, 77u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityCalls {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::PRIORITY_DECAY_RATE(_) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TX_DATA_STORAGE_LOCATION(_) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appChainId(_) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEffectivePriority(_) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions_0(_) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions_1(_) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_0(_) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_1(_) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw_0(_) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw_1(_) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::txAcc(_) => <txAccCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::txCount(_) => <txCountCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityCalls,
            >] = &[
                {
                    fn processBulkTransactions_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processBulkTransactions_0,
                            )
                    }
                    processBulkTransactions_0
                },
                {
                    fn processTransaction_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_0,
                            )
                    }
                    processTransaction_0
                },
                {
                    fn txAcc(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <txAccCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::txAcc,
                            )
                    }
                    txAcc
                },
                {
                    fn processTransactionRaw_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionRaw_0,
                            )
                    }
                    processTransactionRaw_0
                },
                {
                    fn processTransactionRaw_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionRaw_1,
                            )
                    }
                    processTransactionRaw_1
                },
                {
                    fn txCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <txCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::txCount,
                            )
                    }
                    txCount
                },
                {
                    fn PRIORITY_DECAY_RATE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::PRIORITY_DECAY_RATE,
                            )
                    }
                    PRIORITY_DECAY_RATE
                },
                {
                    fn processTransaction_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_1,
                            )
                    }
                    processTransaction_1
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::initialize,
                            )
                    }
                    initialize
                },
                {
                    fn processBulkTransactions_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processBulkTransactions_1,
                            )
                    }
                    processBulkTransactions_1
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::isAllowed,
                            )
                    }
                    isAllowed
                },
                {
                    fn appChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <appChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::appChainId,
                            )
                    }
                    appChainId
                },
                {
                    fn calculateEffectivePriority(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::calculateEffectivePriority,
                            )
                    }
                    calculateEffectivePriority
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::owner,
                            )
                    }
                    owner
                },
                {
                    fn TX_DATA_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::TX_DATA_STORAGE_LOCATION,
                            )
                    }
                    TX_DATA_STORAGE_LOCATION
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions_0(inner) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions_1(inner) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw_0(inner) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw_1(inner) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions_0(inner) => {
                    <processBulkTransactions_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions_1(inner) => {
                    <processBulkTransactions_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw_0(inner) => {
                    <processTransactionRaw_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw_1(inner) => {
                    <processTransactionRaw_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) custom errors.
    pub enum SyndicateSequencingChainWithDecayingPriorityErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrProposerNotAllowed(TransactionOrProposerNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [195u8, 93u8, 140u8, 146u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityErrors {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrProposerNotAllowed(_) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityErrors,
            >] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrProposerNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::TransactionOrProposerNotAllowed,
                            )
                    }
                    TransactionOrProposerNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrProposerNotAllowed(inner) => {
                    <TransactionOrProposerNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) events.
    pub enum SyndicateSequencingChainWithDecayingPriorityEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed_0(TransactionProcessed_0),
        #[allow(missing_docs)]
        TransactionProcessed_1(TransactionProcessed_1),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_0)
                }
                Some(
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_1)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        >,
    > {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy(provider, _appChainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appChainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appChainId)
    }
    /**A [`SyndicateSequencingChainWithDecayingPriority`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChainWithDecayingPriority`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainWithDecayingPriorityInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainWithDecayingPriorityInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _appChainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appChainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appChainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
            SyndicateSequencingChainWithDecayingPriorityInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`PRIORITY_DECAY_RATE`] function.
        pub fn PRIORITY_DECAY_RATE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRIORITY_DECAY_RATECall, N> {
            self.call_builder(&PRIORITY_DECAY_RATECall {})
        }
        ///Creates a new call builder for the [`TX_DATA_STORAGE_LOCATION`] function.
        pub fn TX_DATA_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TX_DATA_STORAGE_LOCATIONCall, N> {
            self.call_builder(&TX_DATA_STORAGE_LOCATIONCall {})
        }
        ///Creates a new call builder for the [`appChainId`] function.
        pub fn appChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appChainIdCall, N> {
            self.call_builder(&appChainIdCall {})
        }
        ///Creates a new call builder for the [`calculateEffectivePriority`] function.
        pub fn calculateEffectivePriority(
            &self,
            originalPriority: alloy::sol_types::private::primitives::aliases::U256,
            submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
            currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEffectivePriorityCall, N> {
            self.call_builder(
                &calculateEffectivePriorityCall {
                    originalPriority,
                    submittedTimestamp,
                    currentTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions_0`] function.
        pub fn processBulkTransactions_0(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactions_0Call, N> {
            self.call_builder(
                &processBulkTransactions_0Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processBulkTransactions_1`] function.
        pub fn processBulkTransactions_1(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            priorities: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactions_1Call, N> {
            self.call_builder(
                &processBulkTransactions_1Call {
                    data,
                    priorities,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_0`] function.
        pub fn processTransaction_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_0Call, N> {
            self.call_builder(
                &processTransaction_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_1`] function.
        pub fn processTransaction_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_1Call, N> {
            self.call_builder(&processTransaction_1Call { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw_0`] function.
        pub fn processTransactionRaw_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRaw_0Call, N> {
            self.call_builder(
                &processTransactionRaw_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionRaw_1`] function.
        pub fn processTransactionRaw_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRaw_1Call, N> {
            self.call_builder(
                &processTransactionRaw_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`txAcc`] function.
        pub fn txAcc(&self) -> alloy_contract::SolCallBuilder<T, &P, txAccCall, N> {
            self.call_builder(&txAccCall {})
        }
        ///Creates a new call builder for the [`txCount`] function.
        pub fn txCount(&self) -> alloy_contract::SolCallBuilder<T, &P, txCountCall, N> {
            self.call_builder(&txCountCall {})
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_0`] event.
        pub fn TransactionProcessed_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_0, N> {
            self.event_filter::<TransactionProcessed_0>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_1`] event.
        pub fn TransactionProcessed_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_1, N> {
            self.event_filter::<TransactionProcessed_1>()
        }
    }
}
