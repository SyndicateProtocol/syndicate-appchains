/**

Generated by the following Solidity interface...
```solidity
interface SyndicateSequencingChainWithDecayingPriority {
    error AlreadyInitialized();
    error InvalidModuleAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error TransactionOrSenderNotAllowed();

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event RequirementModuleUpdated(address indexed newModule);
    event TransactionProcessed(address indexed sender, bytes data);
    event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);

    constructor(uint256 _appchainId);

    function PRIORITY_DECAY_RATE() external view returns (uint256);
    function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
    function appchainId() external view returns (uint256);
    function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
    function initialize(address admin, address _permissionRequirementModule) external;
    function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function permissionRequirementModule() external view returns (address);
    function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
    function processTransaction(bytes memory data, uint256 priority) external;
    function processTransaction(bytes memory data) external;
    function processTransactionUncompressed(bytes memory data, uint256 priority) external;
    function processTransactionUncompressed(bytes memory data) external;
    function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
    function processTransactionsBulk(bytes[] memory data) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function txAcc() external view returns (bytes32);
    function txCount() external view returns (uint64);
    function updateRequirementModule(address _newModule) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_appchainId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "PRIORITY_DECAY_RATE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TX_DATA_STORAGE_LOCATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appchainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "calculateEffectivePriority",
    "inputs": [
      {
        "name": "originalPriority",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "submittedTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "currentTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_permissionRequirementModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "originator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permissionRequirementModule",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IPermissionModule"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prependZeroByte",
    "inputs": [
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "priority",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionUncompressed",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      },
      {
        "name": "priorities",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionsBulk",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "txAcc",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "txCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "updateRequirementModule",
    "inputs": [
      {
        "name": "_newModule",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequirementModuleUpdated",
    "inputs": [
      {
        "name": "newModule",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransactionProcessed",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      },
      {
        "name": "originalPriority",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "timestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AlreadyInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidModuleAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransactionOrSenderNotAllowed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateSequencingChainWithDecayingPriority {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a060405234610038576100196100146100e9565b61010a565b61002161003d565b611d816104d8823960805181610aab0152611d8190f35b610043565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061006f90610047565b810190811060018060401b0382111761008757604052565b610051565b9061009f61009861003d565b9283610065565b565b5f80fd5b90565b6100b1816100a5565b036100b857565b5f80fd5b905051906100c9826100a8565b565b906020828203126100e4576100e1915f016100bc565b90565b6100a1565b610107612418803803806100fc8161008c565b9283398101906100cb565b90565b610113906101c2565b565b90565b90565b61012f61012a61013492610115565b610118565b6100a5565b90565b60209181520190565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b6101746018602092610137565b61017d81610140565b0190565b6101969060208101905f818303910152610167565b90565b156101a057565b6101a861003d565b62461bcd60e51b8152806101be60048201610181565b0390fd5b6101ca6101ec565b6101e7816101e06101da5f61011b565b916100a5565b1415610199565b608052565b6101f46102ec565b565b60a01b90565b9061020b60ff60a01b916101f6565b9181191691161790565b151590565b61022390610215565b90565b90565b9061023e6102396102459261021a565b610226565b82546101fc565b9055565b5f0190565b61025661003d565b3d5f823e3d90fd5b60018060a01b031690565b61027d6102786102829261025e565b610118565b61025e565b90565b61028e90610269565b90565b61029a90610285565b90565b5f1b90565b906102b360018060a01b039161029d565b9181191691161790565b6102c690610285565b90565b90565b906102e16102dc6102e8926102bd565b6102c9565b82546102a2565b9055565b6102f533610359565b6103005f6001610229565b61030861003d565b6101bf810181811060018060401b038211176103545761033082916101bf6122598439610249565b03905ff0801561034f5761034661034d91610291565b60016102cc565b565b61024e565b610051565b610362906103ba565b565b61037861037361037d92610115565b610118565b61025e565b90565b61038990610364565b90565b6103959061025e565b90565b6103a19061038c565b9052565b91906103b8905f60208501940190610398565b565b806103d56103cf6103ca5f610380565b61038c565b9161038c565b146103e5576103e390610478565b565b6104086103f15f610380565b5f918291631e4fbdf760e01b8352600483016103a5565b0390fd5b5f1c90565b60018060a01b031690565b61042861042d9161040c565b610411565b90565b61043a905461041c565b90565b61044690610269565b90565b6104529061043d565b90565b90565b9061046d61046861047492610449565b610455565b82546102a2565b9055565b6104815f610430565b61048b825f610458565b906104bf6104b97f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610449565b91610449565b916104c861003d565b806104d281610249565b0390a356fe60806040526004361015610013575b610b35565b61001d5f3561015c565b8063050ec1381461015757806311992f8c146101525780631c0b63671461014d5780633270486414610148578063366cbab7146101435780633c5406871461013e5780633d44ae8b1461013957806346e2cc0914610134578063485cc9551461012f5780635b3cd6e21461012a578063715018a6146101255780637a3979dc14610120578063804e51231461011b57806383d3c115146101165780638da5cb5b146101115780639d91597b1461010c578063cdafb97814610107578063d4f0eb4d14610102578063d8781342146100fd5763f2fde38b0361000e57610b02565b610acd565b610a76565b610a24565b6109b9565b610929565b6108d1565b610863565b61082a565b61077e565b610749565b61067b565b6105e0565b6105ab565b61051a565b6104b5565b6103df565b610377565b610340565b61022f565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101ba5781359167ffffffffffffffff83116101b55760200192600183028401116101b057565b61017c565b610178565b610174565b90565b6101cb816101bf565b036101d257565b5f80fd5b905035906101e3826101c2565b565b91604083830312610225575f83013567ffffffffffffffff8111610220576102128361021d928601610180565b9390946020016101d6565b90565b610170565b61016c565b5f0190565b3461025e576102486102423660046101e5565b91610c15565b610250610162565b8061025a8161022a565b0390f35b610168565b909182601f8301121561029d5781359167ffffffffffffffff831161029857602001926020830284011161029357565b61017c565b610178565b610174565b909182601f830112156102dc5781359167ffffffffffffffff83116102d75760200192602083028401116102d257565b61017c565b610178565b610174565b909160408284031261033b575f82013567ffffffffffffffff8111610336578361030c918401610263565b929093602082013567ffffffffffffffff81116103315761032d92016102a2565b9091565b610170565b610170565b61016c565b346103725761035c6103533660046102e1565b92919091610db2565b610364610162565b8061036e8161022a565b0390f35b610168565b346103a65761039061038a3660046101e5565b91610fa9565b610398610162565b806103a28161022a565b0390f35b610168565b5f9103126103b557565b61016c565b90565b6103c6906103ba565b9052565b91906103dd905f602085019401906103bd565b565b3461040f576103ef3660046103ab565b61040b6103fa610fe3565b610402610162565b918291826103ca565b0390f35b610168565b90602082820312610445575f82013567ffffffffffffffff81116104405761043c9201610180565b9091565b610170565b61016c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61048b610494602093610499936104828161044a565b9384809361044e565b95869101610457565b610462565b0190565b6104b29160208201915f81840391015261046c565b90565b346104e6576104e26104d16104cb366004610414565b906110c1565b6104d9610162565b9182918261049d565b0390f35b610168565b67ffffffffffffffff1690565b610501906104eb565b9052565b9190610518905f602085019401906104f8565b565b3461054a5761052a3660046103ab565b610546610535611134565b61053d610162565b91829182610505565b0390f35b610168565b90565b90565b61056961056461056e9261054f565b610552565b6101bf565b90565b61057b600a610555565b90565b610586610571565b90565b610592906101bf565b9052565b91906105a9905f60208501940190610589565b565b346105db576105bb3660046103ab565b6105d76105c661057e565b6105ce610162565b91829182610596565b0390f35b610168565b3461060f576105f96105f3366004610414565b9061122e565b610601610162565b8061060b8161022a565b0390f35b610168565b60018060a01b031690565b61062890610614565b90565b6106348161061f565b0361063b57565b5f80fd5b9050359061064c8261062b565b565b9190604083820312610676578061066a610673925f860161063f565b9360200161063f565b90565b61016c565b346106aa5761069461068e36600461064e565b906113e0565b61069c610162565b806106a68161022a565b0390f35b610168565b1c90565b60018060a01b031690565b6106ce9060086106d393026106af565b6106b3565b90565b906106e191546106be565b90565b6106f060015f906106d6565b90565b61070761070261070c92610614565b610552565b610614565b90565b610718906106f3565b90565b6107249061070f565b90565b6107309061071b565b9052565b9190610747905f60208501940190610727565b565b34610779576107593660046103ab565b6107756107646106e4565b61076c610162565b91829182610734565b0390f35b610168565b346107ac5761078e3660046103ab565b610796611411565b61079e610162565b806107a88161022a565b0390f35b610168565b916060838303126107fe576107c8825f850161063f565b926107d6836020830161063f565b92604082013567ffffffffffffffff81116107f9576107f59201610180565b9091565b610170565b61016c565b151590565b61081190610803565b9052565b9190610828905f60208501940190610808565b565b3461085e5761085a6108496108403660046107b1565b929190916114cd565b610851610162565b91829182610815565b0390f35b610168565b346108925761087c610876366004610414565b906115bf565b610884610162565b8061088e8161022a565b0390f35b610168565b90916060828403126108cc576108c96108b2845f85016101d6565b936108c081602086016101d6565b936040016101d6565b90565b61016c565b34610902576108fe6108ed6108e7366004610897565b9161163d565b6108f5610162565b91829182610596565b0390f35b610168565b6109109061061f565b9052565b9190610927905f60208501940190610907565b565b34610959576109393660046103ab565b6109556109446116e3565b61094c610162565b91829182610914565b0390f35b610168565b90565b5f1b90565b61097a61097561097f9261095e565b610961565b6103ba565b90565b6109ab7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a969610966565b90565b6109b6610982565b90565b346109e9576109c93660046103ab565b6109e56109d46109ae565b6109dc610162565b918291826103ca565b0390f35b610168565b90602082820312610a1f575f82013567ffffffffffffffff8111610a1a57610a169201610263565b9091565b610170565b61016c565b34610a5357610a3d610a373660046109ee565b906116f8565b610a45610162565b80610a4f8161022a565b0390f35b610168565b90602082820312610a7157610a6e915f0161063f565b90565b61016c565b34610aa457610a8e610a89366004610a58565b611820565b610a96610162565b80610aa08161022a565b0390f35b610168565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610afd57610add3660046103ab565b610af9610ae8610aa9565b610af0610162565b91829182610596565b0390f35b610168565b34610b3057610b1a610b15366004610a58565b611890565b610b22610162565b80610b2c8161022a565b0390f35b610168565b5f80fd5b9190610b56610b50333290868591929091926114cd565b15610803565b610b6557610b6392610bc2565b565b5f631b8e828b60e31b815280610b7d6004820161022a565b0390fd5b610b8a9061070f565b90565b604090610bb9610bae610bc09597969460608401908482035f86015261046c565b966020830190610589565b0190610589565b565b90610bce9033926110c1565b914292610c10610bfe7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b81565b94610c07610162565b93849384610b8d565b0390a2565b90610c209291610b39565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610c8d6032604092610c2a565b610c9681610c33565b0190565b610caf9060208101905f818303910152610c80565b90565b15610cb957565b610cc1610162565b62461bcd60e51b815280610cd760048201610c9a565b0390fd5b90565b610cf2610ced610cf792610cdb565b610552565b6101bf565b90565b6001610d0691016101bf565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610d6b570180359067ffffffffffffffff8211610d6657602001916001820236038313610d6157565b610d25565b610d21565b610d1d565b90821015610d8b576020610d879202810190610d29565b9091565b610d09565b9190811015610da0576020020190565b610d09565b35610daf816101c2565b90565b9092610dbf828590610c22565b93610de685610de0610dda610dd5888790610c26565b6101bf565b916101bf565b14610cb2565b610def5f610cde565b5b80610e03610dfd886101bf565b916101bf565b1015610eaa57610e3190610e27333290610e1f88878691610d70565b9290916114cd565b610e36575b610cfa565b610df0565b33610e4c610e4687868591610d70565b906110c1565b90610e61610e5c89888691610d90565b610da5565b4292610ea2610e907f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b81565b94610e99610162565b93849384610b8d565b0390a2610e2c565b505050505050565b9190610ecf610ec9333290868591929091926114cd565b15610803565b610ede57610edc92610f5d565b565b5f631b8e828b60e31b815280610ef66004820161022a565b0390fd5b90825f939282370152565b9190610f1f81610f1881610f249561044e565b8095610efa565b610462565b0190565b610f54610f49604093610f5b9698979560608501918583035f870152610f05565b966020830190610589565b0190610589565b565b90913391929092610fa442610f927f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610b81565b95610f9b610162565b94859485610f28565b0390a2565b90610fb49291610eb2565b565b5f90565b5f1c90565b90565b610fce610fd391610fba565b610fbf565b90565b610fe09054610fc2565b90565b610feb610fb6565b50610ffe5f610ff861189b565b01610fd6565b90565b606090565b60ff60f81b1690565b60f81b90565b61102961102461102e92610cdb565b61100f565b611006565b90565b90565b61104061104591611006565b611031565b9052565b905090565b90918261105e8161106593611049565b8093610efa565b0190565b8061107a6001926110819694611034565b019161104e565b90565b634e487b7160e01b5f52604160045260245ffd5b906110a290610462565b810190811067ffffffffffffffff8211176110bc57604052565b611084565b6110ff906110cd611001565b506110f06110da5f611015565b91936110e4610162565b94859360208501611069565b60208201810382520382611098565b90565b5f90565b67ffffffffffffffff1690565b61111f61112491610fba565b611106565b90565b6111319054611113565b90565b61113c611102565b50611150600161114a61189b565b01611127565b90565b9061116f611169333290858591929091926114cd565b15610803565b61117e5761117c9161121a565b565b5f631b8e828b60e31b8152806111966004820161022a565b0390fd5b5f80fd5b906111b16111aa610162565b9283611098565b565b67ffffffffffffffff81116111d1576111cd602091610462565b0190565b611084565b909291926111eb6111e6826111b3565b61119e565b938185526020850190828401116112075761120592610efa565b565b61119a565b6112179136916111d6565b90565b61122c916112279161120c565b611af4565b565b9061123891611153565b565b9061124c91611247611ca4565b611353565b565b60a01c90565b60ff1690565b61126661126b9161124e565b611254565b90565b611278905461125a565b90565b61128f61128a61129492610cdb565b610552565b610614565b90565b6112a09061127b565b90565b60a01b90565b906112b860ff60a01b916112a3565b9181191691161790565b6112cb90610803565b90565b90565b906112e66112e16112ed926112c2565b6112ce565b82546112a9565b9055565b6112fa906106f3565b90565b611306906112f1565b90565b9061131a60018060a01b0391610961565b9181191691161790565b61132d906112f1565b90565b90565b9061134861134361134f92611324565b611330565b8254611309565b9055565b61135d600161126e565b6113c5578161137c6113766113715f611297565b61061f565b9161061f565b146113a9576113a261139b6113a7936113966001806112d1565b6112fd565b6001611333565b611890565b565b5f632e7f3c7f60e11b8152806113c16004820161022a565b0390fd5b5f62dc149f60e41b8152806113dc6004820161022a565b0390fd5b906113ea9161123a565b565b6113f4611ca4565b6113fc6113fe565b565b61140f61140a5f611297565b611d15565b565b6114196113ec565b565b5f90565b61142b61143091610fba565b6106b3565b90565b61143d905461141f565b90565b60e01b90565b61144f81610803565b0361145657565b5f80fd5b9050519061146782611446565b565b906020828203126114825761147f915f0161145a565b90565b61016c565b6114ad6114ba95939492946114a360608401965f850190610907565b6020830190610907565b6040818503910152610f05565b90565b6114c5610162565b3d5f823e3d90fd5b92611510602093946114dd61141b565b5061151b6114f36114ee6001611433565b61071b565b93637a3979dc929597611504610162565b98899788968796611440565b865260048601611487565b03915afa90811561155f575f91611531575b5090565b611552915060203d8111611558575b61154a8183611098565b810190611469565b5f61152d565b503d611540565b6114bd565b9061158061157a333290858591929091926114cd565b15610803565b61158f5761158d916115ab565b565b5f631b8e828b60e31b8152806115a76004820161022a565b0390fd5b6115bd916115b8916110c1565b611af4565b565b906115c991611564565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b6115f26115f8919392936101bf565b926101bf565b820391821161160357565b6115cf565b61161761161d919392936101bf565b926101bf565b916116298382026101bf565b92818404149015171561163857565b6115cf565b916116466115cb565b508061165a611654846101bf565b916101bf565b11156116ae5761167b9161166d916115e3565b611675610571565b90611608565b8061168e611688846101bf565b916101bf565b10156116a05761169d916115e3565b90565b50506116ab5f610cde565b90565b505090565b5f90565b60018060a01b031690565b6116ce6116d391610fba565b6116b7565b90565b6116e090546116c2565b90565b6116eb6116b3565b506116f55f6116d6565b90565b611703818390610c22565b9161170d5f610cde565b5b8061172161171b866101bf565b916101bf565b10156117765761174f9061174533329061173d87878691610d70565b9290916114cd565b611754575b610cfa565b61170e565b61177161176c61176686868591610d70565b906110c1565b611af4565b61174a565b50505050565b61178d90611788611ca4565b61178f565b565b806117aa6117a461179f5f611297565b61061f565b9161061f565b14611804576117c26117bb826112fd565b6001611333565b6117ec7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610b81565b906117f5610162565b806117ff8161022a565b0390a2565b5f632e7f3c7f60e11b81528061181c6004820161022a565b0390fd5b6118299061177c565b565b61183c90611837611ca4565b61183e565b565b8061185961185361184e5f611297565b61061f565b9161061f565b146118695761186790611d15565b565b61188c6118755f611297565b5f918291631e4fbdf760e01b835260048301610914565b0390fd5b6118999061182b565b565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b6118c8906106f3565b90565b6118d4906118bf565b90565b6118e160646118cb565b90565b6118ed9061070f565b90565b905051906118fd826101c2565b565b9060208282031261191857611915915f016118f0565b90565b61016c565b60200190565b90565b611932611937916103ba565b611923565b9052565b60601b90565b61194a9061193b565b90565b61195690611941565b90565b61196561196a9161061f565b61194d565b9052565b90565b61197d611982916101bf565b61196e565b9052565b60c01b90565b61199590611986565b90565b6119a46119a9916104eb565b61198c565b9052565b6119fd946119ed60206008966119e56014839c9b986119dd85896119d5829b6119f59d611926565b018092611959565b018092611971565b018092611971565b018092611998565b018092611926565b0190565b90611a0d5f1991610961565b9181191691161790565b611a20906103ba565b90565b611a2c90610fba565b90565b90611a44611a3f611a4b92611a17565b611a23565b8254611a01565b9055565b90565b611a66611a61611a6b92611a4f565b610552565b6104eb565b90565b611a7a611a80916104eb565b916104eb565b019067ffffffffffffffff8211611a9357565b6115cf565b90611aab67ffffffffffffffff91610961565b9181191691161790565b611ac9611ac4611ace926104eb565b610552565b6104eb565b90565b90565b90611ae9611ae4611af092611ab5565b611ad1565b8254611a98565b9055565b611bc5611aff61189b565b611ba043611b13611b0e6118d7565b6118e4565b3b611b26611b205f610cde565b916101bf565b11611c0a575b611b85611b3a5f8501610fd6565b611b76339342611b4c60018901611127565b908a611b60611b5a8261044a565b9161191d565b2092611b6a610162565b978896602088016119ad565b60208201810382520382611098565b611b97611b918261044a565b9161191d565b205f8301611a2f565b611bbf6001611bae81611a52565b920191611bba83611127565b611a6e565b90611ad4565b33611c05611bf37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610b81565b92611bfc610162565b9182918261049d565b0390a2565b611c356020611c1f611c1a6118d7565b6118e4565b63a3b1b31d90611c2d610162565b938492611440565b82528180611c456004820161022a565b03915afa80915f92611c74575b50155f14611c6d57506001611c68575b5b611b2c565b611c62565b9050611c63565b611c9691925060203d8111611c9d575b611c8e8183611098565b8101906118ff565b905f611c52565b503d611c84565b611cac6116e3565b611cc5611cbf611cba611d74565b61061f565b9161061f565b03611ccc57565b611cee611cd7611d74565b5f91829163118cdaa760e01b835260048301610914565b0390fd5b90565b90611d0a611d05611d1192610b81565b611cf2565b8254611309565b9055565b611d1e5f6116d6565b611d28825f611cf5565b90611d5c611d567f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610b81565b91610b81565b91611d65610162565b80611d6f8161022a565b0390a3565b611d7c6116b3565b50339056608060405234601c57600e6020565b61019461002b823961019490f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61017b565b61001d5f3561002c565b637a3979dc0361000e57610142565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b61005890610044565b90565b6100648161004f565b0361006b57565b5f80fd5b9050359061007c8261005b565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100c45781359167ffffffffffffffff83116100bf5760200192600183028401116100ba57565b610086565b610082565b61007e565b91606083830312610116576100e0825f850161006f565b926100ee836020830161006f565b92604082013567ffffffffffffffff81116101115761010d920161008a565b9091565b610040565b61003c565b151590565b6101299061011b565b9052565b9190610140905f60208501940190610120565b565b34610176576101726101616101583660046100c9565b92919091610183565b610169610032565b9182918261012d565b0390f35b610038565b5f80fd5b5f90565b5050505061018f61017f565b505f9056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\08Wa\0\x19a\0\x14a\0\xE9V[a\x01\nV[a\0!a\0=V[a\x1D\x81a\x04\xD8\x829`\x80Q\x81a\n\xAB\x01Ra\x1D\x81\x90\xF3[a\0CV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0o\x90a\0GV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x87W`@RV[a\0QV[\x90a\0\x9Fa\0\x98a\0=V[\x92\x83a\0eV[V[_\x80\xFD[\x90V[a\0\xB1\x81a\0\xA5V[\x03a\0\xB8WV[_\x80\xFD[\x90PQ\x90a\0\xC9\x82a\0\xA8V[V[\x90` \x82\x82\x03\x12a\0\xE4Wa\0\xE1\x91_\x01a\0\xBCV[\x90V[a\0\xA1V[a\x01\x07a$\x18\x808\x03\x80a\0\xFC\x81a\0\x8CV[\x92\x839\x81\x01\x90a\0\xCBV[\x90V[a\x01\x13\x90a\x01\xC2V[V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\xA5V[\x90V[` \x91\x81R\x01\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x01t`\x18` \x92a\x017V[a\x01}\x81a\x01@V[\x01\x90V[a\x01\x96\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01gV[\x90V[\x15a\x01\xA0WV[a\x01\xA8a\0=V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x01\xBE`\x04\x82\x01a\x01\x81V[\x03\x90\xFD[a\x01\xCAa\x01\xECV[a\x01\xE7\x81a\x01\xE0a\x01\xDA_a\x01\x1BV[\x91a\0\xA5V[\x14\x15a\x01\x99V[`\x80RV[a\x01\xF4a\x02\xECV[V[`\xA0\x1B\x90V[\x90a\x02\x0B`\xFF`\xA0\x1B\x91a\x01\xF6V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02#\x90a\x02\x15V[\x90V[\x90V[\x90a\x02>a\x029a\x02E\x92a\x02\x1AV[a\x02&V[\x82Ta\x01\xFCV[\x90UV[_\x01\x90V[a\x02Va\0=V[=_\x82>=\x90\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02}a\x02xa\x02\x82\x92a\x02^V[a\x01\x18V[a\x02^V[\x90V[a\x02\x8E\x90a\x02iV[\x90V[a\x02\x9A\x90a\x02\x85V[\x90V[_\x1B\x90V[\x90a\x02\xB3`\x01\x80`\xA0\x1B\x03\x91a\x02\x9DV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x02\xC6\x90a\x02\x85V[\x90V[\x90V[\x90a\x02\xE1a\x02\xDCa\x02\xE8\x92a\x02\xBDV[a\x02\xC9V[\x82Ta\x02\xA2V[\x90UV[a\x02\xF53a\x03YV[a\x03\0_`\x01a\x02)V[a\x03\x08a\0=V[a\x01\xBF\x81\x01\x81\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\x03TWa\x030\x82\x91a\x01\xBFa\"Y\x849a\x02IV[\x03\x90_\xF0\x80\x15a\x03OWa\x03Fa\x03M\x91a\x02\x91V[`\x01a\x02\xCCV[V[a\x02NV[a\0QV[a\x03b\x90a\x03\xBAV[V[a\x03xa\x03sa\x03}\x92a\x01\x15V[a\x01\x18V[a\x02^V[\x90V[a\x03\x89\x90a\x03dV[\x90V[a\x03\x95\x90a\x02^V[\x90V[a\x03\xA1\x90a\x03\x8CV[\x90RV[\x91\x90a\x03\xB8\x90_` \x85\x01\x94\x01\x90a\x03\x98V[V[\x80a\x03\xD5a\x03\xCFa\x03\xCA_a\x03\x80V[a\x03\x8CV[\x91a\x03\x8CV[\x14a\x03\xE5Wa\x03\xE3\x90a\x04xV[V[a\x04\x08a\x03\xF1_a\x03\x80V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xA5V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04(a\x04-\x91a\x04\x0CV[a\x04\x11V[\x90V[a\x04:\x90Ta\x04\x1CV[\x90V[a\x04F\x90a\x02iV[\x90V[a\x04R\x90a\x04=V[\x90V[\x90V[\x90a\x04ma\x04ha\x04t\x92a\x04IV[a\x04UV[\x82Ta\x02\xA2V[\x90UV[a\x04\x81_a\x040V[a\x04\x8B\x82_a\x04XV[\x90a\x04\xBFa\x04\xB9\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x04IV[\x91a\x04IV[\x91a\x04\xC8a\0=V[\x80a\x04\xD2\x81a\x02IV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B5V[a\0\x1D_5a\x01\\V[\x80c\x05\x0E\xC18\x14a\x01WW\x80c\x11\x99/\x8C\x14a\x01RW\x80c\x1C\x0Bcg\x14a\x01MW\x80c2pHd\x14a\x01HW\x80c6l\xBA\xB7\x14a\x01CW\x80c<T\x06\x87\x14a\x01>W\x80c=D\xAE\x8B\x14a\x019W\x80cF\xE2\xCC\t\x14a\x014W\x80cH\\\xC9U\x14a\x01/W\x80c[<\xD6\xE2\x14a\x01*W\x80cqP\x18\xA6\x14a\x01%W\x80cz9y\xDC\x14a\x01 W\x80c\x80NQ#\x14a\x01\x1BW\x80c\x83\xD3\xC1\x15\x14a\x01\x16W\x80c\x8D\xA5\xCB[\x14a\x01\x11W\x80c\x9D\x91Y{\x14a\x01\x0CW\x80c\xCD\xAF\xB9x\x14a\x01\x07W\x80c\xD4\xF0\xEBM\x14a\x01\x02W\x80c\xD8x\x13B\x14a\0\xFDWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x02V[a\n\xCDV[a\nvV[a\n$V[a\t\xB9V[a\t)V[a\x08\xD1V[a\x08cV[a\x08*V[a\x07~V[a\x07IV[a\x06{V[a\x05\xE0V[a\x05\xABV[a\x05\x1AV[a\x04\xB5V[a\x03\xDFV[a\x03wV[a\x03@V[a\x02/V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xBAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xB5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xB0WV[a\x01|V[a\x01xV[a\x01tV[\x90V[a\x01\xCB\x81a\x01\xBFV[\x03a\x01\xD2WV[_\x80\xFD[\x90P5\x90a\x01\xE3\x82a\x01\xC2V[V[\x91`@\x83\x83\x03\x12a\x02%W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02 Wa\x02\x12\x83a\x02\x1D\x92\x86\x01a\x01\x80V[\x93\x90\x94` \x01a\x01\xD6V[\x90V[a\x01pV[a\x01lV[_\x01\x90V[4a\x02^Wa\x02Ha\x02B6`\x04a\x01\xE5V[\x91a\x0C\x15V[a\x02Pa\x01bV[\x80a\x02Z\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x9DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x98W` \x01\x92` \x83\x02\x84\x01\x11a\x02\x93WV[a\x01|V[a\x01xV[a\x01tV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\xDCW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xD7W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xD2WV[a\x01|V[a\x01xV[a\x01tV[\x90\x91`@\x82\x84\x03\x12a\x03;W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x036W\x83a\x03\x0C\x91\x84\x01a\x02cV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x031Wa\x03-\x92\x01a\x02\xA2V[\x90\x91V[a\x01pV[a\x01pV[a\x01lV[4a\x03rWa\x03\\a\x03S6`\x04a\x02\xE1V[\x92\x91\x90\x91a\r\xB2V[a\x03da\x01bV[\x80a\x03n\x81a\x02*V[\x03\x90\xF3[a\x01hV[4a\x03\xA6Wa\x03\x90a\x03\x8A6`\x04a\x01\xE5V[\x91a\x0F\xA9V[a\x03\x98a\x01bV[\x80a\x03\xA2\x81a\x02*V[\x03\x90\xF3[a\x01hV[_\x91\x03\x12a\x03\xB5WV[a\x01lV[\x90V[a\x03\xC6\x90a\x03\xBAV[\x90RV[\x91\x90a\x03\xDD\x90_` \x85\x01\x94\x01\x90a\x03\xBDV[V[4a\x04\x0FWa\x03\xEF6`\x04a\x03\xABV[a\x04\x0Ba\x03\xFAa\x0F\xE3V[a\x04\x02a\x01bV[\x91\x82\x91\x82a\x03\xCAV[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\x04EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04@Wa\x04<\x92\x01a\x01\x80V[\x90\x91V[a\x01pV[a\x01lV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x04\x8Ba\x04\x94` \x93a\x04\x99\x93a\x04\x82\x81a\x04JV[\x93\x84\x80\x93a\x04NV[\x95\x86\x91\x01a\x04WV[a\x04bV[\x01\x90V[a\x04\xB2\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04lV[\x90V[4a\x04\xE6Wa\x04\xE2a\x04\xD1a\x04\xCB6`\x04a\x04\x14V[\x90a\x10\xC1V[a\x04\xD9a\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xF3[a\x01hV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x05\x01\x90a\x04\xEBV[\x90RV[\x91\x90a\x05\x18\x90_` \x85\x01\x94\x01\x90a\x04\xF8V[V[4a\x05JWa\x05*6`\x04a\x03\xABV[a\x05Fa\x055a\x114V[a\x05=a\x01bV[\x91\x82\x91\x82a\x05\x05V[\x03\x90\xF3[a\x01hV[\x90V[\x90V[a\x05ia\x05da\x05n\x92a\x05OV[a\x05RV[a\x01\xBFV[\x90V[a\x05{`\na\x05UV[\x90V[a\x05\x86a\x05qV[\x90V[a\x05\x92\x90a\x01\xBFV[\x90RV[\x91\x90a\x05\xA9\x90_` \x85\x01\x94\x01\x90a\x05\x89V[V[4a\x05\xDBWa\x05\xBB6`\x04a\x03\xABV[a\x05\xD7a\x05\xC6a\x05~V[a\x05\xCEa\x01bV[\x91\x82\x91\x82a\x05\x96V[\x03\x90\xF3[a\x01hV[4a\x06\x0FWa\x05\xF9a\x05\xF36`\x04a\x04\x14V[\x90a\x12.V[a\x06\x01a\x01bV[\x80a\x06\x0B\x81a\x02*V[\x03\x90\xF3[a\x01hV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06(\x90a\x06\x14V[\x90V[a\x064\x81a\x06\x1FV[\x03a\x06;WV[_\x80\xFD[\x90P5\x90a\x06L\x82a\x06+V[V[\x91\x90`@\x83\x82\x03\x12a\x06vW\x80a\x06ja\x06s\x92_\x86\x01a\x06?V[\x93` \x01a\x06?V[\x90V[a\x01lV[4a\x06\xAAWa\x06\x94a\x06\x8E6`\x04a\x06NV[\x90a\x13\xE0V[a\x06\x9Ca\x01bV[\x80a\x06\xA6\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\xCE\x90`\x08a\x06\xD3\x93\x02a\x06\xAFV[a\x06\xB3V[\x90V[\x90a\x06\xE1\x91Ta\x06\xBEV[\x90V[a\x06\xF0`\x01_\x90a\x06\xD6V[\x90V[a\x07\x07a\x07\x02a\x07\x0C\x92a\x06\x14V[a\x05RV[a\x06\x14V[\x90V[a\x07\x18\x90a\x06\xF3V[\x90V[a\x07$\x90a\x07\x0FV[\x90V[a\x070\x90a\x07\x1BV[\x90RV[\x91\x90a\x07G\x90_` \x85\x01\x94\x01\x90a\x07'V[V[4a\x07yWa\x07Y6`\x04a\x03\xABV[a\x07ua\x07da\x06\xE4V[a\x07la\x01bV[\x91\x82\x91\x82a\x074V[\x03\x90\xF3[a\x01hV[4a\x07\xACWa\x07\x8E6`\x04a\x03\xABV[a\x07\x96a\x14\x11V[a\x07\x9Ea\x01bV[\x80a\x07\xA8\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x91``\x83\x83\x03\x12a\x07\xFEWa\x07\xC8\x82_\x85\x01a\x06?V[\x92a\x07\xD6\x83` \x83\x01a\x06?V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xF9Wa\x07\xF5\x92\x01a\x01\x80V[\x90\x91V[a\x01pV[a\x01lV[\x15\x15\x90V[a\x08\x11\x90a\x08\x03V[\x90RV[\x91\x90a\x08(\x90_` \x85\x01\x94\x01\x90a\x08\x08V[V[4a\x08^Wa\x08Za\x08Ia\x08@6`\x04a\x07\xB1V[\x92\x91\x90\x91a\x14\xCDV[a\x08Qa\x01bV[\x91\x82\x91\x82a\x08\x15V[\x03\x90\xF3[a\x01hV[4a\x08\x92Wa\x08|a\x08v6`\x04a\x04\x14V[\x90a\x15\xBFV[a\x08\x84a\x01bV[\x80a\x08\x8E\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x90\x91``\x82\x84\x03\x12a\x08\xCCWa\x08\xC9a\x08\xB2\x84_\x85\x01a\x01\xD6V[\x93a\x08\xC0\x81` \x86\x01a\x01\xD6V[\x93`@\x01a\x01\xD6V[\x90V[a\x01lV[4a\t\x02Wa\x08\xFEa\x08\xEDa\x08\xE76`\x04a\x08\x97V[\x91a\x16=V[a\x08\xF5a\x01bV[\x91\x82\x91\x82a\x05\x96V[\x03\x90\xF3[a\x01hV[a\t\x10\x90a\x06\x1FV[\x90RV[\x91\x90a\t'\x90_` \x85\x01\x94\x01\x90a\t\x07V[V[4a\tYWa\t96`\x04a\x03\xABV[a\tUa\tDa\x16\xE3V[a\tLa\x01bV[\x91\x82\x91\x82a\t\x14V[\x03\x90\xF3[a\x01hV[\x90V[_\x1B\x90V[a\tza\tua\t\x7F\x92a\t^V[a\taV[a\x03\xBAV[\x90V[a\t\xAB\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\tfV[\x90V[a\t\xB6a\t\x82V[\x90V[4a\t\xE9Wa\t\xC96`\x04a\x03\xABV[a\t\xE5a\t\xD4a\t\xAEV[a\t\xDCa\x01bV[\x91\x82\x91\x82a\x03\xCAV[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\n\x1FW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x1AWa\n\x16\x92\x01a\x02cV[\x90\x91V[a\x01pV[a\x01lV[4a\nSWa\n=a\n76`\x04a\t\xEEV[\x90a\x16\xF8V[a\nEa\x01bV[\x80a\nO\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\nqWa\nn\x91_\x01a\x06?V[\x90V[a\x01lV[4a\n\xA4Wa\n\x8Ea\n\x896`\x04a\nXV[a\x18 V[a\n\x96a\x01bV[\x80a\n\xA0\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\xFDWa\n\xDD6`\x04a\x03\xABV[a\n\xF9a\n\xE8a\n\xA9V[a\n\xF0a\x01bV[\x91\x82\x91\x82a\x05\x96V[\x03\x90\xF3[a\x01hV[4a\x0B0Wa\x0B\x1Aa\x0B\x156`\x04a\nXV[a\x18\x90V[a\x0B\"a\x01bV[\x80a\x0B,\x81a\x02*V[\x03\x90\xF3[a\x01hV[_\x80\xFD[\x91\x90a\x0BVa\x0BP32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x0BeWa\x0Bc\x92a\x0B\xC2V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0B}`\x04\x82\x01a\x02*V[\x03\x90\xFD[a\x0B\x8A\x90a\x07\x0FV[\x90V[`@\x90a\x0B\xB9a\x0B\xAEa\x0B\xC0\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x04lV[\x96` \x83\x01\x90a\x05\x89V[\x01\x90a\x05\x89V[V[\x90a\x0B\xCE\x903\x92a\x10\xC1V[\x91B\x92a\x0C\x10a\x0B\xFE\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\x81V[\x94a\x0C\x07a\x01bV[\x93\x84\x93\x84a\x0B\x8DV[\x03\x90\xA2V[\x90a\x0C \x92\x91a\x0B9V[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0C\x8D`2`@\x92a\x0C*V[a\x0C\x96\x81a\x0C3V[\x01\x90V[a\x0C\xAF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\x80V[\x90V[\x15a\x0C\xB9WV[a\x0C\xC1a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\xD7`\x04\x82\x01a\x0C\x9AV[\x03\x90\xFD[\x90V[a\x0C\xF2a\x0C\xEDa\x0C\xF7\x92a\x0C\xDBV[a\x05RV[a\x01\xBFV[\x90V[`\x01a\r\x06\x91\x01a\x01\xBFV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\rkW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\rfW` \x01\x91`\x01\x82\x026\x03\x83\x13a\raWV[a\r%V[a\r!V[a\r\x1DV[\x90\x82\x10\x15a\r\x8BW` a\r\x87\x92\x02\x81\x01\x90a\r)V[\x90\x91V[a\r\tV[\x91\x90\x81\x10\x15a\r\xA0W` \x02\x01\x90V[a\r\tV[5a\r\xAF\x81a\x01\xC2V[\x90V[\x90\x92a\r\xBF\x82\x85\x90a\x0C\"V[\x93a\r\xE6\x85a\r\xE0a\r\xDAa\r\xD5\x88\x87\x90a\x0C&V[a\x01\xBFV[\x91a\x01\xBFV[\x14a\x0C\xB2V[a\r\xEF_a\x0C\xDEV[[\x80a\x0E\x03a\r\xFD\x88a\x01\xBFV[\x91a\x01\xBFV[\x10\x15a\x0E\xAAWa\x0E1\x90a\x0E'32\x90a\x0E\x1F\x88\x87\x86\x91a\rpV[\x92\x90\x91a\x14\xCDV[a\x0E6W[a\x0C\xFAV[a\r\xF0V[3a\x0ELa\x0EF\x87\x86\x85\x91a\rpV[\x90a\x10\xC1V[\x90a\x0Eaa\x0E\\\x89\x88\x86\x91a\r\x90V[a\r\xA5V[B\x92a\x0E\xA2a\x0E\x90\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\x81V[\x94a\x0E\x99a\x01bV[\x93\x84\x93\x84a\x0B\x8DV[\x03\x90\xA2a\x0E,V[PPPPPPV[\x91\x90a\x0E\xCFa\x0E\xC932\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x0E\xDEWa\x0E\xDC\x92a\x0F]V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E\xF6`\x04\x82\x01a\x02*V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0F\x1F\x81a\x0F\x18\x81a\x0F$\x95a\x04NV[\x80\x95a\x0E\xFAV[a\x04bV[\x01\x90V[a\x0FTa\x0FI`@\x93a\x0F[\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0F\x05V[\x96` \x83\x01\x90a\x05\x89V[\x01\x90a\x05\x89V[V[\x90\x913\x91\x92\x90\x92a\x0F\xA4Ba\x0F\x92\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0B\x81V[\x95a\x0F\x9Ba\x01bV[\x94\x85\x94\x85a\x0F(V[\x03\x90\xA2V[\x90a\x0F\xB4\x92\x91a\x0E\xB2V[V[_\x90V[_\x1C\x90V[\x90V[a\x0F\xCEa\x0F\xD3\x91a\x0F\xBAV[a\x0F\xBFV[\x90V[a\x0F\xE0\x90Ta\x0F\xC2V[\x90V[a\x0F\xEBa\x0F\xB6V[Pa\x0F\xFE_a\x0F\xF8a\x18\x9BV[\x01a\x0F\xD6V[\x90V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10)a\x10$a\x10.\x92a\x0C\xDBV[a\x10\x0FV[a\x10\x06V[\x90V[\x90V[a\x10@a\x10E\x91a\x10\x06V[a\x101V[\x90RV[\x90P\x90V[\x90\x91\x82a\x10^\x81a\x10e\x93a\x10IV[\x80\x93a\x0E\xFAV[\x01\x90V[\x80a\x10z`\x01\x92a\x10\x81\x96\x94a\x104V[\x01\x91a\x10NV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x10\xA2\x90a\x04bV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\xBCW`@RV[a\x10\x84V[a\x10\xFF\x90a\x10\xCDa\x10\x01V[Pa\x10\xF0a\x10\xDA_a\x10\x15V[\x91\x93a\x10\xE4a\x01bV[\x94\x85\x93` \x85\x01a\x10iV[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x98V[\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11\x1Fa\x11$\x91a\x0F\xBAV[a\x11\x06V[\x90V[a\x111\x90Ta\x11\x13V[\x90V[a\x11<a\x11\x02V[Pa\x11P`\x01a\x11Ja\x18\x9BV[\x01a\x11'V[\x90V[\x90a\x11oa\x11i32\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x11~Wa\x11|\x91a\x12\x1AV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x11\x96`\x04\x82\x01a\x02*V[\x03\x90\xFD[_\x80\xFD[\x90a\x11\xB1a\x11\xAAa\x01bV[\x92\x83a\x10\x98V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x11\xD1Wa\x11\xCD` \x91a\x04bV[\x01\x90V[a\x10\x84V[\x90\x92\x91\x92a\x11\xEBa\x11\xE6\x82a\x11\xB3V[a\x11\x9EV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x12\x07Wa\x12\x05\x92a\x0E\xFAV[V[a\x11\x9AV[a\x12\x17\x916\x91a\x11\xD6V[\x90V[a\x12,\x91a\x12'\x91a\x12\x0CV[a\x1A\xF4V[V[\x90a\x128\x91a\x11SV[V[\x90a\x12L\x91a\x12Ga\x1C\xA4V[a\x13SV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x12fa\x12k\x91a\x12NV[a\x12TV[\x90V[a\x12x\x90Ta\x12ZV[\x90V[a\x12\x8Fa\x12\x8Aa\x12\x94\x92a\x0C\xDBV[a\x05RV[a\x06\x14V[\x90V[a\x12\xA0\x90a\x12{V[\x90V[`\xA0\x1B\x90V[\x90a\x12\xB8`\xFF`\xA0\x1B\x91a\x12\xA3V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xCB\x90a\x08\x03V[\x90V[\x90V[\x90a\x12\xE6a\x12\xE1a\x12\xED\x92a\x12\xC2V[a\x12\xCEV[\x82Ta\x12\xA9V[\x90UV[a\x12\xFA\x90a\x06\xF3V[\x90V[a\x13\x06\x90a\x12\xF1V[\x90V[\x90a\x13\x1A`\x01\x80`\xA0\x1B\x03\x91a\taV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13-\x90a\x12\xF1V[\x90V[\x90V[\x90a\x13Ha\x13Ca\x13O\x92a\x13$V[a\x130V[\x82Ta\x13\tV[\x90UV[a\x13]`\x01a\x12nV[a\x13\xC5W\x81a\x13|a\x13va\x13q_a\x12\x97V[a\x06\x1FV[\x91a\x06\x1FV[\x14a\x13\xA9Wa\x13\xA2a\x13\x9Ba\x13\xA7\x93a\x13\x96`\x01\x80a\x12\xD1V[a\x12\xFDV[`\x01a\x133V[a\x18\x90V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x13\xC1`\x04\x82\x01a\x02*V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\xDC`\x04\x82\x01a\x02*V[\x03\x90\xFD[\x90a\x13\xEA\x91a\x12:V[V[a\x13\xF4a\x1C\xA4V[a\x13\xFCa\x13\xFEV[V[a\x14\x0Fa\x14\n_a\x12\x97V[a\x1D\x15V[V[a\x14\x19a\x13\xECV[V[_\x90V[a\x14+a\x140\x91a\x0F\xBAV[a\x06\xB3V[\x90V[a\x14=\x90Ta\x14\x1FV[\x90V[`\xE0\x1B\x90V[a\x14O\x81a\x08\x03V[\x03a\x14VWV[_\x80\xFD[\x90PQ\x90a\x14g\x82a\x14FV[V[\x90` \x82\x82\x03\x12a\x14\x82Wa\x14\x7F\x91_\x01a\x14ZV[\x90V[a\x01lV[a\x14\xADa\x14\xBA\x95\x93\x94\x92\x94a\x14\xA3``\x84\x01\x96_\x85\x01\x90a\t\x07V[` \x83\x01\x90a\t\x07V[`@\x81\x85\x03\x91\x01Ra\x0F\x05V[\x90V[a\x14\xC5a\x01bV[=_\x82>=\x90\xFD[\x92a\x15\x10` \x93\x94a\x14\xDDa\x14\x1BV[Pa\x15\x1Ba\x14\xF3a\x14\xEE`\x01a\x143V[a\x07\x1BV[\x93cz9y\xDC\x92\x95\x97a\x15\x04a\x01bV[\x98\x89\x97\x88\x96\x87\x96a\x14@V[\x86R`\x04\x86\x01a\x14\x87V[\x03\x91Z\xFA\x90\x81\x15a\x15_W_\x91a\x151W[P\x90V[a\x15R\x91P` =\x81\x11a\x15XW[a\x15J\x81\x83a\x10\x98V[\x81\x01\x90a\x14iV[_a\x15-V[P=a\x15@V[a\x14\xBDV[\x90a\x15\x80a\x15z32\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x15\x8FWa\x15\x8D\x91a\x15\xABV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x15\xA7`\x04\x82\x01a\x02*V[\x03\x90\xFD[a\x15\xBD\x91a\x15\xB8\x91a\x10\xC1V[a\x1A\xF4V[V[\x90a\x15\xC9\x91a\x15dV[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\xF2a\x15\xF8\x91\x93\x92\x93a\x01\xBFV[\x92a\x01\xBFV[\x82\x03\x91\x82\x11a\x16\x03WV[a\x15\xCFV[a\x16\x17a\x16\x1D\x91\x93\x92\x93a\x01\xBFV[\x92a\x01\xBFV[\x91a\x16)\x83\x82\x02a\x01\xBFV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x168WV[a\x15\xCFV[\x91a\x16Fa\x15\xCBV[P\x80a\x16Za\x16T\x84a\x01\xBFV[\x91a\x01\xBFV[\x11\x15a\x16\xAEWa\x16{\x91a\x16m\x91a\x15\xE3V[a\x16ua\x05qV[\x90a\x16\x08V[\x80a\x16\x8Ea\x16\x88\x84a\x01\xBFV[\x91a\x01\xBFV[\x10\x15a\x16\xA0Wa\x16\x9D\x91a\x15\xE3V[\x90V[PPa\x16\xAB_a\x0C\xDEV[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\xCEa\x16\xD3\x91a\x0F\xBAV[a\x16\xB7V[\x90V[a\x16\xE0\x90Ta\x16\xC2V[\x90V[a\x16\xEBa\x16\xB3V[Pa\x16\xF5_a\x16\xD6V[\x90V[a\x17\x03\x81\x83\x90a\x0C\"V[\x91a\x17\r_a\x0C\xDEV[[\x80a\x17!a\x17\x1B\x86a\x01\xBFV[\x91a\x01\xBFV[\x10\x15a\x17vWa\x17O\x90a\x17E32\x90a\x17=\x87\x87\x86\x91a\rpV[\x92\x90\x91a\x14\xCDV[a\x17TW[a\x0C\xFAV[a\x17\x0EV[a\x17qa\x17la\x17f\x86\x86\x85\x91a\rpV[\x90a\x10\xC1V[a\x1A\xF4V[a\x17JV[PPPPV[a\x17\x8D\x90a\x17\x88a\x1C\xA4V[a\x17\x8FV[V[\x80a\x17\xAAa\x17\xA4a\x17\x9F_a\x12\x97V[a\x06\x1FV[\x91a\x06\x1FV[\x14a\x18\x04Wa\x17\xC2a\x17\xBB\x82a\x12\xFDV[`\x01a\x133V[a\x17\xEC\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0B\x81V[\x90a\x17\xF5a\x01bV[\x80a\x17\xFF\x81a\x02*V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x18\x1C`\x04\x82\x01a\x02*V[\x03\x90\xFD[a\x18)\x90a\x17|V[V[a\x18<\x90a\x187a\x1C\xA4V[a\x18>V[V[\x80a\x18Ya\x18Sa\x18N_a\x12\x97V[a\x06\x1FV[\x91a\x06\x1FV[\x14a\x18iWa\x18g\x90a\x1D\x15V[V[a\x18\x8Ca\x18u_a\x12\x97V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t\x14V[\x03\x90\xFD[a\x18\x99\x90a\x18+V[V[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x18\xC8\x90a\x06\xF3V[\x90V[a\x18\xD4\x90a\x18\xBFV[\x90V[a\x18\xE1`da\x18\xCBV[\x90V[a\x18\xED\x90a\x07\x0FV[\x90V[\x90PQ\x90a\x18\xFD\x82a\x01\xC2V[V[\x90` \x82\x82\x03\x12a\x19\x18Wa\x19\x15\x91_\x01a\x18\xF0V[\x90V[a\x01lV[` \x01\x90V[\x90V[a\x192a\x197\x91a\x03\xBAV[a\x19#V[\x90RV[``\x1B\x90V[a\x19J\x90a\x19;V[\x90V[a\x19V\x90a\x19AV[\x90V[a\x19ea\x19j\x91a\x06\x1FV[a\x19MV[\x90RV[\x90V[a\x19}a\x19\x82\x91a\x01\xBFV[a\x19nV[\x90RV[`\xC0\x1B\x90V[a\x19\x95\x90a\x19\x86V[\x90V[a\x19\xA4a\x19\xA9\x91a\x04\xEBV[a\x19\x8CV[\x90RV[a\x19\xFD\x94a\x19\xED` `\x08\x96a\x19\xE5`\x14\x83\x9C\x9B\x98a\x19\xDD\x85\x89a\x19\xD5\x82\x9Ba\x19\xF5\x9Da\x19&V[\x01\x80\x92a\x19YV[\x01\x80\x92a\x19qV[\x01\x80\x92a\x19qV[\x01\x80\x92a\x19\x98V[\x01\x80\x92a\x19&V[\x01\x90V[\x90a\x1A\r_\x19\x91a\taV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A \x90a\x03\xBAV[\x90V[a\x1A,\x90a\x0F\xBAV[\x90V[\x90a\x1ADa\x1A?a\x1AK\x92a\x1A\x17V[a\x1A#V[\x82Ta\x1A\x01V[\x90UV[\x90V[a\x1Afa\x1Aaa\x1Ak\x92a\x1AOV[a\x05RV[a\x04\xEBV[\x90V[a\x1Aza\x1A\x80\x91a\x04\xEBV[\x91a\x04\xEBV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1A\x93WV[a\x15\xCFV[\x90a\x1A\xABg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\taV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\xC9a\x1A\xC4a\x1A\xCE\x92a\x04\xEBV[a\x05RV[a\x04\xEBV[\x90V[\x90V[\x90a\x1A\xE9a\x1A\xE4a\x1A\xF0\x92a\x1A\xB5V[a\x1A\xD1V[\x82Ta\x1A\x98V[\x90UV[a\x1B\xC5a\x1A\xFFa\x18\x9BV[a\x1B\xA0Ca\x1B\x13a\x1B\x0Ea\x18\xD7V[a\x18\xE4V[;a\x1B&a\x1B _a\x0C\xDEV[\x91a\x01\xBFV[\x11a\x1C\nW[a\x1B\x85a\x1B:_\x85\x01a\x0F\xD6V[a\x1Bv3\x93Ba\x1BL`\x01\x89\x01a\x11'V[\x90\x8Aa\x1B`a\x1BZ\x82a\x04JV[\x91a\x19\x1DV[ \x92a\x1Bja\x01bV[\x97\x88\x96` \x88\x01a\x19\xADV[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x98V[a\x1B\x97a\x1B\x91\x82a\x04JV[\x91a\x19\x1DV[ _\x83\x01a\x1A/V[a\x1B\xBF`\x01a\x1B\xAE\x81a\x1ARV[\x92\x01\x91a\x1B\xBA\x83a\x11'V[a\x1AnV[\x90a\x1A\xD4V[3a\x1C\x05a\x1B\xF3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0B\x81V[\x92a\x1B\xFCa\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xA2V[a\x1C5` a\x1C\x1Fa\x1C\x1Aa\x18\xD7V[a\x18\xE4V[c\xA3\xB1\xB3\x1D\x90a\x1C-a\x01bV[\x93\x84\x92a\x14@V[\x82R\x81\x80a\x1CE`\x04\x82\x01a\x02*V[\x03\x91Z\xFA\x80\x91_\x92a\x1CtW[P\x15_\x14a\x1CmWP`\x01a\x1ChW[[a\x1B,V[a\x1CbV[\x90Pa\x1CcV[a\x1C\x96\x91\x92P` =\x81\x11a\x1C\x9DW[a\x1C\x8E\x81\x83a\x10\x98V[\x81\x01\x90a\x18\xFFV[\x90_a\x1CRV[P=a\x1C\x84V[a\x1C\xACa\x16\xE3V[a\x1C\xC5a\x1C\xBFa\x1C\xBAa\x1DtV[a\x06\x1FV[\x91a\x06\x1FV[\x03a\x1C\xCCWV[a\x1C\xEEa\x1C\xD7a\x1DtV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t\x14V[\x03\x90\xFD[\x90V[\x90a\x1D\na\x1D\x05a\x1D\x11\x92a\x0B\x81V[a\x1C\xF2V[\x82Ta\x13\tV[\x90UV[a\x1D\x1E_a\x16\xD6V[a\x1D(\x82_a\x1C\xF5V[\x90a\x1D\\a\x1DV\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\x81V[\x91a\x0B\x81V[\x91a\x1Dea\x01bV[\x80a\x1Do\x81a\x02*V[\x03\x90\xA3V[a\x1D|a\x16\xB3V[P3\x90V`\x80`@R4`\x1CW`\x0E` V[a\x01\x94a\0+\x829a\x01\x94\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x01{V[a\0\x1D_5a\0,V[cz9y\xDC\x03a\0\x0EWa\x01BV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0X\x90a\0DV[\x90V[a\0d\x81a\0OV[\x03a\0kWV[_\x80\xFD[\x90P5\x90a\0|\x82a\0[V[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xC4W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xBFW` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xBAWV[a\0\x86V[a\0\x82V[a\0~V[\x91``\x83\x83\x03\x12a\x01\x16Wa\0\xE0\x82_\x85\x01a\0oV[\x92a\0\xEE\x83` \x83\x01a\0oV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x11Wa\x01\r\x92\x01a\0\x8AV[\x90\x91V[a\0@V[a\0<V[\x15\x15\x90V[a\x01)\x90a\x01\x1BV[\x90RV[\x91\x90a\x01@\x90_` \x85\x01\x94\x01\x90a\x01 V[V[4a\x01vWa\x01ra\x01aa\x01X6`\x04a\0\xC9V[\x92\x91\x90\x91a\x01\x83V[a\x01ia\x002V[\x91\x82\x91\x82a\x01-V[\x03\x90\xF3[a\08V[_\x80\xFD[_\x90V[PPPPa\x01\x8Fa\x01\x7FV[P_\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610b35565b61001d5f3561015c565b8063050ec1381461015757806311992f8c146101525780631c0b63671461014d5780633270486414610148578063366cbab7146101435780633c5406871461013e5780633d44ae8b1461013957806346e2cc0914610134578063485cc9551461012f5780635b3cd6e21461012a578063715018a6146101255780637a3979dc14610120578063804e51231461011b57806383d3c115146101165780638da5cb5b146101115780639d91597b1461010c578063cdafb97814610107578063d4f0eb4d14610102578063d8781342146100fd5763f2fde38b0361000e57610b02565b610acd565b610a76565b610a24565b6109b9565b610929565b6108d1565b610863565b61082a565b61077e565b610749565b61067b565b6105e0565b6105ab565b61051a565b6104b5565b6103df565b610377565b610340565b61022f565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101ba5781359167ffffffffffffffff83116101b55760200192600183028401116101b057565b61017c565b610178565b610174565b90565b6101cb816101bf565b036101d257565b5f80fd5b905035906101e3826101c2565b565b91604083830312610225575f83013567ffffffffffffffff8111610220576102128361021d928601610180565b9390946020016101d6565b90565b610170565b61016c565b5f0190565b3461025e576102486102423660046101e5565b91610c15565b610250610162565b8061025a8161022a565b0390f35b610168565b909182601f8301121561029d5781359167ffffffffffffffff831161029857602001926020830284011161029357565b61017c565b610178565b610174565b909182601f830112156102dc5781359167ffffffffffffffff83116102d75760200192602083028401116102d257565b61017c565b610178565b610174565b909160408284031261033b575f82013567ffffffffffffffff8111610336578361030c918401610263565b929093602082013567ffffffffffffffff81116103315761032d92016102a2565b9091565b610170565b610170565b61016c565b346103725761035c6103533660046102e1565b92919091610db2565b610364610162565b8061036e8161022a565b0390f35b610168565b346103a65761039061038a3660046101e5565b91610fa9565b610398610162565b806103a28161022a565b0390f35b610168565b5f9103126103b557565b61016c565b90565b6103c6906103ba565b9052565b91906103dd905f602085019401906103bd565b565b3461040f576103ef3660046103ab565b61040b6103fa610fe3565b610402610162565b918291826103ca565b0390f35b610168565b90602082820312610445575f82013567ffffffffffffffff81116104405761043c9201610180565b9091565b610170565b61016c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61048b610494602093610499936104828161044a565b9384809361044e565b95869101610457565b610462565b0190565b6104b29160208201915f81840391015261046c565b90565b346104e6576104e26104d16104cb366004610414565b906110c1565b6104d9610162565b9182918261049d565b0390f35b610168565b67ffffffffffffffff1690565b610501906104eb565b9052565b9190610518905f602085019401906104f8565b565b3461054a5761052a3660046103ab565b610546610535611134565b61053d610162565b91829182610505565b0390f35b610168565b90565b90565b61056961056461056e9261054f565b610552565b6101bf565b90565b61057b600a610555565b90565b610586610571565b90565b610592906101bf565b9052565b91906105a9905f60208501940190610589565b565b346105db576105bb3660046103ab565b6105d76105c661057e565b6105ce610162565b91829182610596565b0390f35b610168565b3461060f576105f96105f3366004610414565b9061122e565b610601610162565b8061060b8161022a565b0390f35b610168565b60018060a01b031690565b61062890610614565b90565b6106348161061f565b0361063b57565b5f80fd5b9050359061064c8261062b565b565b9190604083820312610676578061066a610673925f860161063f565b9360200161063f565b90565b61016c565b346106aa5761069461068e36600461064e565b906113e0565b61069c610162565b806106a68161022a565b0390f35b610168565b1c90565b60018060a01b031690565b6106ce9060086106d393026106af565b6106b3565b90565b906106e191546106be565b90565b6106f060015f906106d6565b90565b61070761070261070c92610614565b610552565b610614565b90565b610718906106f3565b90565b6107249061070f565b90565b6107309061071b565b9052565b9190610747905f60208501940190610727565b565b34610779576107593660046103ab565b6107756107646106e4565b61076c610162565b91829182610734565b0390f35b610168565b346107ac5761078e3660046103ab565b610796611411565b61079e610162565b806107a88161022a565b0390f35b610168565b916060838303126107fe576107c8825f850161063f565b926107d6836020830161063f565b92604082013567ffffffffffffffff81116107f9576107f59201610180565b9091565b610170565b61016c565b151590565b61081190610803565b9052565b9190610828905f60208501940190610808565b565b3461085e5761085a6108496108403660046107b1565b929190916114cd565b610851610162565b91829182610815565b0390f35b610168565b346108925761087c610876366004610414565b906115bf565b610884610162565b8061088e8161022a565b0390f35b610168565b90916060828403126108cc576108c96108b2845f85016101d6565b936108c081602086016101d6565b936040016101d6565b90565b61016c565b34610902576108fe6108ed6108e7366004610897565b9161163d565b6108f5610162565b91829182610596565b0390f35b610168565b6109109061061f565b9052565b9190610927905f60208501940190610907565b565b34610959576109393660046103ab565b6109556109446116e3565b61094c610162565b91829182610914565b0390f35b610168565b90565b5f1b90565b61097a61097561097f9261095e565b610961565b6103ba565b90565b6109ab7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a969610966565b90565b6109b6610982565b90565b346109e9576109c93660046103ab565b6109e56109d46109ae565b6109dc610162565b918291826103ca565b0390f35b610168565b90602082820312610a1f575f82013567ffffffffffffffff8111610a1a57610a169201610263565b9091565b610170565b61016c565b34610a5357610a3d610a373660046109ee565b906116f8565b610a45610162565b80610a4f8161022a565b0390f35b610168565b90602082820312610a7157610a6e915f0161063f565b90565b61016c565b34610aa457610a8e610a89366004610a58565b611820565b610a96610162565b80610aa08161022a565b0390f35b610168565b7f000000000000000000000000000000000000000000000000000000000000000090565b34610afd57610add3660046103ab565b610af9610ae8610aa9565b610af0610162565b91829182610596565b0390f35b610168565b34610b3057610b1a610b15366004610a58565b611890565b610b22610162565b80610b2c8161022a565b0390f35b610168565b5f80fd5b9190610b56610b50333290868591929091926114cd565b15610803565b610b6557610b6392610bc2565b565b5f631b8e828b60e31b815280610b7d6004820161022a565b0390fd5b610b8a9061070f565b90565b604090610bb9610bae610bc09597969460608401908482035f86015261046c565b966020830190610589565b0190610589565b565b90610bce9033926110c1565b914292610c10610bfe7f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b81565b94610c07610162565b93849384610b8d565b0390a2565b90610c209291610b39565b565b5090565b5090565b60209181520190565b60207f7665207468652073616d65206c656e6774680000000000000000000000000000917f4461746120616e64207072696f7269747920617272617973206d7573742068615f8201520152565b610c8d6032604092610c2a565b610c9681610c33565b0190565b610caf9060208101905f818303910152610c80565b90565b15610cb957565b610cc1610162565b62461bcd60e51b815280610cd760048201610c9a565b0390fd5b90565b610cf2610ced610cf792610cdb565b610552565b6101bf565b90565b6001610d0691016101bf565b90565b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610d6b570180359067ffffffffffffffff8211610d6657602001916001820236038313610d6157565b610d25565b610d21565b610d1d565b90821015610d8b576020610d879202810190610d29565b9091565b610d09565b9190811015610da0576020020190565b610d09565b35610daf816101c2565b90565b9092610dbf828590610c22565b93610de685610de0610dda610dd5888790610c26565b6101bf565b916101bf565b14610cb2565b610def5f610cde565b5b80610e03610dfd886101bf565b916101bf565b1015610eaa57610e3190610e27333290610e1f88878691610d70565b9290916114cd565b610e36575b610cfa565b610df0565b33610e4c610e4687868591610d70565b906110c1565b90610e61610e5c89888691610d90565b610da5565b4292610ea2610e907f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f294610b81565b94610e99610162565b93849384610b8d565b0390a2610e2c565b505050505050565b9190610ecf610ec9333290868591929091926114cd565b15610803565b610ede57610edc92610f5d565b565b5f631b8e828b60e31b815280610ef66004820161022a565b0390fd5b90825f939282370152565b9190610f1f81610f1881610f249561044e565b8095610efa565b610462565b0190565b610f54610f49604093610f5b9698979560608501918583035f870152610f05565b966020830190610589565b0190610589565b565b90913391929092610fa442610f927f4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f295610b81565b95610f9b610162565b94859485610f28565b0390a2565b90610fb49291610eb2565b565b5f90565b5f1c90565b90565b610fce610fd391610fba565b610fbf565b90565b610fe09054610fc2565b90565b610feb610fb6565b50610ffe5f610ff861189b565b01610fd6565b90565b606090565b60ff60f81b1690565b60f81b90565b61102961102461102e92610cdb565b61100f565b611006565b90565b90565b61104061104591611006565b611031565b9052565b905090565b90918261105e8161106593611049565b8093610efa565b0190565b8061107a6001926110819694611034565b019161104e565b90565b634e487b7160e01b5f52604160045260245ffd5b906110a290610462565b810190811067ffffffffffffffff8211176110bc57604052565b611084565b6110ff906110cd611001565b506110f06110da5f611015565b91936110e4610162565b94859360208501611069565b60208201810382520382611098565b90565b5f90565b67ffffffffffffffff1690565b61111f61112491610fba565b611106565b90565b6111319054611113565b90565b61113c611102565b50611150600161114a61189b565b01611127565b90565b9061116f611169333290858591929091926114cd565b15610803565b61117e5761117c9161121a565b565b5f631b8e828b60e31b8152806111966004820161022a565b0390fd5b5f80fd5b906111b16111aa610162565b9283611098565b565b67ffffffffffffffff81116111d1576111cd602091610462565b0190565b611084565b909291926111eb6111e6826111b3565b61119e565b938185526020850190828401116112075761120592610efa565b565b61119a565b6112179136916111d6565b90565b61122c916112279161120c565b611af4565b565b9061123891611153565b565b9061124c91611247611ca4565b611353565b565b60a01c90565b60ff1690565b61126661126b9161124e565b611254565b90565b611278905461125a565b90565b61128f61128a61129492610cdb565b610552565b610614565b90565b6112a09061127b565b90565b60a01b90565b906112b860ff60a01b916112a3565b9181191691161790565b6112cb90610803565b90565b90565b906112e66112e16112ed926112c2565b6112ce565b82546112a9565b9055565b6112fa906106f3565b90565b611306906112f1565b90565b9061131a60018060a01b0391610961565b9181191691161790565b61132d906112f1565b90565b90565b9061134861134361134f92611324565b611330565b8254611309565b9055565b61135d600161126e565b6113c5578161137c6113766113715f611297565b61061f565b9161061f565b146113a9576113a261139b6113a7936113966001806112d1565b6112fd565b6001611333565b611890565b565b5f632e7f3c7f60e11b8152806113c16004820161022a565b0390fd5b5f62dc149f60e41b8152806113dc6004820161022a565b0390fd5b906113ea9161123a565b565b6113f4611ca4565b6113fc6113fe565b565b61140f61140a5f611297565b611d15565b565b6114196113ec565b565b5f90565b61142b61143091610fba565b6106b3565b90565b61143d905461141f565b90565b60e01b90565b61144f81610803565b0361145657565b5f80fd5b9050519061146782611446565b565b906020828203126114825761147f915f0161145a565b90565b61016c565b6114ad6114ba95939492946114a360608401965f850190610907565b6020830190610907565b6040818503910152610f05565b90565b6114c5610162565b3d5f823e3d90fd5b92611510602093946114dd61141b565b5061151b6114f36114ee6001611433565b61071b565b93637a3979dc929597611504610162565b98899788968796611440565b865260048601611487565b03915afa90811561155f575f91611531575b5090565b611552915060203d8111611558575b61154a8183611098565b810190611469565b5f61152d565b503d611540565b6114bd565b9061158061157a333290858591929091926114cd565b15610803565b61158f5761158d916115ab565b565b5f631b8e828b60e31b8152806115a76004820161022a565b0390fd5b6115bd916115b8916110c1565b611af4565b565b906115c991611564565b565b5f90565b634e487b7160e01b5f52601160045260245ffd5b6115f26115f8919392936101bf565b926101bf565b820391821161160357565b6115cf565b61161761161d919392936101bf565b926101bf565b916116298382026101bf565b92818404149015171561163857565b6115cf565b916116466115cb565b508061165a611654846101bf565b916101bf565b11156116ae5761167b9161166d916115e3565b611675610571565b90611608565b8061168e611688846101bf565b916101bf565b10156116a05761169d916115e3565b90565b50506116ab5f610cde565b90565b505090565b5f90565b60018060a01b031690565b6116ce6116d391610fba565b6116b7565b90565b6116e090546116c2565b90565b6116eb6116b3565b506116f55f6116d6565b90565b611703818390610c22565b9161170d5f610cde565b5b8061172161171b866101bf565b916101bf565b10156117765761174f9061174533329061173d87878691610d70565b9290916114cd565b611754575b610cfa565b61170e565b61177161176c61176686868591610d70565b906110c1565b611af4565b61174a565b50505050565b61178d90611788611ca4565b61178f565b565b806117aa6117a461179f5f611297565b61061f565b9161061f565b14611804576117c26117bb826112fd565b6001611333565b6117ec7f253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b991610b81565b906117f5610162565b806117ff8161022a565b0390a2565b5f632e7f3c7f60e11b81528061181c6004820161022a565b0390fd5b6118299061177c565b565b61183c90611837611ca4565b61183e565b565b8061185961185361184e5f611297565b61061f565b9161061f565b146118695761186790611d15565b565b61188c6118755f611297565b5f918291631e4fbdf760e01b835260048301610914565b0390fd5b6118999061182b565b565b7fbcd134af035e52869741eb0221dfc8a26900a04521f5a2d44a59b675ea20a96990565b6118c8906106f3565b90565b6118d4906118bf565b90565b6118e160646118cb565b90565b6118ed9061070f565b90565b905051906118fd826101c2565b565b9060208282031261191857611915915f016118f0565b90565b61016c565b60200190565b90565b611932611937916103ba565b611923565b9052565b60601b90565b61194a9061193b565b90565b61195690611941565b90565b61196561196a9161061f565b61194d565b9052565b90565b61197d611982916101bf565b61196e565b9052565b60c01b90565b61199590611986565b90565b6119a46119a9916104eb565b61198c565b9052565b6119fd946119ed60206008966119e56014839c9b986119dd85896119d5829b6119f59d611926565b018092611959565b018092611971565b018092611971565b018092611998565b018092611926565b0190565b90611a0d5f1991610961565b9181191691161790565b611a20906103ba565b90565b611a2c90610fba565b90565b90611a44611a3f611a4b92611a17565b611a23565b8254611a01565b9055565b90565b611a66611a61611a6b92611a4f565b610552565b6104eb565b90565b611a7a611a80916104eb565b916104eb565b019067ffffffffffffffff8211611a9357565b6115cf565b90611aab67ffffffffffffffff91610961565b9181191691161790565b611ac9611ac4611ace926104eb565b610552565b6104eb565b90565b90565b90611ae9611ae4611af092611ab5565b611ad1565b8254611a98565b9055565b611bc5611aff61189b565b611ba043611b13611b0e6118d7565b6118e4565b3b611b26611b205f610cde565b916101bf565b11611c0a575b611b85611b3a5f8501610fd6565b611b76339342611b4c60018901611127565b908a611b60611b5a8261044a565b9161191d565b2092611b6a610162565b978896602088016119ad565b60208201810382520382611098565b611b97611b918261044a565b9161191d565b205f8301611a2f565b611bbf6001611bae81611a52565b920191611bba83611127565b611a6e565b90611ad4565b33611c05611bf37f83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f92610b81565b92611bfc610162565b9182918261049d565b0390a2565b611c356020611c1f611c1a6118d7565b6118e4565b63a3b1b31d90611c2d610162565b938492611440565b82528180611c456004820161022a565b03915afa80915f92611c74575b50155f14611c6d57506001611c68575b5b611b2c565b611c62565b9050611c63565b611c9691925060203d8111611c9d575b611c8e8183611098565b8101906118ff565b905f611c52565b503d611c84565b611cac6116e3565b611cc5611cbf611cba611d74565b61061f565b9161061f565b03611ccc57565b611cee611cd7611d74565b5f91829163118cdaa760e01b835260048301610914565b0390fd5b90565b90611d0a611d05611d1192610b81565b611cf2565b8254611309565b9055565b611d1e5f6116d6565b611d28825f611cf5565b90611d5c611d567f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610b81565b91610b81565b91611d65610162565b80611d6f8161022a565b0390a3565b611d7c6116b3565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x0B5V[a\0\x1D_5a\x01\\V[\x80c\x05\x0E\xC18\x14a\x01WW\x80c\x11\x99/\x8C\x14a\x01RW\x80c\x1C\x0Bcg\x14a\x01MW\x80c2pHd\x14a\x01HW\x80c6l\xBA\xB7\x14a\x01CW\x80c<T\x06\x87\x14a\x01>W\x80c=D\xAE\x8B\x14a\x019W\x80cF\xE2\xCC\t\x14a\x014W\x80cH\\\xC9U\x14a\x01/W\x80c[<\xD6\xE2\x14a\x01*W\x80cqP\x18\xA6\x14a\x01%W\x80cz9y\xDC\x14a\x01 W\x80c\x80NQ#\x14a\x01\x1BW\x80c\x83\xD3\xC1\x15\x14a\x01\x16W\x80c\x8D\xA5\xCB[\x14a\x01\x11W\x80c\x9D\x91Y{\x14a\x01\x0CW\x80c\xCD\xAF\xB9x\x14a\x01\x07W\x80c\xD4\xF0\xEBM\x14a\x01\x02W\x80c\xD8x\x13B\x14a\0\xFDWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x0B\x02V[a\n\xCDV[a\nvV[a\n$V[a\t\xB9V[a\t)V[a\x08\xD1V[a\x08cV[a\x08*V[a\x07~V[a\x07IV[a\x06{V[a\x05\xE0V[a\x05\xABV[a\x05\x1AV[a\x04\xB5V[a\x03\xDFV[a\x03wV[a\x03@V[a\x02/V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xBAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xB5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\xB0WV[a\x01|V[a\x01xV[a\x01tV[\x90V[a\x01\xCB\x81a\x01\xBFV[\x03a\x01\xD2WV[_\x80\xFD[\x90P5\x90a\x01\xE3\x82a\x01\xC2V[V[\x91`@\x83\x83\x03\x12a\x02%W_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02 Wa\x02\x12\x83a\x02\x1D\x92\x86\x01a\x01\x80V[\x93\x90\x94` \x01a\x01\xD6V[\x90V[a\x01pV[a\x01lV[_\x01\x90V[4a\x02^Wa\x02Ha\x02B6`\x04a\x01\xE5V[\x91a\x0C\x15V[a\x02Pa\x01bV[\x80a\x02Z\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\x9DW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\x98W` \x01\x92` \x83\x02\x84\x01\x11a\x02\x93WV[a\x01|V[a\x01xV[a\x01tV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02\xDCW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02\xD7W` \x01\x92` \x83\x02\x84\x01\x11a\x02\xD2WV[a\x01|V[a\x01xV[a\x01tV[\x90\x91`@\x82\x84\x03\x12a\x03;W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x036W\x83a\x03\x0C\x91\x84\x01a\x02cV[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x031Wa\x03-\x92\x01a\x02\xA2V[\x90\x91V[a\x01pV[a\x01pV[a\x01lV[4a\x03rWa\x03\\a\x03S6`\x04a\x02\xE1V[\x92\x91\x90\x91a\r\xB2V[a\x03da\x01bV[\x80a\x03n\x81a\x02*V[\x03\x90\xF3[a\x01hV[4a\x03\xA6Wa\x03\x90a\x03\x8A6`\x04a\x01\xE5V[\x91a\x0F\xA9V[a\x03\x98a\x01bV[\x80a\x03\xA2\x81a\x02*V[\x03\x90\xF3[a\x01hV[_\x91\x03\x12a\x03\xB5WV[a\x01lV[\x90V[a\x03\xC6\x90a\x03\xBAV[\x90RV[\x91\x90a\x03\xDD\x90_` \x85\x01\x94\x01\x90a\x03\xBDV[V[4a\x04\x0FWa\x03\xEF6`\x04a\x03\xABV[a\x04\x0Ba\x03\xFAa\x0F\xE3V[a\x04\x02a\x01bV[\x91\x82\x91\x82a\x03\xCAV[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\x04EW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04@Wa\x04<\x92\x01a\x01\x80V[\x90\x91V[a\x01pV[a\x01lV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x04\x8Ba\x04\x94` \x93a\x04\x99\x93a\x04\x82\x81a\x04JV[\x93\x84\x80\x93a\x04NV[\x95\x86\x91\x01a\x04WV[a\x04bV[\x01\x90V[a\x04\xB2\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x04lV[\x90V[4a\x04\xE6Wa\x04\xE2a\x04\xD1a\x04\xCB6`\x04a\x04\x14V[\x90a\x10\xC1V[a\x04\xD9a\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xF3[a\x01hV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x05\x01\x90a\x04\xEBV[\x90RV[\x91\x90a\x05\x18\x90_` \x85\x01\x94\x01\x90a\x04\xF8V[V[4a\x05JWa\x05*6`\x04a\x03\xABV[a\x05Fa\x055a\x114V[a\x05=a\x01bV[\x91\x82\x91\x82a\x05\x05V[\x03\x90\xF3[a\x01hV[\x90V[\x90V[a\x05ia\x05da\x05n\x92a\x05OV[a\x05RV[a\x01\xBFV[\x90V[a\x05{`\na\x05UV[\x90V[a\x05\x86a\x05qV[\x90V[a\x05\x92\x90a\x01\xBFV[\x90RV[\x91\x90a\x05\xA9\x90_` \x85\x01\x94\x01\x90a\x05\x89V[V[4a\x05\xDBWa\x05\xBB6`\x04a\x03\xABV[a\x05\xD7a\x05\xC6a\x05~V[a\x05\xCEa\x01bV[\x91\x82\x91\x82a\x05\x96V[\x03\x90\xF3[a\x01hV[4a\x06\x0FWa\x05\xF9a\x05\xF36`\x04a\x04\x14V[\x90a\x12.V[a\x06\x01a\x01bV[\x80a\x06\x0B\x81a\x02*V[\x03\x90\xF3[a\x01hV[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06(\x90a\x06\x14V[\x90V[a\x064\x81a\x06\x1FV[\x03a\x06;WV[_\x80\xFD[\x90P5\x90a\x06L\x82a\x06+V[V[\x91\x90`@\x83\x82\x03\x12a\x06vW\x80a\x06ja\x06s\x92_\x86\x01a\x06?V[\x93` \x01a\x06?V[\x90V[a\x01lV[4a\x06\xAAWa\x06\x94a\x06\x8E6`\x04a\x06NV[\x90a\x13\xE0V[a\x06\x9Ca\x01bV[\x80a\x06\xA6\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x06\xCE\x90`\x08a\x06\xD3\x93\x02a\x06\xAFV[a\x06\xB3V[\x90V[\x90a\x06\xE1\x91Ta\x06\xBEV[\x90V[a\x06\xF0`\x01_\x90a\x06\xD6V[\x90V[a\x07\x07a\x07\x02a\x07\x0C\x92a\x06\x14V[a\x05RV[a\x06\x14V[\x90V[a\x07\x18\x90a\x06\xF3V[\x90V[a\x07$\x90a\x07\x0FV[\x90V[a\x070\x90a\x07\x1BV[\x90RV[\x91\x90a\x07G\x90_` \x85\x01\x94\x01\x90a\x07'V[V[4a\x07yWa\x07Y6`\x04a\x03\xABV[a\x07ua\x07da\x06\xE4V[a\x07la\x01bV[\x91\x82\x91\x82a\x074V[\x03\x90\xF3[a\x01hV[4a\x07\xACWa\x07\x8E6`\x04a\x03\xABV[a\x07\x96a\x14\x11V[a\x07\x9Ea\x01bV[\x80a\x07\xA8\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x91``\x83\x83\x03\x12a\x07\xFEWa\x07\xC8\x82_\x85\x01a\x06?V[\x92a\x07\xD6\x83` \x83\x01a\x06?V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\xF9Wa\x07\xF5\x92\x01a\x01\x80V[\x90\x91V[a\x01pV[a\x01lV[\x15\x15\x90V[a\x08\x11\x90a\x08\x03V[\x90RV[\x91\x90a\x08(\x90_` \x85\x01\x94\x01\x90a\x08\x08V[V[4a\x08^Wa\x08Za\x08Ia\x08@6`\x04a\x07\xB1V[\x92\x91\x90\x91a\x14\xCDV[a\x08Qa\x01bV[\x91\x82\x91\x82a\x08\x15V[\x03\x90\xF3[a\x01hV[4a\x08\x92Wa\x08|a\x08v6`\x04a\x04\x14V[\x90a\x15\xBFV[a\x08\x84a\x01bV[\x80a\x08\x8E\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x90\x91``\x82\x84\x03\x12a\x08\xCCWa\x08\xC9a\x08\xB2\x84_\x85\x01a\x01\xD6V[\x93a\x08\xC0\x81` \x86\x01a\x01\xD6V[\x93`@\x01a\x01\xD6V[\x90V[a\x01lV[4a\t\x02Wa\x08\xFEa\x08\xEDa\x08\xE76`\x04a\x08\x97V[\x91a\x16=V[a\x08\xF5a\x01bV[\x91\x82\x91\x82a\x05\x96V[\x03\x90\xF3[a\x01hV[a\t\x10\x90a\x06\x1FV[\x90RV[\x91\x90a\t'\x90_` \x85\x01\x94\x01\x90a\t\x07V[V[4a\tYWa\t96`\x04a\x03\xABV[a\tUa\tDa\x16\xE3V[a\tLa\x01bV[\x91\x82\x91\x82a\t\x14V[\x03\x90\xF3[a\x01hV[\x90V[_\x1B\x90V[a\tza\tua\t\x7F\x92a\t^V[a\taV[a\x03\xBAV[\x90V[a\t\xAB\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9ia\tfV[\x90V[a\t\xB6a\t\x82V[\x90V[4a\t\xE9Wa\t\xC96`\x04a\x03\xABV[a\t\xE5a\t\xD4a\t\xAEV[a\t\xDCa\x01bV[\x91\x82\x91\x82a\x03\xCAV[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\n\x1FW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\n\x1AWa\n\x16\x92\x01a\x02cV[\x90\x91V[a\x01pV[a\x01lV[4a\nSWa\n=a\n76`\x04a\t\xEEV[\x90a\x16\xF8V[a\nEa\x01bV[\x80a\nO\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x90` \x82\x82\x03\x12a\nqWa\nn\x91_\x01a\x06?V[\x90V[a\x01lV[4a\n\xA4Wa\n\x8Ea\n\x896`\x04a\nXV[a\x18 V[a\n\x96a\x01bV[\x80a\n\xA0\x81a\x02*V[\x03\x90\xF3[a\x01hV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\n\xFDWa\n\xDD6`\x04a\x03\xABV[a\n\xF9a\n\xE8a\n\xA9V[a\n\xF0a\x01bV[\x91\x82\x91\x82a\x05\x96V[\x03\x90\xF3[a\x01hV[4a\x0B0Wa\x0B\x1Aa\x0B\x156`\x04a\nXV[a\x18\x90V[a\x0B\"a\x01bV[\x80a\x0B,\x81a\x02*V[\x03\x90\xF3[a\x01hV[_\x80\xFD[\x91\x90a\x0BVa\x0BP32\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x0BeWa\x0Bc\x92a\x0B\xC2V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0B}`\x04\x82\x01a\x02*V[\x03\x90\xFD[a\x0B\x8A\x90a\x07\x0FV[\x90V[`@\x90a\x0B\xB9a\x0B\xAEa\x0B\xC0\x95\x97\x96\x94``\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x04lV[\x96` \x83\x01\x90a\x05\x89V[\x01\x90a\x05\x89V[V[\x90a\x0B\xCE\x903\x92a\x10\xC1V[\x91B\x92a\x0C\x10a\x0B\xFE\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\x81V[\x94a\x0C\x07a\x01bV[\x93\x84\x93\x84a\x0B\x8DV[\x03\x90\xA2V[\x90a\x0C \x92\x91a\x0B9V[V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[` \x7Fve the same length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FData and priority arrays must ha_\x82\x01R\x01RV[a\x0C\x8D`2`@\x92a\x0C*V[a\x0C\x96\x81a\x0C3V[\x01\x90V[a\x0C\xAF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0C\x80V[\x90V[\x15a\x0C\xB9WV[a\x0C\xC1a\x01bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x0C\xD7`\x04\x82\x01a\x0C\x9AV[\x03\x90\xFD[\x90V[a\x0C\xF2a\x0C\xEDa\x0C\xF7\x92a\x0C\xDBV[a\x05RV[a\x01\xBFV[\x90V[`\x01a\r\x06\x91\x01a\x01\xBFV[\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\rkW\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\rfW` \x01\x91`\x01\x82\x026\x03\x83\x13a\raWV[a\r%V[a\r!V[a\r\x1DV[\x90\x82\x10\x15a\r\x8BW` a\r\x87\x92\x02\x81\x01\x90a\r)V[\x90\x91V[a\r\tV[\x91\x90\x81\x10\x15a\r\xA0W` \x02\x01\x90V[a\r\tV[5a\r\xAF\x81a\x01\xC2V[\x90V[\x90\x92a\r\xBF\x82\x85\x90a\x0C\"V[\x93a\r\xE6\x85a\r\xE0a\r\xDAa\r\xD5\x88\x87\x90a\x0C&V[a\x01\xBFV[\x91a\x01\xBFV[\x14a\x0C\xB2V[a\r\xEF_a\x0C\xDEV[[\x80a\x0E\x03a\r\xFD\x88a\x01\xBFV[\x91a\x01\xBFV[\x10\x15a\x0E\xAAWa\x0E1\x90a\x0E'32\x90a\x0E\x1F\x88\x87\x86\x91a\rpV[\x92\x90\x91a\x14\xCDV[a\x0E6W[a\x0C\xFAV[a\r\xF0V[3a\x0ELa\x0EF\x87\x86\x85\x91a\rpV[\x90a\x10\xC1V[\x90a\x0Eaa\x0E\\\x89\x88\x86\x91a\r\x90V[a\r\xA5V[B\x92a\x0E\xA2a\x0E\x90\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x94a\x0B\x81V[\x94a\x0E\x99a\x01bV[\x93\x84\x93\x84a\x0B\x8DV[\x03\x90\xA2a\x0E,V[PPPPPPV[\x91\x90a\x0E\xCFa\x0E\xC932\x90\x86\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x0E\xDEWa\x0E\xDC\x92a\x0F]V[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x0E\xF6`\x04\x82\x01a\x02*V[\x03\x90\xFD[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x0F\x1F\x81a\x0F\x18\x81a\x0F$\x95a\x04NV[\x80\x95a\x0E\xFAV[a\x04bV[\x01\x90V[a\x0FTa\x0FI`@\x93a\x0F[\x96\x98\x97\x95``\x85\x01\x91\x85\x83\x03_\x87\x01Ra\x0F\x05V[\x96` \x83\x01\x90a\x05\x89V[\x01\x90a\x05\x89V[V[\x90\x913\x91\x92\x90\x92a\x0F\xA4Ba\x0F\x92\x7FKZ\xA8\xD0\x82\xE6\x91\xCB\x99r\xA7\x95\x8F\xA4\x15?f?!_\xE6\x97\xA3\xE0\x8B\xD2r\x9E\xD7\x8F\x02\xF2\x95a\x0B\x81V[\x95a\x0F\x9Ba\x01bV[\x94\x85\x94\x85a\x0F(V[\x03\x90\xA2V[\x90a\x0F\xB4\x92\x91a\x0E\xB2V[V[_\x90V[_\x1C\x90V[\x90V[a\x0F\xCEa\x0F\xD3\x91a\x0F\xBAV[a\x0F\xBFV[\x90V[a\x0F\xE0\x90Ta\x0F\xC2V[\x90V[a\x0F\xEBa\x0F\xB6V[Pa\x0F\xFE_a\x0F\xF8a\x18\x9BV[\x01a\x0F\xD6V[\x90V[``\x90V[`\xFF`\xF8\x1B\x16\x90V[`\xF8\x1B\x90V[a\x10)a\x10$a\x10.\x92a\x0C\xDBV[a\x10\x0FV[a\x10\x06V[\x90V[\x90V[a\x10@a\x10E\x91a\x10\x06V[a\x101V[\x90RV[\x90P\x90V[\x90\x91\x82a\x10^\x81a\x10e\x93a\x10IV[\x80\x93a\x0E\xFAV[\x01\x90V[\x80a\x10z`\x01\x92a\x10\x81\x96\x94a\x104V[\x01\x91a\x10NV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x10\xA2\x90a\x04bV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x10\xBCW`@RV[a\x10\x84V[a\x10\xFF\x90a\x10\xCDa\x10\x01V[Pa\x10\xF0a\x10\xDA_a\x10\x15V[\x91\x93a\x10\xE4a\x01bV[\x94\x85\x93` \x85\x01a\x10iV[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x98V[\x90V[_\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x11\x1Fa\x11$\x91a\x0F\xBAV[a\x11\x06V[\x90V[a\x111\x90Ta\x11\x13V[\x90V[a\x11<a\x11\x02V[Pa\x11P`\x01a\x11Ja\x18\x9BV[\x01a\x11'V[\x90V[\x90a\x11oa\x11i32\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x11~Wa\x11|\x91a\x12\x1AV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x11\x96`\x04\x82\x01a\x02*V[\x03\x90\xFD[_\x80\xFD[\x90a\x11\xB1a\x11\xAAa\x01bV[\x92\x83a\x10\x98V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x11\xD1Wa\x11\xCD` \x91a\x04bV[\x01\x90V[a\x10\x84V[\x90\x92\x91\x92a\x11\xEBa\x11\xE6\x82a\x11\xB3V[a\x11\x9EV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\x12\x07Wa\x12\x05\x92a\x0E\xFAV[V[a\x11\x9AV[a\x12\x17\x916\x91a\x11\xD6V[\x90V[a\x12,\x91a\x12'\x91a\x12\x0CV[a\x1A\xF4V[V[\x90a\x128\x91a\x11SV[V[\x90a\x12L\x91a\x12Ga\x1C\xA4V[a\x13SV[V[`\xA0\x1C\x90V[`\xFF\x16\x90V[a\x12fa\x12k\x91a\x12NV[a\x12TV[\x90V[a\x12x\x90Ta\x12ZV[\x90V[a\x12\x8Fa\x12\x8Aa\x12\x94\x92a\x0C\xDBV[a\x05RV[a\x06\x14V[\x90V[a\x12\xA0\x90a\x12{V[\x90V[`\xA0\x1B\x90V[\x90a\x12\xB8`\xFF`\xA0\x1B\x91a\x12\xA3V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x12\xCB\x90a\x08\x03V[\x90V[\x90V[\x90a\x12\xE6a\x12\xE1a\x12\xED\x92a\x12\xC2V[a\x12\xCEV[\x82Ta\x12\xA9V[\x90UV[a\x12\xFA\x90a\x06\xF3V[\x90V[a\x13\x06\x90a\x12\xF1V[\x90V[\x90a\x13\x1A`\x01\x80`\xA0\x1B\x03\x91a\taV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x13-\x90a\x12\xF1V[\x90V[\x90V[\x90a\x13Ha\x13Ca\x13O\x92a\x13$V[a\x130V[\x82Ta\x13\tV[\x90UV[a\x13]`\x01a\x12nV[a\x13\xC5W\x81a\x13|a\x13va\x13q_a\x12\x97V[a\x06\x1FV[\x91a\x06\x1FV[\x14a\x13\xA9Wa\x13\xA2a\x13\x9Ba\x13\xA7\x93a\x13\x96`\x01\x80a\x12\xD1V[a\x12\xFDV[`\x01a\x133V[a\x18\x90V[V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x13\xC1`\x04\x82\x01a\x02*V[\x03\x90\xFD[_b\xDC\x14\x9F`\xE4\x1B\x81R\x80a\x13\xDC`\x04\x82\x01a\x02*V[\x03\x90\xFD[\x90a\x13\xEA\x91a\x12:V[V[a\x13\xF4a\x1C\xA4V[a\x13\xFCa\x13\xFEV[V[a\x14\x0Fa\x14\n_a\x12\x97V[a\x1D\x15V[V[a\x14\x19a\x13\xECV[V[_\x90V[a\x14+a\x140\x91a\x0F\xBAV[a\x06\xB3V[\x90V[a\x14=\x90Ta\x14\x1FV[\x90V[`\xE0\x1B\x90V[a\x14O\x81a\x08\x03V[\x03a\x14VWV[_\x80\xFD[\x90PQ\x90a\x14g\x82a\x14FV[V[\x90` \x82\x82\x03\x12a\x14\x82Wa\x14\x7F\x91_\x01a\x14ZV[\x90V[a\x01lV[a\x14\xADa\x14\xBA\x95\x93\x94\x92\x94a\x14\xA3``\x84\x01\x96_\x85\x01\x90a\t\x07V[` \x83\x01\x90a\t\x07V[`@\x81\x85\x03\x91\x01Ra\x0F\x05V[\x90V[a\x14\xC5a\x01bV[=_\x82>=\x90\xFD[\x92a\x15\x10` \x93\x94a\x14\xDDa\x14\x1BV[Pa\x15\x1Ba\x14\xF3a\x14\xEE`\x01a\x143V[a\x07\x1BV[\x93cz9y\xDC\x92\x95\x97a\x15\x04a\x01bV[\x98\x89\x97\x88\x96\x87\x96a\x14@V[\x86R`\x04\x86\x01a\x14\x87V[\x03\x91Z\xFA\x90\x81\x15a\x15_W_\x91a\x151W[P\x90V[a\x15R\x91P` =\x81\x11a\x15XW[a\x15J\x81\x83a\x10\x98V[\x81\x01\x90a\x14iV[_a\x15-V[P=a\x15@V[a\x14\xBDV[\x90a\x15\x80a\x15z32\x90\x85\x85\x91\x92\x90\x91\x92a\x14\xCDV[\x15a\x08\x03V[a\x15\x8FWa\x15\x8D\x91a\x15\xABV[V[_c\x1B\x8E\x82\x8B`\xE3\x1B\x81R\x80a\x15\xA7`\x04\x82\x01a\x02*V[\x03\x90\xFD[a\x15\xBD\x91a\x15\xB8\x91a\x10\xC1V[a\x1A\xF4V[V[\x90a\x15\xC9\x91a\x15dV[V[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x15\xF2a\x15\xF8\x91\x93\x92\x93a\x01\xBFV[\x92a\x01\xBFV[\x82\x03\x91\x82\x11a\x16\x03WV[a\x15\xCFV[a\x16\x17a\x16\x1D\x91\x93\x92\x93a\x01\xBFV[\x92a\x01\xBFV[\x91a\x16)\x83\x82\x02a\x01\xBFV[\x92\x81\x84\x04\x14\x90\x15\x17\x15a\x168WV[a\x15\xCFV[\x91a\x16Fa\x15\xCBV[P\x80a\x16Za\x16T\x84a\x01\xBFV[\x91a\x01\xBFV[\x11\x15a\x16\xAEWa\x16{\x91a\x16m\x91a\x15\xE3V[a\x16ua\x05qV[\x90a\x16\x08V[\x80a\x16\x8Ea\x16\x88\x84a\x01\xBFV[\x91a\x01\xBFV[\x10\x15a\x16\xA0Wa\x16\x9D\x91a\x15\xE3V[\x90V[PPa\x16\xAB_a\x0C\xDEV[\x90V[PP\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x16\xCEa\x16\xD3\x91a\x0F\xBAV[a\x16\xB7V[\x90V[a\x16\xE0\x90Ta\x16\xC2V[\x90V[a\x16\xEBa\x16\xB3V[Pa\x16\xF5_a\x16\xD6V[\x90V[a\x17\x03\x81\x83\x90a\x0C\"V[\x91a\x17\r_a\x0C\xDEV[[\x80a\x17!a\x17\x1B\x86a\x01\xBFV[\x91a\x01\xBFV[\x10\x15a\x17vWa\x17O\x90a\x17E32\x90a\x17=\x87\x87\x86\x91a\rpV[\x92\x90\x91a\x14\xCDV[a\x17TW[a\x0C\xFAV[a\x17\x0EV[a\x17qa\x17la\x17f\x86\x86\x85\x91a\rpV[\x90a\x10\xC1V[a\x1A\xF4V[a\x17JV[PPPPV[a\x17\x8D\x90a\x17\x88a\x1C\xA4V[a\x17\x8FV[V[\x80a\x17\xAAa\x17\xA4a\x17\x9F_a\x12\x97V[a\x06\x1FV[\x91a\x06\x1FV[\x14a\x18\x04Wa\x17\xC2a\x17\xBB\x82a\x12\xFDV[`\x01a\x133V[a\x17\xEC\x7F%5\x80\xF8\x06t\x1C\x11\xB3\xD4\xAA`\xD9\xCA\xCC[\xEF\x0C\xEB\xB3WHv\x7F\xE2?\x11\x91n/\x04\xB9\x91a\x0B\x81V[\x90a\x17\xF5a\x01bV[\x80a\x17\xFF\x81a\x02*V[\x03\x90\xA2V[_c.\x7F<\x7F`\xE1\x1B\x81R\x80a\x18\x1C`\x04\x82\x01a\x02*V[\x03\x90\xFD[a\x18)\x90a\x17|V[V[a\x18<\x90a\x187a\x1C\xA4V[a\x18>V[V[\x80a\x18Ya\x18Sa\x18N_a\x12\x97V[a\x06\x1FV[\x91a\x06\x1FV[\x14a\x18iWa\x18g\x90a\x1D\x15V[V[a\x18\x8Ca\x18u_a\x12\x97V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\t\x14V[\x03\x90\xFD[a\x18\x99\x90a\x18+V[V[\x7F\xBC\xD14\xAF\x03^R\x86\x97A\xEB\x02!\xDF\xC8\xA2i\0\xA0E!\xF5\xA2\xD4JY\xB6u\xEA \xA9i\x90V[a\x18\xC8\x90a\x06\xF3V[\x90V[a\x18\xD4\x90a\x18\xBFV[\x90V[a\x18\xE1`da\x18\xCBV[\x90V[a\x18\xED\x90a\x07\x0FV[\x90V[\x90PQ\x90a\x18\xFD\x82a\x01\xC2V[V[\x90` \x82\x82\x03\x12a\x19\x18Wa\x19\x15\x91_\x01a\x18\xF0V[\x90V[a\x01lV[` \x01\x90V[\x90V[a\x192a\x197\x91a\x03\xBAV[a\x19#V[\x90RV[``\x1B\x90V[a\x19J\x90a\x19;V[\x90V[a\x19V\x90a\x19AV[\x90V[a\x19ea\x19j\x91a\x06\x1FV[a\x19MV[\x90RV[\x90V[a\x19}a\x19\x82\x91a\x01\xBFV[a\x19nV[\x90RV[`\xC0\x1B\x90V[a\x19\x95\x90a\x19\x86V[\x90V[a\x19\xA4a\x19\xA9\x91a\x04\xEBV[a\x19\x8CV[\x90RV[a\x19\xFD\x94a\x19\xED` `\x08\x96a\x19\xE5`\x14\x83\x9C\x9B\x98a\x19\xDD\x85\x89a\x19\xD5\x82\x9Ba\x19\xF5\x9Da\x19&V[\x01\x80\x92a\x19YV[\x01\x80\x92a\x19qV[\x01\x80\x92a\x19qV[\x01\x80\x92a\x19\x98V[\x01\x80\x92a\x19&V[\x01\x90V[\x90a\x1A\r_\x19\x91a\taV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A \x90a\x03\xBAV[\x90V[a\x1A,\x90a\x0F\xBAV[\x90V[\x90a\x1ADa\x1A?a\x1AK\x92a\x1A\x17V[a\x1A#V[\x82Ta\x1A\x01V[\x90UV[\x90V[a\x1Afa\x1Aaa\x1Ak\x92a\x1AOV[a\x05RV[a\x04\xEBV[\x90V[a\x1Aza\x1A\x80\x91a\x04\xEBV[\x91a\x04\xEBV[\x01\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x1A\x93WV[a\x15\xCFV[\x90a\x1A\xABg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91a\taV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1A\xC9a\x1A\xC4a\x1A\xCE\x92a\x04\xEBV[a\x05RV[a\x04\xEBV[\x90V[\x90V[\x90a\x1A\xE9a\x1A\xE4a\x1A\xF0\x92a\x1A\xB5V[a\x1A\xD1V[\x82Ta\x1A\x98V[\x90UV[a\x1B\xC5a\x1A\xFFa\x18\x9BV[a\x1B\xA0Ca\x1B\x13a\x1B\x0Ea\x18\xD7V[a\x18\xE4V[;a\x1B&a\x1B _a\x0C\xDEV[\x91a\x01\xBFV[\x11a\x1C\nW[a\x1B\x85a\x1B:_\x85\x01a\x0F\xD6V[a\x1Bv3\x93Ba\x1BL`\x01\x89\x01a\x11'V[\x90\x8Aa\x1B`a\x1BZ\x82a\x04JV[\x91a\x19\x1DV[ \x92a\x1Bja\x01bV[\x97\x88\x96` \x88\x01a\x19\xADV[` \x82\x01\x81\x03\x82R\x03\x82a\x10\x98V[a\x1B\x97a\x1B\x91\x82a\x04JV[\x91a\x19\x1DV[ _\x83\x01a\x1A/V[a\x1B\xBF`\x01a\x1B\xAE\x81a\x1ARV[\x92\x01\x91a\x1B\xBA\x83a\x11'V[a\x1AnV[\x90a\x1A\xD4V[3a\x1C\x05a\x1B\xF3\x7F\x836;x\xBD\xFB\xB2>*a\xDBz\xCC\xC3\xC0\x1F\xDA)\xC5\xC5\xEC\x81\x88\x80\x03\xCB\x96)\x12a\x8A\x7F\x92a\x0B\x81V[\x92a\x1B\xFCa\x01bV[\x91\x82\x91\x82a\x04\x9DV[\x03\x90\xA2V[a\x1C5` a\x1C\x1Fa\x1C\x1Aa\x18\xD7V[a\x18\xE4V[c\xA3\xB1\xB3\x1D\x90a\x1C-a\x01bV[\x93\x84\x92a\x14@V[\x82R\x81\x80a\x1CE`\x04\x82\x01a\x02*V[\x03\x91Z\xFA\x80\x91_\x92a\x1CtW[P\x15_\x14a\x1CmWP`\x01a\x1ChW[[a\x1B,V[a\x1CbV[\x90Pa\x1CcV[a\x1C\x96\x91\x92P` =\x81\x11a\x1C\x9DW[a\x1C\x8E\x81\x83a\x10\x98V[\x81\x01\x90a\x18\xFFV[\x90_a\x1CRV[P=a\x1C\x84V[a\x1C\xACa\x16\xE3V[a\x1C\xC5a\x1C\xBFa\x1C\xBAa\x1DtV[a\x06\x1FV[\x91a\x06\x1FV[\x03a\x1C\xCCWV[a\x1C\xEEa\x1C\xD7a\x1DtV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\t\x14V[\x03\x90\xFD[\x90V[\x90a\x1D\na\x1D\x05a\x1D\x11\x92a\x0B\x81V[a\x1C\xF2V[\x82Ta\x13\tV[\x90UV[a\x1D\x1E_a\x16\xD6V[a\x1D(\x82_a\x1C\xF5V[\x90a\x1D\\a\x1DV\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x0B\x81V[\x91a\x0B\x81V[\x91a\x1Dea\x01bV[\x80a\x1Do\x81a\x02*V[\x03\x90\xA3V[a\x1D|a\x16\xB3V[P3\x90V",
    );
    /**Custom error with signature `AlreadyInitialized()` and selector `0x0dc149f0`.
```solidity
error AlreadyInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AlreadyInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AlreadyInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: AlreadyInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AlreadyInitialized()";
            const SELECTOR: [u8; 4] = [13u8, 193u8, 73u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidModuleAddress()` and selector `0x5cfe78fe`.
```solidity
error InvalidModuleAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidModuleAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidModuleAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidModuleAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidModuleAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidModuleAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidModuleAddress()";
            const SELECTOR: [u8; 4] = [92u8, 254u8, 120u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `TransactionOrSenderNotAllowed()` and selector `0xdc741458`.
```solidity
error TransactionOrSenderNotAllowed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransactionOrSenderNotAllowed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransactionOrSenderNotAllowed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TransactionOrSenderNotAllowed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TransactionOrSenderNotAllowed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransactionOrSenderNotAllowed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransactionOrSenderNotAllowed()";
            const SELECTOR: [u8; 4] = [220u8, 116u8, 20u8, 88u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequirementModuleUpdated(address)` and selector `0x253580f806741c11b3d4aa60d9cacc5bef0cebb35748767fe23f11916e2f04b9`.
```solidity
event RequirementModuleUpdated(address indexed newModule);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequirementModuleUpdated {
        #[allow(missing_docs)]
        pub newModule: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequirementModuleUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequirementModuleUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { newModule: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.newModule.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newModule,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequirementModuleUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequirementModuleUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &RequirementModuleUpdated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes)` and selector `0x83363b78bdfbb23e2a61db7accc3c01fda29c5c5ec81888003cb962912618a7f`.
```solidity
event TransactionProcessed(address indexed sender, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_0 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_0 {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_0 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_0> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_0) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransactionProcessed(address,bytes,uint256,uint256)` and selector `0x4b5aa8d082e691cb9972a7958fa4153f663f215fe697a3e08bd2729ed78f02f2`.
```solidity
event TransactionProcessed(address indexed sender, bytes data, uint256 originalPriority, uint256 timestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransactionProcessed_1 {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransactionProcessed_1 {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransactionProcessed(address,bytes,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    sender: topics.1,
                    data: data.0,
                    originalPriority: data.1,
                    timestamp: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.sender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransactionProcessed_1 {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransactionProcessed_1> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransactionProcessed_1) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 _appchainId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._appchainId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _appchainId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._appchainId),
                )
            }
        }
    };
    /**Function with signature `PRIORITY_DECAY_RATE()` and selector `0x3d44ae8b`.
```solidity
function PRIORITY_DECAY_RATE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATECall {}
    ///Container type for the return parameters of the [`PRIORITY_DECAY_RATE()`](PRIORITY_DECAY_RATECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PRIORITY_DECAY_RATEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<PRIORITY_DECAY_RATEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: PRIORITY_DECAY_RATEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for PRIORITY_DECAY_RATEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for PRIORITY_DECAY_RATECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = PRIORITY_DECAY_RATEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PRIORITY_DECAY_RATE()";
            const SELECTOR: [u8; 4] = [61u8, 68u8, 174u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `TX_DATA_STORAGE_LOCATION()` and selector `0x9d91597b`.
```solidity
function TX_DATA_STORAGE_LOCATION() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONCall {}
    ///Container type for the return parameters of the [`TX_DATA_STORAGE_LOCATION()`](TX_DATA_STORAGE_LOCATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TX_DATA_STORAGE_LOCATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TX_DATA_STORAGE_LOCATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: TX_DATA_STORAGE_LOCATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for TX_DATA_STORAGE_LOCATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TX_DATA_STORAGE_LOCATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = TX_DATA_STORAGE_LOCATIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TX_DATA_STORAGE_LOCATION()";
            const SELECTOR: [u8; 4] = [157u8, 145u8, 89u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appchainId()` and selector `0xd8781342`.
```solidity
function appchainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdCall {}
    ///Container type for the return parameters of the [`appchainId()`](appchainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appchainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appchainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appchainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appchainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appchainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appchainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appchainId()";
            const SELECTOR: [u8; 4] = [216u8, 120u8, 19u8, 66u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `calculateEffectivePriority(uint256,uint256,uint256)` and selector `0x83d3c115`.
```solidity
function calculateEffectivePriority(uint256 originalPriority, uint256 submittedTimestamp, uint256 currentTimestamp) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityCall {
        #[allow(missing_docs)]
        pub originalPriority: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`calculateEffectivePriority(uint256,uint256,uint256)`](calculateEffectivePriorityCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct calculateEffectivePriorityReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityCall) -> Self {
                    (
                        value.originalPriority,
                        value.submittedTimestamp,
                        value.currentTimestamp,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        originalPriority: tuple.0,
                        submittedTimestamp: tuple.1,
                        currentTimestamp: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<calculateEffectivePriorityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: calculateEffectivePriorityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for calculateEffectivePriorityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for calculateEffectivePriorityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = calculateEffectivePriorityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "calculateEffectivePriority(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [131u8, 211u8, 193u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.originalPriority),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.submittedTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTimestamp),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(address,address)` and selector `0x485cc955`.
```solidity
function initialize(address admin, address _permissionRequirementModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _permissionRequirementModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`initialize(address,address)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.admin, value._permissionRequirementModule)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        _permissionRequirementModule: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(address,address)";
            const SELECTOR: [u8; 4] = [72u8, 92u8, 201u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._permissionRequirementModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address proposer, address originator, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub originator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.proposer, value.originator, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer: tuple.0,
                        originator: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isAllowedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.originator,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `permissionRequirementModule()` and selector `0x5b3cd6e2`.
```solidity
function permissionRequirementModule() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleCall {}
    ///Container type for the return parameters of the [`permissionRequirementModule()`](permissionRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permissionRequirementModuleReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permissionRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: permissionRequirementModuleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for permissionRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permissionRequirementModuleCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permissionRequirementModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permissionRequirementModule()";
            const SELECTOR: [u8; 4] = [91u8, 60u8, 214u8, 226u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prependZeroByte(bytes)` and selector `0x366cbab7`.
```solidity
function prependZeroByte(bytes memory _data) external pure returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteCall {
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`prependZeroByte(bytes)`](prependZeroByteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prependZeroByteReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteCall> for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteCall) -> Self {
                    (value._data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prependZeroByteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prependZeroByteReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: prependZeroByteReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for prependZeroByteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prependZeroByteCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prependZeroByteReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prependZeroByte(bytes)";
            const SELECTOR: [u8; 4] = [54u8, 108u8, 186u8, 183u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes,uint256)` and selector `0x1c0b6367`.
```solidity
function processTransaction(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes,uint256)`](processTransaction_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 11u8, 99u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransaction_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransaction_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransaction_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransaction_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransaction_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransaction_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransaction_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes,uint256)` and selector `0x050ec138`.
```solidity
function processTransactionUncompressed(bytes memory data, uint256 priority) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub priority: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes,uint256)`](processTransactionUncompressed_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Call) -> Self {
                    (value.data, value.priority)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priority: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes,uint256)";
            const SELECTOR: [u8; 4] = [5u8, 14u8, 193u8, 56u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.priority),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionUncompressed(bytes)` and selector `0x804e5123`.
```solidity
function processTransactionUncompressed(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionUncompressed(bytes)`](processTransactionUncompressed_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionUncompressed_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionUncompressed_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionUncompressed_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionUncompressed_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionUncompressed_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionUncompressed_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionUncompressed(bytes)";
            const SELECTOR: [u8; 4] = [128u8, 78u8, 81u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[],uint256[])` and selector `0x11992f8c`.
```solidity
function processTransactionsBulk(bytes[] memory data, uint256[] memory priorities) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        #[allow(missing_docs)]
        pub priorities: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[],uint256[])`](processTransactionsBulk_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Call) -> Self {
                    (value.data, value.priorities)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        priorities: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[],uint256[])";
            const SELECTOR: [u8; 4] = [17u8, 153u8, 47u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.priorities),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionsBulk(bytes[])` and selector `0xcdafb978`.
```solidity
function processTransactionsBulk(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Call {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processTransactionsBulk(bytes[])`](processTransactionsBulk_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionsBulk_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Call) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionsBulk_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionsBulk_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionsBulk_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionsBulk_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionsBulk_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionsBulk(bytes[])";
            const SELECTOR: [u8; 4] = [205u8, 175u8, 185u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txAcc()` and selector `0x32704864`.
```solidity
function txAcc() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccCall {}
    ///Container type for the return parameters of the [`txAcc()`](txAccCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txAccReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccCall> for UnderlyingRustTuple<'_> {
                fn from(value: txAccCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txAccReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txAccReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txAccReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txAccCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txAccReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txAcc()";
            const SELECTOR: [u8; 4] = [50u8, 112u8, 72u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `txCount()` and selector `0x3c540687`.
```solidity
function txCount() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountCall {}
    ///Container type for the return parameters of the [`txCount()`](txCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct txCountReturn {
        #[allow(missing_docs)]
        pub _0: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: txCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<txCountReturn> for UnderlyingRustTuple<'_> {
                fn from(value: txCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for txCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for txCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = txCountReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "txCount()";
            const SELECTOR: [u8; 4] = [60u8, 84u8, 6u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateRequirementModule(address)` and selector `0xd4f0eb4d`.
```solidity
function updateRequirementModule(address _newModule) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleCall {
        #[allow(missing_docs)]
        pub _newModule: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateRequirementModule(address)`](updateRequirementModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateRequirementModuleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleCall) -> Self {
                    (value._newModule,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _newModule: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateRequirementModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateRequirementModuleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateRequirementModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateRequirementModuleCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateRequirementModuleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateRequirementModule(address)";
            const SELECTOR: [u8; 4] = [212u8, 240u8, 235u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newModule,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) function calls.
    pub enum SyndicateSequencingChainWithDecayingPriorityCalls {
        #[allow(missing_docs)]
        PRIORITY_DECAY_RATE(PRIORITY_DECAY_RATECall),
        #[allow(missing_docs)]
        TX_DATA_STORAGE_LOCATION(TX_DATA_STORAGE_LOCATIONCall),
        #[allow(missing_docs)]
        appchainId(appchainIdCall),
        #[allow(missing_docs)]
        calculateEffectivePriority(calculateEffectivePriorityCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        permissionRequirementModule(permissionRequirementModuleCall),
        #[allow(missing_docs)]
        prependZeroByte(prependZeroByteCall),
        #[allow(missing_docs)]
        processTransaction_0(processTransaction_0Call),
        #[allow(missing_docs)]
        processTransaction_1(processTransaction_1Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_0(processTransactionUncompressed_0Call),
        #[allow(missing_docs)]
        processTransactionUncompressed_1(processTransactionUncompressed_1Call),
        #[allow(missing_docs)]
        processTransactionsBulk_0(processTransactionsBulk_0Call),
        #[allow(missing_docs)]
        processTransactionsBulk_1(processTransactionsBulk_1Call),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        txAcc(txAccCall),
        #[allow(missing_docs)]
        txCount(txCountCall),
        #[allow(missing_docs)]
        updateRequirementModule(updateRequirementModuleCall),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 14u8, 193u8, 56u8],
            [17u8, 153u8, 47u8, 140u8],
            [28u8, 11u8, 99u8, 103u8],
            [50u8, 112u8, 72u8, 100u8],
            [54u8, 108u8, 186u8, 183u8],
            [60u8, 84u8, 6u8, 135u8],
            [61u8, 68u8, 174u8, 139u8],
            [70u8, 226u8, 204u8, 9u8],
            [72u8, 92u8, 201u8, 85u8],
            [91u8, 60u8, 214u8, 226u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [128u8, 78u8, 81u8, 35u8],
            [131u8, 211u8, 193u8, 21u8],
            [141u8, 165u8, 203u8, 91u8],
            [157u8, 145u8, 89u8, 123u8],
            [205u8, 175u8, 185u8, 120u8],
            [212u8, 240u8, 235u8, 77u8],
            [216u8, 120u8, 19u8, 66u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityCalls {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 20usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::PRIORITY_DECAY_RATE(_) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TX_DATA_STORAGE_LOCATION(_) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appchainId(_) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::calculateEffectivePriority(_) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::permissionRequirementModule(_) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prependZeroByte(_) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_0(_) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction_1(_) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_0(_) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionUncompressed_1(_) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_0(_) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionsBulk_1(_) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::txAcc(_) => <txAccCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::txCount(_) => <txCountCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::updateRequirementModule(_) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityCalls,
            >] = &[
                {
                    fn processTransactionUncompressed_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_0,
                            )
                    }
                    processTransactionUncompressed_0
                },
                {
                    fn processTransactionsBulk_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_0,
                            )
                    }
                    processTransactionsBulk_0
                },
                {
                    fn processTransaction_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_0,
                            )
                    }
                    processTransaction_0
                },
                {
                    fn txAcc(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <txAccCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::txAcc,
                            )
                    }
                    txAcc
                },
                {
                    fn prependZeroByte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <prependZeroByteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::prependZeroByte,
                            )
                    }
                    prependZeroByte
                },
                {
                    fn txCount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <txCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::txCount,
                            )
                    }
                    txCount
                },
                {
                    fn PRIORITY_DECAY_RATE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::PRIORITY_DECAY_RATE,
                            )
                    }
                    PRIORITY_DECAY_RATE
                },
                {
                    fn processTransaction_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransaction_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransaction_1,
                            )
                    }
                    processTransaction_1
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::initialize,
                            )
                    }
                    initialize
                },
                {
                    fn permissionRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::permissionRequirementModule,
                            )
                    }
                    permissionRequirementModule
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::isAllowed,
                            )
                    }
                    isAllowed
                },
                {
                    fn processTransactionUncompressed_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionUncompressed_1,
                            )
                    }
                    processTransactionUncompressed_1
                },
                {
                    fn calculateEffectivePriority(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::calculateEffectivePriority,
                            )
                    }
                    calculateEffectivePriority
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::owner,
                            )
                    }
                    owner
                },
                {
                    fn TX_DATA_STORAGE_LOCATION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::TX_DATA_STORAGE_LOCATION,
                            )
                    }
                    TX_DATA_STORAGE_LOCATION
                },
                {
                    fn processTransactionsBulk_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::processTransactionsBulk_1,
                            )
                    }
                    processTransactionsBulk_1
                },
                {
                    fn updateRequirementModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::updateRequirementModule,
                            )
                    }
                    updateRequirementModule
                },
                {
                    fn appchainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <appchainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::appchainId,
                            )
                    }
                    appchainId
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::PRIORITY_DECAY_RATE(inner) => {
                    <PRIORITY_DECAY_RATECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TX_DATA_STORAGE_LOCATION(inner) => {
                    <TX_DATA_STORAGE_LOCATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appchainId(inner) => {
                    <appchainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::calculateEffectivePriority(inner) => {
                    <calculateEffectivePriorityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::permissionRequirementModule(inner) => {
                    <permissionRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prependZeroByte(inner) => {
                    <prependZeroByteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_0(inner) => {
                    <processTransaction_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction_1(inner) => {
                    <processTransaction_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_0(inner) => {
                    <processTransactionUncompressed_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionUncompressed_1(inner) => {
                    <processTransactionUncompressed_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_0(inner) => {
                    <processTransactionsBulk_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionsBulk_1(inner) => {
                    <processTransactionsBulk_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::txAcc(inner) => {
                    <txAccCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::txCount(inner) => {
                    <txCountCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::updateRequirementModule(inner) => {
                    <updateRequirementModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) custom errors.
    pub enum SyndicateSequencingChainWithDecayingPriorityErrors {
        #[allow(missing_docs)]
        AlreadyInitialized(AlreadyInitialized),
        #[allow(missing_docs)]
        InvalidModuleAddress(InvalidModuleAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        TransactionOrSenderNotAllowed(TransactionOrSenderNotAllowed),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 193u8, 73u8, 240u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [92u8, 254u8, 120u8, 254u8],
            [220u8, 116u8, 20u8, 88u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface
    for SyndicateSequencingChainWithDecayingPriorityErrors {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AlreadyInitialized(_) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidModuleAddress(_) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransactionOrSenderNotAllowed(_) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                SyndicateSequencingChainWithDecayingPriorityErrors,
            >] = &[
                {
                    fn AlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <AlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::AlreadyInitialized,
                            )
                    }
                    AlreadyInitialized
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn InvalidModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <InvalidModuleAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::InvalidModuleAddress,
                            )
                    }
                    InvalidModuleAddress
                },
                {
                    fn TransactionOrSenderNotAllowed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        SyndicateSequencingChainWithDecayingPriorityErrors,
                    > {
                        <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateSequencingChainWithDecayingPriorityErrors::TransactionOrSenderNotAllowed,
                            )
                    }
                    TransactionOrSenderNotAllowed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AlreadyInitialized(inner) => {
                    <AlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidModuleAddress(inner) => {
                    <InvalidModuleAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransactionOrSenderNotAllowed(inner) => {
                    <TransactionOrSenderNotAllowed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateSequencingChainWithDecayingPriority`](self) events.
    pub enum SyndicateSequencingChainWithDecayingPriorityEvents {
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        RequirementModuleUpdated(RequirementModuleUpdated),
        #[allow(missing_docs)]
        TransactionProcessed_0(TransactionProcessed_0),
        #[allow(missing_docs)]
        TransactionProcessed_1(TransactionProcessed_1),
    }
    #[automatically_derived]
    impl SyndicateSequencingChainWithDecayingPriorityEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                37u8,
                53u8,
                128u8,
                248u8,
                6u8,
                116u8,
                28u8,
                17u8,
                179u8,
                212u8,
                170u8,
                96u8,
                217u8,
                202u8,
                204u8,
                91u8,
                239u8,
                12u8,
                235u8,
                179u8,
                87u8,
                72u8,
                118u8,
                127u8,
                226u8,
                63u8,
                17u8,
                145u8,
                110u8,
                47u8,
                4u8,
                185u8,
            ],
            [
                75u8,
                90u8,
                168u8,
                208u8,
                130u8,
                230u8,
                145u8,
                203u8,
                153u8,
                114u8,
                167u8,
                149u8,
                143u8,
                164u8,
                21u8,
                63u8,
                102u8,
                63u8,
                33u8,
                95u8,
                230u8,
                151u8,
                163u8,
                224u8,
                139u8,
                210u8,
                114u8,
                158u8,
                215u8,
                143u8,
                2u8,
                242u8,
            ],
            [
                131u8,
                54u8,
                59u8,
                120u8,
                189u8,
                251u8,
                178u8,
                62u8,
                42u8,
                97u8,
                219u8,
                122u8,
                204u8,
                195u8,
                192u8,
                31u8,
                218u8,
                41u8,
                197u8,
                197u8,
                236u8,
                129u8,
                136u8,
                128u8,
                3u8,
                203u8,
                150u8,
                41u8,
                18u8,
                97u8,
                138u8,
                127u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        const NAME: &'static str = "SyndicateSequencingChainWithDecayingPriorityEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequirementModuleUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequirementModuleUpdated)
                }
                Some(
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_0 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_0)
                }
                Some(
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TransactionProcessed_1 as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransactionProcessed_1)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for SyndicateSequencingChainWithDecayingPriorityEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequirementModuleUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_0(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransactionProcessed_1(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        >,
    > {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy(provider, _appchainId)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _appchainId: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateSequencingChainWithDecayingPriorityInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _appchainId)
    }
    /**A [`SyndicateSequencingChainWithDecayingPriority`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateSequencingChainWithDecayingPriority`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateSequencingChainWithDecayingPriorityInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateSequencingChainWithDecayingPriorityInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateSequencingChainWithDecayingPriority`](self) contract instance.

See the [wrapper's documentation](`SyndicateSequencingChainWithDecayingPriorityInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<
            SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider, _appchainId);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _appchainId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _appchainId },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
            SyndicateSequencingChainWithDecayingPriorityInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`PRIORITY_DECAY_RATE`] function.
        pub fn PRIORITY_DECAY_RATE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, PRIORITY_DECAY_RATECall, N> {
            self.call_builder(&PRIORITY_DECAY_RATECall {})
        }
        ///Creates a new call builder for the [`TX_DATA_STORAGE_LOCATION`] function.
        pub fn TX_DATA_STORAGE_LOCATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, TX_DATA_STORAGE_LOCATIONCall, N> {
            self.call_builder(&TX_DATA_STORAGE_LOCATIONCall {})
        }
        ///Creates a new call builder for the [`appchainId`] function.
        pub fn appchainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appchainIdCall, N> {
            self.call_builder(&appchainIdCall {})
        }
        ///Creates a new call builder for the [`calculateEffectivePriority`] function.
        pub fn calculateEffectivePriority(
            &self,
            originalPriority: alloy::sol_types::private::primitives::aliases::U256,
            submittedTimestamp: alloy::sol_types::private::primitives::aliases::U256,
            currentTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, calculateEffectivePriorityCall, N> {
            self.call_builder(
                &calculateEffectivePriorityCall {
                    originalPriority,
                    submittedTimestamp,
                    currentTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            admin: alloy::sol_types::private::Address,
            _permissionRequirementModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    admin,
                    _permissionRequirementModule,
                },
            )
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            proposer: alloy::sol_types::private::Address,
            originator: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    proposer,
                    originator,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`permissionRequirementModule`] function.
        pub fn permissionRequirementModule(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, permissionRequirementModuleCall, N> {
            self.call_builder(&permissionRequirementModuleCall {})
        }
        ///Creates a new call builder for the [`prependZeroByte`] function.
        pub fn prependZeroByte(
            &self,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, prependZeroByteCall, N> {
            self.call_builder(&prependZeroByteCall { _data })
        }
        ///Creates a new call builder for the [`processTransaction_0`] function.
        pub fn processTransaction_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_0Call, N> {
            self.call_builder(
                &processTransaction_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction_1`] function.
        pub fn processTransaction_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransaction_1Call, N> {
            self.call_builder(&processTransaction_1Call { data })
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_0`] function.
        pub fn processTransactionUncompressed_0(
            &self,
            data: alloy::sol_types::private::Bytes,
            priority: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_0Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_0Call {
                    data,
                    priority,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionUncompressed_1`] function.
        pub fn processTransactionUncompressed_1(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            processTransactionUncompressed_1Call,
            N,
        > {
            self.call_builder(
                &processTransactionUncompressed_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_0`] function.
        pub fn processTransactionsBulk_0(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            priorities: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_0Call, N> {
            self.call_builder(
                &processTransactionsBulk_0Call {
                    data,
                    priorities,
                },
            )
        }
        ///Creates a new call builder for the [`processTransactionsBulk_1`] function.
        pub fn processTransactionsBulk_1(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionsBulk_1Call, N> {
            self.call_builder(
                &processTransactionsBulk_1Call {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`txAcc`] function.
        pub fn txAcc(&self) -> alloy_contract::SolCallBuilder<T, &P, txAccCall, N> {
            self.call_builder(&txAccCall {})
        }
        ///Creates a new call builder for the [`txCount`] function.
        pub fn txCount(&self) -> alloy_contract::SolCallBuilder<T, &P, txCountCall, N> {
            self.call_builder(&txCountCall {})
        }
        ///Creates a new call builder for the [`updateRequirementModule`] function.
        pub fn updateRequirementModule(
            &self,
            _newModule: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateRequirementModuleCall, N> {
            self.call_builder(
                &updateRequirementModuleCall {
                    _newModule,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateSequencingChainWithDecayingPriorityInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`RequirementModuleUpdated`] event.
        pub fn RequirementModuleUpdated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequirementModuleUpdated, N> {
            self.event_filter::<RequirementModuleUpdated>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_0`] event.
        pub fn TransactionProcessed_0_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_0, N> {
            self.event_filter::<TransactionProcessed_0>()
        }
        ///Creates a new event filter for the [`TransactionProcessed_1`] event.
        pub fn TransactionProcessed_1_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransactionProcessed_1, N> {
            self.event_filter::<TransactionProcessed_1>()
        }
    }
}
