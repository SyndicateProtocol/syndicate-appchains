/**

Generated by the following Solidity interface...
```solidity
interface MockOptimismBridge {
    struct DepositCall {
        address l1Token;
        address l2Token;
        address to;
        uint256 amount;
        uint32 l2Gas;
        bytes data;
    }

    function depositCalls(uint256) external view returns (address l1Token, address l2Token, address to, uint256 amount, uint32 l2Gas, bytes memory data);
    function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes memory _data) external;
    function getDepositCallCount() external view returns (uint256);
    function getLastDepositCall() external view returns (DepositCall memory);
    function setShouldRevert(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "depositCalls",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "l1Token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "l2Token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "l2Gas",
        "type": "uint32",
        "internalType": "uint32"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "depositERC20To",
    "inputs": [
      {
        "name": "_l1Token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_l2Token",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_amount",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_l2Gas",
        "type": "uint32",
        "internalType": "uint32"
      },
      {
        "name": "_data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getDepositCallCount",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getLastDepositCall",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct MockOptimismBridge.DepositCall",
        "components": [
          {
            "name": "l1Token",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "l2Token",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "to",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "amount",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "l2Gas",
            "type": "uint32",
            "internalType": "uint32"
          },
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setShouldRevert",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockOptimismBridge {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b6112d961002b82396112d990f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b61085c565b61001d5f3561007c565b8063371bed681461007757806353066069146100725780636813d7871461006d578063838b252014610068578063959b825a146100635763d3072d820361000e57610827565b61078a565b610408565b6102a5565b610221565b6100c4565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261009a57565b61008c565b90565b6100ab9061009f565b9052565b91906100c2905f602085019401906100a2565b565b346100f4576100d4366004610090565b6100f06100df610864565b6100e7610082565b918291826100af565b0390f35b610088565b60018060a01b031690565b61010d906100f9565b90565b61011990610104565b9052565b6101269061009f565b9052565b63ffffffff1690565b61013c9061012a565b9052565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61018161018a60209361018f9361017881610140565b93848093610144565b9586910161014d565b610158565b0190565b6102069160a060c08201926101ae5f8201515f850190610110565b6101c060208201516020850190610110565b6101d260408201516040850190610110565b6101e46060820151606085019061011d565b6101f660808201516080850190610133565b01519060a0818403910152610162565b90565b61021e9160208201915f818403910152610193565b90565b3461025157610231366004610090565b61024d61023c610ae4565b610244610082565b91829182610209565b0390f35b610088565b5f80fd5b151590565b6102688161025a565b0361026f57565b5f80fd5b905035906102808261025f565b565b9060208282031261029b57610298915f01610273565b90565b61008c565b5f0190565b346102d3576102bd6102b8366004610282565b610b8d565b6102c5610082565b806102cf816102a0565b0390f35b610088565b6102e181610104565b036102e857565b5f80fd5b905035906102f9826102d8565b565b6103048161009f565b0361030b57565b5f80fd5b9050359061031c826102fb565b565b6103278161012a565b0361032e57565b5f80fd5b9050359061033f8261031e565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103875781359167ffffffffffffffff831161038257602001926001830284011161037d57565b610349565b610345565b610341565b9160c083830312610403576103a3825f85016102ec565b926103b183602083016102ec565b926103bf81604084016102ec565b926103cd826060850161030f565b926103db8360808301610332565b9260a082013567ffffffffffffffff81116103fe576103fa920161034d565b9091565b610256565b61008c565b3461043d5761042761041b36600461038c565b95949094939193611194565b61042f610082565b80610439816102a0565b0390f35b610088565b9060208282031261045b57610458915f0161030f565b90565b61008c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61048a81610474565b8210156104a45761049c600691610478565b910201905f90565b610460565b5f1c90565b60018060a01b031690565b6104c56104ca916104a9565b6104ae565b90565b6104d790546104b9565b90565b90565b6104e96104ee916104a9565b6104da565b90565b6104fb90546104dd565b90565b63ffffffff1690565b610513610518916104a9565b6104fe565b90565b6105259054610507565b90565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561055c575b602083101461055757565b610528565b91607f169161054c565b5f5260205f2090565b905f92918054906105896105828361053c565b8094610144565b916001811690815f146105e057506001146105a4575b505050565b6105b19192939450610566565b915f925b8184106105c857505001905f808061059f565b600181602092959395548486015201910192906105b5565b92949550505060ff19168252151560200201905f808061059f565b906106059161056f565b90565b634e487b7160e01b5f52604160045260245ffd5b9061062690610158565b810190811067ffffffffffffffff82111761064057604052565b610608565b9061066561065e92610655610082565b938480926105fb565b038361061c565b565b5f9061067282610474565b8110156106d25761068291610481565b509061068f5f83016104cd565b9161069c600182016104cd565b916106a9600283016104cd565b916106b6600382016104f1565b916106cf60056106c86004850161051b565b9301610645565b90565b5f80fd5b6106df90610104565b9052565b6106ec9061012a565b9052565b60209181520190565b6107186107216020936107269361070f81610140565b938480936106f0565b9586910161014d565b610158565b0190565b9261078796946107666107709261075c61077a9699959961075260c08a019b5f8b01906106d6565b60208901906106d6565b60408701906106d6565b60608501906100a2565b60808301906106e3565b60a08184039101526106f9565b90565b346107c1576107bd6107a56107a0366004610442565b610667565b926107b4969496929192610082565b9687968761072a565b0390f35b610088565b1c90565b60ff1690565b6107e09060086107e593026107c6565b6107ca565b90565b906107f391546107d0565b90565b61080260015f906107e8565b90565b61080e9061025a565b9052565b9190610825905f60208501940190610805565b565b3461085757610837366004610090565b6108536108426107f6565b61084a610082565b91829182610812565b0390f35b610088565b5f80fd5b5f90565b61086c610860565b506108765f610474565b90565b9061088c610885610082565b928361061c565b565b61089860c0610879565b90565b5f90565b5f90565b5f90565b606090565b6108b461088e565b9060208080808080876108c561089b565b8152016108d061089b565b8152016108db61089b565b8152016108e661089f565b8152016108f16108a3565b8152016108fc6108a7565b81525050565b61090a6108ac565b90565b90565b90565b61092761092261092c9261090d565b610910565b61009f565b90565b60209181520190565b5f7f4e6f206465706f73697473000000000000000000000000000000000000000000910152565b61096c600b60209261092f565b61097581610938565b0190565b61098e9060208101905f81830391015261095f565b90565b1561099857565b6109a0610082565b62461bcd60e51b8152806109b660048201610979565b0390fd5b90565b6109d16109cc6109d6926109ba565b610910565b61009f565b90565b634e487b7160e01b5f52601160045260245ffd5b6109fc610a029193929361009f565b9261009f565b8203918211610a0d57565b6109d9565b90610a1c90610104565b9052565b90610a2a9061009f565b9052565b90610a389061012a565b9052565b52565b90610ad6610acd6005610a5061088e565b94610a67610a5f5f83016104cd565b5f8801610a12565b610a7f610a76600183016104cd565b60208801610a12565b610a97610a8e600283016104cd565b60408801610a12565b610aaf610aa6600383016104f1565b60608801610a20565b610ac7610abe6004830161051b565b60808801610a2e565b01610645565b60a08401610a3c565b565b610ae190610a3f565b90565b610aec610902565b50610b11610af95f610474565b610b0b610b055f610913565b9161009f565b11610991565b610b40610b3a5f610b34610b245f610474565b610b2e60016109bd565b906109ed565b90610481565b50610ad8565b90565b5f1b90565b90610b5460ff91610b43565b9181191691161790565b610b679061025a565b90565b90565b90610b82610b7d610b8992610b5e565b610b6a565b8254610b48565b9055565b610b98906001610b6d565b565b610ba6610bab916104a9565b6107ca565b90565b610bb89054610b9a565b90565b5f7f4f7074696d69736d20627269646765206661696c656400000000000000000000910152565b610bef601660209261092f565b610bf881610bbb565b0190565b610c119060208101905f818303910152610be2565b90565b610c28610c23610c2d926100f9565b610910565b6100f9565b90565b610c3990610c14565b90565b610c4590610c30565b90565b610c5190610c14565b90565b610c5d90610c48565b90565b610c6990610c48565b90565b60e01b90565b90505190610c7f8261025f565b565b90602082820312610c9a57610c97915f01610c72565b90565b61008c565b604090610cc8610ccf9496959396610cbe60608401985f8501906106d6565b60208301906106d6565b01906100a2565b565b610cd9610082565b3d5f823e3d90fd5b90565b610cee60c0610879565b90565b5f80fd5b67ffffffffffffffff8111610d1357610d0f602091610158565b0190565b610608565b90825f939282370152565b90929192610d38610d3382610cf5565b610879565b93818552602085019082840111610d5457610d5292610d18565b565b610cf1565b610d64913691610d23565b90565b5f5260205f2090565b5490565b610d7d81610d70565b821015610d9757610d8f600691610d67565b910201905f90565b610460565b634e487b7160e01b5f525f60045260245ffd5b610db99051610104565b90565b90610dcd60018060a01b0391610b43565b9181191691161790565b610de090610c48565b90565b90565b90610dfb610df6610e0292610dd7565b610de3565b8254610dbc565b9055565b610e10905161009f565b90565b90610e1f5f1991610b43565b9181191691161790565b610e3d610e38610e429261009f565b610910565b61009f565b90565b90565b90610e5d610e58610e6492610e29565b610e45565b8254610e13565b9055565b610e72905161012a565b90565b90610e8463ffffffff91610b43565b9181191691161790565b610ea2610e9d610ea79261012a565b610910565b61012a565b90565b90565b90610ec2610ebd610ec992610e8e565b610eaa565b8254610e75565b9055565b5190565b601f602091010490565b1b90565b91906008610efa910291610ef45f1984610edb565b92610edb565b9181191691161790565b9190610f1a610f15610f2293610e29565b610e45565b908354610edf565b9055565b610f3891610f32610860565b91610f04565b565b5b818110610f46575050565b80610f535f600193610f26565b01610f3b565b9190601f8111610f69575b505050565b610f75610f9a93610566565b906020610f8184610ed1565b83019310610fa2575b610f9390610ed1565b0190610f3a565b5f8080610f64565b9150610f9381929050610f8a565b90610fc0905f19906008026107c6565b191690565b81610fcf91610fb0565b906002021790565b90610fe181610140565b9067ffffffffffffffff82116110a15761100582610fff855461053c565b85610f59565b602090601f831160011461103957918091611028935f9261102d575b5050610fc5565b90555b565b90915001515f80611021565b601f1983169161104885610566565b925f5b8181106110895750916002939185600196941061106f575b5050500201905561102b565b61107f910151601f841690610fb0565b90555f8080611063565b9193602060018192878701518155019501920161104b565b610608565b906110b091610fd7565b565b9061114160a06005611147946110d55f82016110cf5f8801610daf565b90610de6565b6110ee600182016110e860208801610daf565b90610de6565b6111076002820161110160408801610daf565b90610de6565b6111206003820161111a60608801610e06565b90610e48565b6111396004820161113360808801610e68565b90610ead565b019201610ecd565b906110a6565b565b919061115a57611158916110b2565b565b610d9c565b908154916801000000000000000083101561118f578261118791600161118d95018155610d74565b90611149565b565b610608565b9593909491926111a46001610bae565b6112b7576111b96111b488610c3c565b610c54565b60206323b872dd9133906111e95f6111d030610c60565b956111f4886111dd610082565b98899788968795610c6c565b855260048501610c9f565b03925af180156112b257611286575b505f61120e90610ce1565b969593909192949361121e610ce4565b965f88019061122c91610a12565b602087019061123a91610a12565b604086019061124891610a12565b606085019061125691610a20565b608084019061126491610a2e565b61126d91610d59565b60a082019061127b91610a3c565b6112849161115f565b565b6112a69060203d81116112ab575b61129e818361061c565b810190610c81565b611203565b503d611294565b610cd1565b6112bf610082565b62461bcd60e51b8152806112d560048201610bfc565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x12\xD9a\0+\x829a\x12\xD9\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08\\V[a\0\x1D_5a\0|V[\x80c7\x1B\xEDh\x14a\0wW\x80cS\x06`i\x14a\0rW\x80ch\x13\xD7\x87\x14a\0mW\x80c\x83\x8B% \x14a\0hW\x80c\x95\x9B\x82Z\x14a\0cWc\xD3\x07-\x82\x03a\0\x0EWa\x08'V[a\x07\x8AV[a\x04\x08V[a\x02\xA5V[a\x02!V[a\0\xC4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\x9AWV[a\0\x8CV[\x90V[a\0\xAB\x90a\0\x9FV[\x90RV[\x91\x90a\0\xC2\x90_` \x85\x01\x94\x01\x90a\0\xA2V[V[4a\0\xF4Wa\0\xD46`\x04a\0\x90V[a\0\xF0a\0\xDFa\x08dV[a\0\xE7a\0\x82V[\x91\x82\x91\x82a\0\xAFV[\x03\x90\xF3[a\0\x88V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\r\x90a\0\xF9V[\x90V[a\x01\x19\x90a\x01\x04V[\x90RV[a\x01&\x90a\0\x9FV[\x90RV[c\xFF\xFF\xFF\xFF\x16\x90V[a\x01<\x90a\x01*V[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01\x81a\x01\x8A` \x93a\x01\x8F\x93a\x01x\x81a\x01@V[\x93\x84\x80\x93a\x01DV[\x95\x86\x91\x01a\x01MV[a\x01XV[\x01\x90V[a\x02\x06\x91`\xA0`\xC0\x82\x01\x92a\x01\xAE_\x82\x01Q_\x85\x01\x90a\x01\x10V[a\x01\xC0` \x82\x01Q` \x85\x01\x90a\x01\x10V[a\x01\xD2`@\x82\x01Q`@\x85\x01\x90a\x01\x10V[a\x01\xE4``\x82\x01Q``\x85\x01\x90a\x01\x1DV[a\x01\xF6`\x80\x82\x01Q`\x80\x85\x01\x90a\x013V[\x01Q\x90`\xA0\x81\x84\x03\x91\x01Ra\x01bV[\x90V[a\x02\x1E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\x93V[\x90V[4a\x02QWa\x0216`\x04a\0\x90V[a\x02Ma\x02<a\n\xE4V[a\x02Da\0\x82V[\x91\x82\x91\x82a\x02\tV[\x03\x90\xF3[a\0\x88V[_\x80\xFD[\x15\x15\x90V[a\x02h\x81a\x02ZV[\x03a\x02oWV[_\x80\xFD[\x90P5\x90a\x02\x80\x82a\x02_V[V[\x90` \x82\x82\x03\x12a\x02\x9BWa\x02\x98\x91_\x01a\x02sV[\x90V[a\0\x8CV[_\x01\x90V[4a\x02\xD3Wa\x02\xBDa\x02\xB86`\x04a\x02\x82V[a\x0B\x8DV[a\x02\xC5a\0\x82V[\x80a\x02\xCF\x81a\x02\xA0V[\x03\x90\xF3[a\0\x88V[a\x02\xE1\x81a\x01\x04V[\x03a\x02\xE8WV[_\x80\xFD[\x90P5\x90a\x02\xF9\x82a\x02\xD8V[V[a\x03\x04\x81a\0\x9FV[\x03a\x03\x0BWV[_\x80\xFD[\x90P5\x90a\x03\x1C\x82a\x02\xFBV[V[a\x03'\x81a\x01*V[\x03a\x03.WV[_\x80\xFD[\x90P5\x90a\x03?\x82a\x03\x1EV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x87W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x82W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03}WV[a\x03IV[a\x03EV[a\x03AV[\x91`\xC0\x83\x83\x03\x12a\x04\x03Wa\x03\xA3\x82_\x85\x01a\x02\xECV[\x92a\x03\xB1\x83` \x83\x01a\x02\xECV[\x92a\x03\xBF\x81`@\x84\x01a\x02\xECV[\x92a\x03\xCD\x82``\x85\x01a\x03\x0FV[\x92a\x03\xDB\x83`\x80\x83\x01a\x032V[\x92`\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xFEWa\x03\xFA\x92\x01a\x03MV[\x90\x91V[a\x02VV[a\0\x8CV[4a\x04=Wa\x04'a\x04\x1B6`\x04a\x03\x8CV[\x95\x94\x90\x94\x93\x91\x93a\x11\x94V[a\x04/a\0\x82V[\x80a\x049\x81a\x02\xA0V[\x03\x90\xF3[a\0\x88V[\x90` \x82\x82\x03\x12a\x04[Wa\x04X\x91_\x01a\x03\x0FV[\x90V[a\0\x8CV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x04\x8A\x81a\x04tV[\x82\x10\x15a\x04\xA4Wa\x04\x9C`\x06\x91a\x04xV[\x91\x02\x01\x90_\x90V[a\x04`V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xC5a\x04\xCA\x91a\x04\xA9V[a\x04\xAEV[\x90V[a\x04\xD7\x90Ta\x04\xB9V[\x90V[\x90V[a\x04\xE9a\x04\xEE\x91a\x04\xA9V[a\x04\xDAV[\x90V[a\x04\xFB\x90Ta\x04\xDDV[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[a\x05\x13a\x05\x18\x91a\x04\xA9V[a\x04\xFEV[\x90V[a\x05%\x90Ta\x05\x07V[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x05\\W[` \x83\x10\x14a\x05WWV[a\x05(V[\x91`\x7F\x16\x91a\x05LV[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x05\x89a\x05\x82\x83a\x05<V[\x80\x94a\x01DV[\x91`\x01\x81\x16\x90\x81_\x14a\x05\xE0WP`\x01\x14a\x05\xA4W[PPPV[a\x05\xB1\x91\x92\x93\x94Pa\x05fV[\x91_\x92[\x81\x84\x10a\x05\xC8WPP\x01\x90_\x80\x80a\x05\x9FV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x05\xB5V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x05\x9FV[\x90a\x06\x05\x91a\x05oV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06&\x90a\x01XV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06@W`@RV[a\x06\x08V[\x90a\x06ea\x06^\x92a\x06Ua\0\x82V[\x93\x84\x80\x92a\x05\xFBV[\x03\x83a\x06\x1CV[V[_\x90a\x06r\x82a\x04tV[\x81\x10\x15a\x06\xD2Wa\x06\x82\x91a\x04\x81V[P\x90a\x06\x8F_\x83\x01a\x04\xCDV[\x91a\x06\x9C`\x01\x82\x01a\x04\xCDV[\x91a\x06\xA9`\x02\x83\x01a\x04\xCDV[\x91a\x06\xB6`\x03\x82\x01a\x04\xF1V[\x91a\x06\xCF`\x05a\x06\xC8`\x04\x85\x01a\x05\x1BV[\x93\x01a\x06EV[\x90V[_\x80\xFD[a\x06\xDF\x90a\x01\x04V[\x90RV[a\x06\xEC\x90a\x01*V[\x90RV[` \x91\x81R\x01\x90V[a\x07\x18a\x07!` \x93a\x07&\x93a\x07\x0F\x81a\x01@V[\x93\x84\x80\x93a\x06\xF0V[\x95\x86\x91\x01a\x01MV[a\x01XV[\x01\x90V[\x92a\x07\x87\x96\x94a\x07fa\x07p\x92a\x07\\a\x07z\x96\x99\x95\x99a\x07R`\xC0\x8A\x01\x9B_\x8B\x01\x90a\x06\xD6V[` \x89\x01\x90a\x06\xD6V[`@\x87\x01\x90a\x06\xD6V[``\x85\x01\x90a\0\xA2V[`\x80\x83\x01\x90a\x06\xE3V[`\xA0\x81\x84\x03\x91\x01Ra\x06\xF9V[\x90V[4a\x07\xC1Wa\x07\xBDa\x07\xA5a\x07\xA06`\x04a\x04BV[a\x06gV[\x92a\x07\xB4\x96\x94\x96\x92\x91\x92a\0\x82V[\x96\x87\x96\x87a\x07*V[\x03\x90\xF3[a\0\x88V[\x1C\x90V[`\xFF\x16\x90V[a\x07\xE0\x90`\x08a\x07\xE5\x93\x02a\x07\xC6V[a\x07\xCAV[\x90V[\x90a\x07\xF3\x91Ta\x07\xD0V[\x90V[a\x08\x02`\x01_\x90a\x07\xE8V[\x90V[a\x08\x0E\x90a\x02ZV[\x90RV[\x91\x90a\x08%\x90_` \x85\x01\x94\x01\x90a\x08\x05V[V[4a\x08WWa\x0876`\x04a\0\x90V[a\x08Sa\x08Ba\x07\xF6V[a\x08Ja\0\x82V[\x91\x82\x91\x82a\x08\x12V[\x03\x90\xF3[a\0\x88V[_\x80\xFD[_\x90V[a\x08la\x08`V[Pa\x08v_a\x04tV[\x90V[\x90a\x08\x8Ca\x08\x85a\0\x82V[\x92\x83a\x06\x1CV[V[a\x08\x98`\xC0a\x08yV[\x90V[_\x90V[_\x90V[_\x90V[``\x90V[a\x08\xB4a\x08\x8EV[\x90` \x80\x80\x80\x80\x80\x87a\x08\xC5a\x08\x9BV[\x81R\x01a\x08\xD0a\x08\x9BV[\x81R\x01a\x08\xDBa\x08\x9BV[\x81R\x01a\x08\xE6a\x08\x9FV[\x81R\x01a\x08\xF1a\x08\xA3V[\x81R\x01a\x08\xFCa\x08\xA7V[\x81RPPV[a\t\na\x08\xACV[\x90V[\x90V[\x90V[a\t'a\t\"a\t,\x92a\t\rV[a\t\x10V[a\0\x9FV[\x90V[` \x91\x81R\x01\x90V[_\x7FNo deposits\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\tl`\x0B` \x92a\t/V[a\tu\x81a\t8V[\x01\x90V[a\t\x8E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t_V[\x90V[\x15a\t\x98WV[a\t\xA0a\0\x82V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xB6`\x04\x82\x01a\tyV[\x03\x90\xFD[\x90V[a\t\xD1a\t\xCCa\t\xD6\x92a\t\xBAV[a\t\x10V[a\0\x9FV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\xFCa\n\x02\x91\x93\x92\x93a\0\x9FV[\x92a\0\x9FV[\x82\x03\x91\x82\x11a\n\rWV[a\t\xD9V[\x90a\n\x1C\x90a\x01\x04V[\x90RV[\x90a\n*\x90a\0\x9FV[\x90RV[\x90a\n8\x90a\x01*V[\x90RV[RV[\x90a\n\xD6a\n\xCD`\x05a\nPa\x08\x8EV[\x94a\nga\n__\x83\x01a\x04\xCDV[_\x88\x01a\n\x12V[a\n\x7Fa\nv`\x01\x83\x01a\x04\xCDV[` \x88\x01a\n\x12V[a\n\x97a\n\x8E`\x02\x83\x01a\x04\xCDV[`@\x88\x01a\n\x12V[a\n\xAFa\n\xA6`\x03\x83\x01a\x04\xF1V[``\x88\x01a\n V[a\n\xC7a\n\xBE`\x04\x83\x01a\x05\x1BV[`\x80\x88\x01a\n.V[\x01a\x06EV[`\xA0\x84\x01a\n<V[V[a\n\xE1\x90a\n?V[\x90V[a\n\xECa\t\x02V[Pa\x0B\x11a\n\xF9_a\x04tV[a\x0B\x0Ba\x0B\x05_a\t\x13V[\x91a\0\x9FV[\x11a\t\x91V[a\x0B@a\x0B:_a\x0B4a\x0B$_a\x04tV[a\x0B.`\x01a\t\xBDV[\x90a\t\xEDV[\x90a\x04\x81V[Pa\n\xD8V[\x90V[_\x1B\x90V[\x90a\x0BT`\xFF\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Bg\x90a\x02ZV[\x90V[\x90V[\x90a\x0B\x82a\x0B}a\x0B\x89\x92a\x0B^V[a\x0BjV[\x82Ta\x0BHV[\x90UV[a\x0B\x98\x90`\x01a\x0BmV[V[a\x0B\xA6a\x0B\xAB\x91a\x04\xA9V[a\x07\xCAV[\x90V[a\x0B\xB8\x90Ta\x0B\x9AV[\x90V[_\x7FOptimism bridge failed\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xEF`\x16` \x92a\t/V[a\x0B\xF8\x81a\x0B\xBBV[\x01\x90V[a\x0C\x11\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xE2V[\x90V[a\x0C(a\x0C#a\x0C-\x92a\0\xF9V[a\t\x10V[a\0\xF9V[\x90V[a\x0C9\x90a\x0C\x14V[\x90V[a\x0CE\x90a\x0C0V[\x90V[a\x0CQ\x90a\x0C\x14V[\x90V[a\x0C]\x90a\x0CHV[\x90V[a\x0Ci\x90a\x0CHV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x0C\x7F\x82a\x02_V[V[\x90` \x82\x82\x03\x12a\x0C\x9AWa\x0C\x97\x91_\x01a\x0CrV[\x90V[a\0\x8CV[`@\x90a\x0C\xC8a\x0C\xCF\x94\x96\x95\x93\x96a\x0C\xBE``\x84\x01\x98_\x85\x01\x90a\x06\xD6V[` \x83\x01\x90a\x06\xD6V[\x01\x90a\0\xA2V[V[a\x0C\xD9a\0\x82V[=_\x82>=\x90\xFD[\x90V[a\x0C\xEE`\xC0a\x08yV[\x90V[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\r\x13Wa\r\x0F` \x91a\x01XV[\x01\x90V[a\x06\x08V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\r8a\r3\x82a\x0C\xF5V[a\x08yV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\rTWa\rR\x92a\r\x18V[V[a\x0C\xF1V[a\rd\x916\x91a\r#V[\x90V[_R` _ \x90V[T\x90V[a\r}\x81a\rpV[\x82\x10\x15a\r\x97Wa\r\x8F`\x06\x91a\rgV[\x91\x02\x01\x90_\x90V[a\x04`V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[a\r\xB9\x90Qa\x01\x04V[\x90V[\x90a\r\xCD`\x01\x80`\xA0\x1B\x03\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\xE0\x90a\x0CHV[\x90V[\x90V[\x90a\r\xFBa\r\xF6a\x0E\x02\x92a\r\xD7V[a\r\xE3V[\x82Ta\r\xBCV[\x90UV[a\x0E\x10\x90Qa\0\x9FV[\x90V[\x90a\x0E\x1F_\x19\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E=a\x0E8a\x0EB\x92a\0\x9FV[a\t\x10V[a\0\x9FV[\x90V[\x90V[\x90a\x0E]a\x0EXa\x0Ed\x92a\x0E)V[a\x0EEV[\x82Ta\x0E\x13V[\x90UV[a\x0Er\x90Qa\x01*V[\x90V[\x90a\x0E\x84c\xFF\xFF\xFF\xFF\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xA2a\x0E\x9Da\x0E\xA7\x92a\x01*V[a\t\x10V[a\x01*V[\x90V[\x90V[\x90a\x0E\xC2a\x0E\xBDa\x0E\xC9\x92a\x0E\x8EV[a\x0E\xAAV[\x82Ta\x0EuV[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xFA\x91\x02\x91a\x0E\xF4_\x19\x84a\x0E\xDBV[\x92a\x0E\xDBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0F\x1Aa\x0F\x15a\x0F\"\x93a\x0E)V[a\x0EEV[\x90\x83Ta\x0E\xDFV[\x90UV[a\x0F8\x91a\x0F2a\x08`V[\x91a\x0F\x04V[V[[\x81\x81\x10a\x0FFWPPV[\x80a\x0FS_`\x01\x93a\x0F&V[\x01a\x0F;V[\x91\x90`\x1F\x81\x11a\x0FiW[PPPV[a\x0Fua\x0F\x9A\x93a\x05fV[\x90` a\x0F\x81\x84a\x0E\xD1V[\x83\x01\x93\x10a\x0F\xA2W[a\x0F\x93\x90a\x0E\xD1V[\x01\x90a\x0F:V[_\x80\x80a\x0FdV[\x91Pa\x0F\x93\x81\x92\x90Pa\x0F\x8AV[\x90a\x0F\xC0\x90_\x19\x90`\x08\x02a\x07\xC6V[\x19\x16\x90V[\x81a\x0F\xCF\x91a\x0F\xB0V[\x90`\x02\x02\x17\x90V[\x90a\x0F\xE1\x81a\x01@V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x10\xA1Wa\x10\x05\x82a\x0F\xFF\x85Ta\x05<V[\x85a\x0FYV[` \x90`\x1F\x83\x11`\x01\x14a\x109W\x91\x80\x91a\x10(\x93_\x92a\x10-W[PPa\x0F\xC5V[\x90U[V[\x90\x91P\x01Q_\x80a\x10!V[`\x1F\x19\x83\x16\x91a\x10H\x85a\x05fV[\x92_[\x81\x81\x10a\x10\x89WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x10oW[PPP\x02\x01\x90Ua\x10+V[a\x10\x7F\x91\x01Q`\x1F\x84\x16\x90a\x0F\xB0V[\x90U_\x80\x80a\x10cV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x10KV[a\x06\x08V[\x90a\x10\xB0\x91a\x0F\xD7V[V[\x90a\x11A`\xA0`\x05a\x11G\x94a\x10\xD5_\x82\x01a\x10\xCF_\x88\x01a\r\xAFV[\x90a\r\xE6V[a\x10\xEE`\x01\x82\x01a\x10\xE8` \x88\x01a\r\xAFV[\x90a\r\xE6V[a\x11\x07`\x02\x82\x01a\x11\x01`@\x88\x01a\r\xAFV[\x90a\r\xE6V[a\x11 `\x03\x82\x01a\x11\x1A``\x88\x01a\x0E\x06V[\x90a\x0EHV[a\x119`\x04\x82\x01a\x113`\x80\x88\x01a\x0EhV[\x90a\x0E\xADV[\x01\x92\x01a\x0E\xCDV[\x90a\x10\xA6V[V[\x91\x90a\x11ZWa\x11X\x91a\x10\xB2V[V[a\r\x9CV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x11\x8FW\x82a\x11\x87\x91`\x01a\x11\x8D\x95\x01\x81Ua\rtV[\x90a\x11IV[V[a\x06\x08V[\x95\x93\x90\x94\x91\x92a\x11\xA4`\x01a\x0B\xAEV[a\x12\xB7Wa\x11\xB9a\x11\xB4\x88a\x0C<V[a\x0CTV[` c#\xB8r\xDD\x913\x90a\x11\xE9_a\x11\xD00a\x0C`V[\x95a\x11\xF4\x88a\x11\xDDa\0\x82V[\x98\x89\x97\x88\x96\x87\x95a\x0ClV[\x85R`\x04\x85\x01a\x0C\x9FV[\x03\x92Z\xF1\x80\x15a\x12\xB2Wa\x12\x86W[P_a\x12\x0E\x90a\x0C\xE1V[\x96\x95\x93\x90\x91\x92\x94\x93a\x12\x1Ea\x0C\xE4V[\x96_\x88\x01\x90a\x12,\x91a\n\x12V[` \x87\x01\x90a\x12:\x91a\n\x12V[`@\x86\x01\x90a\x12H\x91a\n\x12V[``\x85\x01\x90a\x12V\x91a\n V[`\x80\x84\x01\x90a\x12d\x91a\n.V[a\x12m\x91a\rYV[`\xA0\x82\x01\x90a\x12{\x91a\n<V[a\x12\x84\x91a\x11_V[V[a\x12\xA6\x90` =\x81\x11a\x12\xABW[a\x12\x9E\x81\x83a\x06\x1CV[\x81\x01\x90a\x0C\x81V[a\x12\x03V[P=a\x12\x94V[a\x0C\xD1V[a\x12\xBFa\0\x82V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xD5`\x04\x82\x01a\x0B\xFCV[\x03\x90\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61085c565b61001d5f3561007c565b8063371bed681461007757806353066069146100725780636813d7871461006d578063838b252014610068578063959b825a146100635763d3072d820361000e57610827565b61078a565b610408565b6102a5565b610221565b6100c4565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261009a57565b61008c565b90565b6100ab9061009f565b9052565b91906100c2905f602085019401906100a2565b565b346100f4576100d4366004610090565b6100f06100df610864565b6100e7610082565b918291826100af565b0390f35b610088565b60018060a01b031690565b61010d906100f9565b90565b61011990610104565b9052565b6101269061009f565b9052565b63ffffffff1690565b61013c9061012a565b9052565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61018161018a60209361018f9361017881610140565b93848093610144565b9586910161014d565b610158565b0190565b6102069160a060c08201926101ae5f8201515f850190610110565b6101c060208201516020850190610110565b6101d260408201516040850190610110565b6101e46060820151606085019061011d565b6101f660808201516080850190610133565b01519060a0818403910152610162565b90565b61021e9160208201915f818403910152610193565b90565b3461025157610231366004610090565b61024d61023c610ae4565b610244610082565b91829182610209565b0390f35b610088565b5f80fd5b151590565b6102688161025a565b0361026f57565b5f80fd5b905035906102808261025f565b565b9060208282031261029b57610298915f01610273565b90565b61008c565b5f0190565b346102d3576102bd6102b8366004610282565b610b8d565b6102c5610082565b806102cf816102a0565b0390f35b610088565b6102e181610104565b036102e857565b5f80fd5b905035906102f9826102d8565b565b6103048161009f565b0361030b57565b5f80fd5b9050359061031c826102fb565b565b6103278161012a565b0361032e57565b5f80fd5b9050359061033f8261031e565b565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103875781359167ffffffffffffffff831161038257602001926001830284011161037d57565b610349565b610345565b610341565b9160c083830312610403576103a3825f85016102ec565b926103b183602083016102ec565b926103bf81604084016102ec565b926103cd826060850161030f565b926103db8360808301610332565b9260a082013567ffffffffffffffff81116103fe576103fa920161034d565b9091565b610256565b61008c565b3461043d5761042761041b36600461038c565b95949094939193611194565b61042f610082565b80610439816102a0565b0390f35b610088565b9060208282031261045b57610458915f0161030f565b90565b61008c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61048a81610474565b8210156104a45761049c600691610478565b910201905f90565b610460565b5f1c90565b60018060a01b031690565b6104c56104ca916104a9565b6104ae565b90565b6104d790546104b9565b90565b90565b6104e96104ee916104a9565b6104da565b90565b6104fb90546104dd565b90565b63ffffffff1690565b610513610518916104a9565b6104fe565b90565b6105259054610507565b90565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561055c575b602083101461055757565b610528565b91607f169161054c565b5f5260205f2090565b905f92918054906105896105828361053c565b8094610144565b916001811690815f146105e057506001146105a4575b505050565b6105b19192939450610566565b915f925b8184106105c857505001905f808061059f565b600181602092959395548486015201910192906105b5565b92949550505060ff19168252151560200201905f808061059f565b906106059161056f565b90565b634e487b7160e01b5f52604160045260245ffd5b9061062690610158565b810190811067ffffffffffffffff82111761064057604052565b610608565b9061066561065e92610655610082565b938480926105fb565b038361061c565b565b5f9061067282610474565b8110156106d25761068291610481565b509061068f5f83016104cd565b9161069c600182016104cd565b916106a9600283016104cd565b916106b6600382016104f1565b916106cf60056106c86004850161051b565b9301610645565b90565b5f80fd5b6106df90610104565b9052565b6106ec9061012a565b9052565b60209181520190565b6107186107216020936107269361070f81610140565b938480936106f0565b9586910161014d565b610158565b0190565b9261078796946107666107709261075c61077a9699959961075260c08a019b5f8b01906106d6565b60208901906106d6565b60408701906106d6565b60608501906100a2565b60808301906106e3565b60a08184039101526106f9565b90565b346107c1576107bd6107a56107a0366004610442565b610667565b926107b4969496929192610082565b9687968761072a565b0390f35b610088565b1c90565b60ff1690565b6107e09060086107e593026107c6565b6107ca565b90565b906107f391546107d0565b90565b61080260015f906107e8565b90565b61080e9061025a565b9052565b9190610825905f60208501940190610805565b565b3461085757610837366004610090565b6108536108426107f6565b61084a610082565b91829182610812565b0390f35b610088565b5f80fd5b5f90565b61086c610860565b506108765f610474565b90565b9061088c610885610082565b928361061c565b565b61089860c0610879565b90565b5f90565b5f90565b5f90565b606090565b6108b461088e565b9060208080808080876108c561089b565b8152016108d061089b565b8152016108db61089b565b8152016108e661089f565b8152016108f16108a3565b8152016108fc6108a7565b81525050565b61090a6108ac565b90565b90565b90565b61092761092261092c9261090d565b610910565b61009f565b90565b60209181520190565b5f7f4e6f206465706f73697473000000000000000000000000000000000000000000910152565b61096c600b60209261092f565b61097581610938565b0190565b61098e9060208101905f81830391015261095f565b90565b1561099857565b6109a0610082565b62461bcd60e51b8152806109b660048201610979565b0390fd5b90565b6109d16109cc6109d6926109ba565b610910565b61009f565b90565b634e487b7160e01b5f52601160045260245ffd5b6109fc610a029193929361009f565b9261009f565b8203918211610a0d57565b6109d9565b90610a1c90610104565b9052565b90610a2a9061009f565b9052565b90610a389061012a565b9052565b52565b90610ad6610acd6005610a5061088e565b94610a67610a5f5f83016104cd565b5f8801610a12565b610a7f610a76600183016104cd565b60208801610a12565b610a97610a8e600283016104cd565b60408801610a12565b610aaf610aa6600383016104f1565b60608801610a20565b610ac7610abe6004830161051b565b60808801610a2e565b01610645565b60a08401610a3c565b565b610ae190610a3f565b90565b610aec610902565b50610b11610af95f610474565b610b0b610b055f610913565b9161009f565b11610991565b610b40610b3a5f610b34610b245f610474565b610b2e60016109bd565b906109ed565b90610481565b50610ad8565b90565b5f1b90565b90610b5460ff91610b43565b9181191691161790565b610b679061025a565b90565b90565b90610b82610b7d610b8992610b5e565b610b6a565b8254610b48565b9055565b610b98906001610b6d565b565b610ba6610bab916104a9565b6107ca565b90565b610bb89054610b9a565b90565b5f7f4f7074696d69736d20627269646765206661696c656400000000000000000000910152565b610bef601660209261092f565b610bf881610bbb565b0190565b610c119060208101905f818303910152610be2565b90565b610c28610c23610c2d926100f9565b610910565b6100f9565b90565b610c3990610c14565b90565b610c4590610c30565b90565b610c5190610c14565b90565b610c5d90610c48565b90565b610c6990610c48565b90565b60e01b90565b90505190610c7f8261025f565b565b90602082820312610c9a57610c97915f01610c72565b90565b61008c565b604090610cc8610ccf9496959396610cbe60608401985f8501906106d6565b60208301906106d6565b01906100a2565b565b610cd9610082565b3d5f823e3d90fd5b90565b610cee60c0610879565b90565b5f80fd5b67ffffffffffffffff8111610d1357610d0f602091610158565b0190565b610608565b90825f939282370152565b90929192610d38610d3382610cf5565b610879565b93818552602085019082840111610d5457610d5292610d18565b565b610cf1565b610d64913691610d23565b90565b5f5260205f2090565b5490565b610d7d81610d70565b821015610d9757610d8f600691610d67565b910201905f90565b610460565b634e487b7160e01b5f525f60045260245ffd5b610db99051610104565b90565b90610dcd60018060a01b0391610b43565b9181191691161790565b610de090610c48565b90565b90565b90610dfb610df6610e0292610dd7565b610de3565b8254610dbc565b9055565b610e10905161009f565b90565b90610e1f5f1991610b43565b9181191691161790565b610e3d610e38610e429261009f565b610910565b61009f565b90565b90565b90610e5d610e58610e6492610e29565b610e45565b8254610e13565b9055565b610e72905161012a565b90565b90610e8463ffffffff91610b43565b9181191691161790565b610ea2610e9d610ea79261012a565b610910565b61012a565b90565b90565b90610ec2610ebd610ec992610e8e565b610eaa565b8254610e75565b9055565b5190565b601f602091010490565b1b90565b91906008610efa910291610ef45f1984610edb565b92610edb565b9181191691161790565b9190610f1a610f15610f2293610e29565b610e45565b908354610edf565b9055565b610f3891610f32610860565b91610f04565b565b5b818110610f46575050565b80610f535f600193610f26565b01610f3b565b9190601f8111610f69575b505050565b610f75610f9a93610566565b906020610f8184610ed1565b83019310610fa2575b610f9390610ed1565b0190610f3a565b5f8080610f64565b9150610f9381929050610f8a565b90610fc0905f19906008026107c6565b191690565b81610fcf91610fb0565b906002021790565b90610fe181610140565b9067ffffffffffffffff82116110a15761100582610fff855461053c565b85610f59565b602090601f831160011461103957918091611028935f9261102d575b5050610fc5565b90555b565b90915001515f80611021565b601f1983169161104885610566565b925f5b8181106110895750916002939185600196941061106f575b5050500201905561102b565b61107f910151601f841690610fb0565b90555f8080611063565b9193602060018192878701518155019501920161104b565b610608565b906110b091610fd7565b565b9061114160a06005611147946110d55f82016110cf5f8801610daf565b90610de6565b6110ee600182016110e860208801610daf565b90610de6565b6111076002820161110160408801610daf565b90610de6565b6111206003820161111a60608801610e06565b90610e48565b6111396004820161113360808801610e68565b90610ead565b019201610ecd565b906110a6565b565b919061115a57611158916110b2565b565b610d9c565b908154916801000000000000000083101561118f578261118791600161118d95018155610d74565b90611149565b565b610608565b9593909491926111a46001610bae565b6112b7576111b96111b488610c3c565b610c54565b60206323b872dd9133906111e95f6111d030610c60565b956111f4886111dd610082565b98899788968795610c6c565b855260048501610c9f565b03925af180156112b257611286575b505f61120e90610ce1565b969593909192949361121e610ce4565b965f88019061122c91610a12565b602087019061123a91610a12565b604086019061124891610a12565b606085019061125691610a20565b608084019061126491610a2e565b61126d91610d59565b60a082019061127b91610a3c565b6112849161115f565b565b6112a69060203d81116112ab575b61129e818361061c565b810190610c81565b611203565b503d611294565b610cd1565b6112bf610082565b62461bcd60e51b8152806112d560048201610bfc565b0390fd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x08\\V[a\0\x1D_5a\0|V[\x80c7\x1B\xEDh\x14a\0wW\x80cS\x06`i\x14a\0rW\x80ch\x13\xD7\x87\x14a\0mW\x80c\x83\x8B% \x14a\0hW\x80c\x95\x9B\x82Z\x14a\0cWc\xD3\x07-\x82\x03a\0\x0EWa\x08'V[a\x07\x8AV[a\x04\x08V[a\x02\xA5V[a\x02!V[a\0\xC4V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\x9AWV[a\0\x8CV[\x90V[a\0\xAB\x90a\0\x9FV[\x90RV[\x91\x90a\0\xC2\x90_` \x85\x01\x94\x01\x90a\0\xA2V[V[4a\0\xF4Wa\0\xD46`\x04a\0\x90V[a\0\xF0a\0\xDFa\x08dV[a\0\xE7a\0\x82V[\x91\x82\x91\x82a\0\xAFV[\x03\x90\xF3[a\0\x88V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\r\x90a\0\xF9V[\x90V[a\x01\x19\x90a\x01\x04V[\x90RV[a\x01&\x90a\0\x9FV[\x90RV[c\xFF\xFF\xFF\xFF\x16\x90V[a\x01<\x90a\x01*V[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x01\x81a\x01\x8A` \x93a\x01\x8F\x93a\x01x\x81a\x01@V[\x93\x84\x80\x93a\x01DV[\x95\x86\x91\x01a\x01MV[a\x01XV[\x01\x90V[a\x02\x06\x91`\xA0`\xC0\x82\x01\x92a\x01\xAE_\x82\x01Q_\x85\x01\x90a\x01\x10V[a\x01\xC0` \x82\x01Q` \x85\x01\x90a\x01\x10V[a\x01\xD2`@\x82\x01Q`@\x85\x01\x90a\x01\x10V[a\x01\xE4``\x82\x01Q``\x85\x01\x90a\x01\x1DV[a\x01\xF6`\x80\x82\x01Q`\x80\x85\x01\x90a\x013V[\x01Q\x90`\xA0\x81\x84\x03\x91\x01Ra\x01bV[\x90V[a\x02\x1E\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x01\x93V[\x90V[4a\x02QWa\x0216`\x04a\0\x90V[a\x02Ma\x02<a\n\xE4V[a\x02Da\0\x82V[\x91\x82\x91\x82a\x02\tV[\x03\x90\xF3[a\0\x88V[_\x80\xFD[\x15\x15\x90V[a\x02h\x81a\x02ZV[\x03a\x02oWV[_\x80\xFD[\x90P5\x90a\x02\x80\x82a\x02_V[V[\x90` \x82\x82\x03\x12a\x02\x9BWa\x02\x98\x91_\x01a\x02sV[\x90V[a\0\x8CV[_\x01\x90V[4a\x02\xD3Wa\x02\xBDa\x02\xB86`\x04a\x02\x82V[a\x0B\x8DV[a\x02\xC5a\0\x82V[\x80a\x02\xCF\x81a\x02\xA0V[\x03\x90\xF3[a\0\x88V[a\x02\xE1\x81a\x01\x04V[\x03a\x02\xE8WV[_\x80\xFD[\x90P5\x90a\x02\xF9\x82a\x02\xD8V[V[a\x03\x04\x81a\0\x9FV[\x03a\x03\x0BWV[_\x80\xFD[\x90P5\x90a\x03\x1C\x82a\x02\xFBV[V[a\x03'\x81a\x01*V[\x03a\x03.WV[_\x80\xFD[\x90P5\x90a\x03?\x82a\x03\x1EV[V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x87W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x82W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03}WV[a\x03IV[a\x03EV[a\x03AV[\x91`\xC0\x83\x83\x03\x12a\x04\x03Wa\x03\xA3\x82_\x85\x01a\x02\xECV[\x92a\x03\xB1\x83` \x83\x01a\x02\xECV[\x92a\x03\xBF\x81`@\x84\x01a\x02\xECV[\x92a\x03\xCD\x82``\x85\x01a\x03\x0FV[\x92a\x03\xDB\x83`\x80\x83\x01a\x032V[\x92`\xA0\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03\xFEWa\x03\xFA\x92\x01a\x03MV[\x90\x91V[a\x02VV[a\0\x8CV[4a\x04=Wa\x04'a\x04\x1B6`\x04a\x03\x8CV[\x95\x94\x90\x94\x93\x91\x93a\x11\x94V[a\x04/a\0\x82V[\x80a\x049\x81a\x02\xA0V[\x03\x90\xF3[a\0\x88V[\x90` \x82\x82\x03\x12a\x04[Wa\x04X\x91_\x01a\x03\x0FV[\x90V[a\0\x8CV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x04\x8A\x81a\x04tV[\x82\x10\x15a\x04\xA4Wa\x04\x9C`\x06\x91a\x04xV[\x91\x02\x01\x90_\x90V[a\x04`V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04\xC5a\x04\xCA\x91a\x04\xA9V[a\x04\xAEV[\x90V[a\x04\xD7\x90Ta\x04\xB9V[\x90V[\x90V[a\x04\xE9a\x04\xEE\x91a\x04\xA9V[a\x04\xDAV[\x90V[a\x04\xFB\x90Ta\x04\xDDV[\x90V[c\xFF\xFF\xFF\xFF\x16\x90V[a\x05\x13a\x05\x18\x91a\x04\xA9V[a\x04\xFEV[\x90V[a\x05%\x90Ta\x05\x07V[\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x05\\W[` \x83\x10\x14a\x05WWV[a\x05(V[\x91`\x7F\x16\x91a\x05LV[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x05\x89a\x05\x82\x83a\x05<V[\x80\x94a\x01DV[\x91`\x01\x81\x16\x90\x81_\x14a\x05\xE0WP`\x01\x14a\x05\xA4W[PPPV[a\x05\xB1\x91\x92\x93\x94Pa\x05fV[\x91_\x92[\x81\x84\x10a\x05\xC8WPP\x01\x90_\x80\x80a\x05\x9FV[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x05\xB5V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x05\x9FV[\x90a\x06\x05\x91a\x05oV[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x06&\x90a\x01XV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06@W`@RV[a\x06\x08V[\x90a\x06ea\x06^\x92a\x06Ua\0\x82V[\x93\x84\x80\x92a\x05\xFBV[\x03\x83a\x06\x1CV[V[_\x90a\x06r\x82a\x04tV[\x81\x10\x15a\x06\xD2Wa\x06\x82\x91a\x04\x81V[P\x90a\x06\x8F_\x83\x01a\x04\xCDV[\x91a\x06\x9C`\x01\x82\x01a\x04\xCDV[\x91a\x06\xA9`\x02\x83\x01a\x04\xCDV[\x91a\x06\xB6`\x03\x82\x01a\x04\xF1V[\x91a\x06\xCF`\x05a\x06\xC8`\x04\x85\x01a\x05\x1BV[\x93\x01a\x06EV[\x90V[_\x80\xFD[a\x06\xDF\x90a\x01\x04V[\x90RV[a\x06\xEC\x90a\x01*V[\x90RV[` \x91\x81R\x01\x90V[a\x07\x18a\x07!` \x93a\x07&\x93a\x07\x0F\x81a\x01@V[\x93\x84\x80\x93a\x06\xF0V[\x95\x86\x91\x01a\x01MV[a\x01XV[\x01\x90V[\x92a\x07\x87\x96\x94a\x07fa\x07p\x92a\x07\\a\x07z\x96\x99\x95\x99a\x07R`\xC0\x8A\x01\x9B_\x8B\x01\x90a\x06\xD6V[` \x89\x01\x90a\x06\xD6V[`@\x87\x01\x90a\x06\xD6V[``\x85\x01\x90a\0\xA2V[`\x80\x83\x01\x90a\x06\xE3V[`\xA0\x81\x84\x03\x91\x01Ra\x06\xF9V[\x90V[4a\x07\xC1Wa\x07\xBDa\x07\xA5a\x07\xA06`\x04a\x04BV[a\x06gV[\x92a\x07\xB4\x96\x94\x96\x92\x91\x92a\0\x82V[\x96\x87\x96\x87a\x07*V[\x03\x90\xF3[a\0\x88V[\x1C\x90V[`\xFF\x16\x90V[a\x07\xE0\x90`\x08a\x07\xE5\x93\x02a\x07\xC6V[a\x07\xCAV[\x90V[\x90a\x07\xF3\x91Ta\x07\xD0V[\x90V[a\x08\x02`\x01_\x90a\x07\xE8V[\x90V[a\x08\x0E\x90a\x02ZV[\x90RV[\x91\x90a\x08%\x90_` \x85\x01\x94\x01\x90a\x08\x05V[V[4a\x08WWa\x0876`\x04a\0\x90V[a\x08Sa\x08Ba\x07\xF6V[a\x08Ja\0\x82V[\x91\x82\x91\x82a\x08\x12V[\x03\x90\xF3[a\0\x88V[_\x80\xFD[_\x90V[a\x08la\x08`V[Pa\x08v_a\x04tV[\x90V[\x90a\x08\x8Ca\x08\x85a\0\x82V[\x92\x83a\x06\x1CV[V[a\x08\x98`\xC0a\x08yV[\x90V[_\x90V[_\x90V[_\x90V[``\x90V[a\x08\xB4a\x08\x8EV[\x90` \x80\x80\x80\x80\x80\x87a\x08\xC5a\x08\x9BV[\x81R\x01a\x08\xD0a\x08\x9BV[\x81R\x01a\x08\xDBa\x08\x9BV[\x81R\x01a\x08\xE6a\x08\x9FV[\x81R\x01a\x08\xF1a\x08\xA3V[\x81R\x01a\x08\xFCa\x08\xA7V[\x81RPPV[a\t\na\x08\xACV[\x90V[\x90V[\x90V[a\t'a\t\"a\t,\x92a\t\rV[a\t\x10V[a\0\x9FV[\x90V[` \x91\x81R\x01\x90V[_\x7FNo deposits\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\tl`\x0B` \x92a\t/V[a\tu\x81a\t8V[\x01\x90V[a\t\x8E\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\t_V[\x90V[\x15a\t\x98WV[a\t\xA0a\0\x82V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\xB6`\x04\x82\x01a\tyV[\x03\x90\xFD[\x90V[a\t\xD1a\t\xCCa\t\xD6\x92a\t\xBAV[a\t\x10V[a\0\x9FV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\xFCa\n\x02\x91\x93\x92\x93a\0\x9FV[\x92a\0\x9FV[\x82\x03\x91\x82\x11a\n\rWV[a\t\xD9V[\x90a\n\x1C\x90a\x01\x04V[\x90RV[\x90a\n*\x90a\0\x9FV[\x90RV[\x90a\n8\x90a\x01*V[\x90RV[RV[\x90a\n\xD6a\n\xCD`\x05a\nPa\x08\x8EV[\x94a\nga\n__\x83\x01a\x04\xCDV[_\x88\x01a\n\x12V[a\n\x7Fa\nv`\x01\x83\x01a\x04\xCDV[` \x88\x01a\n\x12V[a\n\x97a\n\x8E`\x02\x83\x01a\x04\xCDV[`@\x88\x01a\n\x12V[a\n\xAFa\n\xA6`\x03\x83\x01a\x04\xF1V[``\x88\x01a\n V[a\n\xC7a\n\xBE`\x04\x83\x01a\x05\x1BV[`\x80\x88\x01a\n.V[\x01a\x06EV[`\xA0\x84\x01a\n<V[V[a\n\xE1\x90a\n?V[\x90V[a\n\xECa\t\x02V[Pa\x0B\x11a\n\xF9_a\x04tV[a\x0B\x0Ba\x0B\x05_a\t\x13V[\x91a\0\x9FV[\x11a\t\x91V[a\x0B@a\x0B:_a\x0B4a\x0B$_a\x04tV[a\x0B.`\x01a\t\xBDV[\x90a\t\xEDV[\x90a\x04\x81V[Pa\n\xD8V[\x90V[_\x1B\x90V[\x90a\x0BT`\xFF\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Bg\x90a\x02ZV[\x90V[\x90V[\x90a\x0B\x82a\x0B}a\x0B\x89\x92a\x0B^V[a\x0BjV[\x82Ta\x0BHV[\x90UV[a\x0B\x98\x90`\x01a\x0BmV[V[a\x0B\xA6a\x0B\xAB\x91a\x04\xA9V[a\x07\xCAV[\x90V[a\x0B\xB8\x90Ta\x0B\x9AV[\x90V[_\x7FOptimism bridge failed\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x0B\xEF`\x16` \x92a\t/V[a\x0B\xF8\x81a\x0B\xBBV[\x01\x90V[a\x0C\x11\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x0B\xE2V[\x90V[a\x0C(a\x0C#a\x0C-\x92a\0\xF9V[a\t\x10V[a\0\xF9V[\x90V[a\x0C9\x90a\x0C\x14V[\x90V[a\x0CE\x90a\x0C0V[\x90V[a\x0CQ\x90a\x0C\x14V[\x90V[a\x0C]\x90a\x0CHV[\x90V[a\x0Ci\x90a\x0CHV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\x0C\x7F\x82a\x02_V[V[\x90` \x82\x82\x03\x12a\x0C\x9AWa\x0C\x97\x91_\x01a\x0CrV[\x90V[a\0\x8CV[`@\x90a\x0C\xC8a\x0C\xCF\x94\x96\x95\x93\x96a\x0C\xBE``\x84\x01\x98_\x85\x01\x90a\x06\xD6V[` \x83\x01\x90a\x06\xD6V[\x01\x90a\0\xA2V[V[a\x0C\xD9a\0\x82V[=_\x82>=\x90\xFD[\x90V[a\x0C\xEE`\xC0a\x08yV[\x90V[_\x80\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\r\x13Wa\r\x0F` \x91a\x01XV[\x01\x90V[a\x06\x08V[\x90\x82_\x93\x92\x827\x01RV[\x90\x92\x91\x92a\r8a\r3\x82a\x0C\xF5V[a\x08yV[\x93\x81\x85R` \x85\x01\x90\x82\x84\x01\x11a\rTWa\rR\x92a\r\x18V[V[a\x0C\xF1V[a\rd\x916\x91a\r#V[\x90V[_R` _ \x90V[T\x90V[a\r}\x81a\rpV[\x82\x10\x15a\r\x97Wa\r\x8F`\x06\x91a\rgV[\x91\x02\x01\x90_\x90V[a\x04`V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[a\r\xB9\x90Qa\x01\x04V[\x90V[\x90a\r\xCD`\x01\x80`\xA0\x1B\x03\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\xE0\x90a\x0CHV[\x90V[\x90V[\x90a\r\xFBa\r\xF6a\x0E\x02\x92a\r\xD7V[a\r\xE3V[\x82Ta\r\xBCV[\x90UV[a\x0E\x10\x90Qa\0\x9FV[\x90V[\x90a\x0E\x1F_\x19\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E=a\x0E8a\x0EB\x92a\0\x9FV[a\t\x10V[a\0\x9FV[\x90V[\x90V[\x90a\x0E]a\x0EXa\x0Ed\x92a\x0E)V[a\x0EEV[\x82Ta\x0E\x13V[\x90UV[a\x0Er\x90Qa\x01*V[\x90V[\x90a\x0E\x84c\xFF\xFF\xFF\xFF\x91a\x0BCV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\xA2a\x0E\x9Da\x0E\xA7\x92a\x01*V[a\t\x10V[a\x01*V[\x90V[\x90V[\x90a\x0E\xC2a\x0E\xBDa\x0E\xC9\x92a\x0E\x8EV[a\x0E\xAAV[\x82Ta\x0EuV[\x90UV[Q\x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xFA\x91\x02\x91a\x0E\xF4_\x19\x84a\x0E\xDBV[\x92a\x0E\xDBV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x0F\x1Aa\x0F\x15a\x0F\"\x93a\x0E)V[a\x0EEV[\x90\x83Ta\x0E\xDFV[\x90UV[a\x0F8\x91a\x0F2a\x08`V[\x91a\x0F\x04V[V[[\x81\x81\x10a\x0FFWPPV[\x80a\x0FS_`\x01\x93a\x0F&V[\x01a\x0F;V[\x91\x90`\x1F\x81\x11a\x0FiW[PPPV[a\x0Fua\x0F\x9A\x93a\x05fV[\x90` a\x0F\x81\x84a\x0E\xD1V[\x83\x01\x93\x10a\x0F\xA2W[a\x0F\x93\x90a\x0E\xD1V[\x01\x90a\x0F:V[_\x80\x80a\x0FdV[\x91Pa\x0F\x93\x81\x92\x90Pa\x0F\x8AV[\x90a\x0F\xC0\x90_\x19\x90`\x08\x02a\x07\xC6V[\x19\x16\x90V[\x81a\x0F\xCF\x91a\x0F\xB0V[\x90`\x02\x02\x17\x90V[\x90a\x0F\xE1\x81a\x01@V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x10\xA1Wa\x10\x05\x82a\x0F\xFF\x85Ta\x05<V[\x85a\x0FYV[` \x90`\x1F\x83\x11`\x01\x14a\x109W\x91\x80\x91a\x10(\x93_\x92a\x10-W[PPa\x0F\xC5V[\x90U[V[\x90\x91P\x01Q_\x80a\x10!V[`\x1F\x19\x83\x16\x91a\x10H\x85a\x05fV[\x92_[\x81\x81\x10a\x10\x89WP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x10oW[PPP\x02\x01\x90Ua\x10+V[a\x10\x7F\x91\x01Q`\x1F\x84\x16\x90a\x0F\xB0V[\x90U_\x80\x80a\x10cV[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x10KV[a\x06\x08V[\x90a\x10\xB0\x91a\x0F\xD7V[V[\x90a\x11A`\xA0`\x05a\x11G\x94a\x10\xD5_\x82\x01a\x10\xCF_\x88\x01a\r\xAFV[\x90a\r\xE6V[a\x10\xEE`\x01\x82\x01a\x10\xE8` \x88\x01a\r\xAFV[\x90a\r\xE6V[a\x11\x07`\x02\x82\x01a\x11\x01`@\x88\x01a\r\xAFV[\x90a\r\xE6V[a\x11 `\x03\x82\x01a\x11\x1A``\x88\x01a\x0E\x06V[\x90a\x0EHV[a\x119`\x04\x82\x01a\x113`\x80\x88\x01a\x0EhV[\x90a\x0E\xADV[\x01\x92\x01a\x0E\xCDV[\x90a\x10\xA6V[V[\x91\x90a\x11ZWa\x11X\x91a\x10\xB2V[V[a\r\x9CV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x11\x8FW\x82a\x11\x87\x91`\x01a\x11\x8D\x95\x01\x81Ua\rtV[\x90a\x11IV[V[a\x06\x08V[\x95\x93\x90\x94\x91\x92a\x11\xA4`\x01a\x0B\xAEV[a\x12\xB7Wa\x11\xB9a\x11\xB4\x88a\x0C<V[a\x0CTV[` c#\xB8r\xDD\x913\x90a\x11\xE9_a\x11\xD00a\x0C`V[\x95a\x11\xF4\x88a\x11\xDDa\0\x82V[\x98\x89\x97\x88\x96\x87\x95a\x0ClV[\x85R`\x04\x85\x01a\x0C\x9FV[\x03\x92Z\xF1\x80\x15a\x12\xB2Wa\x12\x86W[P_a\x12\x0E\x90a\x0C\xE1V[\x96\x95\x93\x90\x91\x92\x94\x93a\x12\x1Ea\x0C\xE4V[\x96_\x88\x01\x90a\x12,\x91a\n\x12V[` \x87\x01\x90a\x12:\x91a\n\x12V[`@\x86\x01\x90a\x12H\x91a\n\x12V[``\x85\x01\x90a\x12V\x91a\n V[`\x80\x84\x01\x90a\x12d\x91a\n.V[a\x12m\x91a\rYV[`\xA0\x82\x01\x90a\x12{\x91a\n<V[a\x12\x84\x91a\x11_V[V[a\x12\xA6\x90` =\x81\x11a\x12\xABW[a\x12\x9E\x81\x83a\x06\x1CV[\x81\x01\x90a\x0C\x81V[a\x12\x03V[P=a\x12\x94V[a\x0C\xD1V[a\x12\xBFa\0\x82V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x12\xD5`\x04\x82\x01a\x0B\xFCV[\x03\x90\xFD",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct DepositCall { address l1Token; address l2Token; address to; uint256 amount; uint32 l2Gas; bytes data; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DepositCall {
        #[allow(missing_docs)]
        pub l1Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub l2Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l2Gas: u32,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<32>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            u32,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DepositCall> for UnderlyingRustTuple<'_> {
            fn from(value: DepositCall) -> Self {
                (
                    value.l1Token,
                    value.l2Token,
                    value.to,
                    value.amount,
                    value.l2Gas,
                    value.data,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DepositCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    l1Token: tuple.0,
                    l2Token: tuple.1,
                    to: tuple.2,
                    amount: tuple.3,
                    l2Gas: tuple.4,
                    data: tuple.5,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for DepositCall {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for DepositCall {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l1Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l2Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Gas),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for DepositCall {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for DepositCall {
            const NAME: &'static str = "DepositCall";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "DepositCall(address l1Token,address l2Token,address to,uint256 amount,uint32 l2Gas,bytes data)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.l1Token,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.l2Token,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.to,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.amount)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.l2Gas)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.data,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for DepositCall {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.l1Token,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.l2Token,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.to,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.amount,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.l2Gas)
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.l1Token,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.l2Token,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.to,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.amount,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.l2Gas,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `depositCalls(uint256)` and selector `0x959b825a`.
```solidity
function depositCalls(uint256) external view returns (address l1Token, address l2Token, address to, uint256 amount, uint32 l2Gas, bytes memory data);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositCallsCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`depositCalls(uint256)`](depositCallsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositCallsReturn {
        #[allow(missing_docs)]
        pub l1Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub l2Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub l2Gas: u32,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositCallsCall> for UnderlyingRustTuple<'_> {
                fn from(value: depositCallsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositCallsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                u32,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositCallsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: depositCallsReturn) -> Self {
                    (
                        value.l1Token,
                        value.l2Token,
                        value.to,
                        value.amount,
                        value.l2Gas,
                        value.data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositCallsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        l1Token: tuple.0,
                        l2Token: tuple.1,
                        to: tuple.2,
                        amount: tuple.3,
                        l2Gas: tuple.4,
                        data: tuple.5,
                    }
                }
            }
        }
        impl depositCallsReturn {
            fn _tokenize(
                &self,
            ) -> <depositCallsCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l1Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.l2Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.l2Gas),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for depositCallsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = depositCallsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "depositCalls(uint256)";
            const SELECTOR: [u8; 4] = [149u8, 155u8, 130u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                depositCallsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `depositERC20To(address,address,address,uint256,uint32,bytes)` and selector `0x838b2520`.
```solidity
function depositERC20To(address _l1Token, address _l2Token, address _to, uint256 _amount, uint32 _l2Gas, bytes memory _data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositERC20ToCall {
        #[allow(missing_docs)]
        pub _l1Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _l2Token: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _l2Gas: u32,
        #[allow(missing_docs)]
        pub _data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`depositERC20To(address,address,address,uint256,uint32,bytes)`](depositERC20ToCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct depositERC20ToReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                u32,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositERC20ToCall> for UnderlyingRustTuple<'_> {
                fn from(value: depositERC20ToCall) -> Self {
                    (
                        value._l1Token,
                        value._l2Token,
                        value._to,
                        value._amount,
                        value._l2Gas,
                        value._data,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for depositERC20ToCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _l1Token: tuple.0,
                        _l2Token: tuple.1,
                        _to: tuple.2,
                        _amount: tuple.3,
                        _l2Gas: tuple.4,
                        _data: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<depositERC20ToReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: depositERC20ToReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for depositERC20ToReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl depositERC20ToReturn {
            fn _tokenize(
                &self,
            ) -> <depositERC20ToCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for depositERC20ToCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = depositERC20ToReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "depositERC20To(address,address,address,uint256,uint32,bytes)";
            const SELECTOR: [u8; 4] = [131u8, 139u8, 37u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._l1Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._l2Token,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._amount),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._l2Gas),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                depositERC20ToReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getDepositCallCount()` and selector `0x371bed68`.
```solidity
function getDepositCallCount() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDepositCallCountCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getDepositCallCount()`](getDepositCallCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getDepositCallCountReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDepositCallCountCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getDepositCallCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getDepositCallCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getDepositCallCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getDepositCallCountReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getDepositCallCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getDepositCallCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getDepositCallCount()";
            const SELECTOR: [u8; 4] = [55u8, 27u8, 237u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getDepositCallCountReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getDepositCallCountReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getLastDepositCall()` and selector `0x53066069`.
```solidity
function getLastDepositCall() external view returns (DepositCall memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastDepositCallCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getLastDepositCall()`](getLastDepositCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getLastDepositCallReturn {
        #[allow(missing_docs)]
        pub _0: <DepositCall as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastDepositCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastDepositCallCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastDepositCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (DepositCall,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <DepositCall as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getLastDepositCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getLastDepositCallReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getLastDepositCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getLastDepositCallCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <DepositCall as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (DepositCall,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getLastDepositCall()";
            const SELECTOR: [u8; 4] = [83u8, 6u8, 96u8, 105u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<DepositCall as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getLastDepositCallReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getLastDepositCallReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setShouldRevert(bool)` and selector `0x6813d787`.
```solidity
function setShouldRevert(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setShouldRevert(bool)`](setShouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setShouldRevertReturn {
            fn _tokenize(
                &self,
            ) -> <setShouldRevertCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldRevertCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldRevertReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldRevert(bool)";
            const SELECTOR: [u8; 4] = [104u8, 19u8, 215u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setShouldRevertReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: shouldRevertReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: shouldRevertReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`MockOptimismBridge`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum MockOptimismBridgeCalls {
        #[allow(missing_docs)]
        depositCalls(depositCallsCall),
        #[allow(missing_docs)]
        depositERC20To(depositERC20ToCall),
        #[allow(missing_docs)]
        getDepositCallCount(getDepositCallCountCall),
        #[allow(missing_docs)]
        getLastDepositCall(getLastDepositCallCall),
        #[allow(missing_docs)]
        setShouldRevert(setShouldRevertCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
    }
    #[automatically_derived]
    impl MockOptimismBridgeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [55u8, 27u8, 237u8, 104u8],
            [83u8, 6u8, 96u8, 105u8],
            [104u8, 19u8, 215u8, 135u8],
            [131u8, 139u8, 37u8, 32u8],
            [149u8, 155u8, 130u8, 90u8],
            [211u8, 7u8, 45u8, 130u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockOptimismBridgeCalls {
        const NAME: &'static str = "MockOptimismBridgeCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::depositCalls(_) => {
                    <depositCallsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::depositERC20To(_) => {
                    <depositERC20ToCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getDepositCallCount(_) => {
                    <getDepositCallCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getLastDepositCall(_) => {
                    <getLastDepositCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldRevert(_) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockOptimismBridgeCalls>] = &[
                {
                    fn getDepositCallCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <getDepositCallCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::getDepositCallCount)
                    }
                    getDepositCallCount
                },
                {
                    fn getLastDepositCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <getLastDepositCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::getLastDepositCall)
                    }
                    getLastDepositCall
                },
                {
                    fn setShouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn depositERC20To(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <depositERC20ToCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::depositERC20To)
                    }
                    depositERC20To
                },
                {
                    fn depositCalls(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <depositCallsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::depositCalls)
                    }
                    depositCalls
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::shouldRevert)
                    }
                    shouldRevert
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<MockOptimismBridgeCalls>] = &[
                {
                    fn getDepositCallCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <getDepositCallCountCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::getDepositCallCount)
                    }
                    getDepositCallCount
                },
                {
                    fn getLastDepositCall(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <getLastDepositCallCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::getLastDepositCall)
                    }
                    getLastDepositCall
                },
                {
                    fn setShouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn depositERC20To(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <depositERC20ToCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::depositERC20To)
                    }
                    depositERC20To
                },
                {
                    fn depositCalls(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <depositCallsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::depositCalls)
                    }
                    depositCalls
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<MockOptimismBridgeCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(MockOptimismBridgeCalls::shouldRevert)
                    }
                    shouldRevert
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::depositCalls(inner) => {
                    <depositCallsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::depositERC20To(inner) => {
                    <depositERC20ToCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getDepositCallCount(inner) => {
                    <getDepositCallCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getLastDepositCall(inner) => {
                    <getLastDepositCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::depositCalls(inner) => {
                    <depositCallsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::depositERC20To(inner) => {
                    <depositERC20ToCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getDepositCallCount(inner) => {
                    <getDepositCallCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getLastDepositCall(inner) => {
                    <getLastDepositCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockOptimismBridge`](self) contract instance.

See the [wrapper's documentation](`MockOptimismBridgeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockOptimismBridgeInstance<P, N> {
        MockOptimismBridgeInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockOptimismBridgeInstance<P, N>>,
    > {
        MockOptimismBridgeInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        MockOptimismBridgeInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`MockOptimismBridge`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockOptimismBridge`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockOptimismBridgeInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for MockOptimismBridgeInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockOptimismBridgeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockOptimismBridgeInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`MockOptimismBridge`](self) contract instance.

See the [wrapper's documentation](`MockOptimismBridgeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockOptimismBridgeInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> MockOptimismBridgeInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockOptimismBridgeInstance<P, N> {
            MockOptimismBridgeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockOptimismBridgeInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`depositCalls`] function.
        pub fn depositCalls(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, depositCallsCall, N> {
            self.call_builder(&depositCallsCall(_0))
        }
        ///Creates a new call builder for the [`depositERC20To`] function.
        pub fn depositERC20To(
            &self,
            _l1Token: alloy::sol_types::private::Address,
            _l2Token: alloy::sol_types::private::Address,
            _to: alloy::sol_types::private::Address,
            _amount: alloy::sol_types::private::primitives::aliases::U256,
            _l2Gas: u32,
            _data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, depositERC20ToCall, N> {
            self.call_builder(
                &depositERC20ToCall {
                    _l1Token,
                    _l2Token,
                    _to,
                    _amount,
                    _l2Gas,
                    _data,
                },
            )
        }
        ///Creates a new call builder for the [`getDepositCallCount`] function.
        pub fn getDepositCallCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getDepositCallCountCall, N> {
            self.call_builder(&getDepositCallCountCall)
        }
        ///Creates a new call builder for the [`getLastDepositCall`] function.
        pub fn getLastDepositCall(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getLastDepositCallCall, N> {
            self.call_builder(&getLastDepositCallCall)
        }
        ///Creates a new call builder for the [`setShouldRevert`] function.
        pub fn setShouldRevert(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<&P, setShouldRevertCall, N> {
            self.call_builder(
                &setShouldRevertCall {
                    _shouldRevert,
                },
            )
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > MockOptimismBridgeInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
