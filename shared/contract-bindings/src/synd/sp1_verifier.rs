/**

Generated by the following Solidity interface...
```solidity
interface SP1Verifier {
    error InvalidProof();
    error ProofInvalid();
    error PublicInputNotInField();
    error WrongVerifierSelector(bytes4 received, bytes4 expected);

    function VERIFIER_HASH() external pure returns (bytes32);
    function VERSION() external pure returns (string memory);
    function Verify(uint256[8] memory proof, uint256[2] memory input) external view;
    function compressProof(uint256[8] memory proof) external view returns (uint256[4] memory compressed);
    function hashPublicValues(bytes memory publicValues) external pure returns (bytes32);
    function verifyCompressedProof(uint256[4] memory compressedProof, uint256[2] memory input) external view;
    function verifyProof(bytes32 programVKey, bytes memory publicValues, bytes memory proofBytes) external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "VERIFIER_HASH",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "Verify",
    "inputs": [
      {
        "name": "proof",
        "type": "uint256[8]",
        "internalType": "uint256[8]"
      },
      {
        "name": "input",
        "type": "uint256[2]",
        "internalType": "uint256[2]"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "compressProof",
    "inputs": [
      {
        "name": "proof",
        "type": "uint256[8]",
        "internalType": "uint256[8]"
      }
    ],
    "outputs": [
      {
        "name": "compressed",
        "type": "uint256[4]",
        "internalType": "uint256[4]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hashPublicValues",
    "inputs": [
      {
        "name": "publicValues",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "verifyCompressedProof",
    "inputs": [
      {
        "name": "compressedProof",
        "type": "uint256[4]",
        "internalType": "uint256[4]"
      },
      {
        "name": "input",
        "type": "uint256[2]",
        "internalType": "uint256[2]"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "verifyProof",
    "inputs": [
      {
        "name": "programVKey",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "error",
    "name": "InvalidProof",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ProofInvalid",
    "inputs": []
  },
  {
    "type": "error",
    "name": "PublicInputNotInField",
    "inputs": []
  },
  {
    "type": "error",
    "name": "WrongVerifierSelector",
    "inputs": [
      {
        "name": "received",
        "type": "bytes4",
        "internalType": "bytes4"
      },
      {
        "name": "expected",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SP1Verifier {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60808060405234601557611695908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081632a51043614610cca5750806341493c6014610aa157806344f6369214610a065780636b61d8e7146109c1578063eddf243c146105d3578063f11817b21461013e5763ffa1ad741461006b575f80fd5b3461013b578060031936011261013b576040516040810181811067ffffffffffffffff82111761010e57906040918252600681527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602083017f76352e302e30000000000000000000000000000000000000000000000000000081528451958694602086525180928160208801528787015e85828601015201168101030190f35b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80fd5b503461013b5760c060031936011261013b573660841161013b573660c41161013b57604051906103006101718184610d30565b803684376101806004356111e2565b610191602495929535604435611286565b919392906101a06064356111e2565b9390926040519660408801967f26091e1cafb0ad8a4ea0a694cd3743ebf524779233db734c451d28b58aa9758e895288600160208201997e9ff50a6b8b11c3ca6fdb2690a124f8ce25489fefa65a3e782e7ba70b66690e8b527f061c3fd0fd3da25d2607c227d090cca750ed36c6ec878755e537c1c48951fb4c81527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604060608501927f0fa17ae9c2033379df7b5c65eff0e107055e9a273e6119a212dd09eb5170721984527f07236256d21c60d02f0bdbf95cff83e03ea9e16fca56b18d5544b0889a65c1f560843596836080820198808a5286828660608160075afa9110169160808160065afa16947f04eab241388a79817fe0e0e2ead0b2ec4ffdec51a16028dee020634fd129e71c83525260a43580965260608160075afa931016161660408a60808160065afa169851975198156105ab5760209a9b9c8a528a8a015260408901526060880152608087015260a086015260c085015260e08401527f1cc7cb8de715675f21f01ecc9b46d236e0865e0cc020024521998269845f74e66101008401527f03ff41f4ba0c37fe2caf27354d28e4b8f83d3b76777a63b327d736bffb0122ed6101208401527f01909cd7827e0278e6b60843a4abc7b111d7f8b2725cd5902a6b20da7a2938fb6101408401527f192bd3274441670227b4f69a44005b8711266e474227c6439ca25ca8e1ec1fc26101608401527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808401527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08401527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08401527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08401527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008401527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f6102208401526102408301526102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e082015260405192839161055d8484610d30565b8336843760085afa1590811561059e575b506105765780f35b807f7fcdd1f40000000000000000000000000000000000000000000000000000000060049252fd5b600191505114155f61056e565b60048c7fa54f8e27000000000000000000000000000000000000000000000000000000008152fd5b503461013b5761014060031936011261013b57366101041161013b57366101441161013b5760405160408101907f26091e1cafb0ad8a4ea0a694cd3743ebf524779233db734c451d28b58aa9758e815260208101917e9ff50a6b8b11c3ca6fdb2690a124f8ce25489fefa65a3e782e7ba70b66690e83527f061c3fd0fd3da25d2607c227d090cca750ed36c6ec878755e537c1c48951fb4c81526001606083017f0fa17ae9c2033379df7b5c65eff0e107055e9a273e6119a212dd09eb5170721981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604061010435947f07236256d21c60d02f0bdbf95cff83e03ea9e16fca56b18d5544b0889a65c1f5608088019680885284848460608160075afa911016838960808160065afa16947f04eab241388a79817fe0e0e2ead0b2ec4ffdec51a16028dee020634fd129e71c8352526101243580965260608160075afa931016161660408260808160065afa169051915190156109995760405191610100600484377f1cc7cb8de715675f21f01ecc9b46d236e0865e0cc020024521998269845f74e66101008401527f03ff41f4ba0c37fe2caf27354d28e4b8f83d3b76777a63b327d736bffb0122ed6101208401527f01909cd7827e0278e6b60843a4abc7b111d7f8b2725cd5902a6b20da7a2938fb6101408401527f192bd3274441670227b4f69a44005b8711266e474227c6439ca25ca8e1ec1fc26101608401527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808401527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08401527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08401527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08401527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008401527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f6102208401526102408301526102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e08201526020816103008160085afa905116156105765780f35b6004837fa54f8e27000000000000000000000000000000000000000000000000000000008152fd5b503461013b57602060031936011261013b576004359067ffffffffffffffff821161013b5760206109fe6109f83660048601610d02565b90610d9e565b604051908152f35b503461013b5761010060031936011261013b57366101041161013b5760405190610a31608083610d30565b6080368337610a44602435600435610dee565b8252610a5a60843560a435604435606435610f03565b60208401526040830152610a7260e43560c435610dee565b60608301526040519190825b60048210610a8b57608084f35b6020806001928551815201930191019091610a7e565b5034610c67576060600319360112610c675760243567ffffffffffffffff8111610c6757610ad3903690600401610d02565b60443567ffffffffffffffff8111610c6757610af3903690600401610d02565b91909282600411610c67577fffffffff000000000000000000000000000000000000000000000000000000008435167fa4594c59000000000000000000000000000000000000000000000000000000008103610c7b575090610b5491610d9e565b604091825191610b648484610d30565b833684376004358352602083015283016101006003198583030112610c675780602385011215610c6757825193610b9d61010086610d30565b84906101048101928311610c6757600401905b828210610c6b57505050303b15610c675781517feddf243c000000000000000000000000000000000000000000000000000000008152925f600485015b60088210610c515750505061010483015f905b60028210610c3b575050505f8261014481305afa908115610c325750610c24575080f35b610c3091505f90610d30565b005b513d5f823e3d90fd5b6020806001928551815201930191019091610c00565b6020806001928551815201930191019091610bed565b5f80fd5b8135815260209182019101610bb0565b7f988066a1000000000000000000000000000000000000000000000000000000005f526004527fa4594c590000000000000000000000000000000000000000000000000000000060245260445ffd5b34610c67575f600319360112610c6757807fa4594c59bbc142f3b81c3ecb7f50a7c34bc9af7c4c444b5d48b795427e28591360209252f35b9181601f84011215610c675782359167ffffffffffffffff8311610c675760208381860195010111610c6757565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d7157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6020915f918160405192839283378101838152039060025afa15610de3577f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f511690565b6040513d5f823e3d90fd5b907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210801590610ed9575b610ea357811580610ed1575b610ecb57610e5d7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003818581818009090861140b565b818103610e6c57505060011b90565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47809106810306145f14610ea357600190811b1790565b7f7fcdd1f4000000000000000000000000000000000000000000000000000000005f5260045ffd5b50505f90565b508015610e26565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811015610e1a565b919093927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783108015906111b8575b801561118e575b8015611164575b610ea3578082868517171715611159579082916110967f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808080888180808f9d7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd448f839290839109099d8e0981848181800909087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5089a09818c8181800909087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e7750806810306947f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea48161105d81808b8009818780090861140b565b8408097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761108a8261161a565b80091415958691611441565b929080821480611150575b156110c85750505050905f146110c05760ff60025b169060021b179190565b60ff5f6110b6565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780910681030614918261111e575b505015610ea357600191156111165760ff60025b169060021b17179190565b60ff5f61110b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47919250819006810306145f806110f7565b508383146110a1565b50505090505f905f90565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811015610f40565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47821015610f39565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47851015610f32565b801561127f578060011c917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47831015610ea35760018061124b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003818881818009090861140b565b93161461125457565b907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780910681030690565b505f905f90565b801580611403575b6113f7578060021c92827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785108015906113cd575b610ea35784817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808080808080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd44816113849d8d0909998a0981898181800909087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e7750806810306936002808a16149509818a8181800909087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e508611441565b80929160018082961614611396575050565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478093945080929550809106810306930681030690565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110156112c3565b50505f905f905f905f90565b50811561128e565b906114158261161a565b917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783800903610ea357565b917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4816114ac9396949661149e82808a8009818a80090861140b565b9061160e575b86080961140b565b927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600285096040519060208252602080830152602060408301528060608301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4560808301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a083015260208260c08160055afa91519115610ea3577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47826001920903610ea3577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47908209927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808087800906810306818780090814908115916115dc575b50610ea357565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478084860960020914155f6115d5565b818091068103066114a4565b9060405191602083526020808401526020604084015260608301527f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f5260808301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a083015260208260c08160055afa91519115610ea35756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`\x15Wa\x16\x95\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c*Q\x046\x14a\x0C\xCAWP\x80cAI<`\x14a\n\xA1W\x80cD\xF66\x92\x14a\n\x06W\x80cka\xD8\xE7\x14a\t\xC1W\x80c\xED\xDF$<\x14a\x05\xD3W\x80c\xF1\x18\x17\xB2\x14a\x01>Wc\xFF\xA1\xADt\x14a\0kW_\x80\xFD[4a\x01;W\x80`\x03\x196\x01\x12a\x01;W`@Q`@\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01\x0EW\x90`@\x91\x82R`\x06\x81R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x83\x01\x7Fv5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x84Q\x95\x86\x94` \x86RQ\x80\x92\x81` \x88\x01R\x87\x87\x01^\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[`$\x83\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x80\xFD[P4a\x01;W`\xC0`\x03\x196\x01\x12a\x01;W6`\x84\x11a\x01;W6`\xC4\x11a\x01;W`@Q\x90a\x03\0a\x01q\x81\x84a\r0V[\x806\x847a\x01\x80`\x045a\x11\xE2V[a\x01\x91`$\x95\x92\x955`D5a\x12\x86V[\x91\x93\x92\x90a\x01\xA0`d5a\x11\xE2V[\x93\x90\x92`@Q\x96`@\x88\x01\x96\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x89R\x88`\x01` \x82\x01\x99~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x8BR\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@``\x85\x01\x92\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x84R\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x845\x96\x83`\x80\x82\x01\x98\x80\x8AR\x86\x82\x86``\x81`\x07Z\xFA\x91\x10\x16\x91`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RR`\xA45\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x8A`\x80\x81`\x06Z\xFA\x16\x98Q\x97Q\x98\x15a\x05\xABW` \x9A\x9B\x9C\x8AR\x8A\x8A\x01R`@\x89\x01R``\x88\x01R`\x80\x87\x01R`\xA0\x86\x01R`\xC0\x85\x01R`\xE0\x84\x01R\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01R`@Q\x92\x83\x91a\x05]\x84\x84a\r0V[\x836\x847`\x08Z\xFA\x15\x90\x81\x15a\x05\x9EW[Pa\x05vW\x80\xF3[\x80\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x92R\xFD[`\x01\x91PQ\x14\x15_a\x05nV[`\x04\x8C\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[P4a\x01;Wa\x01@`\x03\x196\x01\x12a\x01;W6a\x01\x04\x11a\x01;W6a\x01D\x11a\x01;W`@Q`@\x81\x01\x90\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x81R` \x81\x01\x91~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x83R\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R`\x01``\x83\x01\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@a\x01\x045\x94\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x80\x88\x01\x96\x80\x88R\x84\x84\x84``\x81`\x07Z\xFA\x91\x10\x16\x83\x89`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RRa\x01$5\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x82`\x80\x81`\x06Z\xFA\x16\x90Q\x91Q\x90\x15a\t\x99W`@Q\x91a\x01\0`\x04\x847\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01R` \x81a\x03\0\x81`\x08Z\xFA\x90Q\x16\x15a\x05vW\x80\xF3[`\x04\x83\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[P4a\x01;W` `\x03\x196\x01\x12a\x01;W`\x045\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x01;W` a\t\xFEa\t\xF86`\x04\x86\x01a\r\x02V[\x90a\r\x9EV[`@Q\x90\x81R\xF3[P4a\x01;Wa\x01\0`\x03\x196\x01\x12a\x01;W6a\x01\x04\x11a\x01;W`@Q\x90a\n1`\x80\x83a\r0V[`\x806\x837a\nD`$5`\x045a\r\xEEV[\x82Ra\nZ`\x845`\xA45`D5`d5a\x0F\x03V[` \x84\x01R`@\x83\x01Ra\nr`\xE45`\xC45a\r\xEEV[``\x83\x01R`@Q\x91\x90\x82[`\x04\x82\x10a\n\x8BW`\x80\x84\xF3[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\n~V[P4a\x0CgW```\x03\x196\x01\x12a\x0CgW`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0CgWa\n\xD3\x906\x90`\x04\x01a\r\x02V[`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0CgWa\n\xF3\x906\x90`\x04\x01a\r\x02V[\x91\x90\x92\x82`\x04\x11a\x0CgW\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x845\x16\x7F\xA4YLY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x03a\x0C{WP\x90a\x0BT\x91a\r\x9EV[`@\x91\x82Q\x91a\x0Bd\x84\x84a\r0V[\x836\x847`\x045\x83R` \x83\x01R\x83\x01a\x01\0`\x03\x19\x85\x83\x03\x01\x12a\x0CgW\x80`#\x85\x01\x12\x15a\x0CgW\x82Q\x93a\x0B\x9Da\x01\0\x86a\r0V[\x84\x90a\x01\x04\x81\x01\x92\x83\x11a\x0CgW`\x04\x01\x90[\x82\x82\x10a\x0CkWPPP0;\x15a\x0CgW\x81Q\x7F\xED\xDF$<\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x92_`\x04\x85\x01[`\x08\x82\x10a\x0CQWPPPa\x01\x04\x83\x01_\x90[`\x02\x82\x10a\x0C;WPPP_\x82a\x01D\x810Z\xFA\x90\x81\x15a\x0C2WPa\x0C$WP\x80\xF3[a\x0C0\x91P_\x90a\r0V[\0[Q=_\x82>=\x90\xFD[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\x0C\0V[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\x0B\xEDV[_\x80\xFD[\x815\x81R` \x91\x82\x01\x91\x01a\x0B\xB0V[\x7F\x98\x80f\xA1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R\x7F\xA4YLY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`$R`D_\xFD[4a\x0CgW_`\x03\x196\x01\x12a\x0CgW\x80\x7F\xA4YLY\xBB\xC1B\xF3\xB8\x1C>\xCB\x7FP\xA7\xC3K\xC9\xAF|LDK]H\xB7\x95B~(Y\x13` \x92R\xF3[\x91\x81`\x1F\x84\x01\x12\x15a\x0CgW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x0CgW` \x83\x81\x86\x01\x95\x01\x01\x11a\x0CgWV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\rqW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[` \x91_\x91\x81`@Q\x92\x83\x92\x837\x81\x01\x83\x81R\x03\x90`\x02Z\xFA\x15a\r\xE3W\x7F\x1F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_Q\x16\x90V[`@Q=_\x82>=\x90\xFD[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x80\x15\x90a\x0E\xD9W[a\x0E\xA3W\x81\x15\x80a\x0E\xD1W[a\x0E\xCBWa\x0E]\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x85\x81\x81\x80\t\t\x08a\x14\x0BV[\x81\x81\x03a\x0ElWPP`\x01\x1B\x90V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14_\x14a\x0E\xA3W`\x01\x90\x81\x1B\x17\x90V[\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[PP_\x90V[P\x80\x15a\x0E&V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0E\x1AV[\x91\x90\x93\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x80\x15\x90a\x11\xB8W[\x80\x15a\x11\x8EW[\x80\x15a\x11dW[a\x0E\xA3W\x80\x82\x86\x85\x17\x17\x17\x15a\x11YW\x90\x82\x91a\x10\x96\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x88\x81\x80\x80\x8F\x9D\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x8F\x83\x92\x90\x83\x91\t\t\x9D\x8E\t\x81\x84\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x9A\t\x81\x8C\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x94\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x10]\x81\x80\x8B\x80\t\x81\x87\x80\t\x08a\x14\x0BV[\x84\x08\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\x10\x8A\x82a\x16\x1AV[\x80\t\x14\x15\x95\x86\x91a\x14AV[\x92\x90\x80\x82\x14\x80a\x11PW[\x15a\x10\xC8WPPPP\x90_\x14a\x10\xC0W`\xFF`\x02[\x16\x90`\x02\x1B\x17\x91\x90V[`\xFF_a\x10\xB6V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14\x91\x82a\x11\x1EW[PP\x15a\x0E\xA3W`\x01\x91\x15a\x11\x16W`\xFF`\x02[\x16\x90`\x02\x1B\x17\x17\x91\x90V[`\xFF_a\x11\x0BV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x91\x92P\x81\x90\x06\x81\x03\x06\x14_\x80a\x10\xF7V[P\x83\x83\x14a\x10\xA1V[PPP\x90P_\x90_\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0F@V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x15a\x0F9V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15a\x0F2V[\x80\x15a\x12\x7FW\x80`\x01\x1C\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15a\x0E\xA3W`\x01\x80a\x12K\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x88\x81\x81\x80\t\t\x08a\x14\x0BV[\x93\x16\x14a\x12TWV[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x90V[P_\x90_\x90V[\x80\x15\x80a\x14\x03W[a\x13\xF7W\x80`\x02\x1C\x92\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x80\x15\x90a\x13\xCDW[a\x0E\xA3W\x84\x81\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x80\x80\x80\x80\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x81a\x13\x84\x9D\x8D\t\t\x99\x8A\t\x81\x89\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x93`\x02\x80\x8A\x16\x14\x95\t\x81\x8A\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08a\x14AV[\x80\x92\x91`\x01\x80\x82\x96\x16\x14a\x13\x96WPPV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x93\x94P\x80\x92\x95P\x80\x91\x06\x81\x03\x06\x93\x06\x81\x03\x06\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x12\xC3V[PP_\x90_\x90_\x90_\x90V[P\x81\x15a\x12\x8EV[\x90a\x14\x15\x82a\x16\x1AV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x80\t\x03a\x0E\xA3WV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x14\xAC\x93\x96\x94\x96a\x14\x9E\x82\x80\x8A\x80\t\x81\x8A\x80\t\x08a\x14\x0BV[\x90a\x16\x0EW[\x86\x08\ta\x14\x0BV[\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x02\x85\t`@Q\x90` \x82R` \x80\x83\x01R` `@\x83\x01R\x80``\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDE`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x0E\xA3W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82`\x01\x92\t\x03a\x0E\xA3W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x90\x82\t\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x87\x80\t\x06\x81\x03\x06\x81\x87\x80\t\x08\x14\x90\x81\x15\x91a\x15\xDCW[Pa\x0E\xA3WV[\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x84\x86\t`\x02\t\x14\x15_a\x15\xD5V[\x81\x80\x91\x06\x81\x03\x06a\x14\xA4V[\x90`@Q\x91` \x83R` \x80\x84\x01R` `@\x84\x01R``\x83\x01R\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?R`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x0E\xA3WV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c9081632a51043614610cca5750806341493c6014610aa157806344f6369214610a065780636b61d8e7146109c1578063eddf243c146105d3578063f11817b21461013e5763ffa1ad741461006b575f80fd5b3461013b578060031936011261013b576040516040810181811067ffffffffffffffff82111761010e57906040918252600681527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602083017f76352e302e30000000000000000000000000000000000000000000000000000081528451958694602086525180928160208801528787015e85828601015201168101030190f35b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b80fd5b503461013b5760c060031936011261013b573660841161013b573660c41161013b57604051906103006101718184610d30565b803684376101806004356111e2565b610191602495929535604435611286565b919392906101a06064356111e2565b9390926040519660408801967f26091e1cafb0ad8a4ea0a694cd3743ebf524779233db734c451d28b58aa9758e895288600160208201997e9ff50a6b8b11c3ca6fdb2690a124f8ce25489fefa65a3e782e7ba70b66690e8b527f061c3fd0fd3da25d2607c227d090cca750ed36c6ec878755e537c1c48951fb4c81527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604060608501927f0fa17ae9c2033379df7b5c65eff0e107055e9a273e6119a212dd09eb5170721984527f07236256d21c60d02f0bdbf95cff83e03ea9e16fca56b18d5544b0889a65c1f560843596836080820198808a5286828660608160075afa9110169160808160065afa16947f04eab241388a79817fe0e0e2ead0b2ec4ffdec51a16028dee020634fd129e71c83525260a43580965260608160075afa931016161660408a60808160065afa169851975198156105ab5760209a9b9c8a528a8a015260408901526060880152608087015260a086015260c085015260e08401527f1cc7cb8de715675f21f01ecc9b46d236e0865e0cc020024521998269845f74e66101008401527f03ff41f4ba0c37fe2caf27354d28e4b8f83d3b76777a63b327d736bffb0122ed6101208401527f01909cd7827e0278e6b60843a4abc7b111d7f8b2725cd5902a6b20da7a2938fb6101408401527f192bd3274441670227b4f69a44005b8711266e474227c6439ca25ca8e1ec1fc26101608401527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808401527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08401527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08401527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08401527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008401527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f6102208401526102408301526102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e082015260405192839161055d8484610d30565b8336843760085afa1590811561059e575b506105765780f35b807f7fcdd1f40000000000000000000000000000000000000000000000000000000060049252fd5b600191505114155f61056e565b60048c7fa54f8e27000000000000000000000000000000000000000000000000000000008152fd5b503461013b5761014060031936011261013b57366101041161013b57366101441161013b5760405160408101907f26091e1cafb0ad8a4ea0a694cd3743ebf524779233db734c451d28b58aa9758e815260208101917e9ff50a6b8b11c3ca6fdb2690a124f8ce25489fefa65a3e782e7ba70b66690e83527f061c3fd0fd3da25d2607c227d090cca750ed36c6ec878755e537c1c48951fb4c81526001606083017f0fa17ae9c2033379df7b5c65eff0e107055e9a273e6119a212dd09eb5170721981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604061010435947f07236256d21c60d02f0bdbf95cff83e03ea9e16fca56b18d5544b0889a65c1f5608088019680885284848460608160075afa911016838960808160065afa16947f04eab241388a79817fe0e0e2ead0b2ec4ffdec51a16028dee020634fd129e71c8352526101243580965260608160075afa931016161660408260808160065afa169051915190156109995760405191610100600484377f1cc7cb8de715675f21f01ecc9b46d236e0865e0cc020024521998269845f74e66101008401527f03ff41f4ba0c37fe2caf27354d28e4b8f83d3b76777a63b327d736bffb0122ed6101208401527f01909cd7827e0278e6b60843a4abc7b111d7f8b2725cd5902a6b20da7a2938fb6101408401527f192bd3274441670227b4f69a44005b8711266e474227c6439ca25ca8e1ec1fc26101608401527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808401527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08401527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08401527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08401527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008401527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f6102208401526102408301526102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e08201526020816103008160085afa905116156105765780f35b6004837fa54f8e27000000000000000000000000000000000000000000000000000000008152fd5b503461013b57602060031936011261013b576004359067ffffffffffffffff821161013b5760206109fe6109f83660048601610d02565b90610d9e565b604051908152f35b503461013b5761010060031936011261013b57366101041161013b5760405190610a31608083610d30565b6080368337610a44602435600435610dee565b8252610a5a60843560a435604435606435610f03565b60208401526040830152610a7260e43560c435610dee565b60608301526040519190825b60048210610a8b57608084f35b6020806001928551815201930191019091610a7e565b5034610c67576060600319360112610c675760243567ffffffffffffffff8111610c6757610ad3903690600401610d02565b60443567ffffffffffffffff8111610c6757610af3903690600401610d02565b91909282600411610c67577fffffffff000000000000000000000000000000000000000000000000000000008435167fa4594c59000000000000000000000000000000000000000000000000000000008103610c7b575090610b5491610d9e565b604091825191610b648484610d30565b833684376004358352602083015283016101006003198583030112610c675780602385011215610c6757825193610b9d61010086610d30565b84906101048101928311610c6757600401905b828210610c6b57505050303b15610c675781517feddf243c000000000000000000000000000000000000000000000000000000008152925f600485015b60088210610c515750505061010483015f905b60028210610c3b575050505f8261014481305afa908115610c325750610c24575080f35b610c3091505f90610d30565b005b513d5f823e3d90fd5b6020806001928551815201930191019091610c00565b6020806001928551815201930191019091610bed565b5f80fd5b8135815260209182019101610bb0565b7f988066a1000000000000000000000000000000000000000000000000000000005f526004527fa4594c590000000000000000000000000000000000000000000000000000000060245260445ffd5b34610c67575f600319360112610c6757807fa4594c59bbc142f3b81c3ecb7f50a7c34bc9af7c4c444b5d48b795427e28591360209252f35b9181601f84011215610c675782359167ffffffffffffffff8311610c675760208381860195010111610c6757565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d7157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6020915f918160405192839283378101838152039060025afa15610de3577f1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5f511690565b6040513d5f823e3d90fd5b907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210801590610ed9575b610ea357811580610ed1575b610ecb57610e5d7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003818581818009090861140b565b818103610e6c57505060011b90565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47809106810306145f14610ea357600190811b1790565b7f7fcdd1f4000000000000000000000000000000000000000000000000000000005f5260045ffd5b50505f90565b508015610e26565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811015610e1a565b919093927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783108015906111b8575b801561118e575b8015611164575b610ea3578082868517171715611159579082916110967f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808080888180808f9d7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd448f839290839109099d8e0981848181800909087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5089a09818c8181800909087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e7750806810306947f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea48161105d81808b8009818780090861140b565b8408097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761108a8261161a565b80091415958691611441565b929080821480611150575b156110c85750505050905f146110c05760ff60025b169060021b179190565b60ff5f6110b6565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780910681030614918261111e575b505015610ea357600191156111165760ff60025b169060021b17179190565b60ff5f61110b565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47919250819006810306145f806110f7565b508383146110a1565b50505090505f905f90565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47811015610f40565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47821015610f39565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47851015610f32565b801561127f578060011c917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47831015610ea35760018061124b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003818881818009090861140b565b93161461125457565b907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780910681030690565b505f905f90565b801580611403575b6113f7578060021c92827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785108015906113cd575b610ea35784817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808080808080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd44816113849d8d0909998a0981898181800909087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e7750806810306936002808a16149509818a8181800909087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e508611441565b80929160018082961614611396575050565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478093945080929550809106810306930681030690565b507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110156112c3565b50505f905f905f905f90565b50811561128e565b906114158261161a565b917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783800903610ea357565b917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea4816114ac9396949661149e82808a8009818a80090861140b565b9061160e575b86080961140b565b927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47600285096040519060208252602080830152602060408301528060608301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4560808301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a083015260208260c08160055afa91519115610ea3577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47826001920903610ea3577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47908209927f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780808087800906810306818780090814908115916115dc575b50610ea357565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478084860960020914155f6115d5565b818091068103066114a4565b9060405191602083526020808401526020604084015260608301527f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f5260808301527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a083015260208260c08160055afa91519115610ea35756
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c*Q\x046\x14a\x0C\xCAWP\x80cAI<`\x14a\n\xA1W\x80cD\xF66\x92\x14a\n\x06W\x80cka\xD8\xE7\x14a\t\xC1W\x80c\xED\xDF$<\x14a\x05\xD3W\x80c\xF1\x18\x17\xB2\x14a\x01>Wc\xFF\xA1\xADt\x14a\0kW_\x80\xFD[4a\x01;W\x80`\x03\x196\x01\x12a\x01;W`@Q`@\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x01\x0EW\x90`@\x91\x82R`\x06\x81R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x83\x01\x7Fv5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x84Q\x95\x86\x94` \x86RQ\x80\x92\x81` \x88\x01R\x87\x87\x01^\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x90\xF3[`$\x83\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[\x80\xFD[P4a\x01;W`\xC0`\x03\x196\x01\x12a\x01;W6`\x84\x11a\x01;W6`\xC4\x11a\x01;W`@Q\x90a\x03\0a\x01q\x81\x84a\r0V[\x806\x847a\x01\x80`\x045a\x11\xE2V[a\x01\x91`$\x95\x92\x955`D5a\x12\x86V[\x91\x93\x92\x90a\x01\xA0`d5a\x11\xE2V[\x93\x90\x92`@Q\x96`@\x88\x01\x96\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x89R\x88`\x01` \x82\x01\x99~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x8BR\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@``\x85\x01\x92\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x84R\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x845\x96\x83`\x80\x82\x01\x98\x80\x8AR\x86\x82\x86``\x81`\x07Z\xFA\x91\x10\x16\x91`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RR`\xA45\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x8A`\x80\x81`\x06Z\xFA\x16\x98Q\x97Q\x98\x15a\x05\xABW` \x9A\x9B\x9C\x8AR\x8A\x8A\x01R`@\x89\x01R``\x88\x01R`\x80\x87\x01R`\xA0\x86\x01R`\xC0\x85\x01R`\xE0\x84\x01R\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01R`@Q\x92\x83\x91a\x05]\x84\x84a\r0V[\x836\x847`\x08Z\xFA\x15\x90\x81\x15a\x05\x9EW[Pa\x05vW\x80\xF3[\x80\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x04\x92R\xFD[`\x01\x91PQ\x14\x15_a\x05nV[`\x04\x8C\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[P4a\x01;Wa\x01@`\x03\x196\x01\x12a\x01;W6a\x01\x04\x11a\x01;W6a\x01D\x11a\x01;W`@Q`@\x81\x01\x90\x7F&\t\x1E\x1C\xAF\xB0\xAD\x8AN\xA0\xA6\x94\xCD7C\xEB\xF5$w\x923\xDBsLE\x1D(\xB5\x8A\xA9u\x8E\x81R` \x81\x01\x91~\x9F\xF5\nk\x8B\x11\xC3\xCAo\xDB&\x90\xA1$\xF8\xCE%H\x9F\xEF\xA6Z>x.{\xA7\x0Bfi\x0E\x83R\x7F\x06\x1C?\xD0\xFD=\xA2]&\x07\xC2'\xD0\x90\xCC\xA7P\xED6\xC6\xEC\x87\x87U\xE57\xC1\xC4\x89Q\xFBL\x81R`\x01``\x83\x01\x7F\x0F\xA1z\xE9\xC2\x033y\xDF{\\e\xEF\xF0\xE1\x07\x05^\x9A'>a\x19\xA2\x12\xDD\t\xEBQpr\x19\x81R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01`@a\x01\x045\x94\x7F\x07#bV\xD2\x1C`\xD0/\x0B\xDB\xF9\\\xFF\x83\xE0>\xA9\xE1o\xCAV\xB1\x8DUD\xB0\x88\x9Ae\xC1\xF5`\x80\x88\x01\x96\x80\x88R\x84\x84\x84``\x81`\x07Z\xFA\x91\x10\x16\x83\x89`\x80\x81`\x06Z\xFA\x16\x94\x7F\x04\xEA\xB2A8\x8Ay\x81\x7F\xE0\xE0\xE2\xEA\xD0\xB2\xECO\xFD\xECQ\xA1`(\xDE\xE0 cO\xD1)\xE7\x1C\x83RRa\x01$5\x80\x96R``\x81`\x07Z\xFA\x93\x10\x16\x16\x16`@\x82`\x80\x81`\x06Z\xFA\x16\x90Q\x91Q\x90\x15a\t\x99W`@Q\x91a\x01\0`\x04\x847\x7F\x1C\xC7\xCB\x8D\xE7\x15g_!\xF0\x1E\xCC\x9BF\xD26\xE0\x86^\x0C\xC0 \x02E!\x99\x82i\x84_t\xE6a\x01\0\x84\x01R\x7F\x03\xFFA\xF4\xBA\x0C7\xFE,\xAF'5M(\xE4\xB8\xF8=;vwzc\xB3'\xD76\xBF\xFB\x01\"\xEDa\x01 \x84\x01R\x7F\x01\x90\x9C\xD7\x82~\x02x\xE6\xB6\x08C\xA4\xAB\xC7\xB1\x11\xD7\xF8\xB2r\\\xD5\x90*k \xDAz)8\xFBa\x01@\x84\x01R\x7F\x19+\xD3'DAg\x02'\xB4\xF6\x9AD\0[\x87\x11&nGB'\xC6C\x9C\xA2\\\xA8\xE1\xEC\x1F\xC2a\x01`\x84\x01R\x7F-M\x9A\xA7\xE3\x02\xD9\xDFAt\x9DU\x07\x94\x9D\x05\xDB\xEA3\xFB\xB1ld;\"\xF5\x99\xA2\xBEm\xF2\xE2a\x01\x80\x84\x01R\x7F\x14\xBE\xDDP<7\xCE\xB0a\xD8\xEC` \x9F\xE3E\xCE\x89\x83\n\x19#\x03\x01\xF0v\xCA\xFF\0M\x19&a\x01\xA0\x84\x01R\x7F\tg\x03/\xCB\xF7v\xD1\xAF\xC9\x85\xF8\x88w\xF1\x82\xD3\x84\x80\xA6S\xF2\xDE\xCA\xA9yL\xBC;\xF3\x06\x0Ca\x01\xC0\x84\x01R\x7F\x0E\x18xG\xADLy\x83t\xD0\xD6s+\xF5\x01\x84}\xD6\x8B\xC0\xE0q$\x1E\x02\x13\xBC\x7F\xC1=\xB7\xABa\x01\xE0\x84\x01R~\x17R\xA1\0\xA7/\xDF\x1EZ]n\xA8A\xCC \xEC\x83\x8B\xCC\xFC\xF7\xBDU\x9Ey\xF1\xC9\xC7Y\xB6\xA0a\x02\0\x84\x01R\x7F\x19*\x8C\xC1<\xD9\xF7b\x87\x1F!\xE44Q\xC6\xCA\x9E\xEA\xB2\xCB)\x87\xC4\xE3f\xA1\x85\xC2]\xAC.\x7Fa\x02 \x84\x01Ra\x02@\x83\x01Ra\x02`\x82\x01R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2a\x02\x80\x82\x01R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xEDa\x02\xA0\x82\x01R\x7F']\xC4\xA2\x88\xD1\xAF\xB3\xCB\xB1\xAC\t\x18u$\xC7\xDB69]\xF7\xBE;\x99\xE6s\xB1:\x07Ze\xECa\x02\xC0\x82\x01R\x7F\x1D\x9B\xEF\xCD\x05\xA52>m\xA4\xD45\xF3\xB6\x17\xCD\xB3\xAF\x83(\\-\xF7\x11\xEF9\xC0\x15q\x82\x7F\x9Da\x02\xE0\x82\x01R` \x81a\x03\0\x81`\x08Z\xFA\x90Q\x16\x15a\x05vW\x80\xF3[`\x04\x83\x7F\xA5O\x8E'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\xFD[P4a\x01;W` `\x03\x196\x01\x12a\x01;W`\x045\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x01;W` a\t\xFEa\t\xF86`\x04\x86\x01a\r\x02V[\x90a\r\x9EV[`@Q\x90\x81R\xF3[P4a\x01;Wa\x01\0`\x03\x196\x01\x12a\x01;W6a\x01\x04\x11a\x01;W`@Q\x90a\n1`\x80\x83a\r0V[`\x806\x837a\nD`$5`\x045a\r\xEEV[\x82Ra\nZ`\x845`\xA45`D5`d5a\x0F\x03V[` \x84\x01R`@\x83\x01Ra\nr`\xE45`\xC45a\r\xEEV[``\x83\x01R`@Q\x91\x90\x82[`\x04\x82\x10a\n\x8BW`\x80\x84\xF3[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\n~V[P4a\x0CgW```\x03\x196\x01\x12a\x0CgW`$5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0CgWa\n\xD3\x906\x90`\x04\x01a\r\x02V[`D5g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0CgWa\n\xF3\x906\x90`\x04\x01a\r\x02V[\x91\x90\x92\x82`\x04\x11a\x0CgW\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x845\x16\x7F\xA4YLY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x03a\x0C{WP\x90a\x0BT\x91a\r\x9EV[`@\x91\x82Q\x91a\x0Bd\x84\x84a\r0V[\x836\x847`\x045\x83R` \x83\x01R\x83\x01a\x01\0`\x03\x19\x85\x83\x03\x01\x12a\x0CgW\x80`#\x85\x01\x12\x15a\x0CgW\x82Q\x93a\x0B\x9Da\x01\0\x86a\r0V[\x84\x90a\x01\x04\x81\x01\x92\x83\x11a\x0CgW`\x04\x01\x90[\x82\x82\x10a\x0CkWPPP0;\x15a\x0CgW\x81Q\x7F\xED\xDF$<\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x92_`\x04\x85\x01[`\x08\x82\x10a\x0CQWPPPa\x01\x04\x83\x01_\x90[`\x02\x82\x10a\x0C;WPPP_\x82a\x01D\x810Z\xFA\x90\x81\x15a\x0C2WPa\x0C$WP\x80\xF3[a\x0C0\x91P_\x90a\r0V[\0[Q=_\x82>=\x90\xFD[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\x0C\0V[` \x80`\x01\x92\x85Q\x81R\x01\x93\x01\x91\x01\x90\x91a\x0B\xEDV[_\x80\xFD[\x815\x81R` \x91\x82\x01\x91\x01a\x0B\xB0V[\x7F\x98\x80f\xA1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R\x7F\xA4YLY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`$R`D_\xFD[4a\x0CgW_`\x03\x196\x01\x12a\x0CgW\x80\x7F\xA4YLY\xBB\xC1B\xF3\xB8\x1C>\xCB\x7FP\xA7\xC3K\xC9\xAF|LDK]H\xB7\x95B~(Y\x13` \x92R\xF3[\x91\x81`\x1F\x84\x01\x12\x15a\x0CgW\x825\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x0CgW` \x83\x81\x86\x01\x95\x01\x01\x11a\x0CgWV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\rqW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[` \x91_\x91\x81`@Q\x92\x83\x92\x837\x81\x01\x83\x81R\x03\x90`\x02Z\xFA\x15a\r\xE3W\x7F\x1F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF_Q\x16\x90V[`@Q=_\x82>=\x90\xFD[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x80\x15\x90a\x0E\xD9W[a\x0E\xA3W\x81\x15\x80a\x0E\xD1W[a\x0E\xCBWa\x0E]\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x85\x81\x81\x80\t\t\x08a\x14\x0BV[\x81\x81\x03a\x0ElWPP`\x01\x1B\x90V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14_\x14a\x0E\xA3W`\x01\x90\x81\x1B\x17\x90V[\x7F\x7F\xCD\xD1\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04_\xFD[PP_\x90V[P\x80\x15a\x0E&V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0E\x1AV[\x91\x90\x93\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x80\x15\x90a\x11\xB8W[\x80\x15a\x11\x8EW[\x80\x15a\x11dW[a\x0E\xA3W\x80\x82\x86\x85\x17\x17\x17\x15a\x11YW\x90\x82\x91a\x10\x96\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x88\x81\x80\x80\x8F\x9D\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x8F\x83\x92\x90\x83\x91\t\t\x9D\x8E\t\x81\x84\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08\x9A\t\x81\x8C\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x94\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x10]\x81\x80\x8B\x80\t\x81\x87\x80\t\x08a\x14\x0BV[\x84\x08\t\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDGa\x10\x8A\x82a\x16\x1AV[\x80\t\x14\x15\x95\x86\x91a\x14AV[\x92\x90\x80\x82\x14\x80a\x11PW[\x15a\x10\xC8WPPPP\x90_\x14a\x10\xC0W`\xFF`\x02[\x16\x90`\x02\x1B\x17\x91\x90V[`\xFF_a\x10\xB6V[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x14\x91\x82a\x11\x1EW[PP\x15a\x0E\xA3W`\x01\x91\x15a\x11\x16W`\xFF`\x02[\x16\x90`\x02\x1B\x17\x17\x91\x90V[`\xFF_a\x11\x0BV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x91\x92P\x81\x90\x06\x81\x03\x06\x14_\x80a\x10\xF7V[P\x83\x83\x14a\x10\xA1V[PPP\x90P_\x90_\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x0F@V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82\x10\x15a\x0F9V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x15a\x0F2V[\x80\x15a\x12\x7FW\x80`\x01\x1C\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x10\x15a\x0E\xA3W`\x01\x80a\x12K\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x03\x81\x88\x81\x81\x80\t\t\x08a\x14\x0BV[\x93\x16\x14a\x12TWV[\x90\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x91\x06\x81\x03\x06\x90V[P_\x90_\x90V[\x80\x15\x80a\x14\x03W[a\x13\xF7W\x80`\x02\x1C\x92\x82\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x85\x10\x80\x15\x90a\x13\xCDW[a\x0E\xA3W\x84\x81\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x80\x80\x80\x80\x80\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDD\x81a\x13\x84\x9D\x8D\t\t\x99\x8A\t\x81\x89\x81\x81\x80\t\t\x08\x7F/\xCD:\xC2\xA6@\xA1T\xEB#\x96\x08\x92\xA8Zh\xF01\xCA\x0C\x83D\xB2:W}\xCF\x10R\xB9\xE7u\x08\x06\x81\x03\x06\x93`\x02\x80\x8A\x16\x14\x95\t\x81\x8A\x81\x81\x80\t\t\x08\x7F+\x14\x9D@\xCE\xB8\xAA\xAE\x81\xBE\x18\x99\x1B\xE0j\xC3\xB5\xB4\xC5\xE5Y\xDB\xEF\xA32g\xE6\xDC$\xA18\xE5\x08a\x14AV[\x80\x92\x91`\x01\x80\x82\x96\x16\x14a\x13\x96WPPV[\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x93\x94P\x80\x92\x95P\x80\x91\x06\x81\x03\x06\x93\x06\x81\x03\x06\x90V[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x81\x10\x15a\x12\xC3V[PP_\x90_\x90_\x90_\x90V[P\x81\x15a\x12\x8EV[\x90a\x14\x15\x82a\x16\x1AV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x80\t\x03a\x0E\xA3WV[\x91\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x7F\x182'9p\x98\xD0\x14\xDC(\"\xDB@\xC0\xAC.\xCB\xC0\xB5H\xB48\xE5F\x9E\x10F\x0Bl>~\xA4\x81a\x14\xAC\x93\x96\x94\x96a\x14\x9E\x82\x80\x8A\x80\t\x81\x8A\x80\t\x08a\x14\x0BV[\x90a\x16\x0EW[\x86\x08\ta\x14\x0BV[\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\x02\x85\t`@Q\x90` \x82R` \x80\x83\x01R` `@\x83\x01R\x80``\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDE`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x0E\xA3W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x82`\x01\x92\t\x03a\x0E\xA3W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x90\x82\t\x92\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x80\x80\x87\x80\t\x06\x81\x03\x06\x81\x87\x80\t\x08\x14\x90\x81\x15\x91a\x15\xDCW[Pa\x0E\xA3WV[\x90P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x80\x84\x86\t`\x02\t\x14\x15_a\x15\xD5V[\x81\x80\x91\x06\x81\x03\x06a\x14\xA4V[\x90`@Q\x91` \x83R` \x80\x84\x01R` `@\x84\x01R``\x83\x01R\x7F\x0C\x19\x13\x9C\xB8Lh\nn\x14\x11m\xA0`V\x17e\xE0Z\xA4Z\x1Cr\xA3O\x08#\x05\xB6\x1F?R`\x80\x83\x01R\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG`\xA0\x83\x01R` \x82`\xC0\x81`\x05Z\xFA\x91Q\x91\x15a\x0E\xA3WV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidProof()` and selector `0x09bde339`.
```solidity
error InvalidProof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidProof;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidProof> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidProof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidProof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidProof()";
            const SELECTOR: [u8; 4] = [9u8, 189u8, 227u8, 57u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ProofInvalid()` and selector `0x7fcdd1f4`.
```solidity
error ProofInvalid();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ProofInvalid;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ProofInvalid> for UnderlyingRustTuple<'_> {
            fn from(value: ProofInvalid) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ProofInvalid {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ProofInvalid {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ProofInvalid()";
            const SELECTOR: [u8; 4] = [127u8, 205u8, 209u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `PublicInputNotInField()` and selector `0xa54f8e27`.
```solidity
error PublicInputNotInField();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PublicInputNotInField;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PublicInputNotInField> for UnderlyingRustTuple<'_> {
            fn from(value: PublicInputNotInField) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PublicInputNotInField {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PublicInputNotInField {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PublicInputNotInField()";
            const SELECTOR: [u8; 4] = [165u8, 79u8, 142u8, 39u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `WrongVerifierSelector(bytes4,bytes4)` and selector `0x988066a1`.
```solidity
error WrongVerifierSelector(bytes4 received, bytes4 expected);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct WrongVerifierSelector {
        #[allow(missing_docs)]
        pub received: alloy::sol_types::private::FixedBytes<4>,
        #[allow(missing_docs)]
        pub expected: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<4>,
            alloy::sol_types::sol_data::FixedBytes<4>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<4>,
            alloy::sol_types::private::FixedBytes<4>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<WrongVerifierSelector> for UnderlyingRustTuple<'_> {
            fn from(value: WrongVerifierSelector) -> Self {
                (value.received, value.expected)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for WrongVerifierSelector {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    received: tuple.0,
                    expected: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for WrongVerifierSelector {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "WrongVerifierSelector(bytes4,bytes4)";
            const SELECTOR: [u8; 4] = [152u8, 128u8, 102u8, 161u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.received),
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.expected),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `VERIFIER_HASH()` and selector `0x2a510436`.
```solidity
function VERIFIER_HASH() external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERIFIER_HASHCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`VERIFIER_HASH()`](VERIFIER_HASHCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERIFIER_HASHReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERIFIER_HASHCall> for UnderlyingRustTuple<'_> {
                fn from(value: VERIFIER_HASHCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERIFIER_HASHCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERIFIER_HASHReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VERIFIER_HASHReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERIFIER_HASHReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VERIFIER_HASHCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "VERIFIER_HASH()";
            const SELECTOR: [u8; 4] = [42u8, 81u8, 4u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: VERIFIER_HASHReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: VERIFIER_HASHReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `VERSION()` and selector `0xffa1ad74`.
```solidity
function VERSION() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERSIONCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`VERSION()`](VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERSIONCall> for UnderlyingRustTuple<'_> {
                fn from(value: VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VERSIONReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "VERSION()";
            const SELECTOR: [u8; 4] = [255u8, 161u8, 173u8, 116u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: VERSIONReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: VERSIONReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `Verify(uint256[8],uint256[2])` and selector `0xeddf243c`.
```solidity
function Verify(uint256[8] memory proof, uint256[2] memory input) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VerifyCall {
        #[allow(missing_docs)]
        pub proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
        #[allow(missing_docs)]
        pub input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
    }
    ///Container type for the return parameters of the [`Verify(uint256[8],uint256[2])`](VerifyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VerifyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 8usize],
                [alloy::sol_types::private::primitives::aliases::U256; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VerifyCall> for UnderlyingRustTuple<'_> {
                fn from(value: VerifyCall) -> Self {
                    (value.proof, value.input)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VerifyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proof: tuple.0,
                        input: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<VerifyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: VerifyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for VerifyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl VerifyReturn {
            fn _tokenize(
                &self,
            ) -> <VerifyCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for VerifyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = VerifyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Verify(uint256[8],uint256[2])";
            const SELECTOR: [u8; 4] = [237u8, 223u8, 36u8, 60u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        8usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.input),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                VerifyReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `compressProof(uint256[8])` and selector `0x44f63692`.
```solidity
function compressProof(uint256[8] memory proof) external view returns (uint256[4] memory compressed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compressProofCall {
        #[allow(missing_docs)]
        pub proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`compressProof(uint256[8])`](compressProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compressProofReturn {
        #[allow(missing_docs)]
        pub compressed: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 8usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compressProofCall> for UnderlyingRustTuple<'_> {
                fn from(value: compressProofCall) -> Self {
                    (value.proof,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for compressProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proof: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compressProofReturn> for UnderlyingRustTuple<'_> {
                fn from(value: compressProofReturn) -> Self {
                    (value.compressed,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for compressProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { compressed: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for compressProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    8usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = [alloy::sol_types::private::primitives::aliases::U256; 4usize];
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "compressProof(uint256[8])";
            const SELECTOR: [u8; 4] = [68u8, 246u8, 54u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        8usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.proof),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: compressProofReturn = r.into();
                        r.compressed
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: compressProofReturn = r.into();
                        r.compressed
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hashPublicValues(bytes)` and selector `0x6b61d8e7`.
```solidity
function hashPublicValues(bytes memory publicValues) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hashPublicValuesCall {
        #[allow(missing_docs)]
        pub publicValues: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hashPublicValues(bytes)`](hashPublicValuesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hashPublicValuesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hashPublicValuesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: hashPublicValuesCall) -> Self {
                    (value.publicValues,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hashPublicValuesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { publicValues: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hashPublicValuesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hashPublicValuesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hashPublicValuesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hashPublicValuesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hashPublicValues(bytes)";
            const SELECTOR: [u8; 4] = [107u8, 97u8, 216u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.publicValues,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hashPublicValuesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hashPublicValuesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyCompressedProof(uint256[4],uint256[2])` and selector `0xf11817b2`.
```solidity
function verifyCompressedProof(uint256[4] memory compressedProof, uint256[2] memory input) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCompressedProofCall {
        #[allow(missing_docs)]
        pub compressedProof: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
        #[allow(missing_docs)]
        pub input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
    }
    ///Container type for the return parameters of the [`verifyCompressedProof(uint256[4],uint256[2])`](verifyCompressedProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCompressedProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 4usize],
                [alloy::sol_types::private::primitives::aliases::U256; 2usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCompressedProofCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyCompressedProofCall) -> Self {
                    (value.compressedProof, value.input)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyCompressedProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        compressedProof: tuple.0,
                        input: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCompressedProofReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: verifyCompressedProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for verifyCompressedProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl verifyCompressedProofReturn {
            fn _tokenize(
                &self,
            ) -> <verifyCompressedProofCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyCompressedProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                >,
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    2usize,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyCompressedProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyCompressedProof(uint256[4],uint256[2])";
            const SELECTOR: [u8; 4] = [241u8, 24u8, 23u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.compressedProof),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.input),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                verifyCompressedProofReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyProof(bytes32,bytes,bytes)` and selector `0x41493c60`.
```solidity
function verifyProof(bytes32 programVKey, bytes memory publicValues, bytes memory proofBytes) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofCall {
        #[allow(missing_docs)]
        pub programVKey: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub proofBytes: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`verifyProof(bytes32,bytes,bytes)`](verifyProofCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyProofReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofCall) -> Self {
                    (value.programVKey, value.publicValues, value.proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        programVKey: tuple.0,
                        publicValues: tuple.1,
                        proofBytes: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyProofReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyProofReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyProofReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl verifyProofReturn {
            fn _tokenize(
                &self,
            ) -> <verifyProofCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyProofCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyProofReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyProof(bytes32,bytes,bytes)";
            const SELECTOR: [u8; 4] = [65u8, 73u8, 60u8, 96u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.programVKey),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proofBytes,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                verifyProofReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SP1Verifier`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum SP1VerifierCalls {
        #[allow(missing_docs)]
        VERIFIER_HASH(VERIFIER_HASHCall),
        #[allow(missing_docs)]
        VERSION(VERSIONCall),
        #[allow(missing_docs)]
        Verify(VerifyCall),
        #[allow(missing_docs)]
        compressProof(compressProofCall),
        #[allow(missing_docs)]
        hashPublicValues(hashPublicValuesCall),
        #[allow(missing_docs)]
        verifyCompressedProof(verifyCompressedProofCall),
        #[allow(missing_docs)]
        verifyProof(verifyProofCall),
    }
    #[automatically_derived]
    impl SP1VerifierCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [42u8, 81u8, 4u8, 54u8],
            [65u8, 73u8, 60u8, 96u8],
            [68u8, 246u8, 54u8, 146u8],
            [107u8, 97u8, 216u8, 231u8],
            [237u8, 223u8, 36u8, 60u8],
            [241u8, 24u8, 23u8, 178u8],
            [255u8, 161u8, 173u8, 116u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SP1VerifierCalls {
        const NAME: &'static str = "SP1VerifierCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::VERIFIER_HASH(_) => {
                    <VERIFIER_HASHCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::VERSION(_) => <VERSIONCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::Verify(_) => <VerifyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::compressProof(_) => {
                    <compressProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hashPublicValues(_) => {
                    <hashPublicValuesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifyCompressedProof(_) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::verifyProof(_) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierCalls>] = &[
                {
                    fn VERIFIER_HASH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <VERIFIER_HASHCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierCalls::VERIFIER_HASH)
                    }
                    VERIFIER_HASH
                },
                {
                    fn verifyProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <verifyProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierCalls::verifyProof)
                    }
                    verifyProof
                },
                {
                    fn compressProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <compressProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierCalls::compressProof)
                    }
                    compressProof
                },
                {
                    fn hashPublicValues(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <hashPublicValuesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierCalls::hashPublicValues)
                    }
                    hashPublicValues
                },
                {
                    fn Verify(data: &[u8]) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <VerifyCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SP1VerifierCalls::Verify)
                    }
                    Verify
                },
                {
                    fn verifyCompressedProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierCalls::verifyCompressedProof)
                    }
                    verifyCompressedProof
                },
                {
                    fn VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SP1VerifierCalls::VERSION)
                    }
                    VERSION
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierCalls>] = &[
                {
                    fn VERIFIER_HASH(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <VERIFIER_HASHCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierCalls::VERIFIER_HASH)
                    }
                    VERIFIER_HASH
                },
                {
                    fn verifyProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <verifyProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierCalls::verifyProof)
                    }
                    verifyProof
                },
                {
                    fn compressProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <compressProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierCalls::compressProof)
                    }
                    compressProof
                },
                {
                    fn hashPublicValues(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <hashPublicValuesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierCalls::hashPublicValues)
                    }
                    hashPublicValues
                },
                {
                    fn Verify(data: &[u8]) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <VerifyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierCalls::Verify)
                    }
                    Verify
                },
                {
                    fn verifyCompressedProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierCalls::verifyCompressedProof)
                    }
                    verifyCompressedProof
                },
                {
                    fn VERSION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierCalls> {
                        <VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierCalls::VERSION)
                    }
                    VERSION
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::VERIFIER_HASH(inner) => {
                    <VERIFIER_HASHCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::VERSION(inner) => {
                    <VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::Verify(inner) => {
                    <VerifyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::compressProof(inner) => {
                    <compressProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hashPublicValues(inner) => {
                    <hashPublicValuesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifyCompressedProof(inner) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::VERIFIER_HASH(inner) => {
                    <VERIFIER_HASHCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::VERSION(inner) => {
                    <VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::Verify(inner) => {
                    <VerifyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::compressProof(inner) => {
                    <compressProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hashPublicValues(inner) => {
                    <hashPublicValuesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyCompressedProof(inner) => {
                    <verifyCompressedProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verifyProof(inner) => {
                    <verifyProofCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SP1Verifier`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SP1VerifierErrors {
        #[allow(missing_docs)]
        InvalidProof(InvalidProof),
        #[allow(missing_docs)]
        ProofInvalid(ProofInvalid),
        #[allow(missing_docs)]
        PublicInputNotInField(PublicInputNotInField),
        #[allow(missing_docs)]
        WrongVerifierSelector(WrongVerifierSelector),
    }
    #[automatically_derived]
    impl SP1VerifierErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 189u8, 227u8, 57u8],
            [127u8, 205u8, 209u8, 244u8],
            [152u8, 128u8, 102u8, 161u8],
            [165u8, 79u8, 142u8, 39u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SP1VerifierErrors {
        const NAME: &'static str = "SP1VerifierErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::InvalidProof(_) => {
                    <InvalidProof as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ProofInvalid(_) => {
                    <ProofInvalid as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PublicInputNotInField(_) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::SELECTOR
                }
                Self::WrongVerifierSelector(_) => {
                    <WrongVerifierSelector as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(SP1VerifierErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ProofInvalid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <ProofInvalid as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(SP1VerifierErrors::ProofInvalid)
                    }
                    ProofInvalid
                },
                {
                    fn WrongVerifierSelector(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <WrongVerifierSelector as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierErrors::WrongVerifierSelector)
                    }
                    WrongVerifierSelector
                },
                {
                    fn PublicInputNotInField(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <PublicInputNotInField as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SP1VerifierErrors::PublicInputNotInField)
                    }
                    PublicInputNotInField
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SP1VerifierErrors>] = &[
                {
                    fn InvalidProof(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <InvalidProof as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierErrors::InvalidProof)
                    }
                    InvalidProof
                },
                {
                    fn ProofInvalid(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <ProofInvalid as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierErrors::ProofInvalid)
                    }
                    ProofInvalid
                },
                {
                    fn WrongVerifierSelector(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <WrongVerifierSelector as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierErrors::WrongVerifierSelector)
                    }
                    WrongVerifierSelector
                },
                {
                    fn PublicInputNotInField(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SP1VerifierErrors> {
                        <PublicInputNotInField as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SP1VerifierErrors::PublicInputNotInField)
                    }
                    PublicInputNotInField
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ProofInvalid(inner) => {
                    <ProofInvalid as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::PublicInputNotInField(inner) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::WrongVerifierSelector(inner) => {
                    <WrongVerifierSelector as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::InvalidProof(inner) => {
                    <InvalidProof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ProofInvalid(inner) => {
                    <ProofInvalid as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PublicInputNotInField(inner) => {
                    <PublicInputNotInField as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::WrongVerifierSelector(inner) => {
                    <WrongVerifierSelector as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SP1Verifier`](self) contract instance.

See the [wrapper's documentation](`SP1VerifierInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        __provider: P,
    ) -> SP1VerifierInstance<P, N> {
        SP1VerifierInstance::<P, N>::new(address, __provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SP1VerifierInstance<P, N>>,
    > {
        SP1VerifierInstance::<P, N>::deploy(__provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        SP1VerifierInstance::<P, N>::deploy_builder(__provider)
    }
    /**A [`SP1Verifier`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SP1Verifier`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SP1VerifierInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for SP1VerifierInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SP1VerifierInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SP1VerifierInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`SP1Verifier`](self) contract instance.

See the [wrapper's documentation](`SP1VerifierInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            __provider: P,
        ) -> Self {
            Self {
                address,
                provider: __provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            __provider: P,
        ) -> alloy_contract::Result<SP1VerifierInstance<P, N>> {
            let call_builder = Self::deploy_builder(__provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(__provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                __provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> SP1VerifierInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SP1VerifierInstance<P, N> {
            SP1VerifierInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SP1VerifierInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`VERIFIER_HASH`] function.
        pub fn VERIFIER_HASH(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, VERIFIER_HASHCall, N> {
            self.call_builder(&VERIFIER_HASHCall)
        }
        ///Creates a new call builder for the [`VERSION`] function.
        pub fn VERSION(&self) -> alloy_contract::SolCallBuilder<&P, VERSIONCall, N> {
            self.call_builder(&VERSIONCall)
        }
        ///Creates a new call builder for the [`Verify`] function.
        pub fn Verify(
            &self,
            proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
            input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
        ) -> alloy_contract::SolCallBuilder<&P, VerifyCall, N> {
            self.call_builder(&VerifyCall { proof, input })
        }
        ///Creates a new call builder for the [`compressProof`] function.
        pub fn compressProof(
            &self,
            proof: [alloy::sol_types::private::primitives::aliases::U256; 8usize],
        ) -> alloy_contract::SolCallBuilder<&P, compressProofCall, N> {
            self.call_builder(&compressProofCall { proof })
        }
        ///Creates a new call builder for the [`hashPublicValues`] function.
        pub fn hashPublicValues(
            &self,
            publicValues: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, hashPublicValuesCall, N> {
            self.call_builder(
                &hashPublicValuesCall {
                    publicValues,
                },
            )
        }
        ///Creates a new call builder for the [`verifyCompressedProof`] function.
        pub fn verifyCompressedProof(
            &self,
            compressedProof: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            input: [alloy::sol_types::private::primitives::aliases::U256; 2usize],
        ) -> alloy_contract::SolCallBuilder<&P, verifyCompressedProofCall, N> {
            self.call_builder(
                &verifyCompressedProofCall {
                    compressedProof,
                    input,
                },
            )
        }
        ///Creates a new call builder for the [`verifyProof`] function.
        pub fn verifyProof(
            &self,
            programVKey: alloy::sol_types::private::FixedBytes<32>,
            publicValues: alloy::sol_types::private::Bytes,
            proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, verifyProofCall, N> {
            self.call_builder(
                &verifyProofCall {
                    programVKey,
                    publicValues,
                    proofBytes,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SP1VerifierInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
