/**

Generated by the following Solidity interface...
```solidity
interface GrantMinterRole {
    function IS_SCRIPT() external view returns (bool);
    function MINTER_ROLE() external view returns (bytes32);
    function run() external;
    function synd() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MINTER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "synd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract AccessControl"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GrantMinterRole {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002757610011610036565b61001961002c565b610c176101068239610c1790f35b610032565b60405190565b5f80fd5b61003e610092565b565b60101b90565b9061005462ff000091610040565b9181191691161790565b151590565b61006c9061005e565b90565b90565b9061008761008261008e92610063565b61006f565b8254610046565b9055565b61009a6100a8565b6100a66001600c610072565b565b6100b06100b2565b565b6100ba6100f7565b565b5f1b90565b906100cd60ff916100bc565b9181191691161790565b906100ec6100e76100f392610063565b61006f565b82546100c1565b9055565b6101036001600c6100d7565b56fe60806040526004361015610013575b6102b6565b61001d5f3561005c565b8063a5220ded14610057578063c040622614610052578063d53913931461004d5763f8ccbf470361000e57610281565b6101e9565b610162565b610128565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261007a57565b61006c565b1c90565b60018060a01b031690565b61009e9060086100a3930261007f565b610083565b90565b906100b1915461008e565b90565b6100c1600c6003906100a6565b90565b60018060a01b031690565b90565b6100e66100e16100eb926100c4565b6100cf565b6100c4565b90565b6100f7906100d2565b90565b610103906100ee565b90565b61010f906100fa565b9052565b9190610126905f60208501940190610106565b565b3461015857610138366004610070565b6101546101436100b4565b61014b610062565b91829182610113565b0390f35b610068565b5f0190565b3461019057610172366004610070565b61017a610782565b610182610062565b8061018c8161015d565b0390f35b610068565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b6101c1610195565b90565b90565b6101d0906101c4565b9052565b91906101e7905f602085019401906101c7565b565b34610219576101f9366004610070565b6102156102046101b9565b61020c610062565b918291826101d4565b0390f35b610068565b60ff1690565b610234906008610239930261007f565b61021e565b90565b906102479154610224565b90565b610257600c60029061023c565b90565b151590565b6102689061025a565b9052565b919061027f905f6020850194019061025f565b565b346102b157610291366004610070565b6102ad61029c61024a565b6102a4610062565b9182918261026c565b0390f35b610068565b5f80fd5b5f1c90565b90565b6102d66102d16102db926102bf565b6100cf565b6102bf565b90565b6102ea6102ef916102ba565b6102c2565b90565b61030661030161030b926102bf565b6100cf565b6100c4565b90565b61034761034261033d7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d6102de565b6102f2565b6100ee565b90565b610353906100d2565b90565b61035f9061034a565b90565b61037261036d61030e565b610356565b90565b61037e906100ee565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906103ad90610385565b810190811067ffffffffffffffff8211176103c757604052565b61038f565b60e01b90565b5f9103126103dc57565b61006c565b6103e9610062565b3d5f823e3d90fd5b90565b61040861040361040d926103f1565b6100cf565b6102bf565b90565b9061042361041c610062565b92836103a3565b565b67ffffffffffffffff811161043d5760208091020190565b61038f565b9061045461044f83610425565b610410565b918252565b369037565b9061048361046b83610442565b926020806104798693610425565b9201910390610459565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b906104a782610499565b8110156104b8576020809102010190565b610485565b90565b6104d46104cf6104d9926104bd565b6100cf565b6102bf565b90565b6104e5906100c4565b90565b906104f2906104dc565b9052565b90565b61050d610508610512926104f6565b6100cf565b6102bf565b90565b90565b61052c61052761053192610515565b6100cf565b6102bf565b90565b90565b61054b61054661055092610534565b6100cf565b6102bf565b90565b739a0ef1333681b357047282144dc06d7daa1f76ba90565b610574906100d2565b90565b6105809061056b565b90565b60181b90565b9061059e6301000000600160b81b0391610583565b9181191691161790565b6105b19061056b565b90565b90565b906105cc6105c76105d3926105a8565b6105b4565b8254610589565b9055565b60016105e391016102bf565b90565b6105f090516104dc565b90565b61060761060261060c926104bd565b6100cf565b6100c4565b90565b610618906105f3565b90565b60209181520190565b5f7f496e76616c696420616464726573730000000000000000000000000000000000910152565b610658600f60209261061b565b61066181610624565b0190565b61067a9060208101905f81830391015261064b565b90565b1561068457565b61068c610062565b62461bcd60e51b8152806106a260048201610665565b0390fd5b60181c90565b6106b86106bd916106a6565b610083565b90565b6106ca90546106ac565b90565b6106d6906104dc565b9052565b9160206106fb9294936106f460408201965f8301906101c7565b01906106cd565b565b67ffffffffffffffff811161071b57610717602091610385565b0190565b61038f565b9061073261072d836106fd565b610410565b918252565b5f7f4772616e746564204d494e5445525f524f4c4520746f00000000000000000000910152565b6107686016610720565b9061077560208301610737565b565b61077f61075e565b90565b61079261078d610362565b610375565b637fb5297f90803b15610ac3576107b5915f916107ad610062565b9384926103cc565b82528183816107c66004820161015d565b03925af18015610abe57610a92575b506107e86107e360046103f4565b61045e565b90610819734e527486594696a7607ff3379e21746689a3fd6d6108148461080e5f6104c0565b9061049d565b6104e8565b61084a7337d911cbd7bb03521a975ec2de03ce1dd01568836108458461083f60016104f9565b9061049d565b6104e8565b61087b739c2f68b133286cfcc8677bd342bc724a0f2e2546610876846108706002610518565b9061049d565b6104e8565b6108ac7318f33cef45817c428d98c4e188a770191fdd4b796108a7846108a16003610537565b9061049d565b6104e8565b6108c66108bf6108ba610553565b610577565b600c6105b7565b6108cf5f6104c0565b5b806108eb6108e56108e086610499565b6102bf565b916102bf565b1015610a035761092861090761090285849061049d565b6105e6565b61092161091b6109165f61060f565b6104dc565b916104dc565b141561067d565b61093a610935600c6106c0565b6100fa565b90632f2ff15d610948610195565b61095b61095687859061049d565b6105e6565b93803b156109fe576109805f809461098b610974610062565b988996879586946103cc565b8452600484016106da565b03925af19182156109f9576109c8926109cd575b506109c36109b66109b186849061049d565b6105e6565b6109be610777565b610b2e565b6105d7565b6108d0565b6109ec905f3d81116109f2575b6109e481836103a3565b8101906103d2565b5f61099f565b503d6109da565b6103e1565b610381565b509050610a16610a11610362565b610375565b6376eadd3690803b15610a8d57610a39915f91610a31610062565b9384926103cc565b8252818381610a4a6004820161015d565b03925af18015610a8857610a5c575b50565b610a7b905f3d8111610a81575b610a7381836103a3565b8101906103d2565b5f610a59565b503d610a69565b6103e1565b610381565b610ab1905f3d8111610ab7575b610aa981836103a3565b8101906103d2565b5f6107d5565b503d610a9f565b6103e1565b610381565b5190565b90825f9392825e0152565b610af6610aff602093610b0493610aed81610ac8565b9384809361061b565b95869101610acc565b610385565b0190565b92916020610b24610b2c9360408701908782035f890152610ad7565b9401906106cd565b565b90610b69610b6e92610b5a610b41610062565b93849260046020850163319af33360e01b815201610b08565b602082018103825203826103a3565b610b70565b565b610b8390610b7e6001610baf565b610bcf565b565b6a636f6e736f6c652e6c6f6790565b5f8091610b9f610b85565b602082519201905afa50565b5f90565b610bb7610bab565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610bbb57610bdf90610b94565b56fea26469706673582212208bdcdc7398ad5820684e52d63f1ad1b1326b1de498b2d0966d5e23277099d0c164736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0'Wa\0\x11a\x006V[a\0\x19a\0,V[a\x0C\x17a\x01\x06\x829a\x0C\x17\x90\xF3[a\x002V[`@Q\x90V[_\x80\xFD[a\0>a\0\x92V[V[`\x10\x1B\x90V[\x90a\0Tb\xFF\0\0\x91a\0@V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\0l\x90a\0^V[\x90V[\x90V[\x90a\0\x87a\0\x82a\0\x8E\x92a\0cV[a\0oV[\x82Ta\0FV[\x90UV[a\0\x9Aa\0\xA8V[a\0\xA6`\x01`\x0Ca\0rV[V[a\0\xB0a\0\xB2V[V[a\0\xBAa\0\xF7V[V[_\x1B\x90V[\x90a\0\xCD`\xFF\x91a\0\xBCV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\0\xECa\0\xE7a\0\xF3\x92a\0cV[a\0oV[\x82Ta\0\xC1V[\x90UV[a\x01\x03`\x01`\x0Ca\0\xD7V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xB6V[a\0\x1D_5a\0\\V[\x80c\xA5\"\r\xED\x14a\0WW\x80c\xC0@b&\x14a\0RW\x80c\xD59\x13\x93\x14a\0MWc\xF8\xCC\xBFG\x03a\0\x0EWa\x02\x81V[a\x01\xE9V[a\x01bV[a\x01(V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0zWV[a\0lV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x9E\x90`\x08a\0\xA3\x93\x02a\0\x7FV[a\0\x83V[\x90V[\x90a\0\xB1\x91Ta\0\x8EV[\x90V[a\0\xC1`\x0C`\x03\x90a\0\xA6V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xE6a\0\xE1a\0\xEB\x92a\0\xC4V[a\0\xCFV[a\0\xC4V[\x90V[a\0\xF7\x90a\0\xD2V[\x90V[a\x01\x03\x90a\0\xEEV[\x90V[a\x01\x0F\x90a\0\xFAV[\x90RV[\x91\x90a\x01&\x90_` \x85\x01\x94\x01\x90a\x01\x06V[V[4a\x01XWa\x0186`\x04a\0pV[a\x01Ta\x01Ca\0\xB4V[a\x01Ka\0bV[\x91\x82\x91\x82a\x01\x13V[\x03\x90\xF3[a\0hV[_\x01\x90V[4a\x01\x90Wa\x01r6`\x04a\0pV[a\x01za\x07\x82V[a\x01\x82a\0bV[\x80a\x01\x8C\x81a\x01]V[\x03\x90\xF3[a\0hV[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[a\x01\xC1a\x01\x95V[\x90V[\x90V[a\x01\xD0\x90a\x01\xC4V[\x90RV[\x91\x90a\x01\xE7\x90_` \x85\x01\x94\x01\x90a\x01\xC7V[V[4a\x02\x19Wa\x01\xF96`\x04a\0pV[a\x02\x15a\x02\x04a\x01\xB9V[a\x02\x0Ca\0bV[\x91\x82\x91\x82a\x01\xD4V[\x03\x90\xF3[a\0hV[`\xFF\x16\x90V[a\x024\x90`\x08a\x029\x93\x02a\0\x7FV[a\x02\x1EV[\x90V[\x90a\x02G\x91Ta\x02$V[\x90V[a\x02W`\x0C`\x02\x90a\x02<V[\x90V[\x15\x15\x90V[a\x02h\x90a\x02ZV[\x90RV[\x91\x90a\x02\x7F\x90_` \x85\x01\x94\x01\x90a\x02_V[V[4a\x02\xB1Wa\x02\x916`\x04a\0pV[a\x02\xADa\x02\x9Ca\x02JV[a\x02\xA4a\0bV[\x91\x82\x91\x82a\x02lV[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02\xD6a\x02\xD1a\x02\xDB\x92a\x02\xBFV[a\0\xCFV[a\x02\xBFV[\x90V[a\x02\xEAa\x02\xEF\x91a\x02\xBAV[a\x02\xC2V[\x90V[a\x03\x06a\x03\x01a\x03\x0B\x92a\x02\xBFV[a\0\xCFV[a\0\xC4V[\x90V[a\x03Ga\x03Ba\x03=\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02\xDEV[a\x02\xF2V[a\0\xEEV[\x90V[a\x03S\x90a\0\xD2V[\x90V[a\x03_\x90a\x03JV[\x90V[a\x03ra\x03ma\x03\x0EV[a\x03VV[\x90V[a\x03~\x90a\0\xEEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\xAD\x90a\x03\x85V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xC7W`@RV[a\x03\x8FV[`\xE0\x1B\x90V[_\x91\x03\x12a\x03\xDCWV[a\0lV[a\x03\xE9a\0bV[=_\x82>=\x90\xFD[\x90V[a\x04\x08a\x04\x03a\x04\r\x92a\x03\xF1V[a\0\xCFV[a\x02\xBFV[\x90V[\x90a\x04#a\x04\x1Ca\0bV[\x92\x83a\x03\xA3V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04=W` \x80\x91\x02\x01\x90V[a\x03\x8FV[\x90a\x04Ta\x04O\x83a\x04%V[a\x04\x10V[\x91\x82RV[6\x907V[\x90a\x04\x83a\x04k\x83a\x04BV[\x92` \x80a\x04y\x86\x93a\x04%V[\x92\x01\x91\x03\x90a\x04YV[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x04\xA7\x82a\x04\x99V[\x81\x10\x15a\x04\xB8W` \x80\x91\x02\x01\x01\x90V[a\x04\x85V[\x90V[a\x04\xD4a\x04\xCFa\x04\xD9\x92a\x04\xBDV[a\0\xCFV[a\x02\xBFV[\x90V[a\x04\xE5\x90a\0\xC4V[\x90V[\x90a\x04\xF2\x90a\x04\xDCV[\x90RV[\x90V[a\x05\ra\x05\x08a\x05\x12\x92a\x04\xF6V[a\0\xCFV[a\x02\xBFV[\x90V[\x90V[a\x05,a\x05'a\x051\x92a\x05\x15V[a\0\xCFV[a\x02\xBFV[\x90V[\x90V[a\x05Ka\x05Fa\x05P\x92a\x054V[a\0\xCFV[a\x02\xBFV[\x90V[s\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\x90V[a\x05t\x90a\0\xD2V[\x90V[a\x05\x80\x90a\x05kV[\x90V[`\x18\x1B\x90V[\x90a\x05\x9Ec\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x05\x83V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\xB1\x90a\x05kV[\x90V[\x90V[\x90a\x05\xCCa\x05\xC7a\x05\xD3\x92a\x05\xA8V[a\x05\xB4V[\x82Ta\x05\x89V[\x90UV[`\x01a\x05\xE3\x91\x01a\x02\xBFV[\x90V[a\x05\xF0\x90Qa\x04\xDCV[\x90V[a\x06\x07a\x06\x02a\x06\x0C\x92a\x04\xBDV[a\0\xCFV[a\0\xC4V[\x90V[a\x06\x18\x90a\x05\xF3V[\x90V[` \x91\x81R\x01\x90V[_\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06X`\x0F` \x92a\x06\x1BV[a\x06a\x81a\x06$V[\x01\x90V[a\x06z\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06KV[\x90V[\x15a\x06\x84WV[a\x06\x8Ca\0bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xA2`\x04\x82\x01a\x06eV[\x03\x90\xFD[`\x18\x1C\x90V[a\x06\xB8a\x06\xBD\x91a\x06\xA6V[a\0\x83V[\x90V[a\x06\xCA\x90Ta\x06\xACV[\x90V[a\x06\xD6\x90a\x04\xDCV[\x90RV[\x91` a\x06\xFB\x92\x94\x93a\x06\xF4`@\x82\x01\x96_\x83\x01\x90a\x01\xC7V[\x01\x90a\x06\xCDV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x1BWa\x07\x17` \x91a\x03\x85V[\x01\x90V[a\x03\x8FV[\x90a\x072a\x07-\x83a\x06\xFDV[a\x04\x10V[\x91\x82RV[_\x7FGranted MINTER_ROLE to\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07h`\x16a\x07 V[\x90a\x07u` \x83\x01a\x077V[V[a\x07\x7Fa\x07^V[\x90V[a\x07\x92a\x07\x8Da\x03bV[a\x03uV[c\x7F\xB5)\x7F\x90\x80;\x15a\n\xC3Wa\x07\xB5\x91_\x91a\x07\xADa\0bV[\x93\x84\x92a\x03\xCCV[\x82R\x81\x83\x81a\x07\xC6`\x04\x82\x01a\x01]V[\x03\x92Z\xF1\x80\x15a\n\xBEWa\n\x92W[Pa\x07\xE8a\x07\xE3`\x04a\x03\xF4V[a\x04^V[\x90a\x08\x19sNRt\x86YF\x96\xA7`\x7F\xF37\x9E!tf\x89\xA3\xFDma\x08\x14\x84a\x08\x0E_a\x04\xC0V[\x90a\x04\x9DV[a\x04\xE8V[a\x08Js7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x08E\x84a\x08?`\x01a\x04\xF9V[\x90a\x04\x9DV[a\x04\xE8V[a\x08{s\x9C/h\xB13(l\xFC\xC8g{\xD3B\xBCrJ\x0F.%Fa\x08v\x84a\x08p`\x02a\x05\x18V[\x90a\x04\x9DV[a\x04\xE8V[a\x08\xACs\x18\xF3<\xEFE\x81|B\x8D\x98\xC4\xE1\x88\xA7p\x19\x1F\xDDKya\x08\xA7\x84a\x08\xA1`\x03a\x057V[\x90a\x04\x9DV[a\x04\xE8V[a\x08\xC6a\x08\xBFa\x08\xBAa\x05SV[a\x05wV[`\x0Ca\x05\xB7V[a\x08\xCF_a\x04\xC0V[[\x80a\x08\xEBa\x08\xE5a\x08\xE0\x86a\x04\x99V[a\x02\xBFV[\x91a\x02\xBFV[\x10\x15a\n\x03Wa\t(a\t\x07a\t\x02\x85\x84\x90a\x04\x9DV[a\x05\xE6V[a\t!a\t\x1Ba\t\x16_a\x06\x0FV[a\x04\xDCV[\x91a\x04\xDCV[\x14\x15a\x06}V[a\t:a\t5`\x0Ca\x06\xC0V[a\0\xFAV[\x90c//\xF1]a\tHa\x01\x95V[a\t[a\tV\x87\x85\x90a\x04\x9DV[a\x05\xE6V[\x93\x80;\x15a\t\xFEWa\t\x80_\x80\x94a\t\x8Ba\tta\0bV[\x98\x89\x96\x87\x95\x86\x94a\x03\xCCV[\x84R`\x04\x84\x01a\x06\xDAV[\x03\x92Z\xF1\x91\x82\x15a\t\xF9Wa\t\xC8\x92a\t\xCDW[Pa\t\xC3a\t\xB6a\t\xB1\x86\x84\x90a\x04\x9DV[a\x05\xE6V[a\t\xBEa\x07wV[a\x0B.V[a\x05\xD7V[a\x08\xD0V[a\t\xEC\x90_=\x81\x11a\t\xF2W[a\t\xE4\x81\x83a\x03\xA3V[\x81\x01\x90a\x03\xD2V[_a\t\x9FV[P=a\t\xDAV[a\x03\xE1V[a\x03\x81V[P\x90Pa\n\x16a\n\x11a\x03bV[a\x03uV[cv\xEA\xDD6\x90\x80;\x15a\n\x8DWa\n9\x91_\x91a\n1a\0bV[\x93\x84\x92a\x03\xCCV[\x82R\x81\x83\x81a\nJ`\x04\x82\x01a\x01]V[\x03\x92Z\xF1\x80\x15a\n\x88Wa\n\\W[PV[a\n{\x90_=\x81\x11a\n\x81W[a\ns\x81\x83a\x03\xA3V[\x81\x01\x90a\x03\xD2V[_a\nYV[P=a\niV[a\x03\xE1V[a\x03\x81V[a\n\xB1\x90_=\x81\x11a\n\xB7W[a\n\xA9\x81\x83a\x03\xA3V[\x81\x01\x90a\x03\xD2V[_a\x07\xD5V[P=a\n\x9FV[a\x03\xE1V[a\x03\x81V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\n\xF6a\n\xFF` \x93a\x0B\x04\x93a\n\xED\x81a\n\xC8V[\x93\x84\x80\x93a\x06\x1BV[\x95\x86\x91\x01a\n\xCCV[a\x03\x85V[\x01\x90V[\x92\x91` a\x0B$a\x0B,\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\n\xD7V[\x94\x01\x90a\x06\xCDV[V[\x90a\x0Bia\x0Bn\x92a\x0BZa\x0BAa\0bV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x0B\x08V[` \x82\x01\x81\x03\x82R\x03\x82a\x03\xA3V[a\x0BpV[V[a\x0B\x83\x90a\x0B~`\x01a\x0B\xAFV[a\x0B\xCFV[V[jconsole.log\x90V[_\x80\x91a\x0B\x9Fa\x0B\x85V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x0B\xB7a\x0B\xABV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x0B\xBBWa\x0B\xDF\x90a\x0B\x94V[V\xFE\xA2dipfsX\"\x12 \x8B\xDC\xDCs\x98\xADX hNR\xD6?\x1A\xD1\xB12k\x1D\xE4\x98\xB2\xD0\x96m^#'p\x99\xD0\xC1dsolcC\0\x08\x1D\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6102b6565b61001d5f3561005c565b8063a5220ded14610057578063c040622614610052578063d53913931461004d5763f8ccbf470361000e57610281565b6101e9565b610162565b610128565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261007a57565b61006c565b1c90565b60018060a01b031690565b61009e9060086100a3930261007f565b610083565b90565b906100b1915461008e565b90565b6100c1600c6003906100a6565b90565b60018060a01b031690565b90565b6100e66100e16100eb926100c4565b6100cf565b6100c4565b90565b6100f7906100d2565b90565b610103906100ee565b90565b61010f906100fa565b9052565b9190610126905f60208501940190610106565b565b3461015857610138366004610070565b6101546101436100b4565b61014b610062565b91829182610113565b0390f35b610068565b5f0190565b3461019057610172366004610070565b61017a610782565b610182610062565b8061018c8161015d565b0390f35b610068565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b6101c1610195565b90565b90565b6101d0906101c4565b9052565b91906101e7905f602085019401906101c7565b565b34610219576101f9366004610070565b6102156102046101b9565b61020c610062565b918291826101d4565b0390f35b610068565b60ff1690565b610234906008610239930261007f565b61021e565b90565b906102479154610224565b90565b610257600c60029061023c565b90565b151590565b6102689061025a565b9052565b919061027f905f6020850194019061025f565b565b346102b157610291366004610070565b6102ad61029c61024a565b6102a4610062565b9182918261026c565b0390f35b610068565b5f80fd5b5f1c90565b90565b6102d66102d16102db926102bf565b6100cf565b6102bf565b90565b6102ea6102ef916102ba565b6102c2565b90565b61030661030161030b926102bf565b6100cf565b6100c4565b90565b61034761034261033d7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d6102de565b6102f2565b6100ee565b90565b610353906100d2565b90565b61035f9061034a565b90565b61037261036d61030e565b610356565b90565b61037e906100ee565b90565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906103ad90610385565b810190811067ffffffffffffffff8211176103c757604052565b61038f565b60e01b90565b5f9103126103dc57565b61006c565b6103e9610062565b3d5f823e3d90fd5b90565b61040861040361040d926103f1565b6100cf565b6102bf565b90565b9061042361041c610062565b92836103a3565b565b67ffffffffffffffff811161043d5760208091020190565b61038f565b9061045461044f83610425565b610410565b918252565b369037565b9061048361046b83610442565b926020806104798693610425565b9201910390610459565b565b634e487b7160e01b5f52603260045260245ffd5b5190565b906104a782610499565b8110156104b8576020809102010190565b610485565b90565b6104d46104cf6104d9926104bd565b6100cf565b6102bf565b90565b6104e5906100c4565b90565b906104f2906104dc565b9052565b90565b61050d610508610512926104f6565b6100cf565b6102bf565b90565b90565b61052c61052761053192610515565b6100cf565b6102bf565b90565b90565b61054b61054661055092610534565b6100cf565b6102bf565b90565b739a0ef1333681b357047282144dc06d7daa1f76ba90565b610574906100d2565b90565b6105809061056b565b90565b60181b90565b9061059e6301000000600160b81b0391610583565b9181191691161790565b6105b19061056b565b90565b90565b906105cc6105c76105d3926105a8565b6105b4565b8254610589565b9055565b60016105e391016102bf565b90565b6105f090516104dc565b90565b61060761060261060c926104bd565b6100cf565b6100c4565b90565b610618906105f3565b90565b60209181520190565b5f7f496e76616c696420616464726573730000000000000000000000000000000000910152565b610658600f60209261061b565b61066181610624565b0190565b61067a9060208101905f81830391015261064b565b90565b1561068457565b61068c610062565b62461bcd60e51b8152806106a260048201610665565b0390fd5b60181c90565b6106b86106bd916106a6565b610083565b90565b6106ca90546106ac565b90565b6106d6906104dc565b9052565b9160206106fb9294936106f460408201965f8301906101c7565b01906106cd565b565b67ffffffffffffffff811161071b57610717602091610385565b0190565b61038f565b9061073261072d836106fd565b610410565b918252565b5f7f4772616e746564204d494e5445525f524f4c4520746f00000000000000000000910152565b6107686016610720565b9061077560208301610737565b565b61077f61075e565b90565b61079261078d610362565b610375565b637fb5297f90803b15610ac3576107b5915f916107ad610062565b9384926103cc565b82528183816107c66004820161015d565b03925af18015610abe57610a92575b506107e86107e360046103f4565b61045e565b90610819734e527486594696a7607ff3379e21746689a3fd6d6108148461080e5f6104c0565b9061049d565b6104e8565b61084a7337d911cbd7bb03521a975ec2de03ce1dd01568836108458461083f60016104f9565b9061049d565b6104e8565b61087b739c2f68b133286cfcc8677bd342bc724a0f2e2546610876846108706002610518565b9061049d565b6104e8565b6108ac7318f33cef45817c428d98c4e188a770191fdd4b796108a7846108a16003610537565b9061049d565b6104e8565b6108c66108bf6108ba610553565b610577565b600c6105b7565b6108cf5f6104c0565b5b806108eb6108e56108e086610499565b6102bf565b916102bf565b1015610a035761092861090761090285849061049d565b6105e6565b61092161091b6109165f61060f565b6104dc565b916104dc565b141561067d565b61093a610935600c6106c0565b6100fa565b90632f2ff15d610948610195565b61095b61095687859061049d565b6105e6565b93803b156109fe576109805f809461098b610974610062565b988996879586946103cc565b8452600484016106da565b03925af19182156109f9576109c8926109cd575b506109c36109b66109b186849061049d565b6105e6565b6109be610777565b610b2e565b6105d7565b6108d0565b6109ec905f3d81116109f2575b6109e481836103a3565b8101906103d2565b5f61099f565b503d6109da565b6103e1565b610381565b509050610a16610a11610362565b610375565b6376eadd3690803b15610a8d57610a39915f91610a31610062565b9384926103cc565b8252818381610a4a6004820161015d565b03925af18015610a8857610a5c575b50565b610a7b905f3d8111610a81575b610a7381836103a3565b8101906103d2565b5f610a59565b503d610a69565b6103e1565b610381565b610ab1905f3d8111610ab7575b610aa981836103a3565b8101906103d2565b5f6107d5565b503d610a9f565b6103e1565b610381565b5190565b90825f9392825e0152565b610af6610aff602093610b0493610aed81610ac8565b9384809361061b565b95869101610acc565b610385565b0190565b92916020610b24610b2c9360408701908782035f890152610ad7565b9401906106cd565b565b90610b69610b6e92610b5a610b41610062565b93849260046020850163319af33360e01b815201610b08565b602082018103825203826103a3565b610b70565b565b610b8390610b7e6001610baf565b610bcf565b565b6a636f6e736f6c652e6c6f6790565b5f8091610b9f610b85565b602082519201905afa50565b5f90565b610bb7610bab565b5090565b634e487b7160e01b5f52605160045260245ffd5b600103610bbb57610bdf90610b94565b56fea26469706673582212208bdcdc7398ad5820684e52d63f1ad1b1326b1de498b2d0966d5e23277099d0c164736f6c634300081d0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xB6V[a\0\x1D_5a\0\\V[\x80c\xA5\"\r\xED\x14a\0WW\x80c\xC0@b&\x14a\0RW\x80c\xD59\x13\x93\x14a\0MWc\xF8\xCC\xBFG\x03a\0\x0EWa\x02\x81V[a\x01\xE9V[a\x01bV[a\x01(V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0zWV[a\0lV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\x9E\x90`\x08a\0\xA3\x93\x02a\0\x7FV[a\0\x83V[\x90V[\x90a\0\xB1\x91Ta\0\x8EV[\x90V[a\0\xC1`\x0C`\x03\x90a\0\xA6V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\0\xE6a\0\xE1a\0\xEB\x92a\0\xC4V[a\0\xCFV[a\0\xC4V[\x90V[a\0\xF7\x90a\0\xD2V[\x90V[a\x01\x03\x90a\0\xEEV[\x90V[a\x01\x0F\x90a\0\xFAV[\x90RV[\x91\x90a\x01&\x90_` \x85\x01\x94\x01\x90a\x01\x06V[V[4a\x01XWa\x0186`\x04a\0pV[a\x01Ta\x01Ca\0\xB4V[a\x01Ka\0bV[\x91\x82\x91\x82a\x01\x13V[\x03\x90\xF3[a\0hV[_\x01\x90V[4a\x01\x90Wa\x01r6`\x04a\0pV[a\x01za\x07\x82V[a\x01\x82a\0bV[\x80a\x01\x8C\x81a\x01]V[\x03\x90\xF3[a\0hV[\x7F\x9F-\xF0\xFE\xD2\xC7vH\xDEX`\xA4\xCCP\x8C\xD0\x81\x8C\x85\xB8\xB8\xA1\xABL\xEE\xEF\x8D\x98\x1C\x89V\xA6\x90V[a\x01\xC1a\x01\x95V[\x90V[\x90V[a\x01\xD0\x90a\x01\xC4V[\x90RV[\x91\x90a\x01\xE7\x90_` \x85\x01\x94\x01\x90a\x01\xC7V[V[4a\x02\x19Wa\x01\xF96`\x04a\0pV[a\x02\x15a\x02\x04a\x01\xB9V[a\x02\x0Ca\0bV[\x91\x82\x91\x82a\x01\xD4V[\x03\x90\xF3[a\0hV[`\xFF\x16\x90V[a\x024\x90`\x08a\x029\x93\x02a\0\x7FV[a\x02\x1EV[\x90V[\x90a\x02G\x91Ta\x02$V[\x90V[a\x02W`\x0C`\x02\x90a\x02<V[\x90V[\x15\x15\x90V[a\x02h\x90a\x02ZV[\x90RV[\x91\x90a\x02\x7F\x90_` \x85\x01\x94\x01\x90a\x02_V[V[4a\x02\xB1Wa\x02\x916`\x04a\0pV[a\x02\xADa\x02\x9Ca\x02JV[a\x02\xA4a\0bV[\x91\x82\x91\x82a\x02lV[\x03\x90\xF3[a\0hV[_\x80\xFD[_\x1C\x90V[\x90V[a\x02\xD6a\x02\xD1a\x02\xDB\x92a\x02\xBFV[a\0\xCFV[a\x02\xBFV[\x90V[a\x02\xEAa\x02\xEF\x91a\x02\xBAV[a\x02\xC2V[\x90V[a\x03\x06a\x03\x01a\x03\x0B\x92a\x02\xBFV[a\0\xCFV[a\0\xC4V[\x90V[a\x03Ga\x03Ba\x03=\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-a\x02\xDEV[a\x02\xF2V[a\0\xEEV[\x90V[a\x03S\x90a\0\xD2V[\x90V[a\x03_\x90a\x03JV[\x90V[a\x03ra\x03ma\x03\x0EV[a\x03VV[\x90V[a\x03~\x90a\0\xEEV[\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x03\xAD\x90a\x03\x85V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x03\xC7W`@RV[a\x03\x8FV[`\xE0\x1B\x90V[_\x91\x03\x12a\x03\xDCWV[a\0lV[a\x03\xE9a\0bV[=_\x82>=\x90\xFD[\x90V[a\x04\x08a\x04\x03a\x04\r\x92a\x03\xF1V[a\0\xCFV[a\x02\xBFV[\x90V[\x90a\x04#a\x04\x1Ca\0bV[\x92\x83a\x03\xA3V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x04=W` \x80\x91\x02\x01\x90V[a\x03\x8FV[\x90a\x04Ta\x04O\x83a\x04%V[a\x04\x10V[\x91\x82RV[6\x907V[\x90a\x04\x83a\x04k\x83a\x04BV[\x92` \x80a\x04y\x86\x93a\x04%V[\x92\x01\x91\x03\x90a\x04YV[V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[Q\x90V[\x90a\x04\xA7\x82a\x04\x99V[\x81\x10\x15a\x04\xB8W` \x80\x91\x02\x01\x01\x90V[a\x04\x85V[\x90V[a\x04\xD4a\x04\xCFa\x04\xD9\x92a\x04\xBDV[a\0\xCFV[a\x02\xBFV[\x90V[a\x04\xE5\x90a\0\xC4V[\x90V[\x90a\x04\xF2\x90a\x04\xDCV[\x90RV[\x90V[a\x05\ra\x05\x08a\x05\x12\x92a\x04\xF6V[a\0\xCFV[a\x02\xBFV[\x90V[\x90V[a\x05,a\x05'a\x051\x92a\x05\x15V[a\0\xCFV[a\x02\xBFV[\x90V[\x90V[a\x05Ka\x05Fa\x05P\x92a\x054V[a\0\xCFV[a\x02\xBFV[\x90V[s\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBA\x90V[a\x05t\x90a\0\xD2V[\x90V[a\x05\x80\x90a\x05kV[\x90V[`\x18\x1B\x90V[\x90a\x05\x9Ec\x01\0\0\0`\x01`\xB8\x1B\x03\x91a\x05\x83V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\xB1\x90a\x05kV[\x90V[\x90V[\x90a\x05\xCCa\x05\xC7a\x05\xD3\x92a\x05\xA8V[a\x05\xB4V[\x82Ta\x05\x89V[\x90UV[`\x01a\x05\xE3\x91\x01a\x02\xBFV[\x90V[a\x05\xF0\x90Qa\x04\xDCV[\x90V[a\x06\x07a\x06\x02a\x06\x0C\x92a\x04\xBDV[a\0\xCFV[a\0\xC4V[\x90V[a\x06\x18\x90a\x05\xF3V[\x90V[` \x91\x81R\x01\x90V[_\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06X`\x0F` \x92a\x06\x1BV[a\x06a\x81a\x06$V[\x01\x90V[a\x06z\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06KV[\x90V[\x15a\x06\x84WV[a\x06\x8Ca\0bV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xA2`\x04\x82\x01a\x06eV[\x03\x90\xFD[`\x18\x1C\x90V[a\x06\xB8a\x06\xBD\x91a\x06\xA6V[a\0\x83V[\x90V[a\x06\xCA\x90Ta\x06\xACV[\x90V[a\x06\xD6\x90a\x04\xDCV[\x90RV[\x91` a\x06\xFB\x92\x94\x93a\x06\xF4`@\x82\x01\x96_\x83\x01\x90a\x01\xC7V[\x01\x90a\x06\xCDV[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x07\x1BWa\x07\x17` \x91a\x03\x85V[\x01\x90V[a\x03\x8FV[\x90a\x072a\x07-\x83a\x06\xFDV[a\x04\x10V[\x91\x82RV[_\x7FGranted MINTER_ROLE to\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x07h`\x16a\x07 V[\x90a\x07u` \x83\x01a\x077V[V[a\x07\x7Fa\x07^V[\x90V[a\x07\x92a\x07\x8Da\x03bV[a\x03uV[c\x7F\xB5)\x7F\x90\x80;\x15a\n\xC3Wa\x07\xB5\x91_\x91a\x07\xADa\0bV[\x93\x84\x92a\x03\xCCV[\x82R\x81\x83\x81a\x07\xC6`\x04\x82\x01a\x01]V[\x03\x92Z\xF1\x80\x15a\n\xBEWa\n\x92W[Pa\x07\xE8a\x07\xE3`\x04a\x03\xF4V[a\x04^V[\x90a\x08\x19sNRt\x86YF\x96\xA7`\x7F\xF37\x9E!tf\x89\xA3\xFDma\x08\x14\x84a\x08\x0E_a\x04\xC0V[\x90a\x04\x9DV[a\x04\xE8V[a\x08Js7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x08E\x84a\x08?`\x01a\x04\xF9V[\x90a\x04\x9DV[a\x04\xE8V[a\x08{s\x9C/h\xB13(l\xFC\xC8g{\xD3B\xBCrJ\x0F.%Fa\x08v\x84a\x08p`\x02a\x05\x18V[\x90a\x04\x9DV[a\x04\xE8V[a\x08\xACs\x18\xF3<\xEFE\x81|B\x8D\x98\xC4\xE1\x88\xA7p\x19\x1F\xDDKya\x08\xA7\x84a\x08\xA1`\x03a\x057V[\x90a\x04\x9DV[a\x04\xE8V[a\x08\xC6a\x08\xBFa\x08\xBAa\x05SV[a\x05wV[`\x0Ca\x05\xB7V[a\x08\xCF_a\x04\xC0V[[\x80a\x08\xEBa\x08\xE5a\x08\xE0\x86a\x04\x99V[a\x02\xBFV[\x91a\x02\xBFV[\x10\x15a\n\x03Wa\t(a\t\x07a\t\x02\x85\x84\x90a\x04\x9DV[a\x05\xE6V[a\t!a\t\x1Ba\t\x16_a\x06\x0FV[a\x04\xDCV[\x91a\x04\xDCV[\x14\x15a\x06}V[a\t:a\t5`\x0Ca\x06\xC0V[a\0\xFAV[\x90c//\xF1]a\tHa\x01\x95V[a\t[a\tV\x87\x85\x90a\x04\x9DV[a\x05\xE6V[\x93\x80;\x15a\t\xFEWa\t\x80_\x80\x94a\t\x8Ba\tta\0bV[\x98\x89\x96\x87\x95\x86\x94a\x03\xCCV[\x84R`\x04\x84\x01a\x06\xDAV[\x03\x92Z\xF1\x91\x82\x15a\t\xF9Wa\t\xC8\x92a\t\xCDW[Pa\t\xC3a\t\xB6a\t\xB1\x86\x84\x90a\x04\x9DV[a\x05\xE6V[a\t\xBEa\x07wV[a\x0B.V[a\x05\xD7V[a\x08\xD0V[a\t\xEC\x90_=\x81\x11a\t\xF2W[a\t\xE4\x81\x83a\x03\xA3V[\x81\x01\x90a\x03\xD2V[_a\t\x9FV[P=a\t\xDAV[a\x03\xE1V[a\x03\x81V[P\x90Pa\n\x16a\n\x11a\x03bV[a\x03uV[cv\xEA\xDD6\x90\x80;\x15a\n\x8DWa\n9\x91_\x91a\n1a\0bV[\x93\x84\x92a\x03\xCCV[\x82R\x81\x83\x81a\nJ`\x04\x82\x01a\x01]V[\x03\x92Z\xF1\x80\x15a\n\x88Wa\n\\W[PV[a\n{\x90_=\x81\x11a\n\x81W[a\ns\x81\x83a\x03\xA3V[\x81\x01\x90a\x03\xD2V[_a\nYV[P=a\niV[a\x03\xE1V[a\x03\x81V[a\n\xB1\x90_=\x81\x11a\n\xB7W[a\n\xA9\x81\x83a\x03\xA3V[\x81\x01\x90a\x03\xD2V[_a\x07\xD5V[P=a\n\x9FV[a\x03\xE1V[a\x03\x81V[Q\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\n\xF6a\n\xFF` \x93a\x0B\x04\x93a\n\xED\x81a\n\xC8V[\x93\x84\x80\x93a\x06\x1BV[\x95\x86\x91\x01a\n\xCCV[a\x03\x85V[\x01\x90V[\x92\x91` a\x0B$a\x0B,\x93`@\x87\x01\x90\x87\x82\x03_\x89\x01Ra\n\xD7V[\x94\x01\x90a\x06\xCDV[V[\x90a\x0Bia\x0Bn\x92a\x0BZa\x0BAa\0bV[\x93\x84\x92`\x04` \x85\x01c1\x9A\xF33`\xE0\x1B\x81R\x01a\x0B\x08V[` \x82\x01\x81\x03\x82R\x03\x82a\x03\xA3V[a\x0BpV[V[a\x0B\x83\x90a\x0B~`\x01a\x0B\xAFV[a\x0B\xCFV[V[jconsole.log\x90V[_\x80\x91a\x0B\x9Fa\x0B\x85V[` \x82Q\x92\x01\x90Z\xFAPV[_\x90V[a\x0B\xB7a\x0B\xABV[P\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[`\x01\x03a\x0B\xBBWa\x0B\xDF\x90a\x0B\x94V[V\xFE\xA2dipfsX\"\x12 \x8B\xDC\xDCs\x98\xADX hNR\xD6?\x1A\xD1\xB12k\x1D\xE4\x98\xB2\xD0\x96m^#'p\x99\xD0\xC1dsolcC\0\x08\x1D\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MINTER_ROLE()` and selector `0xd5391393`.
```solidity
function MINTER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLECall {}
    ///Container type for the return parameters of the [`MINTER_ROLE()`](MINTER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MINTER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MINTER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MINTER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MINTER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MINTER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MINTER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MINTER_ROLE()";
            const SELECTOR: [u8; 4] = [213u8, 57u8, 19u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `synd()` and selector `0xa5220ded`.
```solidity
function synd() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCall {}
    ///Container type for the return parameters of the [`synd()`](syndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = syndReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "synd()";
            const SELECTOR: [u8; 4] = [165u8, 34u8, 13u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`GrantMinterRole`](self) function calls.
    pub enum GrantMinterRoleCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        MINTER_ROLE(MINTER_ROLECall),
        #[allow(missing_docs)]
        run(runCall),
        #[allow(missing_docs)]
        synd(syndCall),
    }
    #[automatically_derived]
    impl GrantMinterRoleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [165u8, 34u8, 13u8, 237u8],
            [192u8, 64u8, 98u8, 38u8],
            [213u8, 57u8, 19u8, 147u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GrantMinterRoleCalls {
        const NAME: &'static str = "GrantMinterRoleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MINTER_ROLE(_) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::synd(_) => <syndCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GrantMinterRoleCalls>] = &[
                {
                    fn synd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <syndCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::synd)
                    }
                    synd
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::run)
                    }
                    run
                },
                {
                    fn MINTER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::MINTER_ROLE)
                    }
                    MINTER_ROLE
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GrantMinterRoleCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GrantMinterRoleCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MINTER_ROLE(inner) => {
                    <MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GrantMinterRole`](self) contract instance.

See the [wrapper's documentation](`GrantMinterRoleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GrantMinterRoleInstance<T, P, N> {
        GrantMinterRoleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GrantMinterRoleInstance<T, P, N>>,
    > {
        GrantMinterRoleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        GrantMinterRoleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`GrantMinterRole`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GrantMinterRole`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GrantMinterRoleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GrantMinterRoleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GrantMinterRoleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GrantMinterRoleInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GrantMinterRole`](self) contract instance.

See the [wrapper's documentation](`GrantMinterRoleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<GrantMinterRoleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GrantMinterRoleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GrantMinterRoleInstance<T, P, N> {
            GrantMinterRoleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GrantMinterRoleInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`MINTER_ROLE`] function.
        pub fn MINTER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MINTER_ROLECall, N> {
            self.call_builder(&MINTER_ROLECall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`synd`] function.
        pub fn synd(&self) -> alloy_contract::SolCallBuilder<T, &P, syndCall, N> {
            self.call_builder(&syndCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GrantMinterRoleInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
