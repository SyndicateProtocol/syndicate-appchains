/**

Generated by the following Solidity interface...
```solidity
interface RequireOrModuleFactory {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error Create2EmptyBytecode();
    error EnforcedPause();
    error ExpectedPause();
    error FailedDeployment();
    error InsufficientBalance(uint256 balance, uint256 needed);
    error ZeroAddress();

    event Paused(address account);
    event RequireOrModuleCreated(address indexed module, address indexed admin);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event Unpaused(address account);

    constructor(address admin);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MANAGER_ROLE() external view returns (bytes32);
    function computeModuleAddress(address admin, bytes32 salt) external view returns (address);
    function createRequireOrModule(address admin, bytes32 salt) external returns (address module);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function pause() external;
    function paused() external view returns (bool);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function unpause() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "computeModuleAddress",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "createRequireOrModule",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "module",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unpause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "Paused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RequireOrModuleCreated",
    "inputs": [
      {
        "name": "module",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "admin",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Unpaused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "Create2EmptyBytecode",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EnforcedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExpectedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedDeployment",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientBalance",
    "inputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireOrModuleFactory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b61019c565b610021610034565b61271d6103e0823961271d90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b610112612afd8038038061010781610083565b9283398101906100d6565b90565b90565b90565b61012f61012a61013492610115565b610118565b61009c565b90565b6101409061011b565b90565b5f0190565b90565b5f1b90565b61016461015f61016992610115565b61014b565b610148565b90565b6101755f610150565b90565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6101a4610251565b806101bf6101b96101b45f610137565b6100a7565b916100a7565b146101eb576101e8906101da6101d361016c565b82906102ce565b506101e3610178565b6102ce565b50565b5f63d92e233d60e01b81528061020360048201610143565b0390fd5b9061021360ff9161014b565b9181191691161790565b151590565b61022b9061021d565b90565b90565b9061024661024161024d92610222565b61022e565b8254610207565b9055565b61025c5f6001610231565b565b5f90565b61026b90610148565b90565b9061027890610262565b5f5260205260405f2090565b61029861029361029d9261009c565b610118565b61009c565b90565b6102a990610284565b90565b6102b5906102a0565b90565b906102c2906102ac565b5f5260205260405f2090565b6102d661025e565b506102eb6102e58284906103a5565b1561021d565b5f1461037357610312600161030d5f61030581869061026e565b0185906102b8565b610231565b9061031b6103d2565b9061035861035261034c7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610262565b926102ac565b926102ac565b92610361610034565b8061036b81610143565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b61039061039591610379565b61037e565b90565b6103a29054610384565b90565b6103cb915f6103c06103c6936103b961025e565b508261026e565b016102b8565b610398565b90565b5f90565b6103da6103ce565b50339056fe60806040526004361015610013575b6105bb565b61001d5f356100ec565b806301ffc9a7146100e7578063248a9ca3146100e25780632f2ff15d146100dd57806336568abe146100d85780633f4ba83a146100d35780635681706b146100ce5780635c975abb146100c95780638456cb59146100c457806391d14854146100bf578063a217fddf146100ba578063c70bacfe146100b5578063d547741f146100b05763ec87621c0361000e57610586565b610523565b6104ed565b6104b8565b610447565b610414565b6103df565b6103a9565b610327565b6102e4565b6102b0565b61020f565b610174565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61011581610100565b0361011c57565b5f80fd5b9050359061012d8261010c565b565b9060208282031261014857610145915f01610120565b90565b6100fc565b151590565b61015b9061014d565b9052565b9190610172905f60208501940190610152565b565b346101a4576101a061018f61018a36600461012f565b6105c3565b6101976100f2565b9182918261015f565b0390f35b6100f8565b90565b6101b5816101a9565b036101bc57565b5f80fd5b905035906101cd826101ac565b565b906020828203126101e8576101e5915f016101c0565b90565b6100fc565b6101f6906101a9565b9052565b919061020d905f602085019401906101ed565b565b3461023f5761023b61022a6102253660046101cf565b610652565b6102326100f2565b918291826101fa565b0390f35b6100f8565b60018060a01b031690565b61025890610244565b90565b6102648161024f565b0361026b57565b5f80fd5b9050359061027c8261025b565b565b91906040838203126102a6578061029a6102a3925f86016101c0565b9360200161026f565b90565b6100fc565b5f0190565b346102df576102c96102c336600461027e565b9061069d565b6102d16100f2565b806102db816102ab565b0390f35b6100f8565b34610313576102fd6102f736600461027e565b906106a9565b6103056100f2565b8061030f816102ab565b0390f35b6100f8565b5f91031261032257565b6100fc565b3461035557610337366004610318565b61033f610715565b6103476100f2565b80610351816102ab565b0390f35b6100f8565b9190604083820312610382578061037661037f925f860161026f565b936020016101c0565b90565b6100fc565b6103909061024f565b9052565b91906103a7905f60208501940190610387565b565b346103da576103d66103c56103bf36600461035a565b906107d9565b6103cd6100f2565b91829182610394565b0390f35b6100f8565b3461040f576103ef366004610318565b61040b6103fa610898565b6104026100f2565b9182918261015f565b0390f35b6100f8565b3461044257610424366004610318565b61042c6108d2565b6104346100f2565b8061043e816102ab565b0390f35b6100f8565b346104785761047461046361045d36600461027e565b90610929565b61046b6100f2565b9182918261015f565b0390f35b6100f8565b90565b5f1b90565b61049961049461049e9261047d565b610480565b6101a9565b90565b6104aa5f610485565b90565b6104b56104a1565b90565b346104e8576104c8366004610318565b6104e46104d36104ad565b6104db6100f2565b918291826101fa565b0390f35b6100f8565b3461051e5761051a61050961050336600461035a565b90610ac1565b6105116100f2565b91829182610394565b0390f35b6100f8565b346105525761053c61053636600461027e565b90610b00565b6105446100f2565b8061054e816102ab565b0390f35b6100f8565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610583610557565b90565b346105b657610596366004610318565b6105b26105a161057b565b6105a96100f2565b918291826101fa565b0390f35b6100f8565b5f80fd5b5f90565b6105cb6105bf565b50806105e66105e0637965db0b60e01b610100565b91610100565b149081156105f3575b5090565b6105fd9150610b0c565b5f6105ef565b5f90565b610610906101a9565b90565b9061061d90610607565b5f5260205260405f2090565b5f1c90565b90565b61063d61064291610629565b61062e565b90565b61064f9054610631565b90565b600161066a61067092610663610603565b505f610613565b01610645565b90565b9061068e9161068961068482610652565b610b32565b610690565b565b9061069a91610b8b565b50565b906106a791610673565b565b90806106c46106be6106b9610c36565b61024f565b9161024f565b036106d5576106d291610c43565b50565b5f63334bd91960e11b8152806106ed600482016102ab565b0390fd5b6107016106fc6104a1565b610b32565b61070961070b565b565b610713610d44565b565b61071d6106f1565b565b5f90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061074b90610723565b810190811067ffffffffffffffff82111761076557604052565b61072d565b9061077d6107766100f2565b9283610741565b565b5190565b905090565b90825f9392825e0152565b6107b86107af926020926107a68161077f565b94858093610783565b93849101610788565b0190565b6107ca906107d09392610793565b90610793565b90565b60200190565b9061082061085561086e936107ec61071f565b5061082f61172e916108006020840161076a565b92808452610fef60208501396108146100f2565b94859160208301610394565b60208201810382520384610741565b61084661083a6100f2565b938492602084016107bc565b60208201810382520382610741565b6108676108618261077f565b916107d3565b2090610d5a565b90565b60ff1690565b61088361088891610629565b610871565b90565b6108959054610877565b90565b6108a06105bf565b506108ab600161088b565b90565b6108be6108b96104a1565b610b32565b6108c66108c8565b565b6108d0610ddb565b565b6108da6108ae565b565b90565b6108f36108ee6108f892610244565b6108dc565b610244565b90565b610904906108df565b90565b610910906108fb565b90565b9061091d90610907565b5f5260205260405f2090565b61094f915f61094461094a9361093d6105bf565b5082610613565b01610913565b61088b565b90565b906109659291610960610de5565b6109af565b90565b61097c6109776109819261047d565b6108dc565b610244565b90565b61098d90610968565b90565b90565b6109a76109a26109ac9261047d565b6108dc565b610990565b90565b91909150816109ce6109c86109c35f610984565b61024f565b9161024f565b14610aa557610a5690610a10610a4561172e6109ec6020820161076a565b90808252610fef6020830139610a1f86610a046100f2565b94859160208301610394565b60208201810382520384610741565b610a36610a2a6100f2565b938492602084016107bc565b60208201810382520382610741565b610a515f929192610993565b610e3f565b908190610a8c610a867fa05234a157fd2c4e3d9e6f0d2b02bca14cbd5b76d495dfa121bd75fc9923c5b993610907565b91610907565b91610a956100f2565b80610a9f816102ab565b0390a390565b5f63d92e233d60e01b815280610abd600482016102ab565b0390fd5b90610ad391610ace61071f565b610952565b90565b90610af191610aec610ae782610652565b610b32565b610af3565b565b90610afd91610c43565b50565b90610b0a91610ad6565b565b610b146105bf565b50610b2e610b286301ffc9a760e01b610100565b91610100565b1490565b610b4490610b3e610c36565b90610f4f565b565b90610b5260ff91610480565b9181191691161790565b610b659061014d565b90565b90565b90610b80610b7b610b8792610b5c565b610b68565b8254610b46565b9055565b610b936105bf565b50610ba8610ba2828490610929565b1561014d565b5f14610c3057610bcf6001610bca5f610bc2818690610613565b018590610913565b610b6b565b90610bd8610c36565b90610c15610c0f610c097f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610607565b92610907565b92610907565b92610c1e6100f2565b80610c28816102ab565b0390a4600190565b50505f90565b610c3e61071f565b503390565b610c4b6105bf565b50610c57818390610929565b5f14610cde57610c7d5f610c785f610c70818690610613565b018590610913565b610b6b565b90610c86610c36565b90610cc3610cbd610cb77ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610607565b92610907565b92610907565b92610ccc6100f2565b80610cd6816102ab565b0390a4600190565b50505f90565b610cec610f8a565b610cf4610cf6565b565b610d015f6001610b6b565b610d09610c36565b610d3f7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa91610d366100f2565b91829182610394565b0390a1565b610d4c610ce4565b565b610d57906108fb565b90565b90610d7891610d6761071f565b5090610d7230610d4e565b91610fbd565b90565b610d83610de5565b610d8b610d8d565b565b610d98600180610b6b565b610da0610c36565b610dd67f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891610dcd6100f2565b91829182610394565b0390a1565b610de3610d7b565b565b610ded610898565b610df357565b5f63d93c066560e01b815280610e0b600482016102ab565b0390fd5b610e1890610990565b9052565b916020610e3d929493610e3660408201965f830190610e0f565b0190610e0f565b565b919091610e4a61071f565b50610e5430610d4e565b31610e67610e6183610990565b91610990565b10610f0457610e758261077f565b610e87610e815f610993565b91610990565b14610ee85760208251920190f5903d1519821516610edd5781610eba610eb4610eaf5f610984565b61024f565b9161024f565b14610ec157565b5f63b06ebf3d60e01b815280610ed9600482016102ab565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b815280610f00600482016102ab565b0390fd5b610f0d30610d4e565b31610f285f92839263cf47918160e01b845260048401610e1c565b0390fd5b916020610f4d929493610f4660408201965f830190610387565b01906101ed565b565b90610f64610f5e838390610929565b1561014d565b610f6c575050565b610f865f92839263e2517d3f60e01b845260048401610f2c565b0390fd5b610f9b610f95610898565b1561014d565b610fa157565b5f638dfc202b60e01b815280610fb9600482016102ab565b0390fd5b91600b92610fc961071f565b50604051926040840152602083015281520160ff8153605560018060a01b039120169056fe60806040523461002f576100196100146100f4565b610115565b610021610034565b6114546102da823961145490f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b61011261172e8038038061010781610083565b9283398101906100d6565b90565b61011e90610120565b565b6101299061017b565b565b90565b90565b61014561014061014a9261012b565b61012e565b61009c565b90565b61015690610131565b90565b610162906100a7565b9052565b9190610179905f60208501940190610159565b565b8061019661019061018b5f61014d565b6100a7565b916100a7565b146101a6576101a49061027a565b565b6101c96101b25f61014d565b5f918291631e4fbdf760e01b835260048301610166565b0390fd5b5f1c90565b60018060a01b031690565b6101e96101ee916101cd565b6101d2565b90565b6101fb90546101dd565b90565b5f1b90565b9061021460018060a01b03916101fe565b9181191691161790565b61023261022d6102379261009c565b61012e565b61009c565b90565b6102439061021e565b90565b61024f9061023a565b90565b90565b9061026a61026561027192610246565b610252565b8254610203565b9055565b5f0190565b6102835f6101f1565b61028d825f610255565b906102c16102bb7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610246565b91610246565b916102ca610034565b806102d481610275565b0390a356fe60806040526004361015610013575b610455565b61001d5f3561008c565b806304f386f414610087578063052eefd1146100825780631b42c7111461007d578063715018a6146100785780637a3979dc146100735780638da5cb5b1461006e5763f2fde38b0361000e57610422565b6103ed565b610392565b6102a0565b61026b565b610189565b610101565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100b8906100a4565b90565b6100c4816100af565b036100cb57565b5f80fd5b905035906100dc826100bb565b565b906020828203126100f7576100f4915f016100cf565b90565b61009c565b5f0190565b3461012f576101196101143660046100de565b610646565b610121610092565b8061012b816100fc565b0390f35b610098565b151590565b61014281610134565b0361014957565b5f80fd5b9050359061015a82610139565b565b91906040838203126101845780610178610181925f86016100cf565b9360200161014d565b90565b61009c565b346101b8576101a261019c36600461015c565b906107e6565b6101aa610092565b806101b4816100fc565b0390f35b610098565b5f9103126101c757565b61009c565b5190565b60209181520190565b60200190565b6101e8906100af565b9052565b906101f9816020936101df565b0190565b60200190565b9061022061021a610213846101cc565b80936101d0565b926101d9565b905f5b8181106102305750505090565b90919261024961024360019286516101ec565b946101fd565b9101919091610223565b6102689160208201915f818403910152610203565b90565b3461029b5761027b3660046101bd565b610297610286610944565b61028e610092565b91829182610253565b0390f35b610098565b346102ce576102b03660046101bd565b6102b8610a45565b6102c0610092565b806102ca816100fc565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103195781359167ffffffffffffffff831161031457602001926001830284011161030f57565b6102db565b6102d7565b6102d3565b9160608383031261036b57610335825f85016100cf565b9261034383602083016100cf565b92604082013567ffffffffffffffff81116103665761036292016102df565b9091565b6100a0565b61009c565b61037990610134565b9052565b9190610390905f60208501940190610370565b565b346103c6576103c26103b16103a836600461031e565b92919091610b23565b6103b9610092565b9182918261037d565b0390f35b610098565b6103d4906100af565b9052565b91906103eb905f602085019401906103cb565b565b3461041d576103fd3660046101bd565b610419610408610cb5565b610410610092565b918291826103d8565b0390f35b610098565b346104505761043a6104353660046100de565b610d2f565b610442610092565b8061044c816100fc565b0390f35b610098565b5f80fd5b61046a90610465610d3a565b61055c565b565b90565b90565b61048661048161048b9261046c565b61046f565b6100a4565b90565b61049790610472565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6104da601360209261049d565b6104e3816104a6565b0190565b6104fc9060208101905f8183039101526104cd565b90565b1561050657565b61050e610092565b62461bcd60e51b815280610524600482016104e7565b0390fd5b61053c610537610541926100a4565b61046f565b6100a4565b90565b61054d90610528565b90565b61055990610544565b90565b8061057761057161056c5f61048e565b6100af565b916100af565b1461062a57610599610593600161058e849161049a565b610dd5565b15610134565b61060e576105cc6105b460016105af849161049a565b610ffe565b6105c66105c0846100af565b916100af565b146104ff565b6105f67fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610550565b906105ff610092565b80610609816100fc565b0390a2565b5f633d0f293d60e01b815280610626600482016100fc565b0390fd5b5f63e6c4247b60e01b815280610642600482016100fc565b0390fd5b61064f90610459565b565b906106639161065e610d3a565b6106eb565b565b5f90565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61069d601160209261049d565b6106a681610669565b0190565b6106bf9060208101905f818303910152610690565b90565b156106c957565b6106d1610092565b62461bcd60e51b8152806106e7600482016106aa565b0390fd5b90816107076107016106fc5f61048e565b6100af565b916100af565b146107ca57610720600161071b849161049a565b610dd5565b6107ae5761072c610665565b505f146107925761075061074a6001610745849161049a565b611152565b5b6106c2565b61077a7f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610550565b90610783610092565b8061078d816100fc565b0390a2565b6107506107a960016107a4849161049a565b611132565b61074b565b5f63516c350f60e11b8152806107c6600482016100fc565b0390fd5b5f63e6c4247b60e01b8152806107e2600482016100fc565b0390fd5b906107f091610651565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061081f906107f7565b810190811067ffffffffffffffff82111761083957604052565b610801565b9061085161084a610092565b9283610815565b565b67ffffffffffffffff811161086b5760208091020190565b610801565b9061088261087d83610853565b61083e565b918252565b369037565b906108b161089983610870565b926020806108a78693610853565b9201910390610887565b565b90565b6108ca6108c56108cf9261046c565b61046f565b6108b3565b90565b634e487b7160e01b5f52601160045260245ffd5b6108ef906108b3565b5f1981146108fd5760010190565b6108d2565b634e487b7160e01b5f52603260045260245ffd5b90610920826101cc565b811015610931576020809102010190565b610902565b90610940906100af565b9052565b61094c6107f2565b5061095f61095a600161049a565b611176565b6109688161088c565b61097a610975600161049a565b61118d565b6109835f6108b6565b905b81610998610992866108b3565b916108b3565b10806109fd575b156109f4576109d0816109c16109d8936109bc8791879092610916565b610936565b6109cb600161049a565b6111c7565b919015610134565b6109ec576109e690916108e6565b90610985565b505090505b90565b505090506109f1565b5080610a19610a13610a0e5f61048e565b6100af565b916100af565b141561099f565b610a28610d3a565b610a30610a32565b565b610a43610a3e5f61048e565b61122e565b565b610a4d610a20565b565b610a5890610528565b90565b610a6490610a4f565b90565b610a7090610544565b90565b60e01b90565b90505190610a8682610139565b565b90602082820312610aa157610a9e915f01610a79565b90565b61009c565b60209181520190565b90825f939282370152565b9190610ad481610acd81610ad995610aa6565b8095610aaf565b6107f7565b0190565b610b03610b109593949294610af960608401965f8501906103cb565b60208301906103cb565b6040818503910152610aba565b90565b610b1b610092565b3d5f823e3d90fd5b92939190610b2f610665565b50610b42610b3d600161049a565b61118d565b9485610b5e610b58610b535f61048e565b6100af565b916100af565b14610c7557945b80610b80610b7a610b755f61048e565b6100af565b916100af565b14610c6757610b96610b9182610a5b565b610a67565b6020637a3979dc918790610bbf8694610bca898d90610bb3610092565b98899788968796610a73565b865260048601610add565b03915afa908115610c62575f91610c34575b50610c2957610bf7610bff91610bf2600161049a565b6111c7565b919015610134565b15610b655750505050610c2591505b5f91829163654b7bc360e01b8352600483016103d8565b0390fd5b505050915050600190565b610c55915060203d8111610c5b575b610c4d8183610815565b810190610a88565b5f610bdc565b503d610c43565b610b13565b50505050610c259150610c0e565b505050915050600190565b5f90565b5f1c90565b60018060a01b031690565b610ca0610ca591610c84565b610c89565b90565b610cb29054610c94565b90565b610cbd610c80565b50610cc75f610ca8565b90565b610cdb90610cd6610d3a565b610cdd565b565b80610cf8610cf2610ced5f61048e565b6100af565b916100af565b14610d0857610d069061122e565b565b610d2b610d145f61048e565b5f918291631e4fbdf760e01b8352600483016103d8565b0390fd5b610d3890610cca565b565b610d42610cb5565b610d5b610d55610d5061128d565b6100af565b916100af565b03610d6257565b610d84610d6d61128d565b5f91829163118cdaa760e01b8352600483016103d8565b0390fd5b90610d9290610550565b5f5260205260405f2090565b5f90565b610dab90610134565b90565b90610db890610da2565b5f5260205260405f2090565b610dcd5f61048e565b90565b600190565b610ddd610665565b50610e05610e00610df2600184018590610d88565b610dfa610d9e565b90610dae565b610ca8565b610e1e610e18610e13610dc4565b6100af565b916100af565b1480610e82575b5f14610e7b57610e65610e5f610e5a610e4c6001610e6b9501610e46610dc4565b90610d88565b610e54610dd0565b90610dae565b610ca8565b926100af565b916100af565b145f14610e7757600190565b5f90565b5050600190565b50610eaa610ea5610e97600184018590610d88565b610e9f610dd0565b90610dae565b610ca8565b610ec3610ebd610eb8610dc4565b6100af565b916100af565b14610e25565b610ed25f61048e565b90565b1b90565b91906008610ef9910291610ef360018060a01b0384610ed5565b92610ed5565b9181191691161790565b90565b9190610f1c610f17610f2493610550565b610f03565b908354610ed9565b9055565b610f3a91610f34610c80565b91610f06565b565b90565b610f53610f4e610f5892610f3c565b61046f565b6108b3565b90565b90565b610f6a610f6f91610c84565b610f5b565b90565b610f7c9054610f5e565b90565b610f8e610f94919392936108b3565b926108b3565b8203918211610f9f57565b6108d2565b5f1b90565b90610fb55f1991610fa4565b9181191691161790565b610fd3610fce610fd8926108b3565b61046f565b6108b3565b90565b90565b90610ff3610fee610ffa92610fbf565b610fdb565b8254610fa9565b9055565b611006610c80565b508161102161101b611016610ec9565b6100af565b916100af565b148015611118575b61110a57806110926111079261105c611057611049600186018890610d88565b611051610d9e565b90610dae565b610ca8565b61108361107e611070600187018990610d88565b611078610dd0565b90610dae565b610ca8565b9061108c610dd0565b9261129a565b6110ba5f6110b56110a7600185018790610d88565b6110af610d9e565b90610dae565b610f28565b6110e25f6110dd6110cf600185018790610d88565b6110d7610dd0565b90610dae565b610f28565b6111015f6110f06001610f3f565b9201916110fc83610f72565b610f7f565b90610fde565b90565b50506111155f61048e565b90565b5061112d611127828490610dd5565b15610134565b611029565b9061114f9161113f610665565b5090611149610d9e565b916112e5565b90565b9061116f9161115f610665565b5090611169610dd0565b916112e5565b90565b5f90565b5f61118a91611183611172565b5001610f72565b90565b6111bf6111b160016111c4936111a1610c80565b50016111ab610dc4565b90610d88565b6111b9610dd0565b90610dae565b610ca8565b90565b906111ed916111d4610665565b506111dd610c80565b50906111e7610dd0565b91611307565b91909190565b9061120460018060a01b0391610fa4565b9181191691161790565b9061122361121e61122a92610550565b610f03565b82546111f3565b9055565b6112375f610ca8565b611241825f61120e565b9061127561126f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610550565b91610550565b9161127e610092565b80611288816100fc565b0390a3565b611295610c80565b503390565b91926112d96112de9260016112e3966112d2836112cd6112bd858b018590610d88565b6112c78915610134565b90610dae565b61120e565b9501610d88565b610dae565b61120e565b565b91611304926112f2610665565b50916112fc610dc4565b9091926113a8565b90565b91611310610665565b50611319610c80565b5061132e611328848490610dd5565b15610134565b5f14611345575050505f906113425f61048e565b90565b61135861135d9260016113629501610d88565b610dae565b610ca8565b908161137d611377611372610dc4565b6100af565b916100af565b14159190565b611392611398919392936108b3565b926108b3565b82018092116113a357565b6108d2565b916113b1610665565b506113c66113c0848390610dd5565b15610134565b80611443575b6113d857505050505f90565b61143e936114199261140f6114036113fe6113f7600189018590610d88565b8590610dae565b610ca8565b9186908590859261129a565b849290919261129a565b6114385f6114276001610f3f565b92019161143383610f72565b611383565b90610fde565b600190565b5061144f838390610dd5565b6113cc56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x9CV[a\0!a\x004V[a'\x1Da\x03\xE0\x829a'\x1D\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a*\xFD\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[\x90V[\x90V[a\x01/a\x01*a\x014\x92a\x01\x15V[a\x01\x18V[a\0\x9CV[\x90V[a\x01@\x90a\x01\x1BV[\x90V[_\x01\x90V[\x90V[_\x1B\x90V[a\x01da\x01_a\x01i\x92a\x01\x15V[a\x01KV[a\x01HV[\x90V[a\x01u_a\x01PV[\x90V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x01\xA4a\x02QV[\x80a\x01\xBFa\x01\xB9a\x01\xB4_a\x017V[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xEBWa\x01\xE8\x90a\x01\xDAa\x01\xD3a\x01lV[\x82\x90a\x02\xCEV[Pa\x01\xE3a\x01xV[a\x02\xCEV[PV[_c\xD9.#=`\xE0\x1B\x81R\x80a\x02\x03`\x04\x82\x01a\x01CV[\x03\x90\xFD[\x90a\x02\x13`\xFF\x91a\x01KV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x15\x15\x90V[a\x02+\x90a\x02\x1DV[\x90V[\x90V[\x90a\x02Fa\x02Aa\x02M\x92a\x02\"V[a\x02.V[\x82Ta\x02\x07V[\x90UV[a\x02\\_`\x01a\x021V[V[_\x90V[a\x02k\x90a\x01HV[\x90V[\x90a\x02x\x90a\x02bV[_R` R`@_ \x90V[a\x02\x98a\x02\x93a\x02\x9D\x92a\0\x9CV[a\x01\x18V[a\0\x9CV[\x90V[a\x02\xA9\x90a\x02\x84V[\x90V[a\x02\xB5\x90a\x02\xA0V[\x90V[\x90a\x02\xC2\x90a\x02\xACV[_R` R`@_ \x90V[a\x02\xD6a\x02^V[Pa\x02\xEBa\x02\xE5\x82\x84\x90a\x03\xA5V[\x15a\x02\x1DV[_\x14a\x03sWa\x03\x12`\x01a\x03\r_a\x03\x05\x81\x86\x90a\x02nV[\x01\x85\x90a\x02\xB8V[a\x021V[\x90a\x03\x1Ba\x03\xD2V[\x90a\x03Xa\x03Ra\x03L\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x02bV[\x92a\x02\xACV[\x92a\x02\xACV[\x92a\x03aa\x004V[\x80a\x03k\x81a\x01CV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x03\x90a\x03\x95\x91a\x03yV[a\x03~V[\x90V[a\x03\xA2\x90Ta\x03\x84V[\x90V[a\x03\xCB\x91_a\x03\xC0a\x03\xC6\x93a\x03\xB9a\x02^V[P\x82a\x02nV[\x01a\x02\xB8V[a\x03\x98V[\x90V[_\x90V[a\x03\xDAa\x03\xCEV[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\xBBV[a\0\x1D_5a\0\xECV[\x80c\x01\xFF\xC9\xA7\x14a\0\xE7W\x80c$\x8A\x9C\xA3\x14a\0\xE2W\x80c//\xF1]\x14a\0\xDDW\x80c6V\x8A\xBE\x14a\0\xD8W\x80c?K\xA8:\x14a\0\xD3W\x80cV\x81pk\x14a\0\xCEW\x80c\\\x97Z\xBB\x14a\0\xC9W\x80c\x84V\xCBY\x14a\0\xC4W\x80c\x91\xD1HT\x14a\0\xBFW\x80c\xA2\x17\xFD\xDF\x14a\0\xBAW\x80c\xC7\x0B\xAC\xFE\x14a\0\xB5W\x80c\xD5Gt\x1F\x14a\0\xB0Wc\xEC\x87b\x1C\x03a\0\x0EWa\x05\x86V[a\x05#V[a\x04\xEDV[a\x04\xB8V[a\x04GV[a\x04\x14V[a\x03\xDFV[a\x03\xA9V[a\x03'V[a\x02\xE4V[a\x02\xB0V[a\x02\x0FV[a\x01tV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x15\x81a\x01\0V[\x03a\x01\x1CWV[_\x80\xFD[\x90P5\x90a\x01-\x82a\x01\x0CV[V[\x90` \x82\x82\x03\x12a\x01HWa\x01E\x91_\x01a\x01 V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x01[\x90a\x01MV[\x90RV[\x91\x90a\x01r\x90_` \x85\x01\x94\x01\x90a\x01RV[V[4a\x01\xA4Wa\x01\xA0a\x01\x8Fa\x01\x8A6`\x04a\x01/V[a\x05\xC3V[a\x01\x97a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[a\x01\xB5\x81a\x01\xA9V[\x03a\x01\xBCWV[_\x80\xFD[\x90P5\x90a\x01\xCD\x82a\x01\xACV[V[\x90` \x82\x82\x03\x12a\x01\xE8Wa\x01\xE5\x91_\x01a\x01\xC0V[\x90V[a\0\xFCV[a\x01\xF6\x90a\x01\xA9V[\x90RV[\x91\x90a\x02\r\x90_` \x85\x01\x94\x01\x90a\x01\xEDV[V[4a\x02?Wa\x02;a\x02*a\x02%6`\x04a\x01\xCFV[a\x06RV[a\x022a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02X\x90a\x02DV[\x90V[a\x02d\x81a\x02OV[\x03a\x02kWV[_\x80\xFD[\x90P5\x90a\x02|\x82a\x02[V[V[\x91\x90`@\x83\x82\x03\x12a\x02\xA6W\x80a\x02\x9Aa\x02\xA3\x92_\x86\x01a\x01\xC0V[\x93` \x01a\x02oV[\x90V[a\0\xFCV[_\x01\x90V[4a\x02\xDFWa\x02\xC9a\x02\xC36`\x04a\x02~V[\x90a\x06\x9DV[a\x02\xD1a\0\xF2V[\x80a\x02\xDB\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x03\x13Wa\x02\xFDa\x02\xF76`\x04a\x02~V[\x90a\x06\xA9V[a\x03\x05a\0\xF2V[\x80a\x03\x0F\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x03\"WV[a\0\xFCV[4a\x03UWa\x0376`\x04a\x03\x18V[a\x03?a\x07\x15V[a\x03Ga\0\xF2V[\x80a\x03Q\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x91\x90`@\x83\x82\x03\x12a\x03\x82W\x80a\x03va\x03\x7F\x92_\x86\x01a\x02oV[\x93` \x01a\x01\xC0V[\x90V[a\0\xFCV[a\x03\x90\x90a\x02OV[\x90RV[\x91\x90a\x03\xA7\x90_` \x85\x01\x94\x01\x90a\x03\x87V[V[4a\x03\xDAWa\x03\xD6a\x03\xC5a\x03\xBF6`\x04a\x03ZV[\x90a\x07\xD9V[a\x03\xCDa\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x04\x0FWa\x03\xEF6`\x04a\x03\x18V[a\x04\x0Ba\x03\xFAa\x08\x98V[a\x04\x02a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[4a\x04BWa\x04$6`\x04a\x03\x18V[a\x04,a\x08\xD2V[a\x044a\0\xF2V[\x80a\x04>\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x04xWa\x04ta\x04ca\x04]6`\x04a\x02~V[\x90a\t)V[a\x04ka\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[_\x1B\x90V[a\x04\x99a\x04\x94a\x04\x9E\x92a\x04}V[a\x04\x80V[a\x01\xA9V[\x90V[a\x04\xAA_a\x04\x85V[\x90V[a\x04\xB5a\x04\xA1V[\x90V[4a\x04\xE8Wa\x04\xC86`\x04a\x03\x18V[a\x04\xE4a\x04\xD3a\x04\xADV[a\x04\xDBa\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[4a\x05\x1EWa\x05\x1Aa\x05\ta\x05\x036`\x04a\x03ZV[\x90a\n\xC1V[a\x05\x11a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x05RWa\x05<a\x0566`\x04a\x02~V[\x90a\x0B\0V[a\x05Da\0\xF2V[\x80a\x05N\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x05\x83a\x05WV[\x90V[4a\x05\xB6Wa\x05\x966`\x04a\x03\x18V[a\x05\xB2a\x05\xA1a\x05{V[a\x05\xA9a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x90V[a\x05\xCBa\x05\xBFV[P\x80a\x05\xE6a\x05\xE0cye\xDB\x0B`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90\x81\x15a\x05\xF3W[P\x90V[a\x05\xFD\x91Pa\x0B\x0CV[_a\x05\xEFV[_\x90V[a\x06\x10\x90a\x01\xA9V[\x90V[\x90a\x06\x1D\x90a\x06\x07V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x06=a\x06B\x91a\x06)V[a\x06.V[\x90V[a\x06O\x90Ta\x061V[\x90V[`\x01a\x06ja\x06p\x92a\x06ca\x06\x03V[P_a\x06\x13V[\x01a\x06EV[\x90V[\x90a\x06\x8E\x91a\x06\x89a\x06\x84\x82a\x06RV[a\x0B2V[a\x06\x90V[V[\x90a\x06\x9A\x91a\x0B\x8BV[PV[\x90a\x06\xA7\x91a\x06sV[V[\x90\x80a\x06\xC4a\x06\xBEa\x06\xB9a\x0C6V[a\x02OV[\x91a\x02OV[\x03a\x06\xD5Wa\x06\xD2\x91a\x0CCV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x06\xED`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x07\x01a\x06\xFCa\x04\xA1V[a\x0B2V[a\x07\ta\x07\x0BV[V[a\x07\x13a\rDV[V[a\x07\x1Da\x06\xF1V[V[_\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07K\x90a\x07#V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07eW`@RV[a\x07-V[\x90a\x07}a\x07va\0\xF2V[\x92\x83a\x07AV[V[Q\x90V[\x90P\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x07\xB8a\x07\xAF\x92` \x92a\x07\xA6\x81a\x07\x7FV[\x94\x85\x80\x93a\x07\x83V[\x93\x84\x91\x01a\x07\x88V[\x01\x90V[a\x07\xCA\x90a\x07\xD0\x93\x92a\x07\x93V[\x90a\x07\x93V[\x90V[` \x01\x90V[\x90a\x08 a\x08Ua\x08n\x93a\x07\xECa\x07\x1FV[Pa\x08/a\x17.\x91a\x08\0` \x84\x01a\x07jV[\x92\x80\x84Ra\x0F\xEF` \x85\x019a\x08\x14a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\x08Fa\x08:a\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\x08ga\x08a\x82a\x07\x7FV[\x91a\x07\xD3V[ \x90a\rZV[\x90V[`\xFF\x16\x90V[a\x08\x83a\x08\x88\x91a\x06)V[a\x08qV[\x90V[a\x08\x95\x90Ta\x08wV[\x90V[a\x08\xA0a\x05\xBFV[Pa\x08\xAB`\x01a\x08\x8BV[\x90V[a\x08\xBEa\x08\xB9a\x04\xA1V[a\x0B2V[a\x08\xC6a\x08\xC8V[V[a\x08\xD0a\r\xDBV[V[a\x08\xDAa\x08\xAEV[V[\x90V[a\x08\xF3a\x08\xEEa\x08\xF8\x92a\x02DV[a\x08\xDCV[a\x02DV[\x90V[a\t\x04\x90a\x08\xDFV[\x90V[a\t\x10\x90a\x08\xFBV[\x90V[\x90a\t\x1D\x90a\t\x07V[_R` R`@_ \x90V[a\tO\x91_a\tDa\tJ\x93a\t=a\x05\xBFV[P\x82a\x06\x13V[\x01a\t\x13V[a\x08\x8BV[\x90V[\x90a\te\x92\x91a\t`a\r\xE5V[a\t\xAFV[\x90V[a\t|a\twa\t\x81\x92a\x04}V[a\x08\xDCV[a\x02DV[\x90V[a\t\x8D\x90a\thV[\x90V[\x90V[a\t\xA7a\t\xA2a\t\xAC\x92a\x04}V[a\x08\xDCV[a\t\x90V[\x90V[\x91\x90\x91P\x81a\t\xCEa\t\xC8a\t\xC3_a\t\x84V[a\x02OV[\x91a\x02OV[\x14a\n\xA5Wa\nV\x90a\n\x10a\nEa\x17.a\t\xEC` \x82\x01a\x07jV[\x90\x80\x82Ra\x0F\xEF` \x83\x019a\n\x1F\x86a\n\x04a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\n6a\n*a\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\nQ_\x92\x91\x92a\t\x93V[a\x0E?V[\x90\x81\x90a\n\x8Ca\n\x86\x7F\xA0R4\xA1W\xFD,N=\x9Eo\r+\x02\xBC\xA1L\xBD[v\xD4\x95\xDF\xA1!\xBDu\xFC\x99#\xC5\xB9\x93a\t\x07V[\x91a\t\x07V[\x91a\n\x95a\0\xF2V[\x80a\n\x9F\x81a\x02\xABV[\x03\x90\xA3\x90V[_c\xD9.#=`\xE0\x1B\x81R\x80a\n\xBD`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x90a\n\xD3\x91a\n\xCEa\x07\x1FV[a\tRV[\x90V[\x90a\n\xF1\x91a\n\xECa\n\xE7\x82a\x06RV[a\x0B2V[a\n\xF3V[V[\x90a\n\xFD\x91a\x0CCV[PV[\x90a\x0B\n\x91a\n\xD6V[V[a\x0B\x14a\x05\xBFV[Pa\x0B.a\x0B(c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90V[a\x0BD\x90a\x0B>a\x0C6V[\x90a\x0FOV[V[\x90a\x0BR`\xFF\x91a\x04\x80V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Be\x90a\x01MV[\x90V[\x90V[\x90a\x0B\x80a\x0B{a\x0B\x87\x92a\x0B\\V[a\x0BhV[\x82Ta\x0BFV[\x90UV[a\x0B\x93a\x05\xBFV[Pa\x0B\xA8a\x0B\xA2\x82\x84\x90a\t)V[\x15a\x01MV[_\x14a\x0C0Wa\x0B\xCF`\x01a\x0B\xCA_a\x0B\xC2\x81\x86\x90a\x06\x13V[\x01\x85\x90a\t\x13V[a\x0BkV[\x90a\x0B\xD8a\x0C6V[\x90a\x0C\x15a\x0C\x0Fa\x0C\t\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x06\x07V[\x92a\t\x07V[\x92a\t\x07V[\x92a\x0C\x1Ea\0\xF2V[\x80a\x0C(\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C>a\x07\x1FV[P3\x90V[a\x0CKa\x05\xBFV[Pa\x0CW\x81\x83\x90a\t)V[_\x14a\x0C\xDEWa\x0C}_a\x0Cx_a\x0Cp\x81\x86\x90a\x06\x13V[\x01\x85\x90a\t\x13V[a\x0BkV[\x90a\x0C\x86a\x0C6V[\x90a\x0C\xC3a\x0C\xBDa\x0C\xB7\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x06\x07V[\x92a\t\x07V[\x92a\t\x07V[\x92a\x0C\xCCa\0\xF2V[\x80a\x0C\xD6\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C\xECa\x0F\x8AV[a\x0C\xF4a\x0C\xF6V[V[a\r\x01_`\x01a\x0BkV[a\r\ta\x0C6V[a\r?\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\r6a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\rLa\x0C\xE4V[V[a\rW\x90a\x08\xFBV[\x90V[\x90a\rx\x91a\rga\x07\x1FV[P\x90a\rr0a\rNV[\x91a\x0F\xBDV[\x90V[a\r\x83a\r\xE5V[a\r\x8Ba\r\x8DV[V[a\r\x98`\x01\x80a\x0BkV[a\r\xA0a\x0C6V[a\r\xD6\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\r\xCDa\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\r\xE3a\r{V[V[a\r\xEDa\x08\x98V[a\r\xF3WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\x0E\x0B`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x0E\x18\x90a\t\x90V[\x90RV[\x91` a\x0E=\x92\x94\x93a\x0E6`@\x82\x01\x96_\x83\x01\x90a\x0E\x0FV[\x01\x90a\x0E\x0FV[V[\x91\x90\x91a\x0EJa\x07\x1FV[Pa\x0ET0a\rNV[1a\x0Ega\x0Ea\x83a\t\x90V[\x91a\t\x90V[\x10a\x0F\x04Wa\x0Eu\x82a\x07\x7FV[a\x0E\x87a\x0E\x81_a\t\x93V[\x91a\t\x90V[\x14a\x0E\xE8W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x0E\xDDW\x81a\x0E\xBAa\x0E\xB4a\x0E\xAF_a\t\x84V[a\x02OV[\x91a\x02OV[\x14a\x0E\xC1WV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x0E\xD9`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x0F\0`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x0F\r0a\rNV[1a\x0F(_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\x0E\x1CV[\x03\x90\xFD[\x91` a\x0FM\x92\x94\x93a\x0FF`@\x82\x01\x96_\x83\x01\x90a\x03\x87V[\x01\x90a\x01\xEDV[V[\x90a\x0Fda\x0F^\x83\x83\x90a\t)V[\x15a\x01MV[a\x0FlWPPV[a\x0F\x86_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0F,V[\x03\x90\xFD[a\x0F\x9Ba\x0F\x95a\x08\x98V[\x15a\x01MV[a\x0F\xA1WV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x0F\xB9`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x91`\x0B\x92a\x0F\xC9a\x07\x1FV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V\xFE`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x14Ta\x02\xDA\x829a\x14T\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x17.\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01 V[V[a\x01)\x90a\x01{V[V[\x90V[\x90V[a\x01Ea\x01@a\x01J\x92a\x01+V[a\x01.V[a\0\x9CV[\x90V[a\x01V\x90a\x011V[\x90V[a\x01b\x90a\0\xA7V[\x90RV[\x91\x90a\x01y\x90_` \x85\x01\x94\x01\x90a\x01YV[V[\x80a\x01\x96a\x01\x90a\x01\x8B_a\x01MV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xA6Wa\x01\xA4\x90a\x02zV[V[a\x01\xC9a\x01\xB2_a\x01MV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01fV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE9a\x01\xEE\x91a\x01\xCDV[a\x01\xD2V[\x90V[a\x01\xFB\x90Ta\x01\xDDV[\x90V[_\x1B\x90V[\x90a\x02\x14`\x01\x80`\xA0\x1B\x03\x91a\x01\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x022a\x02-a\x027\x92a\0\x9CV[a\x01.V[a\0\x9CV[\x90V[a\x02C\x90a\x02\x1EV[\x90V[a\x02O\x90a\x02:V[\x90V[\x90V[\x90a\x02ja\x02ea\x02q\x92a\x02FV[a\x02RV[\x82Ta\x02\x03V[\x90UV[_\x01\x90V[a\x02\x83_a\x01\xF1V[a\x02\x8D\x82_a\x02UV[\x90a\x02\xC1a\x02\xBB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02FV[\x91a\x02FV[\x91a\x02\xCAa\x004V[\x80a\x02\xD4\x81a\x02uV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04UV[a\0\x1D_5a\0\x8CV[\x80c\x04\xF3\x86\xF4\x14a\0\x87W\x80c\x05.\xEF\xD1\x14a\0\x82W\x80c\x1BB\xC7\x11\x14a\0}W\x80cqP\x18\xA6\x14a\0xW\x80cz9y\xDC\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\"V[a\x03\xEDV[a\x03\x92V[a\x02\xA0V[a\x02kV[a\x01\x89V[a\x01\x01V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB8\x90a\0\xA4V[\x90V[a\0\xC4\x81a\0\xAFV[\x03a\0\xCBWV[_\x80\xFD[\x90P5\x90a\0\xDC\x82a\0\xBBV[V[\x90` \x82\x82\x03\x12a\0\xF7Wa\0\xF4\x91_\x01a\0\xCFV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01/Wa\x01\x19a\x01\x146`\x04a\0\xDEV[a\x06FV[a\x01!a\0\x92V[\x80a\x01+\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01B\x81a\x014V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[\x91\x90`@\x83\x82\x03\x12a\x01\x84W\x80a\x01xa\x01\x81\x92_\x86\x01a\0\xCFV[\x93` \x01a\x01MV[\x90V[a\0\x9CV[4a\x01\xB8Wa\x01\xA2a\x01\x9C6`\x04a\x01\\V[\x90a\x07\xE6V[a\x01\xAAa\0\x92V[\x80a\x01\xB4\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01\xC7WV[a\0\x9CV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\xE8\x90a\0\xAFV[\x90RV[\x90a\x01\xF9\x81` \x93a\x01\xDFV[\x01\x90V[` \x01\x90V[\x90a\x02 a\x02\x1Aa\x02\x13\x84a\x01\xCCV[\x80\x93a\x01\xD0V[\x92a\x01\xD9V[\x90_[\x81\x81\x10a\x020WPPP\x90V[\x90\x91\x92a\x02Ia\x02C`\x01\x92\x86Qa\x01\xECV[\x94a\x01\xFDV[\x91\x01\x91\x90\x91a\x02#V[a\x02h\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\x03V[\x90V[4a\x02\x9BWa\x02{6`\x04a\x01\xBDV[a\x02\x97a\x02\x86a\tDV[a\x02\x8Ea\0\x92V[\x91\x82\x91\x82a\x02SV[\x03\x90\xF3[a\0\x98V[4a\x02\xCEWa\x02\xB06`\x04a\x01\xBDV[a\x02\xB8a\nEV[a\x02\xC0a\0\x92V[\x80a\x02\xCA\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x19W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x14W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0FWV[a\x02\xDBV[a\x02\xD7V[a\x02\xD3V[\x91``\x83\x83\x03\x12a\x03kWa\x035\x82_\x85\x01a\0\xCFV[\x92a\x03C\x83` \x83\x01a\0\xCFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03fWa\x03b\x92\x01a\x02\xDFV[\x90\x91V[a\0\xA0V[a\0\x9CV[a\x03y\x90a\x014V[\x90RV[\x91\x90a\x03\x90\x90_` \x85\x01\x94\x01\x90a\x03pV[V[4a\x03\xC6Wa\x03\xC2a\x03\xB1a\x03\xA86`\x04a\x03\x1EV[\x92\x91\x90\x91a\x0B#V[a\x03\xB9a\0\x92V[\x91\x82\x91\x82a\x03}V[\x03\x90\xF3[a\0\x98V[a\x03\xD4\x90a\0\xAFV[\x90RV[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03\xCBV[V[4a\x04\x1DWa\x03\xFD6`\x04a\x01\xBDV[a\x04\x19a\x04\x08a\x0C\xB5V[a\x04\x10a\0\x92V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\0\x98V[4a\x04PWa\x04:a\x0456`\x04a\0\xDEV[a\r/V[a\x04Ba\0\x92V[\x80a\x04L\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x04j\x90a\x04ea\r:V[a\x05\\V[V[\x90V[\x90V[a\x04\x86a\x04\x81a\x04\x8B\x92a\x04lV[a\x04oV[a\0\xA4V[\x90V[a\x04\x97\x90a\x04rV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xDA`\x13` \x92a\x04\x9DV[a\x04\xE3\x81a\x04\xA6V[\x01\x90V[a\x04\xFC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\xCDV[\x90V[\x15a\x05\x06WV[a\x05\x0Ea\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05$`\x04\x82\x01a\x04\xE7V[\x03\x90\xFD[a\x05<a\x057a\x05A\x92a\0\xA4V[a\x04oV[a\0\xA4V[\x90V[a\x05M\x90a\x05(V[\x90V[a\x05Y\x90a\x05DV[\x90V[\x80a\x05wa\x05qa\x05l_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x06*Wa\x05\x99a\x05\x93`\x01a\x05\x8E\x84\x91a\x04\x9AV[a\r\xD5V[\x15a\x014V[a\x06\x0EWa\x05\xCCa\x05\xB4`\x01a\x05\xAF\x84\x91a\x04\x9AV[a\x0F\xFEV[a\x05\xC6a\x05\xC0\x84a\0\xAFV[\x91a\0\xAFV[\x14a\x04\xFFV[a\x05\xF6\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x05PV[\x90a\x05\xFFa\0\x92V[\x80a\x06\t\x81a\0\xFCV[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x06&`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x06B`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x06O\x90a\x04YV[V[\x90a\x06c\x91a\x06^a\r:V[a\x06\xEBV[V[_\x90V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x9D`\x11` \x92a\x04\x9DV[a\x06\xA6\x81a\x06iV[\x01\x90V[a\x06\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x90V[\x90V[\x15a\x06\xC9WV[a\x06\xD1a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xE7`\x04\x82\x01a\x06\xAAV[\x03\x90\xFD[\x90\x81a\x07\x07a\x07\x01a\x06\xFC_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x07\xCAWa\x07 `\x01a\x07\x1B\x84\x91a\x04\x9AV[a\r\xD5V[a\x07\xAEWa\x07,a\x06eV[P_\x14a\x07\x92Wa\x07Pa\x07J`\x01a\x07E\x84\x91a\x04\x9AV[a\x11RV[[a\x06\xC2V[a\x07z\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x05PV[\x90a\x07\x83a\0\x92V[\x80a\x07\x8D\x81a\0\xFCV[\x03\x90\xA2V[a\x07Pa\x07\xA9`\x01a\x07\xA4\x84\x91a\x04\x9AV[a\x112V[a\x07KV[_cQl5\x0F`\xE1\x1B\x81R\x80a\x07\xC6`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07\xE2`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[\x90a\x07\xF0\x91a\x06QV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\x1F\x90a\x07\xF7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x089W`@RV[a\x08\x01V[\x90a\x08Qa\x08Ja\0\x92V[\x92\x83a\x08\x15V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08kW` \x80\x91\x02\x01\x90V[a\x08\x01V[\x90a\x08\x82a\x08}\x83a\x08SV[a\x08>V[\x91\x82RV[6\x907V[\x90a\x08\xB1a\x08\x99\x83a\x08pV[\x92` \x80a\x08\xA7\x86\x93a\x08SV[\x92\x01\x91\x03\x90a\x08\x87V[V[\x90V[a\x08\xCAa\x08\xC5a\x08\xCF\x92a\x04lV[a\x04oV[a\x08\xB3V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08\xEF\x90a\x08\xB3V[_\x19\x81\x14a\x08\xFDW`\x01\x01\x90V[a\x08\xD2V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t \x82a\x01\xCCV[\x81\x10\x15a\t1W` \x80\x91\x02\x01\x01\x90V[a\t\x02V[\x90a\t@\x90a\0\xAFV[\x90RV[a\tLa\x07\xF2V[Pa\t_a\tZ`\x01a\x04\x9AV[a\x11vV[a\th\x81a\x08\x8CV[a\tza\tu`\x01a\x04\x9AV[a\x11\x8DV[a\t\x83_a\x08\xB6V[\x90[\x81a\t\x98a\t\x92\x86a\x08\xB3V[\x91a\x08\xB3V[\x10\x80a\t\xFDW[\x15a\t\xF4Wa\t\xD0\x81a\t\xC1a\t\xD8\x93a\t\xBC\x87\x91\x87\x90\x92a\t\x16V[a\t6V[a\t\xCB`\x01a\x04\x9AV[a\x11\xC7V[\x91\x90\x15a\x014V[a\t\xECWa\t\xE6\x90\x91a\x08\xE6V[\x90a\t\x85V[PP\x90P[\x90V[PP\x90Pa\t\xF1V[P\x80a\n\x19a\n\x13a\n\x0E_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14\x15a\t\x9FV[a\n(a\r:V[a\n0a\n2V[V[a\nCa\n>_a\x04\x8EV[a\x12.V[V[a\nMa\n V[V[a\nX\x90a\x05(V[\x90V[a\nd\x90a\nOV[\x90V[a\np\x90a\x05DV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\n\x86\x82a\x019V[V[\x90` \x82\x82\x03\x12a\n\xA1Wa\n\x9E\x91_\x01a\nyV[\x90V[a\0\x9CV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\xD4\x81a\n\xCD\x81a\n\xD9\x95a\n\xA6V[\x80\x95a\n\xAFV[a\x07\xF7V[\x01\x90V[a\x0B\x03a\x0B\x10\x95\x93\x94\x92\x94a\n\xF9``\x84\x01\x96_\x85\x01\x90a\x03\xCBV[` \x83\x01\x90a\x03\xCBV[`@\x81\x85\x03\x91\x01Ra\n\xBAV[\x90V[a\x0B\x1Ba\0\x92V[=_\x82>=\x90\xFD[\x92\x93\x91\x90a\x0B/a\x06eV[Pa\x0BBa\x0B=`\x01a\x04\x9AV[a\x11\x8DV[\x94\x85a\x0B^a\x0BXa\x0BS_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0CuW\x94[\x80a\x0B\x80a\x0Bza\x0Bu_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0CgWa\x0B\x96a\x0B\x91\x82a\n[V[a\ngV[` cz9y\xDC\x91\x87\x90a\x0B\xBF\x86\x94a\x0B\xCA\x89\x8D\x90a\x0B\xB3a\0\x92V[\x98\x89\x97\x88\x96\x87\x96a\nsV[\x86R`\x04\x86\x01a\n\xDDV[\x03\x91Z\xFA\x90\x81\x15a\x0CbW_\x91a\x0C4W[Pa\x0C)Wa\x0B\xF7a\x0B\xFF\x91a\x0B\xF2`\x01a\x04\x9AV[a\x11\xC7V[\x91\x90\x15a\x014V[\x15a\x0BeWPPPPa\x0C%\x91P[_\x91\x82\x91ceK{\xC3`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[PPP\x91PP`\x01\x90V[a\x0CU\x91P` =\x81\x11a\x0C[W[a\x0CM\x81\x83a\x08\x15V[\x81\x01\x90a\n\x88V[_a\x0B\xDCV[P=a\x0CCV[a\x0B\x13V[PPPPa\x0C%\x91Pa\x0C\x0EV[PPP\x91PP`\x01\x90V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\xA0a\x0C\xA5\x91a\x0C\x84V[a\x0C\x89V[\x90V[a\x0C\xB2\x90Ta\x0C\x94V[\x90V[a\x0C\xBDa\x0C\x80V[Pa\x0C\xC7_a\x0C\xA8V[\x90V[a\x0C\xDB\x90a\x0C\xD6a\r:V[a\x0C\xDDV[V[\x80a\x0C\xF8a\x0C\xF2a\x0C\xED_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\r\x08Wa\r\x06\x90a\x12.V[V[a\r+a\r\x14_a\x04\x8EV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[a\r8\x90a\x0C\xCAV[V[a\rBa\x0C\xB5V[a\r[a\rUa\rPa\x12\x8DV[a\0\xAFV[\x91a\0\xAFV[\x03a\rbWV[a\r\x84a\rma\x12\x8DV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[\x90a\r\x92\x90a\x05PV[_R` R`@_ \x90V[_\x90V[a\r\xAB\x90a\x014V[\x90V[\x90a\r\xB8\x90a\r\xA2V[_R` R`@_ \x90V[a\r\xCD_a\x04\x8EV[\x90V[`\x01\x90V[a\r\xDDa\x06eV[Pa\x0E\x05a\x0E\0a\r\xF2`\x01\x84\x01\x85\x90a\r\x88V[a\r\xFAa\r\x9EV[\x90a\r\xAEV[a\x0C\xA8V[a\x0E\x1Ea\x0E\x18a\x0E\x13a\r\xC4V[a\0\xAFV[\x91a\0\xAFV[\x14\x80a\x0E\x82W[_\x14a\x0E{Wa\x0Eea\x0E_a\x0EZa\x0EL`\x01a\x0Ek\x95\x01a\x0EFa\r\xC4V[\x90a\r\x88V[a\x0ETa\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[\x92a\0\xAFV[\x91a\0\xAFV[\x14_\x14a\x0EwW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x0E\xAAa\x0E\xA5a\x0E\x97`\x01\x84\x01\x85\x90a\r\x88V[a\x0E\x9Fa\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[a\x0E\xC3a\x0E\xBDa\x0E\xB8a\r\xC4V[a\0\xAFV[\x91a\0\xAFV[\x14a\x0E%V[a\x0E\xD2_a\x04\x8EV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xF9\x91\x02\x91a\x0E\xF3`\x01\x80`\xA0\x1B\x03\x84a\x0E\xD5V[\x92a\x0E\xD5V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0F\x1Ca\x0F\x17a\x0F$\x93a\x05PV[a\x0F\x03V[\x90\x83Ta\x0E\xD9V[\x90UV[a\x0F:\x91a\x0F4a\x0C\x80V[\x91a\x0F\x06V[V[\x90V[a\x0FSa\x0FNa\x0FX\x92a\x0F<V[a\x04oV[a\x08\xB3V[\x90V[\x90V[a\x0Fja\x0Fo\x91a\x0C\x84V[a\x0F[V[\x90V[a\x0F|\x90Ta\x0F^V[\x90V[a\x0F\x8Ea\x0F\x94\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x03\x91\x82\x11a\x0F\x9FWV[a\x08\xD2V[_\x1B\x90V[\x90a\x0F\xB5_\x19\x91a\x0F\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xD3a\x0F\xCEa\x0F\xD8\x92a\x08\xB3V[a\x04oV[a\x08\xB3V[\x90V[\x90V[\x90a\x0F\xF3a\x0F\xEEa\x0F\xFA\x92a\x0F\xBFV[a\x0F\xDBV[\x82Ta\x0F\xA9V[\x90UV[a\x10\x06a\x0C\x80V[P\x81a\x10!a\x10\x1Ba\x10\x16a\x0E\xC9V[a\0\xAFV[\x91a\0\xAFV[\x14\x80\x15a\x11\x18W[a\x11\nW\x80a\x10\x92a\x11\x07\x92a\x10\\a\x10Wa\x10I`\x01\x86\x01\x88\x90a\r\x88V[a\x10Qa\r\x9EV[\x90a\r\xAEV[a\x0C\xA8V[a\x10\x83a\x10~a\x10p`\x01\x87\x01\x89\x90a\r\x88V[a\x10xa\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[\x90a\x10\x8Ca\r\xD0V[\x92a\x12\x9AV[a\x10\xBA_a\x10\xB5a\x10\xA7`\x01\x85\x01\x87\x90a\r\x88V[a\x10\xAFa\r\x9EV[\x90a\r\xAEV[a\x0F(V[a\x10\xE2_a\x10\xDDa\x10\xCF`\x01\x85\x01\x87\x90a\r\x88V[a\x10\xD7a\r\xD0V[\x90a\r\xAEV[a\x0F(V[a\x11\x01_a\x10\xF0`\x01a\x0F?V[\x92\x01\x91a\x10\xFC\x83a\x0FrV[a\x0F\x7FV[\x90a\x0F\xDEV[\x90V[PPa\x11\x15_a\x04\x8EV[\x90V[Pa\x11-a\x11'\x82\x84\x90a\r\xD5V[\x15a\x014V[a\x10)V[\x90a\x11O\x91a\x11?a\x06eV[P\x90a\x11Ia\r\x9EV[\x91a\x12\xE5V[\x90V[\x90a\x11o\x91a\x11_a\x06eV[P\x90a\x11ia\r\xD0V[\x91a\x12\xE5V[\x90V[_\x90V[_a\x11\x8A\x91a\x11\x83a\x11rV[P\x01a\x0FrV[\x90V[a\x11\xBFa\x11\xB1`\x01a\x11\xC4\x93a\x11\xA1a\x0C\x80V[P\x01a\x11\xABa\r\xC4V[\x90a\r\x88V[a\x11\xB9a\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[\x90V[\x90a\x11\xED\x91a\x11\xD4a\x06eV[Pa\x11\xDDa\x0C\x80V[P\x90a\x11\xE7a\r\xD0V[\x91a\x13\x07V[\x91\x90\x91\x90V[\x90a\x12\x04`\x01\x80`\xA0\x1B\x03\x91a\x0F\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12#a\x12\x1Ea\x12*\x92a\x05PV[a\x0F\x03V[\x82Ta\x11\xF3V[\x90UV[a\x127_a\x0C\xA8V[a\x12A\x82_a\x12\x0EV[\x90a\x12ua\x12o\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05PV[\x91a\x05PV[\x91a\x12~a\0\x92V[\x80a\x12\x88\x81a\0\xFCV[\x03\x90\xA3V[a\x12\x95a\x0C\x80V[P3\x90V[\x91\x92a\x12\xD9a\x12\xDE\x92`\x01a\x12\xE3\x96a\x12\xD2\x83a\x12\xCDa\x12\xBD\x85\x8B\x01\x85\x90a\r\x88V[a\x12\xC7\x89\x15a\x014V[\x90a\r\xAEV[a\x12\x0EV[\x95\x01a\r\x88V[a\r\xAEV[a\x12\x0EV[V[\x91a\x13\x04\x92a\x12\xF2a\x06eV[P\x91a\x12\xFCa\r\xC4V[\x90\x91\x92a\x13\xA8V[\x90V[\x91a\x13\x10a\x06eV[Pa\x13\x19a\x0C\x80V[Pa\x13.a\x13(\x84\x84\x90a\r\xD5V[\x15a\x014V[_\x14a\x13EWPPP_\x90a\x13B_a\x04\x8EV[\x90V[a\x13Xa\x13]\x92`\x01a\x13b\x95\x01a\r\x88V[a\r\xAEV[a\x0C\xA8V[\x90\x81a\x13}a\x13wa\x13ra\r\xC4V[a\0\xAFV[\x91a\0\xAFV[\x14\x15\x91\x90V[a\x13\x92a\x13\x98\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x01\x80\x92\x11a\x13\xA3WV[a\x08\xD2V[\x91a\x13\xB1a\x06eV[Pa\x13\xC6a\x13\xC0\x84\x83\x90a\r\xD5V[\x15a\x014V[\x80a\x14CW[a\x13\xD8WPPPP_\x90V[a\x14>\x93a\x14\x19\x92a\x14\x0Fa\x14\x03a\x13\xFEa\x13\xF7`\x01\x89\x01\x85\x90a\r\x88V[\x85\x90a\r\xAEV[a\x0C\xA8V[\x91\x86\x90\x85\x90\x85\x92a\x12\x9AV[\x84\x92\x90\x91\x92a\x12\x9AV[a\x148_a\x14'`\x01a\x0F?V[\x92\x01\x91a\x143\x83a\x0FrV[a\x13\x83V[\x90a\x0F\xDEV[`\x01\x90V[Pa\x14O\x83\x83\x90a\r\xD5V[a\x13\xCCV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6105bb565b61001d5f356100ec565b806301ffc9a7146100e7578063248a9ca3146100e25780632f2ff15d146100dd57806336568abe146100d85780633f4ba83a146100d35780635681706b146100ce5780635c975abb146100c95780638456cb59146100c457806391d14854146100bf578063a217fddf146100ba578063c70bacfe146100b5578063d547741f146100b05763ec87621c0361000e57610586565b610523565b6104ed565b6104b8565b610447565b610414565b6103df565b6103a9565b610327565b6102e4565b6102b0565b61020f565b610174565b60e01c90565b60405190565b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61011581610100565b0361011c57565b5f80fd5b9050359061012d8261010c565b565b9060208282031261014857610145915f01610120565b90565b6100fc565b151590565b61015b9061014d565b9052565b9190610172905f60208501940190610152565b565b346101a4576101a061018f61018a36600461012f565b6105c3565b6101976100f2565b9182918261015f565b0390f35b6100f8565b90565b6101b5816101a9565b036101bc57565b5f80fd5b905035906101cd826101ac565b565b906020828203126101e8576101e5915f016101c0565b90565b6100fc565b6101f6906101a9565b9052565b919061020d905f602085019401906101ed565b565b3461023f5761023b61022a6102253660046101cf565b610652565b6102326100f2565b918291826101fa565b0390f35b6100f8565b60018060a01b031690565b61025890610244565b90565b6102648161024f565b0361026b57565b5f80fd5b9050359061027c8261025b565b565b91906040838203126102a6578061029a6102a3925f86016101c0565b9360200161026f565b90565b6100fc565b5f0190565b346102df576102c96102c336600461027e565b9061069d565b6102d16100f2565b806102db816102ab565b0390f35b6100f8565b34610313576102fd6102f736600461027e565b906106a9565b6103056100f2565b8061030f816102ab565b0390f35b6100f8565b5f91031261032257565b6100fc565b3461035557610337366004610318565b61033f610715565b6103476100f2565b80610351816102ab565b0390f35b6100f8565b9190604083820312610382578061037661037f925f860161026f565b936020016101c0565b90565b6100fc565b6103909061024f565b9052565b91906103a7905f60208501940190610387565b565b346103da576103d66103c56103bf36600461035a565b906107d9565b6103cd6100f2565b91829182610394565b0390f35b6100f8565b3461040f576103ef366004610318565b61040b6103fa610898565b6104026100f2565b9182918261015f565b0390f35b6100f8565b3461044257610424366004610318565b61042c6108d2565b6104346100f2565b8061043e816102ab565b0390f35b6100f8565b346104785761047461046361045d36600461027e565b90610929565b61046b6100f2565b9182918261015f565b0390f35b6100f8565b90565b5f1b90565b61049961049461049e9261047d565b610480565b6101a9565b90565b6104aa5f610485565b90565b6104b56104a1565b90565b346104e8576104c8366004610318565b6104e46104d36104ad565b6104db6100f2565b918291826101fa565b0390f35b6100f8565b3461051e5761051a61050961050336600461035a565b90610ac1565b6105116100f2565b91829182610394565b0390f35b6100f8565b346105525761053c61053636600461027e565b90610b00565b6105446100f2565b8061054e816102ab565b0390f35b6100f8565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b610583610557565b90565b346105b657610596366004610318565b6105b26105a161057b565b6105a96100f2565b918291826101fa565b0390f35b6100f8565b5f80fd5b5f90565b6105cb6105bf565b50806105e66105e0637965db0b60e01b610100565b91610100565b149081156105f3575b5090565b6105fd9150610b0c565b5f6105ef565b5f90565b610610906101a9565b90565b9061061d90610607565b5f5260205260405f2090565b5f1c90565b90565b61063d61064291610629565b61062e565b90565b61064f9054610631565b90565b600161066a61067092610663610603565b505f610613565b01610645565b90565b9061068e9161068961068482610652565b610b32565b610690565b565b9061069a91610b8b565b50565b906106a791610673565b565b90806106c46106be6106b9610c36565b61024f565b9161024f565b036106d5576106d291610c43565b50565b5f63334bd91960e11b8152806106ed600482016102ab565b0390fd5b6107016106fc6104a1565b610b32565b61070961070b565b565b610713610d44565b565b61071d6106f1565b565b5f90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061074b90610723565b810190811067ffffffffffffffff82111761076557604052565b61072d565b9061077d6107766100f2565b9283610741565b565b5190565b905090565b90825f9392825e0152565b6107b86107af926020926107a68161077f565b94858093610783565b93849101610788565b0190565b6107ca906107d09392610793565b90610793565b90565b60200190565b9061082061085561086e936107ec61071f565b5061082f61172e916108006020840161076a565b92808452610fef60208501396108146100f2565b94859160208301610394565b60208201810382520384610741565b61084661083a6100f2565b938492602084016107bc565b60208201810382520382610741565b6108676108618261077f565b916107d3565b2090610d5a565b90565b60ff1690565b61088361088891610629565b610871565b90565b6108959054610877565b90565b6108a06105bf565b506108ab600161088b565b90565b6108be6108b96104a1565b610b32565b6108c66108c8565b565b6108d0610ddb565b565b6108da6108ae565b565b90565b6108f36108ee6108f892610244565b6108dc565b610244565b90565b610904906108df565b90565b610910906108fb565b90565b9061091d90610907565b5f5260205260405f2090565b61094f915f61094461094a9361093d6105bf565b5082610613565b01610913565b61088b565b90565b906109659291610960610de5565b6109af565b90565b61097c6109776109819261047d565b6108dc565b610244565b90565b61098d90610968565b90565b90565b6109a76109a26109ac9261047d565b6108dc565b610990565b90565b91909150816109ce6109c86109c35f610984565b61024f565b9161024f565b14610aa557610a5690610a10610a4561172e6109ec6020820161076a565b90808252610fef6020830139610a1f86610a046100f2565b94859160208301610394565b60208201810382520384610741565b610a36610a2a6100f2565b938492602084016107bc565b60208201810382520382610741565b610a515f929192610993565b610e3f565b908190610a8c610a867fa05234a157fd2c4e3d9e6f0d2b02bca14cbd5b76d495dfa121bd75fc9923c5b993610907565b91610907565b91610a956100f2565b80610a9f816102ab565b0390a390565b5f63d92e233d60e01b815280610abd600482016102ab565b0390fd5b90610ad391610ace61071f565b610952565b90565b90610af191610aec610ae782610652565b610b32565b610af3565b565b90610afd91610c43565b50565b90610b0a91610ad6565b565b610b146105bf565b50610b2e610b286301ffc9a760e01b610100565b91610100565b1490565b610b4490610b3e610c36565b90610f4f565b565b90610b5260ff91610480565b9181191691161790565b610b659061014d565b90565b90565b90610b80610b7b610b8792610b5c565b610b68565b8254610b46565b9055565b610b936105bf565b50610ba8610ba2828490610929565b1561014d565b5f14610c3057610bcf6001610bca5f610bc2818690610613565b018590610913565b610b6b565b90610bd8610c36565b90610c15610c0f610c097f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610607565b92610907565b92610907565b92610c1e6100f2565b80610c28816102ab565b0390a4600190565b50505f90565b610c3e61071f565b503390565b610c4b6105bf565b50610c57818390610929565b5f14610cde57610c7d5f610c785f610c70818690610613565b018590610913565b610b6b565b90610c86610c36565b90610cc3610cbd610cb77ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610607565b92610907565b92610907565b92610ccc6100f2565b80610cd6816102ab565b0390a4600190565b50505f90565b610cec610f8a565b610cf4610cf6565b565b610d015f6001610b6b565b610d09610c36565b610d3f7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa91610d366100f2565b91829182610394565b0390a1565b610d4c610ce4565b565b610d57906108fb565b90565b90610d7891610d6761071f565b5090610d7230610d4e565b91610fbd565b90565b610d83610de5565b610d8b610d8d565b565b610d98600180610b6b565b610da0610c36565b610dd67f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25891610dcd6100f2565b91829182610394565b0390a1565b610de3610d7b565b565b610ded610898565b610df357565b5f63d93c066560e01b815280610e0b600482016102ab565b0390fd5b610e1890610990565b9052565b916020610e3d929493610e3660408201965f830190610e0f565b0190610e0f565b565b919091610e4a61071f565b50610e5430610d4e565b31610e67610e6183610990565b91610990565b10610f0457610e758261077f565b610e87610e815f610993565b91610990565b14610ee85760208251920190f5903d1519821516610edd5781610eba610eb4610eaf5f610984565b61024f565b9161024f565b14610ec157565b5f63b06ebf3d60e01b815280610ed9600482016102ab565b0390fd5b6040513d5f823e3d90fd5b5f631328927760e21b815280610f00600482016102ab565b0390fd5b610f0d30610d4e565b31610f285f92839263cf47918160e01b845260048401610e1c565b0390fd5b916020610f4d929493610f4660408201965f830190610387565b01906101ed565b565b90610f64610f5e838390610929565b1561014d565b610f6c575050565b610f865f92839263e2517d3f60e01b845260048401610f2c565b0390fd5b610f9b610f95610898565b1561014d565b610fa157565b5f638dfc202b60e01b815280610fb9600482016102ab565b0390fd5b91600b92610fc961071f565b50604051926040840152602083015281520160ff8153605560018060a01b039120169056fe60806040523461002f576100196100146100f4565b610115565b610021610034565b6114546102da823961145490f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b61011261172e8038038061010781610083565b9283398101906100d6565b90565b61011e90610120565b565b6101299061017b565b565b90565b90565b61014561014061014a9261012b565b61012e565b61009c565b90565b61015690610131565b90565b610162906100a7565b9052565b9190610179905f60208501940190610159565b565b8061019661019061018b5f61014d565b6100a7565b916100a7565b146101a6576101a49061027a565b565b6101c96101b25f61014d565b5f918291631e4fbdf760e01b835260048301610166565b0390fd5b5f1c90565b60018060a01b031690565b6101e96101ee916101cd565b6101d2565b90565b6101fb90546101dd565b90565b5f1b90565b9061021460018060a01b03916101fe565b9181191691161790565b61023261022d6102379261009c565b61012e565b61009c565b90565b6102439061021e565b90565b61024f9061023a565b90565b90565b9061026a61026561027192610246565b610252565b8254610203565b9055565b5f0190565b6102835f6101f1565b61028d825f610255565b906102c16102bb7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610246565b91610246565b916102ca610034565b806102d481610275565b0390a356fe60806040526004361015610013575b610455565b61001d5f3561008c565b806304f386f414610087578063052eefd1146100825780631b42c7111461007d578063715018a6146100785780637a3979dc146100735780638da5cb5b1461006e5763f2fde38b0361000e57610422565b6103ed565b610392565b6102a0565b61026b565b610189565b610101565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100b8906100a4565b90565b6100c4816100af565b036100cb57565b5f80fd5b905035906100dc826100bb565b565b906020828203126100f7576100f4915f016100cf565b90565b61009c565b5f0190565b3461012f576101196101143660046100de565b610646565b610121610092565b8061012b816100fc565b0390f35b610098565b151590565b61014281610134565b0361014957565b5f80fd5b9050359061015a82610139565b565b91906040838203126101845780610178610181925f86016100cf565b9360200161014d565b90565b61009c565b346101b8576101a261019c36600461015c565b906107e6565b6101aa610092565b806101b4816100fc565b0390f35b610098565b5f9103126101c757565b61009c565b5190565b60209181520190565b60200190565b6101e8906100af565b9052565b906101f9816020936101df565b0190565b60200190565b9061022061021a610213846101cc565b80936101d0565b926101d9565b905f5b8181106102305750505090565b90919261024961024360019286516101ec565b946101fd565b9101919091610223565b6102689160208201915f818403910152610203565b90565b3461029b5761027b3660046101bd565b610297610286610944565b61028e610092565b91829182610253565b0390f35b610098565b346102ce576102b03660046101bd565b6102b8610a45565b6102c0610092565b806102ca816100fc565b0390f35b610098565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156103195781359167ffffffffffffffff831161031457602001926001830284011161030f57565b6102db565b6102d7565b6102d3565b9160608383031261036b57610335825f85016100cf565b9261034383602083016100cf565b92604082013567ffffffffffffffff81116103665761036292016102df565b9091565b6100a0565b61009c565b61037990610134565b9052565b9190610390905f60208501940190610370565b565b346103c6576103c26103b16103a836600461031e565b92919091610b23565b6103b9610092565b9182918261037d565b0390f35b610098565b6103d4906100af565b9052565b91906103eb905f602085019401906103cb565b565b3461041d576103fd3660046101bd565b610419610408610cb5565b610410610092565b918291826103d8565b0390f35b610098565b346104505761043a6104353660046100de565b610d2f565b610442610092565b8061044c816100fc565b0390f35b610098565b5f80fd5b61046a90610465610d3a565b61055c565b565b90565b90565b61048661048161048b9261046c565b61046f565b6100a4565b90565b61049790610472565b90565b90565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b6104da601360209261049d565b6104e3816104a6565b0190565b6104fc9060208101905f8183039101526104cd565b90565b1561050657565b61050e610092565b62461bcd60e51b815280610524600482016104e7565b0390fd5b61053c610537610541926100a4565b61046f565b6100a4565b90565b61054d90610528565b90565b61055990610544565b90565b8061057761057161056c5f61048e565b6100af565b916100af565b1461062a57610599610593600161058e849161049a565b610dd5565b15610134565b61060e576105cc6105b460016105af849161049a565b610ffe565b6105c66105c0846100af565b916100af565b146104ff565b6105f67fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610550565b906105ff610092565b80610609816100fc565b0390a2565b5f633d0f293d60e01b815280610626600482016100fc565b0390fd5b5f63e6c4247b60e01b815280610642600482016100fc565b0390fd5b61064f90610459565b565b906106639161065e610d3a565b6106eb565b565b5f90565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b61069d601160209261049d565b6106a681610669565b0190565b6106bf9060208101905f818303910152610690565b90565b156106c957565b6106d1610092565b62461bcd60e51b8152806106e7600482016106aa565b0390fd5b90816107076107016106fc5f61048e565b6100af565b916100af565b146107ca57610720600161071b849161049a565b610dd5565b6107ae5761072c610665565b505f146107925761075061074a6001610745849161049a565b611152565b5b6106c2565b61077a7f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610550565b90610783610092565b8061078d816100fc565b0390a2565b6107506107a960016107a4849161049a565b611132565b61074b565b5f63516c350f60e11b8152806107c6600482016100fc565b0390fd5b5f63e6c4247b60e01b8152806107e2600482016100fc565b0390fd5b906107f091610651565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061081f906107f7565b810190811067ffffffffffffffff82111761083957604052565b610801565b9061085161084a610092565b9283610815565b565b67ffffffffffffffff811161086b5760208091020190565b610801565b9061088261087d83610853565b61083e565b918252565b369037565b906108b161089983610870565b926020806108a78693610853565b9201910390610887565b565b90565b6108ca6108c56108cf9261046c565b61046f565b6108b3565b90565b634e487b7160e01b5f52601160045260245ffd5b6108ef906108b3565b5f1981146108fd5760010190565b6108d2565b634e487b7160e01b5f52603260045260245ffd5b90610920826101cc565b811015610931576020809102010190565b610902565b90610940906100af565b9052565b61094c6107f2565b5061095f61095a600161049a565b611176565b6109688161088c565b61097a610975600161049a565b61118d565b6109835f6108b6565b905b81610998610992866108b3565b916108b3565b10806109fd575b156109f4576109d0816109c16109d8936109bc8791879092610916565b610936565b6109cb600161049a565b6111c7565b919015610134565b6109ec576109e690916108e6565b90610985565b505090505b90565b505090506109f1565b5080610a19610a13610a0e5f61048e565b6100af565b916100af565b141561099f565b610a28610d3a565b610a30610a32565b565b610a43610a3e5f61048e565b61122e565b565b610a4d610a20565b565b610a5890610528565b90565b610a6490610a4f565b90565b610a7090610544565b90565b60e01b90565b90505190610a8682610139565b565b90602082820312610aa157610a9e915f01610a79565b90565b61009c565b60209181520190565b90825f939282370152565b9190610ad481610acd81610ad995610aa6565b8095610aaf565b6107f7565b0190565b610b03610b109593949294610af960608401965f8501906103cb565b60208301906103cb565b6040818503910152610aba565b90565b610b1b610092565b3d5f823e3d90fd5b92939190610b2f610665565b50610b42610b3d600161049a565b61118d565b9485610b5e610b58610b535f61048e565b6100af565b916100af565b14610c7557945b80610b80610b7a610b755f61048e565b6100af565b916100af565b14610c6757610b96610b9182610a5b565b610a67565b6020637a3979dc918790610bbf8694610bca898d90610bb3610092565b98899788968796610a73565b865260048601610add565b03915afa908115610c62575f91610c34575b50610c2957610bf7610bff91610bf2600161049a565b6111c7565b919015610134565b15610b655750505050610c2591505b5f91829163654b7bc360e01b8352600483016103d8565b0390fd5b505050915050600190565b610c55915060203d8111610c5b575b610c4d8183610815565b810190610a88565b5f610bdc565b503d610c43565b610b13565b50505050610c259150610c0e565b505050915050600190565b5f90565b5f1c90565b60018060a01b031690565b610ca0610ca591610c84565b610c89565b90565b610cb29054610c94565b90565b610cbd610c80565b50610cc75f610ca8565b90565b610cdb90610cd6610d3a565b610cdd565b565b80610cf8610cf2610ced5f61048e565b6100af565b916100af565b14610d0857610d069061122e565b565b610d2b610d145f61048e565b5f918291631e4fbdf760e01b8352600483016103d8565b0390fd5b610d3890610cca565b565b610d42610cb5565b610d5b610d55610d5061128d565b6100af565b916100af565b03610d6257565b610d84610d6d61128d565b5f91829163118cdaa760e01b8352600483016103d8565b0390fd5b90610d9290610550565b5f5260205260405f2090565b5f90565b610dab90610134565b90565b90610db890610da2565b5f5260205260405f2090565b610dcd5f61048e565b90565b600190565b610ddd610665565b50610e05610e00610df2600184018590610d88565b610dfa610d9e565b90610dae565b610ca8565b610e1e610e18610e13610dc4565b6100af565b916100af565b1480610e82575b5f14610e7b57610e65610e5f610e5a610e4c6001610e6b9501610e46610dc4565b90610d88565b610e54610dd0565b90610dae565b610ca8565b926100af565b916100af565b145f14610e7757600190565b5f90565b5050600190565b50610eaa610ea5610e97600184018590610d88565b610e9f610dd0565b90610dae565b610ca8565b610ec3610ebd610eb8610dc4565b6100af565b916100af565b14610e25565b610ed25f61048e565b90565b1b90565b91906008610ef9910291610ef360018060a01b0384610ed5565b92610ed5565b9181191691161790565b90565b9190610f1c610f17610f2493610550565b610f03565b908354610ed9565b9055565b610f3a91610f34610c80565b91610f06565b565b90565b610f53610f4e610f5892610f3c565b61046f565b6108b3565b90565b90565b610f6a610f6f91610c84565b610f5b565b90565b610f7c9054610f5e565b90565b610f8e610f94919392936108b3565b926108b3565b8203918211610f9f57565b6108d2565b5f1b90565b90610fb55f1991610fa4565b9181191691161790565b610fd3610fce610fd8926108b3565b61046f565b6108b3565b90565b90565b90610ff3610fee610ffa92610fbf565b610fdb565b8254610fa9565b9055565b611006610c80565b508161102161101b611016610ec9565b6100af565b916100af565b148015611118575b61110a57806110926111079261105c611057611049600186018890610d88565b611051610d9e565b90610dae565b610ca8565b61108361107e611070600187018990610d88565b611078610dd0565b90610dae565b610ca8565b9061108c610dd0565b9261129a565b6110ba5f6110b56110a7600185018790610d88565b6110af610d9e565b90610dae565b610f28565b6110e25f6110dd6110cf600185018790610d88565b6110d7610dd0565b90610dae565b610f28565b6111015f6110f06001610f3f565b9201916110fc83610f72565b610f7f565b90610fde565b90565b50506111155f61048e565b90565b5061112d611127828490610dd5565b15610134565b611029565b9061114f9161113f610665565b5090611149610d9e565b916112e5565b90565b9061116f9161115f610665565b5090611169610dd0565b916112e5565b90565b5f90565b5f61118a91611183611172565b5001610f72565b90565b6111bf6111b160016111c4936111a1610c80565b50016111ab610dc4565b90610d88565b6111b9610dd0565b90610dae565b610ca8565b90565b906111ed916111d4610665565b506111dd610c80565b50906111e7610dd0565b91611307565b91909190565b9061120460018060a01b0391610fa4565b9181191691161790565b9061122361121e61122a92610550565b610f03565b82546111f3565b9055565b6112375f610ca8565b611241825f61120e565b9061127561126f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610550565b91610550565b9161127e610092565b80611288816100fc565b0390a3565b611295610c80565b503390565b91926112d96112de9260016112e3966112d2836112cd6112bd858b018590610d88565b6112c78915610134565b90610dae565b61120e565b9501610d88565b610dae565b61120e565b565b91611304926112f2610665565b50916112fc610dc4565b9091926113a8565b90565b91611310610665565b50611319610c80565b5061132e611328848490610dd5565b15610134565b5f14611345575050505f906113425f61048e565b90565b61135861135d9260016113629501610d88565b610dae565b610ca8565b908161137d611377611372610dc4565b6100af565b916100af565b14159190565b611392611398919392936108b3565b926108b3565b82018092116113a357565b6108d2565b916113b1610665565b506113c66113c0848390610dd5565b15610134565b80611443575b6113d857505050505f90565b61143e936114199261140f6114036113fe6113f7600189018590610d88565b8590610dae565b610ca8565b9186908590859261129a565b849290919261129a565b6114385f6114276001610f3f565b92019161143383610f72565b611383565b90610fde565b600190565b5061144f838390610dd5565b6113cc56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x05\xBBV[a\0\x1D_5a\0\xECV[\x80c\x01\xFF\xC9\xA7\x14a\0\xE7W\x80c$\x8A\x9C\xA3\x14a\0\xE2W\x80c//\xF1]\x14a\0\xDDW\x80c6V\x8A\xBE\x14a\0\xD8W\x80c?K\xA8:\x14a\0\xD3W\x80cV\x81pk\x14a\0\xCEW\x80c\\\x97Z\xBB\x14a\0\xC9W\x80c\x84V\xCBY\x14a\0\xC4W\x80c\x91\xD1HT\x14a\0\xBFW\x80c\xA2\x17\xFD\xDF\x14a\0\xBAW\x80c\xC7\x0B\xAC\xFE\x14a\0\xB5W\x80c\xD5Gt\x1F\x14a\0\xB0Wc\xEC\x87b\x1C\x03a\0\x0EWa\x05\x86V[a\x05#V[a\x04\xEDV[a\x04\xB8V[a\x04GV[a\x04\x14V[a\x03\xDFV[a\x03\xA9V[a\x03'V[a\x02\xE4V[a\x02\xB0V[a\x02\x0FV[a\x01tV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x15\x81a\x01\0V[\x03a\x01\x1CWV[_\x80\xFD[\x90P5\x90a\x01-\x82a\x01\x0CV[V[\x90` \x82\x82\x03\x12a\x01HWa\x01E\x91_\x01a\x01 V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x01[\x90a\x01MV[\x90RV[\x91\x90a\x01r\x90_` \x85\x01\x94\x01\x90a\x01RV[V[4a\x01\xA4Wa\x01\xA0a\x01\x8Fa\x01\x8A6`\x04a\x01/V[a\x05\xC3V[a\x01\x97a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[a\x01\xB5\x81a\x01\xA9V[\x03a\x01\xBCWV[_\x80\xFD[\x90P5\x90a\x01\xCD\x82a\x01\xACV[V[\x90` \x82\x82\x03\x12a\x01\xE8Wa\x01\xE5\x91_\x01a\x01\xC0V[\x90V[a\0\xFCV[a\x01\xF6\x90a\x01\xA9V[\x90RV[\x91\x90a\x02\r\x90_` \x85\x01\x94\x01\x90a\x01\xEDV[V[4a\x02?Wa\x02;a\x02*a\x02%6`\x04a\x01\xCFV[a\x06RV[a\x022a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02X\x90a\x02DV[\x90V[a\x02d\x81a\x02OV[\x03a\x02kWV[_\x80\xFD[\x90P5\x90a\x02|\x82a\x02[V[V[\x91\x90`@\x83\x82\x03\x12a\x02\xA6W\x80a\x02\x9Aa\x02\xA3\x92_\x86\x01a\x01\xC0V[\x93` \x01a\x02oV[\x90V[a\0\xFCV[_\x01\x90V[4a\x02\xDFWa\x02\xC9a\x02\xC36`\x04a\x02~V[\x90a\x06\x9DV[a\x02\xD1a\0\xF2V[\x80a\x02\xDB\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x03\x13Wa\x02\xFDa\x02\xF76`\x04a\x02~V[\x90a\x06\xA9V[a\x03\x05a\0\xF2V[\x80a\x03\x0F\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x03\"WV[a\0\xFCV[4a\x03UWa\x0376`\x04a\x03\x18V[a\x03?a\x07\x15V[a\x03Ga\0\xF2V[\x80a\x03Q\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x91\x90`@\x83\x82\x03\x12a\x03\x82W\x80a\x03va\x03\x7F\x92_\x86\x01a\x02oV[\x93` \x01a\x01\xC0V[\x90V[a\0\xFCV[a\x03\x90\x90a\x02OV[\x90RV[\x91\x90a\x03\xA7\x90_` \x85\x01\x94\x01\x90a\x03\x87V[V[4a\x03\xDAWa\x03\xD6a\x03\xC5a\x03\xBF6`\x04a\x03ZV[\x90a\x07\xD9V[a\x03\xCDa\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x04\x0FWa\x03\xEF6`\x04a\x03\x18V[a\x04\x0Ba\x03\xFAa\x08\x98V[a\x04\x02a\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[4a\x04BWa\x04$6`\x04a\x03\x18V[a\x04,a\x08\xD2V[a\x044a\0\xF2V[\x80a\x04>\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[4a\x04xWa\x04ta\x04ca\x04]6`\x04a\x02~V[\x90a\t)V[a\x04ka\0\xF2V[\x91\x82\x91\x82a\x01_V[\x03\x90\xF3[a\0\xF8V[\x90V[_\x1B\x90V[a\x04\x99a\x04\x94a\x04\x9E\x92a\x04}V[a\x04\x80V[a\x01\xA9V[\x90V[a\x04\xAA_a\x04\x85V[\x90V[a\x04\xB5a\x04\xA1V[\x90V[4a\x04\xE8Wa\x04\xC86`\x04a\x03\x18V[a\x04\xE4a\x04\xD3a\x04\xADV[a\x04\xDBa\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[4a\x05\x1EWa\x05\x1Aa\x05\ta\x05\x036`\x04a\x03ZV[\x90a\n\xC1V[a\x05\x11a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xF3[a\0\xF8V[4a\x05RWa\x05<a\x0566`\x04a\x02~V[\x90a\x0B\0V[a\x05Da\0\xF2V[\x80a\x05N\x81a\x02\xABV[\x03\x90\xF3[a\0\xF8V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x05\x83a\x05WV[\x90V[4a\x05\xB6Wa\x05\x966`\x04a\x03\x18V[a\x05\xB2a\x05\xA1a\x05{V[a\x05\xA9a\0\xF2V[\x91\x82\x91\x82a\x01\xFAV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x90V[a\x05\xCBa\x05\xBFV[P\x80a\x05\xE6a\x05\xE0cye\xDB\x0B`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90\x81\x15a\x05\xF3W[P\x90V[a\x05\xFD\x91Pa\x0B\x0CV[_a\x05\xEFV[_\x90V[a\x06\x10\x90a\x01\xA9V[\x90V[\x90a\x06\x1D\x90a\x06\x07V[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x06=a\x06B\x91a\x06)V[a\x06.V[\x90V[a\x06O\x90Ta\x061V[\x90V[`\x01a\x06ja\x06p\x92a\x06ca\x06\x03V[P_a\x06\x13V[\x01a\x06EV[\x90V[\x90a\x06\x8E\x91a\x06\x89a\x06\x84\x82a\x06RV[a\x0B2V[a\x06\x90V[V[\x90a\x06\x9A\x91a\x0B\x8BV[PV[\x90a\x06\xA7\x91a\x06sV[V[\x90\x80a\x06\xC4a\x06\xBEa\x06\xB9a\x0C6V[a\x02OV[\x91a\x02OV[\x03a\x06\xD5Wa\x06\xD2\x91a\x0CCV[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a\x06\xED`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x07\x01a\x06\xFCa\x04\xA1V[a\x0B2V[a\x07\ta\x07\x0BV[V[a\x07\x13a\rDV[V[a\x07\x1Da\x06\xF1V[V[_\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x07K\x90a\x07#V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07eW`@RV[a\x07-V[\x90a\x07}a\x07va\0\xF2V[\x92\x83a\x07AV[V[Q\x90V[\x90P\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x07\xB8a\x07\xAF\x92` \x92a\x07\xA6\x81a\x07\x7FV[\x94\x85\x80\x93a\x07\x83V[\x93\x84\x91\x01a\x07\x88V[\x01\x90V[a\x07\xCA\x90a\x07\xD0\x93\x92a\x07\x93V[\x90a\x07\x93V[\x90V[` \x01\x90V[\x90a\x08 a\x08Ua\x08n\x93a\x07\xECa\x07\x1FV[Pa\x08/a\x17.\x91a\x08\0` \x84\x01a\x07jV[\x92\x80\x84Ra\x0F\xEF` \x85\x019a\x08\x14a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\x08Fa\x08:a\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\x08ga\x08a\x82a\x07\x7FV[\x91a\x07\xD3V[ \x90a\rZV[\x90V[`\xFF\x16\x90V[a\x08\x83a\x08\x88\x91a\x06)V[a\x08qV[\x90V[a\x08\x95\x90Ta\x08wV[\x90V[a\x08\xA0a\x05\xBFV[Pa\x08\xAB`\x01a\x08\x8BV[\x90V[a\x08\xBEa\x08\xB9a\x04\xA1V[a\x0B2V[a\x08\xC6a\x08\xC8V[V[a\x08\xD0a\r\xDBV[V[a\x08\xDAa\x08\xAEV[V[\x90V[a\x08\xF3a\x08\xEEa\x08\xF8\x92a\x02DV[a\x08\xDCV[a\x02DV[\x90V[a\t\x04\x90a\x08\xDFV[\x90V[a\t\x10\x90a\x08\xFBV[\x90V[\x90a\t\x1D\x90a\t\x07V[_R` R`@_ \x90V[a\tO\x91_a\tDa\tJ\x93a\t=a\x05\xBFV[P\x82a\x06\x13V[\x01a\t\x13V[a\x08\x8BV[\x90V[\x90a\te\x92\x91a\t`a\r\xE5V[a\t\xAFV[\x90V[a\t|a\twa\t\x81\x92a\x04}V[a\x08\xDCV[a\x02DV[\x90V[a\t\x8D\x90a\thV[\x90V[\x90V[a\t\xA7a\t\xA2a\t\xAC\x92a\x04}V[a\x08\xDCV[a\t\x90V[\x90V[\x91\x90\x91P\x81a\t\xCEa\t\xC8a\t\xC3_a\t\x84V[a\x02OV[\x91a\x02OV[\x14a\n\xA5Wa\nV\x90a\n\x10a\nEa\x17.a\t\xEC` \x82\x01a\x07jV[\x90\x80\x82Ra\x0F\xEF` \x83\x019a\n\x1F\x86a\n\x04a\0\xF2V[\x94\x85\x91` \x83\x01a\x03\x94V[` \x82\x01\x81\x03\x82R\x03\x84a\x07AV[a\n6a\n*a\0\xF2V[\x93\x84\x92` \x84\x01a\x07\xBCV[` \x82\x01\x81\x03\x82R\x03\x82a\x07AV[a\nQ_\x92\x91\x92a\t\x93V[a\x0E?V[\x90\x81\x90a\n\x8Ca\n\x86\x7F\xA0R4\xA1W\xFD,N=\x9Eo\r+\x02\xBC\xA1L\xBD[v\xD4\x95\xDF\xA1!\xBDu\xFC\x99#\xC5\xB9\x93a\t\x07V[\x91a\t\x07V[\x91a\n\x95a\0\xF2V[\x80a\n\x9F\x81a\x02\xABV[\x03\x90\xA3\x90V[_c\xD9.#=`\xE0\x1B\x81R\x80a\n\xBD`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x90a\n\xD3\x91a\n\xCEa\x07\x1FV[a\tRV[\x90V[\x90a\n\xF1\x91a\n\xECa\n\xE7\x82a\x06RV[a\x0B2V[a\n\xF3V[V[\x90a\n\xFD\x91a\x0CCV[PV[\x90a\x0B\n\x91a\n\xD6V[V[a\x0B\x14a\x05\xBFV[Pa\x0B.a\x0B(c\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\0V[\x91a\x01\0V[\x14\x90V[a\x0BD\x90a\x0B>a\x0C6V[\x90a\x0FOV[V[\x90a\x0BR`\xFF\x91a\x04\x80V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0Be\x90a\x01MV[\x90V[\x90V[\x90a\x0B\x80a\x0B{a\x0B\x87\x92a\x0B\\V[a\x0BhV[\x82Ta\x0BFV[\x90UV[a\x0B\x93a\x05\xBFV[Pa\x0B\xA8a\x0B\xA2\x82\x84\x90a\t)V[\x15a\x01MV[_\x14a\x0C0Wa\x0B\xCF`\x01a\x0B\xCA_a\x0B\xC2\x81\x86\x90a\x06\x13V[\x01\x85\x90a\t\x13V[a\x0BkV[\x90a\x0B\xD8a\x0C6V[\x90a\x0C\x15a\x0C\x0Fa\x0C\t\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x06\x07V[\x92a\t\x07V[\x92a\t\x07V[\x92a\x0C\x1Ea\0\xF2V[\x80a\x0C(\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C>a\x07\x1FV[P3\x90V[a\x0CKa\x05\xBFV[Pa\x0CW\x81\x83\x90a\t)V[_\x14a\x0C\xDEWa\x0C}_a\x0Cx_a\x0Cp\x81\x86\x90a\x06\x13V[\x01\x85\x90a\t\x13V[a\x0BkV[\x90a\x0C\x86a\x0C6V[\x90a\x0C\xC3a\x0C\xBDa\x0C\xB7\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x06\x07V[\x92a\t\x07V[\x92a\t\x07V[\x92a\x0C\xCCa\0\xF2V[\x80a\x0C\xD6\x81a\x02\xABV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0C\xECa\x0F\x8AV[a\x0C\xF4a\x0C\xF6V[V[a\r\x01_`\x01a\x0BkV[a\r\ta\x0C6V[a\r?\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAA\x91a\r6a\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\rLa\x0C\xE4V[V[a\rW\x90a\x08\xFBV[\x90V[\x90a\rx\x91a\rga\x07\x1FV[P\x90a\rr0a\rNV[\x91a\x0F\xBDV[\x90V[a\r\x83a\r\xE5V[a\r\x8Ba\r\x8DV[V[a\r\x98`\x01\x80a\x0BkV[a\r\xA0a\x0C6V[a\r\xD6\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2X\x91a\r\xCDa\0\xF2V[\x91\x82\x91\x82a\x03\x94V[\x03\x90\xA1V[a\r\xE3a\r{V[V[a\r\xEDa\x08\x98V[a\r\xF3WV[_c\xD9<\x06e`\xE0\x1B\x81R\x80a\x0E\x0B`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x0E\x18\x90a\t\x90V[\x90RV[\x91` a\x0E=\x92\x94\x93a\x0E6`@\x82\x01\x96_\x83\x01\x90a\x0E\x0FV[\x01\x90a\x0E\x0FV[V[\x91\x90\x91a\x0EJa\x07\x1FV[Pa\x0ET0a\rNV[1a\x0Ega\x0Ea\x83a\t\x90V[\x91a\t\x90V[\x10a\x0F\x04Wa\x0Eu\x82a\x07\x7FV[a\x0E\x87a\x0E\x81_a\t\x93V[\x91a\t\x90V[\x14a\x0E\xE8W` \x82Q\x92\x01\x90\xF5\x90=\x15\x19\x82\x15\x16a\x0E\xDDW\x81a\x0E\xBAa\x0E\xB4a\x0E\xAF_a\t\x84V[a\x02OV[\x91a\x02OV[\x14a\x0E\xC1WV[_c\xB0n\xBF=`\xE0\x1B\x81R\x80a\x0E\xD9`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[`@Q=_\x82>=\x90\xFD[_c\x13(\x92w`\xE2\x1B\x81R\x80a\x0F\0`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[a\x0F\r0a\rNV[1a\x0F(_\x92\x83\x92c\xCFG\x91\x81`\xE0\x1B\x84R`\x04\x84\x01a\x0E\x1CV[\x03\x90\xFD[\x91` a\x0FM\x92\x94\x93a\x0FF`@\x82\x01\x96_\x83\x01\x90a\x03\x87V[\x01\x90a\x01\xEDV[V[\x90a\x0Fda\x0F^\x83\x83\x90a\t)V[\x15a\x01MV[a\x0FlWPPV[a\x0F\x86_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0F,V[\x03\x90\xFD[a\x0F\x9Ba\x0F\x95a\x08\x98V[\x15a\x01MV[a\x0F\xA1WV[_c\x8D\xFC +`\xE0\x1B\x81R\x80a\x0F\xB9`\x04\x82\x01a\x02\xABV[\x03\x90\xFD[\x91`\x0B\x92a\x0F\xC9a\x07\x1FV[P`@Q\x92`@\x84\x01R` \x83\x01R\x81R\x01`\xFF\x81S`U`\x01\x80`\xA0\x1B\x03\x91 \x16\x90V\xFE`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x14Ta\x02\xDA\x829a\x14T\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a\x17.\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01 V[V[a\x01)\x90a\x01{V[V[\x90V[\x90V[a\x01Ea\x01@a\x01J\x92a\x01+V[a\x01.V[a\0\x9CV[\x90V[a\x01V\x90a\x011V[\x90V[a\x01b\x90a\0\xA7V[\x90RV[\x91\x90a\x01y\x90_` \x85\x01\x94\x01\x90a\x01YV[V[\x80a\x01\x96a\x01\x90a\x01\x8B_a\x01MV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xA6Wa\x01\xA4\x90a\x02zV[V[a\x01\xC9a\x01\xB2_a\x01MV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01fV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE9a\x01\xEE\x91a\x01\xCDV[a\x01\xD2V[\x90V[a\x01\xFB\x90Ta\x01\xDDV[\x90V[_\x1B\x90V[\x90a\x02\x14`\x01\x80`\xA0\x1B\x03\x91a\x01\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x022a\x02-a\x027\x92a\0\x9CV[a\x01.V[a\0\x9CV[\x90V[a\x02C\x90a\x02\x1EV[\x90V[a\x02O\x90a\x02:V[\x90V[\x90V[\x90a\x02ja\x02ea\x02q\x92a\x02FV[a\x02RV[\x82Ta\x02\x03V[\x90UV[_\x01\x90V[a\x02\x83_a\x01\xF1V[a\x02\x8D\x82_a\x02UV[\x90a\x02\xC1a\x02\xBB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02FV[\x91a\x02FV[\x91a\x02\xCAa\x004V[\x80a\x02\xD4\x81a\x02uV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04UV[a\0\x1D_5a\0\x8CV[\x80c\x04\xF3\x86\xF4\x14a\0\x87W\x80c\x05.\xEF\xD1\x14a\0\x82W\x80c\x1BB\xC7\x11\x14a\0}W\x80cqP\x18\xA6\x14a\0xW\x80cz9y\xDC\x14a\0sW\x80c\x8D\xA5\xCB[\x14a\0nWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04\"V[a\x03\xEDV[a\x03\x92V[a\x02\xA0V[a\x02kV[a\x01\x89V[a\x01\x01V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB8\x90a\0\xA4V[\x90V[a\0\xC4\x81a\0\xAFV[\x03a\0\xCBWV[_\x80\xFD[\x90P5\x90a\0\xDC\x82a\0\xBBV[V[\x90` \x82\x82\x03\x12a\0\xF7Wa\0\xF4\x91_\x01a\0\xCFV[\x90V[a\0\x9CV[_\x01\x90V[4a\x01/Wa\x01\x19a\x01\x146`\x04a\0\xDEV[a\x06FV[a\x01!a\0\x92V[\x80a\x01+\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x01B\x81a\x014V[\x03a\x01IWV[_\x80\xFD[\x90P5\x90a\x01Z\x82a\x019V[V[\x91\x90`@\x83\x82\x03\x12a\x01\x84W\x80a\x01xa\x01\x81\x92_\x86\x01a\0\xCFV[\x93` \x01a\x01MV[\x90V[a\0\x9CV[4a\x01\xB8Wa\x01\xA2a\x01\x9C6`\x04a\x01\\V[\x90a\x07\xE6V[a\x01\xAAa\0\x92V[\x80a\x01\xB4\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x01\xC7WV[a\0\x9CV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x01\xE8\x90a\0\xAFV[\x90RV[\x90a\x01\xF9\x81` \x93a\x01\xDFV[\x01\x90V[` \x01\x90V[\x90a\x02 a\x02\x1Aa\x02\x13\x84a\x01\xCCV[\x80\x93a\x01\xD0V[\x92a\x01\xD9V[\x90_[\x81\x81\x10a\x020WPPP\x90V[\x90\x91\x92a\x02Ia\x02C`\x01\x92\x86Qa\x01\xECV[\x94a\x01\xFDV[\x91\x01\x91\x90\x91a\x02#V[a\x02h\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\x03V[\x90V[4a\x02\x9BWa\x02{6`\x04a\x01\xBDV[a\x02\x97a\x02\x86a\tDV[a\x02\x8Ea\0\x92V[\x91\x82\x91\x82a\x02SV[\x03\x90\xF3[a\0\x98V[4a\x02\xCEWa\x02\xB06`\x04a\x01\xBDV[a\x02\xB8a\nEV[a\x02\xC0a\0\x92V[\x80a\x02\xCA\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x03\x19W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x03\x14W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x03\x0FWV[a\x02\xDBV[a\x02\xD7V[a\x02\xD3V[\x91``\x83\x83\x03\x12a\x03kWa\x035\x82_\x85\x01a\0\xCFV[\x92a\x03C\x83` \x83\x01a\0\xCFV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x03fWa\x03b\x92\x01a\x02\xDFV[\x90\x91V[a\0\xA0V[a\0\x9CV[a\x03y\x90a\x014V[\x90RV[\x91\x90a\x03\x90\x90_` \x85\x01\x94\x01\x90a\x03pV[V[4a\x03\xC6Wa\x03\xC2a\x03\xB1a\x03\xA86`\x04a\x03\x1EV[\x92\x91\x90\x91a\x0B#V[a\x03\xB9a\0\x92V[\x91\x82\x91\x82a\x03}V[\x03\x90\xF3[a\0\x98V[a\x03\xD4\x90a\0\xAFV[\x90RV[\x91\x90a\x03\xEB\x90_` \x85\x01\x94\x01\x90a\x03\xCBV[V[4a\x04\x1DWa\x03\xFD6`\x04a\x01\xBDV[a\x04\x19a\x04\x08a\x0C\xB5V[a\x04\x10a\0\x92V[\x91\x82\x91\x82a\x03\xD8V[\x03\x90\xF3[a\0\x98V[4a\x04PWa\x04:a\x0456`\x04a\0\xDEV[a\r/V[a\x04Ba\0\x92V[\x80a\x04L\x81a\0\xFCV[\x03\x90\xF3[a\0\x98V[_\x80\xFD[a\x04j\x90a\x04ea\r:V[a\x05\\V[V[\x90V[\x90V[a\x04\x86a\x04\x81a\x04\x8B\x92a\x04lV[a\x04oV[a\0\xA4V[\x90V[a\x04\x97\x90a\x04rV[\x90V[\x90V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x04\xDA`\x13` \x92a\x04\x9DV[a\x04\xE3\x81a\x04\xA6V[\x01\x90V[a\x04\xFC\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x04\xCDV[\x90V[\x15a\x05\x06WV[a\x05\x0Ea\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x05$`\x04\x82\x01a\x04\xE7V[\x03\x90\xFD[a\x05<a\x057a\x05A\x92a\0\xA4V[a\x04oV[a\0\xA4V[\x90V[a\x05M\x90a\x05(V[\x90V[a\x05Y\x90a\x05DV[\x90V[\x80a\x05wa\x05qa\x05l_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x06*Wa\x05\x99a\x05\x93`\x01a\x05\x8E\x84\x91a\x04\x9AV[a\r\xD5V[\x15a\x014V[a\x06\x0EWa\x05\xCCa\x05\xB4`\x01a\x05\xAF\x84\x91a\x04\x9AV[a\x0F\xFEV[a\x05\xC6a\x05\xC0\x84a\0\xAFV[\x91a\0\xAFV[\x14a\x04\xFFV[a\x05\xF6\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x05PV[\x90a\x05\xFFa\0\x92V[\x80a\x06\t\x81a\0\xFCV[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x06&`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x06B`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[a\x06O\x90a\x04YV[V[\x90a\x06c\x91a\x06^a\r:V[a\x06\xEBV[V[_\x90V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\x9D`\x11` \x92a\x04\x9DV[a\x06\xA6\x81a\x06iV[\x01\x90V[a\x06\xBF\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\x90V[\x90V[\x15a\x06\xC9WV[a\x06\xD1a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x06\xE7`\x04\x82\x01a\x06\xAAV[\x03\x90\xFD[\x90\x81a\x07\x07a\x07\x01a\x06\xFC_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x07\xCAWa\x07 `\x01a\x07\x1B\x84\x91a\x04\x9AV[a\r\xD5V[a\x07\xAEWa\x07,a\x06eV[P_\x14a\x07\x92Wa\x07Pa\x07J`\x01a\x07E\x84\x91a\x04\x9AV[a\x11RV[[a\x06\xC2V[a\x07z\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x05PV[\x90a\x07\x83a\0\x92V[\x80a\x07\x8D\x81a\0\xFCV[\x03\x90\xA2V[a\x07Pa\x07\xA9`\x01a\x07\xA4\x84\x91a\x04\x9AV[a\x112V[a\x07KV[_cQl5\x0F`\xE1\x1B\x81R\x80a\x07\xC6`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x07\xE2`\x04\x82\x01a\0\xFCV[\x03\x90\xFD[\x90a\x07\xF0\x91a\x06QV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x08\x1F\x90a\x07\xF7V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x089W`@RV[a\x08\x01V[\x90a\x08Qa\x08Ja\0\x92V[\x92\x83a\x08\x15V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x08kW` \x80\x91\x02\x01\x90V[a\x08\x01V[\x90a\x08\x82a\x08}\x83a\x08SV[a\x08>V[\x91\x82RV[6\x907V[\x90a\x08\xB1a\x08\x99\x83a\x08pV[\x92` \x80a\x08\xA7\x86\x93a\x08SV[\x92\x01\x91\x03\x90a\x08\x87V[V[\x90V[a\x08\xCAa\x08\xC5a\x08\xCF\x92a\x04lV[a\x04oV[a\x08\xB3V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x08\xEF\x90a\x08\xB3V[_\x19\x81\x14a\x08\xFDW`\x01\x01\x90V[a\x08\xD2V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\t \x82a\x01\xCCV[\x81\x10\x15a\t1W` \x80\x91\x02\x01\x01\x90V[a\t\x02V[\x90a\t@\x90a\0\xAFV[\x90RV[a\tLa\x07\xF2V[Pa\t_a\tZ`\x01a\x04\x9AV[a\x11vV[a\th\x81a\x08\x8CV[a\tza\tu`\x01a\x04\x9AV[a\x11\x8DV[a\t\x83_a\x08\xB6V[\x90[\x81a\t\x98a\t\x92\x86a\x08\xB3V[\x91a\x08\xB3V[\x10\x80a\t\xFDW[\x15a\t\xF4Wa\t\xD0\x81a\t\xC1a\t\xD8\x93a\t\xBC\x87\x91\x87\x90\x92a\t\x16V[a\t6V[a\t\xCB`\x01a\x04\x9AV[a\x11\xC7V[\x91\x90\x15a\x014V[a\t\xECWa\t\xE6\x90\x91a\x08\xE6V[\x90a\t\x85V[PP\x90P[\x90V[PP\x90Pa\t\xF1V[P\x80a\n\x19a\n\x13a\n\x0E_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14\x15a\t\x9FV[a\n(a\r:V[a\n0a\n2V[V[a\nCa\n>_a\x04\x8EV[a\x12.V[V[a\nMa\n V[V[a\nX\x90a\x05(V[\x90V[a\nd\x90a\nOV[\x90V[a\np\x90a\x05DV[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\n\x86\x82a\x019V[V[\x90` \x82\x82\x03\x12a\n\xA1Wa\n\x9E\x91_\x01a\nyV[\x90V[a\0\x9CV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\n\xD4\x81a\n\xCD\x81a\n\xD9\x95a\n\xA6V[\x80\x95a\n\xAFV[a\x07\xF7V[\x01\x90V[a\x0B\x03a\x0B\x10\x95\x93\x94\x92\x94a\n\xF9``\x84\x01\x96_\x85\x01\x90a\x03\xCBV[` \x83\x01\x90a\x03\xCBV[`@\x81\x85\x03\x91\x01Ra\n\xBAV[\x90V[a\x0B\x1Ba\0\x92V[=_\x82>=\x90\xFD[\x92\x93\x91\x90a\x0B/a\x06eV[Pa\x0BBa\x0B=`\x01a\x04\x9AV[a\x11\x8DV[\x94\x85a\x0B^a\x0BXa\x0BS_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0CuW\x94[\x80a\x0B\x80a\x0Bza\x0Bu_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\x0CgWa\x0B\x96a\x0B\x91\x82a\n[V[a\ngV[` cz9y\xDC\x91\x87\x90a\x0B\xBF\x86\x94a\x0B\xCA\x89\x8D\x90a\x0B\xB3a\0\x92V[\x98\x89\x97\x88\x96\x87\x96a\nsV[\x86R`\x04\x86\x01a\n\xDDV[\x03\x91Z\xFA\x90\x81\x15a\x0CbW_\x91a\x0C4W[Pa\x0C)Wa\x0B\xF7a\x0B\xFF\x91a\x0B\xF2`\x01a\x04\x9AV[a\x11\xC7V[\x91\x90\x15a\x014V[\x15a\x0BeWPPPPa\x0C%\x91P[_\x91\x82\x91ceK{\xC3`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[PPP\x91PP`\x01\x90V[a\x0CU\x91P` =\x81\x11a\x0C[W[a\x0CM\x81\x83a\x08\x15V[\x81\x01\x90a\n\x88V[_a\x0B\xDCV[P=a\x0CCV[a\x0B\x13V[PPPPa\x0C%\x91Pa\x0C\x0EV[PPP\x91PP`\x01\x90V[_\x90V[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x0C\xA0a\x0C\xA5\x91a\x0C\x84V[a\x0C\x89V[\x90V[a\x0C\xB2\x90Ta\x0C\x94V[\x90V[a\x0C\xBDa\x0C\x80V[Pa\x0C\xC7_a\x0C\xA8V[\x90V[a\x0C\xDB\x90a\x0C\xD6a\r:V[a\x0C\xDDV[V[\x80a\x0C\xF8a\x0C\xF2a\x0C\xED_a\x04\x8EV[a\0\xAFV[\x91a\0\xAFV[\x14a\r\x08Wa\r\x06\x90a\x12.V[V[a\r+a\r\x14_a\x04\x8EV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[a\r8\x90a\x0C\xCAV[V[a\rBa\x0C\xB5V[a\r[a\rUa\rPa\x12\x8DV[a\0\xAFV[\x91a\0\xAFV[\x03a\rbWV[a\r\x84a\rma\x12\x8DV[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03\xD8V[\x03\x90\xFD[\x90a\r\x92\x90a\x05PV[_R` R`@_ \x90V[_\x90V[a\r\xAB\x90a\x014V[\x90V[\x90a\r\xB8\x90a\r\xA2V[_R` R`@_ \x90V[a\r\xCD_a\x04\x8EV[\x90V[`\x01\x90V[a\r\xDDa\x06eV[Pa\x0E\x05a\x0E\0a\r\xF2`\x01\x84\x01\x85\x90a\r\x88V[a\r\xFAa\r\x9EV[\x90a\r\xAEV[a\x0C\xA8V[a\x0E\x1Ea\x0E\x18a\x0E\x13a\r\xC4V[a\0\xAFV[\x91a\0\xAFV[\x14\x80a\x0E\x82W[_\x14a\x0E{Wa\x0Eea\x0E_a\x0EZa\x0EL`\x01a\x0Ek\x95\x01a\x0EFa\r\xC4V[\x90a\r\x88V[a\x0ETa\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[\x92a\0\xAFV[\x91a\0\xAFV[\x14_\x14a\x0EwW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x0E\xAAa\x0E\xA5a\x0E\x97`\x01\x84\x01\x85\x90a\r\x88V[a\x0E\x9Fa\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[a\x0E\xC3a\x0E\xBDa\x0E\xB8a\r\xC4V[a\0\xAFV[\x91a\0\xAFV[\x14a\x0E%V[a\x0E\xD2_a\x04\x8EV[\x90V[\x1B\x90V[\x91\x90`\x08a\x0E\xF9\x91\x02\x91a\x0E\xF3`\x01\x80`\xA0\x1B\x03\x84a\x0E\xD5V[\x92a\x0E\xD5V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x0F\x1Ca\x0F\x17a\x0F$\x93a\x05PV[a\x0F\x03V[\x90\x83Ta\x0E\xD9V[\x90UV[a\x0F:\x91a\x0F4a\x0C\x80V[\x91a\x0F\x06V[V[\x90V[a\x0FSa\x0FNa\x0FX\x92a\x0F<V[a\x04oV[a\x08\xB3V[\x90V[\x90V[a\x0Fja\x0Fo\x91a\x0C\x84V[a\x0F[V[\x90V[a\x0F|\x90Ta\x0F^V[\x90V[a\x0F\x8Ea\x0F\x94\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x03\x91\x82\x11a\x0F\x9FWV[a\x08\xD2V[_\x1B\x90V[\x90a\x0F\xB5_\x19\x91a\x0F\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0F\xD3a\x0F\xCEa\x0F\xD8\x92a\x08\xB3V[a\x04oV[a\x08\xB3V[\x90V[\x90V[\x90a\x0F\xF3a\x0F\xEEa\x0F\xFA\x92a\x0F\xBFV[a\x0F\xDBV[\x82Ta\x0F\xA9V[\x90UV[a\x10\x06a\x0C\x80V[P\x81a\x10!a\x10\x1Ba\x10\x16a\x0E\xC9V[a\0\xAFV[\x91a\0\xAFV[\x14\x80\x15a\x11\x18W[a\x11\nW\x80a\x10\x92a\x11\x07\x92a\x10\\a\x10Wa\x10I`\x01\x86\x01\x88\x90a\r\x88V[a\x10Qa\r\x9EV[\x90a\r\xAEV[a\x0C\xA8V[a\x10\x83a\x10~a\x10p`\x01\x87\x01\x89\x90a\r\x88V[a\x10xa\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[\x90a\x10\x8Ca\r\xD0V[\x92a\x12\x9AV[a\x10\xBA_a\x10\xB5a\x10\xA7`\x01\x85\x01\x87\x90a\r\x88V[a\x10\xAFa\r\x9EV[\x90a\r\xAEV[a\x0F(V[a\x10\xE2_a\x10\xDDa\x10\xCF`\x01\x85\x01\x87\x90a\r\x88V[a\x10\xD7a\r\xD0V[\x90a\r\xAEV[a\x0F(V[a\x11\x01_a\x10\xF0`\x01a\x0F?V[\x92\x01\x91a\x10\xFC\x83a\x0FrV[a\x0F\x7FV[\x90a\x0F\xDEV[\x90V[PPa\x11\x15_a\x04\x8EV[\x90V[Pa\x11-a\x11'\x82\x84\x90a\r\xD5V[\x15a\x014V[a\x10)V[\x90a\x11O\x91a\x11?a\x06eV[P\x90a\x11Ia\r\x9EV[\x91a\x12\xE5V[\x90V[\x90a\x11o\x91a\x11_a\x06eV[P\x90a\x11ia\r\xD0V[\x91a\x12\xE5V[\x90V[_\x90V[_a\x11\x8A\x91a\x11\x83a\x11rV[P\x01a\x0FrV[\x90V[a\x11\xBFa\x11\xB1`\x01a\x11\xC4\x93a\x11\xA1a\x0C\x80V[P\x01a\x11\xABa\r\xC4V[\x90a\r\x88V[a\x11\xB9a\r\xD0V[\x90a\r\xAEV[a\x0C\xA8V[\x90V[\x90a\x11\xED\x91a\x11\xD4a\x06eV[Pa\x11\xDDa\x0C\x80V[P\x90a\x11\xE7a\r\xD0V[\x91a\x13\x07V[\x91\x90\x91\x90V[\x90a\x12\x04`\x01\x80`\xA0\x1B\x03\x91a\x0F\xA4V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x12#a\x12\x1Ea\x12*\x92a\x05PV[a\x0F\x03V[\x82Ta\x11\xF3V[\x90UV[a\x127_a\x0C\xA8V[a\x12A\x82_a\x12\x0EV[\x90a\x12ua\x12o\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05PV[\x91a\x05PV[\x91a\x12~a\0\x92V[\x80a\x12\x88\x81a\0\xFCV[\x03\x90\xA3V[a\x12\x95a\x0C\x80V[P3\x90V[\x91\x92a\x12\xD9a\x12\xDE\x92`\x01a\x12\xE3\x96a\x12\xD2\x83a\x12\xCDa\x12\xBD\x85\x8B\x01\x85\x90a\r\x88V[a\x12\xC7\x89\x15a\x014V[\x90a\r\xAEV[a\x12\x0EV[\x95\x01a\r\x88V[a\r\xAEV[a\x12\x0EV[V[\x91a\x13\x04\x92a\x12\xF2a\x06eV[P\x91a\x12\xFCa\r\xC4V[\x90\x91\x92a\x13\xA8V[\x90V[\x91a\x13\x10a\x06eV[Pa\x13\x19a\x0C\x80V[Pa\x13.a\x13(\x84\x84\x90a\r\xD5V[\x15a\x014V[_\x14a\x13EWPPP_\x90a\x13B_a\x04\x8EV[\x90V[a\x13Xa\x13]\x92`\x01a\x13b\x95\x01a\r\x88V[a\r\xAEV[a\x0C\xA8V[\x90\x81a\x13}a\x13wa\x13ra\r\xC4V[a\0\xAFV[\x91a\0\xAFV[\x14\x15\x91\x90V[a\x13\x92a\x13\x98\x91\x93\x92\x93a\x08\xB3V[\x92a\x08\xB3V[\x82\x01\x80\x92\x11a\x13\xA3WV[a\x08\xD2V[\x91a\x13\xB1a\x06eV[Pa\x13\xC6a\x13\xC0\x84\x83\x90a\r\xD5V[\x15a\x014V[\x80a\x14CW[a\x13\xD8WPPPP_\x90V[a\x14>\x93a\x14\x19\x92a\x14\x0Fa\x14\x03a\x13\xFEa\x13\xF7`\x01\x89\x01\x85\x90a\r\x88V[\x85\x90a\r\xAEV[a\x0C\xA8V[\x91\x86\x90\x85\x90\x85\x92a\x12\x9AV[\x84\x92\x90\x91\x92a\x12\x9AV[a\x148_a\x14'`\x01a\x0F?V[\x92\x01\x91a\x143\x83a\x0FrV[a\x13\x83V[\x90a\x0F\xDEV[`\x01\x90V[Pa\x14O\x83\x83\x90a\r\xD5V[a\x13\xCCV",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Custom error with signature `Create2EmptyBytecode()` and selector `0x4ca249dc`.
```solidity
error Create2EmptyBytecode();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Create2EmptyBytecode {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Create2EmptyBytecode> for UnderlyingRustTuple<'_> {
            fn from(value: Create2EmptyBytecode) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Create2EmptyBytecode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Create2EmptyBytecode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Create2EmptyBytecode()";
            const SELECTOR: [u8; 4] = [76u8, 162u8, 73u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `EnforcedPause()` and selector `0xd93c0665`.
```solidity
error EnforcedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EnforcedPause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EnforcedPause> for UnderlyingRustTuple<'_> {
            fn from(value: EnforcedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EnforcedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EnforcedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EnforcedPause()";
            const SELECTOR: [u8; 4] = [217u8, 60u8, 6u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ExpectedPause()` and selector `0x8dfc202b`.
```solidity
error ExpectedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExpectedPause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExpectedPause> for UnderlyingRustTuple<'_> {
            fn from(value: ExpectedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExpectedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExpectedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExpectedPause()";
            const SELECTOR: [u8; 4] = [141u8, 252u8, 32u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FailedDeployment()` and selector `0xb06ebf3d`.
```solidity
error FailedDeployment();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedDeployment {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedDeployment> for UnderlyingRustTuple<'_> {
            fn from(value: FailedDeployment) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedDeployment {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedDeployment {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedDeployment()";
            const SELECTOR: [u8; 4] = [176u8, 110u8, 191u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InsufficientBalance(uint256,uint256)` and selector `0xcf479181`.
```solidity
error InsufficientBalance(uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientBalance {
        #[allow(missing_docs)]
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientBalance> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientBalance) -> Self {
                (value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    balance: tuple.0,
                    needed: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientBalance(uint256,uint256)";
            const SELECTOR: [u8; 4] = [207u8, 71u8, 145u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
        }
    };
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `Paused(address)` and selector `0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258`.
```solidity
event Paused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Paused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Paused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Paused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8,
                231u8,
                140u8,
                234u8,
                1u8,
                190u8,
                227u8,
                32u8,
                205u8,
                78u8,
                66u8,
                2u8,
                112u8,
                181u8,
                234u8,
                116u8,
                0u8,
                13u8,
                17u8,
                176u8,
                201u8,
                247u8,
                71u8,
                84u8,
                235u8,
                219u8,
                252u8,
                84u8,
                75u8,
                5u8,
                162u8,
                88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Paused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Paused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Paused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RequireOrModuleCreated(address,address)` and selector `0xa05234a157fd2c4e3d9e6f0d2b02bca14cbd5b76d495dfa121bd75fc9923c5b9`.
```solidity
event RequireOrModuleCreated(address indexed module, address indexed admin);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RequireOrModuleCreated {
        #[allow(missing_docs)]
        pub module: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RequireOrModuleCreated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RequireOrModuleCreated(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                160u8,
                82u8,
                52u8,
                161u8,
                87u8,
                253u8,
                44u8,
                78u8,
                61u8,
                158u8,
                111u8,
                13u8,
                43u8,
                2u8,
                188u8,
                161u8,
                76u8,
                189u8,
                91u8,
                118u8,
                212u8,
                149u8,
                223u8,
                161u8,
                33u8,
                189u8,
                117u8,
                252u8,
                153u8,
                35u8,
                197u8,
                185u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    module: topics.1,
                    admin: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.module.clone(), self.admin.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.module,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.admin,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RequireOrModuleCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RequireOrModuleCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RequireOrModuleCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Unpaused(address)` and selector `0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa`.
```solidity
event Unpaused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Unpaused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Unpaused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Unpaused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                93u8,
                185u8,
                238u8,
                10u8,
                73u8,
                91u8,
                242u8,
                230u8,
                255u8,
                156u8,
                145u8,
                167u8,
                131u8,
                76u8,
                27u8,
                164u8,
                253u8,
                210u8,
                68u8,
                165u8,
                232u8,
                170u8,
                78u8,
                83u8,
                123u8,
                211u8,
                138u8,
                234u8,
                228u8,
                176u8,
                115u8,
                170u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Unpaused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Unpaused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Unpaused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MANAGER_ROLE()` and selector `0xec87621c`.
```solidity
function MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLECall {}
    ///Container type for the return parameters of the [`MANAGER_ROLE()`](MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MANAGER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [236u8, 135u8, 98u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `computeModuleAddress(address,bytes32)` and selector `0x5681706b`.
```solidity
function computeModuleAddress(address admin, bytes32 salt) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeModuleAddressCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`computeModuleAddress(address,bytes32)`](computeModuleAddressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeModuleAddressReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeModuleAddressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeModuleAddressCall) -> Self {
                    (value.admin, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeModuleAddressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        salt: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeModuleAddressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeModuleAddressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeModuleAddressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for computeModuleAddressCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = computeModuleAddressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "computeModuleAddress(address,bytes32)";
            const SELECTOR: [u8; 4] = [86u8, 129u8, 112u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `createRequireOrModule(address,bytes32)` and selector `0xc70bacfe`.
```solidity
function createRequireOrModule(address admin, bytes32 salt) external returns (address module);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createRequireOrModuleCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`createRequireOrModule(address,bytes32)`](createRequireOrModuleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createRequireOrModuleReturn {
        #[allow(missing_docs)]
        pub module: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createRequireOrModuleCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: createRequireOrModuleCall) -> Self {
                    (value.admin, value.salt)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createRequireOrModuleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        salt: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createRequireOrModuleReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createRequireOrModuleReturn) -> Self {
                    (value.module,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createRequireOrModuleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { module: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createRequireOrModuleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createRequireOrModuleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createRequireOrModule(address,bytes32)";
            const SELECTOR: [u8; 4] = [199u8, 11u8, 172u8, 254u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pause()` and selector `0x8456cb59`.
```solidity
function pause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseCall {}
    ///Container type for the return parameters of the [`pause()`](pauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pause()";
            const SELECTOR: [u8; 4] = [132u8, 86u8, 203u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `paused()` and selector `0x5c975abb`.
```solidity
function paused() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedCall {}
    ///Container type for the return parameters of the [`paused()`](pausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: pausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pausedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pausedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused()";
            const SELECTOR: [u8; 4] = [92u8, 151u8, 90u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `unpause()` and selector `0x3f4ba83a`.
```solidity
function unpause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseCall {}
    ///Container type for the return parameters of the [`unpause()`](unpauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpause()";
            const SELECTOR: [u8; 4] = [63u8, 75u8, 168u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireOrModuleFactory`](self) function calls.
    pub enum RequireOrModuleFactoryCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MANAGER_ROLE(MANAGER_ROLECall),
        #[allow(missing_docs)]
        computeModuleAddress(computeModuleAddressCall),
        #[allow(missing_docs)]
        createRequireOrModule(createRequireOrModuleCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        pause(pauseCall),
        #[allow(missing_docs)]
        paused(pausedCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        unpause(unpauseCall),
    }
    #[automatically_derived]
    impl RequireOrModuleFactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [63u8, 75u8, 168u8, 58u8],
            [86u8, 129u8, 112u8, 107u8],
            [92u8, 151u8, 90u8, 187u8],
            [132u8, 86u8, 203u8, 89u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [199u8, 11u8, 172u8, 254u8],
            [213u8, 71u8, 116u8, 31u8],
            [236u8, 135u8, 98u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireOrModuleFactoryCalls {
        const NAME: &'static str = "RequireOrModuleFactoryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MANAGER_ROLE(_) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::computeModuleAddress(_) => {
                    <computeModuleAddressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createRequireOrModule(_) => {
                    <createRequireOrModuleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pause(_) => <pauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::paused(_) => <pausedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpause(_) => <unpauseCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn unpause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::unpause)
                    }
                    unpause
                },
                {
                    fn computeModuleAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <computeModuleAddressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::computeModuleAddress)
                    }
                    computeModuleAddress
                },
                {
                    fn paused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::paused)
                    }
                    paused
                },
                {
                    fn pause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::pause)
                    }
                    pause
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn createRequireOrModule(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <createRequireOrModuleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::createRequireOrModule)
                    }
                    createRequireOrModule
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::computeModuleAddress(inner) => {
                    <computeModuleAddressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createRequireOrModule(inner) => {
                    <createRequireOrModuleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::computeModuleAddress(inner) => {
                    <computeModuleAddressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createRequireOrModule(inner) => {
                    <createRequireOrModuleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`RequireOrModuleFactory`](self) custom errors.
    pub enum RequireOrModuleFactoryErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        Create2EmptyBytecode(Create2EmptyBytecode),
        #[allow(missing_docs)]
        EnforcedPause(EnforcedPause),
        #[allow(missing_docs)]
        ExpectedPause(ExpectedPause),
        #[allow(missing_docs)]
        FailedDeployment(FailedDeployment),
        #[allow(missing_docs)]
        InsufficientBalance(InsufficientBalance),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
    }
    #[automatically_derived]
    impl RequireOrModuleFactoryErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [76u8, 162u8, 73u8, 220u8],
            [102u8, 151u8, 178u8, 50u8],
            [141u8, 252u8, 32u8, 43u8],
            [176u8, 110u8, 191u8, 61u8],
            [207u8, 71u8, 145u8, 129u8],
            [217u8, 46u8, 35u8, 61u8],
            [217u8, 60u8, 6u8, 101u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireOrModuleFactoryErrors {
        const NAME: &'static str = "RequireOrModuleFactoryErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Create2EmptyBytecode(_) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EnforcedPause(_) => {
                    <EnforcedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExpectedPause(_) => {
                    <ExpectedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedDeployment(_) => {
                    <FailedDeployment as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientBalance(_) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors>] = &[
                {
                    fn Create2EmptyBytecode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryErrors::Create2EmptyBytecode)
                    }
                    Create2EmptyBytecode
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                RequireOrModuleFactoryErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn ExpectedPause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <ExpectedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryErrors::ExpectedPause)
                    }
                    ExpectedPause
                },
                {
                    fn FailedDeployment(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <FailedDeployment as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryErrors::FailedDeployment)
                    }
                    FailedDeployment
                },
                {
                    fn InsufficientBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryErrors::InsufficientBalance)
                    }
                    InsufficientBalance
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn EnforcedPause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <EnforcedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RequireOrModuleFactoryErrors::EnforcedPause)
                    }
                    EnforcedPause
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RequireOrModuleFactoryErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                RequireOrModuleFactoryErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Create2EmptyBytecode(inner) => {
                    <Create2EmptyBytecode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedDeployment(inner) => {
                    <FailedDeployment as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientBalance(inner) => {
                    <InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireOrModuleFactory`](self) events.
    pub enum RequireOrModuleFactoryEvents {
        #[allow(missing_docs)]
        Paused(Paused),
        #[allow(missing_docs)]
        RequireOrModuleCreated(RequireOrModuleCreated),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        Unpaused(Unpaused),
    }
    #[automatically_derived]
    impl RequireOrModuleFactoryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                93u8,
                185u8,
                238u8,
                10u8,
                73u8,
                91u8,
                242u8,
                230u8,
                255u8,
                156u8,
                145u8,
                167u8,
                131u8,
                76u8,
                27u8,
                164u8,
                253u8,
                210u8,
                68u8,
                165u8,
                232u8,
                170u8,
                78u8,
                83u8,
                123u8,
                211u8,
                138u8,
                234u8,
                228u8,
                176u8,
                115u8,
                170u8,
            ],
            [
                98u8,
                231u8,
                140u8,
                234u8,
                1u8,
                190u8,
                227u8,
                32u8,
                205u8,
                78u8,
                66u8,
                2u8,
                112u8,
                181u8,
                234u8,
                116u8,
                0u8,
                13u8,
                17u8,
                176u8,
                201u8,
                247u8,
                71u8,
                84u8,
                235u8,
                219u8,
                252u8,
                84u8,
                75u8,
                5u8,
                162u8,
                88u8,
            ],
            [
                160u8,
                82u8,
                52u8,
                161u8,
                87u8,
                253u8,
                44u8,
                78u8,
                61u8,
                158u8,
                111u8,
                13u8,
                43u8,
                2u8,
                188u8,
                161u8,
                76u8,
                189u8,
                91u8,
                118u8,
                212u8,
                149u8,
                223u8,
                161u8,
                33u8,
                189u8,
                117u8,
                252u8,
                153u8,
                35u8,
                197u8,
                185u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireOrModuleFactoryEvents {
        const NAME: &'static str = "RequireOrModuleFactoryEvents";
        const COUNT: usize = 6usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Paused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Paused as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Paused)
                }
                Some(
                    <RequireOrModuleCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <RequireOrModuleCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RequireOrModuleCreated)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(<Unpaused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Unpaused as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Unpaused)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireOrModuleFactoryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RequireOrModuleCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RequireOrModuleCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireOrModuleFactory`](self) contract instance.

See the [wrapper's documentation](`RequireOrModuleFactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireOrModuleFactoryInstance<T, P, N> {
        RequireOrModuleFactoryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireOrModuleFactoryInstance<T, P, N>>,
    > {
        RequireOrModuleFactoryInstance::<T, P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RequireOrModuleFactoryInstance::<T, P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireOrModuleFactory`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireOrModuleFactory`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireOrModuleFactoryInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RequireOrModuleFactoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireOrModuleFactoryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireOrModuleFactoryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RequireOrModuleFactory`](self) contract instance.

See the [wrapper's documentation](`RequireOrModuleFactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireOrModuleFactoryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RequireOrModuleFactoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireOrModuleFactoryInstance<T, P, N> {
            RequireOrModuleFactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireOrModuleFactoryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`MANAGER_ROLE`] function.
        pub fn MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MANAGER_ROLECall, N> {
            self.call_builder(&MANAGER_ROLECall {})
        }
        ///Creates a new call builder for the [`computeModuleAddress`] function.
        pub fn computeModuleAddress(
            &self,
            admin: alloy::sol_types::private::Address,
            salt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, computeModuleAddressCall, N> {
            self.call_builder(
                &computeModuleAddressCall {
                    admin,
                    salt,
                },
            )
        }
        ///Creates a new call builder for the [`createRequireOrModule`] function.
        pub fn createRequireOrModule(
            &self,
            admin: alloy::sol_types::private::Address,
            salt: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, createRequireOrModuleCall, N> {
            self.call_builder(
                &createRequireOrModuleCall {
                    admin,
                    salt,
                },
            )
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`pause`] function.
        pub fn pause(&self) -> alloy_contract::SolCallBuilder<T, &P, pauseCall, N> {
            self.call_builder(&pauseCall {})
        }
        ///Creates a new call builder for the [`paused`] function.
        pub fn paused(&self) -> alloy_contract::SolCallBuilder<T, &P, pausedCall, N> {
            self.call_builder(&pausedCall {})
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`unpause`] function.
        pub fn unpause(&self) -> alloy_contract::SolCallBuilder<T, &P, unpauseCall, N> {
            self.call_builder(&unpauseCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RequireOrModuleFactoryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Paused`] event.
        pub fn Paused_filter(&self) -> alloy_contract::Event<T, &P, Paused, N> {
            self.event_filter::<Paused>()
        }
        ///Creates a new event filter for the [`RequireOrModuleCreated`] event.
        pub fn RequireOrModuleCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RequireOrModuleCreated, N> {
            self.event_filter::<RequireOrModuleCreated>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`Unpaused`] event.
        pub fn Unpaused_filter(&self) -> alloy_contract::Event<T, &P, Unpaused, N> {
            self.event_filter::<Unpaused>()
        }
    }
}
