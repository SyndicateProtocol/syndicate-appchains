/**

Generated by the following Solidity interface...
```solidity
interface TeeKeyManager {
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event KeyAdded(address indexed key);
    event KeysRevoked();
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor(address _attestationDocVerifier);

    function addKey(bytes memory _publicValues, bytes memory _proofBytes) external;
    function attestationDocVerifier() external view returns (address);
    function isKeyValid(address publicKey) external view returns (bool);
    function owner() external view returns (address);
    function renounceOwnership() external;
    function revokeAllKeys() external;
    function transferOwnership(address newOwner) external;
    function updateAttestationDocVerifier(address _attestationDocVerifier) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_attestationDocVerifier",
        "type": "address",
        "internalType": "contract IAttestationDocVerifier"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addKey",
    "inputs": [
      {
        "name": "_publicValues",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "_proofBytes",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "attestationDocVerifier",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IAttestationDocVerifier"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isKeyValid",
    "inputs": [
      {
        "name": "publicKey",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeAllKeys",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateAttestationDocVerifier",
    "inputs": [
      {
        "name": "_attestationDocVerifier",
        "type": "address",
        "internalType": "contract IAttestationDocVerifier"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "KeyAdded",
    "inputs": [
      {
        "name": "key",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeysRevoked",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TeeKeyManager {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f57610019610014610100565b61019b565b610021610034565b610a2e6103218239610a2e90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc906100a7565b90565b6100c8816100b3565b036100cf57565b5f80fd5b905051906100e0826100bf565b565b906020828203126100fb576100f8915f016100d3565b90565b610098565b61011e610d4f8038038061011381610083565b9283398101906100e2565b90565b5f1b90565b9061013760018060a01b0391610121565b9181191691161790565b90565b61015861015361015d9261009c565b610141565b61009c565b90565b61016990610144565b90565b61017590610160565b90565b90565b9061019061018b6101979261016c565b610178565b8254610126565b9055565b6101af906101a8336101fe565b600161017b565b565b90565b6101c86101c36101cd926101b1565b610141565b61009c565b90565b6101d9906101b4565b90565b6101e5906100a7565b9052565b91906101fc905f602085019401906101dc565b565b8061021961021361020e5f6101d0565b6100a7565b916100a7565b1461022957610227906102c1565b565b61024c6102355f6101d0565b5f918291631e4fbdf760e01b8352600483016101e9565b0390fd5b5f1c90565b60018060a01b031690565b61026c61027191610250565b610255565b90565b61027e9054610260565b90565b61028a90610144565b90565b61029690610281565b90565b90565b906102b16102ac6102b89261028d565b610299565b8254610126565b9055565b5f0190565b6102ca5f610274565b6102d4825f61029c565b906103086103027f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361028d565b9161028d565b91610311610034565b8061031b816102bc565b0390a356fe60806040526004361015610013575b61049f565b61001d5f3561009c565b80630c6fe1aa146100975780634b9f8cd414610092578063715018a61461008d5780637217efcd146100885780638da5cb5b14610083578063aeddd0ba1461007e578063c172ac10146100795763f2fde38b0361000e5761046c565b610439565b610406565b610384565b61032d565b610286565b610251565b610163565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100fa5781359167ffffffffffffffff83116100f55760200192600183028401116100f057565b6100bc565b6100b8565b6100b4565b9091604082840312610159575f82013567ffffffffffffffff8111610154578361012a9184016100c0565b929093602082013567ffffffffffffffff811161014f5761014b92016100c0565b9091565b6100b0565b6100b0565b6100ac565b5f0190565b346101955761017f6101763660046100ff565b92919091610623565b6101876100a2565b806101918161015e565b0390f35b6100a8565b5f9103126101a457565b6100ac565b1c90565b60018060a01b031690565b6101c89060086101cd93026101a9565b6101ad565b90565b906101db91546101b8565b90565b6101ea60015f906101d0565b90565b60018060a01b031690565b90565b61020f61020a610214926101ed565b6101f8565b6101ed565b90565b610220906101fb565b90565b61022c90610217565b90565b61023890610223565b9052565b919061024f905f6020850194019061022f565b565b346102815761026136600461019a565b61027d61026c6101de565b6102746100a2565b9182918261023c565b0390f35b6100a8565b346102b45761029636600461019a565b61029e610756565b6102a66100a2565b806102b08161015e565b0390f35b6100a8565b6102c2906101ed565b90565b6102ce816102b9565b036102d557565b5f80fd5b905035906102e6826102c5565b565b90602082820312610301576102fe915f016102d9565b90565b6100ac565b151590565b61031490610306565b9052565b919061032b905f6020850194019061030b565b565b3461035d576103596103486103433660046102e8565b61078b565b6103506100a2565b91829182610318565b0390f35b6100a8565b61036b906102b9565b9052565b9190610382905f60208501940190610362565b565b346103b45761039436600461019a565b6103b061039f6107da565b6103a76100a2565b9182918261036f565b0390f35b6100a8565b6103c2906102b9565b90565b6103ce816103b9565b036103d557565b5f80fd5b905035906103e6826103c5565b565b90602082820312610401576103fe915f016103d9565b90565b6100ac565b346104345761041e6104193660046103e8565b61086d565b6104266100a2565b806104308161015e565b0390f35b6100a8565b346104675761044936600461019a565b6104516108d7565b6104596100a2565b806104638161015e565b0390f35b6100a8565b3461049a5761048461047f3660046102e8565b610946565b61048c6100a2565b806104968161015e565b0390f35b6100a8565b5f80fd5b5f1c90565b6104b46104b9916104a3565b6101ad565b90565b6104c690546104a8565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104f1906104c9565b810190811067ffffffffffffffff82111761050b57604052565b6104d3565b60e01b90565b90505190610523826102c5565b565b9060208282031261053e5761053b915f01610516565b90565b6100ac565b60209181520190565b90825f939282370152565b91906105718161056a8161057695610543565b809561054c565b6104c9565b0190565b9290610596906105a4959360408601918683035f880152610557565b926020818503910152610557565b90565b6105af6100a2565b3d5f823e3d90fd5b6105c090610217565b90565b906105cd906105b7565b5f5260205260405f2090565b5f1b90565b906105ea60ff916105d9565b9181191691161790565b6105fd90610306565b90565b90565b9061061861061361061f926105f4565b610600565b82546105de565b9055565b9261065d6020939461066861064061063b60016104bc565b610223565b9363c22a96949295976106516100a2565b98899788968796610510565b86526004860161057a565b03915afa908115610701575f916106d3575b50610691600161068c600284906105c3565b610603565b6106bb7f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e916105b7565b906106c46100a2565b806106ce8161015e565b0390a2565b6106f4915060203d81116106fa575b6106ec81836104e7565b810190610525565b5f61067a565b503d6106e2565b6105a7565b61070e610951565b610716610743565b565b90565b61072f61072a61073492610718565b6101f8565b6101ed565b90565b6107409061071b565b90565b61075461074f5f610737565b6109c2565b565b61075e610706565b565b5f90565b60ff1690565b61077661077b916104a3565b610764565b90565b610788905461076a565b90565b6107a26107a79161079a610760565b5060026105c3565b61077e565b90565b5f90565b60018060a01b031690565b6107c56107ca916104a3565b6107ae565b90565b6107d790546107b9565b90565b6107e26107aa565b506107ec5f6107cd565b90565b610800906107fb610951565b610858565b565b9061081360018060a01b03916105d9565b9181191691161790565b610826906101fb565b90565b6108329061081d565b90565b90565b9061084d61084861085492610829565b610835565b8254610802565b9055565b61086b906108646108d7565b6001610838565b565b610876906107ef565b565b610880610951565b61088861088a565b565b61089f5f61089a600233906105c3565b610603565b7f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac6108c86100a2565b806108d28161015e565b0390a1565b6108df610878565b565b6108f2906108ed610951565b6108f4565b565b8061090f6109096109045f610737565b6102b9565b916102b9565b1461091f5761091d906109c2565b565b61094261092b5f610737565b5f918291631e4fbdf760e01b83526004830161036f565b0390fd5b61094f906108e1565b565b6109596107da565b61097261096c610967610a21565b6102b9565b916102b9565b0361097957565b61099b610984610a21565b5f91829163118cdaa760e01b83526004830161036f565b0390fd5b90565b906109b76109b26109be926105b7565b61099f565b8254610802565b9055565b6109cb5f6107cd565b6109d5825f6109a2565b90610a09610a037f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936105b7565b916105b7565b91610a126100a2565b80610a1c8161015e565b0390a3565b610a296107aa565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\x01\0V[a\x01\x9BV[a\0!a\x004V[a\n.a\x03!\x829a\n.\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x90a\0\xA7V[\x90V[a\0\xC8\x81a\0\xB3V[\x03a\0\xCFWV[_\x80\xFD[\x90PQ\x90a\0\xE0\x82a\0\xBFV[V[\x90` \x82\x82\x03\x12a\0\xFBWa\0\xF8\x91_\x01a\0\xD3V[\x90V[a\0\x98V[a\x01\x1Ea\rO\x808\x03\x80a\x01\x13\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xE2V[\x90V[_\x1B\x90V[\x90a\x017`\x01\x80`\xA0\x1B\x03\x91a\x01!V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x01Xa\x01Sa\x01]\x92a\0\x9CV[a\x01AV[a\0\x9CV[\x90V[a\x01i\x90a\x01DV[\x90V[a\x01u\x90a\x01`V[\x90V[\x90V[\x90a\x01\x90a\x01\x8Ba\x01\x97\x92a\x01lV[a\x01xV[\x82Ta\x01&V[\x90UV[a\x01\xAF\x90a\x01\xA83a\x01\xFEV[`\x01a\x01{V[V[\x90V[a\x01\xC8a\x01\xC3a\x01\xCD\x92a\x01\xB1V[a\x01AV[a\0\x9CV[\x90V[a\x01\xD9\x90a\x01\xB4V[\x90V[a\x01\xE5\x90a\0\xA7V[\x90RV[\x91\x90a\x01\xFC\x90_` \x85\x01\x94\x01\x90a\x01\xDCV[V[\x80a\x02\x19a\x02\x13a\x02\x0E_a\x01\xD0V[a\0\xA7V[\x91a\0\xA7V[\x14a\x02)Wa\x02'\x90a\x02\xC1V[V[a\x02La\x025_a\x01\xD0V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01\xE9V[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x02la\x02q\x91a\x02PV[a\x02UV[\x90V[a\x02~\x90Ta\x02`V[\x90V[a\x02\x8A\x90a\x01DV[\x90V[a\x02\x96\x90a\x02\x81V[\x90V[\x90V[\x90a\x02\xB1a\x02\xACa\x02\xB8\x92a\x02\x8DV[a\x02\x99V[\x82Ta\x01&V[\x90UV[_\x01\x90V[a\x02\xCA_a\x02tV[a\x02\xD4\x82_a\x02\x9CV[\x90a\x03\x08a\x03\x02\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02\x8DV[\x91a\x02\x8DV[\x91a\x03\x11a\x004V[\x80a\x03\x1B\x81a\x02\xBCV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x9FV[a\0\x1D_5a\0\x9CV[\x80c\x0Co\xE1\xAA\x14a\0\x97W\x80cK\x9F\x8C\xD4\x14a\0\x92W\x80cqP\x18\xA6\x14a\0\x8DW\x80cr\x17\xEF\xCD\x14a\0\x88W\x80c\x8D\xA5\xCB[\x14a\0\x83W\x80c\xAE\xDD\xD0\xBA\x14a\0~W\x80c\xC1r\xAC\x10\x14a\0yWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04lV[a\x049V[a\x04\x06V[a\x03\x84V[a\x03-V[a\x02\x86V[a\x02QV[a\x01cV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xF5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xF0WV[a\0\xBCV[a\0\xB8V[a\0\xB4V[\x90\x91`@\x82\x84\x03\x12a\x01YW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01TW\x83a\x01*\x91\x84\x01a\0\xC0V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01OWa\x01K\x92\x01a\0\xC0V[\x90\x91V[a\0\xB0V[a\0\xB0V[a\0\xACV[_\x01\x90V[4a\x01\x95Wa\x01\x7Fa\x01v6`\x04a\0\xFFV[\x92\x91\x90\x91a\x06#V[a\x01\x87a\0\xA2V[\x80a\x01\x91\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01\xA4WV[a\0\xACV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xC8\x90`\x08a\x01\xCD\x93\x02a\x01\xA9V[a\x01\xADV[\x90V[\x90a\x01\xDB\x91Ta\x01\xB8V[\x90V[a\x01\xEA`\x01_\x90a\x01\xD0V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\x0Fa\x02\na\x02\x14\x92a\x01\xEDV[a\x01\xF8V[a\x01\xEDV[\x90V[a\x02 \x90a\x01\xFBV[\x90V[a\x02,\x90a\x02\x17V[\x90V[a\x028\x90a\x02#V[\x90RV[\x91\x90a\x02O\x90_` \x85\x01\x94\x01\x90a\x02/V[V[4a\x02\x81Wa\x02a6`\x04a\x01\x9AV[a\x02}a\x02la\x01\xDEV[a\x02ta\0\xA2V[\x91\x82\x91\x82a\x02<V[\x03\x90\xF3[a\0\xA8V[4a\x02\xB4Wa\x02\x966`\x04a\x01\x9AV[a\x02\x9Ea\x07VV[a\x02\xA6a\0\xA2V[\x80a\x02\xB0\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[a\x02\xC2\x90a\x01\xEDV[\x90V[a\x02\xCE\x81a\x02\xB9V[\x03a\x02\xD5WV[_\x80\xFD[\x90P5\x90a\x02\xE6\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x03\x01Wa\x02\xFE\x91_\x01a\x02\xD9V[\x90V[a\0\xACV[\x15\x15\x90V[a\x03\x14\x90a\x03\x06V[\x90RV[\x91\x90a\x03+\x90_` \x85\x01\x94\x01\x90a\x03\x0BV[V[4a\x03]Wa\x03Ya\x03Ha\x03C6`\x04a\x02\xE8V[a\x07\x8BV[a\x03Pa\0\xA2V[\x91\x82\x91\x82a\x03\x18V[\x03\x90\xF3[a\0\xA8V[a\x03k\x90a\x02\xB9V[\x90RV[\x91\x90a\x03\x82\x90_` \x85\x01\x94\x01\x90a\x03bV[V[4a\x03\xB4Wa\x03\x946`\x04a\x01\x9AV[a\x03\xB0a\x03\x9Fa\x07\xDAV[a\x03\xA7a\0\xA2V[\x91\x82\x91\x82a\x03oV[\x03\x90\xF3[a\0\xA8V[a\x03\xC2\x90a\x02\xB9V[\x90V[a\x03\xCE\x81a\x03\xB9V[\x03a\x03\xD5WV[_\x80\xFD[\x90P5\x90a\x03\xE6\x82a\x03\xC5V[V[\x90` \x82\x82\x03\x12a\x04\x01Wa\x03\xFE\x91_\x01a\x03\xD9V[\x90V[a\0\xACV[4a\x044Wa\x04\x1Ea\x04\x196`\x04a\x03\xE8V[a\x08mV[a\x04&a\0\xA2V[\x80a\x040\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04gWa\x04I6`\x04a\x01\x9AV[a\x04Qa\x08\xD7V[a\x04Ya\0\xA2V[\x80a\x04c\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04\x9AWa\x04\x84a\x04\x7F6`\x04a\x02\xE8V[a\tFV[a\x04\x8Ca\0\xA2V[\x80a\x04\x96\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\xB4a\x04\xB9\x91a\x04\xA3V[a\x01\xADV[\x90V[a\x04\xC6\x90Ta\x04\xA8V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xF1\x90a\x04\xC9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x0BW`@RV[a\x04\xD3V[`\xE0\x1B\x90V[\x90PQ\x90a\x05#\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x05>Wa\x05;\x91_\x01a\x05\x16V[\x90V[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05q\x81a\x05j\x81a\x05v\x95a\x05CV[\x80\x95a\x05LV[a\x04\xC9V[\x01\x90V[\x92\x90a\x05\x96\x90a\x05\xA4\x95\x93`@\x86\x01\x91\x86\x83\x03_\x88\x01Ra\x05WV[\x92` \x81\x85\x03\x91\x01Ra\x05WV[\x90V[a\x05\xAFa\0\xA2V[=_\x82>=\x90\xFD[a\x05\xC0\x90a\x02\x17V[\x90V[\x90a\x05\xCD\x90a\x05\xB7V[_R` R`@_ \x90V[_\x1B\x90V[\x90a\x05\xEA`\xFF\x91a\x05\xD9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\xFD\x90a\x03\x06V[\x90V[\x90V[\x90a\x06\x18a\x06\x13a\x06\x1F\x92a\x05\xF4V[a\x06\0V[\x82Ta\x05\xDEV[\x90UV[\x92a\x06]` \x93\x94a\x06ha\x06@a\x06;`\x01a\x04\xBCV[a\x02#V[\x93c\xC2*\x96\x94\x92\x95\x97a\x06Qa\0\xA2V[\x98\x89\x97\x88\x96\x87\x96a\x05\x10V[\x86R`\x04\x86\x01a\x05zV[\x03\x91Z\xFA\x90\x81\x15a\x07\x01W_\x91a\x06\xD3W[Pa\x06\x91`\x01a\x06\x8C`\x02\x84\x90a\x05\xC3V[a\x06\x03V[a\x06\xBB\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~\x91a\x05\xB7V[\x90a\x06\xC4a\0\xA2V[\x80a\x06\xCE\x81a\x01^V[\x03\x90\xA2V[a\x06\xF4\x91P` =\x81\x11a\x06\xFAW[a\x06\xEC\x81\x83a\x04\xE7V[\x81\x01\x90a\x05%V[_a\x06zV[P=a\x06\xE2V[a\x05\xA7V[a\x07\x0Ea\tQV[a\x07\x16a\x07CV[V[\x90V[a\x07/a\x07*a\x074\x92a\x07\x18V[a\x01\xF8V[a\x01\xEDV[\x90V[a\x07@\x90a\x07\x1BV[\x90V[a\x07Ta\x07O_a\x077V[a\t\xC2V[V[a\x07^a\x07\x06V[V[_\x90V[`\xFF\x16\x90V[a\x07va\x07{\x91a\x04\xA3V[a\x07dV[\x90V[a\x07\x88\x90Ta\x07jV[\x90V[a\x07\xA2a\x07\xA7\x91a\x07\x9Aa\x07`V[P`\x02a\x05\xC3V[a\x07~V[\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07\xC5a\x07\xCA\x91a\x04\xA3V[a\x07\xAEV[\x90V[a\x07\xD7\x90Ta\x07\xB9V[\x90V[a\x07\xE2a\x07\xAAV[Pa\x07\xEC_a\x07\xCDV[\x90V[a\x08\0\x90a\x07\xFBa\tQV[a\x08XV[V[\x90a\x08\x13`\x01\x80`\xA0\x1B\x03\x91a\x05\xD9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x08&\x90a\x01\xFBV[\x90V[a\x082\x90a\x08\x1DV[\x90V[\x90V[\x90a\x08Ma\x08Ha\x08T\x92a\x08)V[a\x085V[\x82Ta\x08\x02V[\x90UV[a\x08k\x90a\x08da\x08\xD7V[`\x01a\x088V[V[a\x08v\x90a\x07\xEFV[V[a\x08\x80a\tQV[a\x08\x88a\x08\x8AV[V[a\x08\x9F_a\x08\x9A`\x023\x90a\x05\xC3V[a\x06\x03V[\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xACa\x08\xC8a\0\xA2V[\x80a\x08\xD2\x81a\x01^V[\x03\x90\xA1V[a\x08\xDFa\x08xV[V[a\x08\xF2\x90a\x08\xEDa\tQV[a\x08\xF4V[V[\x80a\t\x0Fa\t\ta\t\x04_a\x077V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\t\x1FWa\t\x1D\x90a\t\xC2V[V[a\tBa\t+_a\x077V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[a\tO\x90a\x08\xE1V[V[a\tYa\x07\xDAV[a\tra\tla\tga\n!V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\tyWV[a\t\x9Ba\t\x84a\n!V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[\x90V[\x90a\t\xB7a\t\xB2a\t\xBE\x92a\x05\xB7V[a\t\x9FV[\x82Ta\x08\x02V[\x90UV[a\t\xCB_a\x07\xCDV[a\t\xD5\x82_a\t\xA2V[\x90a\n\ta\n\x03\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05\xB7V[\x91a\x05\xB7V[\x91a\n\x12a\0\xA2V[\x80a\n\x1C\x81a\x01^V[\x03\x90\xA3V[a\n)a\x07\xAAV[P3\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61049f565b61001d5f3561009c565b80630c6fe1aa146100975780634b9f8cd414610092578063715018a61461008d5780637217efcd146100885780638da5cb5b14610083578063aeddd0ba1461007e578063c172ac10146100795763f2fde38b0361000e5761046c565b610439565b610406565b610384565b61032d565b610286565b610251565b610163565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100fa5781359167ffffffffffffffff83116100f55760200192600183028401116100f057565b6100bc565b6100b8565b6100b4565b9091604082840312610159575f82013567ffffffffffffffff8111610154578361012a9184016100c0565b929093602082013567ffffffffffffffff811161014f5761014b92016100c0565b9091565b6100b0565b6100b0565b6100ac565b5f0190565b346101955761017f6101763660046100ff565b92919091610623565b6101876100a2565b806101918161015e565b0390f35b6100a8565b5f9103126101a457565b6100ac565b1c90565b60018060a01b031690565b6101c89060086101cd93026101a9565b6101ad565b90565b906101db91546101b8565b90565b6101ea60015f906101d0565b90565b60018060a01b031690565b90565b61020f61020a610214926101ed565b6101f8565b6101ed565b90565b610220906101fb565b90565b61022c90610217565b90565b61023890610223565b9052565b919061024f905f6020850194019061022f565b565b346102815761026136600461019a565b61027d61026c6101de565b6102746100a2565b9182918261023c565b0390f35b6100a8565b346102b45761029636600461019a565b61029e610756565b6102a66100a2565b806102b08161015e565b0390f35b6100a8565b6102c2906101ed565b90565b6102ce816102b9565b036102d557565b5f80fd5b905035906102e6826102c5565b565b90602082820312610301576102fe915f016102d9565b90565b6100ac565b151590565b61031490610306565b9052565b919061032b905f6020850194019061030b565b565b3461035d576103596103486103433660046102e8565b61078b565b6103506100a2565b91829182610318565b0390f35b6100a8565b61036b906102b9565b9052565b9190610382905f60208501940190610362565b565b346103b45761039436600461019a565b6103b061039f6107da565b6103a76100a2565b9182918261036f565b0390f35b6100a8565b6103c2906102b9565b90565b6103ce816103b9565b036103d557565b5f80fd5b905035906103e6826103c5565b565b90602082820312610401576103fe915f016103d9565b90565b6100ac565b346104345761041e6104193660046103e8565b61086d565b6104266100a2565b806104308161015e565b0390f35b6100a8565b346104675761044936600461019a565b6104516108d7565b6104596100a2565b806104638161015e565b0390f35b6100a8565b3461049a5761048461047f3660046102e8565b610946565b61048c6100a2565b806104968161015e565b0390f35b6100a8565b5f80fd5b5f1c90565b6104b46104b9916104a3565b6101ad565b90565b6104c690546104a8565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104f1906104c9565b810190811067ffffffffffffffff82111761050b57604052565b6104d3565b60e01b90565b90505190610523826102c5565b565b9060208282031261053e5761053b915f01610516565b90565b6100ac565b60209181520190565b90825f939282370152565b91906105718161056a8161057695610543565b809561054c565b6104c9565b0190565b9290610596906105a4959360408601918683035f880152610557565b926020818503910152610557565b90565b6105af6100a2565b3d5f823e3d90fd5b6105c090610217565b90565b906105cd906105b7565b5f5260205260405f2090565b5f1b90565b906105ea60ff916105d9565b9181191691161790565b6105fd90610306565b90565b90565b9061061861061361061f926105f4565b610600565b82546105de565b9055565b9261065d6020939461066861064061063b60016104bc565b610223565b9363c22a96949295976106516100a2565b98899788968796610510565b86526004860161057a565b03915afa908115610701575f916106d3575b50610691600161068c600284906105c3565b610603565b6106bb7f654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e916105b7565b906106c46100a2565b806106ce8161015e565b0390a2565b6106f4915060203d81116106fa575b6106ec81836104e7565b810190610525565b5f61067a565b503d6106e2565b6105a7565b61070e610951565b610716610743565b565b90565b61072f61072a61073492610718565b6101f8565b6101ed565b90565b6107409061071b565b90565b61075461074f5f610737565b6109c2565b565b61075e610706565b565b5f90565b60ff1690565b61077661077b916104a3565b610764565b90565b610788905461076a565b90565b6107a26107a79161079a610760565b5060026105c3565b61077e565b90565b5f90565b60018060a01b031690565b6107c56107ca916104a3565b6107ae565b90565b6107d790546107b9565b90565b6107e26107aa565b506107ec5f6107cd565b90565b610800906107fb610951565b610858565b565b9061081360018060a01b03916105d9565b9181191691161790565b610826906101fb565b90565b6108329061081d565b90565b90565b9061084d61084861085492610829565b610835565b8254610802565b9055565b61086b906108646108d7565b6001610838565b565b610876906107ef565b565b610880610951565b61088861088a565b565b61089f5f61089a600233906105c3565b610603565b7f2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac6108c86100a2565b806108d28161015e565b0390a1565b6108df610878565b565b6108f2906108ed610951565b6108f4565b565b8061090f6109096109045f610737565b6102b9565b916102b9565b1461091f5761091d906109c2565b565b61094261092b5f610737565b5f918291631e4fbdf760e01b83526004830161036f565b0390fd5b61094f906108e1565b565b6109596107da565b61097261096c610967610a21565b6102b9565b916102b9565b0361097957565b61099b610984610a21565b5f91829163118cdaa760e01b83526004830161036f565b0390fd5b90565b906109b76109b26109be926105b7565b61099f565b8254610802565b9055565b6109cb5f6107cd565b6109d5825f6109a2565b90610a09610a037f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936105b7565b916105b7565b91610a126100a2565b80610a1c8161015e565b0390a3565b610a296107aa565b50339056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x04\x9FV[a\0\x1D_5a\0\x9CV[\x80c\x0Co\xE1\xAA\x14a\0\x97W\x80cK\x9F\x8C\xD4\x14a\0\x92W\x80cqP\x18\xA6\x14a\0\x8DW\x80cr\x17\xEF\xCD\x14a\0\x88W\x80c\x8D\xA5\xCB[\x14a\0\x83W\x80c\xAE\xDD\xD0\xBA\x14a\0~W\x80c\xC1r\xAC\x10\x14a\0yWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x04lV[a\x049V[a\x04\x06V[a\x03\x84V[a\x03-V[a\x02\x86V[a\x02QV[a\x01cV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xFAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xF5W` \x01\x92`\x01\x83\x02\x84\x01\x11a\0\xF0WV[a\0\xBCV[a\0\xB8V[a\0\xB4V[\x90\x91`@\x82\x84\x03\x12a\x01YW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01TW\x83a\x01*\x91\x84\x01a\0\xC0V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01OWa\x01K\x92\x01a\0\xC0V[\x90\x91V[a\0\xB0V[a\0\xB0V[a\0\xACV[_\x01\x90V[4a\x01\x95Wa\x01\x7Fa\x01v6`\x04a\0\xFFV[\x92\x91\x90\x91a\x06#V[a\x01\x87a\0\xA2V[\x80a\x01\x91\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x91\x03\x12a\x01\xA4WV[a\0\xACV[\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xC8\x90`\x08a\x01\xCD\x93\x02a\x01\xA9V[a\x01\xADV[\x90V[\x90a\x01\xDB\x91Ta\x01\xB8V[\x90V[a\x01\xEA`\x01_\x90a\x01\xD0V[\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[\x90V[a\x02\x0Fa\x02\na\x02\x14\x92a\x01\xEDV[a\x01\xF8V[a\x01\xEDV[\x90V[a\x02 \x90a\x01\xFBV[\x90V[a\x02,\x90a\x02\x17V[\x90V[a\x028\x90a\x02#V[\x90RV[\x91\x90a\x02O\x90_` \x85\x01\x94\x01\x90a\x02/V[V[4a\x02\x81Wa\x02a6`\x04a\x01\x9AV[a\x02}a\x02la\x01\xDEV[a\x02ta\0\xA2V[\x91\x82\x91\x82a\x02<V[\x03\x90\xF3[a\0\xA8V[4a\x02\xB4Wa\x02\x966`\x04a\x01\x9AV[a\x02\x9Ea\x07VV[a\x02\xA6a\0\xA2V[\x80a\x02\xB0\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[a\x02\xC2\x90a\x01\xEDV[\x90V[a\x02\xCE\x81a\x02\xB9V[\x03a\x02\xD5WV[_\x80\xFD[\x90P5\x90a\x02\xE6\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x03\x01Wa\x02\xFE\x91_\x01a\x02\xD9V[\x90V[a\0\xACV[\x15\x15\x90V[a\x03\x14\x90a\x03\x06V[\x90RV[\x91\x90a\x03+\x90_` \x85\x01\x94\x01\x90a\x03\x0BV[V[4a\x03]Wa\x03Ya\x03Ha\x03C6`\x04a\x02\xE8V[a\x07\x8BV[a\x03Pa\0\xA2V[\x91\x82\x91\x82a\x03\x18V[\x03\x90\xF3[a\0\xA8V[a\x03k\x90a\x02\xB9V[\x90RV[\x91\x90a\x03\x82\x90_` \x85\x01\x94\x01\x90a\x03bV[V[4a\x03\xB4Wa\x03\x946`\x04a\x01\x9AV[a\x03\xB0a\x03\x9Fa\x07\xDAV[a\x03\xA7a\0\xA2V[\x91\x82\x91\x82a\x03oV[\x03\x90\xF3[a\0\xA8V[a\x03\xC2\x90a\x02\xB9V[\x90V[a\x03\xCE\x81a\x03\xB9V[\x03a\x03\xD5WV[_\x80\xFD[\x90P5\x90a\x03\xE6\x82a\x03\xC5V[V[\x90` \x82\x82\x03\x12a\x04\x01Wa\x03\xFE\x91_\x01a\x03\xD9V[\x90V[a\0\xACV[4a\x044Wa\x04\x1Ea\x04\x196`\x04a\x03\xE8V[a\x08mV[a\x04&a\0\xA2V[\x80a\x040\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04gWa\x04I6`\x04a\x01\x9AV[a\x04Qa\x08\xD7V[a\x04Ya\0\xA2V[\x80a\x04c\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[4a\x04\x9AWa\x04\x84a\x04\x7F6`\x04a\x02\xE8V[a\tFV[a\x04\x8Ca\0\xA2V[\x80a\x04\x96\x81a\x01^V[\x03\x90\xF3[a\0\xA8V[_\x80\xFD[_\x1C\x90V[a\x04\xB4a\x04\xB9\x91a\x04\xA3V[a\x01\xADV[\x90V[a\x04\xC6\x90Ta\x04\xA8V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04\xF1\x90a\x04\xC9V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x05\x0BW`@RV[a\x04\xD3V[`\xE0\x1B\x90V[\x90PQ\x90a\x05#\x82a\x02\xC5V[V[\x90` \x82\x82\x03\x12a\x05>Wa\x05;\x91_\x01a\x05\x16V[\x90V[a\0\xACV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\x05q\x81a\x05j\x81a\x05v\x95a\x05CV[\x80\x95a\x05LV[a\x04\xC9V[\x01\x90V[\x92\x90a\x05\x96\x90a\x05\xA4\x95\x93`@\x86\x01\x91\x86\x83\x03_\x88\x01Ra\x05WV[\x92` \x81\x85\x03\x91\x01Ra\x05WV[\x90V[a\x05\xAFa\0\xA2V[=_\x82>=\x90\xFD[a\x05\xC0\x90a\x02\x17V[\x90V[\x90a\x05\xCD\x90a\x05\xB7V[_R` R`@_ \x90V[_\x1B\x90V[\x90a\x05\xEA`\xFF\x91a\x05\xD9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x05\xFD\x90a\x03\x06V[\x90V[\x90V[\x90a\x06\x18a\x06\x13a\x06\x1F\x92a\x05\xF4V[a\x06\0V[\x82Ta\x05\xDEV[\x90UV[\x92a\x06]` \x93\x94a\x06ha\x06@a\x06;`\x01a\x04\xBCV[a\x02#V[\x93c\xC2*\x96\x94\x92\x95\x97a\x06Qa\0\xA2V[\x98\x89\x97\x88\x96\x87\x96a\x05\x10V[\x86R`\x04\x86\x01a\x05zV[\x03\x91Z\xFA\x90\x81\x15a\x07\x01W_\x91a\x06\xD3W[Pa\x06\x91`\x01a\x06\x8C`\x02\x84\x90a\x05\xC3V[a\x06\x03V[a\x06\xBB\x7FeJ\xBB\xA5\xD3\x17\x01\x85\xED%\xC9\xB4\x1F} \x94\xDB6C\x98k\x05\xE9\xE9\xCA\xB3p(\xB8\0\xAD~\x91a\x05\xB7V[\x90a\x06\xC4a\0\xA2V[\x80a\x06\xCE\x81a\x01^V[\x03\x90\xA2V[a\x06\xF4\x91P` =\x81\x11a\x06\xFAW[a\x06\xEC\x81\x83a\x04\xE7V[\x81\x01\x90a\x05%V[_a\x06zV[P=a\x06\xE2V[a\x05\xA7V[a\x07\x0Ea\tQV[a\x07\x16a\x07CV[V[\x90V[a\x07/a\x07*a\x074\x92a\x07\x18V[a\x01\xF8V[a\x01\xEDV[\x90V[a\x07@\x90a\x07\x1BV[\x90V[a\x07Ta\x07O_a\x077V[a\t\xC2V[V[a\x07^a\x07\x06V[V[_\x90V[`\xFF\x16\x90V[a\x07va\x07{\x91a\x04\xA3V[a\x07dV[\x90V[a\x07\x88\x90Ta\x07jV[\x90V[a\x07\xA2a\x07\xA7\x91a\x07\x9Aa\x07`V[P`\x02a\x05\xC3V[a\x07~V[\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x07\xC5a\x07\xCA\x91a\x04\xA3V[a\x07\xAEV[\x90V[a\x07\xD7\x90Ta\x07\xB9V[\x90V[a\x07\xE2a\x07\xAAV[Pa\x07\xEC_a\x07\xCDV[\x90V[a\x08\0\x90a\x07\xFBa\tQV[a\x08XV[V[\x90a\x08\x13`\x01\x80`\xA0\x1B\x03\x91a\x05\xD9V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x08&\x90a\x01\xFBV[\x90V[a\x082\x90a\x08\x1DV[\x90V[\x90V[\x90a\x08Ma\x08Ha\x08T\x92a\x08)V[a\x085V[\x82Ta\x08\x02V[\x90UV[a\x08k\x90a\x08da\x08\xD7V[`\x01a\x088V[V[a\x08v\x90a\x07\xEFV[V[a\x08\x80a\tQV[a\x08\x88a\x08\x8AV[V[a\x08\x9F_a\x08\x9A`\x023\x90a\x05\xC3V[a\x06\x03V[\x7F.2\xF3\xE9x\xF2c~\xDAg\xF2@\x06f\xB9\xD3\x0B\xF4\xFF\x02\xC1i\x84\xB1\x91W\\Oi\x85\x82\xACa\x08\xC8a\0\xA2V[\x80a\x08\xD2\x81a\x01^V[\x03\x90\xA1V[a\x08\xDFa\x08xV[V[a\x08\xF2\x90a\x08\xEDa\tQV[a\x08\xF4V[V[\x80a\t\x0Fa\t\ta\t\x04_a\x077V[a\x02\xB9V[\x91a\x02\xB9V[\x14a\t\x1FWa\t\x1D\x90a\t\xC2V[V[a\tBa\t+_a\x077V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[a\tO\x90a\x08\xE1V[V[a\tYa\x07\xDAV[a\tra\tla\tga\n!V[a\x02\xB9V[\x91a\x02\xB9V[\x03a\tyWV[a\t\x9Ba\t\x84a\n!V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x03oV[\x03\x90\xFD[\x90V[\x90a\t\xB7a\t\xB2a\t\xBE\x92a\x05\xB7V[a\t\x9FV[\x82Ta\x08\x02V[\x90UV[a\t\xCB_a\x07\xCDV[a\t\xD5\x82_a\t\xA2V[\x90a\n\ta\n\x03\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x05\xB7V[\x91a\x05\xB7V[\x91a\n\x12a\0\xA2V[\x80a\n\x1C\x81a\x01^V[\x03\x90\xA3V[a\n)a\x07\xAAV[P3\x90V",
    );
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Event with signature `KeyAdded(address)` and selector `0x654abba5d3170185ed25c9b41f7d2094db3643986b05e9e9cab37028b800ad7e`.
```solidity
event KeyAdded(address indexed key);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeyAdded {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeyAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "KeyAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                101u8,
                74u8,
                187u8,
                165u8,
                211u8,
                23u8,
                1u8,
                133u8,
                237u8,
                37u8,
                201u8,
                180u8,
                31u8,
                125u8,
                32u8,
                148u8,
                219u8,
                54u8,
                67u8,
                152u8,
                107u8,
                5u8,
                233u8,
                233u8,
                202u8,
                179u8,
                112u8,
                40u8,
                184u8,
                0u8,
                173u8,
                126u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { key: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.key.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.key,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeyAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeyAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeyAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `KeysRevoked()` and selector `0x2e32f3e978f2637eda67f2400666b9d30bf4ff02c16984b191575c4f698582ac`.
```solidity
event KeysRevoked();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeysRevoked {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeysRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeysRevoked()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                46u8,
                50u8,
                243u8,
                233u8,
                120u8,
                242u8,
                99u8,
                126u8,
                218u8,
                103u8,
                242u8,
                64u8,
                6u8,
                102u8,
                185u8,
                211u8,
                11u8,
                244u8,
                255u8,
                2u8,
                193u8,
                105u8,
                132u8,
                177u8,
                145u8,
                87u8,
                92u8,
                79u8,
                105u8,
                133u8,
                130u8,
                172u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeysRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeysRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeysRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _attestationDocVerifier);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _attestationDocVerifier: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._attestationDocVerifier,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _attestationDocVerifier: tuple.0,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifier,
                    ),
                )
            }
        }
    };
    /**Function with signature `addKey(bytes,bytes)` and selector `0x0c6fe1aa`.
```solidity
function addKey(bytes memory _publicValues, bytes memory _proofBytes) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyCall {
        #[allow(missing_docs)]
        pub _publicValues: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub _proofBytes: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addKey(bytes,bytes)`](addKeyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addKeyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyCall> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyCall) -> Self {
                    (value._publicValues, value._proofBytes)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _publicValues: tuple.0,
                        _proofBytes: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addKeyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addKeyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addKeyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addKeyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addKeyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addKey(bytes,bytes)";
            const SELECTOR: [u8; 4] = [12u8, 111u8, 225u8, 170u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._publicValues,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._proofBytes,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `attestationDocVerifier()` and selector `0x4b9f8cd4`.
```solidity
function attestationDocVerifier() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierCall {}
    ///Container type for the return parameters of the [`attestationDocVerifier()`](attestationDocVerifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct attestationDocVerifierReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<attestationDocVerifierReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: attestationDocVerifierReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for attestationDocVerifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for attestationDocVerifierCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = attestationDocVerifierReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "attestationDocVerifier()";
            const SELECTOR: [u8; 4] = [75u8, 159u8, 140u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isKeyValid(address)` and selector `0x7217efcd`.
```solidity
function isKeyValid(address publicKey) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidCall {
        #[allow(missing_docs)]
        pub publicKey: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isKeyValid(address)`](isKeyValidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isKeyValidReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidCall> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidCall) -> Self {
                    (value.publicKey,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { publicKey: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isKeyValidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isKeyValidReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isKeyValidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isKeyValidCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isKeyValidReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isKeyValid(address)";
            const SELECTOR: [u8; 4] = [114u8, 23u8, 239u8, 205u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.publicKey,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeAllKeys()` and selector `0xc172ac10`.
```solidity
function revokeAllKeys() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysCall {}
    ///Container type for the return parameters of the [`revokeAllKeys()`](revokeAllKeysCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeAllKeysReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeAllKeysReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeAllKeysReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeAllKeysReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeAllKeysCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeAllKeysReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeAllKeys()";
            const SELECTOR: [u8; 4] = [193u8, 114u8, 172u8, 16u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateAttestationDocVerifier(address)` and selector `0xaeddd0ba`.
```solidity
function updateAttestationDocVerifier(address _attestationDocVerifier) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAttestationDocVerifierCall {
        #[allow(missing_docs)]
        pub _attestationDocVerifier: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateAttestationDocVerifier(address)`](updateAttestationDocVerifierCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateAttestationDocVerifierReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAttestationDocVerifierCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAttestationDocVerifierCall) -> Self {
                    (value._attestationDocVerifier,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAttestationDocVerifierCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _attestationDocVerifier: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateAttestationDocVerifierReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateAttestationDocVerifierReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateAttestationDocVerifierReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateAttestationDocVerifierCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateAttestationDocVerifierReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateAttestationDocVerifier(address)";
            const SELECTOR: [u8; 4] = [174u8, 221u8, 208u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._attestationDocVerifier,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TeeKeyManager`](self) function calls.
    pub enum TeeKeyManagerCalls {
        #[allow(missing_docs)]
        addKey(addKeyCall),
        #[allow(missing_docs)]
        attestationDocVerifier(attestationDocVerifierCall),
        #[allow(missing_docs)]
        isKeyValid(isKeyValidCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        revokeAllKeys(revokeAllKeysCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateAttestationDocVerifier(updateAttestationDocVerifierCall),
    }
    #[automatically_derived]
    impl TeeKeyManagerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [12u8, 111u8, 225u8, 170u8],
            [75u8, 159u8, 140u8, 212u8],
            [113u8, 80u8, 24u8, 166u8],
            [114u8, 23u8, 239u8, 205u8],
            [141u8, 165u8, 203u8, 91u8],
            [174u8, 221u8, 208u8, 186u8],
            [193u8, 114u8, 172u8, 16u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeKeyManagerCalls {
        const NAME: &'static str = "TeeKeyManagerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 8usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addKey(_) => <addKeyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::attestationDocVerifier(_) => {
                    <attestationDocVerifierCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isKeyValid(_) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeAllKeys(_) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateAttestationDocVerifier(_) => {
                    <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TeeKeyManagerCalls>] = &[
                {
                    fn addKey(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <addKeyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::addKey)
                    }
                    addKey
                },
                {
                    fn attestationDocVerifier(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <attestationDocVerifierCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::attestationDocVerifier)
                    }
                    attestationDocVerifier
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isKeyValid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <isKeyValidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::isKeyValid)
                    }
                    isKeyValid
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::owner)
                    }
                    owner
                },
                {
                    fn updateAttestationDocVerifier(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::updateAttestationDocVerifier)
                    }
                    updateAttestationDocVerifier
                },
                {
                    fn revokeAllKeys(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::revokeAllKeys)
                    }
                    revokeAllKeys
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::attestationDocVerifier(inner) => {
                    <attestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateAttestationDocVerifier(inner) => {
                    <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addKey(inner) => {
                    <addKeyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::attestationDocVerifier(inner) => {
                    <attestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isKeyValid(inner) => {
                    <isKeyValidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeAllKeys(inner) => {
                    <revokeAllKeysCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateAttestationDocVerifier(inner) => {
                    <updateAttestationDocVerifierCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeKeyManager`](self) custom errors.
    pub enum TeeKeyManagerErrors {
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl TeeKeyManagerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TeeKeyManagerErrors {
        const NAME: &'static str = "TeeKeyManagerErrors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TeeKeyManagerErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TeeKeyManagerErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TeeKeyManagerErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TeeKeyManager`](self) events.
    pub enum TeeKeyManagerEvents {
        #[allow(missing_docs)]
        KeyAdded(KeyAdded),
        #[allow(missing_docs)]
        KeysRevoked(KeysRevoked),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
    }
    #[automatically_derived]
    impl TeeKeyManagerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                46u8,
                50u8,
                243u8,
                233u8,
                120u8,
                242u8,
                99u8,
                126u8,
                218u8,
                103u8,
                242u8,
                64u8,
                6u8,
                102u8,
                185u8,
                211u8,
                11u8,
                244u8,
                255u8,
                2u8,
                193u8,
                105u8,
                132u8,
                177u8,
                145u8,
                87u8,
                92u8,
                79u8,
                105u8,
                133u8,
                130u8,
                172u8,
            ],
            [
                101u8,
                74u8,
                187u8,
                165u8,
                211u8,
                23u8,
                1u8,
                133u8,
                237u8,
                37u8,
                201u8,
                180u8,
                31u8,
                125u8,
                32u8,
                148u8,
                219u8,
                54u8,
                67u8,
                152u8,
                107u8,
                5u8,
                233u8,
                233u8,
                202u8,
                179u8,
                112u8,
                40u8,
                184u8,
                0u8,
                173u8,
                126u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for TeeKeyManagerEvents {
        const NAME: &'static str = "TeeKeyManagerEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<KeyAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeyAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::KeyAdded)
                }
                Some(<KeysRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeysRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::KeysRevoked)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for TeeKeyManagerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::KeyAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeysRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TeeKeyManager`](self) contract instance.

See the [wrapper's documentation](`TeeKeyManagerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TeeKeyManagerInstance<T, P, N> {
        TeeKeyManagerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _attestationDocVerifier: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TeeKeyManagerInstance<T, P, N>>,
    > {
        TeeKeyManagerInstance::<T, P, N>::deploy(provider, _attestationDocVerifier)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _attestationDocVerifier: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TeeKeyManagerInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, _attestationDocVerifier)
    }
    /**A [`TeeKeyManager`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TeeKeyManager`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TeeKeyManagerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TeeKeyManagerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TeeKeyManagerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeKeyManagerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TeeKeyManager`](self) contract instance.

See the [wrapper's documentation](`TeeKeyManagerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _attestationDocVerifier: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<TeeKeyManagerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _attestationDocVerifier);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _attestationDocVerifier: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _attestationDocVerifier,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TeeKeyManagerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TeeKeyManagerInstance<T, P, N> {
            TeeKeyManagerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeKeyManagerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addKey`] function.
        pub fn addKey(
            &self,
            _publicValues: alloy::sol_types::private::Bytes,
            _proofBytes: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addKeyCall, N> {
            self.call_builder(
                &addKeyCall {
                    _publicValues,
                    _proofBytes,
                },
            )
        }
        ///Creates a new call builder for the [`attestationDocVerifier`] function.
        pub fn attestationDocVerifier(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, attestationDocVerifierCall, N> {
            self.call_builder(&attestationDocVerifierCall {})
        }
        ///Creates a new call builder for the [`isKeyValid`] function.
        pub fn isKeyValid(
            &self,
            publicKey: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isKeyValidCall, N> {
            self.call_builder(&isKeyValidCall { publicKey })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`revokeAllKeys`] function.
        pub fn revokeAllKeys(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeAllKeysCall, N> {
            self.call_builder(&revokeAllKeysCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateAttestationDocVerifier`] function.
        pub fn updateAttestationDocVerifier(
            &self,
            _attestationDocVerifier: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateAttestationDocVerifierCall, N> {
            self.call_builder(
                &updateAttestationDocVerifierCall {
                    _attestationDocVerifier,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TeeKeyManagerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`KeyAdded`] event.
        pub fn KeyAdded_filter(&self) -> alloy_contract::Event<T, &P, KeyAdded, N> {
            self.event_filter::<KeyAdded>()
        }
        ///Creates a new event filter for the [`KeysRevoked`] event.
        pub fn KeysRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, KeysRevoked, N> {
            self.event_filter::<KeysRevoked>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
    }
}
