///Module containing a contract's types and functions.
/**

```solidity
library Checkpoints {
    struct Checkpoint208 { uint48 _key; uint208 _value; }
}
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Checkpoints {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Checkpoint208 { uint48 _key; uint208 _value; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Checkpoint208 {
        #[allow(missing_docs)]
        pub _key: alloy::sol_types::private::primitives::aliases::U48,
        #[allow(missing_docs)]
        pub _value: alloy::sol_types::private::primitives::aliases::U208,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<48>,
            alloy::sol_types::sol_data::Uint<208>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U48,
            alloy::sol_types::private::primitives::aliases::U208,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Checkpoint208> for UnderlyingRustTuple<'_> {
            fn from(value: Checkpoint208) -> Self {
                (value._key, value._value)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Checkpoint208 {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    _key: tuple.0,
                    _value: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Checkpoint208 {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Checkpoint208 {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::SolType>::tokenize(&self._key),
                    <alloy::sol_types::sol_data::Uint<
                        208,
                    > as alloy_sol_types::SolType>::tokenize(&self._value),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Checkpoint208 {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Checkpoint208 {
            const NAME: &'static str = "Checkpoint208";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Checkpoint208(uint48 _key,uint208 _value)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self._key)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        208,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self._value)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Checkpoint208 {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust._key)
                    + <alloy::sol_types::sol_data::Uint<
                        208,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust._value,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    48,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust._key,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    208,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust._value,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Checkpoints`](self) contract instance.

See the [wrapper's documentation](`CheckpointsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CheckpointsInstance<P, N> {
        CheckpointsInstance::<P, N>::new(address, provider)
    }
    /**A [`Checkpoints`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Checkpoints`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CheckpointsInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for CheckpointsInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CheckpointsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CheckpointsInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`Checkpoints`](self) contract instance.

See the [wrapper's documentation](`CheckpointsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> CheckpointsInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CheckpointsInstance<P, N> {
            CheckpointsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CheckpointsInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > CheckpointsInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
///Module containing a contract's types and functions.
/**

```solidity
library IBridgeRateLimiter {
    struct BridgeConfig { uint256 dailyMintLimit; uint256 dailyBurnLimit; bool isActive; }
}
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod IBridgeRateLimiter {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct BridgeConfig { uint256 dailyMintLimit; uint256 dailyBurnLimit; bool isActive; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeConfig {
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bool,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            bool,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeConfig> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeConfig) -> Self {
                (value.dailyMintLimit, value.dailyBurnLimit, value.isActive)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeConfig {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    dailyMintLimit: tuple.0,
                    dailyBurnLimit: tuple.1,
                    isActive: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for BridgeConfig {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for BridgeConfig {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isActive,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for BridgeConfig {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for BridgeConfig {
            const NAME: &'static str = "BridgeConfig";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "BridgeConfig(uint256 dailyMintLimit,uint256 dailyBurnLimit,bool isActive)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.dailyMintLimit,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.dailyBurnLimit,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.isActive,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for BridgeConfig {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.dailyMintLimit,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.dailyBurnLimit,
                    )
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.isActive,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.dailyMintLimit,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.dailyBurnLimit,
                    out,
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.isActive,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`IBridgeRateLimiter`](self) contract instance.

See the [wrapper's documentation](`IBridgeRateLimiterInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> IBridgeRateLimiterInstance<P, N> {
        IBridgeRateLimiterInstance::<P, N>::new(address, provider)
    }
    /**A [`IBridgeRateLimiter`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`IBridgeRateLimiter`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct IBridgeRateLimiterInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for IBridgeRateLimiterInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("IBridgeRateLimiterInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > IBridgeRateLimiterInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`IBridgeRateLimiter`](self) contract instance.

See the [wrapper's documentation](`IBridgeRateLimiterInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> IBridgeRateLimiterInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> IBridgeRateLimiterInstance<P, N> {
            IBridgeRateLimiterInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > IBridgeRateLimiterInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > IBridgeRateLimiterInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
/**

Generated by the following Solidity interface...
```solidity
library Checkpoints {
    struct Checkpoint208 {
        uint48 _key;
        uint208 _value;
    }
}

library IBridgeRateLimiter {
    struct BridgeConfig {
        uint256 dailyMintLimit;
        uint256 dailyBurnLimit;
        bool isActive;
    }
}

interface SyndicateTokenCrosschain {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error BridgeMustBeContract();
    error BridgeNotActive(address bridge);
    error BurnOnlyDuringLockPeriod();
    error CannotAddSelfAsBridge();
    error CheckpointUnorderedInsertion();
    error ECDSAInvalidSignature();
    error ECDSAInvalidSignatureLength(uint256 length);
    error ECDSAInvalidSignatureS(bytes32 s);
    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);
    error ERC2612ExpiredSignature(uint256 deadline);
    error ERC2612InvalidSigner(address signer, address owner);
    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);
    error ERC6372InconsistentClock();
    error ExceedsTotalSupply();
    error InsufficientBurnLimit(address bridge, uint256 requested, uint256 available);
    error InsufficientEmissionBudget();
    error InsufficientMintLimit(address bridge, uint256 requested, uint256 available);
    error InvalidAccountNonce(address account, uint256 currentNonce);
    error InvalidShortString();
    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
    error StringTooLong(string str);
    error TransfersLocked();
    error UnauthorizedBridge(address bridge);
    error UnlockTimestampInPast();
    error UnlockTimestampTooLate();
    error UnreasonableBurnLimit();
    error UnreasonableMintLimit();
    error VotesExpiredSignature(uint256 expiry);
    error ZeroAddress();
    error ZeroAmount();

    event Approval(address indexed owner, address indexed spender, uint256 value);
    event BridgeActiveStatusChanged(address indexed bridge, bool isActive);
    event BridgeAdded(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
    event BridgeLimitsSet(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
    event BridgeRemoved(address indexed bridge);
    event CrosschainBurn(address indexed from, uint256 amount, address indexed bridge);
    event CrosschainMint(address indexed to, uint256 amount, address indexed bridge);
    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);
    event EIP712DomainChanged();
    event EmissionBudgetAllocated(address indexed bridge, uint256 amount);
    event EmissionBudgetConsumed(address indexed bridge, uint256 amount);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event TokensBurnedByManager(address indexed from, uint256 amount, address indexed burner);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event UnlockTimestampUpdated(uint256 oldTimestamp, uint256 newTimestamp, address indexed updatedBy);

    constructor(address defaultAdmin, address syndTreasuryAddress);

    function AIRDROP_MANAGER_ROLE() external view returns (bytes32);
    function BRIDGE_MANAGER_ROLE() external view returns (bytes32);
    function CLOCK_MODE() external view returns (string memory);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function EMISSION_BUDGET_MANAGER_ROLE() external view returns (bytes32);
    function EMISSION_MINTER_ROLE() external view returns (bytes32);
    function INITIAL_MINT_SUPPLY() external view returns (uint256);
    function MAX_LOCK_DURATION() external view returns (uint256);
    function TOTAL_SUPPLY() external view returns (uint256);
    function allocateEmissionBudget(address bridge, uint256 amount) external;
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function bridgeConfigs(address) external view returns (uint256 dailyMintLimit, uint256 dailyBurnLimit, bool isActive);
    function bridgeEmissionBudgets(address) external view returns (uint256);
    function burn(uint256 amount) external;
    function burnFrom(address from, uint256 amount) external;
    function checkpoints(address account, uint32 pos) external view returns (Checkpoints.Checkpoint208 memory);
    function clock() external view returns (uint48);
    function crosschainBurn(address from, uint256 amount) external;
    function crosschainMint(address to, uint256 amount) external;
    function decimals() external view returns (uint8);
    function delegate(address delegatee) external;
    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;
    function delegates(address account) external view returns (address);
    function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
    function getAllBridges() external view returns (address[] memory allBridges);
    function getAvailableBurnLimit(address bridge) external view returns (uint256 available);
    function getAvailableMintLimit(address bridge) external view returns (uint256 available);
    function getBridgeAtIndex(uint256 index) external view returns (address bridge);
    function getBridgeConfig(address bridge) external view returns (IBridgeRateLimiter.BridgeConfig memory config);
    function getBridgeCount() external view returns (uint256 count);
    function getCurrentTotalSupply() external view returns (uint256);
    function getEmissionBudget(address bridge) external view returns (uint256 budget);
    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);
    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);
    function getPastVotingPower(address account, uint256 blockNumber) external view returns (uint256);
    function getRemainingLockTime() external view returns (uint256);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function getVotes(address account) external view returns (uint256);
    function getVotingPower(address account) external view returns (uint256);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function hourlyBurnUsage(address, uint256) external view returns (uint256);
    function hourlyMintUsage(address, uint256) external view returns (uint256);
    function isBridgeAuthorized(address bridge) external view returns (bool authorized);
    function maxLockTimestamp() external view returns (uint256);
    function mint(address to, uint256 amount) external;
    function name() external view returns (string memory);
    function nonces(address owner) external view returns (uint256);
    function numCheckpoints(address account) external view returns (uint32);
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
    function removeBridge(address bridge) external;
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function setBridgeActive(address bridge, bool isActive) external;
    function setBridgeLimits(address bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit) external;
    function setUnlockTimestamp(uint256 newUnlockTimestamp) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transfer(address to, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function transfersLocked() external view returns (bool);
    function unlockTimestamp() external view returns (uint256);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "defaultAdmin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "syndTreasuryAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "AIRDROP_MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "BRIDGE_MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "CLOCK_MODE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DOMAIN_SEPARATOR",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "EMISSION_BUDGET_MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "EMISSION_MINTER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "INITIAL_MINT_SUPPLY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MAX_LOCK_DURATION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "TOTAL_SUPPLY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "allocateEmissionBudget",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeConfigs",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "isActive",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bridgeEmissionBudgets",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "burn",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "burnFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "checkpoints",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "pos",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct Checkpoints.Checkpoint208",
        "components": [
          {
            "name": "_key",
            "type": "uint48",
            "internalType": "uint48"
          },
          {
            "name": "_value",
            "type": "uint208",
            "internalType": "uint208"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "clock",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint48",
        "internalType": "uint48"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "crosschainBurn",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "crosschainMint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "decimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "delegate",
    "inputs": [
      {
        "name": "delegatee",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "delegateBySig",
    "inputs": [
      {
        "name": "delegatee",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "nonce",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "expiry",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "v",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "delegates",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "eip712Domain",
    "inputs": [],
    "outputs": [
      {
        "name": "fields",
        "type": "bytes1",
        "internalType": "bytes1"
      },
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "version",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "verifyingContract",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "extensions",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllBridges",
    "inputs": [],
    "outputs": [
      {
        "name": "allBridges",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAvailableBurnLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAvailableMintLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeAtIndex",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeConfig",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "config",
        "type": "tuple",
        "internalType": "struct IBridgeRateLimiter.BridgeConfig",
        "components": [
          {
            "name": "dailyMintLimit",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "dailyBurnLimit",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "isActive",
            "type": "bool",
            "internalType": "bool"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getBridgeCount",
    "inputs": [],
    "outputs": [
      {
        "name": "count",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentTotalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getEmissionBudget",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "budget",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPastTotalSupply",
    "inputs": [
      {
        "name": "timepoint",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPastVotes",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "timepoint",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPastVotingPower",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRemainingLockTime",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVotes",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVotingPower",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hourlyBurnUsage",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "hourlyMintUsage",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isBridgeAuthorized",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "authorized",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxLockTimestamp",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "nonces",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "numCheckpoints",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint32",
        "internalType": "uint32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permit",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "v",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "r",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "removeBridge",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeActive",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "isActive",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setBridgeLimits",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUnlockTimestamp",
    "inputs": [
      {
        "name": "newUnlockTimestamp",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transfer",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transfersLocked",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unlockTimestamp",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "spender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeActiveStatusChanged",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "isActive",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeAdded",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeLimitsSet",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "dailyMintLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "dailyBurnLimit",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "BridgeRemoved",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrosschainBurn",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrosschainMint",
    "inputs": [
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DelegateChanged",
    "inputs": [
      {
        "name": "delegator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "fromDelegate",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "toDelegate",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DelegateVotesChanged",
    "inputs": [
      {
        "name": "delegate",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "previousVotes",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newVotes",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EIP712DomainChanged",
    "inputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EmissionBudgetAllocated",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EmissionBudgetConsumed",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TokensBurnedByManager",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "burner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UnlockTimestampUpdated",
    "inputs": [
      {
        "name": "oldTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "newTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "updatedBy",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "BridgeMustBeContract",
    "inputs": []
  },
  {
    "type": "error",
    "name": "BridgeNotActive",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "BurnOnlyDuringLockPeriod",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CannotAddSelfAsBridge",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CheckpointUnorderedInsertion",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureLength",
    "inputs": [
      {
        "name": "length",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ECDSAInvalidSignatureS",
    "inputs": [
      {
        "name": "s",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20ExceededSafeSupply",
    "inputs": [
      {
        "name": "increasedSupply",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "cap",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InsufficientAllowance",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "allowance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InsufficientBalance",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidApprover",
    "inputs": [
      {
        "name": "approver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidReceiver",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSender",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC20InvalidSpender",
    "inputs": [
      {
        "name": "spender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC2612ExpiredSignature",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC2612InvalidSigner",
    "inputs": [
      {
        "name": "signer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC5805FutureLookup",
    "inputs": [
      {
        "name": "timepoint",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "clock",
        "type": "uint48",
        "internalType": "uint48"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC6372InconsistentClock",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExceedsTotalSupply",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientBurnLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "requested",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InsufficientEmissionBudget",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InsufficientMintLimit",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "requested",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "available",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAccountNonce",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "currentNonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidShortString",
    "inputs": []
  },
  {
    "type": "error",
    "name": "SafeCastOverflowedUintDowncast",
    "inputs": [
      {
        "name": "bits",
        "type": "uint8",
        "internalType": "uint8"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "StringTooLong",
    "inputs": [
      {
        "name": "str",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "TransfersLocked",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UnauthorizedBridge",
    "inputs": [
      {
        "name": "bridge",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "UnlockTimestampInPast",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UnlockTimestampTooLate",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UnreasonableBurnLimit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UnreasonableMintLimit",
    "inputs": []
  },
  {
    "type": "error",
    "name": "VotesExpiredSignature",
    "inputs": [
      {
        "name": "expiry",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAmount",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateTokenCrosschain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610180604052346100845761001b610015610158565b906101c2565b610023610089565b616c7e611d13823960805181614622015260a05181614659015260c051816145e9015260e051816152f40152610100518161531901526101205181614bfc01526101405181614c3c01526101605181818161124001526134630152616c7e90f35b61008f565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100bb90610093565b810190811060018060401b038211176100d357604052565b61009d565b906100eb6100e4610089565b92836100b1565b565b5f80fd5b60018060a01b031690565b610105906100f1565b90565b610111816100fc565b0361011857565b5f80fd5b9050519061012982610108565b565b91906040838203126101535780610147610150925f860161011c565b9360200161011c565b90565b6100ed565b6101766189918038038061016b816100d8565b92833981019061012b565b9091565b7fcce296b040332a080e6df13515a3ec2869e21cd20f7344af0987ddb938d8bd2190565b7f820372a9faf82db3cc5fc36ffab5f096eef69b95fbf50591e0d71447aa1ba70090565b6101cf6101ef92826101f2565b6101e16101da61017a565b82906109d1565b506101ea61019e565b6109d1565b50565b906101fc916101fe565b565b906102089161044d565b565b60018060401b03811161022657610222602091610093565b0190565b61009d565b9061023d6102388361020a565b6100d8565b918252565b5f7f53796e6469636174650000000000000000000000000000000000000000000000910152565b610273600961022b565b9061028060208301610242565b565b61028a610269565b90565b5f7f53594e4400000000000000000000000000000000000000000000000000000000910152565b6102be600461022b565b906102cb6020830161028d565b565b6102d56102b4565b90565b90565b90565b6102f26102ed6102f7926102d8565b6102db565b6100f1565b90565b610303906102de565b90565b5f0190565b90565b90565b61032561032061032a9261030b565b6102db565b61030e565b90565b610339629e3400610311565b90565b634e487b7160e01b5f52601160045260245ffd5b61035f6103659193929361030e565b9261030e565b820180921161037057565b61033c565b61038961038461038e926102d8565b6102db565b61030e565b90565b5f1b90565b906103a25f1991610391565b9181191691161790565b6103c06103bb6103c59261030e565b6102db565b61030e565b90565b90565b906103e06103db6103e7926103ac565b6103c8565b8254610396565b9055565b90565b6104026103fd610407926102d8565b610391565b6103eb565b90565b6104135f6103ee565b90565b90565b61042d61042861043292610416565b6102db565b61030e565b90565b61044a6b02f90193ef3075fa98000000610419565b90565b9061046f610459610282565b610461610282565b6104696102cd565b91610535565b8161048a61048461047f5f6102fa565b6100fc565b916100fc565b1461051957806104aa6104a461049f5f6102fa565b6100fc565b916100fc565b146104fd576104ec6104fb926104c8426104c261032d565b90610350565b610160526104df6104d85f610375565b600c6103cb565b6104e761040a565b6109d1565b506104f5610435565b90610a9f565b565b5f63d92e233d60e01b81528061051560048201610306565b0390fd5b5f63d92e233d60e01b81528061053160048201610306565b0390fd5b906105409291610542565b565b9061054d929161054f565b565b9061055a929161055c565b565b906105679291610569565b565b9061057492916105c1565b565b5f7f3100000000000000000000000000000000000000000000000000000000000000910152565b6105a7600161022b565b906105b460208301610576565b565b6105be61059d565b90565b906105d592916105cf6105b6565b906105d7565b565b906105e3939291610629565b565b90565b90565b60200190565b5190565b61060961060461060e926100f1565b6102db565b6100f1565b90565b61061a906105f5565b90565b61062690610611565b90565b61063a61068a9461066f93946106be565b61064e8161064860066105e5565b90610b4c565b610120526106668361066060076105e5565b90610b4c565b610140526105e8565b61068161067b826105f1565b916105eb565b2060e0526105e8565b61069c610696826105f1565b916105eb565b20610100524660a0526106ad610c51565b6080526106b93061061d565b60c052565b906106c8916106ca565b565b906106d4916106d6565b565b906106e091610927565b565b634e487b7160e01b5f525f60045260245ffd5b5190565b634e487b7160e01b5f52602260045260245ffd5b906001600283049216801561072d575b602083101461072857565b6106f9565b91607f169161071d565b5f5260205f2090565b601f602091010490565b1b90565b919060086107699102916107635f198461074a565b9261074a565b9181191691161790565b9190610789610784610791936103ac565b6103c8565b90835461074e565b9055565b5f90565b6107ab916107a5610795565b91610773565b565b5b8181106107b9575050565b806107c65f600193610799565b016107ae565b9190601f81116107dc575b505050565b6107e861080d93610737565b9060206107f484610740565b83019310610815575b61080690610740565b01906107ad565b5f80806107d7565b9150610806819290506107fd565b1c90565b90610837905f1990600802610823565b191690565b8161084691610827565b906002021790565b90610858816106f5565b9060018060401b0382116109165761087a82610874855461070d565b856107cc565b602090601f83116001146108ae5791809161089d935f926108a2575b505061083c565b90555b565b90915001515f80610896565b601f198316916108bd85610737565b925f5b8181106108fe575091600293918560019694106108e4575b505050020190556108a0565b6108f4910151601f841690610827565b90555f80806108d8565b919360206001819287870151815501950192016108c0565b61009d565b906109259161084e565b565b9061093661093d92600361091b565b600461091b565b565b5f90565b151590565b610951906103eb565b90565b9061095e90610948565b5f5260205260405f2090565b61097390610611565b90565b906109809061096a565b5f5260205260405f2090565b9061099860ff91610391565b9181191691161790565b6109ab90610943565b90565b90565b906109c66109c16109cd926109a2565b6109ae565b825461098c565b9055565b6109d961093f565b506109ee6109e8828490610cee565b15610943565b5f14610a7757610a166001610a115f610a0960058690610954565b018590610976565b6109b1565b90610a1f610d1c565b90610a5c610a56610a507f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610948565b9261096a565b9261096a565b92610a65610089565b80610a6f81610306565b0390a4600190565b50505f90565b610a86906100fc565b9052565b9190610a9d905f60208501940190610a7d565b565b80610aba610ab4610aaf5f6102fa565b6100fc565b916100fc565b14610ad657610ad491610acc5f6102fa565b919091610d4d565b565b610af9610ae25f6102fa565b5f91829163ec442f0560e01b835260048301610a8a565b0390fd5b5f90565b90565b610b18610b13610b1d92610b01565b6102db565b61030e565b90565b90565b610b37610b32610b3c92610b20565b610391565b6103eb565b90565b610b4960ff610b23565b90565b90610b55610afd565b50610b67610b62836105e8565b6105f1565b610b7a610b746020610b04565b9161030e565b105f14610b8e5750610b8b90610ee7565b90565b5f610b9c610ba29392610df7565b0161091b565b610bb2610bad610b3f565b610948565b90565b5f90565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b610be790516103eb565b90565b610bf3906103eb565b9052565b610c009061030e565b9052565b90959492610c4f94610c3e610c4892610c34608096610c2a60a088019c5f890190610bea565b6020870190610bea565b6040850190610bea565b6060830190610bf7565b0190610a7d565b565b610c59610bb5565b50610c62610bb9565b610cac610c6f60e0610bdd565b91610c9d610c7e610100610bdd565b46610c883061061d565b91610c91610089565b96879560208701610c04565b602082018103825203826100b1565b610cbe610cb8826105f1565b916105eb565b2090565b5f1c90565b60ff1690565b610cd9610cde91610cc2565b610cc7565b90565b610ceb9054610ccd565b90565b610d15915f610d0a610d1093610d0261093f565b506005610954565b01610976565b610ce1565b90565b5f90565b610d24610d18565b503390565b7f84fe74c71a28b69aa960486ca0e8c1418c86e9ea2cd6b5849b95e2c8f407a67490565b9182610d69610d63610d5e5f6102fa565b6100fc565b916100fc565b141580610dd4575b610d84575b610d829291909161100b565b565b610d8c610f95565b80610db3575b15610d76575f6336e278fd60e21b815280610daf60048201610306565b0390fd5b50610dcf610dc9610dc2610d29565b3390610cee565b15610943565b610d92565b5081610df0610dea610de55f6102fa565b6100fc565b916100fc565b1415610d71565b90565b90565b610e11610e0c610e1692610dfa565b6102db565b61030e565b90565b60209181520190565b90825f9392825e0152565b610e4c610e55602093610e5a93610e43816106f5565b93848093610e19565b95869101610e22565b610093565b0190565b610e739160208201915f818403910152610e2d565b90565b610e90610e8b610e85836105f1565b926105eb565b610bdd565b9060208110610e9e575b5090565b610eb0905f199060200360080261074a565b165f610e9a565b610ec3610ec891610cc2565b6103ac565b90565b610edf610eda610ee49261030e565b610391565b6103eb565b90565b610eef610afd565b50610ef9816105e8565b90610f03826105f1565b610f16610f10601f610dfd565b9161030e565b11610f4b5750610f4381610f3d610f37610f32610f4895610e76565b610eb7565b916105f1565b17610ecb565b610948565b90565b610f6d90610f57610089565b91829163305a27a960e01b835260048301610e5e565b0390fd5b90565b610f80610f8591610cc2565b610f71565b90565b610f929054610f74565b90565b610f9d61093f565b50610fa8600c610f88565b610fba610fb45f610375565b9161030e565b141580610fc5575b90565b5042610fe2610fdc610fd7600c610f88565b61030e565b9161030e565b10610fc2565b91602061100992949361100260408201965f830190610bf7565b0190610bf7565b565b929161101984838391611114565b8361103461102e6110295f6102fa565b6100fc565b916100fc565b14611049575b61104792939190916112e1565b565b611051611283565b9361105a6112c0565b948061106e6110688861030e565b9161030e565b1161107b5750935061103a565b85906110975f928392630e58ae9360e11b845260048401610fe8565b0390fd5b906110a59061096a565b5f5260205260405f2090565b6040906110da6110e194969593966110d060608401985f850190610a7d565b6020830190610bf7565b0190610bf7565b565b906110ee910361030e565b90565b906110fc910161030e565b90565b9190611112905f60208501940190610bf7565b565b9190918061113261112c6111275f6102fa565b6100fc565b916100fc565b145f146112135761115661114f8361114a6002610f88565b610350565b60026103cb565b5b8261117261116c6111675f6102fa565b6100fc565b916100fc565b145f146111e75761119661118f8361118a6002610f88565b6110e3565b60026103cb565b5b9190916111e26111d06111ca7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9361096a565b9361096a565b936111d9610089565b918291826110ff565b0390a3565b61120e826112086111f95f879061109b565b9161120383610f88565b6110f1565b906103cb565b611197565b6112266112215f839061109b565b610f88565b806112396112338561030e565b9161030e565b106112615761124c61125c9184906110e3565b6112575f849061109b565b6103cb565b611157565b9061127f9091925f93849363391434e360e21b8552600485016110b1565b0390fd5b61128b610795565b506112966002610f88565b90565b60018060d01b031690565b6112b86112b36112bd92611299565b6102db565b61030e565b90565b6112c8610795565b506112d860018060d01b036112a4565b90565b90565b90565b9161133961133361134094806113076113016112fc5f6102fa565b6100fc565b916100fc565b14611371575b8461132861132261131d5f6102fa565b6100fc565b916100fc565b14611342575b611569565b92611569565b909161159e565b565b61136a600b600261136461135e61135889611453565b936112db565b916112de565b906114a6565b505061132e565b611399600b600161139361138d61138789611453565b936112db565b916112de565b906114a6565b505061130d565b5f90565b6113b06113b691611299565b91611299565b019060018060d01b0382116113c757565b61033c565b906113df916113d96113a0565b506113a4565b90565b90565b60ff1690565b6113ff6113fa611404926113e2565b6102db565b6113e5565b90565b611410906113eb565b9052565b91602061143592949361142e60408201965f830190611407565b0190610bf7565b565b61144b6114466114509261030e565b6102db565b611299565b90565b61145b6113a0565b508061147561146f60018060d01b036112a4565b9161030e565b116114865761148390611437565b90565b60d06114a25f9283926306dfcc6560e41b845260048401611414565b0390fd5b906114dc6114e293926114b76113a0565b506114c06113a0565b5080936114d56114ce611750565b94926117fd565b9091611ce3565b91611872565b91909190565b6114f46114fa91611299565b91611299565b90039060018060d01b03821161150c57565b61033c565b906115249161151e6113a0565b506114e8565b90565b906115319061096a565b5f5260205260405f2090565b60018060a01b031690565b61155461155991610cc2565b61153d565b90565b6115669054611548565b90565b61158061158591611578610d18565b506009611527565b61155c565b90565b906115929061096a565b5f5260205260405f2090565b919091806115b46115ae856100fc565b916100fc565b141580611732575b6115c6575b505050565b806115e16115db6115d65f6102fa565b6100fc565b916100fc565b036116a2575b50816116036115fd6115f85f6102fa565b6100fc565b916100fc565b0361160f575b806115c1565b61165661164961165092611625600a8690611588565b9061164361163d611637600193611453565b936112db565b916112de565b906114a6565b92906112a4565b916112a4565b9190916116837fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7249261096a565b9261169861168f610089565b92839283610fe8565b0390a25f80611609565b6116e16116e76116da6116b7600a8590611588565b60026116d46116ce6116c889611453565b936112db565b916112de565b906114a6565b92906112a4565b916112a4565b9190916117147fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7249261096a565b92611729611720610089565b92839283610fe8565b0390a25f6115e7565b50816117466117405f610375565b9161030e565b116115bc565b5f90565b61175861174c565b506117616118a1565b90565b5490565b90565b61177f61177a61178492611768565b6102db565b61030e565b90565b61179661179c9193929361030e565b9261030e565b82039182116117a757565b61033c565b90565b60301c90565b60018060d01b031690565b6117cc6117d1916117af565b6117b5565b90565b6117de90546117c0565b90565b6117f56117f06117fa926102d8565b6102db565b611299565b90565b6118056113a0565b506118115f8201611764565b8061182461181e5f610375565b9161030e565b145f1461183a5750506118365f6117e1565b5b90565b6118675f9161186261185c8461186d960192611856600161176b565b90611787565b916117ac565b6118b6565b016117d4565b611837565b916118965f61189b946118836113a0565b5061188c6113a0565b50019291926117ac565b611abb565b91909190565b6118a961174c565b506118b343611c7c565b90565b5f5260205f200190565b5490565b6118ce60406100d8565b90565b65ffffffffffff1690565b906118e6906118d1565b9052565b906118f490611299565b9052565b5f5260205f2090565b634e487b7160e01b5f52603260045260245ffd5b61191e816118c0565b821015611938576119306001916118f8565b910201905f90565b611901565b61194790516118d1565b90565b9061195b65ffffffffffff91610391565b9181191691161790565b61197961197461197e926118d1565b6102db565b6118d1565b90565b90565b906119996119946119a092611965565b611981565b825461194a565b9055565b6119ae9051611299565b90565b60301b90565b906119c965ffffffffffff19916119b1565b9181191691161790565b6119e76119e26119ec92611299565b6102db565b611299565b90565b90565b90611a07611a02611a0e926119d3565b6119ef565b82546119b7565b9055565b90611a3c60205f611a4294611a34828201611a2e84880161193d565b90611984565b0192016119a4565b906119f2565b565b9190611a5557611a5391611a12565b565b6106e2565b9081549168010000000000000000831015611a8a5782611a82916001611a8895018155611915565b90611a44565b565b61009d565b65ffffffffffff1690565b611aa6611aab91610cc2565b611a8f565b90565b611ab89054611a9a565b90565b90929192611ac76113a0565b50611ad06113a0565b50611ada826118c0565b80611aed611ae75f610375565b9161030e565b115f14611bbd57611b1390611b0d8491611b07600161176b565b90611787565b906118b6565b90611b1f5f8301611aae565b92611b2b5f84016117d4565b9380611b3f611b39856118d1565b916118d1565b11611ba157611b56611b50846118d1565b916118d1565b145f14611b71575050611b6c905f8591016119f2565b5b9190565b611b9c9250611b9786611b8e611b856118c4565b945f86016118dc565b602084016118ea565b611a5a565b611b6d565b5f632520601d60e01b815280611bb960048201610306565b0390fd5b50611be891611be385611bda611bd16118c4565b945f86016118dc565b602084016118ea565b611a5a565b611bf15f6117e1565b9190565b611c09611c04611c0e926118d1565b6102db565b61030e565b90565b90565b611c28611c23611c2d92611c11565b6102db565b6113e5565b90565b611c3990611c14565b9052565b916020611c5e929493611c5760408201965f830190611c30565b0190610bf7565b565b611c74611c6f611c799261030e565b6102db565b6118d1565b90565b611c8461174c565b5080611c9e611c9865ffffffffffff611bf5565b9161030e565b11611caf57611cac90611c60565b90565b6030611ccb5f9283926306dfcc6560e41b845260048401611c3d565b0390fd5b634e487b7160e01b5f52605160045260245ffd5b91909180600114611d0257600203611ccf57611cfe91611511565b905b565b50611d0c916113cc565b90611d0056fe60806040526004361015610013575b611d83565b61001d5f3561043c565b806301042d7a1461043757806301ffc9a71461043257806304df017d1461042d578063050732fb1461042857806306fdde0314610423578063095ea7b31461041e57806318160ddd1461041957806318bf50771461041457806323b872dd1461040f578063248a9ca31461040a5780632869366b146104055780632b8c49e3146104005780632f2ff15d146103fb57806330d3e8eb146103f6578063313ce567146103f15780633644e515146103ec57806336568abe146103e75780633a46b1a8146103e257806340c10f19146103dd578063427ac0ca146103d857806342966c68146103d35780634bf5d7e9146103ce5780634f1bfc9e146103c9578063587cde1e146103c45780635a4239e9146103bf5780635a5db1bb146103ba5780635c19a95c146103b55780635d4c6285146103b057806363a0daac146103ab57806365145534146103a65780636fcfff45146103a157806370a082311461039c57806372cbdcc81461039757806378fb7fd21461039257806379cc67901461038d5780637a8cd156146103885780637ecebe001461038357806383f1211b1461037e5780638426adf214610379578063844c90261461037457806384b0196e1461036f5780638a5425211461036a5780638d3343d6146103655780638e539e8c14610360578063902d55a51461035b57806391d148541461035657806391ddadf41461035157806394aa22f21461034c57806395d89b41146103475780639ab24eb0146103425780639b7ef64b1461033d578063a217fddf14610338578063a9059cbb14610333578063aa082a9d1461032e578063b0ca253e14610329578063b7cdc61c14610324578063bb4d44361461031f578063c02ae7541461031a578063c3cda52014610315578063c4fc45a814610310578063c9ab00061461030b578063d505accf14610306578063d547741f14610301578063dd62ed3e146102fc578063f1127ed8146102f75763f75e85120361000e57611d4e565b611ce9565b611c05565b611ba4565b611b6a565b611ac6565b611a41565b6119af565b6118f3565b6118be565b611889565b611824565b6117ef565b6117aa565b611775565b611705565b61168e565b611659565b611624565b6115ef565b61158c565b611557565b6114e0565b6114ab565b611447565b6113dc565b611297565b611262565b611209565b6111d4565b61119f565b61116b565b611136565b611101565b61102d565b610ff8565b610f98565b610f64565b610ef4565b610ea0565b610e6b565b610e37565b610e02565b610dab565b610d3d565b610d0a565b610cb4565b610bb9565b610b83565b610b4f565b610b1a565b610ae5565b610a88565b610a54565b6109f3565b6109be565b61095a565b6108be565b610850565b61081b565b6107e5565b6107b0565b610701565b6106ce565b610676565b6105cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61046490610450565b90565b6104708161045b565b0361047757565b5f80fd5b9050359061048882610467565b565b90565b6104968161048a565b0361049d57565b5f80fd5b905035906104ae8261048d565b565b91906040838203126104d857806104cc6104d5925f860161047b565b936020016104a1565b90565b61044c565b90565b6104f46104ef6104f992610450565b6104dd565b610450565b90565b610505906104e0565b90565b610511906104fc565b90565b9061051e90610508565b5f5260205260405f2090565b61053e6105396105439261048a565b6104dd565b61048a565b90565b906105509061052a565b5f5260205260405f2090565b1c90565b90565b610573906008610578930261055c565b610560565b90565b906105869154610563565b90565b6105a26105a79261059d6011935f94610514565b610546565b61057b565b90565b6105b39061048a565b9052565b91906105ca905f602085019401906105aa565b565b346105fd576105f96105e86105e23660046104b0565b90610589565b6105f0610442565b918291826105b7565b0390f35b610448565b63ffffffff60e01b1690565b61061781610602565b0361061e57565b5f80fd5b9050359061062f8261060e565b565b9060208282031261064a57610647915f01610622565b90565b61044c565b151590565b61065d9061064f565b9052565b9190610674905f60208501940190610654565b565b346106a6576106a261069161068c366004610631565b611e20565b610699610442565b91829182610661565b0390f35b610448565b906020828203126106c4576106c1915f0161047b565b90565b61044c565b5f0190565b346106fc576106e66106e13660046106ab565b612052565b6106ee610442565b806106f8816106c9565b0390f35b610448565b346107315761072d61071c6107173660046106ab565b61205d565b610724610442565b918291826105b7565b0390f35b610448565b5f91031261074057565b61044c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61078661078f6020936107949361077d81610745565b93848093610749565b95869101610752565b61075d565b0190565b6107ad9160208201915f818403910152610767565b90565b346107e0576107c0366004610736565b6107dc6107cb6121d5565b6107d3610442565b91829182610798565b0390f35b610448565b34610816576108126108016107fb3660046104b0565b906121eb565b610809610442565b91829182610661565b0390f35b610448565b3461084b5761082b366004610736565b61084761083661220d565b61083e610442565b918291826105b7565b0390f35b610448565b3461087f576108696108633660046104b0565b90612264565b610871610442565b8061087b816106c9565b0390f35b610448565b90916060828403126108b9576108b661089f845f850161047b565b936108ad816020860161047b565b936040016104a1565b90565b61044c565b346108ef576108eb6108da6108d4366004610884565b916123df565b6108e2610442565b91829182610661565b0390f35b610448565b90565b610900816108f4565b0361090757565b5f80fd5b90503590610918826108f7565b565b9060208282031261093357610930915f0161090b565b90565b61044c565b610941906108f4565b9052565b9190610958905f60208501940190610938565b565b3461098a5761098661097561097036600461091a565b612458565b61097d610442565b91829182610945565b0390f35b610448565b9061099990610508565b5f5260205260405f2090565b6109bb906109b66010915f9261098f565b61057b565b90565b346109ee576109ea6109d96109d43660046106ab565b6109a5565b6109e1610442565b918291826105b7565b0390f35b610448565b34610a2257610a0c610a063660046104b0565b9061247a565b610a14610442565b80610a1e816106c9565b0390f35b610448565b9190604083820312610a4f5780610a43610a4c925f860161090b565b9360200161047b565b90565b61044c565b34610a8357610a6d610a67366004610a27565b906125a3565b610a75610442565b80610a7f816106c9565b0390f35b610448565b34610ab857610ab4610aa3610a9e3660046106ab565b6126ff565b610aab610442565b918291826105b7565b0390f35b610448565b60ff1690565b610acc90610abd565b9052565b9190610ae3905f60208501940190610ac3565b565b34610b1557610af5366004610736565b610b11610b0061283a565b610b08610442565b91829182610ad0565b0390f35b610448565b34610b4a57610b2a366004610736565b610b46610b35612850565b610b3d610442565b91829182610945565b0390f35b610448565b34610b7e57610b68610b62366004610a27565b90612864565b610b70610442565b80610b7a816106c9565b0390f35b610448565b34610bb457610bb0610b9f610b993660046104b0565b906128e1565b610ba7610442565b918291826105b7565b0390f35b610448565b34610be857610bd2610bcc3660046104b0565b906129ff565b610bda610442565b80610be4816106c9565b0390f35b610448565b90610bf790610508565b5f5260205260405f2090565b5f1c90565b610c14610c1991610c03565b610560565b90565b610c269054610c08565b90565b60ff1690565b610c3b610c4091610c03565b610c29565b90565b610c4d9054610c2f565b90565b610c5b90600d610bed565b610c665f8201610c1c565b91610c7f6002610c7860018501610c1c565b9301610c43565b90565b604090610cab610cb29496959396610ca160608401985f8501906105aa565b60208301906105aa565b0190610654565b565b34610ce757610ce3610ccf610cca3660046106ab565b610c50565b610cda939193610442565b93849384610c82565b0390f35b610448565b90602082820312610d0557610d02915f016104a1565b90565b61044c565b34610d3857610d22610d1d366004610cec565b612a0b565b610d2a610442565b80610d34816106c9565b0390f35b610448565b34610d6d57610d4d366004610736565b610d69610d58612ad0565b610d60610442565b91829182610798565b0390f35b610448565b90565b610d89610d84610d8e92610d72565b6104dd565b61048a565b90565b610d9d629e3400610d75565b90565b610da8610d91565b90565b34610ddb57610dbb366004610736565b610dd7610dc6610da0565b610dce610442565b918291826105b7565b0390f35b610448565b610de99061045b565b9052565b9190610e00905f60208501940190610de0565b565b34610e3257610e2e610e1d610e183660046106ab565b612b6c565b610e25610442565b91829182610ded565b0390f35b610448565b34610e6657610e50610e4a3660046104b0565b90612cf9565b610e58610442565b80610e62816106c9565b0390f35b610448565b34610e9b57610e97610e86610e81366004610cec565b612dad565b610e8e610442565b91829182610ded565b0390f35b610448565b34610ece57610eb8610eb33660046106ab565b612df9565b610ec0610442565b80610eca816106c9565b0390f35b610448565b610eec610ef192610ee76012935f94610514565b610546565b61057b565b90565b34610f2557610f21610f10610f0a3660046104b0565b90610ed3565b610f18610442565b918291826105b7565b0390f35b610448565b9091606082840312610f5f57610f5c610f45845f850161047b565b93610f5381602086016104a1565b936040016104a1565b90565b61044c565b34610f9357610f7d610f77366004610f2a565b91613150565b610f85610442565b80610f8f816106c9565b0390f35b610448565b34610fc857610fa8366004610736565b610fc4610fb361315d565b610fbb610442565b918291826105b7565b0390f35b610448565b63ffffffff1690565b610fdf90610fcd565b9052565b9190610ff6905f60208501940190610fd6565b565b346110285761102461101361100e3660046106ab565b61317f565b61101b610442565b91829182610fe3565b0390f35b610448565b3461105d576110596110486110433660046106ab565b613194565b611050610442565b918291826105b7565b0390f35b610448565b5190565b60209181520190565b60200190565b61107e9061045b565b9052565b9061108f81602093611075565b0190565b60200190565b906110b66110b06110a984611062565b8093611066565b9261106f565b905f5b8181106110c65750505090565b9091926110df6110d96001928651611082565b94611093565b91019190916110b9565b6110fe9160208201915f818403910152611099565b90565b3461113157611111366004610736565b61112d61111c6131b7565b611124610442565b918291826110e9565b0390f35b610448565b346111665761116261115161114c3660046106ab565b6131d5565b611159610442565b91829182610661565b0390f35b610448565b3461119a5761118461117e3660046104b0565b9061333a565b61118c610442565b80611196816106c9565b0390f35b610448565b346111cf576111af366004610736565b6111cb6111ba613346565b6111c2610442565b918291826105b7565b0390f35b610448565b34611204576112006111ef6111ea3660046106ab565b6133be565b6111f7610442565b918291826105b7565b0390f35b610448565b3461123957611219366004610736565b6112356112246133d3565b61122c610442565b91829182610661565b0390f35b610448565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461129257611272366004610736565b61128e61127d61123e565b611285610442565b918291826105b7565b0390f35b610448565b346112c5576112af6112aa366004610cec565b613526565b6112b7610442565b806112c1816106c9565b0390f35b610448565b60ff60f81b1690565b6112dc906112ca565b9052565b5190565b60209181520190565b60200190565b6112fc9061048a565b9052565b9061130d816020936112f3565b0190565b60200190565b9061133461132e611327846112e0565b80936112e4565b926112ed565b905f5b8181106113445750505090565b90919261135d6113576001928651611300565b94611311565b9101919091611337565b939591946113b86113ad6113cc9561139f6113c2956113d99c9a61139260e08c01925f8d01906112d3565b8a820360208c0152610767565b9088820360408a0152610767565b9760608701906105aa565b6080850190610de0565b60a0830190610938565b60c0818403910152611317565b90565b34611413576113ec366004610736565b61140f6113f76135ae565b93611406979597939193610442565b97889788611367565b0390f35b610448565b7f84fe74c71a28b69aa960486ca0e8c1418c86e9ea2cd6b5849b95e2c8f407a67490565b611444611418565b90565b3461147757611457366004610736565b61147361146261143c565b61146a610442565b91829182610945565b0390f35b610448565b7f9b12e0c5707e494915e58b0564f18aaad9b74ac69bfc815a1edadc8e4bd032eb90565b6114a861147c565b90565b346114db576114bb366004610736565b6114d76114c66114a0565b6114ce610442565b91829182610945565b0390f35b610448565b346115105761150c6114fb6114f6366004610cec565b613638565b611503610442565b918291826105b7565b0390f35b610448565b90565b61152c61152761153192611515565b6104dd565b61048a565b90565b6115496b033b2e3c9fd0803ce8000000611518565b90565b611554611534565b90565b3461158757611567366004610736565b61158361157261154c565b61157a610442565b918291826105b7565b0390f35b610448565b346115bd576115b96115a86115a2366004610a27565b9061367f565b6115b0610442565b91829182610661565b0390f35b610448565b65ffffffffffff1690565b6115d6906115c2565b9052565b91906115ed905f602085019401906115cd565b565b3461161f576115ff366004610736565b61161b61160a6136ad565b611612610442565b918291826115da565b0390f35b610448565b346116545761165061163f61163a3660046106ab565b6136c1565b611647610442565b918291826105b7565b0390f35b610448565b3461168957611669366004610736565b6116856116746137d7565b61167c610442565b91829182610798565b0390f35b610448565b346116be576116ba6116a96116a43660046106ab565b6137ed565b6116b1610442565b918291826105b7565b0390f35b610448565b90565b6116da6116d56116df926116c3565b6104dd565b61048a565b90565b6116f76b02f90193ef3075fa980000006116c6565b90565b6117026116e2565b90565b3461173557611715366004610736565b6117316117206116fa565b611728610442565b918291826105b7565b0390f35b610448565b90565b5f1b90565b61175661175161175b9261173a565b61173d565b6108f4565b90565b6117675f611742565b90565b61177261175e565b90565b346117a557611785366004610736565b6117a161179061176a565b611798610442565b91829182610945565b0390f35b610448565b346117db576117d76117c66117c03660046104b0565b9061381c565b6117ce610442565b91829182610661565b0390f35b610448565b6117ec600c5f9061057b565b90565b3461181f576117ff366004610736565b61181b61180a6117e0565b611812610442565b918291826105b7565b0390f35b610448565b346118555761185161184061183a3660046104b0565b9061383e565b611848610442565b918291826105b7565b0390f35b610448565b7f820372a9faf82db3cc5fc36ffab5f096eef69b95fbf50591e0d71447aa1ba70090565b61188661185a565b90565b346118b957611899366004610736565b6118b56118a461187e565b6118ac610442565b91829182610945565b0390f35b610448565b346118ee576118ea6118d96118d43660046106ab565b613854565b6118e1610442565b918291826105b7565b0390f35b610448565b3461192357611903366004610736565b61191f61190e613869565b611916610442565b918291826105b7565b0390f35b610448565b61193181610abd565b0361193857565b5f80fd5b9050359061194982611928565b565b909160c0828403126119aa57611963835f840161047b565b9261197181602085016104a1565b9261197f82604083016104a1565b926119a7611990846060850161193c565b9361199e816080860161090b565b9360a00161090b565b90565b61044c565b346119e4576119ce6119c236600461194b565b949390939291926138e9565b6119d6610442565b806119e0816106c9565b0390f35b610448565b6119f29061064f565b9052565b90604080611a2a93611a0e5f8201515f8601906112f3565b611a20602082015160208601906112f3565b01519101906119e9565b565b9190611a3f905f606085019401906119f6565b565b34611a7157611a6d611a5c611a573660046106ab565b6139e0565b611a64610442565b91829182611a2c565b0390f35b610448565b611a7f8161064f565b03611a8657565b5f80fd5b90503590611a9782611a76565b565b9190604083820312611ac15780611ab5611abe925f860161047b565b93602001611a8a565b90565b61044c565b34611af557611adf611ad9366004611a99565b90613af3565b611ae7610442565b80611af1816106c9565b0390f35b610448565b60e081830312611b6557611b10825f830161047b565b92611b1e836020840161047b565b92611b2c81604085016104a1565b92611b3a82606083016104a1565b92611b62611b4b846080850161193c565b93611b598160a0860161090b565b9360c00161090b565b90565b61044c565b34611b9f57611b89611b7d366004611afa565b95949094939193613ba1565b611b91610442565b80611b9b816106c9565b0390f35b610448565b34611bd357611bbd611bb7366004610a27565b90613cbf565b611bc5610442565b80611bcf816106c9565b0390f35b610448565b9190604083820312611c005780611bf4611bfd925f860161047b565b9360200161047b565b90565b61044c565b34611c3657611c32611c21611c1b366004611bd8565b90613ce1565b611c29610442565b918291826105b7565b0390f35b610448565b611c4481610fcd565b03611c4b57565b5f80fd5b90503590611c5c82611c3b565b565b9190604083820312611c865780611c7a611c83925f860161047b565b93602001611c4f565b90565b61044c565b611c94906115c2565b9052565b60018060d01b031690565b611cac90611c98565b9052565b90602080611cd293611cc85f8201515f860190611c8b565b0151910190611ca3565b565b9190611ce7905f60408501940190611cb0565b565b34611d1a57611d16611d05611cff366004611c5e565b90613d4f565b611d0d610442565b91829182611cd4565b0390f35b610448565b7fcce296b040332a080e6df13515a3ec2869e21cd20f7344af0987ddb938d8bd2190565b611d4b611d1f565b90565b34611d7e57611d5e366004610736565b611d7a611d69611d43565b611d71610442565b91829182610945565b0390f35b610448565b5f80fd5b5f90565b634e487b7160e01b5f52601160045260245ffd5b611dab611db191611c98565b91611c98565b019060018060d01b038211611dc257565b611d8b565b90611dda91611dd4611d87565b50611d9f565b90565b611de9611def91611c98565b91611c98565b90039060018060d01b038211611e0157565b611d8b565b90611e1991611e13611d87565b50611ddd565b90565b5f90565b611e28611e1c565b5080611e43611e3d630cccc66560e21b610602565b91610602565b148015611e67575b908115611e57575b5090565b611e619150613d65565b5f611e53565b5080611e82611e7c63b2752ac960e01b610602565b91610602565b14611e4b565b611ea190611e9c611e97611d1f565b613da5565b611f7f565b565b611eb7611eb2611ebc9261173a565b6104dd565b610450565b90565b611ec890611ea3565b90565b90565b1b90565b91906008611eed910291611ee75f1984611ece565b92611ece565b9181191691161790565b90565b9190611f10611f0b611f189361052a565b611ef7565b908354611ed2565b9055565b5f90565b611f3291611f2c611f1c565b91611efa565b565b60025f91611f4483808301611f20565b611f518360018301611f20565b0155565b634e487b7160e01b5f525f60045260245ffd5b905f03611f7a57611f7890611f34565b565b611f55565b80611f9a611f94611f8f5f611ebf565b61045b565b9161045b565b1461203657611fbc611fb6611faf600e611ecb565b8390613e00565b1561064f565b61201757611fd55f611fd0600d8490610bed565b611f68565b611fff7f5d9d5034656cb3ebfb0655057cd7f9b4077a9b42ff42ce223cbac5bc586d212691610508565b90612008610442565b80612012816106c9565b0390a2565b612032905f918291636585b60d60e01b835260048301610ded565b0390fd5b5f63d92e233d60e01b81528061204e600482016106c9565b0390fd5b61205b90611e88565b565b6120746120799161206c611f1c565b50601061098f565b610c1c565b90565b606090565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156120b5575b60208310146120b057565b612081565b91607f16916120a5565b60209181520190565b5f5260205f2090565b905f92918054906120eb6120e483612095565b80946120bf565b916001811690815f146121425750600114612106575b505050565b61211391929394506120c8565b915f925b81841061212a57505001905f8080612101565b60018160209295939554848601520191019290612117565b92949550505060ff19168252151560200201905f8080612101565b90612167916120d1565b90565b634e487b7160e01b5f52604160045260245ffd5b906121889061075d565b810190811067ffffffffffffffff8211176121a257604052565b61216a565b906121c76121c0926121b7610442565b9384809261215d565b038361217e565b565b6121d2906121a7565b90565b6121dd61207c565b506121e860036121c9565b90565b612208916121f7611e1c565b50612200613e3a565b919091613e47565b600190565b612215611f1c565b506122206002610c1c565b90565b61223761223261223c9261173a565b6104dd565b61048a565b90565b61224e6122549193929361048a565b9261048a565b820180921161225f57565b611d8b565b8061227f6122796122745f611ebf565b61045b565b9161045b565b146123c357816122976122915f612223565b9161048a565b146123a7576122ae6122a761220d565b839061223f565b6122c76122c16122bc611534565b61048a565b9161048a565b1161238b576122d7338390613e8c565b6122e2338390614082565b6122ea6133d3565b8061236a575b61234e576122ff818390614136565b33906123496123376123317fde22baff038e3a3e08407cbdf617deed74e869a7ba517df611e33131c6e6ea0493610508565b93610508565b93612340610442565b918291826105b7565b0390a3565b5f6336e278fd60e21b815280612366600482016106c9565b0390fd5b50612386612380612379611418565b339061367f565b1561064f565b6122f0565b5f63177e3fc360e01b8152806123a3600482016106c9565b0390fd5b5f631f2a200560e01b8152806123bf600482016106c9565b0390fd5b5f63d92e233d60e01b8152806123db600482016106c9565b0390fd5b91612409926123ec611e1c565b506124016123f8613e3a565b829084916141a2565b91909161422e565b600190565b5f90565b61241b906108f4565b90565b9061242890612412565b5f5260205260405f2090565b90565b61244361244891610c03565b612434565b90565b6124559054612437565b90565b60016124716124779261246961240e565b50600561241e565b0161244b565b90565b8061249561248f61248a5f611ebf565b61045b565b9161045b565b1461255d57816124ad6124a75f612223565b9161048a565b14612541576124bd3383906142cb565b336124d06124ca8361045b565b9161045b565b03612530575b6124e18183906144c4565b339061252b6125196125137fb90795a66650155983e242cac3e1ac1a4dc26f8ed2987f3ce416a34e00111fd493610508565b93610508565b93612522610442565b918291826105b7565b0390a3565b61253c813384916141a2565b6124d6565b5f631f2a200560e01b815280612559600482016106c9565b0390fd5b5f63d92e233d60e01b815280612575600482016106c9565b0390fd5b906125949161258f61258a82612458565b613da5565b612596565b565b906125a091614523565b50565b906125ad91612579565b565b906125b99061048a565b9052565b906125c79061064f565b9052565b906125de6125d7610442565b928361217e565b565b6125ea60606125cb565b90565b9061263c61263360026125fe6125e0565b9461261561260d5f8301610c1c565b5f88016125af565b61262d61262460018301610c1c565b602088016125af565b01610c43565b604084016125bd565b565b612647906125ed565b90565b90565b61266161265c6126669261264a565b6104dd565b61048a565b90565b634e487b7160e01b5f52601260045260245ffd5b61268961268f9161048a565b9161048a565b90811561269a570490565b612669565b60016126ab910161048a565b90565b90565b6126c56126c06126ca926126ae565b6104dd565b61048a565b90565b6126dc6126e29193929361048a565b9261048a565b82039182116126ed57565b611d8b565b6126fc905161048a565b90565b612707611f1c565b5061271c612717600d8390610bed565b61263e565b906127324261272c610e1061264d565b9061267d565b61273b5f612223565b906127455f612223565b5b8061275a61275460186126b1565b9161048a565b10156127c6578161277361276d8361048a565b9161048a565b1015612788575b6127839061269f565b612746565b916127be612783916127b86127b36127a260128990610514565b6127ad8789906126cd565b90610546565b610c1c565b9061223f565b92905061277a565b505090506127d6602083016126f2565b6127e86127e28361048a565b9161048a565b115f14612807576127fe602061280393016126f2565b6126cd565b5b90565b50506128125f612223565b612804565b5f90565b90565b61283261282d6128379261281b565b6104dd565b610abd565b90565b612842612817565b5061284d601261281e565b90565b61285861240e565b506128616145cf565b90565b908061287f612879612874613e3a565b61045b565b9161045b565b036128905761288d91614689565b50565b5f63334bd91960e11b8152806128a8600482016106c9565b0390fd5b906128b690610508565b5f5260205260405f2090565b90565b6128d96128d46128de92611c98565b6104dd565b61048a565b90565b6129189161290d612907612902612913946128fa611f1c565b50600a6128ac565b6128c2565b9161476a565b9061487f565b6128c5565b90565b906129359161293061292b61147c565b613da5565b612937565b565b908161295361294d6129485f611ebf565b61045b565b9161045b565b146129e3578061296b6129655f612223565b9161048a565b146129c75761298261297b61220d565b829061223f565b61299b612995612990611534565b61048a565b9161048a565b116129ab576129a991614136565b565b5f63177e3fc360e01b8152806129c3600482016106c9565b0390fd5b5f631f2a200560e01b8152806129df600482016106c9565b0390fd5b5f63d92e233d60e01b8152806129fb600482016106c9565b0390fd5b90612a099161291b565b565b80612a1e612a185f612223565b9161048a565b14612a2f57612a2d90336144c4565b565b5f631f2a200560e01b815280612a47600482016106c9565b0390fd5b67ffffffffffffffff8111612a6957612a6560209161075d565b0190565b61216a565b90612a80612a7b83612a4b565b6125cb565b918252565b5f7f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000910152565b612ab6601d612a6e565b90612ac360208301612a85565b565b612acd612aac565b90565b612ad861207c565b50612ae16136ad565b612afa612af4612aef6149a6565b6115c2565b916115c2565b03612b0a57612b07612ac5565b90565b5f6301bfc1c560e61b815280612b22600482016106c9565b0390fd5b5f90565b90612b3490610508565b5f5260205260405f2090565b60018060a01b031690565b612b57612b5c91610c03565b612b40565b90565b612b699054612b4b565b90565b612b83612b8891612b7b612b26565b506009612b2a565b612b5f565b90565b90612ba591612ba0612b9b61185a565b613da5565b612bdd565b565b90612bb35f199161173d565b9181191691161790565b90612bd2612bcd612bd99261052a565b611ef7565b8254612ba7565b9055565b80612bf8612bf2612bed5f611ebf565b61045b565b9161045b565b14612cdd5781612c10612c0a5f612223565b9161048a565b14612cc157612c32612c2c612c25600e611ecb565b83906149bb565b1561064f565b612ca257612c5e82612c58612c496010859061098f565b91612c5383610c1c565b61223f565b90612bbd565b612c9d612c8b7f9ca03dbd5193fbb7974173cedd0bdf6841dd14c3cbfa735aab77ff1dd1139fb392610508565b92612c94610442565b918291826105b7565b0390a2565b612cbd905f918291636585b60d60e01b835260048301610ded565b0390fd5b5f631f2a200560e01b815280612cd9600482016106c9565b0390fd5b5f63d92e233d60e01b815280612cf5600482016106c9565b0390fd5b90612d0391612b8b565b565b60207f6f7574206f6620626f756e647300000000000000000000000000000000000000917f53796e646963617465546f6b656e43726f7373636861696e3a20696e646578205f8201520152565b612d5f602d604092610749565b612d6881612d05565b0190565b612d819060208101905f818303910152612d52565b90565b15612d8b57565b612d93610442565b62461bcd60e51b815280612da960048201612d6c565b0390fd5b612df690612db9612b26565b50612de781612de1612ddb612dd6612dd1600e611ecb565b6149f5565b61048a565b9161048a565b10612d84565b612df1600e611ecb565b614a44565b90565b612e0a90612e05613e3a565b614aba565b565b90612e279291612e22612e1d611d1f565b613da5565b612f03565b565b916020612e4a929493612e4360408201965f8301906105aa565b01906105aa565b565b612e5660606125cb565b90565b612e63905161064f565b90565b90612e7260ff9161173d565b9181191691161790565b612e859061064f565b90565b90565b90612ea0612e9b612ea792612e7c565b612e88565b8254612e66565b9055565b90612eef60406002612ef594612ece5f8201612ec85f88016126f2565b90612bbd565b612ee760018201612ee1602088016126f2565b90612bbd565b019201612e59565b90612e8b565b565b90612f0191612eab565b565b80612f1e612f18612f135f611ebf565b61045b565b9161045b565b146131345780612f36612f303361045b565b9161045b565b1461311857803b612f4f612f495f612223565b9161048a565b146130fc5781612f68612f625f1961048a565b9161048a565b1415806130db575b6130bf5782612f88612f825f1961048a565b9161048a565b14158061309e575b61308357612fa8612fa1600e611ecb565b8290614b45565b613038575b612ff282612fe185612fd8600191612fcf612fc6612e4c565b955f87016125af565b602085016125af565b604083016125bd565b612fed600d8490610bed565b612ef7565b909161301e7faa807d0abf30d91968c7478c66b6d82521a106af13eda036e2036da9af16895892610508565b9261303361302a610442565b92839283612e29565b0390a2565b808290846130667fdb03f97dc5840a71e69be7470e4761af10a1237973e81c12d0dc2813895a652692610508565b9261307b613072610442565b92839283612e29565b0390a2612fad565b5f6258ccad60e81b81528061309a600482016106c9565b0390fd5b50826130b96130b36130ae611534565b61048a565b9161048a565b11612f90565b5f630a395c0160e01b8152806130d7600482016106c9565b0390fd5b50816130f66130f06130eb611534565b61048a565b9161048a565b11612f70565b5f63412a18ed60e11b815280613114600482016106c9565b0390fd5b5f63fb8ce8c960e01b815280613130600482016106c9565b0390fd5b5f63d92e233d60e01b81528061314c600482016106c9565b0390fd5b9061315b9291612e0c565b565b613165611f1c565b50613178613173600e611ecb565b6149f5565b90565b5f90565b6131919061318b61317b565b50614b7f565b90565b6131aa6131af916131a3611f1c565b505f61098f565b610c1c565b90565b606090565b6131bf6131b2565b506131d26131cd600e611ecb565b614bae565b90565b6131dd611e1c565b506132056131f56131f0600d8490610bed565b61263e565b91613200600e611ecb565b6149bb565b9081613210575b5090565b61321d9150604001612e59565b5f61320c565b9061323d91613238613233611418565b613da5565b61323f565b565b8061325a61325461324f5f611ebf565b61045b565b9161045b565b1461331e578161327261326c5f612223565b9161048a565b14613302576132886132826133d3565b1561064f565b6132e6576132978183906144c4565b33906132e16132cf6132c97fbef4f81c1814c641ede85ebaacf19d048b2c5b55980adfa6ef0f956c651335a293610508565b93610508565b936132d8610442565b918291826105b7565b0390a3565b5f63b8b5ca2d60e01b8152806132fe600482016106c9565b0390fd5b5f631f2a200560e01b81528061331a600482016106c9565b0390fd5b5f63d92e233d60e01b815280613336600482016106c9565b0390fd5b9061334491613223565b565b61334e611f1c565b50613359600c610c1c565b61336b6133655f612223565b9161048a565b14801561339a575b61338e5761338b613384600c610c1c565b42906126cd565b90565b6133975f612223565b90565b50426133b76133b16133ac600c610c1c565b61048a565b9161048a565b1015613373565b6133d0906133ca611f1c565b50614bd6565b90565b6133db611e1c565b506133e6600c610c1c565b6133f86133f25f612223565b9161048a565b141580613403575b90565b504261342061341a613415600c610c1c565b61048a565b9161048a565b10613400565b61343f9061343a61343561175e565b613da5565b613441565b565b8061345461344e4261048a565b9161048a565b111561350a578061348d6134877f000000000000000000000000000000000000000000000000000000000000000061048a565b9161048a565b116134ee5761349c600c610c1c565b6134a782600c612bbd565b9033906134d47fdd6896dcf1d4b311cca87dd19bbba2ea9ce2f867c1568878a0438a66a1afeeec92610508565b926134e96134e0610442565b92839283612e29565b0390a2565b5f63ef69af6560e01b815280613506600482016106c9565b0390fd5b5f63a565835360e01b815280613522600482016106c9565b0390fd5b61352f90613426565b565b5f90565b606090565b613543906104fc565b90565b67ffffffffffffffff811161355e5760208091020190565b61216a565b9061357561357083613546565b6125cb565b918252565b369037565b906135a461358c83613563565b9260208061359a8693613546565b920191039061357a565b565b600f60f81b90565b6135b6613531565b506135bf61207c565b506135c861207c565b506135d1611f1c565b506135da612b26565b506135e361240e565b506135ec613535565b506135f5614bee565b906135fe614c2e565b90469061360a3061353a565b906136145f611742565b906136266136215f612223565b61357f565b9061362f6135a6565b96959493929190565b61366161366691613647611f1c565b5061365b613655600b6128c2565b9161476a565b9061487f565b6128c5565b90565b9061367390610508565b5f5260205260405f2090565b6136a6915f61369b6136a193613693611e1c565b50600561241e565b01613669565b610c43565b90565b5f90565b6136b56136a9565b506136be6149a6565b90565b6136c9611f1c565b506136de6136d9600d8390610bed565b61263e565b906136f4426136ee610e1061264d565b9061267d565b6136fd5f612223565b906137075f612223565b5b8061371c61371660186126b1565b9161048a565b1015613788578161373561372f8361048a565b9161048a565b101561374a575b6137459061269f565b613708565b916137806137459161377a61377561376460118990610514565b61376f8789906126cd565b90610546565b610c1c565b9061223f565b92905061373c565b505090506137975f83016126f2565b6137a96137a38361048a565b9161048a565b115f146137c7576137be5f6137c393016126f2565b6126cd565b5b90565b50506137d25f612223565b6137c4565b6137df61207c565b506137ea60046121c9565b90565b61381461380f61380a61381993613802611f1c565b50600a6128ac565b6128c2565b614c6e565b6128c5565b90565b61383991613828611e1c565b50613831613e3a565b91909161422e565b600190565b906138519161384b611f1c565b506128e1565b90565b61386690613860611f1c565b506137ed565b90565b613871611f1c565b5061387a61220d565b90565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf90565b6138d66138dd946138cc6060949897956138c2608086019a5f870190610938565b6020850190610de0565b60408301906105aa565b01906105aa565b565b60200190565b5190565b93959490929195426139036138fd8961048a565b9161048a565b1161397c579161396e916139759361396561397a989961394d61392461387d565b61393e8b938b613932610442565b958694602086016138a1565b6020820181038252038261217e565b61395f613959826138e5565b916138df565b20614ce3565b92909192614d00565b9182614d4a565b614aba565b565b613997875f918291632341d78760e11b8352600483016105b7565b0390fd5b5f90565b5f90565b6139ab6125e0565b9060208080846139b961399b565b8152016139c461399b565b8152016139cf61399f565b81525050565b6139dd6139a3565b90565b6139f76139fc916139ef6139d5565b50600d610bed565b61263e565b90565b90613a1991613a14613a0f611d1f565b613da5565b613a1b565b565b80613a36613a30613a2b5f611ebf565b61045b565b9161045b565b14613ad757613a58613a52613a4b600e611ecb565b83906149bb565b1561064f565b613ab857613a74826002613a6e600d8590610bed565b01612e8b565b613ab3613aa17f9c8668db324845065d2b9a2a183bd3141f63018f548282daf18da49ccbf88c3392610508565b92613aaa610442565b91829182610661565b0390a2565b613ad3905f918291636585b60d60e01b835260048301610ded565b0390fd5b5f63d92e233d60e01b815280613aef600482016106c9565b0390fd5b90613afd916139ff565b565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990565b9194613b6b613b7592989795613b6160a096613b57613b7c9a613b4d60c08a019e5f8b0190610938565b6020890190610de0565b6040870190610de0565b60608501906105aa565b60808301906105aa565b01906105aa565b565b916020613b9f929493613b9860408201965f830190610de0565b0190610de0565b565b969591939294909442613bbc613bb68361048a565b9161048a565b11613c765790613c25613c2e949392613c0d613bd6613aff565b613bfe8c80948c91613be88d91614d8d565b9192613bf2610442565b97889660208801613b23565b6020820181038252038261217e565b613c1f613c19826138e5565b916138df565b20614ce3565b92909192614d00565b80613c41613c3b8761045b565b9161045b565b03613c565750613c549293919091613e47565b565b8490613c725f9283926325c0072360e11b845260048401613b7e565b0390fd5b613c91905f91829163313c898160e11b8352600483016105b7565b0390fd5b90613cb091613cab613ca682612458565b613da5565b613cb2565b565b90613cbc91614689565b50565b90613cc991613c95565b565b90613cd590610508565b5f5260205260405f2090565b613d0691613cfc613d0192613cf4611f1c565b506001613ccb565b61098f565b610c1c565b90565b613d1360406125cb565b90565b5f90565b5f90565b613d26613d09565b9060208083613d33613d16565b815201613d3e613d1a565b81525050565b613d4c613d1e565b90565b90613d6291613d5c613d44565b50614dc0565b90565b613d6d611e1c565b5080613d88613d82637965db0b60e01b610602565b91610602565b14908115613d95575b5090565b613d9f9150614de8565b5f613d91565b613db790613db1613e3a565b90614e31565b565b613dc2906104e0565b90565b613dd9613dd4613dde92610450565b6104dd565b61048a565b90565b613df5613df0613dfa9261048a565b61173d565b6108f4565b90565b90565b90613e32613e2c613e27613e225f613e3796613e1a611e1c565b500194613db9565b613dc5565b613de1565b91613dfd565b614fae565b90565b613e42612b26565b503390565b91613e5592916001926150b4565b565b90565b604090613e83613e8a9496959396613e7960608401985f850190610de0565b60208301906105aa565b01906105aa565b565b613ea0613e9b600d8390610bed565b613e57565b91613ebe613eb8613eb1600e611ecb565b84906149bb565b1561064f565b8015614067575b61404857613ede42613ed8610e1061264d565b9061267d565b613ee75f612223565b91613ef15f612223565b5b80613f06613f0060186126b1565b9161048a565b1015613f725782613f1f613f198361048a565b9161048a565b1015613f34575b613f2f9061269f565b613ef2565b92613f6a613f2f91613f64613f5f613f4e60118a90610514565b613f59888a906126cd565b90610546565b610c1c565b9061223f565b939050613f26565b5091909293613f8282849061223f565b613f9e613f98613f935f8501610c1c565b61048a565b9161048a565b11613fd8575050613fc1613fd69392613fbc613fd093946011610514565b610546565b91613fcb83610c1c565b61223f565b90612bbd565b565b849350613fe65f8201610c1c565b613ff8613ff28461048a565b9161048a565b115f1461403557614031916140115f6140169301610c1c565b6126cd565b5b9291925f9384936340ed367b60e01b855260048501613e5a565b0390fd5b50506140316140435f612223565b614017565b614063825f918291636585b60d60e01b835260048301610ded565b0390fd5b5061407d61407760028501610c43565b1561064f565b613ec5565b6140966140916010839061098f565b610c1c565b6140a96140a3849261048a565b9161048a565b1161411a576140d6826140d06140c16010859061098f565b916140cb83610c1c565b6126cd565b90612bbd565b6141156141037fbc23ec7f1313150b047bff83d0845b0564baa134698dd11bb0acd0f7d416de7d92610508565b9261410c610442565b918291826105b7565b0390a2565b5f631eb7845760e21b815280614132600482016106c9565b0390fd5b8061415161414b6141465f611ebf565b61045b565b9161045b565b1461416d5761416b916141635f611ebf565b9190916151c3565b565b6141906141795f611ebf565b5f91829163ec442f0560e01b835260048301610ded565b0390fd5b9061419f910361048a565b90565b9291926141b0818390613ce1565b90816141c56141bf5f1961048a565b9161048a565b106141d2575b5050509050565b816141e56141df8761048a565b9161048a565b1061420b5761420293946141fa919392614194565b905f926150b4565b805f80806141cb565b5061422a849291925f938493637dc7a0d960e11b855260048501613e5a565b0390fd5b918261424a61424461423f5f611ebf565b61045b565b9161045b565b146142a4578161426a61426461425f5f611ebf565b61045b565b9161045b565b1461427d5761427b929190916151c3565b565b6142a06142895f611ebf565b5f91829163ec442f0560e01b835260048301610ded565b0390fd5b6142c76142b05f611ebf565b5f918291634b637e8f60e11b835260048301610ded565b0390fd5b6142df6142da600d8390610bed565b613e57565b916142fd6142f76142f0600e611ecb565b84906149bb565b1561064f565b80156144a9575b61448a5761431d42614317610e1061264d565b9061267d565b6143265f612223565b916143305f612223565b5b8061434561433f60186126b1565b9161048a565b10156143b1578261435e6143588361048a565b9161048a565b1015614373575b61436e9061269f565b614331565b926143a961436e916143a361439e61438d60128a90610514565b614398888a906126cd565b90610546565b610c1c565b9061223f565b939050614365565b50919092936143c182849061223f565b6143de6143d86143d360018501610c1c565b61048a565b9161048a565b1161441857505061440161441693926143fc61441093946012610514565b610546565b9161440b83610c1c565b61223f565b90612bbd565b565b84935061442760018201610c1c565b6144396144338461048a565b9161048a565b115f14614477576144739161445360016144589301610c1c565b6126cd565b5b9291925f9384936372ff4bd160e11b855260048501613e5a565b0390fd5b50506144736144855f612223565b614459565b6144a5825f918291636585b60d60e01b835260048301610ded565b0390fd5b506144bf6144b960028501610c43565b1561064f565b614304565b90816144e06144da6144d55f611ebf565b61045b565b9161045b565b146144fc576144fa91906144f35f611ebf565b90916151c3565b565b61451f6145085f611ebf565b5f918291634b637e8f60e11b835260048301610ded565b0390fd5b61452b611e1c565b5061454061453a82849061367f565b1561064f565b5f146145c95761456860016145635f61455b6005869061241e565b018590613669565b612e8b565b90614571613e3a565b906145ae6145a86145a27f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95612412565b92610508565b92610508565b926145b7610442565b806145c1816106c9565b0390a4600190565b50505f90565b6145d761240e565b506145e13061353a565b61461361460d7f000000000000000000000000000000000000000000000000000000000000000061045b565b9161045b565b148061464f575b5f14614644577f000000000000000000000000000000000000000000000000000000000000000090565b61464c6152de565b90565b504661468361467d7f000000000000000000000000000000000000000000000000000000000000000061048a565b9161048a565b1461461a565b614691611e1c565b5061469d81839061367f565b5f14614725576146c45f6146bf5f6146b76005869061241e565b018590613669565b612e8b565b906146cd613e3a565b9061470a6147046146fe7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95612412565b92610508565b92610508565b92614713610442565b8061471d816106c9565b0390a4600190565b50505f90565b61473f61473a614744926115c2565b6104dd565b61048a565b90565b91602061476892949361476160408201965f8301906105aa565b01906115cd565b565b6147726136a9565b5061477b6136ad565b8161478e6147888361472b565b9161048a565b10156147a1575061479e906153e7565b90565b906147bc5f928392637669fc0f60e11b845260048401614747565b0390fd5b5490565b90565b6147db6147d66147e0926147c4565b6104dd565b61048a565b90565b90565b65ffffffffffff1690565b6147fd61480291610c03565b6147e6565b90565b61480f90546147f1565b90565b90565b61482961482461482e92614812565b6104dd565b61048a565b90565b60301c90565b60018060d01b031690565b61484e61485391614831565b614837565b90565b6148609054614842565b90565b61487761487261487c9261173a565b6104dd565b611c98565b90565b906148d39061488c611d87565b506148985f84016147c0565b6148a15f612223565b9080806148b76148b160056147c7565b9161048a565b11614934575b50906148ce5f8601939192936147e3565b615a22565b806148e66148e05f612223565b9161048a565b145f146148fc5750506148f85f614863565b5b90565b6149295f9161492461491e8461492f9601926149186001614815565b906126cd565b916147e3565b615a18565b01614856565b6148f9565b8061494261494892916156ad565b906126cd565b908361497a61497461496f5f614969818c0161496489916147e3565b615a18565b01614805565b6115c2565b916115c2565b105f1461498b5750905b905f6148bd565b91506149a19061499b6001614815565b9061223f565b614984565b6149ae6136a9565b506149b8436153e7565b90565b906149ed6149e76149e26149dd5f6149f2966149d5611e1c565b500194613db9565b613dc5565b613de1565b91613dfd565b615ab1565b90565b614a0c5f614a1192614a05611f1c565b5001613dfd565b615ae6565b90565b614a20614a2591610c03565b61052a565b90565b614a3c614a37614a419261048a565b6104dd565b610450565b90565b614a6f614a6a614a7993614a655f614a7495614a5e612b26565b5001613dfd565b615afd565b614a14565b614a28565b6104fc565b90565b90614a8d60018060a01b039161173d565b9181191691161790565b90565b90614aaf614aaa614ab692610508565b614a97565b8254614a7c565b9055565b90614b4391614b3d614acb82612b6c565b614ae084614adb60098690612b2a565b614a9a565b82818590614b20614b1a614b147f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f95610508565b92610508565b92610508565b92614b29610442565b80614b33816106c9565b0390a49291615b1e565b91615b36565b565b90614b77614b71614b6c614b675f614b7c96614b5f611e1c565b500194613db9565b613dc5565b613de1565b91613dfd565b615d19565b90565b614ba6614ba1614b9c614bab93614b9461317b565b50600a6128ac565b6128c2565b615d7c565b615dfb565b90565b614bc55f614bca92614bbe6131b2565b5001613dfd565b615f1d565b614bd26131b2565b5090565b614be890614be2611f1c565b50615f34565b90565b90565b614bf661207c565b50614c2b7f0000000000000000000000000000000000000000000000000000000000000000614c256006614beb565b9061604f565b90565b614c3661207c565b50614c6b7f0000000000000000000000000000000000000000000000000000000000000000614c656007614beb565b9061604f565b90565b614c76611d87565b50614c825f82016147c0565b80614c95614c8f5f612223565b9161048a565b145f14614cab575050614ca75f614863565b5b90565b614cd85f91614cd3614ccd84614cde960192614cc76001614815565b906126cd565b916147e3565b615a18565b01614856565b614ca8565b614cfd90614cef61240e565b50614cf86145cf565b61609d565b90565b92614d1b92614d2494614d11612b26565b509290919261614f565b9092919261627a565b90565b916020614d48929493614d4160408201965f830190610de0565b01906105aa565b565b614d5381614d8d565b91614d66614d608461048a565b9161048a565b03614d6f575050565b614d895f9283926301d4b62360e61b845260048401614d27565b0390fd5b614da190614d99611f1c565b50600861098f565b614dbd614dad82610c1c565b91614db78361269f565b90612bbd565b90565b90614de0614ddb614de593614dd3613d44565b50600a6128ac565b6128c2565b6163dc565b90565b614df0611e1c565b50614e0a614e046301ffc9a760e01b610602565b91610602565b1490565b916020614e2f929493614e2860408201965f830190610de0565b0190610938565b565b90614e46614e4083839061367f565b1561064f565b614e4e575050565b614e685f92839263e2517d3f60e01b845260048401614e0e565b0390fd5b90614e7690612412565b5f5260205260405f2090565b5490565b634e487b7160e01b5f52603260045260245ffd5b5f5260205f2090565b614eac81614e82565b821015614ec657614ebe600191614e9a565b910201905f90565b614e86565b614edb906008614ee0930261055c565b612434565b90565b90614eee9154614ecb565b90565b614efa90610c03565b90565b9190614f13614f0e614f1b93612412565b614ef1565b908354611ed2565b9055565b90565b634e487b7160e01b5f52603160045260245ffd5b5490565b5f5260205f2090565b614f4c81614f36565b821015614f6657614f5e600191614f3a565b910201905f90565b614e86565b614f7d91614f7761240e565b91614efd565b565b614f8881614f36565b8015614fa9576001900390614fa6614fa08383614f43565b90614f6b565b55565b614f22565b614fb6611e1c565b50614fcd614fc8600183018490614e6c565b610c1c565b9081614fe1614fdb5f612223565b9161048a565b14155f146150ad5761505f92600161505a92846150085f9661500285614815565b906126cd565b615025615016888501614e82565b61501f86614815565b906126cd565b816150386150328361048a565b9161048a565b03615064575b50505061505461504f868301614f1f565b614f7f565b01614e6c565b611f20565b600190565b6150a59261509761508361507d6150a0948c8901614ea3565b90614ee3565b9361509185918c8901614ea3565b90614efd565b91858501614e6c565b612bbd565b5f808061503e565b5050505f90565b9092816150d16150cb6150c65f611ebf565b61045b565b9161045b565b1461519c57836150f16150eb6150e65f611ebf565b61045b565b9161045b565b14615175576151158361511061510960018690613ccb565b879061098f565b612bbd565b61511f575b505050565b91909161516a6151586151527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610508565b93610508565b93615161610442565b918291826105b7565b0390a35f808061511a565b6151986151815f611ebf565b5f918291634a1406b160e11b835260048301610ded565b0390fd5b6151bf6151a85f611ebf565b5f91829163e602df0560e01b835260048301610ded565b0390fd5b91826151df6151d96151d45f611ebf565b61045b565b9161045b565b14158061524a575b6151fa575b6151f8929190916163fd565b565b6152026133d3565b80615229575b156151ec575f6336e278fd60e21b815280615225600482016106c9565b0390fd5b5061524561523f615238611418565b339061367f565b1561064f565b615208565b508161526661526061525b5f611ebf565b61045b565b9161045b565b14156151e7565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b909594926152dc946152cb6152d5926152c16080966152b760a088019c5f890190610938565b6020870190610938565b6040850190610938565b60608301906105aa565b0190610de0565b565b6152e661240e565b506152ef61526d565b6153667f0000000000000000000000000000000000000000000000000000000000000000916153577f0000000000000000000000000000000000000000000000000000000000000000466153423061353a565b9161534b610442565b96879560208701615291565b6020820181038252038261217e565b615378615372826138e5565b916138df565b2090565b90565b61539361538e6153989261537c565b6104dd565b610abd565b90565b6153a49061537f565b9052565b9160206153c99294936153c260408201965f83019061539b565b01906105aa565b565b6153df6153da6153e49261048a565b6104dd565b6115c2565b90565b6153ef6136a9565b508061540961540365ffffffffffff61472b565b9161048a565b1161541a57615417906153cb565b90565b60306154365f9283926306dfcc6560e41b8452600484016153a8565b0390fd5b90565b61545161544c6154569261543a565b6104dd565b61048a565b90565b90565b61547061546b61547592615459565b6104dd565b610abd565b90565b6154979061549161548b61549c94610abd565b9161048a565b9061055c565b61048a565b90565b90565b6154b66154b16154bb9261549f565b6104dd565b610abd565b90565b6154dd906154d76154d16154e294610abd565b9161048a565b90611ece565b61048a565b90565b90565b6154fc6154f7615501926154e5565b6104dd565b61048a565b90565b90565b61551b61551661552092615504565b6104dd565b610abd565b90565b90565b61553a61553561553f92615523565b6104dd565b61048a565b90565b90565b61555961555461555e92615542565b6104dd565b610abd565b90565b90565b61557861557361557d92615561565b6104dd565b61048a565b90565b90565b61559761559261559c92615580565b6104dd565b610abd565b90565b90565b6155b66155b16155bb9261559f565b6104dd565b61048a565b90565b90565b6155d56155d06155da926155be565b6104dd565b610abd565b90565b6155f16155ec6155f692615542565b6104dd565b61048a565b90565b90565b61561061560b615615926155f9565b6104dd565b610abd565b90565b61562c615627615631926155be565b6104dd565b61048a565b90565b61564861564361564d92614812565b6104dd565b610abd565b90565b90565b61566761566261566c92615650565b6104dd565b61048a565b90565b9061567a910261048a565b90565b61568961568f9161048a565b9161048a565b90811561569a570490565b612669565b906156aa910161048a565b90565b6156b5611f1c565b50806156ca6156c46001614815565b9161048a565b1115615a1557806158df6158bc6158ac61589c61588c61587c61586c61585c61584c61583c61582c8b61582661581f6158e59f6157ff6157ef61580f926157116001614815565b9080615729615723600160801b61543d565b9161048a565b10156159e7575b8061574c615746680100000000000000006154e8565b9161048a565b10156159b9575b8061576b615765640100000000615526565b9161048a565b101561598b575b8061578861578262010000615564565b9161048a565b101561595d575b806157a461579e6101006155a2565b9161048a565b101561592f575b806157bf6157b960106155dd565b9161048a565b1015615901575b6157d96157d36004615618565b9161048a565b10156158e8575b6157ea6003615653565b61566f565b6157f96001615634565b90615478565b615809818661567d565b9061569f565b6158196001615634565b90615478565b809261567d565b9061569f565b6158366001615634565b90615478565b615846818c61567d565b9061569f565b6158566001615634565b90615478565b615866818a61567d565b9061569f565b6158766001615634565b90615478565b615886818861567d565b9061569f565b6158966001615634565b90615478565b6158a6818661567d565b9061569f565b6158b66001615634565b90615478565b916158d96158d36158ce85809461567d565b61048a565b9161048a565b1161648d565b90614194565b90565b6158fc906158f66001615634565b906154be565b6157e0565b6159186159299161591260046155c1565b90615478565b9161592360026155fc565b906154be565b906157c6565b615946615957916159406008615583565b90615478565b9161595160046155c1565b906154be565b906157ab565b6159746159859161596e6010615545565b90615478565b9161597f6008615583565b906154be565b9061578f565b6159a26159b39161599c6020615507565b90615478565b916159ad6010615545565b906154be565b90615772565b6159d06159e1916159ca60406154a2565b90615478565b916159db6020615507565b906154be565b90615753565b6159fe615a0f916159f8608061545c565b90615478565b91615a0960406154a2565b906154be565b90615730565b90565b5f5260205f200190565b93919092615a2e611f1c565b505b81615a43615a3d8361048a565b9161048a565b1015615aa957615a548282906164b7565b90615a6a5f615a64888590615a18565b01614805565b615a7c615a76876115c2565b916115c2565b115f14615a8c5750915b91615a30565b929150615aa390615a9d6001614815565b9061223f565b90615a86565b925050915090565b615acf916001615aca92615ac3611e1c565b5001614e6c565b610c1c565b615ae1615adb5f612223565b9161048a565b141590565b5f615afa91615af3611f1c565b5001614e82565b90565b615b1b915f615b1592615b0e61240e565b5001614ea3565b90614ee3565b90565b615b3090615b2a611f1c565b50613194565b90565b90565b91909180615b4c615b468561045b565b9161045b565b141580615cca575b615b5e575b505050565b80615b79615b73615b6e5f611ebf565b61045b565b9161045b565b03615c3a575b5081615b9b615b95615b905f611ebf565b61045b565b9161045b565b03615ba7575b80615b59565b615bee615be1615be892615bbd600a86906128ac565b90615bdb615bd5615bcf600193616550565b936128c2565b91615b33565b906165a3565b92906128c5565b916128c5565b919091615c1b7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610508565b92615c30615c27610442565b92839283612e29565b0390a25f80615ba1565b615c79615c7f615c72615c4f600a85906128ac565b6002615c6c615c66615c6089616550565b936128c2565b91615b33565b906165a3565b92906128c5565b916128c5565b919091615cac7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610508565b92615cc1615cb8610442565b92839283612e29565b0390a25f615b7f565b5081615cde615cd85f612223565b9161048a565b11615b54565b9081549168010000000000000000831015615d145782615d0c916001615d1295018155614f43565b90614efd565b565b61216a565b615d21611e1c565b50615d36615d30828490615ab1565b1561064f565b5f14615d7657615d6c615d7192615d58615d515f8501614f1f565b8290615ce4565b6001615d655f8501614e82565b9301614e6c565b612bbd565b600190565b50505f90565b5f615d9091615d89611f1c565b50016147c0565b90565b615da7615da2615dac92610fcd565b6104dd565b61048a565b90565b615db890615507565b9052565b916020615ddd929493615dd660408201965f830190615daf565b01906105aa565b565b615df3615dee615df89261048a565b6104dd565b610fcd565b90565b615e0361317b565b5080615e1b615e1563ffffffff615d93565b9161048a565b11615e2c57615e2990615ddf565b90565b6020615e485f9283926306dfcc6560e41b845260048401615dbc565b0390fd5b606090565b60209181520190565b615e63906108f4565b9052565b90615e7481602093615e5a565b0190565b615e829054612437565b90565b60010190565b90615ea8615ea2615e9b84614e82565b8093615e51565b92614e9a565b905f5b818110615eb85750505090565b909192615ed8615ed2600192615ecd87615e78565b615e67565b94615e85565b9101919091615eab565b90615eec91615e8b565b90565b90615f0f615f0892615eff610442565b93848092615ee2565b038361217e565b565b615f1a90615eef565b90565b5f615f3191615f2a615e4c565b5001615f11565b90565b615f4b615f5091615f43611f1c565b50600861098f565b610c1c565b90565b90565b615f6a615f65615f6f92615f53565b61173d565b6108f4565b90565b615f7c60ff615f56565b90565b5f5260205f2090565b905f9291805490615fa2615f9b83612095565b80946120bf565b916001811690815f14615ff95750600114615fbd575b505050565b615fca9192939450615f7f565b915f925b818410615fe157505001905f8080615fb8565b60018160209295939554848601520191019290615fce565b92949550505060ff19168252151560200201905f8080615fb8565b9061601e91615f88565b90565b9061604161603a92616031610442565b93848092616014565b038361217e565b565b61604c90616021565b90565b9061605861207c565b5061606282612412565b61607b616075616070615f72565b6108f4565b916108f4565b14155f14616090575061608d9061662d565b90565b61609a9150616043565b90565b6042916160a861240e565b50604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b5f90565b90565b6160f96160f46160fe926160e2565b6104dd565b61048a565b90565b61613661613d9461612c606094989795616122608086019a5f870190610938565b6020850190610ac3565b6040830190610938565b0190610938565b565b616147610442565b3d5f823e3d90fd5b93929361615a612b26565b506161636160de565b5061616c61240e565b5061617685614a14565b6161a86161a27f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06160e5565b9161048a565b1161623557906161cb602094955f949392936161c2610442565b94859485616101565b838052039060015afa15616230576161e35f5161173d565b806161fe6161f86161f35f611ebf565b61045b565b9161045b565b14616214575f9161620e5f611742565b91929190565b5061621e5f611ebf565b60019161622a5f611742565b91929190565b61613f565b5050506162415f611ebf565b9060039291929190565b634e487b7160e01b5f52602160045260245ffd5b6004111561626957565b61624b565b906162788261625f565b565b8061628d6162875f61626e565b9161626e565b145f14616298575050565b806162ac6162a6600161626e565b9161626e565b145f146162cf575f63f645eedf60e01b8152806162cb600482016106c9565b0390fd5b806162e36162dd600261626e565b9161626e565b145f146163115761630d6162f683614a14565b5f91829163fce698f760e01b8352600483016105b7565b0390fd5b61632461631e600361626e565b9161626e565b1461632c5750565b616347905f9182916335e2f38360e21b835260048301610945565b0390fd5b5f5260205f2090565b61635d816147c0565b8210156163775761636f60019161634b565b910201905f90565b614e86565b90616386906115c2565b9052565b9061639490611c98565b9052565b906163ce6163c55f6163a8613d09565b946163bf6163b7838301614805565b83880161637c565b01614856565b6020840161638a565b565b6163d990616398565b90565b6163fa915f6163f4926163ed613d44565b5001616354565b506163d0565b90565b929161640b8483839161665d565b8361642661642061641b5f611ebf565b61045b565b9161045b565b1461643b575b61643992939190916167e7565b565b61644361220d565b9361644c6167cc565b948061646061645a8861048a565b9161048a565b1161646d5750935061642c565b85906164895f928392630e58ae9360e11b845260048401612e29565b0390fd5b616495611f1c565b50151590565b6164af6164aa6164b4926155f9565b6104dd565b61048a565b90565b6164dc6164e2926164c6611f1c565b5082811692186164d6600261649b565b9061267d565b9061223f565b90565b90565b6164fc6164f7616501926164e5565b6104dd565b610abd565b90565b61650d906164e8565b9052565b91602061653292949361652b60408201965f830190616504565b01906105aa565b565b61654861654361654d9261048a565b6104dd565b611c98565b90565b616558611d87565b508061657261656c60018060d01b036128c5565b9161048a565b116165835761658090616534565b90565b60d061659f5f9283926306dfcc6560e41b845260048401616511565b0390fd5b906165d96165df93926165b4611d87565b506165bd611d87565b5080936165d26165cb6136ad565b9492614c6e565b9091616c4f565b916168a6565b91909190565b6165f96165f46165fe92615504565b6104dd565b61048a565b90565b369037565b9061662b61661383612a6e565b926020806166218693612a4b565b9201910390616601565b565b61663561207c565b5061663f81616910565b9061665261664d60206165e5565b616606565b918252602082015290565b9190918061667b6166756166705f611ebf565b61045b565b9161045b565b145f1461675c5761669f616698836166936002610c1c565b61223f565b6002612bbd565b5b826166bb6166b56166b05f611ebf565b61045b565b9161045b565b145f14616730576166df6166d8836166d36002610c1c565b614194565b6002612bbd565b5b91909161672b6167196167137fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610508565b93610508565b93616722610442565b918291826105b7565b0390a3565b616757826167516167425f879061098f565b9161674c83610c1c565b61569f565b90612bbd565b6166e0565b61676f61676a5f839061098f565b610c1c565b8061678261677c8561048a565b9161048a565b106167aa576167956167a5918490614194565b6167a05f849061098f565b612bbd565b6166a0565b906167c89091925f93849363391434e360e21b855260048501613e5a565b0390fd5b6167d4611f1c565b506167e460018060d01b036128c5565b90565b9161683f616839616846948061680d6168076168025f611ebf565b61045b565b9161045b565b14616877575b8461682e6168286168235f611ebf565b61045b565b9161045b565b14616848575b612b6c565b92612b6c565b9091615b36565b565b616870600b600261686a61686461685e89616550565b936128c2565b91615b33565b906165a3565b5050616834565b61689f600b600161689961689361688d89616550565b936128c2565b91615b33565b906165a3565b5050616813565b916168ca5f6168cf946168b7611d87565b506168c0611d87565b50019291926147e3565b616b01565b91909190565b6168e96168e46168ee92615f53565b6104dd565b61048a565b90565b90565b61690861690361690d926168f1565b6104dd565b61048a565b90565b61692561692a9161691f611f1c565b50612412565b614a14565b61693460ff6168d5565b1680616949616943601f6168f4565b9161048a565b116169515790565b5f632cd44ac360e21b815280616969600482016106c9565b0390fd5b5490565b61697b60406125cb565b90565b5f5260205f2090565b6169908161696d565b8210156169aa576169a260019161697e565b910201905f90565b614e86565b6169b990516115c2565b90565b906169cd65ffffffffffff9161173d565b9181191691161790565b6169eb6169e66169f0926115c2565b6104dd565b6115c2565b90565b90565b90616a0b616a06616a12926169d7565b6169f3565b82546169bc565b9055565b616a209051611c98565b90565b60301b90565b90616a3b65ffffffffffff1991616a23565b9181191691161790565b616a59616a54616a5e92611c98565b6104dd565b611c98565b90565b90565b90616a79616a74616a8092616a45565b616a61565b8254616a29565b9055565b90616aae60205f616ab494616aa6828201616aa08488016169af565b906169f6565b019201616a16565b90616a64565b565b9190616ac757616ac591616a84565b565b611f55565b9081549168010000000000000000831015616afc5782616af4916001616afa95018155616987565b90616ab6565b565b61216a565b90929192616b0d611d87565b50616b16611d87565b50616b208261696d565b80616b33616b2d5f612223565b9161048a565b115f14616c0357616b5990616b538491616b4d6001614815565b906126cd565b90615a18565b90616b655f8301614805565b92616b715f8401614856565b9380616b85616b7f856115c2565b916115c2565b11616be757616b9c616b96846115c2565b916115c2565b145f14616bb7575050616bb2905f859101616a64565b5b9190565b616be29250616bdd86616bd4616bcb616971565b945f860161637c565b6020840161638a565b616acc565b616bb3565b5f632520601d60e01b815280616bff600482016106c9565b0390fd5b50616c2e91616c2985616c20616c17616971565b945f860161637c565b6020840161638a565b616acc565b616c375f614863565b9190565b634e487b7160e01b5f52605160045260245ffd5b91909180600114616c6e57600203616c3b57616c6a91611e06565b905b565b50616c7891611dc7565b90616c6c56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\x80`@R4a\0\x84Wa\0\x1Ba\0\x15a\x01XV[\x90a\x01\xC2V[a\0#a\0\x89V[al~a\x1D\x13\x829`\x80Q\x81aF\"\x01R`\xA0Q\x81aFY\x01R`\xC0Q\x81aE\xE9\x01R`\xE0Q\x81aR\xF4\x01Ra\x01\0Q\x81aS\x19\x01Ra\x01 Q\x81aK\xFC\x01Ra\x01@Q\x81aL<\x01Ra\x01`Q\x81\x81\x81a\x12@\x01Ra4c\x01Ral~\x90\xF3[a\0\x8FV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0\xBB\x90a\0\x93V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\xD3W`@RV[a\0\x9DV[\x90a\0\xEBa\0\xE4a\0\x89V[\x92\x83a\0\xB1V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\x05\x90a\0\xF1V[\x90V[a\x01\x11\x81a\0\xFCV[\x03a\x01\x18WV[_\x80\xFD[\x90PQ\x90a\x01)\x82a\x01\x08V[V[\x91\x90`@\x83\x82\x03\x12a\x01SW\x80a\x01Ga\x01P\x92_\x86\x01a\x01\x1CV[\x93` \x01a\x01\x1CV[\x90V[a\0\xEDV[a\x01va\x89\x91\x808\x03\x80a\x01k\x81a\0\xD8V[\x92\x839\x81\x01\x90a\x01+V[\x90\x91V[\x7F\xCC\xE2\x96\xB0@3*\x08\x0Em\xF15\x15\xA3\xEC(i\xE2\x1C\xD2\x0FsD\xAF\t\x87\xDD\xB98\xD8\xBD!\x90V[\x7F\x82\x03r\xA9\xFA\xF8-\xB3\xCC_\xC3o\xFA\xB5\xF0\x96\xEE\xF6\x9B\x95\xFB\xF5\x05\x91\xE0\xD7\x14G\xAA\x1B\xA7\0\x90V[a\x01\xCFa\x01\xEF\x92\x82a\x01\xF2V[a\x01\xE1a\x01\xDAa\x01zV[\x82\x90a\t\xD1V[Pa\x01\xEAa\x01\x9EV[a\t\xD1V[PV[\x90a\x01\xFC\x91a\x01\xFEV[V[\x90a\x02\x08\x91a\x04MV[V[`\x01\x80`@\x1B\x03\x81\x11a\x02&Wa\x02\"` \x91a\0\x93V[\x01\x90V[a\0\x9DV[\x90a\x02=a\x028\x83a\x02\nV[a\0\xD8V[\x91\x82RV[_\x7FSyndicate\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02s`\ta\x02+V[\x90a\x02\x80` \x83\x01a\x02BV[V[a\x02\x8Aa\x02iV[\x90V[_\x7FSYND\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xBE`\x04a\x02+V[\x90a\x02\xCB` \x83\x01a\x02\x8DV[V[a\x02\xD5a\x02\xB4V[\x90V[\x90V[\x90V[a\x02\xF2a\x02\xEDa\x02\xF7\x92a\x02\xD8V[a\x02\xDBV[a\0\xF1V[\x90V[a\x03\x03\x90a\x02\xDEV[\x90V[_\x01\x90V[\x90V[\x90V[a\x03%a\x03 a\x03*\x92a\x03\x0BV[a\x02\xDBV[a\x03\x0EV[\x90V[a\x039b\x9E4\0a\x03\x11V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x03_a\x03e\x91\x93\x92\x93a\x03\x0EV[\x92a\x03\x0EV[\x82\x01\x80\x92\x11a\x03pWV[a\x03<V[a\x03\x89a\x03\x84a\x03\x8E\x92a\x02\xD8V[a\x02\xDBV[a\x03\x0EV[\x90V[_\x1B\x90V[\x90a\x03\xA2_\x19\x91a\x03\x91V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\xC0a\x03\xBBa\x03\xC5\x92a\x03\x0EV[a\x02\xDBV[a\x03\x0EV[\x90V[\x90V[\x90a\x03\xE0a\x03\xDBa\x03\xE7\x92a\x03\xACV[a\x03\xC8V[\x82Ta\x03\x96V[\x90UV[\x90V[a\x04\x02a\x03\xFDa\x04\x07\x92a\x02\xD8V[a\x03\x91V[a\x03\xEBV[\x90V[a\x04\x13_a\x03\xEEV[\x90V[\x90V[a\x04-a\x04(a\x042\x92a\x04\x16V[a\x02\xDBV[a\x03\x0EV[\x90V[a\x04Jk\x02\xF9\x01\x93\xEF0u\xFA\x98\0\0\0a\x04\x19V[\x90V[\x90a\x04oa\x04Ya\x02\x82V[a\x04aa\x02\x82V[a\x04ia\x02\xCDV[\x91a\x055V[\x81a\x04\x8Aa\x04\x84a\x04\x7F_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14a\x05\x19W\x80a\x04\xAAa\x04\xA4a\x04\x9F_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14a\x04\xFDWa\x04\xECa\x04\xFB\x92a\x04\xC8Ba\x04\xC2a\x03-V[\x90a\x03PV[a\x01`Ra\x04\xDFa\x04\xD8_a\x03uV[`\x0Ca\x03\xCBV[a\x04\xE7a\x04\nV[a\t\xD1V[Pa\x04\xF5a\x045V[\x90a\n\x9FV[V[_c\xD9.#=`\xE0\x1B\x81R\x80a\x05\x15`\x04\x82\x01a\x03\x06V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a\x051`\x04\x82\x01a\x03\x06V[\x03\x90\xFD[\x90a\x05@\x92\x91a\x05BV[V[\x90a\x05M\x92\x91a\x05OV[V[\x90a\x05Z\x92\x91a\x05\\V[V[\x90a\x05g\x92\x91a\x05iV[V[\x90a\x05t\x92\x91a\x05\xC1V[V[_\x7F1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x05\xA7`\x01a\x02+V[\x90a\x05\xB4` \x83\x01a\x05vV[V[a\x05\xBEa\x05\x9DV[\x90V[\x90a\x05\xD5\x92\x91a\x05\xCFa\x05\xB6V[\x90a\x05\xD7V[V[\x90a\x05\xE3\x93\x92\x91a\x06)V[V[\x90V[\x90V[` \x01\x90V[Q\x90V[a\x06\ta\x06\x04a\x06\x0E\x92a\0\xF1V[a\x02\xDBV[a\0\xF1V[\x90V[a\x06\x1A\x90a\x05\xF5V[\x90V[a\x06&\x90a\x06\x11V[\x90V[a\x06:a\x06\x8A\x94a\x06o\x93\x94a\x06\xBEV[a\x06N\x81a\x06H`\x06a\x05\xE5V[\x90a\x0BLV[a\x01 Ra\x06f\x83a\x06``\x07a\x05\xE5V[\x90a\x0BLV[a\x01@Ra\x05\xE8V[a\x06\x81a\x06{\x82a\x05\xF1V[\x91a\x05\xEBV[ `\xE0Ra\x05\xE8V[a\x06\x9Ca\x06\x96\x82a\x05\xF1V[\x91a\x05\xEBV[ a\x01\0RF`\xA0Ra\x06\xADa\x0CQV[`\x80Ra\x06\xB90a\x06\x1DV[`\xC0RV[\x90a\x06\xC8\x91a\x06\xCAV[V[\x90a\x06\xD4\x91a\x06\xD6V[V[\x90a\x06\xE0\x91a\t'V[V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[Q\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x07-W[` \x83\x10\x14a\x07(WV[a\x06\xF9V[\x91`\x7F\x16\x91a\x07\x1DV[_R` _ \x90V[`\x1F` \x91\x01\x04\x90V[\x1B\x90V[\x91\x90`\x08a\x07i\x91\x02\x91a\x07c_\x19\x84a\x07JV[\x92a\x07JV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x07\x89a\x07\x84a\x07\x91\x93a\x03\xACV[a\x03\xC8V[\x90\x83Ta\x07NV[\x90UV[_\x90V[a\x07\xAB\x91a\x07\xA5a\x07\x95V[\x91a\x07sV[V[[\x81\x81\x10a\x07\xB9WPPV[\x80a\x07\xC6_`\x01\x93a\x07\x99V[\x01a\x07\xAEV[\x91\x90`\x1F\x81\x11a\x07\xDCW[PPPV[a\x07\xE8a\x08\r\x93a\x077V[\x90` a\x07\xF4\x84a\x07@V[\x83\x01\x93\x10a\x08\x15W[a\x08\x06\x90a\x07@V[\x01\x90a\x07\xADV[_\x80\x80a\x07\xD7V[\x91Pa\x08\x06\x81\x92\x90Pa\x07\xFDV[\x1C\x90V[\x90a\x087\x90_\x19\x90`\x08\x02a\x08#V[\x19\x16\x90V[\x81a\x08F\x91a\x08'V[\x90`\x02\x02\x17\x90V[\x90a\x08X\x81a\x06\xF5V[\x90`\x01\x80`@\x1B\x03\x82\x11a\t\x16Wa\x08z\x82a\x08t\x85Ta\x07\rV[\x85a\x07\xCCV[` \x90`\x1F\x83\x11`\x01\x14a\x08\xAEW\x91\x80\x91a\x08\x9D\x93_\x92a\x08\xA2W[PPa\x08<V[\x90U[V[\x90\x91P\x01Q_\x80a\x08\x96V[`\x1F\x19\x83\x16\x91a\x08\xBD\x85a\x077V[\x92_[\x81\x81\x10a\x08\xFEWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x08\xE4W[PPP\x02\x01\x90Ua\x08\xA0V[a\x08\xF4\x91\x01Q`\x1F\x84\x16\x90a\x08'V[\x90U_\x80\x80a\x08\xD8V[\x91\x93` `\x01\x81\x92\x87\x87\x01Q\x81U\x01\x95\x01\x92\x01a\x08\xC0V[a\0\x9DV[\x90a\t%\x91a\x08NV[V[\x90a\t6a\t=\x92`\x03a\t\x1BV[`\x04a\t\x1BV[V[_\x90V[\x15\x15\x90V[a\tQ\x90a\x03\xEBV[\x90V[\x90a\t^\x90a\tHV[_R` R`@_ \x90V[a\ts\x90a\x06\x11V[\x90V[\x90a\t\x80\x90a\tjV[_R` R`@_ \x90V[\x90a\t\x98`\xFF\x91a\x03\x91V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\t\xAB\x90a\tCV[\x90V[\x90V[\x90a\t\xC6a\t\xC1a\t\xCD\x92a\t\xA2V[a\t\xAEV[\x82Ta\t\x8CV[\x90UV[a\t\xD9a\t?V[Pa\t\xEEa\t\xE8\x82\x84\x90a\x0C\xEEV[\x15a\tCV[_\x14a\nwWa\n\x16`\x01a\n\x11_a\n\t`\x05\x86\x90a\tTV[\x01\x85\x90a\tvV[a\t\xB1V[\x90a\n\x1Fa\r\x1CV[\x90a\n\\a\nVa\nP\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\tHV[\x92a\tjV[\x92a\tjV[\x92a\nea\0\x89V[\x80a\no\x81a\x03\x06V[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\n\x86\x90a\0\xFCV[\x90RV[\x91\x90a\n\x9D\x90_` \x85\x01\x94\x01\x90a\n}V[V[\x80a\n\xBAa\n\xB4a\n\xAF_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14a\n\xD6Wa\n\xD4\x91a\n\xCC_a\x02\xFAV[\x91\x90\x91a\rMV[V[a\n\xF9a\n\xE2_a\x02\xFAV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\n\x8AV[\x03\x90\xFD[_\x90V[\x90V[a\x0B\x18a\x0B\x13a\x0B\x1D\x92a\x0B\x01V[a\x02\xDBV[a\x03\x0EV[\x90V[\x90V[a\x0B7a\x0B2a\x0B<\x92a\x0B V[a\x03\x91V[a\x03\xEBV[\x90V[a\x0BI`\xFFa\x0B#V[\x90V[\x90a\x0BUa\n\xFDV[Pa\x0Bga\x0Bb\x83a\x05\xE8V[a\x05\xF1V[a\x0Bza\x0Bt` a\x0B\x04V[\x91a\x03\x0EV[\x10_\x14a\x0B\x8EWPa\x0B\x8B\x90a\x0E\xE7V[\x90V[_a\x0B\x9Ca\x0B\xA2\x93\x92a\r\xF7V[\x01a\t\x1BV[a\x0B\xB2a\x0B\xADa\x0B?V[a\tHV[\x90V[_\x90V[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[a\x0B\xE7\x90Qa\x03\xEBV[\x90V[a\x0B\xF3\x90a\x03\xEBV[\x90RV[a\x0C\0\x90a\x03\x0EV[\x90RV[\x90\x95\x94\x92a\x0CO\x94a\x0C>a\x0CH\x92a\x0C4`\x80\x96a\x0C*`\xA0\x88\x01\x9C_\x89\x01\x90a\x0B\xEAV[` \x87\x01\x90a\x0B\xEAV[`@\x85\x01\x90a\x0B\xEAV[``\x83\x01\x90a\x0B\xF7V[\x01\x90a\n}V[V[a\x0CYa\x0B\xB5V[Pa\x0Cba\x0B\xB9V[a\x0C\xACa\x0Co`\xE0a\x0B\xDDV[\x91a\x0C\x9Da\x0C~a\x01\0a\x0B\xDDV[Fa\x0C\x880a\x06\x1DV[\x91a\x0C\x91a\0\x89V[\x96\x87\x95` \x87\x01a\x0C\x04V[` \x82\x01\x81\x03\x82R\x03\x82a\0\xB1V[a\x0C\xBEa\x0C\xB8\x82a\x05\xF1V[\x91a\x05\xEBV[ \x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x0C\xD9a\x0C\xDE\x91a\x0C\xC2V[a\x0C\xC7V[\x90V[a\x0C\xEB\x90Ta\x0C\xCDV[\x90V[a\r\x15\x91_a\r\na\r\x10\x93a\r\x02a\t?V[P`\x05a\tTV[\x01a\tvV[a\x0C\xE1V[\x90V[_\x90V[a\r$a\r\x18V[P3\x90V[\x7F\x84\xFEt\xC7\x1A(\xB6\x9A\xA9`Hl\xA0\xE8\xC1A\x8C\x86\xE9\xEA,\xD6\xB5\x84\x9B\x95\xE2\xC8\xF4\x07\xA6t\x90V[\x91\x82a\ria\rca\r^_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14\x15\x80a\r\xD4W[a\r\x84W[a\r\x82\x92\x91\x90\x91a\x10\x0BV[V[a\r\x8Ca\x0F\x95V[\x80a\r\xB3W[\x15a\rvW_c6\xE2x\xFD`\xE2\x1B\x81R\x80a\r\xAF`\x04\x82\x01a\x03\x06V[\x03\x90\xFD[Pa\r\xCFa\r\xC9a\r\xC2a\r)V[3\x90a\x0C\xEEV[\x15a\tCV[a\r\x92V[P\x81a\r\xF0a\r\xEAa\r\xE5_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14\x15a\rqV[\x90V[\x90V[a\x0E\x11a\x0E\x0Ca\x0E\x16\x92a\r\xFAV[a\x02\xDBV[a\x03\x0EV[\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x0ELa\x0EU` \x93a\x0EZ\x93a\x0EC\x81a\x06\xF5V[\x93\x84\x80\x93a\x0E\x19V[\x95\x86\x91\x01a\x0E\"V[a\0\x93V[\x01\x90V[a\x0Es\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x0E-V[\x90V[a\x0E\x90a\x0E\x8Ba\x0E\x85\x83a\x05\xF1V[\x92a\x05\xEBV[a\x0B\xDDV[\x90` \x81\x10a\x0E\x9EW[P\x90V[a\x0E\xB0\x90_\x19\x90` \x03`\x08\x02a\x07JV[\x16_a\x0E\x9AV[a\x0E\xC3a\x0E\xC8\x91a\x0C\xC2V[a\x03\xACV[\x90V[a\x0E\xDFa\x0E\xDAa\x0E\xE4\x92a\x03\x0EV[a\x03\x91V[a\x03\xEBV[\x90V[a\x0E\xEFa\n\xFDV[Pa\x0E\xF9\x81a\x05\xE8V[\x90a\x0F\x03\x82a\x05\xF1V[a\x0F\x16a\x0F\x10`\x1Fa\r\xFDV[\x91a\x03\x0EV[\x11a\x0FKWPa\x0FC\x81a\x0F=a\x0F7a\x0F2a\x0FH\x95a\x0EvV[a\x0E\xB7V[\x91a\x05\xF1V[\x17a\x0E\xCBV[a\tHV[\x90V[a\x0Fm\x90a\x0FWa\0\x89V[\x91\x82\x91c0Z'\xA9`\xE0\x1B\x83R`\x04\x83\x01a\x0E^V[\x03\x90\xFD[\x90V[a\x0F\x80a\x0F\x85\x91a\x0C\xC2V[a\x0FqV[\x90V[a\x0F\x92\x90Ta\x0FtV[\x90V[a\x0F\x9Da\t?V[Pa\x0F\xA8`\x0Ca\x0F\x88V[a\x0F\xBAa\x0F\xB4_a\x03uV[\x91a\x03\x0EV[\x14\x15\x80a\x0F\xC5W[\x90V[PBa\x0F\xE2a\x0F\xDCa\x0F\xD7`\x0Ca\x0F\x88V[a\x03\x0EV[\x91a\x03\x0EV[\x10a\x0F\xC2V[\x91` a\x10\t\x92\x94\x93a\x10\x02`@\x82\x01\x96_\x83\x01\x90a\x0B\xF7V[\x01\x90a\x0B\xF7V[V[\x92\x91a\x10\x19\x84\x83\x83\x91a\x11\x14V[\x83a\x104a\x10.a\x10)_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14a\x10IW[a\x10G\x92\x93\x91\x90\x91a\x12\xE1V[V[a\x10Qa\x12\x83V[\x93a\x10Za\x12\xC0V[\x94\x80a\x10na\x10h\x88a\x03\x0EV[\x91a\x03\x0EV[\x11a\x10{WP\x93Pa\x10:V[\x85\x90a\x10\x97_\x92\x83\x92c\x0EX\xAE\x93`\xE1\x1B\x84R`\x04\x84\x01a\x0F\xE8V[\x03\x90\xFD[\x90a\x10\xA5\x90a\tjV[_R` R`@_ \x90V[`@\x90a\x10\xDAa\x10\xE1\x94\x96\x95\x93\x96a\x10\xD0``\x84\x01\x98_\x85\x01\x90a\n}V[` \x83\x01\x90a\x0B\xF7V[\x01\x90a\x0B\xF7V[V[\x90a\x10\xEE\x91\x03a\x03\x0EV[\x90V[\x90a\x10\xFC\x91\x01a\x03\x0EV[\x90V[\x91\x90a\x11\x12\x90_` \x85\x01\x94\x01\x90a\x0B\xF7V[V[\x91\x90\x91\x80a\x112a\x11,a\x11'_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14_\x14a\x12\x13Wa\x11Va\x11O\x83a\x11J`\x02a\x0F\x88V[a\x03PV[`\x02a\x03\xCBV[[\x82a\x11ra\x11la\x11g_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14_\x14a\x11\xE7Wa\x11\x96a\x11\x8F\x83a\x11\x8A`\x02a\x0F\x88V[a\x10\xE3V[`\x02a\x03\xCBV[[\x91\x90\x91a\x11\xE2a\x11\xD0a\x11\xCA\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\tjV[\x93a\tjV[\x93a\x11\xD9a\0\x89V[\x91\x82\x91\x82a\x10\xFFV[\x03\x90\xA3V[a\x12\x0E\x82a\x12\x08a\x11\xF9_\x87\x90a\x10\x9BV[\x91a\x12\x03\x83a\x0F\x88V[a\x10\xF1V[\x90a\x03\xCBV[a\x11\x97V[a\x12&a\x12!_\x83\x90a\x10\x9BV[a\x0F\x88V[\x80a\x129a\x123\x85a\x03\x0EV[\x91a\x03\x0EV[\x10a\x12aWa\x12La\x12\\\x91\x84\x90a\x10\xE3V[a\x12W_\x84\x90a\x10\x9BV[a\x03\xCBV[a\x11WV[\x90a\x12\x7F\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a\x10\xB1V[\x03\x90\xFD[a\x12\x8Ba\x07\x95V[Pa\x12\x96`\x02a\x0F\x88V[\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x12\xB8a\x12\xB3a\x12\xBD\x92a\x12\x99V[a\x02\xDBV[a\x03\x0EV[\x90V[a\x12\xC8a\x07\x95V[Pa\x12\xD8`\x01\x80`\xD0\x1B\x03a\x12\xA4V[\x90V[\x90V[\x90V[\x91a\x139a\x133a\x13@\x94\x80a\x13\x07a\x13\x01a\x12\xFC_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14a\x13qW[\x84a\x13(a\x13\"a\x13\x1D_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x14a\x13BW[a\x15iV[\x92a\x15iV[\x90\x91a\x15\x9EV[V[a\x13j`\x0B`\x02a\x13da\x13^a\x13X\x89a\x14SV[\x93a\x12\xDBV[\x91a\x12\xDEV[\x90a\x14\xA6V[PPa\x13.V[a\x13\x99`\x0B`\x01a\x13\x93a\x13\x8Da\x13\x87\x89a\x14SV[\x93a\x12\xDBV[\x91a\x12\xDEV[\x90a\x14\xA6V[PPa\x13\rV[_\x90V[a\x13\xB0a\x13\xB6\x91a\x12\x99V[\x91a\x12\x99V[\x01\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x13\xC7WV[a\x03<V[\x90a\x13\xDF\x91a\x13\xD9a\x13\xA0V[Pa\x13\xA4V[\x90V[\x90V[`\xFF\x16\x90V[a\x13\xFFa\x13\xFAa\x14\x04\x92a\x13\xE2V[a\x02\xDBV[a\x13\xE5V[\x90V[a\x14\x10\x90a\x13\xEBV[\x90RV[\x91` a\x145\x92\x94\x93a\x14.`@\x82\x01\x96_\x83\x01\x90a\x14\x07V[\x01\x90a\x0B\xF7V[V[a\x14Ka\x14Fa\x14P\x92a\x03\x0EV[a\x02\xDBV[a\x12\x99V[\x90V[a\x14[a\x13\xA0V[P\x80a\x14ua\x14o`\x01\x80`\xD0\x1B\x03a\x12\xA4V[\x91a\x03\x0EV[\x11a\x14\x86Wa\x14\x83\x90a\x147V[\x90V[`\xD0a\x14\xA2_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a\x14\x14V[\x03\x90\xFD[\x90a\x14\xDCa\x14\xE2\x93\x92a\x14\xB7a\x13\xA0V[Pa\x14\xC0a\x13\xA0V[P\x80\x93a\x14\xD5a\x14\xCEa\x17PV[\x94\x92a\x17\xFDV[\x90\x91a\x1C\xE3V[\x91a\x18rV[\x91\x90\x91\x90V[a\x14\xF4a\x14\xFA\x91a\x12\x99V[\x91a\x12\x99V[\x90\x03\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x15\x0CWV[a\x03<V[\x90a\x15$\x91a\x15\x1Ea\x13\xA0V[Pa\x14\xE8V[\x90V[\x90a\x151\x90a\tjV[_R` R`@_ \x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x15Ta\x15Y\x91a\x0C\xC2V[a\x15=V[\x90V[a\x15f\x90Ta\x15HV[\x90V[a\x15\x80a\x15\x85\x91a\x15xa\r\x18V[P`\ta\x15'V[a\x15\\V[\x90V[\x90a\x15\x92\x90a\tjV[_R` R`@_ \x90V[\x91\x90\x91\x80a\x15\xB4a\x15\xAE\x85a\0\xFCV[\x91a\0\xFCV[\x14\x15\x80a\x172W[a\x15\xC6W[PPPV[\x80a\x15\xE1a\x15\xDBa\x15\xD6_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x03a\x16\xA2W[P\x81a\x16\x03a\x15\xFDa\x15\xF8_a\x02\xFAV[a\0\xFCV[\x91a\0\xFCV[\x03a\x16\x0FW[\x80a\x15\xC1V[a\x16Va\x16Ia\x16P\x92a\x16%`\n\x86\x90a\x15\x88V[\x90a\x16Ca\x16=a\x167`\x01\x93a\x14SV[\x93a\x12\xDBV[\x91a\x12\xDEV[\x90a\x14\xA6V[\x92\x90a\x12\xA4V[\x91a\x12\xA4V[\x91\x90\x91a\x16\x83\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\tjV[\x92a\x16\x98a\x16\x8Fa\0\x89V[\x92\x83\x92\x83a\x0F\xE8V[\x03\x90\xA2_\x80a\x16\tV[a\x16\xE1a\x16\xE7a\x16\xDAa\x16\xB7`\n\x85\x90a\x15\x88V[`\x02a\x16\xD4a\x16\xCEa\x16\xC8\x89a\x14SV[\x93a\x12\xDBV[\x91a\x12\xDEV[\x90a\x14\xA6V[\x92\x90a\x12\xA4V[\x91a\x12\xA4V[\x91\x90\x91a\x17\x14\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\tjV[\x92a\x17)a\x17 a\0\x89V[\x92\x83\x92\x83a\x0F\xE8V[\x03\x90\xA2_a\x15\xE7V[P\x81a\x17Fa\x17@_a\x03uV[\x91a\x03\x0EV[\x11a\x15\xBCV[_\x90V[a\x17Xa\x17LV[Pa\x17aa\x18\xA1V[\x90V[T\x90V[\x90V[a\x17\x7Fa\x17za\x17\x84\x92a\x17hV[a\x02\xDBV[a\x03\x0EV[\x90V[a\x17\x96a\x17\x9C\x91\x93\x92\x93a\x03\x0EV[\x92a\x03\x0EV[\x82\x03\x91\x82\x11a\x17\xA7WV[a\x03<V[\x90V[`0\x1C\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x17\xCCa\x17\xD1\x91a\x17\xAFV[a\x17\xB5V[\x90V[a\x17\xDE\x90Ta\x17\xC0V[\x90V[a\x17\xF5a\x17\xF0a\x17\xFA\x92a\x02\xD8V[a\x02\xDBV[a\x12\x99V[\x90V[a\x18\x05a\x13\xA0V[Pa\x18\x11_\x82\x01a\x17dV[\x80a\x18$a\x18\x1E_a\x03uV[\x91a\x03\x0EV[\x14_\x14a\x18:WPPa\x186_a\x17\xE1V[[\x90V[a\x18g_\x91a\x18ba\x18\\\x84a\x18m\x96\x01\x92a\x18V`\x01a\x17kV[\x90a\x17\x87V[\x91a\x17\xACV[a\x18\xB6V[\x01a\x17\xD4V[a\x187V[\x91a\x18\x96_a\x18\x9B\x94a\x18\x83a\x13\xA0V[Pa\x18\x8Ca\x13\xA0V[P\x01\x92\x91\x92a\x17\xACV[a\x1A\xBBV[\x91\x90\x91\x90V[a\x18\xA9a\x17LV[Pa\x18\xB3Ca\x1C|V[\x90V[_R` _ \x01\x90V[T\x90V[a\x18\xCE`@a\0\xD8V[\x90V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[\x90a\x18\xE6\x90a\x18\xD1V[\x90RV[\x90a\x18\xF4\x90a\x12\x99V[\x90RV[_R` _ \x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[a\x19\x1E\x81a\x18\xC0V[\x82\x10\x15a\x198Wa\x190`\x01\x91a\x18\xF8V[\x91\x02\x01\x90_\x90V[a\x19\x01V[a\x19G\x90Qa\x18\xD1V[\x90V[\x90a\x19[e\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x03\x91V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19ya\x19ta\x19~\x92a\x18\xD1V[a\x02\xDBV[a\x18\xD1V[\x90V[\x90V[\x90a\x19\x99a\x19\x94a\x19\xA0\x92a\x19eV[a\x19\x81V[\x82Ta\x19JV[\x90UV[a\x19\xAE\x90Qa\x12\x99V[\x90V[`0\x1B\x90V[\x90a\x19\xC9e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x91a\x19\xB1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x19\xE7a\x19\xE2a\x19\xEC\x92a\x12\x99V[a\x02\xDBV[a\x12\x99V[\x90V[\x90V[\x90a\x1A\x07a\x1A\x02a\x1A\x0E\x92a\x19\xD3V[a\x19\xEFV[\x82Ta\x19\xB7V[\x90UV[\x90a\x1A<` _a\x1AB\x94a\x1A4\x82\x82\x01a\x1A.\x84\x88\x01a\x19=V[\x90a\x19\x84V[\x01\x92\x01a\x19\xA4V[\x90a\x19\xF2V[V[\x91\x90a\x1AUWa\x1AS\x91a\x1A\x12V[V[a\x06\xE2V[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a\x1A\x8AW\x82a\x1A\x82\x91`\x01a\x1A\x88\x95\x01\x81Ua\x19\x15V[\x90a\x1ADV[V[a\0\x9DV[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x1A\xA6a\x1A\xAB\x91a\x0C\xC2V[a\x1A\x8FV[\x90V[a\x1A\xB8\x90Ta\x1A\x9AV[\x90V[\x90\x92\x91\x92a\x1A\xC7a\x13\xA0V[Pa\x1A\xD0a\x13\xA0V[Pa\x1A\xDA\x82a\x18\xC0V[\x80a\x1A\xEDa\x1A\xE7_a\x03uV[\x91a\x03\x0EV[\x11_\x14a\x1B\xBDWa\x1B\x13\x90a\x1B\r\x84\x91a\x1B\x07`\x01a\x17kV[\x90a\x17\x87V[\x90a\x18\xB6V[\x90a\x1B\x1F_\x83\x01a\x1A\xAEV[\x92a\x1B+_\x84\x01a\x17\xD4V[\x93\x80a\x1B?a\x1B9\x85a\x18\xD1V[\x91a\x18\xD1V[\x11a\x1B\xA1Wa\x1BVa\x1BP\x84a\x18\xD1V[\x91a\x18\xD1V[\x14_\x14a\x1BqWPPa\x1Bl\x90_\x85\x91\x01a\x19\xF2V[[\x91\x90V[a\x1B\x9C\x92Pa\x1B\x97\x86a\x1B\x8Ea\x1B\x85a\x18\xC4V[\x94_\x86\x01a\x18\xDCV[` \x84\x01a\x18\xEAV[a\x1AZV[a\x1BmV[_c% `\x1D`\xE0\x1B\x81R\x80a\x1B\xB9`\x04\x82\x01a\x03\x06V[\x03\x90\xFD[Pa\x1B\xE8\x91a\x1B\xE3\x85a\x1B\xDAa\x1B\xD1a\x18\xC4V[\x94_\x86\x01a\x18\xDCV[` \x84\x01a\x18\xEAV[a\x1AZV[a\x1B\xF1_a\x17\xE1V[\x91\x90V[a\x1C\ta\x1C\x04a\x1C\x0E\x92a\x18\xD1V[a\x02\xDBV[a\x03\x0EV[\x90V[\x90V[a\x1C(a\x1C#a\x1C-\x92a\x1C\x11V[a\x02\xDBV[a\x13\xE5V[\x90V[a\x1C9\x90a\x1C\x14V[\x90RV[\x91` a\x1C^\x92\x94\x93a\x1CW`@\x82\x01\x96_\x83\x01\x90a\x1C0V[\x01\x90a\x0B\xF7V[V[a\x1Cta\x1Coa\x1Cy\x92a\x03\x0EV[a\x02\xDBV[a\x18\xD1V[\x90V[a\x1C\x84a\x17LV[P\x80a\x1C\x9Ea\x1C\x98e\xFF\xFF\xFF\xFF\xFF\xFFa\x1B\xF5V[\x91a\x03\x0EV[\x11a\x1C\xAFWa\x1C\xAC\x90a\x1C`V[\x90V[`0a\x1C\xCB_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a\x1C=V[\x03\x90\xFD[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[\x91\x90\x91\x80`\x01\x14a\x1D\x02W`\x02\x03a\x1C\xCFWa\x1C\xFE\x91a\x15\x11V[\x90[V[Pa\x1D\x0C\x91a\x13\xCCV[\x90a\x1D\0V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x1D\x83V[a\0\x1D_5a\x04<V[\x80c\x01\x04-z\x14a\x047W\x80c\x01\xFF\xC9\xA7\x14a\x042W\x80c\x04\xDF\x01}\x14a\x04-W\x80c\x05\x072\xFB\x14a\x04(W\x80c\x06\xFD\xDE\x03\x14a\x04#W\x80c\t^\xA7\xB3\x14a\x04\x1EW\x80c\x18\x16\r\xDD\x14a\x04\x19W\x80c\x18\xBFPw\x14a\x04\x14W\x80c#\xB8r\xDD\x14a\x04\x0FW\x80c$\x8A\x9C\xA3\x14a\x04\nW\x80c(i6k\x14a\x04\x05W\x80c+\x8CI\xE3\x14a\x04\0W\x80c//\xF1]\x14a\x03\xFBW\x80c0\xD3\xE8\xEB\x14a\x03\xF6W\x80c1<\xE5g\x14a\x03\xF1W\x80c6D\xE5\x15\x14a\x03\xECW\x80c6V\x8A\xBE\x14a\x03\xE7W\x80c:F\xB1\xA8\x14a\x03\xE2W\x80c@\xC1\x0F\x19\x14a\x03\xDDW\x80cBz\xC0\xCA\x14a\x03\xD8W\x80cB\x96lh\x14a\x03\xD3W\x80cK\xF5\xD7\xE9\x14a\x03\xCEW\x80cO\x1B\xFC\x9E\x14a\x03\xC9W\x80cX|\xDE\x1E\x14a\x03\xC4W\x80cZB9\xE9\x14a\x03\xBFW\x80cZ]\xB1\xBB\x14a\x03\xBAW\x80c\\\x19\xA9\\\x14a\x03\xB5W\x80c]Lb\x85\x14a\x03\xB0W\x80cc\xA0\xDA\xAC\x14a\x03\xABW\x80ce\x14U4\x14a\x03\xA6W\x80co\xCF\xFFE\x14a\x03\xA1W\x80cp\xA0\x821\x14a\x03\x9CW\x80cr\xCB\xDC\xC8\x14a\x03\x97W\x80cx\xFB\x7F\xD2\x14a\x03\x92W\x80cy\xCCg\x90\x14a\x03\x8DW\x80cz\x8C\xD1V\x14a\x03\x88W\x80c~\xCE\xBE\0\x14a\x03\x83W\x80c\x83\xF1!\x1B\x14a\x03~W\x80c\x84&\xAD\xF2\x14a\x03yW\x80c\x84L\x90&\x14a\x03tW\x80c\x84\xB0\x19n\x14a\x03oW\x80c\x8AT%!\x14a\x03jW\x80c\x8D3C\xD6\x14a\x03eW\x80c\x8ES\x9E\x8C\x14a\x03`W\x80c\x90-U\xA5\x14a\x03[W\x80c\x91\xD1HT\x14a\x03VW\x80c\x91\xDD\xAD\xF4\x14a\x03QW\x80c\x94\xAA\"\xF2\x14a\x03LW\x80c\x95\xD8\x9BA\x14a\x03GW\x80c\x9A\xB2N\xB0\x14a\x03BW\x80c\x9B~\xF6K\x14a\x03=W\x80c\xA2\x17\xFD\xDF\x14a\x038W\x80c\xA9\x05\x9C\xBB\x14a\x033W\x80c\xAA\x08*\x9D\x14a\x03.W\x80c\xB0\xCA%>\x14a\x03)W\x80c\xB7\xCD\xC6\x1C\x14a\x03$W\x80c\xBBMD6\x14a\x03\x1FW\x80c\xC0*\xE7T\x14a\x03\x1AW\x80c\xC3\xCD\xA5 \x14a\x03\x15W\x80c\xC4\xFCE\xA8\x14a\x03\x10W\x80c\xC9\xAB\0\x06\x14a\x03\x0BW\x80c\xD5\x05\xAC\xCF\x14a\x03\x06W\x80c\xD5Gt\x1F\x14a\x03\x01W\x80c\xDDb\xED>\x14a\x02\xFCW\x80c\xF1\x12~\xD8\x14a\x02\xF7Wc\xF7^\x85\x12\x03a\0\x0EWa\x1DNV[a\x1C\xE9V[a\x1C\x05V[a\x1B\xA4V[a\x1BjV[a\x1A\xC6V[a\x1AAV[a\x19\xAFV[a\x18\xF3V[a\x18\xBEV[a\x18\x89V[a\x18$V[a\x17\xEFV[a\x17\xAAV[a\x17uV[a\x17\x05V[a\x16\x8EV[a\x16YV[a\x16$V[a\x15\xEFV[a\x15\x8CV[a\x15WV[a\x14\xE0V[a\x14\xABV[a\x14GV[a\x13\xDCV[a\x12\x97V[a\x12bV[a\x12\tV[a\x11\xD4V[a\x11\x9FV[a\x11kV[a\x116V[a\x11\x01V[a\x10-V[a\x0F\xF8V[a\x0F\x98V[a\x0FdV[a\x0E\xF4V[a\x0E\xA0V[a\x0EkV[a\x0E7V[a\x0E\x02V[a\r\xABV[a\r=V[a\r\nV[a\x0C\xB4V[a\x0B\xB9V[a\x0B\x83V[a\x0BOV[a\x0B\x1AV[a\n\xE5V[a\n\x88V[a\nTV[a\t\xF3V[a\t\xBEV[a\tZV[a\x08\xBEV[a\x08PV[a\x08\x1BV[a\x07\xE5V[a\x07\xB0V[a\x07\x01V[a\x06\xCEV[a\x06vV[a\x05\xCCV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04d\x90a\x04PV[\x90V[a\x04p\x81a\x04[V[\x03a\x04wWV[_\x80\xFD[\x90P5\x90a\x04\x88\x82a\x04gV[V[\x90V[a\x04\x96\x81a\x04\x8AV[\x03a\x04\x9DWV[_\x80\xFD[\x90P5\x90a\x04\xAE\x82a\x04\x8DV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xD8W\x80a\x04\xCCa\x04\xD5\x92_\x86\x01a\x04{V[\x93` \x01a\x04\xA1V[\x90V[a\x04LV[\x90V[a\x04\xF4a\x04\xEFa\x04\xF9\x92a\x04PV[a\x04\xDDV[a\x04PV[\x90V[a\x05\x05\x90a\x04\xE0V[\x90V[a\x05\x11\x90a\x04\xFCV[\x90V[\x90a\x05\x1E\x90a\x05\x08V[_R` R`@_ \x90V[a\x05>a\x059a\x05C\x92a\x04\x8AV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90a\x05P\x90a\x05*V[_R` R`@_ \x90V[\x1C\x90V[\x90V[a\x05s\x90`\x08a\x05x\x93\x02a\x05\\V[a\x05`V[\x90V[\x90a\x05\x86\x91Ta\x05cV[\x90V[a\x05\xA2a\x05\xA7\x92a\x05\x9D`\x11\x93_\x94a\x05\x14V[a\x05FV[a\x05{V[\x90V[a\x05\xB3\x90a\x04\x8AV[\x90RV[\x91\x90a\x05\xCA\x90_` \x85\x01\x94\x01\x90a\x05\xAAV[V[4a\x05\xFDWa\x05\xF9a\x05\xE8a\x05\xE26`\x04a\x04\xB0V[\x90a\x05\x89V[a\x05\xF0a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x06\x17\x81a\x06\x02V[\x03a\x06\x1EWV[_\x80\xFD[\x90P5\x90a\x06/\x82a\x06\x0EV[V[\x90` \x82\x82\x03\x12a\x06JWa\x06G\x91_\x01a\x06\"V[\x90V[a\x04LV[\x15\x15\x90V[a\x06]\x90a\x06OV[\x90RV[\x91\x90a\x06t\x90_` \x85\x01\x94\x01\x90a\x06TV[V[4a\x06\xA6Wa\x06\xA2a\x06\x91a\x06\x8C6`\x04a\x061V[a\x1E V[a\x06\x99a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[\x90` \x82\x82\x03\x12a\x06\xC4Wa\x06\xC1\x91_\x01a\x04{V[\x90V[a\x04LV[_\x01\x90V[4a\x06\xFCWa\x06\xE6a\x06\xE16`\x04a\x06\xABV[a RV[a\x06\xEEa\x04BV[\x80a\x06\xF8\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x071Wa\x07-a\x07\x1Ca\x07\x176`\x04a\x06\xABV[a ]V[a\x07$a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[_\x91\x03\x12a\x07@WV[a\x04LV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x07\x86a\x07\x8F` \x93a\x07\x94\x93a\x07}\x81a\x07EV[\x93\x84\x80\x93a\x07IV[\x95\x86\x91\x01a\x07RV[a\x07]V[\x01\x90V[a\x07\xAD\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07gV[\x90V[4a\x07\xE0Wa\x07\xC06`\x04a\x076V[a\x07\xDCa\x07\xCBa!\xD5V[a\x07\xD3a\x04BV[\x91\x82\x91\x82a\x07\x98V[\x03\x90\xF3[a\x04HV[4a\x08\x16Wa\x08\x12a\x08\x01a\x07\xFB6`\x04a\x04\xB0V[\x90a!\xEBV[a\x08\ta\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[4a\x08KWa\x08+6`\x04a\x076V[a\x08Ga\x086a\"\rV[a\x08>a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x08\x7FWa\x08ia\x08c6`\x04a\x04\xB0V[\x90a\"dV[a\x08qa\x04BV[\x80a\x08{\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x90\x91``\x82\x84\x03\x12a\x08\xB9Wa\x08\xB6a\x08\x9F\x84_\x85\x01a\x04{V[\x93a\x08\xAD\x81` \x86\x01a\x04{V[\x93`@\x01a\x04\xA1V[\x90V[a\x04LV[4a\x08\xEFWa\x08\xEBa\x08\xDAa\x08\xD46`\x04a\x08\x84V[\x91a#\xDFV[a\x08\xE2a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[\x90V[a\t\0\x81a\x08\xF4V[\x03a\t\x07WV[_\x80\xFD[\x90P5\x90a\t\x18\x82a\x08\xF7V[V[\x90` \x82\x82\x03\x12a\t3Wa\t0\x91_\x01a\t\x0BV[\x90V[a\x04LV[a\tA\x90a\x08\xF4V[\x90RV[\x91\x90a\tX\x90_` \x85\x01\x94\x01\x90a\t8V[V[4a\t\x8AWa\t\x86a\tua\tp6`\x04a\t\x1AV[a$XV[a\t}a\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[\x90a\t\x99\x90a\x05\x08V[_R` R`@_ \x90V[a\t\xBB\x90a\t\xB6`\x10\x91_\x92a\t\x8FV[a\x05{V[\x90V[4a\t\xEEWa\t\xEAa\t\xD9a\t\xD46`\x04a\x06\xABV[a\t\xA5V[a\t\xE1a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\n\"Wa\n\x0Ca\n\x066`\x04a\x04\xB0V[\x90a$zV[a\n\x14a\x04BV[\x80a\n\x1E\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x91\x90`@\x83\x82\x03\x12a\nOW\x80a\nCa\nL\x92_\x86\x01a\t\x0BV[\x93` \x01a\x04{V[\x90V[a\x04LV[4a\n\x83Wa\nma\ng6`\x04a\n'V[\x90a%\xA3V[a\nua\x04BV[\x80a\n\x7F\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\n\xB8Wa\n\xB4a\n\xA3a\n\x9E6`\x04a\x06\xABV[a&\xFFV[a\n\xABa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[`\xFF\x16\x90V[a\n\xCC\x90a\n\xBDV[\x90RV[\x91\x90a\n\xE3\x90_` \x85\x01\x94\x01\x90a\n\xC3V[V[4a\x0B\x15Wa\n\xF56`\x04a\x076V[a\x0B\x11a\x0B\0a(:V[a\x0B\x08a\x04BV[\x91\x82\x91\x82a\n\xD0V[\x03\x90\xF3[a\x04HV[4a\x0BJWa\x0B*6`\x04a\x076V[a\x0BFa\x0B5a(PV[a\x0B=a\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x0B~Wa\x0Bha\x0Bb6`\x04a\n'V[\x90a(dV[a\x0Bpa\x04BV[\x80a\x0Bz\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x0B\xB4Wa\x0B\xB0a\x0B\x9Fa\x0B\x996`\x04a\x04\xB0V[\x90a(\xE1V[a\x0B\xA7a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x0B\xE8Wa\x0B\xD2a\x0B\xCC6`\x04a\x04\xB0V[\x90a)\xFFV[a\x0B\xDAa\x04BV[\x80a\x0B\xE4\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x90a\x0B\xF7\x90a\x05\x08V[_R` R`@_ \x90V[_\x1C\x90V[a\x0C\x14a\x0C\x19\x91a\x0C\x03V[a\x05`V[\x90V[a\x0C&\x90Ta\x0C\x08V[\x90V[`\xFF\x16\x90V[a\x0C;a\x0C@\x91a\x0C\x03V[a\x0C)V[\x90V[a\x0CM\x90Ta\x0C/V[\x90V[a\x0C[\x90`\ra\x0B\xEDV[a\x0Cf_\x82\x01a\x0C\x1CV[\x91a\x0C\x7F`\x02a\x0Cx`\x01\x85\x01a\x0C\x1CV[\x93\x01a\x0CCV[\x90V[`@\x90a\x0C\xABa\x0C\xB2\x94\x96\x95\x93\x96a\x0C\xA1``\x84\x01\x98_\x85\x01\x90a\x05\xAAV[` \x83\x01\x90a\x05\xAAV[\x01\x90a\x06TV[V[4a\x0C\xE7Wa\x0C\xE3a\x0C\xCFa\x0C\xCA6`\x04a\x06\xABV[a\x0CPV[a\x0C\xDA\x93\x91\x93a\x04BV[\x93\x84\x93\x84a\x0C\x82V[\x03\x90\xF3[a\x04HV[\x90` \x82\x82\x03\x12a\r\x05Wa\r\x02\x91_\x01a\x04\xA1V[\x90V[a\x04LV[4a\r8Wa\r\"a\r\x1D6`\x04a\x0C\xECV[a*\x0BV[a\r*a\x04BV[\x80a\r4\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\rmWa\rM6`\x04a\x076V[a\ria\rXa*\xD0V[a\r`a\x04BV[\x91\x82\x91\x82a\x07\x98V[\x03\x90\xF3[a\x04HV[\x90V[a\r\x89a\r\x84a\r\x8E\x92a\rrV[a\x04\xDDV[a\x04\x8AV[\x90V[a\r\x9Db\x9E4\0a\ruV[\x90V[a\r\xA8a\r\x91V[\x90V[4a\r\xDBWa\r\xBB6`\x04a\x076V[a\r\xD7a\r\xC6a\r\xA0V[a\r\xCEa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[a\r\xE9\x90a\x04[V[\x90RV[\x91\x90a\x0E\0\x90_` \x85\x01\x94\x01\x90a\r\xE0V[V[4a\x0E2Wa\x0E.a\x0E\x1Da\x0E\x186`\x04a\x06\xABV[a+lV[a\x0E%a\x04BV[\x91\x82\x91\x82a\r\xEDV[\x03\x90\xF3[a\x04HV[4a\x0EfWa\x0EPa\x0EJ6`\x04a\x04\xB0V[\x90a,\xF9V[a\x0EXa\x04BV[\x80a\x0Eb\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x0E\x9BWa\x0E\x97a\x0E\x86a\x0E\x816`\x04a\x0C\xECV[a-\xADV[a\x0E\x8Ea\x04BV[\x91\x82\x91\x82a\r\xEDV[\x03\x90\xF3[a\x04HV[4a\x0E\xCEWa\x0E\xB8a\x0E\xB36`\x04a\x06\xABV[a-\xF9V[a\x0E\xC0a\x04BV[\x80a\x0E\xCA\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[a\x0E\xECa\x0E\xF1\x92a\x0E\xE7`\x12\x93_\x94a\x05\x14V[a\x05FV[a\x05{V[\x90V[4a\x0F%Wa\x0F!a\x0F\x10a\x0F\n6`\x04a\x04\xB0V[\x90a\x0E\xD3V[a\x0F\x18a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90\x91``\x82\x84\x03\x12a\x0F_Wa\x0F\\a\x0FE\x84_\x85\x01a\x04{V[\x93a\x0FS\x81` \x86\x01a\x04\xA1V[\x93`@\x01a\x04\xA1V[\x90V[a\x04LV[4a\x0F\x93Wa\x0F}a\x0Fw6`\x04a\x0F*V[\x91a1PV[a\x0F\x85a\x04BV[\x80a\x0F\x8F\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x0F\xC8Wa\x0F\xA86`\x04a\x076V[a\x0F\xC4a\x0F\xB3a1]V[a\x0F\xBBa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[c\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\xDF\x90a\x0F\xCDV[\x90RV[\x91\x90a\x0F\xF6\x90_` \x85\x01\x94\x01\x90a\x0F\xD6V[V[4a\x10(Wa\x10$a\x10\x13a\x10\x0E6`\x04a\x06\xABV[a1\x7FV[a\x10\x1Ba\x04BV[\x91\x82\x91\x82a\x0F\xE3V[\x03\x90\xF3[a\x04HV[4a\x10]Wa\x10Ya\x10Ha\x10C6`\x04a\x06\xABV[a1\x94V[a\x10Pa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x10~\x90a\x04[V[\x90RV[\x90a\x10\x8F\x81` \x93a\x10uV[\x01\x90V[` \x01\x90V[\x90a\x10\xB6a\x10\xB0a\x10\xA9\x84a\x10bV[\x80\x93a\x10fV[\x92a\x10oV[\x90_[\x81\x81\x10a\x10\xC6WPPP\x90V[\x90\x91\x92a\x10\xDFa\x10\xD9`\x01\x92\x86Qa\x10\x82V[\x94a\x10\x93V[\x91\x01\x91\x90\x91a\x10\xB9V[a\x10\xFE\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x10\x99V[\x90V[4a\x111Wa\x11\x116`\x04a\x076V[a\x11-a\x11\x1Ca1\xB7V[a\x11$a\x04BV[\x91\x82\x91\x82a\x10\xE9V[\x03\x90\xF3[a\x04HV[4a\x11fWa\x11ba\x11Qa\x11L6`\x04a\x06\xABV[a1\xD5V[a\x11Ya\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[4a\x11\x9AWa\x11\x84a\x11~6`\x04a\x04\xB0V[\x90a3:V[a\x11\x8Ca\x04BV[\x80a\x11\x96\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x11\xCFWa\x11\xAF6`\x04a\x076V[a\x11\xCBa\x11\xBAa3FV[a\x11\xC2a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x12\x04Wa\x12\0a\x11\xEFa\x11\xEA6`\x04a\x06\xABV[a3\xBEV[a\x11\xF7a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x129Wa\x12\x196`\x04a\x076V[a\x125a\x12$a3\xD3V[a\x12,a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x12\x92Wa\x12r6`\x04a\x076V[a\x12\x8Ea\x12}a\x12>V[a\x12\x85a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x12\xC5Wa\x12\xAFa\x12\xAA6`\x04a\x0C\xECV[a5&V[a\x12\xB7a\x04BV[\x80a\x12\xC1\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[`\xFF`\xF8\x1B\x16\x90V[a\x12\xDC\x90a\x12\xCAV[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x12\xFC\x90a\x04\x8AV[\x90RV[\x90a\x13\r\x81` \x93a\x12\xF3V[\x01\x90V[` \x01\x90V[\x90a\x134a\x13.a\x13'\x84a\x12\xE0V[\x80\x93a\x12\xE4V[\x92a\x12\xEDV[\x90_[\x81\x81\x10a\x13DWPPP\x90V[\x90\x91\x92a\x13]a\x13W`\x01\x92\x86Qa\x13\0V[\x94a\x13\x11V[\x91\x01\x91\x90\x91a\x137V[\x93\x95\x91\x94a\x13\xB8a\x13\xADa\x13\xCC\x95a\x13\x9Fa\x13\xC2\x95a\x13\xD9\x9C\x9Aa\x13\x92`\xE0\x8C\x01\x92_\x8D\x01\x90a\x12\xD3V[\x8A\x82\x03` \x8C\x01Ra\x07gV[\x90\x88\x82\x03`@\x8A\x01Ra\x07gV[\x97``\x87\x01\x90a\x05\xAAV[`\x80\x85\x01\x90a\r\xE0V[`\xA0\x83\x01\x90a\t8V[`\xC0\x81\x84\x03\x91\x01Ra\x13\x17V[\x90V[4a\x14\x13Wa\x13\xEC6`\x04a\x076V[a\x14\x0Fa\x13\xF7a5\xAEV[\x93a\x14\x06\x97\x95\x97\x93\x91\x93a\x04BV[\x97\x88\x97\x88a\x13gV[\x03\x90\xF3[a\x04HV[\x7F\x84\xFEt\xC7\x1A(\xB6\x9A\xA9`Hl\xA0\xE8\xC1A\x8C\x86\xE9\xEA,\xD6\xB5\x84\x9B\x95\xE2\xC8\xF4\x07\xA6t\x90V[a\x14Da\x14\x18V[\x90V[4a\x14wWa\x14W6`\x04a\x076V[a\x14sa\x14ba\x14<V[a\x14ja\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[\x7F\x9B\x12\xE0\xC5p~II\x15\xE5\x8B\x05d\xF1\x8A\xAA\xD9\xB7J\xC6\x9B\xFC\x81Z\x1E\xDA\xDC\x8EK\xD02\xEB\x90V[a\x14\xA8a\x14|V[\x90V[4a\x14\xDBWa\x14\xBB6`\x04a\x076V[a\x14\xD7a\x14\xC6a\x14\xA0V[a\x14\xCEa\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x15\x10Wa\x15\x0Ca\x14\xFBa\x14\xF66`\x04a\x0C\xECV[a68V[a\x15\x03a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90V[a\x15,a\x15'a\x151\x92a\x15\x15V[a\x04\xDDV[a\x04\x8AV[\x90V[a\x15Ik\x03;.<\x9F\xD0\x80<\xE8\0\0\0a\x15\x18V[\x90V[a\x15Ta\x154V[\x90V[4a\x15\x87Wa\x15g6`\x04a\x076V[a\x15\x83a\x15ra\x15LV[a\x15za\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x15\xBDWa\x15\xB9a\x15\xA8a\x15\xA26`\x04a\n'V[\x90a6\x7FV[a\x15\xB0a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x15\xD6\x90a\x15\xC2V[\x90RV[\x91\x90a\x15\xED\x90_` \x85\x01\x94\x01\x90a\x15\xCDV[V[4a\x16\x1FWa\x15\xFF6`\x04a\x076V[a\x16\x1Ba\x16\na6\xADV[a\x16\x12a\x04BV[\x91\x82\x91\x82a\x15\xDAV[\x03\x90\xF3[a\x04HV[4a\x16TWa\x16Pa\x16?a\x16:6`\x04a\x06\xABV[a6\xC1V[a\x16Ga\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x16\x89Wa\x16i6`\x04a\x076V[a\x16\x85a\x16ta7\xD7V[a\x16|a\x04BV[\x91\x82\x91\x82a\x07\x98V[\x03\x90\xF3[a\x04HV[4a\x16\xBEWa\x16\xBAa\x16\xA9a\x16\xA46`\x04a\x06\xABV[a7\xEDV[a\x16\xB1a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90V[a\x16\xDAa\x16\xD5a\x16\xDF\x92a\x16\xC3V[a\x04\xDDV[a\x04\x8AV[\x90V[a\x16\xF7k\x02\xF9\x01\x93\xEF0u\xFA\x98\0\0\0a\x16\xC6V[\x90V[a\x17\x02a\x16\xE2V[\x90V[4a\x175Wa\x17\x156`\x04a\x076V[a\x171a\x17 a\x16\xFAV[a\x17(a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90V[_\x1B\x90V[a\x17Va\x17Qa\x17[\x92a\x17:V[a\x17=V[a\x08\xF4V[\x90V[a\x17g_a\x17BV[\x90V[a\x17ra\x17^V[\x90V[4a\x17\xA5Wa\x17\x856`\x04a\x076V[a\x17\xA1a\x17\x90a\x17jV[a\x17\x98a\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x17\xDBWa\x17\xD7a\x17\xC6a\x17\xC06`\x04a\x04\xB0V[\x90a8\x1CV[a\x17\xCEa\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[a\x17\xEC`\x0C_\x90a\x05{V[\x90V[4a\x18\x1FWa\x17\xFF6`\x04a\x076V[a\x18\x1Ba\x18\na\x17\xE0V[a\x18\x12a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x18UWa\x18Qa\x18@a\x18:6`\x04a\x04\xB0V[\x90a8>V[a\x18Ha\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x7F\x82\x03r\xA9\xFA\xF8-\xB3\xCC_\xC3o\xFA\xB5\xF0\x96\xEE\xF6\x9B\x95\xFB\xF5\x05\x91\xE0\xD7\x14G\xAA\x1B\xA7\0\x90V[a\x18\x86a\x18ZV[\x90V[4a\x18\xB9Wa\x18\x996`\x04a\x076V[a\x18\xB5a\x18\xA4a\x18~V[a\x18\xACa\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x18\xEEWa\x18\xEAa\x18\xD9a\x18\xD46`\x04a\x06\xABV[a8TV[a\x18\xE1a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x19#Wa\x19\x036`\x04a\x076V[a\x19\x1Fa\x19\x0Ea8iV[a\x19\x16a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[a\x191\x81a\n\xBDV[\x03a\x198WV[_\x80\xFD[\x90P5\x90a\x19I\x82a\x19(V[V[\x90\x91`\xC0\x82\x84\x03\x12a\x19\xAAWa\x19c\x83_\x84\x01a\x04{V[\x92a\x19q\x81` \x85\x01a\x04\xA1V[\x92a\x19\x7F\x82`@\x83\x01a\x04\xA1V[\x92a\x19\xA7a\x19\x90\x84``\x85\x01a\x19<V[\x93a\x19\x9E\x81`\x80\x86\x01a\t\x0BV[\x93`\xA0\x01a\t\x0BV[\x90V[a\x04LV[4a\x19\xE4Wa\x19\xCEa\x19\xC26`\x04a\x19KV[\x94\x93\x90\x93\x92\x91\x92a8\xE9V[a\x19\xD6a\x04BV[\x80a\x19\xE0\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[a\x19\xF2\x90a\x06OV[\x90RV[\x90`@\x80a\x1A*\x93a\x1A\x0E_\x82\x01Q_\x86\x01\x90a\x12\xF3V[a\x1A ` \x82\x01Q` \x86\x01\x90a\x12\xF3V[\x01Q\x91\x01\x90a\x19\xE9V[V[\x91\x90a\x1A?\x90_``\x85\x01\x94\x01\x90a\x19\xF6V[V[4a\x1AqWa\x1Ama\x1A\\a\x1AW6`\x04a\x06\xABV[a9\xE0V[a\x1Ada\x04BV[\x91\x82\x91\x82a\x1A,V[\x03\x90\xF3[a\x04HV[a\x1A\x7F\x81a\x06OV[\x03a\x1A\x86WV[_\x80\xFD[\x90P5\x90a\x1A\x97\x82a\x1AvV[V[\x91\x90`@\x83\x82\x03\x12a\x1A\xC1W\x80a\x1A\xB5a\x1A\xBE\x92_\x86\x01a\x04{V[\x93` \x01a\x1A\x8AV[\x90V[a\x04LV[4a\x1A\xF5Wa\x1A\xDFa\x1A\xD96`\x04a\x1A\x99V[\x90a:\xF3V[a\x1A\xE7a\x04BV[\x80a\x1A\xF1\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[`\xE0\x81\x83\x03\x12a\x1BeWa\x1B\x10\x82_\x83\x01a\x04{V[\x92a\x1B\x1E\x83` \x84\x01a\x04{V[\x92a\x1B,\x81`@\x85\x01a\x04\xA1V[\x92a\x1B:\x82``\x83\x01a\x04\xA1V[\x92a\x1Bba\x1BK\x84`\x80\x85\x01a\x19<V[\x93a\x1BY\x81`\xA0\x86\x01a\t\x0BV[\x93`\xC0\x01a\t\x0BV[\x90V[a\x04LV[4a\x1B\x9FWa\x1B\x89a\x1B}6`\x04a\x1A\xFAV[\x95\x94\x90\x94\x93\x91\x93a;\xA1V[a\x1B\x91a\x04BV[\x80a\x1B\x9B\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x1B\xD3Wa\x1B\xBDa\x1B\xB76`\x04a\n'V[\x90a<\xBFV[a\x1B\xC5a\x04BV[\x80a\x1B\xCF\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x91\x90`@\x83\x82\x03\x12a\x1C\0W\x80a\x1B\xF4a\x1B\xFD\x92_\x86\x01a\x04{V[\x93` \x01a\x04{V[\x90V[a\x04LV[4a\x1C6Wa\x1C2a\x1C!a\x1C\x1B6`\x04a\x1B\xD8V[\x90a<\xE1V[a\x1C)a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[a\x1CD\x81a\x0F\xCDV[\x03a\x1CKWV[_\x80\xFD[\x90P5\x90a\x1C\\\x82a\x1C;V[V[\x91\x90`@\x83\x82\x03\x12a\x1C\x86W\x80a\x1Cza\x1C\x83\x92_\x86\x01a\x04{V[\x93` \x01a\x1COV[\x90V[a\x04LV[a\x1C\x94\x90a\x15\xC2V[\x90RV[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x1C\xAC\x90a\x1C\x98V[\x90RV[\x90` \x80a\x1C\xD2\x93a\x1C\xC8_\x82\x01Q_\x86\x01\x90a\x1C\x8BV[\x01Q\x91\x01\x90a\x1C\xA3V[V[\x91\x90a\x1C\xE7\x90_`@\x85\x01\x94\x01\x90a\x1C\xB0V[V[4a\x1D\x1AWa\x1D\x16a\x1D\x05a\x1C\xFF6`\x04a\x1C^V[\x90a=OV[a\x1D\ra\x04BV[\x91\x82\x91\x82a\x1C\xD4V[\x03\x90\xF3[a\x04HV[\x7F\xCC\xE2\x96\xB0@3*\x08\x0Em\xF15\x15\xA3\xEC(i\xE2\x1C\xD2\x0FsD\xAF\t\x87\xDD\xB98\xD8\xBD!\x90V[a\x1DKa\x1D\x1FV[\x90V[4a\x1D~Wa\x1D^6`\x04a\x076V[a\x1Dza\x1Dia\x1DCV[a\x1Dqa\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[_\x80\xFD[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x1D\xABa\x1D\xB1\x91a\x1C\x98V[\x91a\x1C\x98V[\x01\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1D\xC2WV[a\x1D\x8BV[\x90a\x1D\xDA\x91a\x1D\xD4a\x1D\x87V[Pa\x1D\x9FV[\x90V[a\x1D\xE9a\x1D\xEF\x91a\x1C\x98V[\x91a\x1C\x98V[\x90\x03\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1E\x01WV[a\x1D\x8BV[\x90a\x1E\x19\x91a\x1E\x13a\x1D\x87V[Pa\x1D\xDDV[\x90V[_\x90V[a\x1E(a\x1E\x1CV[P\x80a\x1ECa\x1E=c\x0C\xCC\xC6e`\xE2\x1Ba\x06\x02V[\x91a\x06\x02V[\x14\x80\x15a\x1EgW[\x90\x81\x15a\x1EWW[P\x90V[a\x1Ea\x91Pa=eV[_a\x1ESV[P\x80a\x1E\x82a\x1E|c\xB2u*\xC9`\xE0\x1Ba\x06\x02V[\x91a\x06\x02V[\x14a\x1EKV[a\x1E\xA1\x90a\x1E\x9Ca\x1E\x97a\x1D\x1FV[a=\xA5V[a\x1F\x7FV[V[a\x1E\xB7a\x1E\xB2a\x1E\xBC\x92a\x17:V[a\x04\xDDV[a\x04PV[\x90V[a\x1E\xC8\x90a\x1E\xA3V[\x90V[\x90V[\x1B\x90V[\x91\x90`\x08a\x1E\xED\x91\x02\x91a\x1E\xE7_\x19\x84a\x1E\xCEV[\x92a\x1E\xCEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x1F\x10a\x1F\x0Ba\x1F\x18\x93a\x05*V[a\x1E\xF7V[\x90\x83Ta\x1E\xD2V[\x90UV[_\x90V[a\x1F2\x91a\x1F,a\x1F\x1CV[\x91a\x1E\xFAV[V[`\x02_\x91a\x1FD\x83\x80\x83\x01a\x1F V[a\x1FQ\x83`\x01\x83\x01a\x1F V[\x01UV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x1FzWa\x1Fx\x90a\x1F4V[V[a\x1FUV[\x80a\x1F\x9Aa\x1F\x94a\x1F\x8F_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a 6Wa\x1F\xBCa\x1F\xB6a\x1F\xAF`\x0Ea\x1E\xCBV[\x83\x90a>\0V[\x15a\x06OV[a \x17Wa\x1F\xD5_a\x1F\xD0`\r\x84\x90a\x0B\xEDV[a\x1FhV[a\x1F\xFF\x7F]\x9DP4el\xB3\xEB\xFB\x06U\x05|\xD7\xF9\xB4\x07z\x9BB\xFFB\xCE\"<\xBA\xC5\xBCXm!&\x91a\x05\x08V[\x90a \x08a\x04BV[\x80a \x12\x81a\x06\xC9V[\x03\x90\xA2V[a 2\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a N`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[a [\x90a\x1E\x88V[V[a ta y\x91a la\x1F\x1CV[P`\x10a\t\x8FV[a\x0C\x1CV[\x90V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a \xB5W[` \x83\x10\x14a \xB0WV[a \x81V[\x91`\x7F\x16\x91a \xA5V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a \xEBa \xE4\x83a \x95V[\x80\x94a \xBFV[\x91`\x01\x81\x16\x90\x81_\x14a!BWP`\x01\x14a!\x06W[PPPV[a!\x13\x91\x92\x93\x94Pa \xC8V[\x91_\x92[\x81\x84\x10a!*WPP\x01\x90_\x80\x80a!\x01V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a!\x17V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a!\x01V[\x90a!g\x91a \xD1V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a!\x88\x90a\x07]V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a!\xA2W`@RV[a!jV[\x90a!\xC7a!\xC0\x92a!\xB7a\x04BV[\x93\x84\x80\x92a!]V[\x03\x83a!~V[V[a!\xD2\x90a!\xA7V[\x90V[a!\xDDa |V[Pa!\xE8`\x03a!\xC9V[\x90V[a\"\x08\x91a!\xF7a\x1E\x1CV[Pa\"\0a>:V[\x91\x90\x91a>GV[`\x01\x90V[a\"\x15a\x1F\x1CV[Pa\" `\x02a\x0C\x1CV[\x90V[a\"7a\"2a\"<\x92a\x17:V[a\x04\xDDV[a\x04\x8AV[\x90V[a\"Na\"T\x91\x93\x92\x93a\x04\x8AV[\x92a\x04\x8AV[\x82\x01\x80\x92\x11a\"_WV[a\x1D\x8BV[\x80a\"\x7Fa\"ya\"t_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a#\xC3W\x81a\"\x97a\"\x91_a\"#V[\x91a\x04\x8AV[\x14a#\xA7Wa\"\xAEa\"\xA7a\"\rV[\x83\x90a\"?V[a\"\xC7a\"\xC1a\"\xBCa\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a#\x8BWa\"\xD73\x83\x90a>\x8CV[a\"\xE23\x83\x90a@\x82V[a\"\xEAa3\xD3V[\x80a#jW[a#NWa\"\xFF\x81\x83\x90aA6V[3\x90a#Ia#7a#1\x7F\xDE\"\xBA\xFF\x03\x8E:>\x08@|\xBD\xF6\x17\xDE\xEDt\xE8i\xA7\xBAQ}\xF6\x11\xE311\xC6\xE6\xEA\x04\x93a\x05\x08V[\x93a\x05\x08V[\x93a#@a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[_c6\xE2x\xFD`\xE2\x1B\x81R\x80a#f`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[Pa#\x86a#\x80a#ya\x14\x18V[3\x90a6\x7FV[\x15a\x06OV[a\"\xF0V[_c\x17~?\xC3`\xE0\x1B\x81R\x80a#\xA3`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a#\xBF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a#\xDB`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x91a$\t\x92a#\xECa\x1E\x1CV[Pa$\x01a#\xF8a>:V[\x82\x90\x84\x91aA\xA2V[\x91\x90\x91aB.V[`\x01\x90V[_\x90V[a$\x1B\x90a\x08\xF4V[\x90V[\x90a$(\x90a$\x12V[_R` R`@_ \x90V[\x90V[a$Ca$H\x91a\x0C\x03V[a$4V[\x90V[a$U\x90Ta$7V[\x90V[`\x01a$qa$w\x92a$ia$\x0EV[P`\x05a$\x1EV[\x01a$KV[\x90V[\x80a$\x95a$\x8Fa$\x8A_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a%]W\x81a$\xADa$\xA7_a\"#V[\x91a\x04\x8AV[\x14a%AWa$\xBD3\x83\x90aB\xCBV[3a$\xD0a$\xCA\x83a\x04[V[\x91a\x04[V[\x03a%0W[a$\xE1\x81\x83\x90aD\xC4V[3\x90a%+a%\x19a%\x13\x7F\xB9\x07\x95\xA6fP\x15Y\x83\xE2B\xCA\xC3\xE1\xAC\x1AM\xC2o\x8E\xD2\x98\x7F<\xE4\x16\xA3N\0\x11\x1F\xD4\x93a\x05\x08V[\x93a\x05\x08V[\x93a%\"a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[a%<\x813\x84\x91aA\xA2V[a$\xD6V[_c\x1F* \x05`\xE0\x1B\x81R\x80a%Y`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a%u`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a%\x94\x91a%\x8Fa%\x8A\x82a$XV[a=\xA5V[a%\x96V[V[\x90a%\xA0\x91aE#V[PV[\x90a%\xAD\x91a%yV[V[\x90a%\xB9\x90a\x04\x8AV[\x90RV[\x90a%\xC7\x90a\x06OV[\x90RV[\x90a%\xDEa%\xD7a\x04BV[\x92\x83a!~V[V[a%\xEA``a%\xCBV[\x90V[\x90a&<a&3`\x02a%\xFEa%\xE0V[\x94a&\x15a&\r_\x83\x01a\x0C\x1CV[_\x88\x01a%\xAFV[a&-a&$`\x01\x83\x01a\x0C\x1CV[` \x88\x01a%\xAFV[\x01a\x0CCV[`@\x84\x01a%\xBDV[V[a&G\x90a%\xEDV[\x90V[\x90V[a&aa&\\a&f\x92a&JV[a\x04\xDDV[a\x04\x8AV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a&\x89a&\x8F\x91a\x04\x8AV[\x91a\x04\x8AV[\x90\x81\x15a&\x9AW\x04\x90V[a&iV[`\x01a&\xAB\x91\x01a\x04\x8AV[\x90V[\x90V[a&\xC5a&\xC0a&\xCA\x92a&\xAEV[a\x04\xDDV[a\x04\x8AV[\x90V[a&\xDCa&\xE2\x91\x93\x92\x93a\x04\x8AV[\x92a\x04\x8AV[\x82\x03\x91\x82\x11a&\xEDWV[a\x1D\x8BV[a&\xFC\x90Qa\x04\x8AV[\x90V[a'\x07a\x1F\x1CV[Pa'\x1Ca'\x17`\r\x83\x90a\x0B\xEDV[a&>V[\x90a'2Ba',a\x0E\x10a&MV[\x90a&}V[a';_a\"#V[\x90a'E_a\"#V[[\x80a'Za'T`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15a'\xC6W\x81a'sa'm\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a'\x88W[a'\x83\x90a&\x9FV[a'FV[\x91a'\xBEa'\x83\x91a'\xB8a'\xB3a'\xA2`\x12\x89\x90a\x05\x14V[a'\xAD\x87\x89\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x92\x90Pa'zV[PP\x90Pa'\xD6` \x83\x01a&\xF2V[a'\xE8a'\xE2\x83a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14a(\x07Wa'\xFE` a(\x03\x93\x01a&\xF2V[a&\xCDV[[\x90V[PPa(\x12_a\"#V[a(\x04V[_\x90V[\x90V[a(2a(-a(7\x92a(\x1BV[a\x04\xDDV[a\n\xBDV[\x90V[a(Ba(\x17V[Pa(M`\x12a(\x1EV[\x90V[a(Xa$\x0EV[Pa(aaE\xCFV[\x90V[\x90\x80a(\x7Fa(ya(ta>:V[a\x04[V[\x91a\x04[V[\x03a(\x90Wa(\x8D\x91aF\x89V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a(\xA8`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a(\xB6\x90a\x05\x08V[_R` R`@_ \x90V[\x90V[a(\xD9a(\xD4a(\xDE\x92a\x1C\x98V[a\x04\xDDV[a\x04\x8AV[\x90V[a)\x18\x91a)\ra)\x07a)\x02a)\x13\x94a(\xFAa\x1F\x1CV[P`\na(\xACV[a(\xC2V[\x91aGjV[\x90aH\x7FV[a(\xC5V[\x90V[\x90a)5\x91a)0a)+a\x14|V[a=\xA5V[a)7V[V[\x90\x81a)Sa)Ma)H_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a)\xE3W\x80a)ka)e_a\"#V[\x91a\x04\x8AV[\x14a)\xC7Wa)\x82a){a\"\rV[\x82\x90a\"?V[a)\x9Ba)\x95a)\x90a\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a)\xABWa)\xA9\x91aA6V[V[_c\x17~?\xC3`\xE0\x1B\x81R\x80a)\xC3`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a)\xDF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a)\xFB`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a*\t\x91a)\x1BV[V[\x80a*\x1Ea*\x18_a\"#V[\x91a\x04\x8AV[\x14a*/Wa*-\x903aD\xC4V[V[_c\x1F* \x05`\xE0\x1B\x81R\x80a*G`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a*iWa*e` \x91a\x07]V[\x01\x90V[a!jV[\x90a*\x80a*{\x83a*KV[a%\xCBV[\x91\x82RV[_\x7Fmode=blocknumber&from=default\0\0\0\x91\x01RV[a*\xB6`\x1Da*nV[\x90a*\xC3` \x83\x01a*\x85V[V[a*\xCDa*\xACV[\x90V[a*\xD8a |V[Pa*\xE1a6\xADV[a*\xFAa*\xF4a*\xEFaI\xA6V[a\x15\xC2V[\x91a\x15\xC2V[\x03a+\nWa+\x07a*\xC5V[\x90V[_c\x01\xBF\xC1\xC5`\xE6\x1B\x81R\x80a+\"`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_\x90V[\x90a+4\x90a\x05\x08V[_R` R`@_ \x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a+Wa+\\\x91a\x0C\x03V[a+@V[\x90V[a+i\x90Ta+KV[\x90V[a+\x83a+\x88\x91a+{a+&V[P`\ta+*V[a+_V[\x90V[\x90a+\xA5\x91a+\xA0a+\x9Ba\x18ZV[a=\xA5V[a+\xDDV[V[\x90a+\xB3_\x19\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a+\xD2a+\xCDa+\xD9\x92a\x05*V[a\x1E\xF7V[\x82Ta+\xA7V[\x90UV[\x80a+\xF8a+\xF2a+\xED_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a,\xDDW\x81a,\x10a,\n_a\"#V[\x91a\x04\x8AV[\x14a,\xC1Wa,2a,,a,%`\x0Ea\x1E\xCBV[\x83\x90aI\xBBV[\x15a\x06OV[a,\xA2Wa,^\x82a,Xa,I`\x10\x85\x90a\t\x8FV[\x91a,S\x83a\x0C\x1CV[a\"?V[\x90a+\xBDV[a,\x9Da,\x8B\x7F\x9C\xA0=\xBDQ\x93\xFB\xB7\x97As\xCE\xDD\x0B\xDFhA\xDD\x14\xC3\xCB\xFAsZ\xABw\xFF\x1D\xD1\x13\x9F\xB3\x92a\x05\x08V[\x92a,\x94a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA2V[a,\xBD\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a,\xD9`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a,\xF5`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a-\x03\x91a+\x8BV[V[` \x7Fout of bounds\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSyndicateTokenCrosschain: index _\x82\x01R\x01RV[a-_`-`@\x92a\x07IV[a-h\x81a-\x05V[\x01\x90V[a-\x81\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra-RV[\x90V[\x15a-\x8BWV[a-\x93a\x04BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a-\xA9`\x04\x82\x01a-lV[\x03\x90\xFD[a-\xF6\x90a-\xB9a+&V[Pa-\xE7\x81a-\xE1a-\xDBa-\xD6a-\xD1`\x0Ea\x1E\xCBV[aI\xF5V[a\x04\x8AV[\x91a\x04\x8AV[\x10a-\x84V[a-\xF1`\x0Ea\x1E\xCBV[aJDV[\x90V[a.\n\x90a.\x05a>:V[aJ\xBAV[V[\x90a.'\x92\x91a.\"a.\x1Da\x1D\x1FV[a=\xA5V[a/\x03V[V[\x91` a.J\x92\x94\x93a.C`@\x82\x01\x96_\x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[a.V``a%\xCBV[\x90V[a.c\x90Qa\x06OV[\x90V[\x90a.r`\xFF\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a.\x85\x90a\x06OV[\x90V[\x90V[\x90a.\xA0a.\x9Ba.\xA7\x92a.|V[a.\x88V[\x82Ta.fV[\x90UV[\x90a.\xEF`@`\x02a.\xF5\x94a.\xCE_\x82\x01a.\xC8_\x88\x01a&\xF2V[\x90a+\xBDV[a.\xE7`\x01\x82\x01a.\xE1` \x88\x01a&\xF2V[\x90a+\xBDV[\x01\x92\x01a.YV[\x90a.\x8BV[V[\x90a/\x01\x91a.\xABV[V[\x80a/\x1Ea/\x18a/\x13_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a14W\x80a/6a/03a\x04[V[\x91a\x04[V[\x14a1\x18W\x80;a/Oa/I_a\"#V[\x91a\x04\x8AV[\x14a0\xFCW\x81a/ha/b_\x19a\x04\x8AV[\x91a\x04\x8AV[\x14\x15\x80a0\xDBW[a0\xBFW\x82a/\x88a/\x82_\x19a\x04\x8AV[\x91a\x04\x8AV[\x14\x15\x80a0\x9EW[a0\x83Wa/\xA8a/\xA1`\x0Ea\x1E\xCBV[\x82\x90aKEV[a08W[a/\xF2\x82a/\xE1\x85a/\xD8`\x01\x91a/\xCFa/\xC6a.LV[\x95_\x87\x01a%\xAFV[` \x85\x01a%\xAFV[`@\x83\x01a%\xBDV[a/\xED`\r\x84\x90a\x0B\xEDV[a.\xF7V[\x90\x91a0\x1E\x7F\xAA\x80}\n\xBF0\xD9\x19h\xC7G\x8Cf\xB6\xD8%!\xA1\x06\xAF\x13\xED\xA06\xE2\x03m\xA9\xAF\x16\x89X\x92a\x05\x08V[\x92a03a0*a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2V[\x80\x82\x90\x84a0f\x7F\xDB\x03\xF9}\xC5\x84\nq\xE6\x9B\xE7G\x0EGa\xAF\x10\xA1#ys\xE8\x1C\x12\xD0\xDC(\x13\x89Ze&\x92a\x05\x08V[\x92a0{a0ra\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2a/\xADV[_bX\xCC\xAD`\xE8\x1B\x81R\x80a0\x9A`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[P\x82a0\xB9a0\xB3a0\xAEa\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a/\x90V[_c\n9\\\x01`\xE0\x1B\x81R\x80a0\xD7`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[P\x81a0\xF6a0\xF0a0\xEBa\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a/pV[_cA*\x18\xED`\xE1\x1B\x81R\x80a1\x14`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xFB\x8C\xE8\xC9`\xE0\x1B\x81R\x80a10`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a1L`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a1[\x92\x91a.\x0CV[V[a1ea\x1F\x1CV[Pa1xa1s`\x0Ea\x1E\xCBV[aI\xF5V[\x90V[_\x90V[a1\x91\x90a1\x8Ba1{V[PaK\x7FV[\x90V[a1\xAAa1\xAF\x91a1\xA3a\x1F\x1CV[P_a\t\x8FV[a\x0C\x1CV[\x90V[``\x90V[a1\xBFa1\xB2V[Pa1\xD2a1\xCD`\x0Ea\x1E\xCBV[aK\xAEV[\x90V[a1\xDDa\x1E\x1CV[Pa2\x05a1\xF5a1\xF0`\r\x84\x90a\x0B\xEDV[a&>V[\x91a2\0`\x0Ea\x1E\xCBV[aI\xBBV[\x90\x81a2\x10W[P\x90V[a2\x1D\x91P`@\x01a.YV[_a2\x0CV[\x90a2=\x91a28a23a\x14\x18V[a=\xA5V[a2?V[V[\x80a2Za2Ta2O_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a3\x1EW\x81a2ra2l_a\"#V[\x91a\x04\x8AV[\x14a3\x02Wa2\x88a2\x82a3\xD3V[\x15a\x06OV[a2\xE6Wa2\x97\x81\x83\x90aD\xC4V[3\x90a2\xE1a2\xCFa2\xC9\x7F\xBE\xF4\xF8\x1C\x18\x14\xC6A\xED\xE8^\xBA\xAC\xF1\x9D\x04\x8B,[U\x98\n\xDF\xA6\xEF\x0F\x95le\x135\xA2\x93a\x05\x08V[\x93a\x05\x08V[\x93a2\xD8a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[_c\xB8\xB5\xCA-`\xE0\x1B\x81R\x80a2\xFE`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a3\x1A`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a36`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a3D\x91a2#V[V[a3Na\x1F\x1CV[Pa3Y`\x0Ca\x0C\x1CV[a3ka3e_a\"#V[\x91a\x04\x8AV[\x14\x80\x15a3\x9AW[a3\x8EWa3\x8Ba3\x84`\x0Ca\x0C\x1CV[B\x90a&\xCDV[\x90V[a3\x97_a\"#V[\x90V[PBa3\xB7a3\xB1a3\xAC`\x0Ca\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a3sV[a3\xD0\x90a3\xCAa\x1F\x1CV[PaK\xD6V[\x90V[a3\xDBa\x1E\x1CV[Pa3\xE6`\x0Ca\x0C\x1CV[a3\xF8a3\xF2_a\"#V[\x91a\x04\x8AV[\x14\x15\x80a4\x03W[\x90V[PBa4 a4\x1Aa4\x15`\x0Ca\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x10a4\0V[a4?\x90a4:a45a\x17^V[a=\xA5V[a4AV[V[\x80a4Ta4NBa\x04\x8AV[\x91a\x04\x8AV[\x11\x15a5\nW\x80a4\x8Da4\x87\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\x8AV[\x91a\x04\x8AV[\x11a4\xEEWa4\x9C`\x0Ca\x0C\x1CV[a4\xA7\x82`\x0Ca+\xBDV[\x903\x90a4\xD4\x7F\xDDh\x96\xDC\xF1\xD4\xB3\x11\xCC\xA8}\xD1\x9B\xBB\xA2\xEA\x9C\xE2\xF8g\xC1V\x88x\xA0C\x8Af\xA1\xAF\xEE\xEC\x92a\x05\x08V[\x92a4\xE9a4\xE0a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2V[_c\xEFi\xAFe`\xE0\x1B\x81R\x80a5\x06`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xA5e\x83S`\xE0\x1B\x81R\x80a5\"`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[a5/\x90a4&V[V[_\x90V[``\x90V[a5C\x90a\x04\xFCV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a5^W` \x80\x91\x02\x01\x90V[a!jV[\x90a5ua5p\x83a5FV[a%\xCBV[\x91\x82RV[6\x907V[\x90a5\xA4a5\x8C\x83a5cV[\x92` \x80a5\x9A\x86\x93a5FV[\x92\x01\x91\x03\x90a5zV[V[`\x0F`\xF8\x1B\x90V[a5\xB6a51V[Pa5\xBFa |V[Pa5\xC8a |V[Pa5\xD1a\x1F\x1CV[Pa5\xDAa+&V[Pa5\xE3a$\x0EV[Pa5\xECa55V[Pa5\xF5aK\xEEV[\x90a5\xFEaL.V[\x90F\x90a6\n0a5:V[\x90a6\x14_a\x17BV[\x90a6&a6!_a\"#V[a5\x7FV[\x90a6/a5\xA6V[\x96\x95\x94\x93\x92\x91\x90V[a6aa6f\x91a6Ga\x1F\x1CV[Pa6[a6U`\x0Ba(\xC2V[\x91aGjV[\x90aH\x7FV[a(\xC5V[\x90V[\x90a6s\x90a\x05\x08V[_R` R`@_ \x90V[a6\xA6\x91_a6\x9Ba6\xA1\x93a6\x93a\x1E\x1CV[P`\x05a$\x1EV[\x01a6iV[a\x0CCV[\x90V[_\x90V[a6\xB5a6\xA9V[Pa6\xBEaI\xA6V[\x90V[a6\xC9a\x1F\x1CV[Pa6\xDEa6\xD9`\r\x83\x90a\x0B\xEDV[a&>V[\x90a6\xF4Ba6\xEEa\x0E\x10a&MV[\x90a&}V[a6\xFD_a\"#V[\x90a7\x07_a\"#V[[\x80a7\x1Ca7\x16`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15a7\x88W\x81a75a7/\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a7JW[a7E\x90a&\x9FV[a7\x08V[\x91a7\x80a7E\x91a7za7ua7d`\x11\x89\x90a\x05\x14V[a7o\x87\x89\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x92\x90Pa7<V[PP\x90Pa7\x97_\x83\x01a&\xF2V[a7\xA9a7\xA3\x83a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14a7\xC7Wa7\xBE_a7\xC3\x93\x01a&\xF2V[a&\xCDV[[\x90V[PPa7\xD2_a\"#V[a7\xC4V[a7\xDFa |V[Pa7\xEA`\x04a!\xC9V[\x90V[a8\x14a8\x0Fa8\na8\x19\x93a8\x02a\x1F\x1CV[P`\na(\xACV[a(\xC2V[aLnV[a(\xC5V[\x90V[a89\x91a8(a\x1E\x1CV[Pa81a>:V[\x91\x90\x91aB.V[`\x01\x90V[\x90a8Q\x91a8Ka\x1F\x1CV[Pa(\xE1V[\x90V[a8f\x90a8`a\x1F\x1CV[Pa7\xEDV[\x90V[a8qa\x1F\x1CV[Pa8za\"\rV[\x90V[\x7F\xE4\x83)\x05{\xFD\x03\xD5^I\xB5G\x13.9\xCF\xFD\x9C\x18 \xAD{\x9DLS\x07i\x14%\xD1Z\xDF\x90V[a8\xD6a8\xDD\x94a8\xCC``\x94\x98\x97\x95a8\xC2`\x80\x86\x01\x9A_\x87\x01\x90a\t8V[` \x85\x01\x90a\r\xE0V[`@\x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[` \x01\x90V[Q\x90V[\x93\x95\x94\x90\x92\x91\x95Ba9\x03a8\xFD\x89a\x04\x8AV[\x91a\x04\x8AV[\x11a9|W\x91a9n\x91a9u\x93a9ea9z\x98\x99a9Ma9$a8}V[a9>\x8B\x93\x8Ba92a\x04BV[\x95\x86\x94` \x86\x01a8\xA1V[` \x82\x01\x81\x03\x82R\x03\x82a!~V[a9_a9Y\x82a8\xE5V[\x91a8\xDFV[ aL\xE3V[\x92\x90\x91\x92aM\0V[\x91\x82aMJV[aJ\xBAV[V[a9\x97\x87_\x91\x82\x91c#A\xD7\x87`\xE1\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[_\x90V[_\x90V[a9\xABa%\xE0V[\x90` \x80\x80\x84a9\xB9a9\x9BV[\x81R\x01a9\xC4a9\x9BV[\x81R\x01a9\xCFa9\x9FV[\x81RPPV[a9\xDDa9\xA3V[\x90V[a9\xF7a9\xFC\x91a9\xEFa9\xD5V[P`\ra\x0B\xEDV[a&>V[\x90V[\x90a:\x19\x91a:\x14a:\x0Fa\x1D\x1FV[a=\xA5V[a:\x1BV[V[\x80a:6a:0a:+_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a:\xD7Wa:Xa:Ra:K`\x0Ea\x1E\xCBV[\x83\x90aI\xBBV[\x15a\x06OV[a:\xB8Wa:t\x82`\x02a:n`\r\x85\x90a\x0B\xEDV[\x01a.\x8BV[a:\xB3a:\xA1\x7F\x9C\x86h\xDB2HE\x06]+\x9A*\x18;\xD3\x14\x1Fc\x01\x8FT\x82\x82\xDA\xF1\x8D\xA4\x9C\xCB\xF8\x8C3\x92a\x05\x08V[\x92a:\xAAa\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xA2V[a:\xD3\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a:\xEF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a:\xFD\x91a9\xFFV[V[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x90V[\x91\x94a;ka;u\x92\x98\x97\x95a;a`\xA0\x96a;Wa;|\x9Aa;M`\xC0\x8A\x01\x9E_\x8B\x01\x90a\t8V[` \x89\x01\x90a\r\xE0V[`@\x87\x01\x90a\r\xE0V[``\x85\x01\x90a\x05\xAAV[`\x80\x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[\x91` a;\x9F\x92\x94\x93a;\x98`@\x82\x01\x96_\x83\x01\x90a\r\xE0V[\x01\x90a\r\xE0V[V[\x96\x95\x91\x93\x92\x94\x90\x94Ba;\xBCa;\xB6\x83a\x04\x8AV[\x91a\x04\x8AV[\x11a<vW\x90a<%a<.\x94\x93\x92a<\ra;\xD6a:\xFFV[a;\xFE\x8C\x80\x94\x8C\x91a;\xE8\x8D\x91aM\x8DV[\x91\x92a;\xF2a\x04BV[\x97\x88\x96` \x88\x01a;#V[` \x82\x01\x81\x03\x82R\x03\x82a!~V[a<\x1Fa<\x19\x82a8\xE5V[\x91a8\xDFV[ aL\xE3V[\x92\x90\x91\x92aM\0V[\x80a<Aa<;\x87a\x04[V[\x91a\x04[V[\x03a<VWPa<T\x92\x93\x91\x90\x91a>GV[V[\x84\x90a<r_\x92\x83\x92c%\xC0\x07#`\xE1\x1B\x84R`\x04\x84\x01a;~V[\x03\x90\xFD[a<\x91\x90_\x91\x82\x91c1<\x89\x81`\xE1\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[\x90a<\xB0\x91a<\xABa<\xA6\x82a$XV[a=\xA5V[a<\xB2V[V[\x90a<\xBC\x91aF\x89V[PV[\x90a<\xC9\x91a<\x95V[V[\x90a<\xD5\x90a\x05\x08V[_R` R`@_ \x90V[a=\x06\x91a<\xFCa=\x01\x92a<\xF4a\x1F\x1CV[P`\x01a<\xCBV[a\t\x8FV[a\x0C\x1CV[\x90V[a=\x13`@a%\xCBV[\x90V[_\x90V[_\x90V[a=&a=\tV[\x90` \x80\x83a=3a=\x16V[\x81R\x01a=>a=\x1AV[\x81RPPV[a=La=\x1EV[\x90V[\x90a=b\x91a=\\a=DV[PaM\xC0V[\x90V[a=ma\x1E\x1CV[P\x80a=\x88a=\x82cye\xDB\x0B`\xE0\x1Ba\x06\x02V[\x91a\x06\x02V[\x14\x90\x81\x15a=\x95W[P\x90V[a=\x9F\x91PaM\xE8V[_a=\x91V[a=\xB7\x90a=\xB1a>:V[\x90aN1V[V[a=\xC2\x90a\x04\xE0V[\x90V[a=\xD9a=\xD4a=\xDE\x92a\x04PV[a\x04\xDDV[a\x04\x8AV[\x90V[a=\xF5a=\xF0a=\xFA\x92a\x04\x8AV[a\x17=V[a\x08\xF4V[\x90V[\x90V[\x90a>2a>,a>'a>\"_a>7\x96a>\x1Aa\x1E\x1CV[P\x01\x94a=\xB9V[a=\xC5V[a=\xE1V[\x91a=\xFDV[aO\xAEV[\x90V[a>Ba+&V[P3\x90V[\x91a>U\x92\x91`\x01\x92aP\xB4V[V[\x90V[`@\x90a>\x83a>\x8A\x94\x96\x95\x93\x96a>y``\x84\x01\x98_\x85\x01\x90a\r\xE0V[` \x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[a>\xA0a>\x9B`\r\x83\x90a\x0B\xEDV[a>WV[\x91a>\xBEa>\xB8a>\xB1`\x0Ea\x1E\xCBV[\x84\x90aI\xBBV[\x15a\x06OV[\x80\x15a@gW[a@HWa>\xDEBa>\xD8a\x0E\x10a&MV[\x90a&}V[a>\xE7_a\"#V[\x91a>\xF1_a\"#V[[\x80a?\x06a?\0`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15a?rW\x82a?\x1Fa?\x19\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a?4W[a?/\x90a&\x9FV[a>\xF2V[\x92a?ja?/\x91a?da?_a?N`\x11\x8A\x90a\x05\x14V[a?Y\x88\x8A\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x93\x90Pa?&V[P\x91\x90\x92\x93a?\x82\x82\x84\x90a\"?V[a?\x9Ea?\x98a?\x93_\x85\x01a\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x11a?\xD8WPPa?\xC1a?\xD6\x93\x92a?\xBCa?\xD0\x93\x94`\x11a\x05\x14V[a\x05FV[\x91a?\xCB\x83a\x0C\x1CV[a\"?V[\x90a+\xBDV[V[\x84\x93Pa?\xE6_\x82\x01a\x0C\x1CV[a?\xF8a?\xF2\x84a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14a@5Wa@1\x91a@\x11_a@\x16\x93\x01a\x0C\x1CV[a&\xCDV[[\x92\x91\x92_\x93\x84\x93c@\xED6{`\xE0\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[PPa@1a@C_a\"#V[a@\x17V[a@c\x82_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[Pa@}a@w`\x02\x85\x01a\x0CCV[\x15a\x06OV[a>\xC5V[a@\x96a@\x91`\x10\x83\x90a\t\x8FV[a\x0C\x1CV[a@\xA9a@\xA3\x84\x92a\x04\x8AV[\x91a\x04\x8AV[\x11aA\x1AWa@\xD6\x82a@\xD0a@\xC1`\x10\x85\x90a\t\x8FV[\x91a@\xCB\x83a\x0C\x1CV[a&\xCDV[\x90a+\xBDV[aA\x15aA\x03\x7F\xBC#\xEC\x7F\x13\x13\x15\x0B\x04{\xFF\x83\xD0\x84[\x05d\xBA\xA14i\x8D\xD1\x1B\xB0\xAC\xD0\xF7\xD4\x16\xDE}\x92a\x05\x08V[\x92aA\x0Ca\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA2V[_c\x1E\xB7\x84W`\xE2\x1B\x81R\x80aA2`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x80aAQaAKaAF_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aAmWaAk\x91aAc_a\x1E\xBFV[\x91\x90\x91aQ\xC3V[V[aA\x90aAy_a\x1E\xBFV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[\x90aA\x9F\x91\x03a\x04\x8AV[\x90V[\x92\x91\x92aA\xB0\x81\x83\x90a<\xE1V[\x90\x81aA\xC5aA\xBF_\x19a\x04\x8AV[\x91a\x04\x8AV[\x10aA\xD2W[PPP\x90PV[\x81aA\xE5aA\xDF\x87a\x04\x8AV[\x91a\x04\x8AV[\x10aB\x0BWaB\x02\x93\x94aA\xFA\x91\x93\x92aA\x94V[\x90_\x92aP\xB4V[\x80_\x80\x80aA\xCBV[PaB*\x84\x92\x91\x92_\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[\x91\x82aBJaBDaB?_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aB\xA4W\x81aBjaBdaB__a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aB}WaB{\x92\x91\x90\x91aQ\xC3V[V[aB\xA0aB\x89_a\x1E\xBFV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aB\xC7aB\xB0_a\x1E\xBFV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aB\xDFaB\xDA`\r\x83\x90a\x0B\xEDV[a>WV[\x91aB\xFDaB\xF7aB\xF0`\x0Ea\x1E\xCBV[\x84\x90aI\xBBV[\x15a\x06OV[\x80\x15aD\xA9W[aD\x8AWaC\x1DBaC\x17a\x0E\x10a&MV[\x90a&}V[aC&_a\"#V[\x91aC0_a\"#V[[\x80aCEaC?`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15aC\xB1W\x82aC^aCX\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15aCsW[aCn\x90a&\x9FV[aC1V[\x92aC\xA9aCn\x91aC\xA3aC\x9EaC\x8D`\x12\x8A\x90a\x05\x14V[aC\x98\x88\x8A\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x93\x90PaCeV[P\x91\x90\x92\x93aC\xC1\x82\x84\x90a\"?V[aC\xDEaC\xD8aC\xD3`\x01\x85\x01a\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x11aD\x18WPPaD\x01aD\x16\x93\x92aC\xFCaD\x10\x93\x94`\x12a\x05\x14V[a\x05FV[\x91aD\x0B\x83a\x0C\x1CV[a\"?V[\x90a+\xBDV[V[\x84\x93PaD'`\x01\x82\x01a\x0C\x1CV[aD9aD3\x84a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14aDwWaDs\x91aDS`\x01aDX\x93\x01a\x0C\x1CV[a&\xCDV[[\x92\x91\x92_\x93\x84\x93cr\xFFK\xD1`\xE1\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[PPaDsaD\x85_a\"#V[aDYV[aD\xA5\x82_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[PaD\xBFaD\xB9`\x02\x85\x01a\x0CCV[\x15a\x06OV[aC\x04V[\x90\x81aD\xE0aD\xDAaD\xD5_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aD\xFCWaD\xFA\x91\x90aD\xF3_a\x1E\xBFV[\x90\x91aQ\xC3V[V[aE\x1FaE\x08_a\x1E\xBFV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aE+a\x1E\x1CV[PaE@aE:\x82\x84\x90a6\x7FV[\x15a\x06OV[_\x14aE\xC9WaEh`\x01aEc_aE[`\x05\x86\x90a$\x1EV[\x01\x85\x90a6iV[a.\x8BV[\x90aEqa>:V[\x90aE\xAEaE\xA8aE\xA2\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a$\x12V[\x92a\x05\x08V[\x92a\x05\x08V[\x92aE\xB7a\x04BV[\x80aE\xC1\x81a\x06\xC9V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aE\xD7a$\x0EV[PaE\xE10a5:V[aF\x13aF\r\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04[V[\x91a\x04[V[\x14\x80aFOW[_\x14aFDW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[aFLaR\xDEV[\x90V[PFaF\x83aF}\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\x8AV[\x91a\x04\x8AV[\x14aF\x1AV[aF\x91a\x1E\x1CV[PaF\x9D\x81\x83\x90a6\x7FV[_\x14aG%WaF\xC4_aF\xBF_aF\xB7`\x05\x86\x90a$\x1EV[\x01\x85\x90a6iV[a.\x8BV[\x90aF\xCDa>:V[\x90aG\naG\x04aF\xFE\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a$\x12V[\x92a\x05\x08V[\x92a\x05\x08V[\x92aG\x13a\x04BV[\x80aG\x1D\x81a\x06\xC9V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aG?aG:aGD\x92a\x15\xC2V[a\x04\xDDV[a\x04\x8AV[\x90V[\x91` aGh\x92\x94\x93aGa`@\x82\x01\x96_\x83\x01\x90a\x05\xAAV[\x01\x90a\x15\xCDV[V[aGra6\xA9V[PaG{a6\xADV[\x81aG\x8EaG\x88\x83aG+V[\x91a\x04\x8AV[\x10\x15aG\xA1WPaG\x9E\x90aS\xE7V[\x90V[\x90aG\xBC_\x92\x83\x92cvi\xFC\x0F`\xE1\x1B\x84R`\x04\x84\x01aGGV[\x03\x90\xFD[T\x90V[\x90V[aG\xDBaG\xD6aG\xE0\x92aG\xC4V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[aG\xFDaH\x02\x91a\x0C\x03V[aG\xE6V[\x90V[aH\x0F\x90TaG\xF1V[\x90V[\x90V[aH)aH$aH.\x92aH\x12V[a\x04\xDDV[a\x04\x8AV[\x90V[`0\x1C\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[aHNaHS\x91aH1V[aH7V[\x90V[aH`\x90TaHBV[\x90V[aHwaHraH|\x92a\x17:V[a\x04\xDDV[a\x1C\x98V[\x90V[\x90aH\xD3\x90aH\x8Ca\x1D\x87V[PaH\x98_\x84\x01aG\xC0V[aH\xA1_a\"#V[\x90\x80\x80aH\xB7aH\xB1`\x05aG\xC7V[\x91a\x04\x8AV[\x11aI4W[P\x90aH\xCE_\x86\x01\x93\x91\x92\x93aG\xE3V[aZ\"V[\x80aH\xE6aH\xE0_a\"#V[\x91a\x04\x8AV[\x14_\x14aH\xFCWPPaH\xF8_aHcV[[\x90V[aI)_\x91aI$aI\x1E\x84aI/\x96\x01\x92aI\x18`\x01aH\x15V[\x90a&\xCDV[\x91aG\xE3V[aZ\x18V[\x01aHVV[aH\xF9V[\x80aIBaIH\x92\x91aV\xADV[\x90a&\xCDV[\x90\x83aIzaItaIo_aIi\x81\x8C\x01aId\x89\x91aG\xE3V[aZ\x18V[\x01aH\x05V[a\x15\xC2V[\x91a\x15\xC2V[\x10_\x14aI\x8BWP\x90[\x90_aH\xBDV[\x91PaI\xA1\x90aI\x9B`\x01aH\x15V[\x90a\"?V[aI\x84V[aI\xAEa6\xA9V[PaI\xB8CaS\xE7V[\x90V[\x90aI\xEDaI\xE7aI\xE2aI\xDD_aI\xF2\x96aI\xD5a\x1E\x1CV[P\x01\x94a=\xB9V[a=\xC5V[a=\xE1V[\x91a=\xFDV[aZ\xB1V[\x90V[aJ\x0C_aJ\x11\x92aJ\x05a\x1F\x1CV[P\x01a=\xFDV[aZ\xE6V[\x90V[aJ aJ%\x91a\x0C\x03V[a\x05*V[\x90V[aJ<aJ7aJA\x92a\x04\x8AV[a\x04\xDDV[a\x04PV[\x90V[aJoaJjaJy\x93aJe_aJt\x95aJ^a+&V[P\x01a=\xFDV[aZ\xFDV[aJ\x14V[aJ(V[a\x04\xFCV[\x90V[\x90aJ\x8D`\x01\x80`\xA0\x1B\x03\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90aJ\xAFaJ\xAAaJ\xB6\x92a\x05\x08V[aJ\x97V[\x82TaJ|V[\x90UV[\x90aKC\x91aK=aJ\xCB\x82a+lV[aJ\xE0\x84aJ\xDB`\t\x86\x90a+*V[aJ\x9AV[\x82\x81\x85\x90aK aK\x1AaK\x14\x7F14\xE8\xA2\xE6\xD9~\x92\x9A~T\x01\x1E\xA5H]}\x19m\xD5\xF0\xBAMN\xF9X\x03\xE8\xE3\xFC%\x7F\x95a\x05\x08V[\x92a\x05\x08V[\x92a\x05\x08V[\x92aK)a\x04BV[\x80aK3\x81a\x06\xC9V[\x03\x90\xA4\x92\x91a[\x1EV[\x91a[6V[V[\x90aKwaKqaKlaKg_aK|\x96aK_a\x1E\x1CV[P\x01\x94a=\xB9V[a=\xC5V[a=\xE1V[\x91a=\xFDV[a]\x19V[\x90V[aK\xA6aK\xA1aK\x9CaK\xAB\x93aK\x94a1{V[P`\na(\xACV[a(\xC2V[a]|V[a]\xFBV[\x90V[aK\xC5_aK\xCA\x92aK\xBEa1\xB2V[P\x01a=\xFDV[a_\x1DV[aK\xD2a1\xB2V[P\x90V[aK\xE8\x90aK\xE2a\x1F\x1CV[Pa_4V[\x90V[\x90V[aK\xF6a |V[PaL+\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aL%`\x06aK\xEBV[\x90a`OV[\x90V[aL6a |V[PaLk\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aLe`\x07aK\xEBV[\x90a`OV[\x90V[aLva\x1D\x87V[PaL\x82_\x82\x01aG\xC0V[\x80aL\x95aL\x8F_a\"#V[\x91a\x04\x8AV[\x14_\x14aL\xABWPPaL\xA7_aHcV[[\x90V[aL\xD8_\x91aL\xD3aL\xCD\x84aL\xDE\x96\x01\x92aL\xC7`\x01aH\x15V[\x90a&\xCDV[\x91aG\xE3V[aZ\x18V[\x01aHVV[aL\xA8V[aL\xFD\x90aL\xEFa$\x0EV[PaL\xF8aE\xCFV[a`\x9DV[\x90V[\x92aM\x1B\x92aM$\x94aM\x11a+&V[P\x92\x90\x91\x92aaOV[\x90\x92\x91\x92abzV[\x90V[\x91` aMH\x92\x94\x93aMA`@\x82\x01\x96_\x83\x01\x90a\r\xE0V[\x01\x90a\x05\xAAV[V[aMS\x81aM\x8DV[\x91aMfaM`\x84a\x04\x8AV[\x91a\x04\x8AV[\x03aMoWPPV[aM\x89_\x92\x83\x92c\x01\xD4\xB6#`\xE6\x1B\x84R`\x04\x84\x01aM'V[\x03\x90\xFD[aM\xA1\x90aM\x99a\x1F\x1CV[P`\x08a\t\x8FV[aM\xBDaM\xAD\x82a\x0C\x1CV[\x91aM\xB7\x83a&\x9FV[\x90a+\xBDV[\x90V[\x90aM\xE0aM\xDBaM\xE5\x93aM\xD3a=DV[P`\na(\xACV[a(\xC2V[ac\xDCV[\x90V[aM\xF0a\x1E\x1CV[PaN\naN\x04c\x01\xFF\xC9\xA7`\xE0\x1Ba\x06\x02V[\x91a\x06\x02V[\x14\x90V[\x91` aN/\x92\x94\x93aN(`@\x82\x01\x96_\x83\x01\x90a\r\xE0V[\x01\x90a\t8V[V[\x90aNFaN@\x83\x83\x90a6\x7FV[\x15a\x06OV[aNNWPPV[aNh_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01aN\x0EV[\x03\x90\xFD[\x90aNv\x90a$\x12V[_R` R`@_ \x90V[T\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_R` _ \x90V[aN\xAC\x81aN\x82V[\x82\x10\x15aN\xC6WaN\xBE`\x01\x91aN\x9AV[\x91\x02\x01\x90_\x90V[aN\x86V[aN\xDB\x90`\x08aN\xE0\x93\x02a\x05\\V[a$4V[\x90V[\x90aN\xEE\x91TaN\xCBV[\x90V[aN\xFA\x90a\x0C\x03V[\x90V[\x91\x90aO\x13aO\x0EaO\x1B\x93a$\x12V[aN\xF1V[\x90\x83Ta\x1E\xD2V[\x90UV[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[T\x90V[_R` _ \x90V[aOL\x81aO6V[\x82\x10\x15aOfWaO^`\x01\x91aO:V[\x91\x02\x01\x90_\x90V[aN\x86V[aO}\x91aOwa$\x0EV[\x91aN\xFDV[V[aO\x88\x81aO6V[\x80\x15aO\xA9W`\x01\x90\x03\x90aO\xA6aO\xA0\x83\x83aOCV[\x90aOkV[UV[aO\"V[aO\xB6a\x1E\x1CV[PaO\xCDaO\xC8`\x01\x83\x01\x84\x90aNlV[a\x0C\x1CV[\x90\x81aO\xE1aO\xDB_a\"#V[\x91a\x04\x8AV[\x14\x15_\x14aP\xADWaP_\x92`\x01aPZ\x92\x84aP\x08_\x96aP\x02\x85aH\x15V[\x90a&\xCDV[aP%aP\x16\x88\x85\x01aN\x82V[aP\x1F\x86aH\x15V[\x90a&\xCDV[\x81aP8aP2\x83a\x04\x8AV[\x91a\x04\x8AV[\x03aPdW[PPPaPTaPO\x86\x83\x01aO\x1FV[aO\x7FV[\x01aNlV[a\x1F V[`\x01\x90V[aP\xA5\x92aP\x97aP\x83aP}aP\xA0\x94\x8C\x89\x01aN\xA3V[\x90aN\xE3V[\x93aP\x91\x85\x91\x8C\x89\x01aN\xA3V[\x90aN\xFDV[\x91\x85\x85\x01aNlV[a+\xBDV[_\x80\x80aP>V[PPP_\x90V[\x90\x92\x81aP\xD1aP\xCBaP\xC6_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aQ\x9CW\x83aP\xF1aP\xEBaP\xE6_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aQuWaQ\x15\x83aQ\x10aQ\t`\x01\x86\x90a<\xCBV[\x87\x90a\t\x8FV[a+\xBDV[aQ\x1FW[PPPV[\x91\x90\x91aQjaQXaQR\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x05\x08V[\x93a\x05\x08V[\x93aQaa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3_\x80\x80aQ\x1AV[aQ\x98aQ\x81_a\x1E\xBFV[_\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aQ\xBFaQ\xA8_a\x1E\xBFV[_\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[\x91\x82aQ\xDFaQ\xD9aQ\xD4_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14\x15\x80aRJW[aQ\xFAW[aQ\xF8\x92\x91\x90\x91ac\xFDV[V[aR\x02a3\xD3V[\x80aR)W[\x15aQ\xECW_c6\xE2x\xFD`\xE2\x1B\x81R\x80aR%`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[PaREaR?aR8a\x14\x18V[3\x90a6\x7FV[\x15a\x06OV[aR\x08V[P\x81aRfaR`aR[_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14\x15aQ\xE7V[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[\x90\x95\x94\x92aR\xDC\x94aR\xCBaR\xD5\x92aR\xC1`\x80\x96aR\xB7`\xA0\x88\x01\x9C_\x89\x01\x90a\t8V[` \x87\x01\x90a\t8V[`@\x85\x01\x90a\t8V[``\x83\x01\x90a\x05\xAAV[\x01\x90a\r\xE0V[V[aR\xE6a$\x0EV[PaR\xEFaRmV[aSf\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91aSW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0FaSB0a5:V[\x91aSKa\x04BV[\x96\x87\x95` \x87\x01aR\x91V[` \x82\x01\x81\x03\x82R\x03\x82a!~V[aSxaSr\x82a8\xE5V[\x91a8\xDFV[ \x90V[\x90V[aS\x93aS\x8EaS\x98\x92aS|V[a\x04\xDDV[a\n\xBDV[\x90V[aS\xA4\x90aS\x7FV[\x90RV[\x91` aS\xC9\x92\x94\x93aS\xC2`@\x82\x01\x96_\x83\x01\x90aS\x9BV[\x01\x90a\x05\xAAV[V[aS\xDFaS\xDAaS\xE4\x92a\x04\x8AV[a\x04\xDDV[a\x15\xC2V[\x90V[aS\xEFa6\xA9V[P\x80aT\taT\x03e\xFF\xFF\xFF\xFF\xFF\xFFaG+V[\x91a\x04\x8AV[\x11aT\x1AWaT\x17\x90aS\xCBV[\x90V[`0aT6_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01aS\xA8V[\x03\x90\xFD[\x90V[aTQaTLaTV\x92aT:V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aTpaTkaTu\x92aTYV[a\x04\xDDV[a\n\xBDV[\x90V[aT\x97\x90aT\x91aT\x8BaT\x9C\x94a\n\xBDV[\x91a\x04\x8AV[\x90a\x05\\V[a\x04\x8AV[\x90V[\x90V[aT\xB6aT\xB1aT\xBB\x92aT\x9FV[a\x04\xDDV[a\n\xBDV[\x90V[aT\xDD\x90aT\xD7aT\xD1aT\xE2\x94a\n\xBDV[\x91a\x04\x8AV[\x90a\x1E\xCEV[a\x04\x8AV[\x90V[\x90V[aT\xFCaT\xF7aU\x01\x92aT\xE5V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aU\x1BaU\x16aU \x92aU\x04V[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aU:aU5aU?\x92aU#V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aUYaUTaU^\x92aUBV[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aUxaUsaU}\x92aUaV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aU\x97aU\x92aU\x9C\x92aU\x80V[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aU\xB6aU\xB1aU\xBB\x92aU\x9FV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aU\xD5aU\xD0aU\xDA\x92aU\xBEV[a\x04\xDDV[a\n\xBDV[\x90V[aU\xF1aU\xECaU\xF6\x92aUBV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aV\x10aV\x0BaV\x15\x92aU\xF9V[a\x04\xDDV[a\n\xBDV[\x90V[aV,aV'aV1\x92aU\xBEV[a\x04\xDDV[a\x04\x8AV[\x90V[aVHaVCaVM\x92aH\x12V[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aVgaVbaVl\x92aVPV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90aVz\x91\x02a\x04\x8AV[\x90V[aV\x89aV\x8F\x91a\x04\x8AV[\x91a\x04\x8AV[\x90\x81\x15aV\x9AW\x04\x90V[a&iV[\x90aV\xAA\x91\x01a\x04\x8AV[\x90V[aV\xB5a\x1F\x1CV[P\x80aV\xCAaV\xC4`\x01aH\x15V[\x91a\x04\x8AV[\x11\x15aZ\x15W\x80aX\xDFaX\xBCaX\xACaX\x9CaX\x8CaX|aXlaX\\aXLaX<aX,\x8BaX&aX\x1FaX\xE5\x9FaW\xFFaW\xEFaX\x0F\x92aW\x11`\x01aH\x15V[\x90\x80aW)aW#`\x01`\x80\x1BaT=V[\x91a\x04\x8AV[\x10\x15aY\xE7W[\x80aWLaWFh\x01\0\0\0\0\0\0\0\0aT\xE8V[\x91a\x04\x8AV[\x10\x15aY\xB9W[\x80aWkaWed\x01\0\0\0\0aU&V[\x91a\x04\x8AV[\x10\x15aY\x8BW[\x80aW\x88aW\x82b\x01\0\0aUdV[\x91a\x04\x8AV[\x10\x15aY]W[\x80aW\xA4aW\x9Ea\x01\0aU\xA2V[\x91a\x04\x8AV[\x10\x15aY/W[\x80aW\xBFaW\xB9`\x10aU\xDDV[\x91a\x04\x8AV[\x10\x15aY\x01W[aW\xD9aW\xD3`\x04aV\x18V[\x91a\x04\x8AV[\x10\x15aX\xE8W[aW\xEA`\x03aVSV[aVoV[aW\xF9`\x01aV4V[\x90aTxV[aX\t\x81\x86aV}V[\x90aV\x9FV[aX\x19`\x01aV4V[\x90aTxV[\x80\x92aV}V[\x90aV\x9FV[aX6`\x01aV4V[\x90aTxV[aXF\x81\x8CaV}V[\x90aV\x9FV[aXV`\x01aV4V[\x90aTxV[aXf\x81\x8AaV}V[\x90aV\x9FV[aXv`\x01aV4V[\x90aTxV[aX\x86\x81\x88aV}V[\x90aV\x9FV[aX\x96`\x01aV4V[\x90aTxV[aX\xA6\x81\x86aV}V[\x90aV\x9FV[aX\xB6`\x01aV4V[\x90aTxV[\x91aX\xD9aX\xD3aX\xCE\x85\x80\x94aV}V[a\x04\x8AV[\x91a\x04\x8AV[\x11ad\x8DV[\x90aA\x94V[\x90V[aX\xFC\x90aX\xF6`\x01aV4V[\x90aT\xBEV[aW\xE0V[aY\x18aY)\x91aY\x12`\x04aU\xC1V[\x90aTxV[\x91aY#`\x02aU\xFCV[\x90aT\xBEV[\x90aW\xC6V[aYFaYW\x91aY@`\x08aU\x83V[\x90aTxV[\x91aYQ`\x04aU\xC1V[\x90aT\xBEV[\x90aW\xABV[aYtaY\x85\x91aYn`\x10aUEV[\x90aTxV[\x91aY\x7F`\x08aU\x83V[\x90aT\xBEV[\x90aW\x8FV[aY\xA2aY\xB3\x91aY\x9C` aU\x07V[\x90aTxV[\x91aY\xAD`\x10aUEV[\x90aT\xBEV[\x90aWrV[aY\xD0aY\xE1\x91aY\xCA`@aT\xA2V[\x90aTxV[\x91aY\xDB` aU\x07V[\x90aT\xBEV[\x90aWSV[aY\xFEaZ\x0F\x91aY\xF8`\x80aT\\V[\x90aTxV[\x91aZ\t`@aT\xA2V[\x90aT\xBEV[\x90aW0V[\x90V[_R` _ \x01\x90V[\x93\x91\x90\x92aZ.a\x1F\x1CV[P[\x81aZCaZ=\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15aZ\xA9WaZT\x82\x82\x90ad\xB7V[\x90aZj_aZd\x88\x85\x90aZ\x18V[\x01aH\x05V[aZ|aZv\x87a\x15\xC2V[\x91a\x15\xC2V[\x11_\x14aZ\x8CWP\x91[\x91aZ0V[\x92\x91PaZ\xA3\x90aZ\x9D`\x01aH\x15V[\x90a\"?V[\x90aZ\x86V[\x92PP\x91P\x90V[aZ\xCF\x91`\x01aZ\xCA\x92aZ\xC3a\x1E\x1CV[P\x01aNlV[a\x0C\x1CV[aZ\xE1aZ\xDB_a\"#V[\x91a\x04\x8AV[\x14\x15\x90V[_aZ\xFA\x91aZ\xF3a\x1F\x1CV[P\x01aN\x82V[\x90V[a[\x1B\x91_a[\x15\x92a[\x0Ea$\x0EV[P\x01aN\xA3V[\x90aN\xE3V[\x90V[a[0\x90a[*a\x1F\x1CV[Pa1\x94V[\x90V[\x90V[\x91\x90\x91\x80a[La[F\x85a\x04[V[\x91a\x04[V[\x14\x15\x80a\\\xCAW[a[^W[PPPV[\x80a[ya[sa[n_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x03a\\:W[P\x81a[\x9Ba[\x95a[\x90_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x03a[\xA7W[\x80a[YV[a[\xEEa[\xE1a[\xE8\x92a[\xBD`\n\x86\x90a(\xACV[\x90a[\xDBa[\xD5a[\xCF`\x01\x93aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[\x92\x90a(\xC5V[\x91a(\xC5V[\x91\x90\x91a\\\x1B\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\x05\x08V[\x92a\\0a\\'a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2_\x80a[\xA1V[a\\ya\\\x7Fa\\ra\\O`\n\x85\x90a(\xACV[`\x02a\\la\\fa\\`\x89aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[\x92\x90a(\xC5V[\x91a(\xC5V[\x91\x90\x91a\\\xAC\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\x05\x08V[\x92a\\\xC1a\\\xB8a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2_a[\x7FV[P\x81a\\\xDEa\\\xD8_a\"#V[\x91a\x04\x8AV[\x11a[TV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a]\x14W\x82a]\x0C\x91`\x01a]\x12\x95\x01\x81UaOCV[\x90aN\xFDV[V[a!jV[a]!a\x1E\x1CV[Pa]6a]0\x82\x84\x90aZ\xB1V[\x15a\x06OV[_\x14a]vWa]la]q\x92a]Xa]Q_\x85\x01aO\x1FV[\x82\x90a\\\xE4V[`\x01a]e_\x85\x01aN\x82V[\x93\x01aNlV[a+\xBDV[`\x01\x90V[PP_\x90V[_a]\x90\x91a]\x89a\x1F\x1CV[P\x01aG\xC0V[\x90V[a]\xA7a]\xA2a]\xAC\x92a\x0F\xCDV[a\x04\xDDV[a\x04\x8AV[\x90V[a]\xB8\x90aU\x07V[\x90RV[\x91` a]\xDD\x92\x94\x93a]\xD6`@\x82\x01\x96_\x83\x01\x90a]\xAFV[\x01\x90a\x05\xAAV[V[a]\xF3a]\xEEa]\xF8\x92a\x04\x8AV[a\x04\xDDV[a\x0F\xCDV[\x90V[a^\x03a1{V[P\x80a^\x1Ba^\x15c\xFF\xFF\xFF\xFFa]\x93V[\x91a\x04\x8AV[\x11a^,Wa^)\x90a]\xDFV[\x90V[` a^H_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a]\xBCV[\x03\x90\xFD[``\x90V[` \x91\x81R\x01\x90V[a^c\x90a\x08\xF4V[\x90RV[\x90a^t\x81` \x93a^ZV[\x01\x90V[a^\x82\x90Ta$7V[\x90V[`\x01\x01\x90V[\x90a^\xA8a^\xA2a^\x9B\x84aN\x82V[\x80\x93a^QV[\x92aN\x9AV[\x90_[\x81\x81\x10a^\xB8WPPP\x90V[\x90\x91\x92a^\xD8a^\xD2`\x01\x92a^\xCD\x87a^xV[a^gV[\x94a^\x85V[\x91\x01\x91\x90\x91a^\xABV[\x90a^\xEC\x91a^\x8BV[\x90V[\x90a_\x0Fa_\x08\x92a^\xFFa\x04BV[\x93\x84\x80\x92a^\xE2V[\x03\x83a!~V[V[a_\x1A\x90a^\xEFV[\x90V[_a_1\x91a_*a^LV[P\x01a_\x11V[\x90V[a_Ka_P\x91a_Ca\x1F\x1CV[P`\x08a\t\x8FV[a\x0C\x1CV[\x90V[\x90V[a_ja_ea_o\x92a_SV[a\x17=V[a\x08\xF4V[\x90V[a_|`\xFFa_VV[\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a_\xA2a_\x9B\x83a \x95V[\x80\x94a \xBFV[\x91`\x01\x81\x16\x90\x81_\x14a_\xF9WP`\x01\x14a_\xBDW[PPPV[a_\xCA\x91\x92\x93\x94Pa_\x7FV[\x91_\x92[\x81\x84\x10a_\xE1WPP\x01\x90_\x80\x80a_\xB8V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a_\xCEV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a_\xB8V[\x90a`\x1E\x91a_\x88V[\x90V[\x90a`Aa`:\x92a`1a\x04BV[\x93\x84\x80\x92a`\x14V[\x03\x83a!~V[V[a`L\x90a`!V[\x90V[\x90a`Xa |V[Pa`b\x82a$\x12V[a`{a`ua`pa_rV[a\x08\xF4V[\x91a\x08\xF4V[\x14\x15_\x14a`\x90WPa`\x8D\x90af-V[\x90V[a`\x9A\x91Pa`CV[\x90V[`B\x91a`\xA8a$\x0EV[P`@Q\x91\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x02\x83\x01R`\"\x82\x01R \x90V[_\x90V[\x90V[a`\xF9a`\xF4a`\xFE\x92a`\xE2V[a\x04\xDDV[a\x04\x8AV[\x90V[aa6aa=\x94aa,``\x94\x98\x97\x95aa\"`\x80\x86\x01\x9A_\x87\x01\x90a\t8V[` \x85\x01\x90a\n\xC3V[`@\x83\x01\x90a\t8V[\x01\x90a\t8V[V[aaGa\x04BV[=_\x82>=\x90\xFD[\x93\x92\x93aaZa+&V[Paaca`\xDEV[Paala$\x0EV[Paav\x85aJ\x14V[aa\xA8aa\xA2\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a`\xE5V[\x91a\x04\x8AV[\x11ab5W\x90aa\xCB` \x94\x95_\x94\x93\x92\x93aa\xC2a\x04BV[\x94\x85\x94\x85aa\x01V[\x83\x80R\x03\x90`\x01Z\xFA\x15ab0Waa\xE3_Qa\x17=V[\x80aa\xFEaa\xF8aa\xF3_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ab\x14W_\x91ab\x0E_a\x17BV[\x91\x92\x91\x90V[Pab\x1E_a\x1E\xBFV[`\x01\x91ab*_a\x17BV[\x91\x92\x91\x90V[aa?V[PPPabA_a\x1E\xBFV[\x90`\x03\x92\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15abiWV[abKV[\x90abx\x82ab_V[V[\x80ab\x8Dab\x87_abnV[\x91abnV[\x14_\x14ab\x98WPPV[\x80ab\xACab\xA6`\x01abnV[\x91abnV[\x14_\x14ab\xCFW_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80ab\xCB`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x80ab\xE3ab\xDD`\x02abnV[\x91abnV[\x14_\x14ac\x11Wac\rab\xF6\x83aJ\x14V[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[ac$ac\x1E`\x03abnV[\x91abnV[\x14ac,WPV[acG\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a\tEV[\x03\x90\xFD[_R` _ \x90V[ac]\x81aG\xC0V[\x82\x10\x15acwWaco`\x01\x91acKV[\x91\x02\x01\x90_\x90V[aN\x86V[\x90ac\x86\x90a\x15\xC2V[\x90RV[\x90ac\x94\x90a\x1C\x98V[\x90RV[\x90ac\xCEac\xC5_ac\xA8a=\tV[\x94ac\xBFac\xB7\x83\x83\x01aH\x05V[\x83\x88\x01ac|V[\x01aHVV[` \x84\x01ac\x8AV[V[ac\xD9\x90ac\x98V[\x90V[ac\xFA\x91_ac\xF4\x92ac\xEDa=DV[P\x01acTV[Pac\xD0V[\x90V[\x92\x91ad\x0B\x84\x83\x83\x91af]V[\x83ad&ad ad\x1B_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ad;W[ad9\x92\x93\x91\x90\x91ag\xE7V[V[adCa\"\rV[\x93adLag\xCCV[\x94\x80ad`adZ\x88a\x04\x8AV[\x91a\x04\x8AV[\x11admWP\x93Pad,V[\x85\x90ad\x89_\x92\x83\x92c\x0EX\xAE\x93`\xE1\x1B\x84R`\x04\x84\x01a.)V[\x03\x90\xFD[ad\x95a\x1F\x1CV[P\x15\x15\x90V[ad\xAFad\xAAad\xB4\x92aU\xF9V[a\x04\xDDV[a\x04\x8AV[\x90V[ad\xDCad\xE2\x92ad\xC6a\x1F\x1CV[P\x82\x81\x16\x92\x18ad\xD6`\x02ad\x9BV[\x90a&}V[\x90a\"?V[\x90V[\x90V[ad\xFCad\xF7ae\x01\x92ad\xE5V[a\x04\xDDV[a\n\xBDV[\x90V[ae\r\x90ad\xE8V[\x90RV[\x91` ae2\x92\x94\x93ae+`@\x82\x01\x96_\x83\x01\x90ae\x04V[\x01\x90a\x05\xAAV[V[aeHaeCaeM\x92a\x04\x8AV[a\x04\xDDV[a\x1C\x98V[\x90V[aeXa\x1D\x87V[P\x80aerael`\x01\x80`\xD0\x1B\x03a(\xC5V[\x91a\x04\x8AV[\x11ae\x83Wae\x80\x90ae4V[\x90V[`\xD0ae\x9F_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01ae\x11V[\x03\x90\xFD[\x90ae\xD9ae\xDF\x93\x92ae\xB4a\x1D\x87V[Pae\xBDa\x1D\x87V[P\x80\x93ae\xD2ae\xCBa6\xADV[\x94\x92aLnV[\x90\x91alOV[\x91ah\xA6V[\x91\x90\x91\x90V[ae\xF9ae\xF4ae\xFE\x92aU\x04V[a\x04\xDDV[a\x04\x8AV[\x90V[6\x907V[\x90af+af\x13\x83a*nV[\x92` \x80af!\x86\x93a*KV[\x92\x01\x91\x03\x90af\x01V[V[af5a |V[Paf?\x81ai\x10V[\x90afRafM` ae\xE5V[af\x06V[\x91\x82R` \x82\x01R\x90V[\x91\x90\x91\x80af{afuafp_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14_\x14ag\\Waf\x9Faf\x98\x83af\x93`\x02a\x0C\x1CV[a\"?V[`\x02a+\xBDV[[\x82af\xBBaf\xB5af\xB0_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14_\x14ag0Waf\xDFaf\xD8\x83af\xD3`\x02a\x0C\x1CV[aA\x94V[`\x02a+\xBDV[[\x91\x90\x91ag+ag\x19ag\x13\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x05\x08V[\x93a\x05\x08V[\x93ag\"a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[agW\x82agQagB_\x87\x90a\t\x8FV[\x91agL\x83a\x0C\x1CV[aV\x9FV[\x90a+\xBDV[af\xE0V[agoagj_\x83\x90a\t\x8FV[a\x0C\x1CV[\x80ag\x82ag|\x85a\x04\x8AV[\x91a\x04\x8AV[\x10ag\xAAWag\x95ag\xA5\x91\x84\x90aA\x94V[ag\xA0_\x84\x90a\t\x8FV[a+\xBDV[af\xA0V[\x90ag\xC8\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[ag\xD4a\x1F\x1CV[Pag\xE4`\x01\x80`\xD0\x1B\x03a(\xC5V[\x90V[\x91ah?ah9ahF\x94\x80ah\rah\x07ah\x02_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ahwW[\x84ah.ah(ah#_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ahHW[a+lV[\x92a+lV[\x90\x91a[6V[V[ahp`\x0B`\x02ahjahdah^\x89aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[PPah4V[ah\x9F`\x0B`\x01ah\x99ah\x93ah\x8D\x89aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[PPah\x13V[\x91ah\xCA_ah\xCF\x94ah\xB7a\x1D\x87V[Pah\xC0a\x1D\x87V[P\x01\x92\x91\x92aG\xE3V[ak\x01V[\x91\x90\x91\x90V[ah\xE9ah\xE4ah\xEE\x92a_SV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[ai\x08ai\x03ai\r\x92ah\xF1V[a\x04\xDDV[a\x04\x8AV[\x90V[ai%ai*\x91ai\x1Fa\x1F\x1CV[Pa$\x12V[aJ\x14V[ai4`\xFFah\xD5V[\x16\x80aiIaiC`\x1Fah\xF4V[\x91a\x04\x8AV[\x11aiQW\x90V[_c,\xD4J\xC3`\xE2\x1B\x81R\x80aii`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[T\x90V[ai{`@a%\xCBV[\x90V[_R` _ \x90V[ai\x90\x81aimV[\x82\x10\x15ai\xAAWai\xA2`\x01\x91ai~V[\x91\x02\x01\x90_\x90V[aN\x86V[ai\xB9\x90Qa\x15\xC2V[\x90V[\x90ai\xCDe\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[ai\xEBai\xE6ai\xF0\x92a\x15\xC2V[a\x04\xDDV[a\x15\xC2V[\x90V[\x90V[\x90aj\x0Baj\x06aj\x12\x92ai\xD7V[ai\xF3V[\x82Tai\xBCV[\x90UV[aj \x90Qa\x1C\x98V[\x90V[`0\x1B\x90V[\x90aj;e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x91aj#V[\x91\x81\x19\x16\x91\x16\x17\x90V[ajYajTaj^\x92a\x1C\x98V[a\x04\xDDV[a\x1C\x98V[\x90V[\x90V[\x90ajyajtaj\x80\x92ajEV[ajaV[\x82Taj)V[\x90UV[\x90aj\xAE` _aj\xB4\x94aj\xA6\x82\x82\x01aj\xA0\x84\x88\x01ai\xAFV[\x90ai\xF6V[\x01\x92\x01aj\x16V[\x90ajdV[V[\x91\x90aj\xC7Waj\xC5\x91aj\x84V[V[a\x1FUV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15aj\xFCW\x82aj\xF4\x91`\x01aj\xFA\x95\x01\x81Uai\x87V[\x90aj\xB6V[V[a!jV[\x90\x92\x91\x92ak\ra\x1D\x87V[Pak\x16a\x1D\x87V[Pak \x82aimV[\x80ak3ak-_a\"#V[\x91a\x04\x8AV[\x11_\x14al\x03WakY\x90akS\x84\x91akM`\x01aH\x15V[\x90a&\xCDV[\x90aZ\x18V[\x90ake_\x83\x01aH\x05V[\x92akq_\x84\x01aHVV[\x93\x80ak\x85ak\x7F\x85a\x15\xC2V[\x91a\x15\xC2V[\x11ak\xE7Wak\x9Cak\x96\x84a\x15\xC2V[\x91a\x15\xC2V[\x14_\x14ak\xB7WPPak\xB2\x90_\x85\x91\x01ajdV[[\x91\x90V[ak\xE2\x92Pak\xDD\x86ak\xD4ak\xCBaiqV[\x94_\x86\x01ac|V[` \x84\x01ac\x8AV[aj\xCCV[ak\xB3V[_c% `\x1D`\xE0\x1B\x81R\x80ak\xFF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[Pal.\x91al)\x85al al\x17aiqV[\x94_\x86\x01ac|V[` \x84\x01ac\x8AV[aj\xCCV[al7_aHcV[\x91\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[\x91\x90\x91\x80`\x01\x14alnW`\x02\x03al;Walj\x91a\x1E\x06V[\x90[V[Palx\x91a\x1D\xC7V[\x90allV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b611d83565b61001d5f3561043c565b806301042d7a1461043757806301ffc9a71461043257806304df017d1461042d578063050732fb1461042857806306fdde0314610423578063095ea7b31461041e57806318160ddd1461041957806318bf50771461041457806323b872dd1461040f578063248a9ca31461040a5780632869366b146104055780632b8c49e3146104005780632f2ff15d146103fb57806330d3e8eb146103f6578063313ce567146103f15780633644e515146103ec57806336568abe146103e75780633a46b1a8146103e257806340c10f19146103dd578063427ac0ca146103d857806342966c68146103d35780634bf5d7e9146103ce5780634f1bfc9e146103c9578063587cde1e146103c45780635a4239e9146103bf5780635a5db1bb146103ba5780635c19a95c146103b55780635d4c6285146103b057806363a0daac146103ab57806365145534146103a65780636fcfff45146103a157806370a082311461039c57806372cbdcc81461039757806378fb7fd21461039257806379cc67901461038d5780637a8cd156146103885780637ecebe001461038357806383f1211b1461037e5780638426adf214610379578063844c90261461037457806384b0196e1461036f5780638a5425211461036a5780638d3343d6146103655780638e539e8c14610360578063902d55a51461035b57806391d148541461035657806391ddadf41461035157806394aa22f21461034c57806395d89b41146103475780639ab24eb0146103425780639b7ef64b1461033d578063a217fddf14610338578063a9059cbb14610333578063aa082a9d1461032e578063b0ca253e14610329578063b7cdc61c14610324578063bb4d44361461031f578063c02ae7541461031a578063c3cda52014610315578063c4fc45a814610310578063c9ab00061461030b578063d505accf14610306578063d547741f14610301578063dd62ed3e146102fc578063f1127ed8146102f75763f75e85120361000e57611d4e565b611ce9565b611c05565b611ba4565b611b6a565b611ac6565b611a41565b6119af565b6118f3565b6118be565b611889565b611824565b6117ef565b6117aa565b611775565b611705565b61168e565b611659565b611624565b6115ef565b61158c565b611557565b6114e0565b6114ab565b611447565b6113dc565b611297565b611262565b611209565b6111d4565b61119f565b61116b565b611136565b611101565b61102d565b610ff8565b610f98565b610f64565b610ef4565b610ea0565b610e6b565b610e37565b610e02565b610dab565b610d3d565b610d0a565b610cb4565b610bb9565b610b83565b610b4f565b610b1a565b610ae5565b610a88565b610a54565b6109f3565b6109be565b61095a565b6108be565b610850565b61081b565b6107e5565b6107b0565b610701565b6106ce565b610676565b6105cc565b60e01c90565b60405190565b5f80fd5b5f80fd5b60018060a01b031690565b61046490610450565b90565b6104708161045b565b0361047757565b5f80fd5b9050359061048882610467565b565b90565b6104968161048a565b0361049d57565b5f80fd5b905035906104ae8261048d565b565b91906040838203126104d857806104cc6104d5925f860161047b565b936020016104a1565b90565b61044c565b90565b6104f46104ef6104f992610450565b6104dd565b610450565b90565b610505906104e0565b90565b610511906104fc565b90565b9061051e90610508565b5f5260205260405f2090565b61053e6105396105439261048a565b6104dd565b61048a565b90565b906105509061052a565b5f5260205260405f2090565b1c90565b90565b610573906008610578930261055c565b610560565b90565b906105869154610563565b90565b6105a26105a79261059d6011935f94610514565b610546565b61057b565b90565b6105b39061048a565b9052565b91906105ca905f602085019401906105aa565b565b346105fd576105f96105e86105e23660046104b0565b90610589565b6105f0610442565b918291826105b7565b0390f35b610448565b63ffffffff60e01b1690565b61061781610602565b0361061e57565b5f80fd5b9050359061062f8261060e565b565b9060208282031261064a57610647915f01610622565b90565b61044c565b151590565b61065d9061064f565b9052565b9190610674905f60208501940190610654565b565b346106a6576106a261069161068c366004610631565b611e20565b610699610442565b91829182610661565b0390f35b610448565b906020828203126106c4576106c1915f0161047b565b90565b61044c565b5f0190565b346106fc576106e66106e13660046106ab565b612052565b6106ee610442565b806106f8816106c9565b0390f35b610448565b346107315761072d61071c6107173660046106ab565b61205d565b610724610442565b918291826105b7565b0390f35b610448565b5f91031261074057565b61044c565b5190565b60209181520190565b90825f9392825e0152565b601f801991011690565b61078661078f6020936107949361077d81610745565b93848093610749565b95869101610752565b61075d565b0190565b6107ad9160208201915f818403910152610767565b90565b346107e0576107c0366004610736565b6107dc6107cb6121d5565b6107d3610442565b91829182610798565b0390f35b610448565b34610816576108126108016107fb3660046104b0565b906121eb565b610809610442565b91829182610661565b0390f35b610448565b3461084b5761082b366004610736565b61084761083661220d565b61083e610442565b918291826105b7565b0390f35b610448565b3461087f576108696108633660046104b0565b90612264565b610871610442565b8061087b816106c9565b0390f35b610448565b90916060828403126108b9576108b661089f845f850161047b565b936108ad816020860161047b565b936040016104a1565b90565b61044c565b346108ef576108eb6108da6108d4366004610884565b916123df565b6108e2610442565b91829182610661565b0390f35b610448565b90565b610900816108f4565b0361090757565b5f80fd5b90503590610918826108f7565b565b9060208282031261093357610930915f0161090b565b90565b61044c565b610941906108f4565b9052565b9190610958905f60208501940190610938565b565b3461098a5761098661097561097036600461091a565b612458565b61097d610442565b91829182610945565b0390f35b610448565b9061099990610508565b5f5260205260405f2090565b6109bb906109b66010915f9261098f565b61057b565b90565b346109ee576109ea6109d96109d43660046106ab565b6109a5565b6109e1610442565b918291826105b7565b0390f35b610448565b34610a2257610a0c610a063660046104b0565b9061247a565b610a14610442565b80610a1e816106c9565b0390f35b610448565b9190604083820312610a4f5780610a43610a4c925f860161090b565b9360200161047b565b90565b61044c565b34610a8357610a6d610a67366004610a27565b906125a3565b610a75610442565b80610a7f816106c9565b0390f35b610448565b34610ab857610ab4610aa3610a9e3660046106ab565b6126ff565b610aab610442565b918291826105b7565b0390f35b610448565b60ff1690565b610acc90610abd565b9052565b9190610ae3905f60208501940190610ac3565b565b34610b1557610af5366004610736565b610b11610b0061283a565b610b08610442565b91829182610ad0565b0390f35b610448565b34610b4a57610b2a366004610736565b610b46610b35612850565b610b3d610442565b91829182610945565b0390f35b610448565b34610b7e57610b68610b62366004610a27565b90612864565b610b70610442565b80610b7a816106c9565b0390f35b610448565b34610bb457610bb0610b9f610b993660046104b0565b906128e1565b610ba7610442565b918291826105b7565b0390f35b610448565b34610be857610bd2610bcc3660046104b0565b906129ff565b610bda610442565b80610be4816106c9565b0390f35b610448565b90610bf790610508565b5f5260205260405f2090565b5f1c90565b610c14610c1991610c03565b610560565b90565b610c269054610c08565b90565b60ff1690565b610c3b610c4091610c03565b610c29565b90565b610c4d9054610c2f565b90565b610c5b90600d610bed565b610c665f8201610c1c565b91610c7f6002610c7860018501610c1c565b9301610c43565b90565b604090610cab610cb29496959396610ca160608401985f8501906105aa565b60208301906105aa565b0190610654565b565b34610ce757610ce3610ccf610cca3660046106ab565b610c50565b610cda939193610442565b93849384610c82565b0390f35b610448565b90602082820312610d0557610d02915f016104a1565b90565b61044c565b34610d3857610d22610d1d366004610cec565b612a0b565b610d2a610442565b80610d34816106c9565b0390f35b610448565b34610d6d57610d4d366004610736565b610d69610d58612ad0565b610d60610442565b91829182610798565b0390f35b610448565b90565b610d89610d84610d8e92610d72565b6104dd565b61048a565b90565b610d9d629e3400610d75565b90565b610da8610d91565b90565b34610ddb57610dbb366004610736565b610dd7610dc6610da0565b610dce610442565b918291826105b7565b0390f35b610448565b610de99061045b565b9052565b9190610e00905f60208501940190610de0565b565b34610e3257610e2e610e1d610e183660046106ab565b612b6c565b610e25610442565b91829182610ded565b0390f35b610448565b34610e6657610e50610e4a3660046104b0565b90612cf9565b610e58610442565b80610e62816106c9565b0390f35b610448565b34610e9b57610e97610e86610e81366004610cec565b612dad565b610e8e610442565b91829182610ded565b0390f35b610448565b34610ece57610eb8610eb33660046106ab565b612df9565b610ec0610442565b80610eca816106c9565b0390f35b610448565b610eec610ef192610ee76012935f94610514565b610546565b61057b565b90565b34610f2557610f21610f10610f0a3660046104b0565b90610ed3565b610f18610442565b918291826105b7565b0390f35b610448565b9091606082840312610f5f57610f5c610f45845f850161047b565b93610f5381602086016104a1565b936040016104a1565b90565b61044c565b34610f9357610f7d610f77366004610f2a565b91613150565b610f85610442565b80610f8f816106c9565b0390f35b610448565b34610fc857610fa8366004610736565b610fc4610fb361315d565b610fbb610442565b918291826105b7565b0390f35b610448565b63ffffffff1690565b610fdf90610fcd565b9052565b9190610ff6905f60208501940190610fd6565b565b346110285761102461101361100e3660046106ab565b61317f565b61101b610442565b91829182610fe3565b0390f35b610448565b3461105d576110596110486110433660046106ab565b613194565b611050610442565b918291826105b7565b0390f35b610448565b5190565b60209181520190565b60200190565b61107e9061045b565b9052565b9061108f81602093611075565b0190565b60200190565b906110b66110b06110a984611062565b8093611066565b9261106f565b905f5b8181106110c65750505090565b9091926110df6110d96001928651611082565b94611093565b91019190916110b9565b6110fe9160208201915f818403910152611099565b90565b3461113157611111366004610736565b61112d61111c6131b7565b611124610442565b918291826110e9565b0390f35b610448565b346111665761116261115161114c3660046106ab565b6131d5565b611159610442565b91829182610661565b0390f35b610448565b3461119a5761118461117e3660046104b0565b9061333a565b61118c610442565b80611196816106c9565b0390f35b610448565b346111cf576111af366004610736565b6111cb6111ba613346565b6111c2610442565b918291826105b7565b0390f35b610448565b34611204576112006111ef6111ea3660046106ab565b6133be565b6111f7610442565b918291826105b7565b0390f35b610448565b3461123957611219366004610736565b6112356112246133d3565b61122c610442565b91829182610661565b0390f35b610448565b7f000000000000000000000000000000000000000000000000000000000000000090565b3461129257611272366004610736565b61128e61127d61123e565b611285610442565b918291826105b7565b0390f35b610448565b346112c5576112af6112aa366004610cec565b613526565b6112b7610442565b806112c1816106c9565b0390f35b610448565b60ff60f81b1690565b6112dc906112ca565b9052565b5190565b60209181520190565b60200190565b6112fc9061048a565b9052565b9061130d816020936112f3565b0190565b60200190565b9061133461132e611327846112e0565b80936112e4565b926112ed565b905f5b8181106113445750505090565b90919261135d6113576001928651611300565b94611311565b9101919091611337565b939591946113b86113ad6113cc9561139f6113c2956113d99c9a61139260e08c01925f8d01906112d3565b8a820360208c0152610767565b9088820360408a0152610767565b9760608701906105aa565b6080850190610de0565b60a0830190610938565b60c0818403910152611317565b90565b34611413576113ec366004610736565b61140f6113f76135ae565b93611406979597939193610442565b97889788611367565b0390f35b610448565b7f84fe74c71a28b69aa960486ca0e8c1418c86e9ea2cd6b5849b95e2c8f407a67490565b611444611418565b90565b3461147757611457366004610736565b61147361146261143c565b61146a610442565b91829182610945565b0390f35b610448565b7f9b12e0c5707e494915e58b0564f18aaad9b74ac69bfc815a1edadc8e4bd032eb90565b6114a861147c565b90565b346114db576114bb366004610736565b6114d76114c66114a0565b6114ce610442565b91829182610945565b0390f35b610448565b346115105761150c6114fb6114f6366004610cec565b613638565b611503610442565b918291826105b7565b0390f35b610448565b90565b61152c61152761153192611515565b6104dd565b61048a565b90565b6115496b033b2e3c9fd0803ce8000000611518565b90565b611554611534565b90565b3461158757611567366004610736565b61158361157261154c565b61157a610442565b918291826105b7565b0390f35b610448565b346115bd576115b96115a86115a2366004610a27565b9061367f565b6115b0610442565b91829182610661565b0390f35b610448565b65ffffffffffff1690565b6115d6906115c2565b9052565b91906115ed905f602085019401906115cd565b565b3461161f576115ff366004610736565b61161b61160a6136ad565b611612610442565b918291826115da565b0390f35b610448565b346116545761165061163f61163a3660046106ab565b6136c1565b611647610442565b918291826105b7565b0390f35b610448565b3461168957611669366004610736565b6116856116746137d7565b61167c610442565b91829182610798565b0390f35b610448565b346116be576116ba6116a96116a43660046106ab565b6137ed565b6116b1610442565b918291826105b7565b0390f35b610448565b90565b6116da6116d56116df926116c3565b6104dd565b61048a565b90565b6116f76b02f90193ef3075fa980000006116c6565b90565b6117026116e2565b90565b3461173557611715366004610736565b6117316117206116fa565b611728610442565b918291826105b7565b0390f35b610448565b90565b5f1b90565b61175661175161175b9261173a565b61173d565b6108f4565b90565b6117675f611742565b90565b61177261175e565b90565b346117a557611785366004610736565b6117a161179061176a565b611798610442565b91829182610945565b0390f35b610448565b346117db576117d76117c66117c03660046104b0565b9061381c565b6117ce610442565b91829182610661565b0390f35b610448565b6117ec600c5f9061057b565b90565b3461181f576117ff366004610736565b61181b61180a6117e0565b611812610442565b918291826105b7565b0390f35b610448565b346118555761185161184061183a3660046104b0565b9061383e565b611848610442565b918291826105b7565b0390f35b610448565b7f820372a9faf82db3cc5fc36ffab5f096eef69b95fbf50591e0d71447aa1ba70090565b61188661185a565b90565b346118b957611899366004610736565b6118b56118a461187e565b6118ac610442565b91829182610945565b0390f35b610448565b346118ee576118ea6118d96118d43660046106ab565b613854565b6118e1610442565b918291826105b7565b0390f35b610448565b3461192357611903366004610736565b61191f61190e613869565b611916610442565b918291826105b7565b0390f35b610448565b61193181610abd565b0361193857565b5f80fd5b9050359061194982611928565b565b909160c0828403126119aa57611963835f840161047b565b9261197181602085016104a1565b9261197f82604083016104a1565b926119a7611990846060850161193c565b9361199e816080860161090b565b9360a00161090b565b90565b61044c565b346119e4576119ce6119c236600461194b565b949390939291926138e9565b6119d6610442565b806119e0816106c9565b0390f35b610448565b6119f29061064f565b9052565b90604080611a2a93611a0e5f8201515f8601906112f3565b611a20602082015160208601906112f3565b01519101906119e9565b565b9190611a3f905f606085019401906119f6565b565b34611a7157611a6d611a5c611a573660046106ab565b6139e0565b611a64610442565b91829182611a2c565b0390f35b610448565b611a7f8161064f565b03611a8657565b5f80fd5b90503590611a9782611a76565b565b9190604083820312611ac15780611ab5611abe925f860161047b565b93602001611a8a565b90565b61044c565b34611af557611adf611ad9366004611a99565b90613af3565b611ae7610442565b80611af1816106c9565b0390f35b610448565b60e081830312611b6557611b10825f830161047b565b92611b1e836020840161047b565b92611b2c81604085016104a1565b92611b3a82606083016104a1565b92611b62611b4b846080850161193c565b93611b598160a0860161090b565b9360c00161090b565b90565b61044c565b34611b9f57611b89611b7d366004611afa565b95949094939193613ba1565b611b91610442565b80611b9b816106c9565b0390f35b610448565b34611bd357611bbd611bb7366004610a27565b90613cbf565b611bc5610442565b80611bcf816106c9565b0390f35b610448565b9190604083820312611c005780611bf4611bfd925f860161047b565b9360200161047b565b90565b61044c565b34611c3657611c32611c21611c1b366004611bd8565b90613ce1565b611c29610442565b918291826105b7565b0390f35b610448565b611c4481610fcd565b03611c4b57565b5f80fd5b90503590611c5c82611c3b565b565b9190604083820312611c865780611c7a611c83925f860161047b565b93602001611c4f565b90565b61044c565b611c94906115c2565b9052565b60018060d01b031690565b611cac90611c98565b9052565b90602080611cd293611cc85f8201515f860190611c8b565b0151910190611ca3565b565b9190611ce7905f60408501940190611cb0565b565b34611d1a57611d16611d05611cff366004611c5e565b90613d4f565b611d0d610442565b91829182611cd4565b0390f35b610448565b7fcce296b040332a080e6df13515a3ec2869e21cd20f7344af0987ddb938d8bd2190565b611d4b611d1f565b90565b34611d7e57611d5e366004610736565b611d7a611d69611d43565b611d71610442565b91829182610945565b0390f35b610448565b5f80fd5b5f90565b634e487b7160e01b5f52601160045260245ffd5b611dab611db191611c98565b91611c98565b019060018060d01b038211611dc257565b611d8b565b90611dda91611dd4611d87565b50611d9f565b90565b611de9611def91611c98565b91611c98565b90039060018060d01b038211611e0157565b611d8b565b90611e1991611e13611d87565b50611ddd565b90565b5f90565b611e28611e1c565b5080611e43611e3d630cccc66560e21b610602565b91610602565b148015611e67575b908115611e57575b5090565b611e619150613d65565b5f611e53565b5080611e82611e7c63b2752ac960e01b610602565b91610602565b14611e4b565b611ea190611e9c611e97611d1f565b613da5565b611f7f565b565b611eb7611eb2611ebc9261173a565b6104dd565b610450565b90565b611ec890611ea3565b90565b90565b1b90565b91906008611eed910291611ee75f1984611ece565b92611ece565b9181191691161790565b90565b9190611f10611f0b611f189361052a565b611ef7565b908354611ed2565b9055565b5f90565b611f3291611f2c611f1c565b91611efa565b565b60025f91611f4483808301611f20565b611f518360018301611f20565b0155565b634e487b7160e01b5f525f60045260245ffd5b905f03611f7a57611f7890611f34565b565b611f55565b80611f9a611f94611f8f5f611ebf565b61045b565b9161045b565b1461203657611fbc611fb6611faf600e611ecb565b8390613e00565b1561064f565b61201757611fd55f611fd0600d8490610bed565b611f68565b611fff7f5d9d5034656cb3ebfb0655057cd7f9b4077a9b42ff42ce223cbac5bc586d212691610508565b90612008610442565b80612012816106c9565b0390a2565b612032905f918291636585b60d60e01b835260048301610ded565b0390fd5b5f63d92e233d60e01b81528061204e600482016106c9565b0390fd5b61205b90611e88565b565b6120746120799161206c611f1c565b50601061098f565b610c1c565b90565b606090565b634e487b7160e01b5f52602260045260245ffd5b90600160028304921680156120b5575b60208310146120b057565b612081565b91607f16916120a5565b60209181520190565b5f5260205f2090565b905f92918054906120eb6120e483612095565b80946120bf565b916001811690815f146121425750600114612106575b505050565b61211391929394506120c8565b915f925b81841061212a57505001905f8080612101565b60018160209295939554848601520191019290612117565b92949550505060ff19168252151560200201905f8080612101565b90612167916120d1565b90565b634e487b7160e01b5f52604160045260245ffd5b906121889061075d565b810190811067ffffffffffffffff8211176121a257604052565b61216a565b906121c76121c0926121b7610442565b9384809261215d565b038361217e565b565b6121d2906121a7565b90565b6121dd61207c565b506121e860036121c9565b90565b612208916121f7611e1c565b50612200613e3a565b919091613e47565b600190565b612215611f1c565b506122206002610c1c565b90565b61223761223261223c9261173a565b6104dd565b61048a565b90565b61224e6122549193929361048a565b9261048a565b820180921161225f57565b611d8b565b8061227f6122796122745f611ebf565b61045b565b9161045b565b146123c357816122976122915f612223565b9161048a565b146123a7576122ae6122a761220d565b839061223f565b6122c76122c16122bc611534565b61048a565b9161048a565b1161238b576122d7338390613e8c565b6122e2338390614082565b6122ea6133d3565b8061236a575b61234e576122ff818390614136565b33906123496123376123317fde22baff038e3a3e08407cbdf617deed74e869a7ba517df611e33131c6e6ea0493610508565b93610508565b93612340610442565b918291826105b7565b0390a3565b5f6336e278fd60e21b815280612366600482016106c9565b0390fd5b50612386612380612379611418565b339061367f565b1561064f565b6122f0565b5f63177e3fc360e01b8152806123a3600482016106c9565b0390fd5b5f631f2a200560e01b8152806123bf600482016106c9565b0390fd5b5f63d92e233d60e01b8152806123db600482016106c9565b0390fd5b91612409926123ec611e1c565b506124016123f8613e3a565b829084916141a2565b91909161422e565b600190565b5f90565b61241b906108f4565b90565b9061242890612412565b5f5260205260405f2090565b90565b61244361244891610c03565b612434565b90565b6124559054612437565b90565b60016124716124779261246961240e565b50600561241e565b0161244b565b90565b8061249561248f61248a5f611ebf565b61045b565b9161045b565b1461255d57816124ad6124a75f612223565b9161048a565b14612541576124bd3383906142cb565b336124d06124ca8361045b565b9161045b565b03612530575b6124e18183906144c4565b339061252b6125196125137fb90795a66650155983e242cac3e1ac1a4dc26f8ed2987f3ce416a34e00111fd493610508565b93610508565b93612522610442565b918291826105b7565b0390a3565b61253c813384916141a2565b6124d6565b5f631f2a200560e01b815280612559600482016106c9565b0390fd5b5f63d92e233d60e01b815280612575600482016106c9565b0390fd5b906125949161258f61258a82612458565b613da5565b612596565b565b906125a091614523565b50565b906125ad91612579565b565b906125b99061048a565b9052565b906125c79061064f565b9052565b906125de6125d7610442565b928361217e565b565b6125ea60606125cb565b90565b9061263c61263360026125fe6125e0565b9461261561260d5f8301610c1c565b5f88016125af565b61262d61262460018301610c1c565b602088016125af565b01610c43565b604084016125bd565b565b612647906125ed565b90565b90565b61266161265c6126669261264a565b6104dd565b61048a565b90565b634e487b7160e01b5f52601260045260245ffd5b61268961268f9161048a565b9161048a565b90811561269a570490565b612669565b60016126ab910161048a565b90565b90565b6126c56126c06126ca926126ae565b6104dd565b61048a565b90565b6126dc6126e29193929361048a565b9261048a565b82039182116126ed57565b611d8b565b6126fc905161048a565b90565b612707611f1c565b5061271c612717600d8390610bed565b61263e565b906127324261272c610e1061264d565b9061267d565b61273b5f612223565b906127455f612223565b5b8061275a61275460186126b1565b9161048a565b10156127c6578161277361276d8361048a565b9161048a565b1015612788575b6127839061269f565b612746565b916127be612783916127b86127b36127a260128990610514565b6127ad8789906126cd565b90610546565b610c1c565b9061223f565b92905061277a565b505090506127d6602083016126f2565b6127e86127e28361048a565b9161048a565b115f14612807576127fe602061280393016126f2565b6126cd565b5b90565b50506128125f612223565b612804565b5f90565b90565b61283261282d6128379261281b565b6104dd565b610abd565b90565b612842612817565b5061284d601261281e565b90565b61285861240e565b506128616145cf565b90565b908061287f612879612874613e3a565b61045b565b9161045b565b036128905761288d91614689565b50565b5f63334bd91960e11b8152806128a8600482016106c9565b0390fd5b906128b690610508565b5f5260205260405f2090565b90565b6128d96128d46128de92611c98565b6104dd565b61048a565b90565b6129189161290d612907612902612913946128fa611f1c565b50600a6128ac565b6128c2565b9161476a565b9061487f565b6128c5565b90565b906129359161293061292b61147c565b613da5565b612937565b565b908161295361294d6129485f611ebf565b61045b565b9161045b565b146129e3578061296b6129655f612223565b9161048a565b146129c75761298261297b61220d565b829061223f565b61299b612995612990611534565b61048a565b9161048a565b116129ab576129a991614136565b565b5f63177e3fc360e01b8152806129c3600482016106c9565b0390fd5b5f631f2a200560e01b8152806129df600482016106c9565b0390fd5b5f63d92e233d60e01b8152806129fb600482016106c9565b0390fd5b90612a099161291b565b565b80612a1e612a185f612223565b9161048a565b14612a2f57612a2d90336144c4565b565b5f631f2a200560e01b815280612a47600482016106c9565b0390fd5b67ffffffffffffffff8111612a6957612a6560209161075d565b0190565b61216a565b90612a80612a7b83612a4b565b6125cb565b918252565b5f7f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c74000000910152565b612ab6601d612a6e565b90612ac360208301612a85565b565b612acd612aac565b90565b612ad861207c565b50612ae16136ad565b612afa612af4612aef6149a6565b6115c2565b916115c2565b03612b0a57612b07612ac5565b90565b5f6301bfc1c560e61b815280612b22600482016106c9565b0390fd5b5f90565b90612b3490610508565b5f5260205260405f2090565b60018060a01b031690565b612b57612b5c91610c03565b612b40565b90565b612b699054612b4b565b90565b612b83612b8891612b7b612b26565b506009612b2a565b612b5f565b90565b90612ba591612ba0612b9b61185a565b613da5565b612bdd565b565b90612bb35f199161173d565b9181191691161790565b90612bd2612bcd612bd99261052a565b611ef7565b8254612ba7565b9055565b80612bf8612bf2612bed5f611ebf565b61045b565b9161045b565b14612cdd5781612c10612c0a5f612223565b9161048a565b14612cc157612c32612c2c612c25600e611ecb565b83906149bb565b1561064f565b612ca257612c5e82612c58612c496010859061098f565b91612c5383610c1c565b61223f565b90612bbd565b612c9d612c8b7f9ca03dbd5193fbb7974173cedd0bdf6841dd14c3cbfa735aab77ff1dd1139fb392610508565b92612c94610442565b918291826105b7565b0390a2565b612cbd905f918291636585b60d60e01b835260048301610ded565b0390fd5b5f631f2a200560e01b815280612cd9600482016106c9565b0390fd5b5f63d92e233d60e01b815280612cf5600482016106c9565b0390fd5b90612d0391612b8b565b565b60207f6f7574206f6620626f756e647300000000000000000000000000000000000000917f53796e646963617465546f6b656e43726f7373636861696e3a20696e646578205f8201520152565b612d5f602d604092610749565b612d6881612d05565b0190565b612d819060208101905f818303910152612d52565b90565b15612d8b57565b612d93610442565b62461bcd60e51b815280612da960048201612d6c565b0390fd5b612df690612db9612b26565b50612de781612de1612ddb612dd6612dd1600e611ecb565b6149f5565b61048a565b9161048a565b10612d84565b612df1600e611ecb565b614a44565b90565b612e0a90612e05613e3a565b614aba565b565b90612e279291612e22612e1d611d1f565b613da5565b612f03565b565b916020612e4a929493612e4360408201965f8301906105aa565b01906105aa565b565b612e5660606125cb565b90565b612e63905161064f565b90565b90612e7260ff9161173d565b9181191691161790565b612e859061064f565b90565b90565b90612ea0612e9b612ea792612e7c565b612e88565b8254612e66565b9055565b90612eef60406002612ef594612ece5f8201612ec85f88016126f2565b90612bbd565b612ee760018201612ee1602088016126f2565b90612bbd565b019201612e59565b90612e8b565b565b90612f0191612eab565b565b80612f1e612f18612f135f611ebf565b61045b565b9161045b565b146131345780612f36612f303361045b565b9161045b565b1461311857803b612f4f612f495f612223565b9161048a565b146130fc5781612f68612f625f1961048a565b9161048a565b1415806130db575b6130bf5782612f88612f825f1961048a565b9161048a565b14158061309e575b61308357612fa8612fa1600e611ecb565b8290614b45565b613038575b612ff282612fe185612fd8600191612fcf612fc6612e4c565b955f87016125af565b602085016125af565b604083016125bd565b612fed600d8490610bed565b612ef7565b909161301e7faa807d0abf30d91968c7478c66b6d82521a106af13eda036e2036da9af16895892610508565b9261303361302a610442565b92839283612e29565b0390a2565b808290846130667fdb03f97dc5840a71e69be7470e4761af10a1237973e81c12d0dc2813895a652692610508565b9261307b613072610442565b92839283612e29565b0390a2612fad565b5f6258ccad60e81b81528061309a600482016106c9565b0390fd5b50826130b96130b36130ae611534565b61048a565b9161048a565b11612f90565b5f630a395c0160e01b8152806130d7600482016106c9565b0390fd5b50816130f66130f06130eb611534565b61048a565b9161048a565b11612f70565b5f63412a18ed60e11b815280613114600482016106c9565b0390fd5b5f63fb8ce8c960e01b815280613130600482016106c9565b0390fd5b5f63d92e233d60e01b81528061314c600482016106c9565b0390fd5b9061315b9291612e0c565b565b613165611f1c565b50613178613173600e611ecb565b6149f5565b90565b5f90565b6131919061318b61317b565b50614b7f565b90565b6131aa6131af916131a3611f1c565b505f61098f565b610c1c565b90565b606090565b6131bf6131b2565b506131d26131cd600e611ecb565b614bae565b90565b6131dd611e1c565b506132056131f56131f0600d8490610bed565b61263e565b91613200600e611ecb565b6149bb565b9081613210575b5090565b61321d9150604001612e59565b5f61320c565b9061323d91613238613233611418565b613da5565b61323f565b565b8061325a61325461324f5f611ebf565b61045b565b9161045b565b1461331e578161327261326c5f612223565b9161048a565b14613302576132886132826133d3565b1561064f565b6132e6576132978183906144c4565b33906132e16132cf6132c97fbef4f81c1814c641ede85ebaacf19d048b2c5b55980adfa6ef0f956c651335a293610508565b93610508565b936132d8610442565b918291826105b7565b0390a3565b5f63b8b5ca2d60e01b8152806132fe600482016106c9565b0390fd5b5f631f2a200560e01b81528061331a600482016106c9565b0390fd5b5f63d92e233d60e01b815280613336600482016106c9565b0390fd5b9061334491613223565b565b61334e611f1c565b50613359600c610c1c565b61336b6133655f612223565b9161048a565b14801561339a575b61338e5761338b613384600c610c1c565b42906126cd565b90565b6133975f612223565b90565b50426133b76133b16133ac600c610c1c565b61048a565b9161048a565b1015613373565b6133d0906133ca611f1c565b50614bd6565b90565b6133db611e1c565b506133e6600c610c1c565b6133f86133f25f612223565b9161048a565b141580613403575b90565b504261342061341a613415600c610c1c565b61048a565b9161048a565b10613400565b61343f9061343a61343561175e565b613da5565b613441565b565b8061345461344e4261048a565b9161048a565b111561350a578061348d6134877f000000000000000000000000000000000000000000000000000000000000000061048a565b9161048a565b116134ee5761349c600c610c1c565b6134a782600c612bbd565b9033906134d47fdd6896dcf1d4b311cca87dd19bbba2ea9ce2f867c1568878a0438a66a1afeeec92610508565b926134e96134e0610442565b92839283612e29565b0390a2565b5f63ef69af6560e01b815280613506600482016106c9565b0390fd5b5f63a565835360e01b815280613522600482016106c9565b0390fd5b61352f90613426565b565b5f90565b606090565b613543906104fc565b90565b67ffffffffffffffff811161355e5760208091020190565b61216a565b9061357561357083613546565b6125cb565b918252565b369037565b906135a461358c83613563565b9260208061359a8693613546565b920191039061357a565b565b600f60f81b90565b6135b6613531565b506135bf61207c565b506135c861207c565b506135d1611f1c565b506135da612b26565b506135e361240e565b506135ec613535565b506135f5614bee565b906135fe614c2e565b90469061360a3061353a565b906136145f611742565b906136266136215f612223565b61357f565b9061362f6135a6565b96959493929190565b61366161366691613647611f1c565b5061365b613655600b6128c2565b9161476a565b9061487f565b6128c5565b90565b9061367390610508565b5f5260205260405f2090565b6136a6915f61369b6136a193613693611e1c565b50600561241e565b01613669565b610c43565b90565b5f90565b6136b56136a9565b506136be6149a6565b90565b6136c9611f1c565b506136de6136d9600d8390610bed565b61263e565b906136f4426136ee610e1061264d565b9061267d565b6136fd5f612223565b906137075f612223565b5b8061371c61371660186126b1565b9161048a565b1015613788578161373561372f8361048a565b9161048a565b101561374a575b6137459061269f565b613708565b916137806137459161377a61377561376460118990610514565b61376f8789906126cd565b90610546565b610c1c565b9061223f565b92905061373c565b505090506137975f83016126f2565b6137a96137a38361048a565b9161048a565b115f146137c7576137be5f6137c393016126f2565b6126cd565b5b90565b50506137d25f612223565b6137c4565b6137df61207c565b506137ea60046121c9565b90565b61381461380f61380a61381993613802611f1c565b50600a6128ac565b6128c2565b614c6e565b6128c5565b90565b61383991613828611e1c565b50613831613e3a565b91909161422e565b600190565b906138519161384b611f1c565b506128e1565b90565b61386690613860611f1c565b506137ed565b90565b613871611f1c565b5061387a61220d565b90565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf90565b6138d66138dd946138cc6060949897956138c2608086019a5f870190610938565b6020850190610de0565b60408301906105aa565b01906105aa565b565b60200190565b5190565b93959490929195426139036138fd8961048a565b9161048a565b1161397c579161396e916139759361396561397a989961394d61392461387d565b61393e8b938b613932610442565b958694602086016138a1565b6020820181038252038261217e565b61395f613959826138e5565b916138df565b20614ce3565b92909192614d00565b9182614d4a565b614aba565b565b613997875f918291632341d78760e11b8352600483016105b7565b0390fd5b5f90565b5f90565b6139ab6125e0565b9060208080846139b961399b565b8152016139c461399b565b8152016139cf61399f565b81525050565b6139dd6139a3565b90565b6139f76139fc916139ef6139d5565b50600d610bed565b61263e565b90565b90613a1991613a14613a0f611d1f565b613da5565b613a1b565b565b80613a36613a30613a2b5f611ebf565b61045b565b9161045b565b14613ad757613a58613a52613a4b600e611ecb565b83906149bb565b1561064f565b613ab857613a74826002613a6e600d8590610bed565b01612e8b565b613ab3613aa17f9c8668db324845065d2b9a2a183bd3141f63018f548282daf18da49ccbf88c3392610508565b92613aaa610442565b91829182610661565b0390a2565b613ad3905f918291636585b60d60e01b835260048301610ded565b0390fd5b5f63d92e233d60e01b815280613aef600482016106c9565b0390fd5b90613afd916139ff565b565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990565b9194613b6b613b7592989795613b6160a096613b57613b7c9a613b4d60c08a019e5f8b0190610938565b6020890190610de0565b6040870190610de0565b60608501906105aa565b60808301906105aa565b01906105aa565b565b916020613b9f929493613b9860408201965f830190610de0565b0190610de0565b565b969591939294909442613bbc613bb68361048a565b9161048a565b11613c765790613c25613c2e949392613c0d613bd6613aff565b613bfe8c80948c91613be88d91614d8d565b9192613bf2610442565b97889660208801613b23565b6020820181038252038261217e565b613c1f613c19826138e5565b916138df565b20614ce3565b92909192614d00565b80613c41613c3b8761045b565b9161045b565b03613c565750613c549293919091613e47565b565b8490613c725f9283926325c0072360e11b845260048401613b7e565b0390fd5b613c91905f91829163313c898160e11b8352600483016105b7565b0390fd5b90613cb091613cab613ca682612458565b613da5565b613cb2565b565b90613cbc91614689565b50565b90613cc991613c95565b565b90613cd590610508565b5f5260205260405f2090565b613d0691613cfc613d0192613cf4611f1c565b506001613ccb565b61098f565b610c1c565b90565b613d1360406125cb565b90565b5f90565b5f90565b613d26613d09565b9060208083613d33613d16565b815201613d3e613d1a565b81525050565b613d4c613d1e565b90565b90613d6291613d5c613d44565b50614dc0565b90565b613d6d611e1c565b5080613d88613d82637965db0b60e01b610602565b91610602565b14908115613d95575b5090565b613d9f9150614de8565b5f613d91565b613db790613db1613e3a565b90614e31565b565b613dc2906104e0565b90565b613dd9613dd4613dde92610450565b6104dd565b61048a565b90565b613df5613df0613dfa9261048a565b61173d565b6108f4565b90565b90565b90613e32613e2c613e27613e225f613e3796613e1a611e1c565b500194613db9565b613dc5565b613de1565b91613dfd565b614fae565b90565b613e42612b26565b503390565b91613e5592916001926150b4565b565b90565b604090613e83613e8a9496959396613e7960608401985f850190610de0565b60208301906105aa565b01906105aa565b565b613ea0613e9b600d8390610bed565b613e57565b91613ebe613eb8613eb1600e611ecb565b84906149bb565b1561064f565b8015614067575b61404857613ede42613ed8610e1061264d565b9061267d565b613ee75f612223565b91613ef15f612223565b5b80613f06613f0060186126b1565b9161048a565b1015613f725782613f1f613f198361048a565b9161048a565b1015613f34575b613f2f9061269f565b613ef2565b92613f6a613f2f91613f64613f5f613f4e60118a90610514565b613f59888a906126cd565b90610546565b610c1c565b9061223f565b939050613f26565b5091909293613f8282849061223f565b613f9e613f98613f935f8501610c1c565b61048a565b9161048a565b11613fd8575050613fc1613fd69392613fbc613fd093946011610514565b610546565b91613fcb83610c1c565b61223f565b90612bbd565b565b849350613fe65f8201610c1c565b613ff8613ff28461048a565b9161048a565b115f1461403557614031916140115f6140169301610c1c565b6126cd565b5b9291925f9384936340ed367b60e01b855260048501613e5a565b0390fd5b50506140316140435f612223565b614017565b614063825f918291636585b60d60e01b835260048301610ded565b0390fd5b5061407d61407760028501610c43565b1561064f565b613ec5565b6140966140916010839061098f565b610c1c565b6140a96140a3849261048a565b9161048a565b1161411a576140d6826140d06140c16010859061098f565b916140cb83610c1c565b6126cd565b90612bbd565b6141156141037fbc23ec7f1313150b047bff83d0845b0564baa134698dd11bb0acd0f7d416de7d92610508565b9261410c610442565b918291826105b7565b0390a2565b5f631eb7845760e21b815280614132600482016106c9565b0390fd5b8061415161414b6141465f611ebf565b61045b565b9161045b565b1461416d5761416b916141635f611ebf565b9190916151c3565b565b6141906141795f611ebf565b5f91829163ec442f0560e01b835260048301610ded565b0390fd5b9061419f910361048a565b90565b9291926141b0818390613ce1565b90816141c56141bf5f1961048a565b9161048a565b106141d2575b5050509050565b816141e56141df8761048a565b9161048a565b1061420b5761420293946141fa919392614194565b905f926150b4565b805f80806141cb565b5061422a849291925f938493637dc7a0d960e11b855260048501613e5a565b0390fd5b918261424a61424461423f5f611ebf565b61045b565b9161045b565b146142a4578161426a61426461425f5f611ebf565b61045b565b9161045b565b1461427d5761427b929190916151c3565b565b6142a06142895f611ebf565b5f91829163ec442f0560e01b835260048301610ded565b0390fd5b6142c76142b05f611ebf565b5f918291634b637e8f60e11b835260048301610ded565b0390fd5b6142df6142da600d8390610bed565b613e57565b916142fd6142f76142f0600e611ecb565b84906149bb565b1561064f565b80156144a9575b61448a5761431d42614317610e1061264d565b9061267d565b6143265f612223565b916143305f612223565b5b8061434561433f60186126b1565b9161048a565b10156143b1578261435e6143588361048a565b9161048a565b1015614373575b61436e9061269f565b614331565b926143a961436e916143a361439e61438d60128a90610514565b614398888a906126cd565b90610546565b610c1c565b9061223f565b939050614365565b50919092936143c182849061223f565b6143de6143d86143d360018501610c1c565b61048a565b9161048a565b1161441857505061440161441693926143fc61441093946012610514565b610546565b9161440b83610c1c565b61223f565b90612bbd565b565b84935061442760018201610c1c565b6144396144338461048a565b9161048a565b115f14614477576144739161445360016144589301610c1c565b6126cd565b5b9291925f9384936372ff4bd160e11b855260048501613e5a565b0390fd5b50506144736144855f612223565b614459565b6144a5825f918291636585b60d60e01b835260048301610ded565b0390fd5b506144bf6144b960028501610c43565b1561064f565b614304565b90816144e06144da6144d55f611ebf565b61045b565b9161045b565b146144fc576144fa91906144f35f611ebf565b90916151c3565b565b61451f6145085f611ebf565b5f918291634b637e8f60e11b835260048301610ded565b0390fd5b61452b611e1c565b5061454061453a82849061367f565b1561064f565b5f146145c95761456860016145635f61455b6005869061241e565b018590613669565b612e8b565b90614571613e3a565b906145ae6145a86145a27f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95612412565b92610508565b92610508565b926145b7610442565b806145c1816106c9565b0390a4600190565b50505f90565b6145d761240e565b506145e13061353a565b61461361460d7f000000000000000000000000000000000000000000000000000000000000000061045b565b9161045b565b148061464f575b5f14614644577f000000000000000000000000000000000000000000000000000000000000000090565b61464c6152de565b90565b504661468361467d7f000000000000000000000000000000000000000000000000000000000000000061048a565b9161048a565b1461461a565b614691611e1c565b5061469d81839061367f565b5f14614725576146c45f6146bf5f6146b76005869061241e565b018590613669565b612e8b565b906146cd613e3a565b9061470a6147046146fe7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95612412565b92610508565b92610508565b92614713610442565b8061471d816106c9565b0390a4600190565b50505f90565b61473f61473a614744926115c2565b6104dd565b61048a565b90565b91602061476892949361476160408201965f8301906105aa565b01906115cd565b565b6147726136a9565b5061477b6136ad565b8161478e6147888361472b565b9161048a565b10156147a1575061479e906153e7565b90565b906147bc5f928392637669fc0f60e11b845260048401614747565b0390fd5b5490565b90565b6147db6147d66147e0926147c4565b6104dd565b61048a565b90565b90565b65ffffffffffff1690565b6147fd61480291610c03565b6147e6565b90565b61480f90546147f1565b90565b90565b61482961482461482e92614812565b6104dd565b61048a565b90565b60301c90565b60018060d01b031690565b61484e61485391614831565b614837565b90565b6148609054614842565b90565b61487761487261487c9261173a565b6104dd565b611c98565b90565b906148d39061488c611d87565b506148985f84016147c0565b6148a15f612223565b9080806148b76148b160056147c7565b9161048a565b11614934575b50906148ce5f8601939192936147e3565b615a22565b806148e66148e05f612223565b9161048a565b145f146148fc5750506148f85f614863565b5b90565b6149295f9161492461491e8461492f9601926149186001614815565b906126cd565b916147e3565b615a18565b01614856565b6148f9565b8061494261494892916156ad565b906126cd565b908361497a61497461496f5f614969818c0161496489916147e3565b615a18565b01614805565b6115c2565b916115c2565b105f1461498b5750905b905f6148bd565b91506149a19061499b6001614815565b9061223f565b614984565b6149ae6136a9565b506149b8436153e7565b90565b906149ed6149e76149e26149dd5f6149f2966149d5611e1c565b500194613db9565b613dc5565b613de1565b91613dfd565b615ab1565b90565b614a0c5f614a1192614a05611f1c565b5001613dfd565b615ae6565b90565b614a20614a2591610c03565b61052a565b90565b614a3c614a37614a419261048a565b6104dd565b610450565b90565b614a6f614a6a614a7993614a655f614a7495614a5e612b26565b5001613dfd565b615afd565b614a14565b614a28565b6104fc565b90565b90614a8d60018060a01b039161173d565b9181191691161790565b90565b90614aaf614aaa614ab692610508565b614a97565b8254614a7c565b9055565b90614b4391614b3d614acb82612b6c565b614ae084614adb60098690612b2a565b614a9a565b82818590614b20614b1a614b147f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f95610508565b92610508565b92610508565b92614b29610442565b80614b33816106c9565b0390a49291615b1e565b91615b36565b565b90614b77614b71614b6c614b675f614b7c96614b5f611e1c565b500194613db9565b613dc5565b613de1565b91613dfd565b615d19565b90565b614ba6614ba1614b9c614bab93614b9461317b565b50600a6128ac565b6128c2565b615d7c565b615dfb565b90565b614bc55f614bca92614bbe6131b2565b5001613dfd565b615f1d565b614bd26131b2565b5090565b614be890614be2611f1c565b50615f34565b90565b90565b614bf661207c565b50614c2b7f0000000000000000000000000000000000000000000000000000000000000000614c256006614beb565b9061604f565b90565b614c3661207c565b50614c6b7f0000000000000000000000000000000000000000000000000000000000000000614c656007614beb565b9061604f565b90565b614c76611d87565b50614c825f82016147c0565b80614c95614c8f5f612223565b9161048a565b145f14614cab575050614ca75f614863565b5b90565b614cd85f91614cd3614ccd84614cde960192614cc76001614815565b906126cd565b916147e3565b615a18565b01614856565b614ca8565b614cfd90614cef61240e565b50614cf86145cf565b61609d565b90565b92614d1b92614d2494614d11612b26565b509290919261614f565b9092919261627a565b90565b916020614d48929493614d4160408201965f830190610de0565b01906105aa565b565b614d5381614d8d565b91614d66614d608461048a565b9161048a565b03614d6f575050565b614d895f9283926301d4b62360e61b845260048401614d27565b0390fd5b614da190614d99611f1c565b50600861098f565b614dbd614dad82610c1c565b91614db78361269f565b90612bbd565b90565b90614de0614ddb614de593614dd3613d44565b50600a6128ac565b6128c2565b6163dc565b90565b614df0611e1c565b50614e0a614e046301ffc9a760e01b610602565b91610602565b1490565b916020614e2f929493614e2860408201965f830190610de0565b0190610938565b565b90614e46614e4083839061367f565b1561064f565b614e4e575050565b614e685f92839263e2517d3f60e01b845260048401614e0e565b0390fd5b90614e7690612412565b5f5260205260405f2090565b5490565b634e487b7160e01b5f52603260045260245ffd5b5f5260205f2090565b614eac81614e82565b821015614ec657614ebe600191614e9a565b910201905f90565b614e86565b614edb906008614ee0930261055c565b612434565b90565b90614eee9154614ecb565b90565b614efa90610c03565b90565b9190614f13614f0e614f1b93612412565b614ef1565b908354611ed2565b9055565b90565b634e487b7160e01b5f52603160045260245ffd5b5490565b5f5260205f2090565b614f4c81614f36565b821015614f6657614f5e600191614f3a565b910201905f90565b614e86565b614f7d91614f7761240e565b91614efd565b565b614f8881614f36565b8015614fa9576001900390614fa6614fa08383614f43565b90614f6b565b55565b614f22565b614fb6611e1c565b50614fcd614fc8600183018490614e6c565b610c1c565b9081614fe1614fdb5f612223565b9161048a565b14155f146150ad5761505f92600161505a92846150085f9661500285614815565b906126cd565b615025615016888501614e82565b61501f86614815565b906126cd565b816150386150328361048a565b9161048a565b03615064575b50505061505461504f868301614f1f565b614f7f565b01614e6c565b611f20565b600190565b6150a59261509761508361507d6150a0948c8901614ea3565b90614ee3565b9361509185918c8901614ea3565b90614efd565b91858501614e6c565b612bbd565b5f808061503e565b5050505f90565b9092816150d16150cb6150c65f611ebf565b61045b565b9161045b565b1461519c57836150f16150eb6150e65f611ebf565b61045b565b9161045b565b14615175576151158361511061510960018690613ccb565b879061098f565b612bbd565b61511f575b505050565b91909161516a6151586151527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610508565b93610508565b93615161610442565b918291826105b7565b0390a35f808061511a565b6151986151815f611ebf565b5f918291634a1406b160e11b835260048301610ded565b0390fd5b6151bf6151a85f611ebf565b5f91829163e602df0560e01b835260048301610ded565b0390fd5b91826151df6151d96151d45f611ebf565b61045b565b9161045b565b14158061524a575b6151fa575b6151f8929190916163fd565b565b6152026133d3565b80615229575b156151ec575f6336e278fd60e21b815280615225600482016106c9565b0390fd5b5061524561523f615238611418565b339061367f565b1561064f565b615208565b508161526661526061525b5f611ebf565b61045b565b9161045b565b14156151e7565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90565b909594926152dc946152cb6152d5926152c16080966152b760a088019c5f890190610938565b6020870190610938565b6040850190610938565b60608301906105aa565b0190610de0565b565b6152e661240e565b506152ef61526d565b6153667f0000000000000000000000000000000000000000000000000000000000000000916153577f0000000000000000000000000000000000000000000000000000000000000000466153423061353a565b9161534b610442565b96879560208701615291565b6020820181038252038261217e565b615378615372826138e5565b916138df565b2090565b90565b61539361538e6153989261537c565b6104dd565b610abd565b90565b6153a49061537f565b9052565b9160206153c99294936153c260408201965f83019061539b565b01906105aa565b565b6153df6153da6153e49261048a565b6104dd565b6115c2565b90565b6153ef6136a9565b508061540961540365ffffffffffff61472b565b9161048a565b1161541a57615417906153cb565b90565b60306154365f9283926306dfcc6560e41b8452600484016153a8565b0390fd5b90565b61545161544c6154569261543a565b6104dd565b61048a565b90565b90565b61547061546b61547592615459565b6104dd565b610abd565b90565b6154979061549161548b61549c94610abd565b9161048a565b9061055c565b61048a565b90565b90565b6154b66154b16154bb9261549f565b6104dd565b610abd565b90565b6154dd906154d76154d16154e294610abd565b9161048a565b90611ece565b61048a565b90565b90565b6154fc6154f7615501926154e5565b6104dd565b61048a565b90565b90565b61551b61551661552092615504565b6104dd565b610abd565b90565b90565b61553a61553561553f92615523565b6104dd565b61048a565b90565b90565b61555961555461555e92615542565b6104dd565b610abd565b90565b90565b61557861557361557d92615561565b6104dd565b61048a565b90565b90565b61559761559261559c92615580565b6104dd565b610abd565b90565b90565b6155b66155b16155bb9261559f565b6104dd565b61048a565b90565b90565b6155d56155d06155da926155be565b6104dd565b610abd565b90565b6155f16155ec6155f692615542565b6104dd565b61048a565b90565b90565b61561061560b615615926155f9565b6104dd565b610abd565b90565b61562c615627615631926155be565b6104dd565b61048a565b90565b61564861564361564d92614812565b6104dd565b610abd565b90565b90565b61566761566261566c92615650565b6104dd565b61048a565b90565b9061567a910261048a565b90565b61568961568f9161048a565b9161048a565b90811561569a570490565b612669565b906156aa910161048a565b90565b6156b5611f1c565b50806156ca6156c46001614815565b9161048a565b1115615a1557806158df6158bc6158ac61589c61588c61587c61586c61585c61584c61583c61582c8b61582661581f6158e59f6157ff6157ef61580f926157116001614815565b9080615729615723600160801b61543d565b9161048a565b10156159e7575b8061574c615746680100000000000000006154e8565b9161048a565b10156159b9575b8061576b615765640100000000615526565b9161048a565b101561598b575b8061578861578262010000615564565b9161048a565b101561595d575b806157a461579e6101006155a2565b9161048a565b101561592f575b806157bf6157b960106155dd565b9161048a565b1015615901575b6157d96157d36004615618565b9161048a565b10156158e8575b6157ea6003615653565b61566f565b6157f96001615634565b90615478565b615809818661567d565b9061569f565b6158196001615634565b90615478565b809261567d565b9061569f565b6158366001615634565b90615478565b615846818c61567d565b9061569f565b6158566001615634565b90615478565b615866818a61567d565b9061569f565b6158766001615634565b90615478565b615886818861567d565b9061569f565b6158966001615634565b90615478565b6158a6818661567d565b9061569f565b6158b66001615634565b90615478565b916158d96158d36158ce85809461567d565b61048a565b9161048a565b1161648d565b90614194565b90565b6158fc906158f66001615634565b906154be565b6157e0565b6159186159299161591260046155c1565b90615478565b9161592360026155fc565b906154be565b906157c6565b615946615957916159406008615583565b90615478565b9161595160046155c1565b906154be565b906157ab565b6159746159859161596e6010615545565b90615478565b9161597f6008615583565b906154be565b9061578f565b6159a26159b39161599c6020615507565b90615478565b916159ad6010615545565b906154be565b90615772565b6159d06159e1916159ca60406154a2565b90615478565b916159db6020615507565b906154be565b90615753565b6159fe615a0f916159f8608061545c565b90615478565b91615a0960406154a2565b906154be565b90615730565b90565b5f5260205f200190565b93919092615a2e611f1c565b505b81615a43615a3d8361048a565b9161048a565b1015615aa957615a548282906164b7565b90615a6a5f615a64888590615a18565b01614805565b615a7c615a76876115c2565b916115c2565b115f14615a8c5750915b91615a30565b929150615aa390615a9d6001614815565b9061223f565b90615a86565b925050915090565b615acf916001615aca92615ac3611e1c565b5001614e6c565b610c1c565b615ae1615adb5f612223565b9161048a565b141590565b5f615afa91615af3611f1c565b5001614e82565b90565b615b1b915f615b1592615b0e61240e565b5001614ea3565b90614ee3565b90565b615b3090615b2a611f1c565b50613194565b90565b90565b91909180615b4c615b468561045b565b9161045b565b141580615cca575b615b5e575b505050565b80615b79615b73615b6e5f611ebf565b61045b565b9161045b565b03615c3a575b5081615b9b615b95615b905f611ebf565b61045b565b9161045b565b03615ba7575b80615b59565b615bee615be1615be892615bbd600a86906128ac565b90615bdb615bd5615bcf600193616550565b936128c2565b91615b33565b906165a3565b92906128c5565b916128c5565b919091615c1b7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610508565b92615c30615c27610442565b92839283612e29565b0390a25f80615ba1565b615c79615c7f615c72615c4f600a85906128ac565b6002615c6c615c66615c6089616550565b936128c2565b91615b33565b906165a3565b92906128c5565b916128c5565b919091615cac7fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72492610508565b92615cc1615cb8610442565b92839283612e29565b0390a25f615b7f565b5081615cde615cd85f612223565b9161048a565b11615b54565b9081549168010000000000000000831015615d145782615d0c916001615d1295018155614f43565b90614efd565b565b61216a565b615d21611e1c565b50615d36615d30828490615ab1565b1561064f565b5f14615d7657615d6c615d7192615d58615d515f8501614f1f565b8290615ce4565b6001615d655f8501614e82565b9301614e6c565b612bbd565b600190565b50505f90565b5f615d9091615d89611f1c565b50016147c0565b90565b615da7615da2615dac92610fcd565b6104dd565b61048a565b90565b615db890615507565b9052565b916020615ddd929493615dd660408201965f830190615daf565b01906105aa565b565b615df3615dee615df89261048a565b6104dd565b610fcd565b90565b615e0361317b565b5080615e1b615e1563ffffffff615d93565b9161048a565b11615e2c57615e2990615ddf565b90565b6020615e485f9283926306dfcc6560e41b845260048401615dbc565b0390fd5b606090565b60209181520190565b615e63906108f4565b9052565b90615e7481602093615e5a565b0190565b615e829054612437565b90565b60010190565b90615ea8615ea2615e9b84614e82565b8093615e51565b92614e9a565b905f5b818110615eb85750505090565b909192615ed8615ed2600192615ecd87615e78565b615e67565b94615e85565b9101919091615eab565b90615eec91615e8b565b90565b90615f0f615f0892615eff610442565b93848092615ee2565b038361217e565b565b615f1a90615eef565b90565b5f615f3191615f2a615e4c565b5001615f11565b90565b615f4b615f5091615f43611f1c565b50600861098f565b610c1c565b90565b90565b615f6a615f65615f6f92615f53565b61173d565b6108f4565b90565b615f7c60ff615f56565b90565b5f5260205f2090565b905f9291805490615fa2615f9b83612095565b80946120bf565b916001811690815f14615ff95750600114615fbd575b505050565b615fca9192939450615f7f565b915f925b818410615fe157505001905f8080615fb8565b60018160209295939554848601520191019290615fce565b92949550505060ff19168252151560200201905f8080615fb8565b9061601e91615f88565b90565b9061604161603a92616031610442565b93848092616014565b038361217e565b565b61604c90616021565b90565b9061605861207c565b5061606282612412565b61607b616075616070615f72565b6108f4565b916108f4565b14155f14616090575061608d9061662d565b90565b61609a9150616043565b90565b6042916160a861240e565b50604051917f19010000000000000000000000000000000000000000000000000000000000008352600283015260228201522090565b5f90565b90565b6160f96160f46160fe926160e2565b6104dd565b61048a565b90565b61613661613d9461612c606094989795616122608086019a5f870190610938565b6020850190610ac3565b6040830190610938565b0190610938565b565b616147610442565b3d5f823e3d90fd5b93929361615a612b26565b506161636160de565b5061616c61240e565b5061617685614a14565b6161a86161a27f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06160e5565b9161048a565b1161623557906161cb602094955f949392936161c2610442565b94859485616101565b838052039060015afa15616230576161e35f5161173d565b806161fe6161f86161f35f611ebf565b61045b565b9161045b565b14616214575f9161620e5f611742565b91929190565b5061621e5f611ebf565b60019161622a5f611742565b91929190565b61613f565b5050506162415f611ebf565b9060039291929190565b634e487b7160e01b5f52602160045260245ffd5b6004111561626957565b61624b565b906162788261625f565b565b8061628d6162875f61626e565b9161626e565b145f14616298575050565b806162ac6162a6600161626e565b9161626e565b145f146162cf575f63f645eedf60e01b8152806162cb600482016106c9565b0390fd5b806162e36162dd600261626e565b9161626e565b145f146163115761630d6162f683614a14565b5f91829163fce698f760e01b8352600483016105b7565b0390fd5b61632461631e600361626e565b9161626e565b1461632c5750565b616347905f9182916335e2f38360e21b835260048301610945565b0390fd5b5f5260205f2090565b61635d816147c0565b8210156163775761636f60019161634b565b910201905f90565b614e86565b90616386906115c2565b9052565b9061639490611c98565b9052565b906163ce6163c55f6163a8613d09565b946163bf6163b7838301614805565b83880161637c565b01614856565b6020840161638a565b565b6163d990616398565b90565b6163fa915f6163f4926163ed613d44565b5001616354565b506163d0565b90565b929161640b8483839161665d565b8361642661642061641b5f611ebf565b61045b565b9161045b565b1461643b575b61643992939190916167e7565b565b61644361220d565b9361644c6167cc565b948061646061645a8861048a565b9161048a565b1161646d5750935061642c565b85906164895f928392630e58ae9360e11b845260048401612e29565b0390fd5b616495611f1c565b50151590565b6164af6164aa6164b4926155f9565b6104dd565b61048a565b90565b6164dc6164e2926164c6611f1c565b5082811692186164d6600261649b565b9061267d565b9061223f565b90565b90565b6164fc6164f7616501926164e5565b6104dd565b610abd565b90565b61650d906164e8565b9052565b91602061653292949361652b60408201965f830190616504565b01906105aa565b565b61654861654361654d9261048a565b6104dd565b611c98565b90565b616558611d87565b508061657261656c60018060d01b036128c5565b9161048a565b116165835761658090616534565b90565b60d061659f5f9283926306dfcc6560e41b845260048401616511565b0390fd5b906165d96165df93926165b4611d87565b506165bd611d87565b5080936165d26165cb6136ad565b9492614c6e565b9091616c4f565b916168a6565b91909190565b6165f96165f46165fe92615504565b6104dd565b61048a565b90565b369037565b9061662b61661383612a6e565b926020806166218693612a4b565b9201910390616601565b565b61663561207c565b5061663f81616910565b9061665261664d60206165e5565b616606565b918252602082015290565b9190918061667b6166756166705f611ebf565b61045b565b9161045b565b145f1461675c5761669f616698836166936002610c1c565b61223f565b6002612bbd565b5b826166bb6166b56166b05f611ebf565b61045b565b9161045b565b145f14616730576166df6166d8836166d36002610c1c565b614194565b6002612bbd565b5b91909161672b6167196167137fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610508565b93610508565b93616722610442565b918291826105b7565b0390a3565b616757826167516167425f879061098f565b9161674c83610c1c565b61569f565b90612bbd565b6166e0565b61676f61676a5f839061098f565b610c1c565b8061678261677c8561048a565b9161048a565b106167aa576167956167a5918490614194565b6167a05f849061098f565b612bbd565b6166a0565b906167c89091925f93849363391434e360e21b855260048501613e5a565b0390fd5b6167d4611f1c565b506167e460018060d01b036128c5565b90565b9161683f616839616846948061680d6168076168025f611ebf565b61045b565b9161045b565b14616877575b8461682e6168286168235f611ebf565b61045b565b9161045b565b14616848575b612b6c565b92612b6c565b9091615b36565b565b616870600b600261686a61686461685e89616550565b936128c2565b91615b33565b906165a3565b5050616834565b61689f600b600161689961689361688d89616550565b936128c2565b91615b33565b906165a3565b5050616813565b916168ca5f6168cf946168b7611d87565b506168c0611d87565b50019291926147e3565b616b01565b91909190565b6168e96168e46168ee92615f53565b6104dd565b61048a565b90565b90565b61690861690361690d926168f1565b6104dd565b61048a565b90565b61692561692a9161691f611f1c565b50612412565b614a14565b61693460ff6168d5565b1680616949616943601f6168f4565b9161048a565b116169515790565b5f632cd44ac360e21b815280616969600482016106c9565b0390fd5b5490565b61697b60406125cb565b90565b5f5260205f2090565b6169908161696d565b8210156169aa576169a260019161697e565b910201905f90565b614e86565b6169b990516115c2565b90565b906169cd65ffffffffffff9161173d565b9181191691161790565b6169eb6169e66169f0926115c2565b6104dd565b6115c2565b90565b90565b90616a0b616a06616a12926169d7565b6169f3565b82546169bc565b9055565b616a209051611c98565b90565b60301b90565b90616a3b65ffffffffffff1991616a23565b9181191691161790565b616a59616a54616a5e92611c98565b6104dd565b611c98565b90565b90565b90616a79616a74616a8092616a45565b616a61565b8254616a29565b9055565b90616aae60205f616ab494616aa6828201616aa08488016169af565b906169f6565b019201616a16565b90616a64565b565b9190616ac757616ac591616a84565b565b611f55565b9081549168010000000000000000831015616afc5782616af4916001616afa95018155616987565b90616ab6565b565b61216a565b90929192616b0d611d87565b50616b16611d87565b50616b208261696d565b80616b33616b2d5f612223565b9161048a565b115f14616c0357616b5990616b538491616b4d6001614815565b906126cd565b90615a18565b90616b655f8301614805565b92616b715f8401614856565b9380616b85616b7f856115c2565b916115c2565b11616be757616b9c616b96846115c2565b916115c2565b145f14616bb7575050616bb2905f859101616a64565b5b9190565b616be29250616bdd86616bd4616bcb616971565b945f860161637c565b6020840161638a565b616acc565b616bb3565b5f632520601d60e01b815280616bff600482016106c9565b0390fd5b50616c2e91616c2985616c20616c17616971565b945f860161637c565b6020840161638a565b616acc565b616c375f614863565b9190565b634e487b7160e01b5f52605160045260245ffd5b91909180600114616c6e57600203616c3b57616c6a91611e06565b905b565b50616c7891611dc7565b90616c6c56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x1D\x83V[a\0\x1D_5a\x04<V[\x80c\x01\x04-z\x14a\x047W\x80c\x01\xFF\xC9\xA7\x14a\x042W\x80c\x04\xDF\x01}\x14a\x04-W\x80c\x05\x072\xFB\x14a\x04(W\x80c\x06\xFD\xDE\x03\x14a\x04#W\x80c\t^\xA7\xB3\x14a\x04\x1EW\x80c\x18\x16\r\xDD\x14a\x04\x19W\x80c\x18\xBFPw\x14a\x04\x14W\x80c#\xB8r\xDD\x14a\x04\x0FW\x80c$\x8A\x9C\xA3\x14a\x04\nW\x80c(i6k\x14a\x04\x05W\x80c+\x8CI\xE3\x14a\x04\0W\x80c//\xF1]\x14a\x03\xFBW\x80c0\xD3\xE8\xEB\x14a\x03\xF6W\x80c1<\xE5g\x14a\x03\xF1W\x80c6D\xE5\x15\x14a\x03\xECW\x80c6V\x8A\xBE\x14a\x03\xE7W\x80c:F\xB1\xA8\x14a\x03\xE2W\x80c@\xC1\x0F\x19\x14a\x03\xDDW\x80cBz\xC0\xCA\x14a\x03\xD8W\x80cB\x96lh\x14a\x03\xD3W\x80cK\xF5\xD7\xE9\x14a\x03\xCEW\x80cO\x1B\xFC\x9E\x14a\x03\xC9W\x80cX|\xDE\x1E\x14a\x03\xC4W\x80cZB9\xE9\x14a\x03\xBFW\x80cZ]\xB1\xBB\x14a\x03\xBAW\x80c\\\x19\xA9\\\x14a\x03\xB5W\x80c]Lb\x85\x14a\x03\xB0W\x80cc\xA0\xDA\xAC\x14a\x03\xABW\x80ce\x14U4\x14a\x03\xA6W\x80co\xCF\xFFE\x14a\x03\xA1W\x80cp\xA0\x821\x14a\x03\x9CW\x80cr\xCB\xDC\xC8\x14a\x03\x97W\x80cx\xFB\x7F\xD2\x14a\x03\x92W\x80cy\xCCg\x90\x14a\x03\x8DW\x80cz\x8C\xD1V\x14a\x03\x88W\x80c~\xCE\xBE\0\x14a\x03\x83W\x80c\x83\xF1!\x1B\x14a\x03~W\x80c\x84&\xAD\xF2\x14a\x03yW\x80c\x84L\x90&\x14a\x03tW\x80c\x84\xB0\x19n\x14a\x03oW\x80c\x8AT%!\x14a\x03jW\x80c\x8D3C\xD6\x14a\x03eW\x80c\x8ES\x9E\x8C\x14a\x03`W\x80c\x90-U\xA5\x14a\x03[W\x80c\x91\xD1HT\x14a\x03VW\x80c\x91\xDD\xAD\xF4\x14a\x03QW\x80c\x94\xAA\"\xF2\x14a\x03LW\x80c\x95\xD8\x9BA\x14a\x03GW\x80c\x9A\xB2N\xB0\x14a\x03BW\x80c\x9B~\xF6K\x14a\x03=W\x80c\xA2\x17\xFD\xDF\x14a\x038W\x80c\xA9\x05\x9C\xBB\x14a\x033W\x80c\xAA\x08*\x9D\x14a\x03.W\x80c\xB0\xCA%>\x14a\x03)W\x80c\xB7\xCD\xC6\x1C\x14a\x03$W\x80c\xBBMD6\x14a\x03\x1FW\x80c\xC0*\xE7T\x14a\x03\x1AW\x80c\xC3\xCD\xA5 \x14a\x03\x15W\x80c\xC4\xFCE\xA8\x14a\x03\x10W\x80c\xC9\xAB\0\x06\x14a\x03\x0BW\x80c\xD5\x05\xAC\xCF\x14a\x03\x06W\x80c\xD5Gt\x1F\x14a\x03\x01W\x80c\xDDb\xED>\x14a\x02\xFCW\x80c\xF1\x12~\xD8\x14a\x02\xF7Wc\xF7^\x85\x12\x03a\0\x0EWa\x1DNV[a\x1C\xE9V[a\x1C\x05V[a\x1B\xA4V[a\x1BjV[a\x1A\xC6V[a\x1AAV[a\x19\xAFV[a\x18\xF3V[a\x18\xBEV[a\x18\x89V[a\x18$V[a\x17\xEFV[a\x17\xAAV[a\x17uV[a\x17\x05V[a\x16\x8EV[a\x16YV[a\x16$V[a\x15\xEFV[a\x15\x8CV[a\x15WV[a\x14\xE0V[a\x14\xABV[a\x14GV[a\x13\xDCV[a\x12\x97V[a\x12bV[a\x12\tV[a\x11\xD4V[a\x11\x9FV[a\x11kV[a\x116V[a\x11\x01V[a\x10-V[a\x0F\xF8V[a\x0F\x98V[a\x0FdV[a\x0E\xF4V[a\x0E\xA0V[a\x0EkV[a\x0E7V[a\x0E\x02V[a\r\xABV[a\r=V[a\r\nV[a\x0C\xB4V[a\x0B\xB9V[a\x0B\x83V[a\x0BOV[a\x0B\x1AV[a\n\xE5V[a\n\x88V[a\nTV[a\t\xF3V[a\t\xBEV[a\tZV[a\x08\xBEV[a\x08PV[a\x08\x1BV[a\x07\xE5V[a\x07\xB0V[a\x07\x01V[a\x06\xCEV[a\x06vV[a\x05\xCCV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04d\x90a\x04PV[\x90V[a\x04p\x81a\x04[V[\x03a\x04wWV[_\x80\xFD[\x90P5\x90a\x04\x88\x82a\x04gV[V[\x90V[a\x04\x96\x81a\x04\x8AV[\x03a\x04\x9DWV[_\x80\xFD[\x90P5\x90a\x04\xAE\x82a\x04\x8DV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xD8W\x80a\x04\xCCa\x04\xD5\x92_\x86\x01a\x04{V[\x93` \x01a\x04\xA1V[\x90V[a\x04LV[\x90V[a\x04\xF4a\x04\xEFa\x04\xF9\x92a\x04PV[a\x04\xDDV[a\x04PV[\x90V[a\x05\x05\x90a\x04\xE0V[\x90V[a\x05\x11\x90a\x04\xFCV[\x90V[\x90a\x05\x1E\x90a\x05\x08V[_R` R`@_ \x90V[a\x05>a\x059a\x05C\x92a\x04\x8AV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90a\x05P\x90a\x05*V[_R` R`@_ \x90V[\x1C\x90V[\x90V[a\x05s\x90`\x08a\x05x\x93\x02a\x05\\V[a\x05`V[\x90V[\x90a\x05\x86\x91Ta\x05cV[\x90V[a\x05\xA2a\x05\xA7\x92a\x05\x9D`\x11\x93_\x94a\x05\x14V[a\x05FV[a\x05{V[\x90V[a\x05\xB3\x90a\x04\x8AV[\x90RV[\x91\x90a\x05\xCA\x90_` \x85\x01\x94\x01\x90a\x05\xAAV[V[4a\x05\xFDWa\x05\xF9a\x05\xE8a\x05\xE26`\x04a\x04\xB0V[\x90a\x05\x89V[a\x05\xF0a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x06\x17\x81a\x06\x02V[\x03a\x06\x1EWV[_\x80\xFD[\x90P5\x90a\x06/\x82a\x06\x0EV[V[\x90` \x82\x82\x03\x12a\x06JWa\x06G\x91_\x01a\x06\"V[\x90V[a\x04LV[\x15\x15\x90V[a\x06]\x90a\x06OV[\x90RV[\x91\x90a\x06t\x90_` \x85\x01\x94\x01\x90a\x06TV[V[4a\x06\xA6Wa\x06\xA2a\x06\x91a\x06\x8C6`\x04a\x061V[a\x1E V[a\x06\x99a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[\x90` \x82\x82\x03\x12a\x06\xC4Wa\x06\xC1\x91_\x01a\x04{V[\x90V[a\x04LV[_\x01\x90V[4a\x06\xFCWa\x06\xE6a\x06\xE16`\x04a\x06\xABV[a RV[a\x06\xEEa\x04BV[\x80a\x06\xF8\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x071Wa\x07-a\x07\x1Ca\x07\x176`\x04a\x06\xABV[a ]V[a\x07$a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[_\x91\x03\x12a\x07@WV[a\x04LV[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[`\x1F\x80\x19\x91\x01\x16\x90V[a\x07\x86a\x07\x8F` \x93a\x07\x94\x93a\x07}\x81a\x07EV[\x93\x84\x80\x93a\x07IV[\x95\x86\x91\x01a\x07RV[a\x07]V[\x01\x90V[a\x07\xAD\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x07gV[\x90V[4a\x07\xE0Wa\x07\xC06`\x04a\x076V[a\x07\xDCa\x07\xCBa!\xD5V[a\x07\xD3a\x04BV[\x91\x82\x91\x82a\x07\x98V[\x03\x90\xF3[a\x04HV[4a\x08\x16Wa\x08\x12a\x08\x01a\x07\xFB6`\x04a\x04\xB0V[\x90a!\xEBV[a\x08\ta\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[4a\x08KWa\x08+6`\x04a\x076V[a\x08Ga\x086a\"\rV[a\x08>a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x08\x7FWa\x08ia\x08c6`\x04a\x04\xB0V[\x90a\"dV[a\x08qa\x04BV[\x80a\x08{\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x90\x91``\x82\x84\x03\x12a\x08\xB9Wa\x08\xB6a\x08\x9F\x84_\x85\x01a\x04{V[\x93a\x08\xAD\x81` \x86\x01a\x04{V[\x93`@\x01a\x04\xA1V[\x90V[a\x04LV[4a\x08\xEFWa\x08\xEBa\x08\xDAa\x08\xD46`\x04a\x08\x84V[\x91a#\xDFV[a\x08\xE2a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[\x90V[a\t\0\x81a\x08\xF4V[\x03a\t\x07WV[_\x80\xFD[\x90P5\x90a\t\x18\x82a\x08\xF7V[V[\x90` \x82\x82\x03\x12a\t3Wa\t0\x91_\x01a\t\x0BV[\x90V[a\x04LV[a\tA\x90a\x08\xF4V[\x90RV[\x91\x90a\tX\x90_` \x85\x01\x94\x01\x90a\t8V[V[4a\t\x8AWa\t\x86a\tua\tp6`\x04a\t\x1AV[a$XV[a\t}a\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[\x90a\t\x99\x90a\x05\x08V[_R` R`@_ \x90V[a\t\xBB\x90a\t\xB6`\x10\x91_\x92a\t\x8FV[a\x05{V[\x90V[4a\t\xEEWa\t\xEAa\t\xD9a\t\xD46`\x04a\x06\xABV[a\t\xA5V[a\t\xE1a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\n\"Wa\n\x0Ca\n\x066`\x04a\x04\xB0V[\x90a$zV[a\n\x14a\x04BV[\x80a\n\x1E\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x91\x90`@\x83\x82\x03\x12a\nOW\x80a\nCa\nL\x92_\x86\x01a\t\x0BV[\x93` \x01a\x04{V[\x90V[a\x04LV[4a\n\x83Wa\nma\ng6`\x04a\n'V[\x90a%\xA3V[a\nua\x04BV[\x80a\n\x7F\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\n\xB8Wa\n\xB4a\n\xA3a\n\x9E6`\x04a\x06\xABV[a&\xFFV[a\n\xABa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[`\xFF\x16\x90V[a\n\xCC\x90a\n\xBDV[\x90RV[\x91\x90a\n\xE3\x90_` \x85\x01\x94\x01\x90a\n\xC3V[V[4a\x0B\x15Wa\n\xF56`\x04a\x076V[a\x0B\x11a\x0B\0a(:V[a\x0B\x08a\x04BV[\x91\x82\x91\x82a\n\xD0V[\x03\x90\xF3[a\x04HV[4a\x0BJWa\x0B*6`\x04a\x076V[a\x0BFa\x0B5a(PV[a\x0B=a\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x0B~Wa\x0Bha\x0Bb6`\x04a\n'V[\x90a(dV[a\x0Bpa\x04BV[\x80a\x0Bz\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x0B\xB4Wa\x0B\xB0a\x0B\x9Fa\x0B\x996`\x04a\x04\xB0V[\x90a(\xE1V[a\x0B\xA7a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x0B\xE8Wa\x0B\xD2a\x0B\xCC6`\x04a\x04\xB0V[\x90a)\xFFV[a\x0B\xDAa\x04BV[\x80a\x0B\xE4\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x90a\x0B\xF7\x90a\x05\x08V[_R` R`@_ \x90V[_\x1C\x90V[a\x0C\x14a\x0C\x19\x91a\x0C\x03V[a\x05`V[\x90V[a\x0C&\x90Ta\x0C\x08V[\x90V[`\xFF\x16\x90V[a\x0C;a\x0C@\x91a\x0C\x03V[a\x0C)V[\x90V[a\x0CM\x90Ta\x0C/V[\x90V[a\x0C[\x90`\ra\x0B\xEDV[a\x0Cf_\x82\x01a\x0C\x1CV[\x91a\x0C\x7F`\x02a\x0Cx`\x01\x85\x01a\x0C\x1CV[\x93\x01a\x0CCV[\x90V[`@\x90a\x0C\xABa\x0C\xB2\x94\x96\x95\x93\x96a\x0C\xA1``\x84\x01\x98_\x85\x01\x90a\x05\xAAV[` \x83\x01\x90a\x05\xAAV[\x01\x90a\x06TV[V[4a\x0C\xE7Wa\x0C\xE3a\x0C\xCFa\x0C\xCA6`\x04a\x06\xABV[a\x0CPV[a\x0C\xDA\x93\x91\x93a\x04BV[\x93\x84\x93\x84a\x0C\x82V[\x03\x90\xF3[a\x04HV[\x90` \x82\x82\x03\x12a\r\x05Wa\r\x02\x91_\x01a\x04\xA1V[\x90V[a\x04LV[4a\r8Wa\r\"a\r\x1D6`\x04a\x0C\xECV[a*\x0BV[a\r*a\x04BV[\x80a\r4\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\rmWa\rM6`\x04a\x076V[a\ria\rXa*\xD0V[a\r`a\x04BV[\x91\x82\x91\x82a\x07\x98V[\x03\x90\xF3[a\x04HV[\x90V[a\r\x89a\r\x84a\r\x8E\x92a\rrV[a\x04\xDDV[a\x04\x8AV[\x90V[a\r\x9Db\x9E4\0a\ruV[\x90V[a\r\xA8a\r\x91V[\x90V[4a\r\xDBWa\r\xBB6`\x04a\x076V[a\r\xD7a\r\xC6a\r\xA0V[a\r\xCEa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[a\r\xE9\x90a\x04[V[\x90RV[\x91\x90a\x0E\0\x90_` \x85\x01\x94\x01\x90a\r\xE0V[V[4a\x0E2Wa\x0E.a\x0E\x1Da\x0E\x186`\x04a\x06\xABV[a+lV[a\x0E%a\x04BV[\x91\x82\x91\x82a\r\xEDV[\x03\x90\xF3[a\x04HV[4a\x0EfWa\x0EPa\x0EJ6`\x04a\x04\xB0V[\x90a,\xF9V[a\x0EXa\x04BV[\x80a\x0Eb\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x0E\x9BWa\x0E\x97a\x0E\x86a\x0E\x816`\x04a\x0C\xECV[a-\xADV[a\x0E\x8Ea\x04BV[\x91\x82\x91\x82a\r\xEDV[\x03\x90\xF3[a\x04HV[4a\x0E\xCEWa\x0E\xB8a\x0E\xB36`\x04a\x06\xABV[a-\xF9V[a\x0E\xC0a\x04BV[\x80a\x0E\xCA\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[a\x0E\xECa\x0E\xF1\x92a\x0E\xE7`\x12\x93_\x94a\x05\x14V[a\x05FV[a\x05{V[\x90V[4a\x0F%Wa\x0F!a\x0F\x10a\x0F\n6`\x04a\x04\xB0V[\x90a\x0E\xD3V[a\x0F\x18a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90\x91``\x82\x84\x03\x12a\x0F_Wa\x0F\\a\x0FE\x84_\x85\x01a\x04{V[\x93a\x0FS\x81` \x86\x01a\x04\xA1V[\x93`@\x01a\x04\xA1V[\x90V[a\x04LV[4a\x0F\x93Wa\x0F}a\x0Fw6`\x04a\x0F*V[\x91a1PV[a\x0F\x85a\x04BV[\x80a\x0F\x8F\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x0F\xC8Wa\x0F\xA86`\x04a\x076V[a\x0F\xC4a\x0F\xB3a1]V[a\x0F\xBBa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[c\xFF\xFF\xFF\xFF\x16\x90V[a\x0F\xDF\x90a\x0F\xCDV[\x90RV[\x91\x90a\x0F\xF6\x90_` \x85\x01\x94\x01\x90a\x0F\xD6V[V[4a\x10(Wa\x10$a\x10\x13a\x10\x0E6`\x04a\x06\xABV[a1\x7FV[a\x10\x1Ba\x04BV[\x91\x82\x91\x82a\x0F\xE3V[\x03\x90\xF3[a\x04HV[4a\x10]Wa\x10Ya\x10Ha\x10C6`\x04a\x06\xABV[a1\x94V[a\x10Pa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x10~\x90a\x04[V[\x90RV[\x90a\x10\x8F\x81` \x93a\x10uV[\x01\x90V[` \x01\x90V[\x90a\x10\xB6a\x10\xB0a\x10\xA9\x84a\x10bV[\x80\x93a\x10fV[\x92a\x10oV[\x90_[\x81\x81\x10a\x10\xC6WPPP\x90V[\x90\x91\x92a\x10\xDFa\x10\xD9`\x01\x92\x86Qa\x10\x82V[\x94a\x10\x93V[\x91\x01\x91\x90\x91a\x10\xB9V[a\x10\xFE\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x10\x99V[\x90V[4a\x111Wa\x11\x116`\x04a\x076V[a\x11-a\x11\x1Ca1\xB7V[a\x11$a\x04BV[\x91\x82\x91\x82a\x10\xE9V[\x03\x90\xF3[a\x04HV[4a\x11fWa\x11ba\x11Qa\x11L6`\x04a\x06\xABV[a1\xD5V[a\x11Ya\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[4a\x11\x9AWa\x11\x84a\x11~6`\x04a\x04\xB0V[\x90a3:V[a\x11\x8Ca\x04BV[\x80a\x11\x96\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x11\xCFWa\x11\xAF6`\x04a\x076V[a\x11\xCBa\x11\xBAa3FV[a\x11\xC2a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x12\x04Wa\x12\0a\x11\xEFa\x11\xEA6`\x04a\x06\xABV[a3\xBEV[a\x11\xF7a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x129Wa\x12\x196`\x04a\x076V[a\x125a\x12$a3\xD3V[a\x12,a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[4a\x12\x92Wa\x12r6`\x04a\x076V[a\x12\x8Ea\x12}a\x12>V[a\x12\x85a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x12\xC5Wa\x12\xAFa\x12\xAA6`\x04a\x0C\xECV[a5&V[a\x12\xB7a\x04BV[\x80a\x12\xC1\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[`\xFF`\xF8\x1B\x16\x90V[a\x12\xDC\x90a\x12\xCAV[\x90RV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x12\xFC\x90a\x04\x8AV[\x90RV[\x90a\x13\r\x81` \x93a\x12\xF3V[\x01\x90V[` \x01\x90V[\x90a\x134a\x13.a\x13'\x84a\x12\xE0V[\x80\x93a\x12\xE4V[\x92a\x12\xEDV[\x90_[\x81\x81\x10a\x13DWPPP\x90V[\x90\x91\x92a\x13]a\x13W`\x01\x92\x86Qa\x13\0V[\x94a\x13\x11V[\x91\x01\x91\x90\x91a\x137V[\x93\x95\x91\x94a\x13\xB8a\x13\xADa\x13\xCC\x95a\x13\x9Fa\x13\xC2\x95a\x13\xD9\x9C\x9Aa\x13\x92`\xE0\x8C\x01\x92_\x8D\x01\x90a\x12\xD3V[\x8A\x82\x03` \x8C\x01Ra\x07gV[\x90\x88\x82\x03`@\x8A\x01Ra\x07gV[\x97``\x87\x01\x90a\x05\xAAV[`\x80\x85\x01\x90a\r\xE0V[`\xA0\x83\x01\x90a\t8V[`\xC0\x81\x84\x03\x91\x01Ra\x13\x17V[\x90V[4a\x14\x13Wa\x13\xEC6`\x04a\x076V[a\x14\x0Fa\x13\xF7a5\xAEV[\x93a\x14\x06\x97\x95\x97\x93\x91\x93a\x04BV[\x97\x88\x97\x88a\x13gV[\x03\x90\xF3[a\x04HV[\x7F\x84\xFEt\xC7\x1A(\xB6\x9A\xA9`Hl\xA0\xE8\xC1A\x8C\x86\xE9\xEA,\xD6\xB5\x84\x9B\x95\xE2\xC8\xF4\x07\xA6t\x90V[a\x14Da\x14\x18V[\x90V[4a\x14wWa\x14W6`\x04a\x076V[a\x14sa\x14ba\x14<V[a\x14ja\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[\x7F\x9B\x12\xE0\xC5p~II\x15\xE5\x8B\x05d\xF1\x8A\xAA\xD9\xB7J\xC6\x9B\xFC\x81Z\x1E\xDA\xDC\x8EK\xD02\xEB\x90V[a\x14\xA8a\x14|V[\x90V[4a\x14\xDBWa\x14\xBB6`\x04a\x076V[a\x14\xD7a\x14\xC6a\x14\xA0V[a\x14\xCEa\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x15\x10Wa\x15\x0Ca\x14\xFBa\x14\xF66`\x04a\x0C\xECV[a68V[a\x15\x03a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90V[a\x15,a\x15'a\x151\x92a\x15\x15V[a\x04\xDDV[a\x04\x8AV[\x90V[a\x15Ik\x03;.<\x9F\xD0\x80<\xE8\0\0\0a\x15\x18V[\x90V[a\x15Ta\x154V[\x90V[4a\x15\x87Wa\x15g6`\x04a\x076V[a\x15\x83a\x15ra\x15LV[a\x15za\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x15\xBDWa\x15\xB9a\x15\xA8a\x15\xA26`\x04a\n'V[\x90a6\x7FV[a\x15\xB0a\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[a\x15\xD6\x90a\x15\xC2V[\x90RV[\x91\x90a\x15\xED\x90_` \x85\x01\x94\x01\x90a\x15\xCDV[V[4a\x16\x1FWa\x15\xFF6`\x04a\x076V[a\x16\x1Ba\x16\na6\xADV[a\x16\x12a\x04BV[\x91\x82\x91\x82a\x15\xDAV[\x03\x90\xF3[a\x04HV[4a\x16TWa\x16Pa\x16?a\x16:6`\x04a\x06\xABV[a6\xC1V[a\x16Ga\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x16\x89Wa\x16i6`\x04a\x076V[a\x16\x85a\x16ta7\xD7V[a\x16|a\x04BV[\x91\x82\x91\x82a\x07\x98V[\x03\x90\xF3[a\x04HV[4a\x16\xBEWa\x16\xBAa\x16\xA9a\x16\xA46`\x04a\x06\xABV[a7\xEDV[a\x16\xB1a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90V[a\x16\xDAa\x16\xD5a\x16\xDF\x92a\x16\xC3V[a\x04\xDDV[a\x04\x8AV[\x90V[a\x16\xF7k\x02\xF9\x01\x93\xEF0u\xFA\x98\0\0\0a\x16\xC6V[\x90V[a\x17\x02a\x16\xE2V[\x90V[4a\x175Wa\x17\x156`\x04a\x076V[a\x171a\x17 a\x16\xFAV[a\x17(a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x90V[_\x1B\x90V[a\x17Va\x17Qa\x17[\x92a\x17:V[a\x17=V[a\x08\xF4V[\x90V[a\x17g_a\x17BV[\x90V[a\x17ra\x17^V[\x90V[4a\x17\xA5Wa\x17\x856`\x04a\x076V[a\x17\xA1a\x17\x90a\x17jV[a\x17\x98a\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x17\xDBWa\x17\xD7a\x17\xC6a\x17\xC06`\x04a\x04\xB0V[\x90a8\x1CV[a\x17\xCEa\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xF3[a\x04HV[a\x17\xEC`\x0C_\x90a\x05{V[\x90V[4a\x18\x1FWa\x17\xFF6`\x04a\x076V[a\x18\x1Ba\x18\na\x17\xE0V[a\x18\x12a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x18UWa\x18Qa\x18@a\x18:6`\x04a\x04\xB0V[\x90a8>V[a\x18Ha\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[\x7F\x82\x03r\xA9\xFA\xF8-\xB3\xCC_\xC3o\xFA\xB5\xF0\x96\xEE\xF6\x9B\x95\xFB\xF5\x05\x91\xE0\xD7\x14G\xAA\x1B\xA7\0\x90V[a\x18\x86a\x18ZV[\x90V[4a\x18\xB9Wa\x18\x996`\x04a\x076V[a\x18\xB5a\x18\xA4a\x18~V[a\x18\xACa\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[4a\x18\xEEWa\x18\xEAa\x18\xD9a\x18\xD46`\x04a\x06\xABV[a8TV[a\x18\xE1a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[4a\x19#Wa\x19\x036`\x04a\x076V[a\x19\x1Fa\x19\x0Ea8iV[a\x19\x16a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[a\x191\x81a\n\xBDV[\x03a\x198WV[_\x80\xFD[\x90P5\x90a\x19I\x82a\x19(V[V[\x90\x91`\xC0\x82\x84\x03\x12a\x19\xAAWa\x19c\x83_\x84\x01a\x04{V[\x92a\x19q\x81` \x85\x01a\x04\xA1V[\x92a\x19\x7F\x82`@\x83\x01a\x04\xA1V[\x92a\x19\xA7a\x19\x90\x84``\x85\x01a\x19<V[\x93a\x19\x9E\x81`\x80\x86\x01a\t\x0BV[\x93`\xA0\x01a\t\x0BV[\x90V[a\x04LV[4a\x19\xE4Wa\x19\xCEa\x19\xC26`\x04a\x19KV[\x94\x93\x90\x93\x92\x91\x92a8\xE9V[a\x19\xD6a\x04BV[\x80a\x19\xE0\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[a\x19\xF2\x90a\x06OV[\x90RV[\x90`@\x80a\x1A*\x93a\x1A\x0E_\x82\x01Q_\x86\x01\x90a\x12\xF3V[a\x1A ` \x82\x01Q` \x86\x01\x90a\x12\xF3V[\x01Q\x91\x01\x90a\x19\xE9V[V[\x91\x90a\x1A?\x90_``\x85\x01\x94\x01\x90a\x19\xF6V[V[4a\x1AqWa\x1Ama\x1A\\a\x1AW6`\x04a\x06\xABV[a9\xE0V[a\x1Ada\x04BV[\x91\x82\x91\x82a\x1A,V[\x03\x90\xF3[a\x04HV[a\x1A\x7F\x81a\x06OV[\x03a\x1A\x86WV[_\x80\xFD[\x90P5\x90a\x1A\x97\x82a\x1AvV[V[\x91\x90`@\x83\x82\x03\x12a\x1A\xC1W\x80a\x1A\xB5a\x1A\xBE\x92_\x86\x01a\x04{V[\x93` \x01a\x1A\x8AV[\x90V[a\x04LV[4a\x1A\xF5Wa\x1A\xDFa\x1A\xD96`\x04a\x1A\x99V[\x90a:\xF3V[a\x1A\xE7a\x04BV[\x80a\x1A\xF1\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[`\xE0\x81\x83\x03\x12a\x1BeWa\x1B\x10\x82_\x83\x01a\x04{V[\x92a\x1B\x1E\x83` \x84\x01a\x04{V[\x92a\x1B,\x81`@\x85\x01a\x04\xA1V[\x92a\x1B:\x82``\x83\x01a\x04\xA1V[\x92a\x1Bba\x1BK\x84`\x80\x85\x01a\x19<V[\x93a\x1BY\x81`\xA0\x86\x01a\t\x0BV[\x93`\xC0\x01a\t\x0BV[\x90V[a\x04LV[4a\x1B\x9FWa\x1B\x89a\x1B}6`\x04a\x1A\xFAV[\x95\x94\x90\x94\x93\x91\x93a;\xA1V[a\x1B\x91a\x04BV[\x80a\x1B\x9B\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[4a\x1B\xD3Wa\x1B\xBDa\x1B\xB76`\x04a\n'V[\x90a<\xBFV[a\x1B\xC5a\x04BV[\x80a\x1B\xCF\x81a\x06\xC9V[\x03\x90\xF3[a\x04HV[\x91\x90`@\x83\x82\x03\x12a\x1C\0W\x80a\x1B\xF4a\x1B\xFD\x92_\x86\x01a\x04{V[\x93` \x01a\x04{V[\x90V[a\x04LV[4a\x1C6Wa\x1C2a\x1C!a\x1C\x1B6`\x04a\x1B\xD8V[\x90a<\xE1V[a\x1C)a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xF3[a\x04HV[a\x1CD\x81a\x0F\xCDV[\x03a\x1CKWV[_\x80\xFD[\x90P5\x90a\x1C\\\x82a\x1C;V[V[\x91\x90`@\x83\x82\x03\x12a\x1C\x86W\x80a\x1Cza\x1C\x83\x92_\x86\x01a\x04{V[\x93` \x01a\x1COV[\x90V[a\x04LV[a\x1C\x94\x90a\x15\xC2V[\x90RV[`\x01\x80`\xD0\x1B\x03\x16\x90V[a\x1C\xAC\x90a\x1C\x98V[\x90RV[\x90` \x80a\x1C\xD2\x93a\x1C\xC8_\x82\x01Q_\x86\x01\x90a\x1C\x8BV[\x01Q\x91\x01\x90a\x1C\xA3V[V[\x91\x90a\x1C\xE7\x90_`@\x85\x01\x94\x01\x90a\x1C\xB0V[V[4a\x1D\x1AWa\x1D\x16a\x1D\x05a\x1C\xFF6`\x04a\x1C^V[\x90a=OV[a\x1D\ra\x04BV[\x91\x82\x91\x82a\x1C\xD4V[\x03\x90\xF3[a\x04HV[\x7F\xCC\xE2\x96\xB0@3*\x08\x0Em\xF15\x15\xA3\xEC(i\xE2\x1C\xD2\x0FsD\xAF\t\x87\xDD\xB98\xD8\xBD!\x90V[a\x1DKa\x1D\x1FV[\x90V[4a\x1D~Wa\x1D^6`\x04a\x076V[a\x1Dza\x1Dia\x1DCV[a\x1Dqa\x04BV[\x91\x82\x91\x82a\tEV[\x03\x90\xF3[a\x04HV[_\x80\xFD[_\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x1D\xABa\x1D\xB1\x91a\x1C\x98V[\x91a\x1C\x98V[\x01\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1D\xC2WV[a\x1D\x8BV[\x90a\x1D\xDA\x91a\x1D\xD4a\x1D\x87V[Pa\x1D\x9FV[\x90V[a\x1D\xE9a\x1D\xEF\x91a\x1C\x98V[\x91a\x1C\x98V[\x90\x03\x90`\x01\x80`\xD0\x1B\x03\x82\x11a\x1E\x01WV[a\x1D\x8BV[\x90a\x1E\x19\x91a\x1E\x13a\x1D\x87V[Pa\x1D\xDDV[\x90V[_\x90V[a\x1E(a\x1E\x1CV[P\x80a\x1ECa\x1E=c\x0C\xCC\xC6e`\xE2\x1Ba\x06\x02V[\x91a\x06\x02V[\x14\x80\x15a\x1EgW[\x90\x81\x15a\x1EWW[P\x90V[a\x1Ea\x91Pa=eV[_a\x1ESV[P\x80a\x1E\x82a\x1E|c\xB2u*\xC9`\xE0\x1Ba\x06\x02V[\x91a\x06\x02V[\x14a\x1EKV[a\x1E\xA1\x90a\x1E\x9Ca\x1E\x97a\x1D\x1FV[a=\xA5V[a\x1F\x7FV[V[a\x1E\xB7a\x1E\xB2a\x1E\xBC\x92a\x17:V[a\x04\xDDV[a\x04PV[\x90V[a\x1E\xC8\x90a\x1E\xA3V[\x90V[\x90V[\x1B\x90V[\x91\x90`\x08a\x1E\xED\x91\x02\x91a\x1E\xE7_\x19\x84a\x1E\xCEV[\x92a\x1E\xCEV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x91\x90a\x1F\x10a\x1F\x0Ba\x1F\x18\x93a\x05*V[a\x1E\xF7V[\x90\x83Ta\x1E\xD2V[\x90UV[_\x90V[a\x1F2\x91a\x1F,a\x1F\x1CV[\x91a\x1E\xFAV[V[`\x02_\x91a\x1FD\x83\x80\x83\x01a\x1F V[a\x1FQ\x83`\x01\x83\x01a\x1F V[\x01UV[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[\x90_\x03a\x1FzWa\x1Fx\x90a\x1F4V[V[a\x1FUV[\x80a\x1F\x9Aa\x1F\x94a\x1F\x8F_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a 6Wa\x1F\xBCa\x1F\xB6a\x1F\xAF`\x0Ea\x1E\xCBV[\x83\x90a>\0V[\x15a\x06OV[a \x17Wa\x1F\xD5_a\x1F\xD0`\r\x84\x90a\x0B\xEDV[a\x1FhV[a\x1F\xFF\x7F]\x9DP4el\xB3\xEB\xFB\x06U\x05|\xD7\xF9\xB4\x07z\x9BB\xFFB\xCE\"<\xBA\xC5\xBCXm!&\x91a\x05\x08V[\x90a \x08a\x04BV[\x80a \x12\x81a\x06\xC9V[\x03\x90\xA2V[a 2\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a N`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[a [\x90a\x1E\x88V[V[a ta y\x91a la\x1F\x1CV[P`\x10a\t\x8FV[a\x0C\x1CV[\x90V[``\x90V[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a \xB5W[` \x83\x10\x14a \xB0WV[a \x81V[\x91`\x7F\x16\x91a \xA5V[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a \xEBa \xE4\x83a \x95V[\x80\x94a \xBFV[\x91`\x01\x81\x16\x90\x81_\x14a!BWP`\x01\x14a!\x06W[PPPV[a!\x13\x91\x92\x93\x94Pa \xC8V[\x91_\x92[\x81\x84\x10a!*WPP\x01\x90_\x80\x80a!\x01V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a!\x17V[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a!\x01V[\x90a!g\x91a \xD1V[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a!\x88\x90a\x07]V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a!\xA2W`@RV[a!jV[\x90a!\xC7a!\xC0\x92a!\xB7a\x04BV[\x93\x84\x80\x92a!]V[\x03\x83a!~V[V[a!\xD2\x90a!\xA7V[\x90V[a!\xDDa |V[Pa!\xE8`\x03a!\xC9V[\x90V[a\"\x08\x91a!\xF7a\x1E\x1CV[Pa\"\0a>:V[\x91\x90\x91a>GV[`\x01\x90V[a\"\x15a\x1F\x1CV[Pa\" `\x02a\x0C\x1CV[\x90V[a\"7a\"2a\"<\x92a\x17:V[a\x04\xDDV[a\x04\x8AV[\x90V[a\"Na\"T\x91\x93\x92\x93a\x04\x8AV[\x92a\x04\x8AV[\x82\x01\x80\x92\x11a\"_WV[a\x1D\x8BV[\x80a\"\x7Fa\"ya\"t_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a#\xC3W\x81a\"\x97a\"\x91_a\"#V[\x91a\x04\x8AV[\x14a#\xA7Wa\"\xAEa\"\xA7a\"\rV[\x83\x90a\"?V[a\"\xC7a\"\xC1a\"\xBCa\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a#\x8BWa\"\xD73\x83\x90a>\x8CV[a\"\xE23\x83\x90a@\x82V[a\"\xEAa3\xD3V[\x80a#jW[a#NWa\"\xFF\x81\x83\x90aA6V[3\x90a#Ia#7a#1\x7F\xDE\"\xBA\xFF\x03\x8E:>\x08@|\xBD\xF6\x17\xDE\xEDt\xE8i\xA7\xBAQ}\xF6\x11\xE311\xC6\xE6\xEA\x04\x93a\x05\x08V[\x93a\x05\x08V[\x93a#@a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[_c6\xE2x\xFD`\xE2\x1B\x81R\x80a#f`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[Pa#\x86a#\x80a#ya\x14\x18V[3\x90a6\x7FV[\x15a\x06OV[a\"\xF0V[_c\x17~?\xC3`\xE0\x1B\x81R\x80a#\xA3`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a#\xBF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a#\xDB`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x91a$\t\x92a#\xECa\x1E\x1CV[Pa$\x01a#\xF8a>:V[\x82\x90\x84\x91aA\xA2V[\x91\x90\x91aB.V[`\x01\x90V[_\x90V[a$\x1B\x90a\x08\xF4V[\x90V[\x90a$(\x90a$\x12V[_R` R`@_ \x90V[\x90V[a$Ca$H\x91a\x0C\x03V[a$4V[\x90V[a$U\x90Ta$7V[\x90V[`\x01a$qa$w\x92a$ia$\x0EV[P`\x05a$\x1EV[\x01a$KV[\x90V[\x80a$\x95a$\x8Fa$\x8A_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a%]W\x81a$\xADa$\xA7_a\"#V[\x91a\x04\x8AV[\x14a%AWa$\xBD3\x83\x90aB\xCBV[3a$\xD0a$\xCA\x83a\x04[V[\x91a\x04[V[\x03a%0W[a$\xE1\x81\x83\x90aD\xC4V[3\x90a%+a%\x19a%\x13\x7F\xB9\x07\x95\xA6fP\x15Y\x83\xE2B\xCA\xC3\xE1\xAC\x1AM\xC2o\x8E\xD2\x98\x7F<\xE4\x16\xA3N\0\x11\x1F\xD4\x93a\x05\x08V[\x93a\x05\x08V[\x93a%\"a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[a%<\x813\x84\x91aA\xA2V[a$\xD6V[_c\x1F* \x05`\xE0\x1B\x81R\x80a%Y`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a%u`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a%\x94\x91a%\x8Fa%\x8A\x82a$XV[a=\xA5V[a%\x96V[V[\x90a%\xA0\x91aE#V[PV[\x90a%\xAD\x91a%yV[V[\x90a%\xB9\x90a\x04\x8AV[\x90RV[\x90a%\xC7\x90a\x06OV[\x90RV[\x90a%\xDEa%\xD7a\x04BV[\x92\x83a!~V[V[a%\xEA``a%\xCBV[\x90V[\x90a&<a&3`\x02a%\xFEa%\xE0V[\x94a&\x15a&\r_\x83\x01a\x0C\x1CV[_\x88\x01a%\xAFV[a&-a&$`\x01\x83\x01a\x0C\x1CV[` \x88\x01a%\xAFV[\x01a\x0CCV[`@\x84\x01a%\xBDV[V[a&G\x90a%\xEDV[\x90V[\x90V[a&aa&\\a&f\x92a&JV[a\x04\xDDV[a\x04\x8AV[\x90V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[a&\x89a&\x8F\x91a\x04\x8AV[\x91a\x04\x8AV[\x90\x81\x15a&\x9AW\x04\x90V[a&iV[`\x01a&\xAB\x91\x01a\x04\x8AV[\x90V[\x90V[a&\xC5a&\xC0a&\xCA\x92a&\xAEV[a\x04\xDDV[a\x04\x8AV[\x90V[a&\xDCa&\xE2\x91\x93\x92\x93a\x04\x8AV[\x92a\x04\x8AV[\x82\x03\x91\x82\x11a&\xEDWV[a\x1D\x8BV[a&\xFC\x90Qa\x04\x8AV[\x90V[a'\x07a\x1F\x1CV[Pa'\x1Ca'\x17`\r\x83\x90a\x0B\xEDV[a&>V[\x90a'2Ba',a\x0E\x10a&MV[\x90a&}V[a';_a\"#V[\x90a'E_a\"#V[[\x80a'Za'T`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15a'\xC6W\x81a'sa'm\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a'\x88W[a'\x83\x90a&\x9FV[a'FV[\x91a'\xBEa'\x83\x91a'\xB8a'\xB3a'\xA2`\x12\x89\x90a\x05\x14V[a'\xAD\x87\x89\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x92\x90Pa'zV[PP\x90Pa'\xD6` \x83\x01a&\xF2V[a'\xE8a'\xE2\x83a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14a(\x07Wa'\xFE` a(\x03\x93\x01a&\xF2V[a&\xCDV[[\x90V[PPa(\x12_a\"#V[a(\x04V[_\x90V[\x90V[a(2a(-a(7\x92a(\x1BV[a\x04\xDDV[a\n\xBDV[\x90V[a(Ba(\x17V[Pa(M`\x12a(\x1EV[\x90V[a(Xa$\x0EV[Pa(aaE\xCFV[\x90V[\x90\x80a(\x7Fa(ya(ta>:V[a\x04[V[\x91a\x04[V[\x03a(\x90Wa(\x8D\x91aF\x89V[PV[_c3K\xD9\x19`\xE1\x1B\x81R\x80a(\xA8`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a(\xB6\x90a\x05\x08V[_R` R`@_ \x90V[\x90V[a(\xD9a(\xD4a(\xDE\x92a\x1C\x98V[a\x04\xDDV[a\x04\x8AV[\x90V[a)\x18\x91a)\ra)\x07a)\x02a)\x13\x94a(\xFAa\x1F\x1CV[P`\na(\xACV[a(\xC2V[\x91aGjV[\x90aH\x7FV[a(\xC5V[\x90V[\x90a)5\x91a)0a)+a\x14|V[a=\xA5V[a)7V[V[\x90\x81a)Sa)Ma)H_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a)\xE3W\x80a)ka)e_a\"#V[\x91a\x04\x8AV[\x14a)\xC7Wa)\x82a){a\"\rV[\x82\x90a\"?V[a)\x9Ba)\x95a)\x90a\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a)\xABWa)\xA9\x91aA6V[V[_c\x17~?\xC3`\xE0\x1B\x81R\x80a)\xC3`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a)\xDF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a)\xFB`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a*\t\x91a)\x1BV[V[\x80a*\x1Ea*\x18_a\"#V[\x91a\x04\x8AV[\x14a*/Wa*-\x903aD\xC4V[V[_c\x1F* \x05`\xE0\x1B\x81R\x80a*G`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a*iWa*e` \x91a\x07]V[\x01\x90V[a!jV[\x90a*\x80a*{\x83a*KV[a%\xCBV[\x91\x82RV[_\x7Fmode=blocknumber&from=default\0\0\0\x91\x01RV[a*\xB6`\x1Da*nV[\x90a*\xC3` \x83\x01a*\x85V[V[a*\xCDa*\xACV[\x90V[a*\xD8a |V[Pa*\xE1a6\xADV[a*\xFAa*\xF4a*\xEFaI\xA6V[a\x15\xC2V[\x91a\x15\xC2V[\x03a+\nWa+\x07a*\xC5V[\x90V[_c\x01\xBF\xC1\xC5`\xE6\x1B\x81R\x80a+\"`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_\x90V[\x90a+4\x90a\x05\x08V[_R` R`@_ \x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a+Wa+\\\x91a\x0C\x03V[a+@V[\x90V[a+i\x90Ta+KV[\x90V[a+\x83a+\x88\x91a+{a+&V[P`\ta+*V[a+_V[\x90V[\x90a+\xA5\x91a+\xA0a+\x9Ba\x18ZV[a=\xA5V[a+\xDDV[V[\x90a+\xB3_\x19\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a+\xD2a+\xCDa+\xD9\x92a\x05*V[a\x1E\xF7V[\x82Ta+\xA7V[\x90UV[\x80a+\xF8a+\xF2a+\xED_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a,\xDDW\x81a,\x10a,\n_a\"#V[\x91a\x04\x8AV[\x14a,\xC1Wa,2a,,a,%`\x0Ea\x1E\xCBV[\x83\x90aI\xBBV[\x15a\x06OV[a,\xA2Wa,^\x82a,Xa,I`\x10\x85\x90a\t\x8FV[\x91a,S\x83a\x0C\x1CV[a\"?V[\x90a+\xBDV[a,\x9Da,\x8B\x7F\x9C\xA0=\xBDQ\x93\xFB\xB7\x97As\xCE\xDD\x0B\xDFhA\xDD\x14\xC3\xCB\xFAsZ\xABw\xFF\x1D\xD1\x13\x9F\xB3\x92a\x05\x08V[\x92a,\x94a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA2V[a,\xBD\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a,\xD9`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a,\xF5`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a-\x03\x91a+\x8BV[V[` \x7Fout of bounds\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x7FSyndicateTokenCrosschain: index _\x82\x01R\x01RV[a-_`-`@\x92a\x07IV[a-h\x81a-\x05V[\x01\x90V[a-\x81\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra-RV[\x90V[\x15a-\x8BWV[a-\x93a\x04BV[bF\x1B\xCD`\xE5\x1B\x81R\x80a-\xA9`\x04\x82\x01a-lV[\x03\x90\xFD[a-\xF6\x90a-\xB9a+&V[Pa-\xE7\x81a-\xE1a-\xDBa-\xD6a-\xD1`\x0Ea\x1E\xCBV[aI\xF5V[a\x04\x8AV[\x91a\x04\x8AV[\x10a-\x84V[a-\xF1`\x0Ea\x1E\xCBV[aJDV[\x90V[a.\n\x90a.\x05a>:V[aJ\xBAV[V[\x90a.'\x92\x91a.\"a.\x1Da\x1D\x1FV[a=\xA5V[a/\x03V[V[\x91` a.J\x92\x94\x93a.C`@\x82\x01\x96_\x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[a.V``a%\xCBV[\x90V[a.c\x90Qa\x06OV[\x90V[\x90a.r`\xFF\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[a.\x85\x90a\x06OV[\x90V[\x90V[\x90a.\xA0a.\x9Ba.\xA7\x92a.|V[a.\x88V[\x82Ta.fV[\x90UV[\x90a.\xEF`@`\x02a.\xF5\x94a.\xCE_\x82\x01a.\xC8_\x88\x01a&\xF2V[\x90a+\xBDV[a.\xE7`\x01\x82\x01a.\xE1` \x88\x01a&\xF2V[\x90a+\xBDV[\x01\x92\x01a.YV[\x90a.\x8BV[V[\x90a/\x01\x91a.\xABV[V[\x80a/\x1Ea/\x18a/\x13_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a14W\x80a/6a/03a\x04[V[\x91a\x04[V[\x14a1\x18W\x80;a/Oa/I_a\"#V[\x91a\x04\x8AV[\x14a0\xFCW\x81a/ha/b_\x19a\x04\x8AV[\x91a\x04\x8AV[\x14\x15\x80a0\xDBW[a0\xBFW\x82a/\x88a/\x82_\x19a\x04\x8AV[\x91a\x04\x8AV[\x14\x15\x80a0\x9EW[a0\x83Wa/\xA8a/\xA1`\x0Ea\x1E\xCBV[\x82\x90aKEV[a08W[a/\xF2\x82a/\xE1\x85a/\xD8`\x01\x91a/\xCFa/\xC6a.LV[\x95_\x87\x01a%\xAFV[` \x85\x01a%\xAFV[`@\x83\x01a%\xBDV[a/\xED`\r\x84\x90a\x0B\xEDV[a.\xF7V[\x90\x91a0\x1E\x7F\xAA\x80}\n\xBF0\xD9\x19h\xC7G\x8Cf\xB6\xD8%!\xA1\x06\xAF\x13\xED\xA06\xE2\x03m\xA9\xAF\x16\x89X\x92a\x05\x08V[\x92a03a0*a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2V[\x80\x82\x90\x84a0f\x7F\xDB\x03\xF9}\xC5\x84\nq\xE6\x9B\xE7G\x0EGa\xAF\x10\xA1#ys\xE8\x1C\x12\xD0\xDC(\x13\x89Ze&\x92a\x05\x08V[\x92a0{a0ra\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2a/\xADV[_bX\xCC\xAD`\xE8\x1B\x81R\x80a0\x9A`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[P\x82a0\xB9a0\xB3a0\xAEa\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a/\x90V[_c\n9\\\x01`\xE0\x1B\x81R\x80a0\xD7`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[P\x81a0\xF6a0\xF0a0\xEBa\x154V[a\x04\x8AV[\x91a\x04\x8AV[\x11a/pV[_cA*\x18\xED`\xE1\x1B\x81R\x80a1\x14`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xFB\x8C\xE8\xC9`\xE0\x1B\x81R\x80a10`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a1L`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a1[\x92\x91a.\x0CV[V[a1ea\x1F\x1CV[Pa1xa1s`\x0Ea\x1E\xCBV[aI\xF5V[\x90V[_\x90V[a1\x91\x90a1\x8Ba1{V[PaK\x7FV[\x90V[a1\xAAa1\xAF\x91a1\xA3a\x1F\x1CV[P_a\t\x8FV[a\x0C\x1CV[\x90V[``\x90V[a1\xBFa1\xB2V[Pa1\xD2a1\xCD`\x0Ea\x1E\xCBV[aK\xAEV[\x90V[a1\xDDa\x1E\x1CV[Pa2\x05a1\xF5a1\xF0`\r\x84\x90a\x0B\xEDV[a&>V[\x91a2\0`\x0Ea\x1E\xCBV[aI\xBBV[\x90\x81a2\x10W[P\x90V[a2\x1D\x91P`@\x01a.YV[_a2\x0CV[\x90a2=\x91a28a23a\x14\x18V[a=\xA5V[a2?V[V[\x80a2Za2Ta2O_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a3\x1EW\x81a2ra2l_a\"#V[\x91a\x04\x8AV[\x14a3\x02Wa2\x88a2\x82a3\xD3V[\x15a\x06OV[a2\xE6Wa2\x97\x81\x83\x90aD\xC4V[3\x90a2\xE1a2\xCFa2\xC9\x7F\xBE\xF4\xF8\x1C\x18\x14\xC6A\xED\xE8^\xBA\xAC\xF1\x9D\x04\x8B,[U\x98\n\xDF\xA6\xEF\x0F\x95le\x135\xA2\x93a\x05\x08V[\x93a\x05\x08V[\x93a2\xD8a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[_c\xB8\xB5\xCA-`\xE0\x1B\x81R\x80a2\xFE`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\x1F* \x05`\xE0\x1B\x81R\x80a3\x1A`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a36`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a3D\x91a2#V[V[a3Na\x1F\x1CV[Pa3Y`\x0Ca\x0C\x1CV[a3ka3e_a\"#V[\x91a\x04\x8AV[\x14\x80\x15a3\x9AW[a3\x8EWa3\x8Ba3\x84`\x0Ca\x0C\x1CV[B\x90a&\xCDV[\x90V[a3\x97_a\"#V[\x90V[PBa3\xB7a3\xB1a3\xAC`\x0Ca\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a3sV[a3\xD0\x90a3\xCAa\x1F\x1CV[PaK\xD6V[\x90V[a3\xDBa\x1E\x1CV[Pa3\xE6`\x0Ca\x0C\x1CV[a3\xF8a3\xF2_a\"#V[\x91a\x04\x8AV[\x14\x15\x80a4\x03W[\x90V[PBa4 a4\x1Aa4\x15`\x0Ca\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x10a4\0V[a4?\x90a4:a45a\x17^V[a=\xA5V[a4AV[V[\x80a4Ta4NBa\x04\x8AV[\x91a\x04\x8AV[\x11\x15a5\nW\x80a4\x8Da4\x87\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\x8AV[\x91a\x04\x8AV[\x11a4\xEEWa4\x9C`\x0Ca\x0C\x1CV[a4\xA7\x82`\x0Ca+\xBDV[\x903\x90a4\xD4\x7F\xDDh\x96\xDC\xF1\xD4\xB3\x11\xCC\xA8}\xD1\x9B\xBB\xA2\xEA\x9C\xE2\xF8g\xC1V\x88x\xA0C\x8Af\xA1\xAF\xEE\xEC\x92a\x05\x08V[\x92a4\xE9a4\xE0a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2V[_c\xEFi\xAFe`\xE0\x1B\x81R\x80a5\x06`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[_c\xA5e\x83S`\xE0\x1B\x81R\x80a5\"`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[a5/\x90a4&V[V[_\x90V[``\x90V[a5C\x90a\x04\xFCV[\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a5^W` \x80\x91\x02\x01\x90V[a!jV[\x90a5ua5p\x83a5FV[a%\xCBV[\x91\x82RV[6\x907V[\x90a5\xA4a5\x8C\x83a5cV[\x92` \x80a5\x9A\x86\x93a5FV[\x92\x01\x91\x03\x90a5zV[V[`\x0F`\xF8\x1B\x90V[a5\xB6a51V[Pa5\xBFa |V[Pa5\xC8a |V[Pa5\xD1a\x1F\x1CV[Pa5\xDAa+&V[Pa5\xE3a$\x0EV[Pa5\xECa55V[Pa5\xF5aK\xEEV[\x90a5\xFEaL.V[\x90F\x90a6\n0a5:V[\x90a6\x14_a\x17BV[\x90a6&a6!_a\"#V[a5\x7FV[\x90a6/a5\xA6V[\x96\x95\x94\x93\x92\x91\x90V[a6aa6f\x91a6Ga\x1F\x1CV[Pa6[a6U`\x0Ba(\xC2V[\x91aGjV[\x90aH\x7FV[a(\xC5V[\x90V[\x90a6s\x90a\x05\x08V[_R` R`@_ \x90V[a6\xA6\x91_a6\x9Ba6\xA1\x93a6\x93a\x1E\x1CV[P`\x05a$\x1EV[\x01a6iV[a\x0CCV[\x90V[_\x90V[a6\xB5a6\xA9V[Pa6\xBEaI\xA6V[\x90V[a6\xC9a\x1F\x1CV[Pa6\xDEa6\xD9`\r\x83\x90a\x0B\xEDV[a&>V[\x90a6\xF4Ba6\xEEa\x0E\x10a&MV[\x90a&}V[a6\xFD_a\"#V[\x90a7\x07_a\"#V[[\x80a7\x1Ca7\x16`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15a7\x88W\x81a75a7/\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a7JW[a7E\x90a&\x9FV[a7\x08V[\x91a7\x80a7E\x91a7za7ua7d`\x11\x89\x90a\x05\x14V[a7o\x87\x89\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x92\x90Pa7<V[PP\x90Pa7\x97_\x83\x01a&\xF2V[a7\xA9a7\xA3\x83a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14a7\xC7Wa7\xBE_a7\xC3\x93\x01a&\xF2V[a&\xCDV[[\x90V[PPa7\xD2_a\"#V[a7\xC4V[a7\xDFa |V[Pa7\xEA`\x04a!\xC9V[\x90V[a8\x14a8\x0Fa8\na8\x19\x93a8\x02a\x1F\x1CV[P`\na(\xACV[a(\xC2V[aLnV[a(\xC5V[\x90V[a89\x91a8(a\x1E\x1CV[Pa81a>:V[\x91\x90\x91aB.V[`\x01\x90V[\x90a8Q\x91a8Ka\x1F\x1CV[Pa(\xE1V[\x90V[a8f\x90a8`a\x1F\x1CV[Pa7\xEDV[\x90V[a8qa\x1F\x1CV[Pa8za\"\rV[\x90V[\x7F\xE4\x83)\x05{\xFD\x03\xD5^I\xB5G\x13.9\xCF\xFD\x9C\x18 \xAD{\x9DLS\x07i\x14%\xD1Z\xDF\x90V[a8\xD6a8\xDD\x94a8\xCC``\x94\x98\x97\x95a8\xC2`\x80\x86\x01\x9A_\x87\x01\x90a\t8V[` \x85\x01\x90a\r\xE0V[`@\x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[` \x01\x90V[Q\x90V[\x93\x95\x94\x90\x92\x91\x95Ba9\x03a8\xFD\x89a\x04\x8AV[\x91a\x04\x8AV[\x11a9|W\x91a9n\x91a9u\x93a9ea9z\x98\x99a9Ma9$a8}V[a9>\x8B\x93\x8Ba92a\x04BV[\x95\x86\x94` \x86\x01a8\xA1V[` \x82\x01\x81\x03\x82R\x03\x82a!~V[a9_a9Y\x82a8\xE5V[\x91a8\xDFV[ aL\xE3V[\x92\x90\x91\x92aM\0V[\x91\x82aMJV[aJ\xBAV[V[a9\x97\x87_\x91\x82\x91c#A\xD7\x87`\xE1\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[_\x90V[_\x90V[a9\xABa%\xE0V[\x90` \x80\x80\x84a9\xB9a9\x9BV[\x81R\x01a9\xC4a9\x9BV[\x81R\x01a9\xCFa9\x9FV[\x81RPPV[a9\xDDa9\xA3V[\x90V[a9\xF7a9\xFC\x91a9\xEFa9\xD5V[P`\ra\x0B\xEDV[a&>V[\x90V[\x90a:\x19\x91a:\x14a:\x0Fa\x1D\x1FV[a=\xA5V[a:\x1BV[V[\x80a:6a:0a:+_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14a:\xD7Wa:Xa:Ra:K`\x0Ea\x1E\xCBV[\x83\x90aI\xBBV[\x15a\x06OV[a:\xB8Wa:t\x82`\x02a:n`\r\x85\x90a\x0B\xEDV[\x01a.\x8BV[a:\xB3a:\xA1\x7F\x9C\x86h\xDB2HE\x06]+\x9A*\x18;\xD3\x14\x1Fc\x01\x8FT\x82\x82\xDA\xF1\x8D\xA4\x9C\xCB\xF8\x8C3\x92a\x05\x08V[\x92a:\xAAa\x04BV[\x91\x82\x91\x82a\x06aV[\x03\x90\xA2V[a:\xD3\x90_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[_c\xD9.#=`\xE0\x1B\x81R\x80a:\xEF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x90a:\xFD\x91a9\xFFV[V[\x7Fnq\xED\xAE\x12\xB1\xB9\x7FM\x1F`7\x0F\xEF\x10\x10_\xA2\xFA\xAE\x01&\x11J\x16\x9Cd\x84]a&\xC9\x90V[\x91\x94a;ka;u\x92\x98\x97\x95a;a`\xA0\x96a;Wa;|\x9Aa;M`\xC0\x8A\x01\x9E_\x8B\x01\x90a\t8V[` \x89\x01\x90a\r\xE0V[`@\x87\x01\x90a\r\xE0V[``\x85\x01\x90a\x05\xAAV[`\x80\x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[\x91` a;\x9F\x92\x94\x93a;\x98`@\x82\x01\x96_\x83\x01\x90a\r\xE0V[\x01\x90a\r\xE0V[V[\x96\x95\x91\x93\x92\x94\x90\x94Ba;\xBCa;\xB6\x83a\x04\x8AV[\x91a\x04\x8AV[\x11a<vW\x90a<%a<.\x94\x93\x92a<\ra;\xD6a:\xFFV[a;\xFE\x8C\x80\x94\x8C\x91a;\xE8\x8D\x91aM\x8DV[\x91\x92a;\xF2a\x04BV[\x97\x88\x96` \x88\x01a;#V[` \x82\x01\x81\x03\x82R\x03\x82a!~V[a<\x1Fa<\x19\x82a8\xE5V[\x91a8\xDFV[ aL\xE3V[\x92\x90\x91\x92aM\0V[\x80a<Aa<;\x87a\x04[V[\x91a\x04[V[\x03a<VWPa<T\x92\x93\x91\x90\x91a>GV[V[\x84\x90a<r_\x92\x83\x92c%\xC0\x07#`\xE1\x1B\x84R`\x04\x84\x01a;~V[\x03\x90\xFD[a<\x91\x90_\x91\x82\x91c1<\x89\x81`\xE1\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[\x90a<\xB0\x91a<\xABa<\xA6\x82a$XV[a=\xA5V[a<\xB2V[V[\x90a<\xBC\x91aF\x89V[PV[\x90a<\xC9\x91a<\x95V[V[\x90a<\xD5\x90a\x05\x08V[_R` R`@_ \x90V[a=\x06\x91a<\xFCa=\x01\x92a<\xF4a\x1F\x1CV[P`\x01a<\xCBV[a\t\x8FV[a\x0C\x1CV[\x90V[a=\x13`@a%\xCBV[\x90V[_\x90V[_\x90V[a=&a=\tV[\x90` \x80\x83a=3a=\x16V[\x81R\x01a=>a=\x1AV[\x81RPPV[a=La=\x1EV[\x90V[\x90a=b\x91a=\\a=DV[PaM\xC0V[\x90V[a=ma\x1E\x1CV[P\x80a=\x88a=\x82cye\xDB\x0B`\xE0\x1Ba\x06\x02V[\x91a\x06\x02V[\x14\x90\x81\x15a=\x95W[P\x90V[a=\x9F\x91PaM\xE8V[_a=\x91V[a=\xB7\x90a=\xB1a>:V[\x90aN1V[V[a=\xC2\x90a\x04\xE0V[\x90V[a=\xD9a=\xD4a=\xDE\x92a\x04PV[a\x04\xDDV[a\x04\x8AV[\x90V[a=\xF5a=\xF0a=\xFA\x92a\x04\x8AV[a\x17=V[a\x08\xF4V[\x90V[\x90V[\x90a>2a>,a>'a>\"_a>7\x96a>\x1Aa\x1E\x1CV[P\x01\x94a=\xB9V[a=\xC5V[a=\xE1V[\x91a=\xFDV[aO\xAEV[\x90V[a>Ba+&V[P3\x90V[\x91a>U\x92\x91`\x01\x92aP\xB4V[V[\x90V[`@\x90a>\x83a>\x8A\x94\x96\x95\x93\x96a>y``\x84\x01\x98_\x85\x01\x90a\r\xE0V[` \x83\x01\x90a\x05\xAAV[\x01\x90a\x05\xAAV[V[a>\xA0a>\x9B`\r\x83\x90a\x0B\xEDV[a>WV[\x91a>\xBEa>\xB8a>\xB1`\x0Ea\x1E\xCBV[\x84\x90aI\xBBV[\x15a\x06OV[\x80\x15a@gW[a@HWa>\xDEBa>\xD8a\x0E\x10a&MV[\x90a&}V[a>\xE7_a\"#V[\x91a>\xF1_a\"#V[[\x80a?\x06a?\0`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15a?rW\x82a?\x1Fa?\x19\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15a?4W[a?/\x90a&\x9FV[a>\xF2V[\x92a?ja?/\x91a?da?_a?N`\x11\x8A\x90a\x05\x14V[a?Y\x88\x8A\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x93\x90Pa?&V[P\x91\x90\x92\x93a?\x82\x82\x84\x90a\"?V[a?\x9Ea?\x98a?\x93_\x85\x01a\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x11a?\xD8WPPa?\xC1a?\xD6\x93\x92a?\xBCa?\xD0\x93\x94`\x11a\x05\x14V[a\x05FV[\x91a?\xCB\x83a\x0C\x1CV[a\"?V[\x90a+\xBDV[V[\x84\x93Pa?\xE6_\x82\x01a\x0C\x1CV[a?\xF8a?\xF2\x84a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14a@5Wa@1\x91a@\x11_a@\x16\x93\x01a\x0C\x1CV[a&\xCDV[[\x92\x91\x92_\x93\x84\x93c@\xED6{`\xE0\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[PPa@1a@C_a\"#V[a@\x17V[a@c\x82_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[Pa@}a@w`\x02\x85\x01a\x0CCV[\x15a\x06OV[a>\xC5V[a@\x96a@\x91`\x10\x83\x90a\t\x8FV[a\x0C\x1CV[a@\xA9a@\xA3\x84\x92a\x04\x8AV[\x91a\x04\x8AV[\x11aA\x1AWa@\xD6\x82a@\xD0a@\xC1`\x10\x85\x90a\t\x8FV[\x91a@\xCB\x83a\x0C\x1CV[a&\xCDV[\x90a+\xBDV[aA\x15aA\x03\x7F\xBC#\xEC\x7F\x13\x13\x15\x0B\x04{\xFF\x83\xD0\x84[\x05d\xBA\xA14i\x8D\xD1\x1B\xB0\xAC\xD0\xF7\xD4\x16\xDE}\x92a\x05\x08V[\x92aA\x0Ca\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA2V[_c\x1E\xB7\x84W`\xE2\x1B\x81R\x80aA2`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x80aAQaAKaAF_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aAmWaAk\x91aAc_a\x1E\xBFV[\x91\x90\x91aQ\xC3V[V[aA\x90aAy_a\x1E\xBFV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[\x90aA\x9F\x91\x03a\x04\x8AV[\x90V[\x92\x91\x92aA\xB0\x81\x83\x90a<\xE1V[\x90\x81aA\xC5aA\xBF_\x19a\x04\x8AV[\x91a\x04\x8AV[\x10aA\xD2W[PPP\x90PV[\x81aA\xE5aA\xDF\x87a\x04\x8AV[\x91a\x04\x8AV[\x10aB\x0BWaB\x02\x93\x94aA\xFA\x91\x93\x92aA\x94V[\x90_\x92aP\xB4V[\x80_\x80\x80aA\xCBV[PaB*\x84\x92\x91\x92_\x93\x84\x93c}\xC7\xA0\xD9`\xE1\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[\x91\x82aBJaBDaB?_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aB\xA4W\x81aBjaBdaB__a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aB}WaB{\x92\x91\x90\x91aQ\xC3V[V[aB\xA0aB\x89_a\x1E\xBFV[_\x91\x82\x91c\xECD/\x05`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aB\xC7aB\xB0_a\x1E\xBFV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aB\xDFaB\xDA`\r\x83\x90a\x0B\xEDV[a>WV[\x91aB\xFDaB\xF7aB\xF0`\x0Ea\x1E\xCBV[\x84\x90aI\xBBV[\x15a\x06OV[\x80\x15aD\xA9W[aD\x8AWaC\x1DBaC\x17a\x0E\x10a&MV[\x90a&}V[aC&_a\"#V[\x91aC0_a\"#V[[\x80aCEaC?`\x18a&\xB1V[\x91a\x04\x8AV[\x10\x15aC\xB1W\x82aC^aCX\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15aCsW[aCn\x90a&\x9FV[aC1V[\x92aC\xA9aCn\x91aC\xA3aC\x9EaC\x8D`\x12\x8A\x90a\x05\x14V[aC\x98\x88\x8A\x90a&\xCDV[\x90a\x05FV[a\x0C\x1CV[\x90a\"?V[\x93\x90PaCeV[P\x91\x90\x92\x93aC\xC1\x82\x84\x90a\"?V[aC\xDEaC\xD8aC\xD3`\x01\x85\x01a\x0C\x1CV[a\x04\x8AV[\x91a\x04\x8AV[\x11aD\x18WPPaD\x01aD\x16\x93\x92aC\xFCaD\x10\x93\x94`\x12a\x05\x14V[a\x05FV[\x91aD\x0B\x83a\x0C\x1CV[a\"?V[\x90a+\xBDV[V[\x84\x93PaD'`\x01\x82\x01a\x0C\x1CV[aD9aD3\x84a\x04\x8AV[\x91a\x04\x8AV[\x11_\x14aDwWaDs\x91aDS`\x01aDX\x93\x01a\x0C\x1CV[a&\xCDV[[\x92\x91\x92_\x93\x84\x93cr\xFFK\xD1`\xE1\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[PPaDsaD\x85_a\"#V[aDYV[aD\xA5\x82_\x91\x82\x91ce\x85\xB6\r`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[PaD\xBFaD\xB9`\x02\x85\x01a\x0CCV[\x15a\x06OV[aC\x04V[\x90\x81aD\xE0aD\xDAaD\xD5_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aD\xFCWaD\xFA\x91\x90aD\xF3_a\x1E\xBFV[\x90\x91aQ\xC3V[V[aE\x1FaE\x08_a\x1E\xBFV[_\x91\x82\x91cKc~\x8F`\xE1\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aE+a\x1E\x1CV[PaE@aE:\x82\x84\x90a6\x7FV[\x15a\x06OV[_\x14aE\xC9WaEh`\x01aEc_aE[`\x05\x86\x90a$\x1EV[\x01\x85\x90a6iV[a.\x8BV[\x90aEqa>:V[\x90aE\xAEaE\xA8aE\xA2\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a$\x12V[\x92a\x05\x08V[\x92a\x05\x08V[\x92aE\xB7a\x04BV[\x80aE\xC1\x81a\x06\xC9V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aE\xD7a$\x0EV[PaE\xE10a5:V[aF\x13aF\r\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04[V[\x91a\x04[V[\x14\x80aFOW[_\x14aFDW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[aFLaR\xDEV[\x90V[PFaF\x83aF}\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x04\x8AV[\x91a\x04\x8AV[\x14aF\x1AV[aF\x91a\x1E\x1CV[PaF\x9D\x81\x83\x90a6\x7FV[_\x14aG%WaF\xC4_aF\xBF_aF\xB7`\x05\x86\x90a$\x1EV[\x01\x85\x90a6iV[a.\x8BV[\x90aF\xCDa>:V[\x90aG\naG\x04aF\xFE\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a$\x12V[\x92a\x05\x08V[\x92a\x05\x08V[\x92aG\x13a\x04BV[\x80aG\x1D\x81a\x06\xC9V[\x03\x90\xA4`\x01\x90V[PP_\x90V[aG?aG:aGD\x92a\x15\xC2V[a\x04\xDDV[a\x04\x8AV[\x90V[\x91` aGh\x92\x94\x93aGa`@\x82\x01\x96_\x83\x01\x90a\x05\xAAV[\x01\x90a\x15\xCDV[V[aGra6\xA9V[PaG{a6\xADV[\x81aG\x8EaG\x88\x83aG+V[\x91a\x04\x8AV[\x10\x15aG\xA1WPaG\x9E\x90aS\xE7V[\x90V[\x90aG\xBC_\x92\x83\x92cvi\xFC\x0F`\xE1\x1B\x84R`\x04\x84\x01aGGV[\x03\x90\xFD[T\x90V[\x90V[aG\xDBaG\xD6aG\xE0\x92aG\xC4V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[e\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[aG\xFDaH\x02\x91a\x0C\x03V[aG\xE6V[\x90V[aH\x0F\x90TaG\xF1V[\x90V[\x90V[aH)aH$aH.\x92aH\x12V[a\x04\xDDV[a\x04\x8AV[\x90V[`0\x1C\x90V[`\x01\x80`\xD0\x1B\x03\x16\x90V[aHNaHS\x91aH1V[aH7V[\x90V[aH`\x90TaHBV[\x90V[aHwaHraH|\x92a\x17:V[a\x04\xDDV[a\x1C\x98V[\x90V[\x90aH\xD3\x90aH\x8Ca\x1D\x87V[PaH\x98_\x84\x01aG\xC0V[aH\xA1_a\"#V[\x90\x80\x80aH\xB7aH\xB1`\x05aG\xC7V[\x91a\x04\x8AV[\x11aI4W[P\x90aH\xCE_\x86\x01\x93\x91\x92\x93aG\xE3V[aZ\"V[\x80aH\xE6aH\xE0_a\"#V[\x91a\x04\x8AV[\x14_\x14aH\xFCWPPaH\xF8_aHcV[[\x90V[aI)_\x91aI$aI\x1E\x84aI/\x96\x01\x92aI\x18`\x01aH\x15V[\x90a&\xCDV[\x91aG\xE3V[aZ\x18V[\x01aHVV[aH\xF9V[\x80aIBaIH\x92\x91aV\xADV[\x90a&\xCDV[\x90\x83aIzaItaIo_aIi\x81\x8C\x01aId\x89\x91aG\xE3V[aZ\x18V[\x01aH\x05V[a\x15\xC2V[\x91a\x15\xC2V[\x10_\x14aI\x8BWP\x90[\x90_aH\xBDV[\x91PaI\xA1\x90aI\x9B`\x01aH\x15V[\x90a\"?V[aI\x84V[aI\xAEa6\xA9V[PaI\xB8CaS\xE7V[\x90V[\x90aI\xEDaI\xE7aI\xE2aI\xDD_aI\xF2\x96aI\xD5a\x1E\x1CV[P\x01\x94a=\xB9V[a=\xC5V[a=\xE1V[\x91a=\xFDV[aZ\xB1V[\x90V[aJ\x0C_aJ\x11\x92aJ\x05a\x1F\x1CV[P\x01a=\xFDV[aZ\xE6V[\x90V[aJ aJ%\x91a\x0C\x03V[a\x05*V[\x90V[aJ<aJ7aJA\x92a\x04\x8AV[a\x04\xDDV[a\x04PV[\x90V[aJoaJjaJy\x93aJe_aJt\x95aJ^a+&V[P\x01a=\xFDV[aZ\xFDV[aJ\x14V[aJ(V[a\x04\xFCV[\x90V[\x90aJ\x8D`\x01\x80`\xA0\x1B\x03\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90aJ\xAFaJ\xAAaJ\xB6\x92a\x05\x08V[aJ\x97V[\x82TaJ|V[\x90UV[\x90aKC\x91aK=aJ\xCB\x82a+lV[aJ\xE0\x84aJ\xDB`\t\x86\x90a+*V[aJ\x9AV[\x82\x81\x85\x90aK aK\x1AaK\x14\x7F14\xE8\xA2\xE6\xD9~\x92\x9A~T\x01\x1E\xA5H]}\x19m\xD5\xF0\xBAMN\xF9X\x03\xE8\xE3\xFC%\x7F\x95a\x05\x08V[\x92a\x05\x08V[\x92a\x05\x08V[\x92aK)a\x04BV[\x80aK3\x81a\x06\xC9V[\x03\x90\xA4\x92\x91a[\x1EV[\x91a[6V[V[\x90aKwaKqaKlaKg_aK|\x96aK_a\x1E\x1CV[P\x01\x94a=\xB9V[a=\xC5V[a=\xE1V[\x91a=\xFDV[a]\x19V[\x90V[aK\xA6aK\xA1aK\x9CaK\xAB\x93aK\x94a1{V[P`\na(\xACV[a(\xC2V[a]|V[a]\xFBV[\x90V[aK\xC5_aK\xCA\x92aK\xBEa1\xB2V[P\x01a=\xFDV[a_\x1DV[aK\xD2a1\xB2V[P\x90V[aK\xE8\x90aK\xE2a\x1F\x1CV[Pa_4V[\x90V[\x90V[aK\xF6a |V[PaL+\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aL%`\x06aK\xEBV[\x90a`OV[\x90V[aL6a |V[PaLk\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0aLe`\x07aK\xEBV[\x90a`OV[\x90V[aLva\x1D\x87V[PaL\x82_\x82\x01aG\xC0V[\x80aL\x95aL\x8F_a\"#V[\x91a\x04\x8AV[\x14_\x14aL\xABWPPaL\xA7_aHcV[[\x90V[aL\xD8_\x91aL\xD3aL\xCD\x84aL\xDE\x96\x01\x92aL\xC7`\x01aH\x15V[\x90a&\xCDV[\x91aG\xE3V[aZ\x18V[\x01aHVV[aL\xA8V[aL\xFD\x90aL\xEFa$\x0EV[PaL\xF8aE\xCFV[a`\x9DV[\x90V[\x92aM\x1B\x92aM$\x94aM\x11a+&V[P\x92\x90\x91\x92aaOV[\x90\x92\x91\x92abzV[\x90V[\x91` aMH\x92\x94\x93aMA`@\x82\x01\x96_\x83\x01\x90a\r\xE0V[\x01\x90a\x05\xAAV[V[aMS\x81aM\x8DV[\x91aMfaM`\x84a\x04\x8AV[\x91a\x04\x8AV[\x03aMoWPPV[aM\x89_\x92\x83\x92c\x01\xD4\xB6#`\xE6\x1B\x84R`\x04\x84\x01aM'V[\x03\x90\xFD[aM\xA1\x90aM\x99a\x1F\x1CV[P`\x08a\t\x8FV[aM\xBDaM\xAD\x82a\x0C\x1CV[\x91aM\xB7\x83a&\x9FV[\x90a+\xBDV[\x90V[\x90aM\xE0aM\xDBaM\xE5\x93aM\xD3a=DV[P`\na(\xACV[a(\xC2V[ac\xDCV[\x90V[aM\xF0a\x1E\x1CV[PaN\naN\x04c\x01\xFF\xC9\xA7`\xE0\x1Ba\x06\x02V[\x91a\x06\x02V[\x14\x90V[\x91` aN/\x92\x94\x93aN(`@\x82\x01\x96_\x83\x01\x90a\r\xE0V[\x01\x90a\t8V[V[\x90aNFaN@\x83\x83\x90a6\x7FV[\x15a\x06OV[aNNWPPV[aNh_\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01aN\x0EV[\x03\x90\xFD[\x90aNv\x90a$\x12V[_R` R`@_ \x90V[T\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_R` _ \x90V[aN\xAC\x81aN\x82V[\x82\x10\x15aN\xC6WaN\xBE`\x01\x91aN\x9AV[\x91\x02\x01\x90_\x90V[aN\x86V[aN\xDB\x90`\x08aN\xE0\x93\x02a\x05\\V[a$4V[\x90V[\x90aN\xEE\x91TaN\xCBV[\x90V[aN\xFA\x90a\x0C\x03V[\x90V[\x91\x90aO\x13aO\x0EaO\x1B\x93a$\x12V[aN\xF1V[\x90\x83Ta\x1E\xD2V[\x90UV[\x90V[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[T\x90V[_R` _ \x90V[aOL\x81aO6V[\x82\x10\x15aOfWaO^`\x01\x91aO:V[\x91\x02\x01\x90_\x90V[aN\x86V[aO}\x91aOwa$\x0EV[\x91aN\xFDV[V[aO\x88\x81aO6V[\x80\x15aO\xA9W`\x01\x90\x03\x90aO\xA6aO\xA0\x83\x83aOCV[\x90aOkV[UV[aO\"V[aO\xB6a\x1E\x1CV[PaO\xCDaO\xC8`\x01\x83\x01\x84\x90aNlV[a\x0C\x1CV[\x90\x81aO\xE1aO\xDB_a\"#V[\x91a\x04\x8AV[\x14\x15_\x14aP\xADWaP_\x92`\x01aPZ\x92\x84aP\x08_\x96aP\x02\x85aH\x15V[\x90a&\xCDV[aP%aP\x16\x88\x85\x01aN\x82V[aP\x1F\x86aH\x15V[\x90a&\xCDV[\x81aP8aP2\x83a\x04\x8AV[\x91a\x04\x8AV[\x03aPdW[PPPaPTaPO\x86\x83\x01aO\x1FV[aO\x7FV[\x01aNlV[a\x1F V[`\x01\x90V[aP\xA5\x92aP\x97aP\x83aP}aP\xA0\x94\x8C\x89\x01aN\xA3V[\x90aN\xE3V[\x93aP\x91\x85\x91\x8C\x89\x01aN\xA3V[\x90aN\xFDV[\x91\x85\x85\x01aNlV[a+\xBDV[_\x80\x80aP>V[PPP_\x90V[\x90\x92\x81aP\xD1aP\xCBaP\xC6_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aQ\x9CW\x83aP\xF1aP\xEBaP\xE6_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14aQuWaQ\x15\x83aQ\x10aQ\t`\x01\x86\x90a<\xCBV[\x87\x90a\t\x8FV[a+\xBDV[aQ\x1FW[PPPV[\x91\x90\x91aQjaQXaQR\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%\x93a\x05\x08V[\x93a\x05\x08V[\x93aQaa\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3_\x80\x80aQ\x1AV[aQ\x98aQ\x81_a\x1E\xBFV[_\x91\x82\x91cJ\x14\x06\xB1`\xE1\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[aQ\xBFaQ\xA8_a\x1E\xBFV[_\x91\x82\x91c\xE6\x02\xDF\x05`\xE0\x1B\x83R`\x04\x83\x01a\r\xEDV[\x03\x90\xFD[\x91\x82aQ\xDFaQ\xD9aQ\xD4_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14\x15\x80aRJW[aQ\xFAW[aQ\xF8\x92\x91\x90\x91ac\xFDV[V[aR\x02a3\xD3V[\x80aR)W[\x15aQ\xECW_c6\xE2x\xFD`\xE2\x1B\x81R\x80aR%`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[PaREaR?aR8a\x14\x18V[3\x90a6\x7FV[\x15a\x06OV[aR\x08V[P\x81aRfaR`aR[_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14\x15aQ\xE7V[\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x90V[\x90\x95\x94\x92aR\xDC\x94aR\xCBaR\xD5\x92aR\xC1`\x80\x96aR\xB7`\xA0\x88\x01\x9C_\x89\x01\x90a\t8V[` \x87\x01\x90a\t8V[`@\x85\x01\x90a\t8V[``\x83\x01\x90a\x05\xAAV[\x01\x90a\r\xE0V[V[aR\xE6a$\x0EV[PaR\xEFaRmV[aSf\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91aSW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0FaSB0a5:V[\x91aSKa\x04BV[\x96\x87\x95` \x87\x01aR\x91V[` \x82\x01\x81\x03\x82R\x03\x82a!~V[aSxaSr\x82a8\xE5V[\x91a8\xDFV[ \x90V[\x90V[aS\x93aS\x8EaS\x98\x92aS|V[a\x04\xDDV[a\n\xBDV[\x90V[aS\xA4\x90aS\x7FV[\x90RV[\x91` aS\xC9\x92\x94\x93aS\xC2`@\x82\x01\x96_\x83\x01\x90aS\x9BV[\x01\x90a\x05\xAAV[V[aS\xDFaS\xDAaS\xE4\x92a\x04\x8AV[a\x04\xDDV[a\x15\xC2V[\x90V[aS\xEFa6\xA9V[P\x80aT\taT\x03e\xFF\xFF\xFF\xFF\xFF\xFFaG+V[\x91a\x04\x8AV[\x11aT\x1AWaT\x17\x90aS\xCBV[\x90V[`0aT6_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01aS\xA8V[\x03\x90\xFD[\x90V[aTQaTLaTV\x92aT:V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aTpaTkaTu\x92aTYV[a\x04\xDDV[a\n\xBDV[\x90V[aT\x97\x90aT\x91aT\x8BaT\x9C\x94a\n\xBDV[\x91a\x04\x8AV[\x90a\x05\\V[a\x04\x8AV[\x90V[\x90V[aT\xB6aT\xB1aT\xBB\x92aT\x9FV[a\x04\xDDV[a\n\xBDV[\x90V[aT\xDD\x90aT\xD7aT\xD1aT\xE2\x94a\n\xBDV[\x91a\x04\x8AV[\x90a\x1E\xCEV[a\x04\x8AV[\x90V[\x90V[aT\xFCaT\xF7aU\x01\x92aT\xE5V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aU\x1BaU\x16aU \x92aU\x04V[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aU:aU5aU?\x92aU#V[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aUYaUTaU^\x92aUBV[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aUxaUsaU}\x92aUaV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aU\x97aU\x92aU\x9C\x92aU\x80V[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aU\xB6aU\xB1aU\xBB\x92aU\x9FV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aU\xD5aU\xD0aU\xDA\x92aU\xBEV[a\x04\xDDV[a\n\xBDV[\x90V[aU\xF1aU\xECaU\xF6\x92aUBV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[aV\x10aV\x0BaV\x15\x92aU\xF9V[a\x04\xDDV[a\n\xBDV[\x90V[aV,aV'aV1\x92aU\xBEV[a\x04\xDDV[a\x04\x8AV[\x90V[aVHaVCaVM\x92aH\x12V[a\x04\xDDV[a\n\xBDV[\x90V[\x90V[aVgaVbaVl\x92aVPV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90aVz\x91\x02a\x04\x8AV[\x90V[aV\x89aV\x8F\x91a\x04\x8AV[\x91a\x04\x8AV[\x90\x81\x15aV\x9AW\x04\x90V[a&iV[\x90aV\xAA\x91\x01a\x04\x8AV[\x90V[aV\xB5a\x1F\x1CV[P\x80aV\xCAaV\xC4`\x01aH\x15V[\x91a\x04\x8AV[\x11\x15aZ\x15W\x80aX\xDFaX\xBCaX\xACaX\x9CaX\x8CaX|aXlaX\\aXLaX<aX,\x8BaX&aX\x1FaX\xE5\x9FaW\xFFaW\xEFaX\x0F\x92aW\x11`\x01aH\x15V[\x90\x80aW)aW#`\x01`\x80\x1BaT=V[\x91a\x04\x8AV[\x10\x15aY\xE7W[\x80aWLaWFh\x01\0\0\0\0\0\0\0\0aT\xE8V[\x91a\x04\x8AV[\x10\x15aY\xB9W[\x80aWkaWed\x01\0\0\0\0aU&V[\x91a\x04\x8AV[\x10\x15aY\x8BW[\x80aW\x88aW\x82b\x01\0\0aUdV[\x91a\x04\x8AV[\x10\x15aY]W[\x80aW\xA4aW\x9Ea\x01\0aU\xA2V[\x91a\x04\x8AV[\x10\x15aY/W[\x80aW\xBFaW\xB9`\x10aU\xDDV[\x91a\x04\x8AV[\x10\x15aY\x01W[aW\xD9aW\xD3`\x04aV\x18V[\x91a\x04\x8AV[\x10\x15aX\xE8W[aW\xEA`\x03aVSV[aVoV[aW\xF9`\x01aV4V[\x90aTxV[aX\t\x81\x86aV}V[\x90aV\x9FV[aX\x19`\x01aV4V[\x90aTxV[\x80\x92aV}V[\x90aV\x9FV[aX6`\x01aV4V[\x90aTxV[aXF\x81\x8CaV}V[\x90aV\x9FV[aXV`\x01aV4V[\x90aTxV[aXf\x81\x8AaV}V[\x90aV\x9FV[aXv`\x01aV4V[\x90aTxV[aX\x86\x81\x88aV}V[\x90aV\x9FV[aX\x96`\x01aV4V[\x90aTxV[aX\xA6\x81\x86aV}V[\x90aV\x9FV[aX\xB6`\x01aV4V[\x90aTxV[\x91aX\xD9aX\xD3aX\xCE\x85\x80\x94aV}V[a\x04\x8AV[\x91a\x04\x8AV[\x11ad\x8DV[\x90aA\x94V[\x90V[aX\xFC\x90aX\xF6`\x01aV4V[\x90aT\xBEV[aW\xE0V[aY\x18aY)\x91aY\x12`\x04aU\xC1V[\x90aTxV[\x91aY#`\x02aU\xFCV[\x90aT\xBEV[\x90aW\xC6V[aYFaYW\x91aY@`\x08aU\x83V[\x90aTxV[\x91aYQ`\x04aU\xC1V[\x90aT\xBEV[\x90aW\xABV[aYtaY\x85\x91aYn`\x10aUEV[\x90aTxV[\x91aY\x7F`\x08aU\x83V[\x90aT\xBEV[\x90aW\x8FV[aY\xA2aY\xB3\x91aY\x9C` aU\x07V[\x90aTxV[\x91aY\xAD`\x10aUEV[\x90aT\xBEV[\x90aWrV[aY\xD0aY\xE1\x91aY\xCA`@aT\xA2V[\x90aTxV[\x91aY\xDB` aU\x07V[\x90aT\xBEV[\x90aWSV[aY\xFEaZ\x0F\x91aY\xF8`\x80aT\\V[\x90aTxV[\x91aZ\t`@aT\xA2V[\x90aT\xBEV[\x90aW0V[\x90V[_R` _ \x01\x90V[\x93\x91\x90\x92aZ.a\x1F\x1CV[P[\x81aZCaZ=\x83a\x04\x8AV[\x91a\x04\x8AV[\x10\x15aZ\xA9WaZT\x82\x82\x90ad\xB7V[\x90aZj_aZd\x88\x85\x90aZ\x18V[\x01aH\x05V[aZ|aZv\x87a\x15\xC2V[\x91a\x15\xC2V[\x11_\x14aZ\x8CWP\x91[\x91aZ0V[\x92\x91PaZ\xA3\x90aZ\x9D`\x01aH\x15V[\x90a\"?V[\x90aZ\x86V[\x92PP\x91P\x90V[aZ\xCF\x91`\x01aZ\xCA\x92aZ\xC3a\x1E\x1CV[P\x01aNlV[a\x0C\x1CV[aZ\xE1aZ\xDB_a\"#V[\x91a\x04\x8AV[\x14\x15\x90V[_aZ\xFA\x91aZ\xF3a\x1F\x1CV[P\x01aN\x82V[\x90V[a[\x1B\x91_a[\x15\x92a[\x0Ea$\x0EV[P\x01aN\xA3V[\x90aN\xE3V[\x90V[a[0\x90a[*a\x1F\x1CV[Pa1\x94V[\x90V[\x90V[\x91\x90\x91\x80a[La[F\x85a\x04[V[\x91a\x04[V[\x14\x15\x80a\\\xCAW[a[^W[PPPV[\x80a[ya[sa[n_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x03a\\:W[P\x81a[\x9Ba[\x95a[\x90_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x03a[\xA7W[\x80a[YV[a[\xEEa[\xE1a[\xE8\x92a[\xBD`\n\x86\x90a(\xACV[\x90a[\xDBa[\xD5a[\xCF`\x01\x93aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[\x92\x90a(\xC5V[\x91a(\xC5V[\x91\x90\x91a\\\x1B\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\x05\x08V[\x92a\\0a\\'a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2_\x80a[\xA1V[a\\ya\\\x7Fa\\ra\\O`\n\x85\x90a(\xACV[`\x02a\\la\\fa\\`\x89aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[\x92\x90a(\xC5V[\x91a(\xC5V[\x91\x90\x91a\\\xAC\x7F\xDE\xC2\xBA\xCD\xD2\xF0[Y\xDE4\xDA\x9BR=\xFF\x8B\xE4.^8\xE8\x18\xC8/\xDB\x0B\xAEwC\x87\xA7$\x92a\x05\x08V[\x92a\\\xC1a\\\xB8a\x04BV[\x92\x83\x92\x83a.)V[\x03\x90\xA2_a[\x7FV[P\x81a\\\xDEa\\\xD8_a\"#V[\x91a\x04\x8AV[\x11a[TV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15a]\x14W\x82a]\x0C\x91`\x01a]\x12\x95\x01\x81UaOCV[\x90aN\xFDV[V[a!jV[a]!a\x1E\x1CV[Pa]6a]0\x82\x84\x90aZ\xB1V[\x15a\x06OV[_\x14a]vWa]la]q\x92a]Xa]Q_\x85\x01aO\x1FV[\x82\x90a\\\xE4V[`\x01a]e_\x85\x01aN\x82V[\x93\x01aNlV[a+\xBDV[`\x01\x90V[PP_\x90V[_a]\x90\x91a]\x89a\x1F\x1CV[P\x01aG\xC0V[\x90V[a]\xA7a]\xA2a]\xAC\x92a\x0F\xCDV[a\x04\xDDV[a\x04\x8AV[\x90V[a]\xB8\x90aU\x07V[\x90RV[\x91` a]\xDD\x92\x94\x93a]\xD6`@\x82\x01\x96_\x83\x01\x90a]\xAFV[\x01\x90a\x05\xAAV[V[a]\xF3a]\xEEa]\xF8\x92a\x04\x8AV[a\x04\xDDV[a\x0F\xCDV[\x90V[a^\x03a1{V[P\x80a^\x1Ba^\x15c\xFF\xFF\xFF\xFFa]\x93V[\x91a\x04\x8AV[\x11a^,Wa^)\x90a]\xDFV[\x90V[` a^H_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01a]\xBCV[\x03\x90\xFD[``\x90V[` \x91\x81R\x01\x90V[a^c\x90a\x08\xF4V[\x90RV[\x90a^t\x81` \x93a^ZV[\x01\x90V[a^\x82\x90Ta$7V[\x90V[`\x01\x01\x90V[\x90a^\xA8a^\xA2a^\x9B\x84aN\x82V[\x80\x93a^QV[\x92aN\x9AV[\x90_[\x81\x81\x10a^\xB8WPPP\x90V[\x90\x91\x92a^\xD8a^\xD2`\x01\x92a^\xCD\x87a^xV[a^gV[\x94a^\x85V[\x91\x01\x91\x90\x91a^\xABV[\x90a^\xEC\x91a^\x8BV[\x90V[\x90a_\x0Fa_\x08\x92a^\xFFa\x04BV[\x93\x84\x80\x92a^\xE2V[\x03\x83a!~V[V[a_\x1A\x90a^\xEFV[\x90V[_a_1\x91a_*a^LV[P\x01a_\x11V[\x90V[a_Ka_P\x91a_Ca\x1F\x1CV[P`\x08a\t\x8FV[a\x0C\x1CV[\x90V[\x90V[a_ja_ea_o\x92a_SV[a\x17=V[a\x08\xF4V[\x90V[a_|`\xFFa_VV[\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a_\xA2a_\x9B\x83a \x95V[\x80\x94a \xBFV[\x91`\x01\x81\x16\x90\x81_\x14a_\xF9WP`\x01\x14a_\xBDW[PPPV[a_\xCA\x91\x92\x93\x94Pa_\x7FV[\x91_\x92[\x81\x84\x10a_\xE1WPP\x01\x90_\x80\x80a_\xB8V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a_\xCEV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a_\xB8V[\x90a`\x1E\x91a_\x88V[\x90V[\x90a`Aa`:\x92a`1a\x04BV[\x93\x84\x80\x92a`\x14V[\x03\x83a!~V[V[a`L\x90a`!V[\x90V[\x90a`Xa |V[Pa`b\x82a$\x12V[a`{a`ua`pa_rV[a\x08\xF4V[\x91a\x08\xF4V[\x14\x15_\x14a`\x90WPa`\x8D\x90af-V[\x90V[a`\x9A\x91Pa`CV[\x90V[`B\x91a`\xA8a$\x0EV[P`@Q\x91\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`\x02\x83\x01R`\"\x82\x01R \x90V[_\x90V[\x90V[a`\xF9a`\xF4a`\xFE\x92a`\xE2V[a\x04\xDDV[a\x04\x8AV[\x90V[aa6aa=\x94aa,``\x94\x98\x97\x95aa\"`\x80\x86\x01\x9A_\x87\x01\x90a\t8V[` \x85\x01\x90a\n\xC3V[`@\x83\x01\x90a\t8V[\x01\x90a\t8V[V[aaGa\x04BV[=_\x82>=\x90\xFD[\x93\x92\x93aaZa+&V[Paaca`\xDEV[Paala$\x0EV[Paav\x85aJ\x14V[aa\xA8aa\xA2\x7F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF]WnsW\xA4P\x1D\xDF\xE9/Fh\x1B \xA0a`\xE5V[\x91a\x04\x8AV[\x11ab5W\x90aa\xCB` \x94\x95_\x94\x93\x92\x93aa\xC2a\x04BV[\x94\x85\x94\x85aa\x01V[\x83\x80R\x03\x90`\x01Z\xFA\x15ab0Waa\xE3_Qa\x17=V[\x80aa\xFEaa\xF8aa\xF3_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ab\x14W_\x91ab\x0E_a\x17BV[\x91\x92\x91\x90V[Pab\x1E_a\x1E\xBFV[`\x01\x91ab*_a\x17BV[\x91\x92\x91\x90V[aa?V[PPPabA_a\x1E\xBFV[\x90`\x03\x92\x91\x92\x91\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x04\x11\x15abiWV[abKV[\x90abx\x82ab_V[V[\x80ab\x8Dab\x87_abnV[\x91abnV[\x14_\x14ab\x98WPPV[\x80ab\xACab\xA6`\x01abnV[\x91abnV[\x14_\x14ab\xCFW_c\xF6E\xEE\xDF`\xE0\x1B\x81R\x80ab\xCB`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[\x80ab\xE3ab\xDD`\x02abnV[\x91abnV[\x14_\x14ac\x11Wac\rab\xF6\x83aJ\x14V[_\x91\x82\x91c\xFC\xE6\x98\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xB7V[\x03\x90\xFD[ac$ac\x1E`\x03abnV[\x91abnV[\x14ac,WPV[acG\x90_\x91\x82\x91c5\xE2\xF3\x83`\xE2\x1B\x83R`\x04\x83\x01a\tEV[\x03\x90\xFD[_R` _ \x90V[ac]\x81aG\xC0V[\x82\x10\x15acwWaco`\x01\x91acKV[\x91\x02\x01\x90_\x90V[aN\x86V[\x90ac\x86\x90a\x15\xC2V[\x90RV[\x90ac\x94\x90a\x1C\x98V[\x90RV[\x90ac\xCEac\xC5_ac\xA8a=\tV[\x94ac\xBFac\xB7\x83\x83\x01aH\x05V[\x83\x88\x01ac|V[\x01aHVV[` \x84\x01ac\x8AV[V[ac\xD9\x90ac\x98V[\x90V[ac\xFA\x91_ac\xF4\x92ac\xEDa=DV[P\x01acTV[Pac\xD0V[\x90V[\x92\x91ad\x0B\x84\x83\x83\x91af]V[\x83ad&ad ad\x1B_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ad;W[ad9\x92\x93\x91\x90\x91ag\xE7V[V[adCa\"\rV[\x93adLag\xCCV[\x94\x80ad`adZ\x88a\x04\x8AV[\x91a\x04\x8AV[\x11admWP\x93Pad,V[\x85\x90ad\x89_\x92\x83\x92c\x0EX\xAE\x93`\xE1\x1B\x84R`\x04\x84\x01a.)V[\x03\x90\xFD[ad\x95a\x1F\x1CV[P\x15\x15\x90V[ad\xAFad\xAAad\xB4\x92aU\xF9V[a\x04\xDDV[a\x04\x8AV[\x90V[ad\xDCad\xE2\x92ad\xC6a\x1F\x1CV[P\x82\x81\x16\x92\x18ad\xD6`\x02ad\x9BV[\x90a&}V[\x90a\"?V[\x90V[\x90V[ad\xFCad\xF7ae\x01\x92ad\xE5V[a\x04\xDDV[a\n\xBDV[\x90V[ae\r\x90ad\xE8V[\x90RV[\x91` ae2\x92\x94\x93ae+`@\x82\x01\x96_\x83\x01\x90ae\x04V[\x01\x90a\x05\xAAV[V[aeHaeCaeM\x92a\x04\x8AV[a\x04\xDDV[a\x1C\x98V[\x90V[aeXa\x1D\x87V[P\x80aerael`\x01\x80`\xD0\x1B\x03a(\xC5V[\x91a\x04\x8AV[\x11ae\x83Wae\x80\x90ae4V[\x90V[`\xD0ae\x9F_\x92\x83\x92c\x06\xDF\xCCe`\xE4\x1B\x84R`\x04\x84\x01ae\x11V[\x03\x90\xFD[\x90ae\xD9ae\xDF\x93\x92ae\xB4a\x1D\x87V[Pae\xBDa\x1D\x87V[P\x80\x93ae\xD2ae\xCBa6\xADV[\x94\x92aLnV[\x90\x91alOV[\x91ah\xA6V[\x91\x90\x91\x90V[ae\xF9ae\xF4ae\xFE\x92aU\x04V[a\x04\xDDV[a\x04\x8AV[\x90V[6\x907V[\x90af+af\x13\x83a*nV[\x92` \x80af!\x86\x93a*KV[\x92\x01\x91\x03\x90af\x01V[V[af5a |V[Paf?\x81ai\x10V[\x90afRafM` ae\xE5V[af\x06V[\x91\x82R` \x82\x01R\x90V[\x91\x90\x91\x80af{afuafp_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14_\x14ag\\Waf\x9Faf\x98\x83af\x93`\x02a\x0C\x1CV[a\"?V[`\x02a+\xBDV[[\x82af\xBBaf\xB5af\xB0_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14_\x14ag0Waf\xDFaf\xD8\x83af\xD3`\x02a\x0C\x1CV[aA\x94V[`\x02a+\xBDV[[\x91\x90\x91ag+ag\x19ag\x13\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x93a\x05\x08V[\x93a\x05\x08V[\x93ag\"a\x04BV[\x91\x82\x91\x82a\x05\xB7V[\x03\x90\xA3V[agW\x82agQagB_\x87\x90a\t\x8FV[\x91agL\x83a\x0C\x1CV[aV\x9FV[\x90a+\xBDV[af\xE0V[agoagj_\x83\x90a\t\x8FV[a\x0C\x1CV[\x80ag\x82ag|\x85a\x04\x8AV[\x91a\x04\x8AV[\x10ag\xAAWag\x95ag\xA5\x91\x84\x90aA\x94V[ag\xA0_\x84\x90a\t\x8FV[a+\xBDV[af\xA0V[\x90ag\xC8\x90\x91\x92_\x93\x84\x93c9\x144\xE3`\xE2\x1B\x85R`\x04\x85\x01a>ZV[\x03\x90\xFD[ag\xD4a\x1F\x1CV[Pag\xE4`\x01\x80`\xD0\x1B\x03a(\xC5V[\x90V[\x91ah?ah9ahF\x94\x80ah\rah\x07ah\x02_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ahwW[\x84ah.ah(ah#_a\x1E\xBFV[a\x04[V[\x91a\x04[V[\x14ahHW[a+lV[\x92a+lV[\x90\x91a[6V[V[ahp`\x0B`\x02ahjahdah^\x89aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[PPah4V[ah\x9F`\x0B`\x01ah\x99ah\x93ah\x8D\x89aePV[\x93a(\xC2V[\x91a[3V[\x90ae\xA3V[PPah\x13V[\x91ah\xCA_ah\xCF\x94ah\xB7a\x1D\x87V[Pah\xC0a\x1D\x87V[P\x01\x92\x91\x92aG\xE3V[ak\x01V[\x91\x90\x91\x90V[ah\xE9ah\xE4ah\xEE\x92a_SV[a\x04\xDDV[a\x04\x8AV[\x90V[\x90V[ai\x08ai\x03ai\r\x92ah\xF1V[a\x04\xDDV[a\x04\x8AV[\x90V[ai%ai*\x91ai\x1Fa\x1F\x1CV[Pa$\x12V[aJ\x14V[ai4`\xFFah\xD5V[\x16\x80aiIaiC`\x1Fah\xF4V[\x91a\x04\x8AV[\x11aiQW\x90V[_c,\xD4J\xC3`\xE2\x1B\x81R\x80aii`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[T\x90V[ai{`@a%\xCBV[\x90V[_R` _ \x90V[ai\x90\x81aimV[\x82\x10\x15ai\xAAWai\xA2`\x01\x91ai~V[\x91\x02\x01\x90_\x90V[aN\x86V[ai\xB9\x90Qa\x15\xC2V[\x90V[\x90ai\xCDe\xFF\xFF\xFF\xFF\xFF\xFF\x91a\x17=V[\x91\x81\x19\x16\x91\x16\x17\x90V[ai\xEBai\xE6ai\xF0\x92a\x15\xC2V[a\x04\xDDV[a\x15\xC2V[\x90V[\x90V[\x90aj\x0Baj\x06aj\x12\x92ai\xD7V[ai\xF3V[\x82Tai\xBCV[\x90UV[aj \x90Qa\x1C\x98V[\x90V[`0\x1B\x90V[\x90aj;e\xFF\xFF\xFF\xFF\xFF\xFF\x19\x91aj#V[\x91\x81\x19\x16\x91\x16\x17\x90V[ajYajTaj^\x92a\x1C\x98V[a\x04\xDDV[a\x1C\x98V[\x90V[\x90V[\x90ajyajtaj\x80\x92ajEV[ajaV[\x82Taj)V[\x90UV[\x90aj\xAE` _aj\xB4\x94aj\xA6\x82\x82\x01aj\xA0\x84\x88\x01ai\xAFV[\x90ai\xF6V[\x01\x92\x01aj\x16V[\x90ajdV[V[\x91\x90aj\xC7Waj\xC5\x91aj\x84V[V[a\x1FUV[\x90\x81T\x91h\x01\0\0\0\0\0\0\0\0\x83\x10\x15aj\xFCW\x82aj\xF4\x91`\x01aj\xFA\x95\x01\x81Uai\x87V[\x90aj\xB6V[V[a!jV[\x90\x92\x91\x92ak\ra\x1D\x87V[Pak\x16a\x1D\x87V[Pak \x82aimV[\x80ak3ak-_a\"#V[\x91a\x04\x8AV[\x11_\x14al\x03WakY\x90akS\x84\x91akM`\x01aH\x15V[\x90a&\xCDV[\x90aZ\x18V[\x90ake_\x83\x01aH\x05V[\x92akq_\x84\x01aHVV[\x93\x80ak\x85ak\x7F\x85a\x15\xC2V[\x91a\x15\xC2V[\x11ak\xE7Wak\x9Cak\x96\x84a\x15\xC2V[\x91a\x15\xC2V[\x14_\x14ak\xB7WPPak\xB2\x90_\x85\x91\x01ajdV[[\x91\x90V[ak\xE2\x92Pak\xDD\x86ak\xD4ak\xCBaiqV[\x94_\x86\x01ac|V[` \x84\x01ac\x8AV[aj\xCCV[ak\xB3V[_c% `\x1D`\xE0\x1B\x81R\x80ak\xFF`\x04\x82\x01a\x06\xC9V[\x03\x90\xFD[Pal.\x91al)\x85al al\x17aiqV[\x94_\x86\x01ac|V[` \x84\x01ac\x8AV[aj\xCCV[al7_aHcV[\x91\x90V[cNH{q`\xE0\x1B_R`Q`\x04R`$_\xFD[\x91\x90\x91\x80`\x01\x14alnW`\x02\x03al;Walj\x91a\x1E\x06V[\x90[V[Palx\x91a\x1D\xC7V[\x90allV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `BridgeMustBeContract()` and selector `0x825431da`.
```solidity
error BridgeMustBeContract();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeMustBeContract;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeMustBeContract> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeMustBeContract) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeMustBeContract {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeMustBeContract {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeMustBeContract()";
            const SELECTOR: [u8; 4] = [130u8, 84u8, 49u8, 218u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `BridgeNotActive(address)` and selector `0xefda0e06`.
```solidity
error BridgeNotActive(address bridge);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BridgeNotActive {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BridgeNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: BridgeNotActive) -> Self {
                (value.bridge,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for BridgeNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { bridge: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BridgeNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BridgeNotActive(address)";
            const SELECTOR: [u8; 4] = [239u8, 218u8, 14u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `BurnOnlyDuringLockPeriod()` and selector `0xb8b5ca2d`.
```solidity
error BurnOnlyDuringLockPeriod();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BurnOnlyDuringLockPeriod;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<BurnOnlyDuringLockPeriod>
        for UnderlyingRustTuple<'_> {
            fn from(value: BurnOnlyDuringLockPeriod) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for BurnOnlyDuringLockPeriod {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for BurnOnlyDuringLockPeriod {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BurnOnlyDuringLockPeriod()";
            const SELECTOR: [u8; 4] = [184u8, 181u8, 202u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CannotAddSelfAsBridge()` and selector `0xfb8ce8c9`.
```solidity
error CannotAddSelfAsBridge();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CannotAddSelfAsBridge;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CannotAddSelfAsBridge> for UnderlyingRustTuple<'_> {
            fn from(value: CannotAddSelfAsBridge) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CannotAddSelfAsBridge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CannotAddSelfAsBridge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CannotAddSelfAsBridge()";
            const SELECTOR: [u8; 4] = [251u8, 140u8, 232u8, 201u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CheckpointUnorderedInsertion()` and selector `0x2520601d`.
```solidity
error CheckpointUnorderedInsertion();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckpointUnorderedInsertion;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CheckpointUnorderedInsertion>
        for UnderlyingRustTuple<'_> {
            fn from(value: CheckpointUnorderedInsertion) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CheckpointUnorderedInsertion {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CheckpointUnorderedInsertion {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CheckpointUnorderedInsertion()";
            const SELECTOR: [u8; 4] = [37u8, 32u8, 96u8, 29u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ECDSAInvalidSignature()` and selector `0xf645eedf`.
```solidity
error ECDSAInvalidSignature();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignature;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignature()";
            const SELECTOR: [u8; 4] = [246u8, 69u8, 238u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ECDSAInvalidSignatureLength(uint256)` and selector `0xfce698f7`.
```solidity
error ECDSAInvalidSignatureLength(uint256 length);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureLength {
        #[allow(missing_docs)]
        pub length: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureLength>
        for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureLength) -> Self {
                (value.length,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ECDSAInvalidSignatureLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { length: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureLength(uint256)";
            const SELECTOR: [u8; 4] = [252u8, 230u8, 152u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ECDSAInvalidSignatureS(bytes32)` and selector `0xd78bce0c`.
```solidity
error ECDSAInvalidSignatureS(bytes32 s);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ECDSAInvalidSignatureS {
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ECDSAInvalidSignatureS> for UnderlyingRustTuple<'_> {
            fn from(value: ECDSAInvalidSignatureS) -> Self {
                (value.s,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ECDSAInvalidSignatureS {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { s: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ECDSAInvalidSignatureS {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ECDSAInvalidSignatureS(bytes32)";
            const SELECTOR: [u8; 4] = [215u8, 139u8, 206u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20ExceededSafeSupply(uint256,uint256)` and selector `0x1cb15d26`.
```solidity
error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20ExceededSafeSupply {
        #[allow(missing_docs)]
        pub increasedSupply: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub cap: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20ExceededSafeSupply> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20ExceededSafeSupply) -> Self {
                (value.increasedSupply, value.cap)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20ExceededSafeSupply {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    increasedSupply: tuple.0,
                    cap: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20ExceededSafeSupply {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20ExceededSafeSupply(uint256,uint256)";
            const SELECTOR: [u8; 4] = [28u8, 177u8, 93u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.increasedSupply),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.cap),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InsufficientAllowance(address,uint256,uint256)` and selector `0xfb8f41b2`.
```solidity
error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InsufficientAllowance {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub allowance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientAllowance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientAllowance) -> Self {
                (value.spender, value.allowance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientAllowance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    spender: tuple.0,
                    allowance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientAllowance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientAllowance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [251u8, 143u8, 65u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.allowance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InsufficientBalance(address,uint256,uint256)` and selector `0xe450d38c`.
```solidity
error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InsufficientBalance {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InsufficientBalance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InsufficientBalance) -> Self {
                (value.sender, value.balance, value.needed)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC20InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    balance: tuple.1,
                    needed: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InsufficientBalance(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [228u8, 80u8, 211u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidApprover(address)` and selector `0xe602df05`.
```solidity
error ERC20InvalidApprover(address approver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidApprover {
        #[allow(missing_docs)]
        pub approver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidApprover> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidApprover) -> Self {
                (value.approver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidApprover {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { approver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidApprover {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidApprover(address)";
            const SELECTOR: [u8; 4] = [230u8, 2u8, 223u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.approver,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidReceiver(address)` and selector `0xec442f05`.
```solidity
error ERC20InvalidReceiver(address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidReceiver {
        #[allow(missing_docs)]
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidReceiver> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidReceiver) -> Self {
                (value.receiver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidReceiver {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { receiver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidReceiver {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidReceiver(address)";
            const SELECTOR: [u8; 4] = [236u8, 68u8, 47u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidSender(address)` and selector `0x96c6fd1e`.
```solidity
error ERC20InvalidSender(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidSender {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSender) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSender(address)";
            const SELECTOR: [u8; 4] = [150u8, 198u8, 253u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC20InvalidSpender(address)` and selector `0x94280d62`.
```solidity
error ERC20InvalidSpender(address spender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC20InvalidSpender {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC20InvalidSpender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC20InvalidSpender) -> Self {
                (value.spender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC20InvalidSpender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { spender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC20InvalidSpender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC20InvalidSpender(address)";
            const SELECTOR: [u8; 4] = [148u8, 40u8, 13u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC2612ExpiredSignature(uint256)` and selector `0x62791302`.
```solidity
error ERC2612ExpiredSignature(uint256 deadline);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC2612ExpiredSignature {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC2612ExpiredSignature> for UnderlyingRustTuple<'_> {
            fn from(value: ERC2612ExpiredSignature) -> Self {
                (value.deadline,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC2612ExpiredSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { deadline: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC2612ExpiredSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC2612ExpiredSignature(uint256)";
            const SELECTOR: [u8; 4] = [98u8, 121u8, 19u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC2612InvalidSigner(address,address)` and selector `0x4b800e46`.
```solidity
error ERC2612InvalidSigner(address signer, address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC2612InvalidSigner {
        #[allow(missing_docs)]
        pub signer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC2612InvalidSigner> for UnderlyingRustTuple<'_> {
            fn from(value: ERC2612InvalidSigner) -> Self {
                (value.signer, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC2612InvalidSigner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    signer: tuple.0,
                    owner: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC2612InvalidSigner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC2612InvalidSigner(address,address)";
            const SELECTOR: [u8; 4] = [75u8, 128u8, 14u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signer,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC5805FutureLookup(uint256,uint48)` and selector `0xecd3f81e`.
```solidity
error ERC5805FutureLookup(uint256 timepoint, uint48 clock);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC5805FutureLookup {
        #[allow(missing_docs)]
        pub timepoint: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub clock: alloy::sol_types::private::primitives::aliases::U48,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<48>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U48,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC5805FutureLookup> for UnderlyingRustTuple<'_> {
            fn from(value: ERC5805FutureLookup) -> Self {
                (value.timepoint, value.clock)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC5805FutureLookup {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    timepoint: tuple.0,
                    clock: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC5805FutureLookup {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC5805FutureLookup(uint256,uint48)";
            const SELECTOR: [u8; 4] = [236u8, 211u8, 248u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timepoint),
                    <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::SolType>::tokenize(&self.clock),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC6372InconsistentClock()` and selector `0x6ff07140`.
```solidity
error ERC6372InconsistentClock();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC6372InconsistentClock;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC6372InconsistentClock>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC6372InconsistentClock) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC6372InconsistentClock {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC6372InconsistentClock {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC6372InconsistentClock()";
            const SELECTOR: [u8; 4] = [111u8, 240u8, 113u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ExceedsTotalSupply()` and selector `0x177e3fc3`.
```solidity
error ExceedsTotalSupply();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExceedsTotalSupply;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExceedsTotalSupply> for UnderlyingRustTuple<'_> {
            fn from(value: ExceedsTotalSupply) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExceedsTotalSupply {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExceedsTotalSupply {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExceedsTotalSupply()";
            const SELECTOR: [u8; 4] = [23u8, 126u8, 63u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientBurnLimit(address,uint256,uint256)` and selector `0xe5fe97a2`.
```solidity
error InsufficientBurnLimit(address bridge, uint256 requested, uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientBurnLimit {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub requested: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientBurnLimit> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientBurnLimit) -> Self {
                (value.bridge, value.requested, value.available)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientBurnLimit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bridge: tuple.0,
                    requested: tuple.1,
                    available: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientBurnLimit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientBurnLimit(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [229u8, 254u8, 151u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.requested),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.available),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientEmissionBudget()` and selector `0x7ade115c`.
```solidity
error InsufficientEmissionBudget();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientEmissionBudget;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientEmissionBudget>
        for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientEmissionBudget) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for InsufficientEmissionBudget {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientEmissionBudget {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientEmissionBudget()";
            const SELECTOR: [u8; 4] = [122u8, 222u8, 17u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InsufficientMintLimit(address,uint256,uint256)` and selector `0x40ed367b`.
```solidity
error InsufficientMintLimit(address bridge, uint256 requested, uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InsufficientMintLimit {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub requested: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InsufficientMintLimit> for UnderlyingRustTuple<'_> {
            fn from(value: InsufficientMintLimit) -> Self {
                (value.bridge, value.requested, value.available)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InsufficientMintLimit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bridge: tuple.0,
                    requested: tuple.1,
                    available: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InsufficientMintLimit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InsufficientMintLimit(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 237u8, 54u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.requested),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.available),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidAccountNonce(address,uint256)` and selector `0x752d88c0`.
```solidity
error InvalidAccountNonce(address account, uint256 currentNonce);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAccountNonce {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub currentNonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAccountNonce> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAccountNonce) -> Self {
                (value.account, value.currentNonce)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAccountNonce {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    currentNonce: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAccountNonce {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAccountNonce(address,uint256)";
            const SELECTOR: [u8; 4] = [117u8, 45u8, 136u8, 192u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentNonce),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidShortString()` and selector `0xb3512b0c`.
```solidity
error InvalidShortString();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidShortString;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidShortString> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidShortString) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidShortString {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidShortString {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidShortString()";
            const SELECTOR: [u8; 4] = [179u8, 81u8, 43u8, 12u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SafeCastOverflowedUintDowncast(uint8,uint256)` and selector `0x6dfcc650`.
```solidity
error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SafeCastOverflowedUintDowncast {
        #[allow(missing_docs)]
        pub bits: u8,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<8>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            u8,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SafeCastOverflowedUintDowncast>
        for UnderlyingRustTuple<'_> {
            fn from(value: SafeCastOverflowedUintDowncast) -> Self {
                (value.bits, value.value)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for SafeCastOverflowedUintDowncast {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bits: tuple.0,
                    value: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SafeCastOverflowedUintDowncast {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SafeCastOverflowedUintDowncast(uint8,uint256)";
            const SELECTOR: [u8; 4] = [109u8, 252u8, 198u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.bits),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `StringTooLong(string)` and selector `0x305a27a9`.
```solidity
error StringTooLong(string str);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StringTooLong {
        #[allow(missing_docs)]
        pub str: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StringTooLong> for UnderlyingRustTuple<'_> {
            fn from(value: StringTooLong) -> Self {
                (value.str,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for StringTooLong {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { str: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for StringTooLong {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "StringTooLong(string)";
            const SELECTOR: [u8; 4] = [48u8, 90u8, 39u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.str,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `TransfersLocked()` and selector `0xdb89e3f4`.
```solidity
error TransfersLocked();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TransfersLocked;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TransfersLocked> for UnderlyingRustTuple<'_> {
            fn from(value: TransfersLocked) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TransfersLocked {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TransfersLocked {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TransfersLocked()";
            const SELECTOR: [u8; 4] = [219u8, 137u8, 227u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UnauthorizedBridge(address)` and selector `0x6585b60d`.
```solidity
error UnauthorizedBridge(address bridge);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnauthorizedBridge {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnauthorizedBridge> for UnderlyingRustTuple<'_> {
            fn from(value: UnauthorizedBridge) -> Self {
                (value.bridge,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnauthorizedBridge {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { bridge: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnauthorizedBridge {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnauthorizedBridge(address)";
            const SELECTOR: [u8; 4] = [101u8, 133u8, 182u8, 13u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UnlockTimestampInPast()` and selector `0xa5658353`.
```solidity
error UnlockTimestampInPast();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnlockTimestampInPast;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnlockTimestampInPast> for UnderlyingRustTuple<'_> {
            fn from(value: UnlockTimestampInPast) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnlockTimestampInPast {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnlockTimestampInPast {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnlockTimestampInPast()";
            const SELECTOR: [u8; 4] = [165u8, 101u8, 131u8, 83u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UnlockTimestampTooLate()` and selector `0xef69af65`.
```solidity
error UnlockTimestampTooLate();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnlockTimestampTooLate;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnlockTimestampTooLate> for UnderlyingRustTuple<'_> {
            fn from(value: UnlockTimestampTooLate) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnlockTimestampTooLate {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnlockTimestampTooLate {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnlockTimestampTooLate()";
            const SELECTOR: [u8; 4] = [239u8, 105u8, 175u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UnreasonableBurnLimit()` and selector `0x58ccad00`.
```solidity
error UnreasonableBurnLimit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnreasonableBurnLimit;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnreasonableBurnLimit> for UnderlyingRustTuple<'_> {
            fn from(value: UnreasonableBurnLimit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnreasonableBurnLimit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnreasonableBurnLimit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnreasonableBurnLimit()";
            const SELECTOR: [u8; 4] = [88u8, 204u8, 173u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UnreasonableMintLimit()` and selector `0x0a395c01`.
```solidity
error UnreasonableMintLimit();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UnreasonableMintLimit;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnreasonableMintLimit> for UnderlyingRustTuple<'_> {
            fn from(value: UnreasonableMintLimit) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for UnreasonableMintLimit {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UnreasonableMintLimit {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UnreasonableMintLimit()";
            const SELECTOR: [u8; 4] = [10u8, 57u8, 92u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `VotesExpiredSignature(uint256)` and selector `0x4683af0e`.
```solidity
error VotesExpiredSignature(uint256 expiry);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct VotesExpiredSignature {
        #[allow(missing_docs)]
        pub expiry: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<VotesExpiredSignature> for UnderlyingRustTuple<'_> {
            fn from(value: VotesExpiredSignature) -> Self {
                (value.expiry,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for VotesExpiredSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { expiry: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for VotesExpiredSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "VotesExpiredSignature(uint256)";
            const SELECTOR: [u8; 4] = [70u8, 131u8, 175u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expiry),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress()` and selector `0xd92e233d`.
```solidity
error ZeroAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress()";
            const SELECTOR: [u8; 4] = [217u8, 46u8, 35u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAmount()` and selector `0x1f2a2005`.
```solidity
error ZeroAmount();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAmount;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAmount> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAmount) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAmount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAmount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAmount()";
            const SELECTOR: [u8; 4] = [31u8, 42u8, 32u8, 5u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed owner, address indexed spender, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8, 91u8, 225u8, 229u8, 235u8, 236u8, 125u8, 91u8, 209u8, 79u8, 113u8,
                66u8, 125u8, 30u8, 132u8, 243u8, 221u8, 3u8, 20u8, 192u8, 247u8, 178u8,
                41u8, 30u8, 91u8, 32u8, 10u8, 200u8, 199u8, 195u8, 185u8, 37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    owner: topics.1,
                    spender: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.owner.clone(), self.spender.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.spender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `BridgeActiveStatusChanged(address,bool)` and selector `0x9c8668db324845065d2b9a2a183bd3141f63018f548282daf18da49ccbf88c33`.
```solidity
event BridgeActiveStatusChanged(address indexed bridge, bool isActive);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeActiveStatusChanged {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeActiveStatusChanged {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeActiveStatusChanged(address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                156u8, 134u8, 104u8, 219u8, 50u8, 72u8, 69u8, 6u8, 93u8, 43u8, 154u8,
                42u8, 24u8, 59u8, 211u8, 20u8, 31u8, 99u8, 1u8, 143u8, 84u8, 130u8,
                130u8, 218u8, 241u8, 141u8, 164u8, 156u8, 203u8, 248u8, 140u8, 51u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    isActive: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isActive,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeActiveStatusChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeActiveStatusChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &BridgeActiveStatusChanged,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `BridgeAdded(address,uint256,uint256)` and selector `0xdb03f97dc5840a71e69be7470e4761af10a1237973e81c12d0dc2813895a6526`.
```solidity
event BridgeAdded(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeAdded {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeAdded {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeAdded(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                219u8, 3u8, 249u8, 125u8, 197u8, 132u8, 10u8, 113u8, 230u8, 155u8, 231u8,
                71u8, 14u8, 71u8, 97u8, 175u8, 16u8, 161u8, 35u8, 121u8, 115u8, 232u8,
                28u8, 18u8, 208u8, 220u8, 40u8, 19u8, 137u8, 90u8, 101u8, 38u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    dailyMintLimit: data.0,
                    dailyBurnLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `BridgeLimitsSet(address,uint256,uint256)` and selector `0xaa807d0abf30d91968c7478c66b6d82521a106af13eda036e2036da9af168958`.
```solidity
event BridgeLimitsSet(address indexed bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeLimitsSet {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeLimitsSet {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeLimitsSet(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                170u8, 128u8, 125u8, 10u8, 191u8, 48u8, 217u8, 25u8, 104u8, 199u8, 71u8,
                140u8, 102u8, 182u8, 216u8, 37u8, 33u8, 161u8, 6u8, 175u8, 19u8, 237u8,
                160u8, 54u8, 226u8, 3u8, 109u8, 169u8, 175u8, 22u8, 137u8, 88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    dailyMintLimit: data.0,
                    dailyBurnLimit: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeLimitsSet {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeLimitsSet> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeLimitsSet) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `BridgeRemoved(address)` and selector `0x5d9d5034656cb3ebfb0655057cd7f9b4077a9b42ff42ce223cbac5bc586d2126`.
```solidity
event BridgeRemoved(address indexed bridge);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BridgeRemoved {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BridgeRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "BridgeRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                93u8, 157u8, 80u8, 52u8, 101u8, 108u8, 179u8, 235u8, 251u8, 6u8, 85u8,
                5u8, 124u8, 215u8, 249u8, 180u8, 7u8, 122u8, 155u8, 66u8, 255u8, 66u8,
                206u8, 34u8, 60u8, 186u8, 197u8, 188u8, 88u8, 109u8, 33u8, 38u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { bridge: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BridgeRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BridgeRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BridgeRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CrosschainBurn(address,uint256,address)` and selector `0xb90795a66650155983e242cac3e1ac1a4dc26f8ed2987f3ce416a34e00111fd4`.
```solidity
event CrosschainBurn(address indexed from, uint256 amount, address indexed bridge);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrosschainBurn {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrosschainBurn {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CrosschainBurn(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                185u8, 7u8, 149u8, 166u8, 102u8, 80u8, 21u8, 89u8, 131u8, 226u8, 66u8,
                202u8, 195u8, 225u8, 172u8, 26u8, 77u8, 194u8, 111u8, 142u8, 210u8,
                152u8, 127u8, 60u8, 228u8, 22u8, 163u8, 78u8, 0u8, 17u8, 31u8, 212u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    amount: data.0,
                    bridge: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrosschainBurn {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrosschainBurn> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrosschainBurn) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CrosschainMint(address,uint256,address)` and selector `0xde22baff038e3a3e08407cbdf617deed74e869a7ba517df611e33131c6e6ea04`.
```solidity
event CrosschainMint(address indexed to, uint256 amount, address indexed bridge);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrosschainMint {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrosschainMint {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "CrosschainMint(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                222u8, 34u8, 186u8, 255u8, 3u8, 142u8, 58u8, 62u8, 8u8, 64u8, 124u8,
                189u8, 246u8, 23u8, 222u8, 237u8, 116u8, 232u8, 105u8, 167u8, 186u8,
                81u8, 125u8, 246u8, 17u8, 227u8, 49u8, 49u8, 198u8, 230u8, 234u8, 4u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    to: topics.1,
                    amount: data.0,
                    bridge: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.to.clone(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrosschainMint {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrosschainMint> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrosschainMint) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DelegateChanged(address,address,address)` and selector `0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f`.
```solidity
event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DelegateChanged {
        #[allow(missing_docs)]
        pub delegator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub fromDelegate: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub toDelegate: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DelegateChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "DelegateChanged(address,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                49u8, 52u8, 232u8, 162u8, 230u8, 217u8, 126u8, 146u8, 154u8, 126u8, 84u8,
                1u8, 30u8, 165u8, 72u8, 93u8, 125u8, 25u8, 109u8, 213u8, 240u8, 186u8,
                77u8, 78u8, 249u8, 88u8, 3u8, 232u8, 227u8, 252u8, 37u8, 127u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    delegator: topics.1,
                    fromDelegate: topics.2,
                    toDelegate: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.delegator.clone(),
                    self.fromDelegate.clone(),
                    self.toDelegate.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.delegator,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.fromDelegate,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.toDelegate,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DelegateChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DelegateChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DelegateChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DelegateVotesChanged(address,uint256,uint256)` and selector `0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724`.
```solidity
event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DelegateVotesChanged {
        #[allow(missing_docs)]
        pub delegate: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub previousVotes: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newVotes: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DelegateVotesChanged {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "DelegateVotesChanged(address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                222u8, 194u8, 186u8, 205u8, 210u8, 240u8, 91u8, 89u8, 222u8, 52u8, 218u8,
                155u8, 82u8, 61u8, 255u8, 139u8, 228u8, 46u8, 94u8, 56u8, 232u8, 24u8,
                200u8, 47u8, 219u8, 11u8, 174u8, 119u8, 67u8, 135u8, 167u8, 36u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    delegate: topics.1,
                    previousVotes: data.0,
                    newVotes: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousVotes),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newVotes),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.delegate.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.delegate,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DelegateVotesChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DelegateVotesChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DelegateVotesChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EIP712DomainChanged()` and selector `0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31`.
```solidity
event EIP712DomainChanged();
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EIP712DomainChanged;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EIP712DomainChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "EIP712DomainChanged()";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                10u8, 99u8, 135u8, 201u8, 234u8, 54u8, 40u8, 184u8, 138u8, 99u8, 59u8,
                180u8, 243u8, 177u8, 81u8, 119u8, 15u8, 112u8, 8u8, 81u8, 23u8, 161u8,
                95u8, 155u8, 243u8, 120u8, 124u8, 218u8, 83u8, 241u8, 61u8, 49u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {}
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EIP712DomainChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EIP712DomainChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EIP712DomainChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EmissionBudgetAllocated(address,uint256)` and selector `0x9ca03dbd5193fbb7974173cedd0bdf6841dd14c3cbfa735aab77ff1dd1139fb3`.
```solidity
event EmissionBudgetAllocated(address indexed bridge, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EmissionBudgetAllocated {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EmissionBudgetAllocated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "EmissionBudgetAllocated(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                156u8, 160u8, 61u8, 189u8, 81u8, 147u8, 251u8, 183u8, 151u8, 65u8, 115u8,
                206u8, 221u8, 11u8, 223u8, 104u8, 65u8, 221u8, 20u8, 195u8, 203u8, 250u8,
                115u8, 90u8, 171u8, 119u8, 255u8, 29u8, 209u8, 19u8, 159u8, 179u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EmissionBudgetAllocated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EmissionBudgetAllocated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &EmissionBudgetAllocated,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `EmissionBudgetConsumed(address,uint256)` and selector `0xbc23ec7f1313150b047bff83d0845b0564baa134698dd11bb0acd0f7d416de7d`.
```solidity
event EmissionBudgetConsumed(address indexed bridge, uint256 amount);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EmissionBudgetConsumed {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EmissionBudgetConsumed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "EmissionBudgetConsumed(address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8, 35u8, 236u8, 127u8, 19u8, 19u8, 21u8, 11u8, 4u8, 123u8, 255u8,
                131u8, 208u8, 132u8, 91u8, 5u8, 100u8, 186u8, 161u8, 52u8, 105u8, 141u8,
                209u8, 27u8, 176u8, 172u8, 208u8, 247u8, 212u8, 22u8, 222u8, 125u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    bridge: topics.1,
                    amount: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.bridge.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bridge,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EmissionBudgetConsumed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EmissionBudgetConsumed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EmissionBudgetConsumed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `TokensBurnedByManager(address,uint256,address)` and selector `0xbef4f81c1814c641ede85ebaacf19d048b2c5b55980adfa6ef0f956c651335a2`.
```solidity
event TokensBurnedByManager(address indexed from, uint256 amount, address indexed burner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TokensBurnedByManager {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub burner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TokensBurnedByManager {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TokensBurnedByManager(address,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                190u8, 244u8, 248u8, 28u8, 24u8, 20u8, 198u8, 65u8, 237u8, 232u8, 94u8,
                186u8, 172u8, 241u8, 157u8, 4u8, 139u8, 44u8, 91u8, 85u8, 152u8, 10u8,
                223u8, 166u8, 239u8, 15u8, 149u8, 108u8, 101u8, 19u8, 53u8, 162u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    amount: data.0,
                    burner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.burner.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.burner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TokensBurnedByManager {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TokensBurnedByManager> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TokensBurnedByManager) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed from, address indexed to, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8, 242u8, 82u8, 173u8, 27u8, 226u8, 200u8, 155u8, 105u8, 194u8,
                176u8, 104u8, 252u8, 55u8, 141u8, 170u8, 149u8, 43u8, 167u8, 241u8, 99u8,
                196u8, 161u8, 22u8, 40u8, 245u8, 90u8, 77u8, 245u8, 35u8, 179u8, 239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    from: topics.1,
                    to: topics.2,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.from.clone(), self.to.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `UnlockTimestampUpdated(uint256,uint256,address)` and selector `0xdd6896dcf1d4b311cca87dd19bbba2ea9ce2f867c1568878a0438a66a1afeeec`.
```solidity
event UnlockTimestampUpdated(uint256 oldTimestamp, uint256 newTimestamp, address indexed updatedBy);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UnlockTimestampUpdated {
        #[allow(missing_docs)]
        pub oldTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub newTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub updatedBy: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UnlockTimestampUpdated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "UnlockTimestampUpdated(uint256,uint256,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8, 104u8, 150u8, 220u8, 241u8, 212u8, 179u8, 17u8, 204u8, 168u8,
                125u8, 209u8, 155u8, 187u8, 162u8, 234u8, 156u8, 226u8, 248u8, 103u8,
                193u8, 86u8, 136u8, 120u8, 160u8, 67u8, 138u8, 102u8, 161u8, 175u8,
                238u8, 236u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    oldTimestamp: data.0,
                    newTimestamp: data.1,
                    updatedBy: topics.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.oldTimestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newTimestamp),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.updatedBy.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.updatedBy,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UnlockTimestampUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UnlockTimestampUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UnlockTimestampUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address defaultAdmin, address syndTreasuryAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub defaultAdmin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub syndTreasuryAddress: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.defaultAdmin, value.syndTreasuryAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        defaultAdmin: tuple.0,
                        syndTreasuryAddress: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.defaultAdmin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.syndTreasuryAddress,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `AIRDROP_MANAGER_ROLE()` and selector `0x8a542521`.
```solidity
function AIRDROP_MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AIRDROP_MANAGER_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`AIRDROP_MANAGER_ROLE()`](AIRDROP_MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AIRDROP_MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AIRDROP_MANAGER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: AIRDROP_MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AIRDROP_MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<AIRDROP_MANAGER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: AIRDROP_MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for AIRDROP_MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for AIRDROP_MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AIRDROP_MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [138u8, 84u8, 37u8, 33u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: AIRDROP_MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: AIRDROP_MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `BRIDGE_MANAGER_ROLE()` and selector `0xf75e8512`.
```solidity
function BRIDGE_MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_MANAGER_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`BRIDGE_MANAGER_ROLE()`](BRIDGE_MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct BRIDGE_MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_MANAGER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<BRIDGE_MANAGER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: BRIDGE_MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for BRIDGE_MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for BRIDGE_MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "BRIDGE_MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [247u8, 94u8, 133u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: BRIDGE_MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: BRIDGE_MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `CLOCK_MODE()` and selector `0x4bf5d7e9`.
```solidity
function CLOCK_MODE() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CLOCK_MODECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`CLOCK_MODE()`](CLOCK_MODECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CLOCK_MODEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CLOCK_MODECall> for UnderlyingRustTuple<'_> {
                fn from(value: CLOCK_MODECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CLOCK_MODECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<CLOCK_MODEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: CLOCK_MODEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for CLOCK_MODEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for CLOCK_MODECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CLOCK_MODE()";
            const SELECTOR: [u8; 4] = [75u8, 245u8, 215u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: CLOCK_MODEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: CLOCK_MODEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DEFAULT_ADMIN_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `DOMAIN_SEPARATOR()` and selector `0x3644e515`.
```solidity
function DOMAIN_SEPARATOR() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`DOMAIN_SEPARATOR()`](DOMAIN_SEPARATORCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DOMAIN_SEPARATORReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DOMAIN_SEPARATORReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DOMAIN_SEPARATORReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DOMAIN_SEPARATORReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DOMAIN_SEPARATORCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DOMAIN_SEPARATOR()";
            const SELECTOR: [u8; 4] = [54u8, 68u8, 229u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: DOMAIN_SEPARATORReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: DOMAIN_SEPARATORReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `EMISSION_BUDGET_MANAGER_ROLE()` and selector `0xb7cdc61c`.
```solidity
function EMISSION_BUDGET_MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EMISSION_BUDGET_MANAGER_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`EMISSION_BUDGET_MANAGER_ROLE()`](EMISSION_BUDGET_MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EMISSION_BUDGET_MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EMISSION_BUDGET_MANAGER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: EMISSION_BUDGET_MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EMISSION_BUDGET_MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EMISSION_BUDGET_MANAGER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: EMISSION_BUDGET_MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EMISSION_BUDGET_MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for EMISSION_BUDGET_MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EMISSION_BUDGET_MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [183u8, 205u8, 198u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: EMISSION_BUDGET_MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: EMISSION_BUDGET_MANAGER_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `EMISSION_MINTER_ROLE()` and selector `0x8d3343d6`.
```solidity
function EMISSION_MINTER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EMISSION_MINTER_ROLECall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`EMISSION_MINTER_ROLE()`](EMISSION_MINTER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EMISSION_MINTER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EMISSION_MINTER_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: EMISSION_MINTER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EMISSION_MINTER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EMISSION_MINTER_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: EMISSION_MINTER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for EMISSION_MINTER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for EMISSION_MINTER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EMISSION_MINTER_ROLE()";
            const SELECTOR: [u8; 4] = [141u8, 51u8, 67u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: EMISSION_MINTER_ROLEReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: EMISSION_MINTER_ROLEReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `INITIAL_MINT_SUPPLY()` and selector `0x9b7ef64b`.
```solidity
function INITIAL_MINT_SUPPLY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_MINT_SUPPLYCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`INITIAL_MINT_SUPPLY()`](INITIAL_MINT_SUPPLYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct INITIAL_MINT_SUPPLYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_MINT_SUPPLYCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_MINT_SUPPLYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_MINT_SUPPLYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<INITIAL_MINT_SUPPLYReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: INITIAL_MINT_SUPPLYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for INITIAL_MINT_SUPPLYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for INITIAL_MINT_SUPPLYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "INITIAL_MINT_SUPPLY()";
            const SELECTOR: [u8; 4] = [155u8, 126u8, 246u8, 75u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: INITIAL_MINT_SUPPLYReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: INITIAL_MINT_SUPPLYReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `MAX_LOCK_DURATION()` and selector `0x4f1bfc9e`.
```solidity
function MAX_LOCK_DURATION() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_LOCK_DURATIONCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`MAX_LOCK_DURATION()`](MAX_LOCK_DURATIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MAX_LOCK_DURATIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_LOCK_DURATIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_LOCK_DURATIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_LOCK_DURATIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MAX_LOCK_DURATIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: MAX_LOCK_DURATIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for MAX_LOCK_DURATIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MAX_LOCK_DURATIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MAX_LOCK_DURATION()";
            const SELECTOR: [u8; 4] = [79u8, 27u8, 252u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: MAX_LOCK_DURATIONReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: MAX_LOCK_DURATIONReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `TOTAL_SUPPLY()` and selector `0x902d55a5`.
```solidity
function TOTAL_SUPPLY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TOTAL_SUPPLYCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`TOTAL_SUPPLY()`](TOTAL_SUPPLYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TOTAL_SUPPLYReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TOTAL_SUPPLYCall> for UnderlyingRustTuple<'_> {
                fn from(value: TOTAL_SUPPLYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TOTAL_SUPPLYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<TOTAL_SUPPLYReturn> for UnderlyingRustTuple<'_> {
                fn from(value: TOTAL_SUPPLYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for TOTAL_SUPPLYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for TOTAL_SUPPLYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TOTAL_SUPPLY()";
            const SELECTOR: [u8; 4] = [144u8, 45u8, 85u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: TOTAL_SUPPLYReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: TOTAL_SUPPLYReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `allocateEmissionBudget(address,uint256)` and selector `0x5a4239e9`.
```solidity
function allocateEmissionBudget(address bridge, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allocateEmissionBudgetCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`allocateEmissionBudget(address,uint256)`](allocateEmissionBudgetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allocateEmissionBudgetReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allocateEmissionBudgetCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: allocateEmissionBudgetCall) -> Self {
                    (value.bridge, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allocateEmissionBudgetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bridge: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allocateEmissionBudgetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: allocateEmissionBudgetReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for allocateEmissionBudgetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl allocateEmissionBudgetReturn {
            fn _tokenize(
                &self,
            ) -> <allocateEmissionBudgetCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allocateEmissionBudgetCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allocateEmissionBudgetReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allocateEmissionBudget(address,uint256)";
            const SELECTOR: [u8; 4] = [90u8, 66u8, 57u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                allocateEmissionBudgetReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `allowance(address,address)` and selector `0xdd62ed3e`.
```solidity
function allowance(address owner, address spender) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`allowance(address,address)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value.owner, value.spender)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(address,address)";
            const SELECTOR: [u8; 4] = [221u8, 98u8, 237u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: allowanceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: allowanceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address spender, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveCall {
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`approve(address,uint256)`](approveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approveReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveCall> for UnderlyingRustTuple<'_> {
                fn from(value: approveCall) -> Self {
                    (value.spender, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        spender: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: approveReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: approveReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: approveReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: balanceOfReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: balanceOfReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `bridgeConfigs(address)` and selector `0x427ac0ca`.
```solidity
function bridgeConfigs(address) external view returns (uint256 dailyMintLimit, uint256 dailyBurnLimit, bool isActive);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeConfigsCall(pub alloy::sol_types::private::Address);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`bridgeConfigs(address)`](bridgeConfigsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeConfigsReturn {
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeConfigsCall> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeConfigsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeConfigsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeConfigsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: bridgeConfigsReturn) -> Self {
                    (value.dailyMintLimit, value.dailyBurnLimit, value.isActive)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for bridgeConfigsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        dailyMintLimit: tuple.0,
                        dailyBurnLimit: tuple.1,
                        isActive: tuple.2,
                    }
                }
            }
        }
        impl bridgeConfigsReturn {
            fn _tokenize(
                &self,
            ) -> <bridgeConfigsCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isActive,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeConfigsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bridgeConfigsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bool,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeConfigs(address)";
            const SELECTOR: [u8; 4] = [66u8, 122u8, 192u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.0,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                bridgeConfigsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `bridgeEmissionBudgets(address)` and selector `0x2869366b`.
```solidity
function bridgeEmissionBudgets(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeEmissionBudgetsCall(pub alloy::sol_types::private::Address);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`bridgeEmissionBudgets(address)`](bridgeEmissionBudgetsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct bridgeEmissionBudgetsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeEmissionBudgetsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: bridgeEmissionBudgetsCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for bridgeEmissionBudgetsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<bridgeEmissionBudgetsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: bridgeEmissionBudgetsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for bridgeEmissionBudgetsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for bridgeEmissionBudgetsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "bridgeEmissionBudgets(address)";
            const SELECTOR: [u8; 4] = [40u8, 105u8, 54u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.0,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: bridgeEmissionBudgetsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: bridgeEmissionBudgetsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `burn(uint256)` and selector `0x42966c68`.
```solidity
function burn(uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnCall {
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`burn(uint256)`](burnCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnCall> for UnderlyingRustTuple<'_> {
                fn from(value: burnCall) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnReturn> for UnderlyingRustTuple<'_> {
                fn from(value: burnReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl burnReturn {
            fn _tokenize(
                &self,
            ) -> <burnCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for burnCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = burnReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "burn(uint256)";
            const SELECTOR: [u8; 4] = [66u8, 150u8, 108u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                burnReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `burnFrom(address,uint256)` and selector `0x79cc6790`.
```solidity
function burnFrom(address from, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnFromCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`burnFrom(address,uint256)`](burnFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct burnFromReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: burnFromCall) -> Self {
                    (value.from, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<burnFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: burnFromReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for burnFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl burnFromReturn {
            fn _tokenize(
                &self,
            ) -> <burnFromCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for burnFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = burnFromReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "burnFrom(address,uint256)";
            const SELECTOR: [u8; 4] = [121u8, 204u8, 103u8, 144u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                burnFromReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkpoints(address,uint32)` and selector `0xf1127ed8`.
```solidity
function checkpoints(address account, uint32 pos) external view returns (Checkpoints.Checkpoint208 memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkpointsCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub pos: u32,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`checkpoints(address,uint32)`](checkpointsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkpointsReturn {
        #[allow(missing_docs)]
        pub _0: <Checkpoints::Checkpoint208 as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, u32);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkpointsCall> for UnderlyingRustTuple<'_> {
                fn from(value: checkpointsCall) -> Self {
                    (value.account, value.pos)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for checkpointsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        pos: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Checkpoints::Checkpoint208,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Checkpoints::Checkpoint208 as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkpointsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: checkpointsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for checkpointsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkpointsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <Checkpoints::Checkpoint208 as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (Checkpoints::Checkpoint208,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkpoints(address,uint32)";
            const SELECTOR: [u8; 4] = [241u8, 18u8, 126u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pos),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <Checkpoints::Checkpoint208 as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: checkpointsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: checkpointsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `clock()` and selector `0x91ddadf4`.
```solidity
function clock() external view returns (uint48);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clockCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`clock()`](clockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct clockReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U48,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clockCall> for UnderlyingRustTuple<'_> {
                fn from(value: clockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<48>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U48,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<clockReturn> for UnderlyingRustTuple<'_> {
                fn from(value: clockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for clockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for clockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U48;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<48>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "clock()";
            const SELECTOR: [u8; 4] = [145u8, 221u8, 173u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        48,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: clockReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: clockReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `crosschainBurn(address,uint256)` and selector `0x2b8c49e3`.
```solidity
function crosschainBurn(address from, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainBurnCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`crosschainBurn(address,uint256)`](crosschainBurnCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainBurnReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainBurnCall> for UnderlyingRustTuple<'_> {
                fn from(value: crosschainBurnCall) -> Self {
                    (value.from, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crosschainBurnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainBurnReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crosschainBurnReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crosschainBurnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl crosschainBurnReturn {
            fn _tokenize(
                &self,
            ) -> <crosschainBurnCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crosschainBurnCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crosschainBurnReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crosschainBurn(address,uint256)";
            const SELECTOR: [u8; 4] = [43u8, 140u8, 73u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                crosschainBurnReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `crosschainMint(address,uint256)` and selector `0x18bf5077`.
```solidity
function crosschainMint(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainMintCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`crosschainMint(address,uint256)`](crosschainMintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crosschainMintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainMintCall> for UnderlyingRustTuple<'_> {
                fn from(value: crosschainMintCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crosschainMintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crosschainMintReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crosschainMintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crosschainMintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl crosschainMintReturn {
            fn _tokenize(
                &self,
            ) -> <crosschainMintCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crosschainMintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crosschainMintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crosschainMint(address,uint256)";
            const SELECTOR: [u8; 4] = [24u8, 191u8, 80u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                crosschainMintReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `decimals()` and selector `0x313ce567`.
```solidity
function decimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decimalsCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`decimals()`](decimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct decimalsReturn {
        #[allow(missing_docs)]
        pub _0: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<decimalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: decimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for decimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for decimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = u8;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "decimals()";
            const SELECTOR: [u8; 4] = [49u8, 60u8, 229u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: decimalsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: decimalsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `delegate(address)` and selector `0x5c19a95c`.
```solidity
function delegate(address delegatee) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateCall {
        #[allow(missing_docs)]
        pub delegatee: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`delegate(address)`](delegateCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateCall> for UnderlyingRustTuple<'_> {
                fn from(value: delegateCall) -> Self {
                    (value.delegatee,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { delegatee: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateReturn> for UnderlyingRustTuple<'_> {
                fn from(value: delegateReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl delegateReturn {
            fn _tokenize(
                &self,
            ) -> <delegateCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delegateCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = delegateReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delegate(address)";
            const SELECTOR: [u8; 4] = [92u8, 25u8, 169u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.delegatee,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                delegateReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)` and selector `0xc3cda520`.
```solidity
function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateBySigCall {
        #[allow(missing_docs)]
        pub delegatee: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub nonce: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub expiry: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub v: u8,
        #[allow(missing_docs)]
        pub r: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)`](delegateBySigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegateBySigReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateBySigCall> for UnderlyingRustTuple<'_> {
                fn from(value: delegateBySigCall) -> Self {
                    (
                        value.delegatee,
                        value.nonce,
                        value.expiry,
                        value.v,
                        value.r,
                        value.s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateBySigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        delegatee: tuple.0,
                        nonce: tuple.1,
                        expiry: tuple.2,
                        v: tuple.3,
                        r: tuple.4,
                        s: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegateBySigReturn> for UnderlyingRustTuple<'_> {
                fn from(value: delegateBySigReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegateBySigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl delegateBySigReturn {
            fn _tokenize(
                &self,
            ) -> <delegateBySigCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delegateBySigCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = delegateBySigReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [195u8, 205u8, 165u8, 32u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.delegatee,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.expiry),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                delegateBySigReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `delegates(address)` and selector `0x587cde1e`.
```solidity
function delegates(address account) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegatesCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`delegates(address)`](delegatesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct delegatesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegatesCall> for UnderlyingRustTuple<'_> {
                fn from(value: delegatesCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegatesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<delegatesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: delegatesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for delegatesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for delegatesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "delegates(address)";
            const SELECTOR: [u8; 4] = [88u8, 124u8, 222u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: delegatesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: delegatesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `eip712Domain()` and selector `0x84b0196e`.
```solidity
function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eip712DomainCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`eip712Domain()`](eip712DomainCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eip712DomainReturn {
        #[allow(missing_docs)]
        pub fields: alloy::sol_types::private::FixedBytes<1>,
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub version: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub verifyingContract: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub extensions: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainCall> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<1>,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainReturn) -> Self {
                    (
                        value.fields,
                        value.name,
                        value.version,
                        value.chainId,
                        value.verifyingContract,
                        value.salt,
                        value.extensions,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fields: tuple.0,
                        name: tuple.1,
                        version: tuple.2,
                        chainId: tuple.3,
                        verifyingContract: tuple.4,
                        salt: tuple.5,
                        extensions: tuple.6,
                    }
                }
            }
        }
        impl eip712DomainReturn {
            fn _tokenize(
                &self,
            ) -> <eip712DomainCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        1,
                    > as alloy_sol_types::SolType>::tokenize(&self.fields),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.version,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.verifyingContract,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.extensions),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for eip712DomainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = eip712DomainReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "eip712Domain()";
            const SELECTOR: [u8; 4] = [132u8, 176u8, 25u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                eip712DomainReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAllBridges()` and selector `0x72cbdcc8`.
```solidity
function getAllBridges() external view returns (address[] memory allBridges);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllBridgesCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAllBridges()`](getAllBridgesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllBridgesReturn {
        #[allow(missing_docs)]
        pub allBridges: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllBridgesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getAllBridgesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllBridgesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllBridgesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getAllBridgesReturn) -> Self {
                    (value.allBridges,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getAllBridgesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { allBridges: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllBridgesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllBridges()";
            const SELECTOR: [u8; 4] = [114u8, 203u8, 220u8, 200u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAllBridgesReturn = r.into();
                        r.allBridges
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAllBridgesReturn = r.into();
                        r.allBridges
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAvailableBurnLimit(address)` and selector `0x30d3e8eb`.
```solidity
function getAvailableBurnLimit(address bridge) external view returns (uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableBurnLimitCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAvailableBurnLimit(address)`](getAvailableBurnLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableBurnLimitReturn {
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableBurnLimitCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableBurnLimitCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableBurnLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableBurnLimitReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableBurnLimitReturn) -> Self {
                    (value.available,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableBurnLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { available: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAvailableBurnLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAvailableBurnLimit(address)";
            const SELECTOR: [u8; 4] = [48u8, 211u8, 232u8, 235u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAvailableBurnLimitReturn = r.into();
                        r.available
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAvailableBurnLimitReturn = r.into();
                        r.available
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAvailableMintLimit(address)` and selector `0x94aa22f2`.
```solidity
function getAvailableMintLimit(address bridge) external view returns (uint256 available);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableMintLimitCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAvailableMintLimit(address)`](getAvailableMintLimitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAvailableMintLimitReturn {
        #[allow(missing_docs)]
        pub available: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableMintLimitCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableMintLimitCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableMintLimitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAvailableMintLimitReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAvailableMintLimitReturn) -> Self {
                    (value.available,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAvailableMintLimitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { available: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAvailableMintLimitCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAvailableMintLimit(address)";
            const SELECTOR: [u8; 4] = [148u8, 170u8, 34u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAvailableMintLimitReturn = r.into();
                        r.available
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAvailableMintLimitReturn = r.into();
                        r.available
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getBridgeAtIndex(uint256)` and selector `0x5a5db1bb`.
```solidity
function getBridgeAtIndex(uint256 index) external view returns (address bridge);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeAtIndexCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getBridgeAtIndex(uint256)`](getBridgeAtIndexCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeAtIndexReturn {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeAtIndexCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeAtIndexCall) -> Self {
                    (value.index,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeAtIndexCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeAtIndexReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeAtIndexReturn) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeAtIndexReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeAtIndexCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeAtIndex(uint256)";
            const SELECTOR: [u8; 4] = [90u8, 93u8, 177u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getBridgeAtIndexReturn = r.into();
                        r.bridge
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getBridgeAtIndexReturn = r.into();
                        r.bridge
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getBridgeConfig(address)` and selector `0xc4fc45a8`.
```solidity
function getBridgeConfig(address bridge) external view returns (IBridgeRateLimiter.BridgeConfig memory config);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeConfigCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getBridgeConfig(address)`](getBridgeConfigCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeConfigReturn {
        #[allow(missing_docs)]
        pub config: <IBridgeRateLimiter::BridgeConfig as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeConfigCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeConfigCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeConfigCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (IBridgeRateLimiter::BridgeConfig,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <IBridgeRateLimiter::BridgeConfig as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeConfigReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeConfigReturn) -> Self {
                    (value.config,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeConfigReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { config: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeConfigCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <IBridgeRateLimiter::BridgeConfig as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (IBridgeRateLimiter::BridgeConfig,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeConfig(address)";
            const SELECTOR: [u8; 4] = [196u8, 252u8, 69u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <IBridgeRateLimiter::BridgeConfig as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getBridgeConfigReturn = r.into();
                        r.config
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getBridgeConfigReturn = r.into();
                        r.config
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getBridgeCount()` and selector `0x65145534`.
```solidity
function getBridgeCount() external view returns (uint256 count);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeCountCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getBridgeCount()`](getBridgeCountCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getBridgeCountReturn {
        #[allow(missing_docs)]
        pub count: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeCountCall> for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeCountCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getBridgeCountCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getBridgeCountReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getBridgeCountReturn) -> Self {
                    (value.count,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getBridgeCountReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { count: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getBridgeCountCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getBridgeCount()";
            const SELECTOR: [u8; 4] = [101u8, 20u8, 85u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getBridgeCountReturn = r.into();
                        r.count
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getBridgeCountReturn = r.into();
                        r.count
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCurrentTotalSupply()` and selector `0xc02ae754`.
```solidity
function getCurrentTotalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentTotalSupplyCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCurrentTotalSupply()`](getCurrentTotalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentTotalSupplyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentTotalSupplyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentTotalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentTotalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentTotalSupplyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentTotalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentTotalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentTotalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentTotalSupply()";
            const SELECTOR: [u8; 4] = [192u8, 42u8, 231u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getCurrentTotalSupplyReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getCurrentTotalSupplyReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getEmissionBudget(address)` and selector `0x050732fb`.
```solidity
function getEmissionBudget(address bridge) external view returns (uint256 budget);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEmissionBudgetCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getEmissionBudget(address)`](getEmissionBudgetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getEmissionBudgetReturn {
        #[allow(missing_docs)]
        pub budget: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEmissionBudgetCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEmissionBudgetCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEmissionBudgetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getEmissionBudgetReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getEmissionBudgetReturn) -> Self {
                    (value.budget,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getEmissionBudgetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { budget: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getEmissionBudgetCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getEmissionBudget(address)";
            const SELECTOR: [u8; 4] = [5u8, 7u8, 50u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getEmissionBudgetReturn = r.into();
                        r.budget
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getEmissionBudgetReturn = r.into();
                        r.budget
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPastTotalSupply(uint256)` and selector `0x8e539e8c`.
```solidity
function getPastTotalSupply(uint256 timepoint) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastTotalSupplyCall {
        #[allow(missing_docs)]
        pub timepoint: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPastTotalSupply(uint256)`](getPastTotalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastTotalSupplyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastTotalSupplyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastTotalSupplyCall) -> Self {
                    (value.timepoint,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastTotalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { timepoint: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastTotalSupplyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastTotalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastTotalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPastTotalSupplyCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPastTotalSupply(uint256)";
            const SELECTOR: [u8; 4] = [142u8, 83u8, 158u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timepoint),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getPastTotalSupplyReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getPastTotalSupplyReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPastVotes(address,uint256)` and selector `0x3a46b1a8`.
```solidity
function getPastVotes(address account, uint256 timepoint) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotesCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub timepoint: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPastVotes(address,uint256)`](getPastVotesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotesCall) -> Self {
                    (value.account, value.timepoint)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPastVotesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        timepoint: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPastVotesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPastVotesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPastVotes(address,uint256)";
            const SELECTOR: [u8; 4] = [58u8, 70u8, 177u8, 168u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timepoint),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getPastVotesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getPastVotesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPastVotingPower(address,uint256)` and selector `0xb0ca253e`.
```solidity
function getPastVotingPower(address account, uint256 blockNumber) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotingPowerCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPastVotingPower(address,uint256)`](getPastVotingPowerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPastVotingPowerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotingPowerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotingPowerCall) -> Self {
                    (value.account, value.blockNumber)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastVotingPowerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        blockNumber: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPastVotingPowerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPastVotingPowerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPastVotingPowerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPastVotingPowerCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPastVotingPower(address,uint256)";
            const SELECTOR: [u8; 4] = [176u8, 202u8, 37u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getPastVotingPowerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getPastVotingPowerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRemainingLockTime()` and selector `0x7a8cd156`.
```solidity
function getRemainingLockTime() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRemainingLockTimeCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRemainingLockTime()`](getRemainingLockTimeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRemainingLockTimeReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRemainingLockTimeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRemainingLockTimeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRemainingLockTimeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRemainingLockTimeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getRemainingLockTimeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getRemainingLockTimeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRemainingLockTimeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRemainingLockTime()";
            const SELECTOR: [u8; 4] = [122u8, 140u8, 209u8, 86u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRemainingLockTimeReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRemainingLockTimeReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::FixedBytes<32>;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getRoleAdminReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVotes(address)` and selector `0x9ab24eb0`.
```solidity
function getVotes(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVotes(address)`](getVotesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVotesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVotesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVotes(address)";
            const SELECTOR: [u8; 4] = [154u8, 178u8, 78u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVotesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVotesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVotingPower(address)` and selector `0xbb4d4436`.
```solidity
function getVotingPower(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotingPowerCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVotingPower(address)`](getVotingPowerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVotingPowerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotingPowerCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVotingPowerCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVotingPowerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVotingPowerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getVotingPowerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getVotingPowerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVotingPowerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVotingPower(address)";
            const SELECTOR: [u8; 4] = [187u8, 77u8, 68u8, 54u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getVotingPowerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getVotingPowerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl grantRoleReturn {
            fn _tokenize(
                &self,
            ) -> <grantRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                grantRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hasRoleReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hourlyBurnUsage(address,uint256)` and selector `0x5d4c6285`.
```solidity
function hourlyBurnUsage(address, uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hourlyBurnUsageCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hourlyBurnUsage(address,uint256)`](hourlyBurnUsageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hourlyBurnUsageReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hourlyBurnUsageCall> for UnderlyingRustTuple<'_> {
                fn from(value: hourlyBurnUsageCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hourlyBurnUsageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hourlyBurnUsageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hourlyBurnUsageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hourlyBurnUsageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hourlyBurnUsageCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hourlyBurnUsage(address,uint256)";
            const SELECTOR: [u8; 4] = [93u8, 76u8, 98u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hourlyBurnUsageReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hourlyBurnUsageReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hourlyMintUsage(address,uint256)` and selector `0x01042d7a`.
```solidity
function hourlyMintUsage(address, uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hourlyMintUsageCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hourlyMintUsage(address,uint256)`](hourlyMintUsageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hourlyMintUsageReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hourlyMintUsageCall> for UnderlyingRustTuple<'_> {
                fn from(value: hourlyMintUsageCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hourlyMintUsageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hourlyMintUsageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: hourlyMintUsageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for hourlyMintUsageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hourlyMintUsageCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hourlyMintUsage(address,uint256)";
            const SELECTOR: [u8; 4] = [1u8, 4u8, 45u8, 122u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: hourlyMintUsageReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: hourlyMintUsageReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isBridgeAuthorized(address)` and selector `0x78fb7fd2`.
```solidity
function isBridgeAuthorized(address bridge) external view returns (bool authorized);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBridgeAuthorizedCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isBridgeAuthorized(address)`](isBridgeAuthorizedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isBridgeAuthorizedReturn {
        #[allow(missing_docs)]
        pub authorized: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBridgeAuthorizedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isBridgeAuthorizedCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isBridgeAuthorizedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isBridgeAuthorizedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isBridgeAuthorizedReturn) -> Self {
                    (value.authorized,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isBridgeAuthorizedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { authorized: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isBridgeAuthorizedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isBridgeAuthorized(address)";
            const SELECTOR: [u8; 4] = [120u8, 251u8, 127u8, 210u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isBridgeAuthorizedReturn = r.into();
                        r.authorized
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isBridgeAuthorizedReturn = r.into();
                        r.authorized
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `maxLockTimestamp()` and selector `0x8426adf2`.
```solidity
function maxLockTimestamp() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxLockTimestampCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`maxLockTimestamp()`](maxLockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxLockTimestampReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxLockTimestampCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxLockTimestampCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxLockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxLockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxLockTimestampReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxLockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxLockTimestampCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxLockTimestamp()";
            const SELECTOR: [u8; 4] = [132u8, 38u8, 173u8, 242u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: maxLockTimestampReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: maxLockTimestampReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `mint(address,uint256)` and selector `0x40c10f19`.
```solidity
function mint(address to, uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mint(address,uint256)`](mintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (value.to, value.amount)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        amount: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl mintReturn {
            fn _tokenize(
                &self,
            ) -> <mintCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(address,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 193u8, 15u8, 25u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                mintReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: nameReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: nameReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `nonces(address)` and selector `0x7ecebe00`.
```solidity
function nonces(address owner) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noncesCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`nonces(address)`](noncesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct noncesReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesCall> for UnderlyingRustTuple<'_> {
                fn from(value: noncesCall) -> Self {
                    (value.owner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<noncesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: noncesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for noncesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for noncesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "nonces(address)";
            const SELECTOR: [u8; 4] = [126u8, 206u8, 190u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: noncesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: noncesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `numCheckpoints(address)` and selector `0x6fcfff45`.
```solidity
function numCheckpoints(address account) external view returns (uint32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct numCheckpointsCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`numCheckpoints(address)`](numCheckpointsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct numCheckpointsReturn {
        #[allow(missing_docs)]
        pub _0: u32,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<numCheckpointsCall> for UnderlyingRustTuple<'_> {
                fn from(value: numCheckpointsCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for numCheckpointsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u32,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<numCheckpointsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: numCheckpointsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for numCheckpointsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for numCheckpointsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = u32;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "numCheckpoints(address)";
            const SELECTOR: [u8; 4] = [111u8, 207u8, 255u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: numCheckpointsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: numCheckpointsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `permit(address,address,uint256,uint256,uint8,bytes32,bytes32)` and selector `0xd505accf`.
```solidity
function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitCall {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub spender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub v: u8,
        #[allow(missing_docs)]
        pub r: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub s: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`permit(address,address,uint256,uint256,uint8,bytes32,bytes32)`](permitCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct permitReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                u8,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitCall> for UnderlyingRustTuple<'_> {
                fn from(value: permitCall) -> Self {
                    (
                        value.owner,
                        value.spender,
                        value.value,
                        value.deadline,
                        value.v,
                        value.r,
                        value.s,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        spender: tuple.1,
                        value: tuple.2,
                        deadline: tuple.3,
                        v: tuple.4,
                        r: tuple.5,
                        s: tuple.6,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<permitReturn> for UnderlyingRustTuple<'_> {
                fn from(value: permitReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for permitReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl permitReturn {
            fn _tokenize(
                &self,
            ) -> <permitCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for permitCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<8>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = permitReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [213u8, 5u8, 172u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.spender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.v),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.r),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.s),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                permitReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `removeBridge(address)` and selector `0x04df017d`.
```solidity
function removeBridge(address bridge) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeBridgeCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removeBridge(address)`](removeBridgeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removeBridgeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeBridgeCall> for UnderlyingRustTuple<'_> {
                fn from(value: removeBridgeCall) -> Self {
                    (value.bridge,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeBridgeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { bridge: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removeBridgeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: removeBridgeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for removeBridgeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl removeBridgeReturn {
            fn _tokenize(
                &self,
            ) -> <removeBridgeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removeBridgeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removeBridgeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removeBridge(address)";
            const SELECTOR: [u8; 4] = [4u8, 223u8, 1u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                removeBridgeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceRoleReturn {
            fn _tokenize(
                &self,
            ) -> <renounceRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl revokeRoleReturn {
            fn _tokenize(
                &self,
            ) -> <revokeRoleCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                revokeRoleReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setBridgeActive(address,bool)` and selector `0xc9ab0006`.
```solidity
function setBridgeActive(address bridge, bool isActive) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub isActive: bool,
    }
    ///Container type for the return parameters of the [`setBridgeActive(address,bool)`](setBridgeActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveCall) -> Self {
                    (value.bridge, value.isActive)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bridge: tuple.0,
                        isActive: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setBridgeActiveReturn {
            fn _tokenize(
                &self,
            ) -> <setBridgeActiveCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeActiveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeActive(address,bool)";
            const SELECTOR: [u8; 4] = [201u8, 171u8, 0u8, 6u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isActive,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setBridgeActiveReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setBridgeLimits(address,uint256,uint256)` and selector `0x63a0daac`.
```solidity
function setBridgeLimits(address bridge, uint256 dailyMintLimit, uint256 dailyBurnLimit) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeLimitsCall {
        #[allow(missing_docs)]
        pub bridge: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setBridgeLimits(address,uint256,uint256)`](setBridgeLimitsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBridgeLimitsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeLimitsCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeLimitsCall) -> Self {
                    (value.bridge, value.dailyMintLimit, value.dailyBurnLimit)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBridgeLimitsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        bridge: tuple.0,
                        dailyMintLimit: tuple.1,
                        dailyBurnLimit: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBridgeLimitsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBridgeLimitsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBridgeLimitsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setBridgeLimitsReturn {
            fn _tokenize(
                &self,
            ) -> <setBridgeLimitsCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBridgeLimitsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBridgeLimitsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBridgeLimits(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [99u8, 160u8, 218u8, 172u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyMintLimit),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.dailyBurnLimit),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setBridgeLimitsReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setUnlockTimestamp(uint256)` and selector `0x844c9026`.
```solidity
function setUnlockTimestamp(uint256 newUnlockTimestamp) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUnlockTimestampCall {
        #[allow(missing_docs)]
        pub newUnlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setUnlockTimestamp(uint256)`](setUnlockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUnlockTimestampReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUnlockTimestampCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setUnlockTimestampCall) -> Self {
                    (value.newUnlockTimestamp,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setUnlockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newUnlockTimestamp: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUnlockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setUnlockTimestampReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setUnlockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl setUnlockTimestampReturn {
            fn _tokenize(
                &self,
            ) -> <setUnlockTimestampCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUnlockTimestampCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUnlockTimestampReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUnlockTimestamp(uint256)";
            const SELECTOR: [u8; 4] = [132u8, 76u8, 144u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newUnlockTimestamp),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                setUnlockTimestampReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: supportsInterfaceReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::String;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: symbolReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: symbolReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `totalSupply()` and selector `0x18160ddd`.
```solidity
function totalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`totalSupply()`](totalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalSupply()";
            const SELECTOR: [u8; 4] = [24u8, 22u8, 13u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: totalSupplyReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: totalSupplyReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transfer(address,uint256)` and selector `0xa9059cbb`.
```solidity
function transfer(address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferCall {
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`transfer(address,uint256)`](transferCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferCall) -> Self {
                    (value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to: tuple.0,
                        value: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfer(address,uint256)";
            const SELECTOR: [u8; 4] = [169u8, 5u8, 156u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: transferReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: transferReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from, address to, uint256 value) external returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromCall {
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFromReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromCall> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromCall) -> Self {
                    (value.from, value.to, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        value: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFromReturn> for UnderlyingRustTuple<'_> {
                fn from(value: transferFromReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: transferFromReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: transferFromReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transfersLocked()` and selector `0x83f1211b`.
```solidity
function transfersLocked() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transfersLockedCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`transfersLocked()`](transfersLockedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transfersLockedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transfersLockedCall> for UnderlyingRustTuple<'_> {
                fn from(value: transfersLockedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transfersLockedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transfersLockedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transfersLockedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transfersLockedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transfersLockedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transfersLocked()";
            const SELECTOR: [u8; 4] = [131u8, 241u8, 33u8, 27u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: transfersLockedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: transfersLockedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `unlockTimestamp()` and selector `0xaa082a9d`.
```solidity
function unlockTimestamp() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unlockTimestampCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`unlockTimestamp()`](unlockTimestampCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unlockTimestampReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockTimestampCall> for UnderlyingRustTuple<'_> {
                fn from(value: unlockTimestampCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unlockTimestampCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockTimestampReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: unlockTimestampReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for unlockTimestampReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unlockTimestampCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unlockTimestamp()";
            const SELECTOR: [u8; 4] = [170u8, 8u8, 42u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: unlockTimestampReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: unlockTimestampReturn = r.into();
                        r._0
                    })
            }
        }
    };
    ///Container for all the [`SyndicateTokenCrosschain`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum SyndicateTokenCrosschainCalls {
        #[allow(missing_docs)]
        AIRDROP_MANAGER_ROLE(AIRDROP_MANAGER_ROLECall),
        #[allow(missing_docs)]
        BRIDGE_MANAGER_ROLE(BRIDGE_MANAGER_ROLECall),
        #[allow(missing_docs)]
        CLOCK_MODE(CLOCK_MODECall),
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        DOMAIN_SEPARATOR(DOMAIN_SEPARATORCall),
        #[allow(missing_docs)]
        EMISSION_BUDGET_MANAGER_ROLE(EMISSION_BUDGET_MANAGER_ROLECall),
        #[allow(missing_docs)]
        EMISSION_MINTER_ROLE(EMISSION_MINTER_ROLECall),
        #[allow(missing_docs)]
        INITIAL_MINT_SUPPLY(INITIAL_MINT_SUPPLYCall),
        #[allow(missing_docs)]
        MAX_LOCK_DURATION(MAX_LOCK_DURATIONCall),
        #[allow(missing_docs)]
        TOTAL_SUPPLY(TOTAL_SUPPLYCall),
        #[allow(missing_docs)]
        allocateEmissionBudget(allocateEmissionBudgetCall),
        #[allow(missing_docs)]
        allowance(allowanceCall),
        #[allow(missing_docs)]
        approve(approveCall),
        #[allow(missing_docs)]
        balanceOf(balanceOfCall),
        #[allow(missing_docs)]
        bridgeConfigs(bridgeConfigsCall),
        #[allow(missing_docs)]
        bridgeEmissionBudgets(bridgeEmissionBudgetsCall),
        #[allow(missing_docs)]
        burn(burnCall),
        #[allow(missing_docs)]
        burnFrom(burnFromCall),
        #[allow(missing_docs)]
        checkpoints(checkpointsCall),
        #[allow(missing_docs)]
        clock(clockCall),
        #[allow(missing_docs)]
        crosschainBurn(crosschainBurnCall),
        #[allow(missing_docs)]
        crosschainMint(crosschainMintCall),
        #[allow(missing_docs)]
        decimals(decimalsCall),
        #[allow(missing_docs)]
        delegate(delegateCall),
        #[allow(missing_docs)]
        delegateBySig(delegateBySigCall),
        #[allow(missing_docs)]
        delegates(delegatesCall),
        #[allow(missing_docs)]
        eip712Domain(eip712DomainCall),
        #[allow(missing_docs)]
        getAllBridges(getAllBridgesCall),
        #[allow(missing_docs)]
        getAvailableBurnLimit(getAvailableBurnLimitCall),
        #[allow(missing_docs)]
        getAvailableMintLimit(getAvailableMintLimitCall),
        #[allow(missing_docs)]
        getBridgeAtIndex(getBridgeAtIndexCall),
        #[allow(missing_docs)]
        getBridgeConfig(getBridgeConfigCall),
        #[allow(missing_docs)]
        getBridgeCount(getBridgeCountCall),
        #[allow(missing_docs)]
        getCurrentTotalSupply(getCurrentTotalSupplyCall),
        #[allow(missing_docs)]
        getEmissionBudget(getEmissionBudgetCall),
        #[allow(missing_docs)]
        getPastTotalSupply(getPastTotalSupplyCall),
        #[allow(missing_docs)]
        getPastVotes(getPastVotesCall),
        #[allow(missing_docs)]
        getPastVotingPower(getPastVotingPowerCall),
        #[allow(missing_docs)]
        getRemainingLockTime(getRemainingLockTimeCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        getVotes(getVotesCall),
        #[allow(missing_docs)]
        getVotingPower(getVotingPowerCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        hourlyBurnUsage(hourlyBurnUsageCall),
        #[allow(missing_docs)]
        hourlyMintUsage(hourlyMintUsageCall),
        #[allow(missing_docs)]
        isBridgeAuthorized(isBridgeAuthorizedCall),
        #[allow(missing_docs)]
        maxLockTimestamp(maxLockTimestampCall),
        #[allow(missing_docs)]
        mint(mintCall),
        #[allow(missing_docs)]
        name(nameCall),
        #[allow(missing_docs)]
        nonces(noncesCall),
        #[allow(missing_docs)]
        numCheckpoints(numCheckpointsCall),
        #[allow(missing_docs)]
        permit(permitCall),
        #[allow(missing_docs)]
        removeBridge(removeBridgeCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        setBridgeActive(setBridgeActiveCall),
        #[allow(missing_docs)]
        setBridgeLimits(setBridgeLimitsCall),
        #[allow(missing_docs)]
        setUnlockTimestamp(setUnlockTimestampCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
        #[allow(missing_docs)]
        symbol(symbolCall),
        #[allow(missing_docs)]
        totalSupply(totalSupplyCall),
        #[allow(missing_docs)]
        transfer(transferCall),
        #[allow(missing_docs)]
        transferFrom(transferFromCall),
        #[allow(missing_docs)]
        transfersLocked(transfersLockedCall),
        #[allow(missing_docs)]
        unlockTimestamp(unlockTimestampCall),
    }
    #[automatically_derived]
    impl SyndicateTokenCrosschainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 4u8, 45u8, 122u8],
            [1u8, 255u8, 201u8, 167u8],
            [4u8, 223u8, 1u8, 125u8],
            [5u8, 7u8, 50u8, 251u8],
            [6u8, 253u8, 222u8, 3u8],
            [9u8, 94u8, 167u8, 179u8],
            [24u8, 22u8, 13u8, 221u8],
            [24u8, 191u8, 80u8, 119u8],
            [35u8, 184u8, 114u8, 221u8],
            [36u8, 138u8, 156u8, 163u8],
            [40u8, 105u8, 54u8, 107u8],
            [43u8, 140u8, 73u8, 227u8],
            [47u8, 47u8, 241u8, 93u8],
            [48u8, 211u8, 232u8, 235u8],
            [49u8, 60u8, 229u8, 103u8],
            [54u8, 68u8, 229u8, 21u8],
            [54u8, 86u8, 138u8, 190u8],
            [58u8, 70u8, 177u8, 168u8],
            [64u8, 193u8, 15u8, 25u8],
            [66u8, 122u8, 192u8, 202u8],
            [66u8, 150u8, 108u8, 104u8],
            [75u8, 245u8, 215u8, 233u8],
            [79u8, 27u8, 252u8, 158u8],
            [88u8, 124u8, 222u8, 30u8],
            [90u8, 66u8, 57u8, 233u8],
            [90u8, 93u8, 177u8, 187u8],
            [92u8, 25u8, 169u8, 92u8],
            [93u8, 76u8, 98u8, 133u8],
            [99u8, 160u8, 218u8, 172u8],
            [101u8, 20u8, 85u8, 52u8],
            [111u8, 207u8, 255u8, 69u8],
            [112u8, 160u8, 130u8, 49u8],
            [114u8, 203u8, 220u8, 200u8],
            [120u8, 251u8, 127u8, 210u8],
            [121u8, 204u8, 103u8, 144u8],
            [122u8, 140u8, 209u8, 86u8],
            [126u8, 206u8, 190u8, 0u8],
            [131u8, 241u8, 33u8, 27u8],
            [132u8, 38u8, 173u8, 242u8],
            [132u8, 76u8, 144u8, 38u8],
            [132u8, 176u8, 25u8, 110u8],
            [138u8, 84u8, 37u8, 33u8],
            [141u8, 51u8, 67u8, 214u8],
            [142u8, 83u8, 158u8, 140u8],
            [144u8, 45u8, 85u8, 165u8],
            [145u8, 209u8, 72u8, 84u8],
            [145u8, 221u8, 173u8, 244u8],
            [148u8, 170u8, 34u8, 242u8],
            [149u8, 216u8, 155u8, 65u8],
            [154u8, 178u8, 78u8, 176u8],
            [155u8, 126u8, 246u8, 75u8],
            [162u8, 23u8, 253u8, 223u8],
            [169u8, 5u8, 156u8, 187u8],
            [170u8, 8u8, 42u8, 157u8],
            [176u8, 202u8, 37u8, 62u8],
            [183u8, 205u8, 198u8, 28u8],
            [187u8, 77u8, 68u8, 54u8],
            [192u8, 42u8, 231u8, 84u8],
            [195u8, 205u8, 165u8, 32u8],
            [196u8, 252u8, 69u8, 168u8],
            [201u8, 171u8, 0u8, 6u8],
            [213u8, 5u8, 172u8, 207u8],
            [213u8, 71u8, 116u8, 31u8],
            [221u8, 98u8, 237u8, 62u8],
            [241u8, 18u8, 126u8, 216u8],
            [247u8, 94u8, 133u8, 18u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateTokenCrosschainCalls {
        const NAME: &'static str = "SyndicateTokenCrosschainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 66usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AIRDROP_MANAGER_ROLE(_) => {
                    <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::BRIDGE_MANAGER_ROLE(_) => {
                    <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::CLOCK_MODE(_) => {
                    <CLOCK_MODECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DOMAIN_SEPARATOR(_) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::EMISSION_BUDGET_MANAGER_ROLE(_) => {
                    <EMISSION_BUDGET_MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::EMISSION_MINTER_ROLE(_) => {
                    <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::INITIAL_MINT_SUPPLY(_) => {
                    <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MAX_LOCK_DURATION(_) => {
                    <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::TOTAL_SUPPLY(_) => {
                    <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allocateEmissionBudget(_) => {
                    <allocateEmissionBudgetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::allowance(_) => {
                    <allowanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve(_) => <approveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeConfigs(_) => {
                    <bridgeConfigsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::bridgeEmissionBudgets(_) => {
                    <bridgeEmissionBudgetsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::burn(_) => <burnCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::burnFrom(_) => <burnFromCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::checkpoints(_) => {
                    <checkpointsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::clock(_) => <clockCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::crosschainBurn(_) => {
                    <crosschainBurnCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crosschainMint(_) => {
                    <crosschainMintCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::decimals(_) => <decimalsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::delegate(_) => <delegateCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::delegateBySig(_) => {
                    <delegateBySigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::delegates(_) => {
                    <delegatesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::eip712Domain(_) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllBridges(_) => {
                    <getAllBridgesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAvailableBurnLimit(_) => {
                    <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAvailableMintLimit(_) => {
                    <getAvailableMintLimitCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeAtIndex(_) => {
                    <getBridgeAtIndexCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeConfig(_) => {
                    <getBridgeConfigCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getBridgeCount(_) => {
                    <getBridgeCountCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentTotalSupply(_) => {
                    <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getEmissionBudget(_) => {
                    <getEmissionBudgetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPastTotalSupply(_) => {
                    <getPastTotalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPastVotes(_) => {
                    <getPastVotesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPastVotingPower(_) => {
                    <getPastVotingPowerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRemainingLockTime(_) => {
                    <getRemainingLockTimeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVotes(_) => <getVotesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getVotingPower(_) => {
                    <getVotingPowerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::hourlyBurnUsage(_) => {
                    <hourlyBurnUsageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hourlyMintUsage(_) => {
                    <hourlyMintUsageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isBridgeAuthorized(_) => {
                    <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxLockTimestamp(_) => {
                    <maxLockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::nonces(_) => <noncesCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::numCheckpoints(_) => {
                    <numCheckpointsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::permit(_) => <permitCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removeBridge(_) => {
                    <removeBridgeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeActive(_) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBridgeLimits(_) => {
                    <setBridgeLimitsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setUnlockTimestamp(_) => {
                    <setUnlockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::totalSupply(_) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfer(_) => <transferCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::transferFrom(_) => {
                    <transferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transfersLocked(_) => {
                    <transfersLockedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unlockTimestamp(_) => {
                    <unlockTimestampCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls>] = &[
                {
                    fn hourlyMintUsage(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <hourlyMintUsageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::hourlyMintUsage)
                    }
                    hourlyMintUsage
                },
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn removeBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <removeBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::removeBridge)
                    }
                    removeBridge
                },
                {
                    fn getEmissionBudget(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getEmissionBudgetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getEmissionBudget)
                    }
                    getEmissionBudget
                },
                {
                    fn name(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::name)
                    }
                    name
                },
                {
                    fn approve(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::approve)
                    }
                    approve
                },
                {
                    fn totalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn crosschainMint(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <crosschainMintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::crosschainMint)
                    }
                    crosschainMint
                },
                {
                    fn transferFrom(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn bridgeEmissionBudgets(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <bridgeEmissionBudgetsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::bridgeEmissionBudgets)
                    }
                    bridgeEmissionBudgets
                },
                {
                    fn crosschainBurn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <crosschainBurnCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::crosschainBurn)
                    }
                    crosschainBurn
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn getAvailableBurnLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAvailableBurnLimit)
                    }
                    getAvailableBurnLimit
                },
                {
                    fn decimals(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <decimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::decimals)
                    }
                    decimals
                },
                {
                    fn DOMAIN_SEPARATOR(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::DOMAIN_SEPARATOR)
                    }
                    DOMAIN_SEPARATOR
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn getPastVotes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastVotesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastVotes)
                    }
                    getPastVotes
                },
                {
                    fn mint(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::mint)
                    }
                    mint
                },
                {
                    fn bridgeConfigs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <bridgeConfigsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::bridgeConfigs)
                    }
                    bridgeConfigs
                },
                {
                    fn burn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <burnCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::burn)
                    }
                    burn
                },
                {
                    fn CLOCK_MODE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <CLOCK_MODECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::CLOCK_MODE)
                    }
                    CLOCK_MODE
                },
                {
                    fn MAX_LOCK_DURATION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::MAX_LOCK_DURATION)
                    }
                    MAX_LOCK_DURATION
                },
                {
                    fn delegates(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegatesCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::delegates)
                    }
                    delegates
                },
                {
                    fn allocateEmissionBudget(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <allocateEmissionBudgetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::allocateEmissionBudget)
                    }
                    allocateEmissionBudget
                },
                {
                    fn getBridgeAtIndex(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeAtIndexCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeAtIndex)
                    }
                    getBridgeAtIndex
                },
                {
                    fn delegate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegateCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::delegate)
                    }
                    delegate
                },
                {
                    fn hourlyBurnUsage(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <hourlyBurnUsageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::hourlyBurnUsage)
                    }
                    hourlyBurnUsage
                },
                {
                    fn setBridgeLimits(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setBridgeLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::setBridgeLimits)
                    }
                    setBridgeLimits
                },
                {
                    fn getBridgeCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeCountCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeCount)
                    }
                    getBridgeCount
                },
                {
                    fn numCheckpoints(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <numCheckpointsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::numCheckpoints)
                    }
                    numCheckpoints
                },
                {
                    fn balanceOf(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn getAllBridges(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAllBridgesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAllBridges)
                    }
                    getAllBridges
                },
                {
                    fn isBridgeAuthorized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::isBridgeAuthorized)
                    }
                    isBridgeAuthorized
                },
                {
                    fn burnFrom(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <burnFromCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::burnFrom)
                    }
                    burnFrom
                },
                {
                    fn getRemainingLockTime(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getRemainingLockTimeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getRemainingLockTime)
                    }
                    getRemainingLockTime
                },
                {
                    fn nonces(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <noncesCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::nonces)
                    }
                    nonces
                },
                {
                    fn transfersLocked(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transfersLockedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::transfersLocked)
                    }
                    transfersLocked
                },
                {
                    fn maxLockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <maxLockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::maxLockTimestamp)
                    }
                    maxLockTimestamp
                },
                {
                    fn setUnlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setUnlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::setUnlockTimestamp)
                    }
                    setUnlockTimestamp
                },
                {
                    fn eip712Domain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <eip712DomainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::eip712Domain)
                    }
                    eip712Domain
                },
                {
                    fn AIRDROP_MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::AIRDROP_MANAGER_ROLE)
                    }
                    AIRDROP_MANAGER_ROLE
                },
                {
                    fn EMISSION_MINTER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::EMISSION_MINTER_ROLE)
                    }
                    EMISSION_MINTER_ROLE
                },
                {
                    fn getPastTotalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastTotalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastTotalSupply)
                    }
                    getPastTotalSupply
                },
                {
                    fn TOTAL_SUPPLY(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::TOTAL_SUPPLY)
                    }
                    TOTAL_SUPPLY
                },
                {
                    fn hasRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn clock(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <clockCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::clock)
                    }
                    clock
                },
                {
                    fn getAvailableMintLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAvailableMintLimitCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAvailableMintLimit)
                    }
                    getAvailableMintLimit
                },
                {
                    fn symbol(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::symbol)
                    }
                    symbol
                },
                {
                    fn getVotes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getVotesCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::getVotes)
                    }
                    getVotes
                },
                {
                    fn INITIAL_MINT_SUPPLY(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::INITIAL_MINT_SUPPLY)
                    }
                    INITIAL_MINT_SUPPLY
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn transfer(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transferCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::transfer)
                    }
                    transfer
                },
                {
                    fn unlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <unlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::unlockTimestamp)
                    }
                    unlockTimestamp
                },
                {
                    fn getPastVotingPower(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastVotingPowerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastVotingPower)
                    }
                    getPastVotingPower
                },
                {
                    fn EMISSION_BUDGET_MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <EMISSION_BUDGET_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainCalls::EMISSION_BUDGET_MANAGER_ROLE,
                            )
                    }
                    EMISSION_BUDGET_MANAGER_ROLE
                },
                {
                    fn getVotingPower(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getVotingPowerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getVotingPower)
                    }
                    getVotingPower
                },
                {
                    fn getCurrentTotalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getCurrentTotalSupply)
                    }
                    getCurrentTotalSupply
                },
                {
                    fn delegateBySig(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegateBySigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::delegateBySig)
                    }
                    delegateBySig
                },
                {
                    fn getBridgeConfig(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeConfigCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeConfig)
                    }
                    getBridgeConfig
                },
                {
                    fn setBridgeActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::setBridgeActive)
                    }
                    setBridgeActive
                },
                {
                    fn permit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <permitCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::permit)
                    }
                    permit
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn allowance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainCalls::allowance)
                    }
                    allowance
                },
                {
                    fn checkpoints(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <checkpointsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::checkpoints)
                    }
                    checkpoints
                },
                {
                    fn BRIDGE_MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::BRIDGE_MANAGER_ROLE)
                    }
                    BRIDGE_MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls>] = &[
                {
                    fn hourlyMintUsage(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <hourlyMintUsageCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::hourlyMintUsage)
                    }
                    hourlyMintUsage
                },
                {
                    fn supportsInterface(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn removeBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <removeBridgeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::removeBridge)
                    }
                    removeBridge
                },
                {
                    fn getEmissionBudget(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getEmissionBudgetCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getEmissionBudget)
                    }
                    getEmissionBudget
                },
                {
                    fn name(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::name)
                    }
                    name
                },
                {
                    fn approve(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <approveCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::approve)
                    }
                    approve
                },
                {
                    fn totalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn crosschainMint(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <crosschainMintCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::crosschainMint)
                    }
                    crosschainMint
                },
                {
                    fn transferFrom(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transferFromCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::transferFrom)
                    }
                    transferFrom
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn bridgeEmissionBudgets(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <bridgeEmissionBudgetsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::bridgeEmissionBudgets)
                    }
                    bridgeEmissionBudgets
                },
                {
                    fn crosschainBurn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <crosschainBurnCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::crosschainBurn)
                    }
                    crosschainBurn
                },
                {
                    fn grantRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn getAvailableBurnLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAvailableBurnLimit)
                    }
                    getAvailableBurnLimit
                },
                {
                    fn decimals(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <decimalsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::decimals)
                    }
                    decimals
                },
                {
                    fn DOMAIN_SEPARATOR(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::DOMAIN_SEPARATOR)
                    }
                    DOMAIN_SEPARATOR
                },
                {
                    fn renounceRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn getPastVotes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastVotesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastVotes)
                    }
                    getPastVotes
                },
                {
                    fn mint(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::mint)
                    }
                    mint
                },
                {
                    fn bridgeConfigs(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <bridgeConfigsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::bridgeConfigs)
                    }
                    bridgeConfigs
                },
                {
                    fn burn(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <burnCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::burn)
                    }
                    burn
                },
                {
                    fn CLOCK_MODE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <CLOCK_MODECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::CLOCK_MODE)
                    }
                    CLOCK_MODE
                },
                {
                    fn MAX_LOCK_DURATION(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::MAX_LOCK_DURATION)
                    }
                    MAX_LOCK_DURATION
                },
                {
                    fn delegates(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegatesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::delegates)
                    }
                    delegates
                },
                {
                    fn allocateEmissionBudget(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <allocateEmissionBudgetCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::allocateEmissionBudget)
                    }
                    allocateEmissionBudget
                },
                {
                    fn getBridgeAtIndex(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeAtIndexCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeAtIndex)
                    }
                    getBridgeAtIndex
                },
                {
                    fn delegate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegateCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::delegate)
                    }
                    delegate
                },
                {
                    fn hourlyBurnUsage(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <hourlyBurnUsageCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::hourlyBurnUsage)
                    }
                    hourlyBurnUsage
                },
                {
                    fn setBridgeLimits(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setBridgeLimitsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::setBridgeLimits)
                    }
                    setBridgeLimits
                },
                {
                    fn getBridgeCount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeCountCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeCount)
                    }
                    getBridgeCount
                },
                {
                    fn numCheckpoints(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <numCheckpointsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::numCheckpoints)
                    }
                    numCheckpoints
                },
                {
                    fn balanceOf(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn getAllBridges(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAllBridgesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAllBridges)
                    }
                    getAllBridges
                },
                {
                    fn isBridgeAuthorized(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::isBridgeAuthorized)
                    }
                    isBridgeAuthorized
                },
                {
                    fn burnFrom(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <burnFromCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::burnFrom)
                    }
                    burnFrom
                },
                {
                    fn getRemainingLockTime(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getRemainingLockTimeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getRemainingLockTime)
                    }
                    getRemainingLockTime
                },
                {
                    fn nonces(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <noncesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::nonces)
                    }
                    nonces
                },
                {
                    fn transfersLocked(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transfersLockedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::transfersLocked)
                    }
                    transfersLocked
                },
                {
                    fn maxLockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <maxLockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::maxLockTimestamp)
                    }
                    maxLockTimestamp
                },
                {
                    fn setUnlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setUnlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::setUnlockTimestamp)
                    }
                    setUnlockTimestamp
                },
                {
                    fn eip712Domain(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <eip712DomainCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::eip712Domain)
                    }
                    eip712Domain
                },
                {
                    fn AIRDROP_MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::AIRDROP_MANAGER_ROLE)
                    }
                    AIRDROP_MANAGER_ROLE
                },
                {
                    fn EMISSION_MINTER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::EMISSION_MINTER_ROLE)
                    }
                    EMISSION_MINTER_ROLE
                },
                {
                    fn getPastTotalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastTotalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastTotalSupply)
                    }
                    getPastTotalSupply
                },
                {
                    fn TOTAL_SUPPLY(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::TOTAL_SUPPLY)
                    }
                    TOTAL_SUPPLY
                },
                {
                    fn hasRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn clock(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <clockCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::clock)
                    }
                    clock
                },
                {
                    fn getAvailableMintLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getAvailableMintLimitCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getAvailableMintLimit)
                    }
                    getAvailableMintLimit
                },
                {
                    fn symbol(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::symbol)
                    }
                    symbol
                },
                {
                    fn getVotes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getVotesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getVotes)
                    }
                    getVotes
                },
                {
                    fn INITIAL_MINT_SUPPLY(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::INITIAL_MINT_SUPPLY)
                    }
                    INITIAL_MINT_SUPPLY
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn transfer(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <transferCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::transfer)
                    }
                    transfer
                },
                {
                    fn unlockTimestamp(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <unlockTimestampCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::unlockTimestamp)
                    }
                    unlockTimestamp
                },
                {
                    fn getPastVotingPower(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getPastVotingPowerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getPastVotingPower)
                    }
                    getPastVotingPower
                },
                {
                    fn EMISSION_BUDGET_MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <EMISSION_BUDGET_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainCalls::EMISSION_BUDGET_MANAGER_ROLE,
                            )
                    }
                    EMISSION_BUDGET_MANAGER_ROLE
                },
                {
                    fn getVotingPower(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getVotingPowerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getVotingPower)
                    }
                    getVotingPower
                },
                {
                    fn getCurrentTotalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getCurrentTotalSupply)
                    }
                    getCurrentTotalSupply
                },
                {
                    fn delegateBySig(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <delegateBySigCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::delegateBySig)
                    }
                    delegateBySig
                },
                {
                    fn getBridgeConfig(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <getBridgeConfigCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::getBridgeConfig)
                    }
                    getBridgeConfig
                },
                {
                    fn setBridgeActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::setBridgeActive)
                    }
                    setBridgeActive
                },
                {
                    fn permit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <permitCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::permit)
                    }
                    permit
                },
                {
                    fn revokeRole(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn allowance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::allowance)
                    }
                    allowance
                },
                {
                    fn checkpoints(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <checkpointsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::checkpoints)
                    }
                    checkpoints
                },
                {
                    fn BRIDGE_MANAGER_ROLE(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainCalls> {
                        <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainCalls::BRIDGE_MANAGER_ROLE)
                    }
                    BRIDGE_MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AIRDROP_MANAGER_ROLE(inner) => {
                    <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BRIDGE_MANAGER_ROLE(inner) => {
                    <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CLOCK_MODE(inner) => {
                    <CLOCK_MODECall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EMISSION_BUDGET_MANAGER_ROLE(inner) => {
                    <EMISSION_BUDGET_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EMISSION_MINTER_ROLE(inner) => {
                    <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::INITIAL_MINT_SUPPLY(inner) => {
                    <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MAX_LOCK_DURATION(inner) => {
                    <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TOTAL_SUPPLY(inner) => {
                    <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allocateEmissionBudget(inner) => {
                    <allocateEmissionBudgetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::bridgeConfigs(inner) => {
                    <bridgeConfigsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::bridgeEmissionBudgets(inner) => {
                    <bridgeEmissionBudgetsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::burn(inner) => {
                    <burnCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::burnFrom(inner) => {
                    <burnFromCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::checkpoints(inner) => {
                    <checkpointsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::clock(inner) => {
                    <clockCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::crosschainBurn(inner) => {
                    <crosschainBurnCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crosschainMint(inner) => {
                    <crosschainMintCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::delegate(inner) => {
                    <delegateCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::delegateBySig(inner) => {
                    <delegateBySigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::delegates(inner) => {
                    <delegatesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllBridges(inner) => {
                    <getAllBridgesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAvailableBurnLimit(inner) => {
                    <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAvailableMintLimit(inner) => {
                    <getAvailableMintLimitCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeAtIndex(inner) => {
                    <getBridgeAtIndexCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeConfig(inner) => {
                    <getBridgeConfigCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getBridgeCount(inner) => {
                    <getBridgeCountCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentTotalSupply(inner) => {
                    <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getEmissionBudget(inner) => {
                    <getEmissionBudgetCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPastTotalSupply(inner) => {
                    <getPastTotalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPastVotes(inner) => {
                    <getPastVotesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPastVotingPower(inner) => {
                    <getPastVotingPowerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRemainingLockTime(inner) => {
                    <getRemainingLockTimeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getVotingPower(inner) => {
                    <getVotingPowerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hourlyBurnUsage(inner) => {
                    <hourlyBurnUsageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::hourlyMintUsage(inner) => {
                    <hourlyMintUsageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isBridgeAuthorized(inner) => {
                    <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxLockTimestamp(inner) => {
                    <maxLockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::numCheckpoints(inner) => {
                    <numCheckpointsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removeBridge(inner) => {
                    <removeBridgeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBridgeLimits(inner) => {
                    <setBridgeLimitsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setUnlockTimestamp(inner) => {
                    <setUnlockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transfersLocked(inner) => {
                    <transfersLockedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unlockTimestamp(inner) => {
                    <unlockTimestampCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AIRDROP_MANAGER_ROLE(inner) => {
                    <AIRDROP_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BRIDGE_MANAGER_ROLE(inner) => {
                    <BRIDGE_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CLOCK_MODE(inner) => {
                    <CLOCK_MODECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DOMAIN_SEPARATOR(inner) => {
                    <DOMAIN_SEPARATORCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EMISSION_BUDGET_MANAGER_ROLE(inner) => {
                    <EMISSION_BUDGET_MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EMISSION_MINTER_ROLE(inner) => {
                    <EMISSION_MINTER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::INITIAL_MINT_SUPPLY(inner) => {
                    <INITIAL_MINT_SUPPLYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MAX_LOCK_DURATION(inner) => {
                    <MAX_LOCK_DURATIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TOTAL_SUPPLY(inner) => {
                    <TOTAL_SUPPLYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allocateEmissionBudget(inner) => {
                    <allocateEmissionBudgetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve(inner) => {
                    <approveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeConfigs(inner) => {
                    <bridgeConfigsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::bridgeEmissionBudgets(inner) => {
                    <bridgeEmissionBudgetsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::burn(inner) => {
                    <burnCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::burnFrom(inner) => {
                    <burnFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkpoints(inner) => {
                    <checkpointsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::clock(inner) => {
                    <clockCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::crosschainBurn(inner) => {
                    <crosschainBurnCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crosschainMint(inner) => {
                    <crosschainMintCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::decimals(inner) => {
                    <decimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delegate(inner) => {
                    <delegateCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delegateBySig(inner) => {
                    <delegateBySigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::delegates(inner) => {
                    <delegatesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllBridges(inner) => {
                    <getAllBridgesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAvailableBurnLimit(inner) => {
                    <getAvailableBurnLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAvailableMintLimit(inner) => {
                    <getAvailableMintLimitCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeAtIndex(inner) => {
                    <getBridgeAtIndexCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeConfig(inner) => {
                    <getBridgeConfigCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getBridgeCount(inner) => {
                    <getBridgeCountCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentTotalSupply(inner) => {
                    <getCurrentTotalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getEmissionBudget(inner) => {
                    <getEmissionBudgetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPastTotalSupply(inner) => {
                    <getPastTotalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPastVotes(inner) => {
                    <getPastVotesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPastVotingPower(inner) => {
                    <getPastVotingPowerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRemainingLockTime(inner) => {
                    <getRemainingLockTimeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVotes(inner) => {
                    <getVotesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVotingPower(inner) => {
                    <getVotingPowerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::hourlyBurnUsage(inner) => {
                    <hourlyBurnUsageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hourlyMintUsage(inner) => {
                    <hourlyMintUsageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isBridgeAuthorized(inner) => {
                    <isBridgeAuthorizedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxLockTimestamp(inner) => {
                    <maxLockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::nonces(inner) => {
                    <noncesCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::numCheckpoints(inner) => {
                    <numCheckpointsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::permit(inner) => {
                    <permitCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removeBridge(inner) => {
                    <removeBridgeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeActive(inner) => {
                    <setBridgeActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBridgeLimits(inner) => {
                    <setBridgeLimitsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setUnlockTimestamp(inner) => {
                    <setUnlockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfer(inner) => {
                    <transferCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom(inner) => {
                    <transferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transfersLocked(inner) => {
                    <transfersLockedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unlockTimestamp(inner) => {
                    <unlockTimestampCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateTokenCrosschain`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SyndicateTokenCrosschainErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
        #[allow(missing_docs)]
        BridgeMustBeContract(BridgeMustBeContract),
        #[allow(missing_docs)]
        BridgeNotActive(BridgeNotActive),
        #[allow(missing_docs)]
        BurnOnlyDuringLockPeriod(BurnOnlyDuringLockPeriod),
        #[allow(missing_docs)]
        CannotAddSelfAsBridge(CannotAddSelfAsBridge),
        #[allow(missing_docs)]
        CheckpointUnorderedInsertion(CheckpointUnorderedInsertion),
        #[allow(missing_docs)]
        ECDSAInvalidSignature(ECDSAInvalidSignature),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureLength(ECDSAInvalidSignatureLength),
        #[allow(missing_docs)]
        ECDSAInvalidSignatureS(ECDSAInvalidSignatureS),
        #[allow(missing_docs)]
        ERC20ExceededSafeSupply(ERC20ExceededSafeSupply),
        #[allow(missing_docs)]
        ERC20InsufficientAllowance(ERC20InsufficientAllowance),
        #[allow(missing_docs)]
        ERC20InsufficientBalance(ERC20InsufficientBalance),
        #[allow(missing_docs)]
        ERC20InvalidApprover(ERC20InvalidApprover),
        #[allow(missing_docs)]
        ERC20InvalidReceiver(ERC20InvalidReceiver),
        #[allow(missing_docs)]
        ERC20InvalidSender(ERC20InvalidSender),
        #[allow(missing_docs)]
        ERC20InvalidSpender(ERC20InvalidSpender),
        #[allow(missing_docs)]
        ERC2612ExpiredSignature(ERC2612ExpiredSignature),
        #[allow(missing_docs)]
        ERC2612InvalidSigner(ERC2612InvalidSigner),
        #[allow(missing_docs)]
        ERC5805FutureLookup(ERC5805FutureLookup),
        #[allow(missing_docs)]
        ERC6372InconsistentClock(ERC6372InconsistentClock),
        #[allow(missing_docs)]
        ExceedsTotalSupply(ExceedsTotalSupply),
        #[allow(missing_docs)]
        InsufficientBurnLimit(InsufficientBurnLimit),
        #[allow(missing_docs)]
        InsufficientEmissionBudget(InsufficientEmissionBudget),
        #[allow(missing_docs)]
        InsufficientMintLimit(InsufficientMintLimit),
        #[allow(missing_docs)]
        InvalidAccountNonce(InvalidAccountNonce),
        #[allow(missing_docs)]
        InvalidShortString(InvalidShortString),
        #[allow(missing_docs)]
        SafeCastOverflowedUintDowncast(SafeCastOverflowedUintDowncast),
        #[allow(missing_docs)]
        StringTooLong(StringTooLong),
        #[allow(missing_docs)]
        TransfersLocked(TransfersLocked),
        #[allow(missing_docs)]
        UnauthorizedBridge(UnauthorizedBridge),
        #[allow(missing_docs)]
        UnlockTimestampInPast(UnlockTimestampInPast),
        #[allow(missing_docs)]
        UnlockTimestampTooLate(UnlockTimestampTooLate),
        #[allow(missing_docs)]
        UnreasonableBurnLimit(UnreasonableBurnLimit),
        #[allow(missing_docs)]
        UnreasonableMintLimit(UnreasonableMintLimit),
        #[allow(missing_docs)]
        VotesExpiredSignature(VotesExpiredSignature),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
        #[allow(missing_docs)]
        ZeroAmount(ZeroAmount),
    }
    #[automatically_derived]
    impl SyndicateTokenCrosschainErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 57u8, 92u8, 1u8],
            [23u8, 126u8, 63u8, 195u8],
            [28u8, 177u8, 93u8, 38u8],
            [31u8, 42u8, 32u8, 5u8],
            [37u8, 32u8, 96u8, 29u8],
            [48u8, 90u8, 39u8, 169u8],
            [64u8, 237u8, 54u8, 123u8],
            [70u8, 131u8, 175u8, 14u8],
            [75u8, 128u8, 14u8, 70u8],
            [88u8, 204u8, 173u8, 0u8],
            [98u8, 121u8, 19u8, 2u8],
            [101u8, 133u8, 182u8, 13u8],
            [102u8, 151u8, 178u8, 50u8],
            [109u8, 252u8, 198u8, 80u8],
            [111u8, 240u8, 113u8, 64u8],
            [117u8, 45u8, 136u8, 192u8],
            [122u8, 222u8, 17u8, 92u8],
            [130u8, 84u8, 49u8, 218u8],
            [148u8, 40u8, 13u8, 98u8],
            [150u8, 198u8, 253u8, 30u8],
            [165u8, 101u8, 131u8, 83u8],
            [179u8, 81u8, 43u8, 12u8],
            [184u8, 181u8, 202u8, 45u8],
            [215u8, 139u8, 206u8, 12u8],
            [217u8, 46u8, 35u8, 61u8],
            [219u8, 137u8, 227u8, 244u8],
            [226u8, 81u8, 125u8, 63u8],
            [228u8, 80u8, 211u8, 140u8],
            [229u8, 254u8, 151u8, 162u8],
            [230u8, 2u8, 223u8, 5u8],
            [236u8, 68u8, 47u8, 5u8],
            [236u8, 211u8, 248u8, 30u8],
            [239u8, 105u8, 175u8, 101u8],
            [239u8, 218u8, 14u8, 6u8],
            [246u8, 69u8, 238u8, 223u8],
            [251u8, 140u8, 232u8, 201u8],
            [251u8, 143u8, 65u8, 178u8],
            [252u8, 230u8, 152u8, 247u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateTokenCrosschainErrors {
        const NAME: &'static str = "SyndicateTokenCrosschainErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 38usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeMustBeContract(_) => {
                    <BridgeMustBeContract as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BridgeNotActive(_) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::BurnOnlyDuringLockPeriod(_) => {
                    <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CannotAddSelfAsBridge(_) => {
                    <CannotAddSelfAsBridge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CheckpointUnorderedInsertion(_) => {
                    <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignature(_) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureLength(_) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ECDSAInvalidSignatureS(_) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20ExceededSafeSupply(_) => {
                    <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InsufficientAllowance(_) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InsufficientBalance(_) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidApprover(_) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidReceiver(_) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSender(_) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC20InvalidSpender(_) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC2612ExpiredSignature(_) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC2612InvalidSigner(_) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC5805FutureLookup(_) => {
                    <ERC5805FutureLookup as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC6372InconsistentClock(_) => {
                    <ERC6372InconsistentClock as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExceedsTotalSupply(_) => {
                    <ExceedsTotalSupply as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientBurnLimit(_) => {
                    <InsufficientBurnLimit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientEmissionBudget(_) => {
                    <InsufficientEmissionBudget as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InsufficientMintLimit(_) => {
                    <InsufficientMintLimit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAccountNonce(_) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidShortString(_) => {
                    <InvalidShortString as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SafeCastOverflowedUintDowncast(_) => {
                    <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::SELECTOR
                }
                Self::StringTooLong(_) => {
                    <StringTooLong as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TransfersLocked(_) => {
                    <TransfersLocked as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnauthorizedBridge(_) => {
                    <UnauthorizedBridge as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnlockTimestampInPast(_) => {
                    <UnlockTimestampInPast as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnlockTimestampTooLate(_) => {
                    <UnlockTimestampTooLate as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnreasonableBurnLimit(_) => {
                    <UnreasonableBurnLimit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UnreasonableMintLimit(_) => {
                    <UnreasonableMintLimit as alloy_sol_types::SolError>::SELECTOR
                }
                Self::VotesExpiredSignature(_) => {
                    <VotesExpiredSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAmount(_) => {
                    <ZeroAmount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors>] = &[
                {
                    fn UnreasonableMintLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnreasonableMintLimit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnreasonableMintLimit)
                    }
                    UnreasonableMintLimit
                },
                {
                    fn ExceedsTotalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ExceedsTotalSupply as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ExceedsTotalSupply)
                    }
                    ExceedsTotalSupply
                },
                {
                    fn ERC20ExceededSafeSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20ExceededSafeSupply)
                    }
                    ERC20ExceededSafeSupply
                },
                {
                    fn ZeroAmount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn CheckpointUnorderedInsertion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::CheckpointUnorderedInsertion,
                            )
                    }
                    CheckpointUnorderedInsertion
                },
                {
                    fn StringTooLong(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <StringTooLong as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::StringTooLong)
                    }
                    StringTooLong
                },
                {
                    fn InsufficientMintLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientMintLimit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InsufficientMintLimit)
                    }
                    InsufficientMintLimit
                },
                {
                    fn VotesExpiredSignature(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <VotesExpiredSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::VotesExpiredSignature)
                    }
                    VotesExpiredSignature
                },
                {
                    fn ERC2612InvalidSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC2612InvalidSigner)
                    }
                    ERC2612InvalidSigner
                },
                {
                    fn UnreasonableBurnLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnreasonableBurnLimit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnreasonableBurnLimit)
                    }
                    UnreasonableBurnLimit
                },
                {
                    fn ERC2612ExpiredSignature(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC2612ExpiredSignature)
                    }
                    ERC2612ExpiredSignature
                },
                {
                    fn UnauthorizedBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnauthorizedBridge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnauthorizedBridge)
                    }
                    UnauthorizedBridge
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn SafeCastOverflowedUintDowncast(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::SafeCastOverflowedUintDowncast,
                            )
                    }
                    SafeCastOverflowedUintDowncast
                },
                {
                    fn ERC6372InconsistentClock(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC6372InconsistentClock as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC6372InconsistentClock,
                            )
                    }
                    ERC6372InconsistentClock
                },
                {
                    fn InvalidAccountNonce(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InvalidAccountNonce as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InvalidAccountNonce)
                    }
                    InvalidAccountNonce
                },
                {
                    fn InsufficientEmissionBudget(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientEmissionBudget as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::InsufficientEmissionBudget,
                            )
                    }
                    InsufficientEmissionBudget
                },
                {
                    fn BridgeMustBeContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BridgeMustBeContract as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::BridgeMustBeContract)
                    }
                    BridgeMustBeContract
                },
                {
                    fn ERC20InvalidSpender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidSpender)
                    }
                    ERC20InvalidSpender
                },
                {
                    fn ERC20InvalidSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidSender)
                    }
                    ERC20InvalidSender
                },
                {
                    fn UnlockTimestampInPast(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnlockTimestampInPast as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnlockTimestampInPast)
                    }
                    UnlockTimestampInPast
                },
                {
                    fn InvalidShortString(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InvalidShortString as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InvalidShortString)
                    }
                    InvalidShortString
                },
                {
                    fn BurnOnlyDuringLockPeriod(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::BurnOnlyDuringLockPeriod,
                            )
                    }
                    BurnOnlyDuringLockPeriod
                },
                {
                    fn ECDSAInvalidSignatureS(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ECDSAInvalidSignatureS)
                    }
                    ECDSAInvalidSignatureS
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(SyndicateTokenCrosschainErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn TransfersLocked(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <TransfersLocked as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::TransfersLocked)
                    }
                    TransfersLocked
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn ERC20InsufficientBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC20InsufficientBalance,
                            )
                    }
                    ERC20InsufficientBalance
                },
                {
                    fn InsufficientBurnLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientBurnLimit as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InsufficientBurnLimit)
                    }
                    InsufficientBurnLimit
                },
                {
                    fn ERC20InvalidApprover(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidApprover)
                    }
                    ERC20InvalidApprover
                },
                {
                    fn ERC20InvalidReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidReceiver)
                    }
                    ERC20InvalidReceiver
                },
                {
                    fn ERC5805FutureLookup(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC5805FutureLookup as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC5805FutureLookup)
                    }
                    ERC5805FutureLookup
                },
                {
                    fn UnlockTimestampTooLate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnlockTimestampTooLate as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnlockTimestampTooLate)
                    }
                    UnlockTimestampTooLate
                },
                {
                    fn BridgeNotActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BridgeNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::BridgeNotActive)
                    }
                    BridgeNotActive
                },
                {
                    fn ECDSAInvalidSignature(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ECDSAInvalidSignature)
                    }
                    ECDSAInvalidSignature
                },
                {
                    fn CannotAddSelfAsBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <CannotAddSelfAsBridge as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::CannotAddSelfAsBridge)
                    }
                    CannotAddSelfAsBridge
                },
                {
                    fn ERC20InsufficientAllowance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC20InsufficientAllowance,
                            )
                    }
                    ERC20InsufficientAllowance
                },
                {
                    fn ECDSAInvalidSignatureLength(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ECDSAInvalidSignatureLength,
                            )
                    }
                    ECDSAInvalidSignatureLength
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors>] = &[
                {
                    fn UnreasonableMintLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnreasonableMintLimit as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnreasonableMintLimit)
                    }
                    UnreasonableMintLimit
                },
                {
                    fn ExceedsTotalSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ExceedsTotalSupply as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ExceedsTotalSupply)
                    }
                    ExceedsTotalSupply
                },
                {
                    fn ERC20ExceededSafeSupply(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20ExceededSafeSupply)
                    }
                    ERC20ExceededSafeSupply
                },
                {
                    fn ZeroAmount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ZeroAmount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ZeroAmount)
                    }
                    ZeroAmount
                },
                {
                    fn CheckpointUnorderedInsertion(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::CheckpointUnorderedInsertion,
                            )
                    }
                    CheckpointUnorderedInsertion
                },
                {
                    fn StringTooLong(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <StringTooLong as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::StringTooLong)
                    }
                    StringTooLong
                },
                {
                    fn InsufficientMintLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientMintLimit as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InsufficientMintLimit)
                    }
                    InsufficientMintLimit
                },
                {
                    fn VotesExpiredSignature(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <VotesExpiredSignature as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::VotesExpiredSignature)
                    }
                    VotesExpiredSignature
                },
                {
                    fn ERC2612InvalidSigner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC2612InvalidSigner)
                    }
                    ERC2612InvalidSigner
                },
                {
                    fn UnreasonableBurnLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnreasonableBurnLimit as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnreasonableBurnLimit)
                    }
                    UnreasonableBurnLimit
                },
                {
                    fn ERC2612ExpiredSignature(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC2612ExpiredSignature)
                    }
                    ERC2612ExpiredSignature
                },
                {
                    fn UnauthorizedBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnauthorizedBridge as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnauthorizedBridge)
                    }
                    UnauthorizedBridge
                },
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::AccessControlBadConfirmation,
                            )
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn SafeCastOverflowedUintDowncast(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::SafeCastOverflowedUintDowncast,
                            )
                    }
                    SafeCastOverflowedUintDowncast
                },
                {
                    fn ERC6372InconsistentClock(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC6372InconsistentClock as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC6372InconsistentClock,
                            )
                    }
                    ERC6372InconsistentClock
                },
                {
                    fn InvalidAccountNonce(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InvalidAccountNonce as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InvalidAccountNonce)
                    }
                    InvalidAccountNonce
                },
                {
                    fn InsufficientEmissionBudget(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientEmissionBudget as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::InsufficientEmissionBudget,
                            )
                    }
                    InsufficientEmissionBudget
                },
                {
                    fn BridgeMustBeContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BridgeMustBeContract as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::BridgeMustBeContract)
                    }
                    BridgeMustBeContract
                },
                {
                    fn ERC20InvalidSpender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidSpender)
                    }
                    ERC20InvalidSpender
                },
                {
                    fn ERC20InvalidSender(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidSender as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidSender)
                    }
                    ERC20InvalidSender
                },
                {
                    fn UnlockTimestampInPast(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnlockTimestampInPast as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnlockTimestampInPast)
                    }
                    UnlockTimestampInPast
                },
                {
                    fn InvalidShortString(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InvalidShortString as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InvalidShortString)
                    }
                    InvalidShortString
                },
                {
                    fn BurnOnlyDuringLockPeriod(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::BurnOnlyDuringLockPeriod,
                            )
                    }
                    BurnOnlyDuringLockPeriod
                },
                {
                    fn ECDSAInvalidSignatureS(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ECDSAInvalidSignatureS)
                    }
                    ECDSAInvalidSignatureS
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
                {
                    fn TransfersLocked(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <TransfersLocked as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::TransfersLocked)
                    }
                    TransfersLocked
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
                {
                    fn ERC20InsufficientBalance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC20InsufficientBalance,
                            )
                    }
                    ERC20InsufficientBalance
                },
                {
                    fn InsufficientBurnLimit(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <InsufficientBurnLimit as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::InsufficientBurnLimit)
                    }
                    InsufficientBurnLimit
                },
                {
                    fn ERC20InvalidApprover(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidApprover)
                    }
                    ERC20InvalidApprover
                },
                {
                    fn ERC20InvalidReceiver(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC20InvalidReceiver)
                    }
                    ERC20InvalidReceiver
                },
                {
                    fn ERC5805FutureLookup(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC5805FutureLookup as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ERC5805FutureLookup)
                    }
                    ERC5805FutureLookup
                },
                {
                    fn UnlockTimestampTooLate(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <UnlockTimestampTooLate as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::UnlockTimestampTooLate)
                    }
                    UnlockTimestampTooLate
                },
                {
                    fn BridgeNotActive(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <BridgeNotActive as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::BridgeNotActive)
                    }
                    BridgeNotActive
                },
                {
                    fn ECDSAInvalidSignature(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::ECDSAInvalidSignature)
                    }
                    ECDSAInvalidSignature
                },
                {
                    fn CannotAddSelfAsBridge(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <CannotAddSelfAsBridge as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SyndicateTokenCrosschainErrors::CannotAddSelfAsBridge)
                    }
                    CannotAddSelfAsBridge
                },
                {
                    fn ERC20InsufficientAllowance(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ERC20InsufficientAllowance,
                            )
                    }
                    ERC20InsufficientAllowance
                },
                {
                    fn ECDSAInvalidSignatureLength(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SyndicateTokenCrosschainErrors> {
                        <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                SyndicateTokenCrosschainErrors::ECDSAInvalidSignatureLength,
                            )
                    }
                    ECDSAInvalidSignatureLength
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeMustBeContract(inner) => {
                    <BridgeMustBeContract as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::BurnOnlyDuringLockPeriod(inner) => {
                    <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CannotAddSelfAsBridge(inner) => {
                    <CannotAddSelfAsBridge as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CheckpointUnorderedInsertion(inner) => {
                    <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20ExceededSafeSupply(inner) => {
                    <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC2612ExpiredSignature(inner) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC2612InvalidSigner(inner) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC5805FutureLookup(inner) => {
                    <ERC5805FutureLookup as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC6372InconsistentClock(inner) => {
                    <ERC6372InconsistentClock as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ExceedsTotalSupply(inner) => {
                    <ExceedsTotalSupply as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientBurnLimit(inner) => {
                    <InsufficientBurnLimit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientEmissionBudget(inner) => {
                    <InsufficientEmissionBudget as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InsufficientMintLimit(inner) => {
                    <InsufficientMintLimit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAccountNonce(inner) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidShortString(inner) => {
                    <InvalidShortString as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SafeCastOverflowedUintDowncast(inner) => {
                    <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::StringTooLong(inner) => {
                    <StringTooLong as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::TransfersLocked(inner) => {
                    <TransfersLocked as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnauthorizedBridge(inner) => {
                    <UnauthorizedBridge as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnlockTimestampInPast(inner) => {
                    <UnlockTimestampInPast as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnlockTimestampTooLate(inner) => {
                    <UnlockTimestampTooLate as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnreasonableBurnLimit(inner) => {
                    <UnreasonableBurnLimit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UnreasonableMintLimit(inner) => {
                    <UnreasonableMintLimit as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::VotesExpiredSignature(inner) => {
                    <VotesExpiredSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeMustBeContract(inner) => {
                    <BridgeMustBeContract as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BridgeNotActive(inner) => {
                    <BridgeNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::BurnOnlyDuringLockPeriod(inner) => {
                    <BurnOnlyDuringLockPeriod as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CannotAddSelfAsBridge(inner) => {
                    <CannotAddSelfAsBridge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CheckpointUnorderedInsertion(inner) => {
                    <CheckpointUnorderedInsertion as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignature(inner) => {
                    <ECDSAInvalidSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureLength(inner) => {
                    <ECDSAInvalidSignatureLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ECDSAInvalidSignatureS(inner) => {
                    <ECDSAInvalidSignatureS as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20ExceededSafeSupply(inner) => {
                    <ERC20ExceededSafeSupply as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InsufficientAllowance(inner) => {
                    <ERC20InsufficientAllowance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InsufficientBalance(inner) => {
                    <ERC20InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidApprover(inner) => {
                    <ERC20InvalidApprover as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidReceiver(inner) => {
                    <ERC20InvalidReceiver as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSender(inner) => {
                    <ERC20InvalidSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC20InvalidSpender(inner) => {
                    <ERC20InvalidSpender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC2612ExpiredSignature(inner) => {
                    <ERC2612ExpiredSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC2612InvalidSigner(inner) => {
                    <ERC2612InvalidSigner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC5805FutureLookup(inner) => {
                    <ERC5805FutureLookup as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC6372InconsistentClock(inner) => {
                    <ERC6372InconsistentClock as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExceedsTotalSupply(inner) => {
                    <ExceedsTotalSupply as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientBurnLimit(inner) => {
                    <InsufficientBurnLimit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientEmissionBudget(inner) => {
                    <InsufficientEmissionBudget as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InsufficientMintLimit(inner) => {
                    <InsufficientMintLimit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAccountNonce(inner) => {
                    <InvalidAccountNonce as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidShortString(inner) => {
                    <InvalidShortString as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SafeCastOverflowedUintDowncast(inner) => {
                    <SafeCastOverflowedUintDowncast as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::StringTooLong(inner) => {
                    <StringTooLong as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TransfersLocked(inner) => {
                    <TransfersLocked as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnauthorizedBridge(inner) => {
                    <UnauthorizedBridge as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnlockTimestampInPast(inner) => {
                    <UnlockTimestampInPast as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnlockTimestampTooLate(inner) => {
                    <UnlockTimestampTooLate as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnreasonableBurnLimit(inner) => {
                    <UnreasonableBurnLimit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UnreasonableMintLimit(inner) => {
                    <UnreasonableMintLimit as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::VotesExpiredSignature(inner) => {
                    <VotesExpiredSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAmount(inner) => {
                    <ZeroAmount as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`SyndicateTokenCrosschain`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum SyndicateTokenCrosschainEvents {
        #[allow(missing_docs)]
        Approval(Approval),
        #[allow(missing_docs)]
        BridgeActiveStatusChanged(BridgeActiveStatusChanged),
        #[allow(missing_docs)]
        BridgeAdded(BridgeAdded),
        #[allow(missing_docs)]
        BridgeLimitsSet(BridgeLimitsSet),
        #[allow(missing_docs)]
        BridgeRemoved(BridgeRemoved),
        #[allow(missing_docs)]
        CrosschainBurn(CrosschainBurn),
        #[allow(missing_docs)]
        CrosschainMint(CrosschainMint),
        #[allow(missing_docs)]
        DelegateChanged(DelegateChanged),
        #[allow(missing_docs)]
        DelegateVotesChanged(DelegateVotesChanged),
        #[allow(missing_docs)]
        EIP712DomainChanged(EIP712DomainChanged),
        #[allow(missing_docs)]
        EmissionBudgetAllocated(EmissionBudgetAllocated),
        #[allow(missing_docs)]
        EmissionBudgetConsumed(EmissionBudgetConsumed),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
        #[allow(missing_docs)]
        TokensBurnedByManager(TokensBurnedByManager),
        #[allow(missing_docs)]
        Transfer(Transfer),
        #[allow(missing_docs)]
        UnlockTimestampUpdated(UnlockTimestampUpdated),
    }
    #[automatically_derived]
    impl SyndicateTokenCrosschainEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                10u8, 99u8, 135u8, 201u8, 234u8, 54u8, 40u8, 184u8, 138u8, 99u8, 59u8,
                180u8, 243u8, 177u8, 81u8, 119u8, 15u8, 112u8, 8u8, 81u8, 23u8, 161u8,
                95u8, 155u8, 243u8, 120u8, 124u8, 218u8, 83u8, 241u8, 61u8, 49u8,
            ],
            [
                47u8, 135u8, 136u8, 17u8, 126u8, 126u8, 255u8, 29u8, 130u8, 233u8, 38u8,
                236u8, 121u8, 73u8, 1u8, 209u8, 124u8, 120u8, 2u8, 74u8, 80u8, 39u8, 9u8,
                64u8, 48u8, 69u8, 64u8, 167u8, 51u8, 101u8, 111u8, 13u8,
            ],
            [
                49u8, 52u8, 232u8, 162u8, 230u8, 217u8, 126u8, 146u8, 154u8, 126u8, 84u8,
                1u8, 30u8, 165u8, 72u8, 93u8, 125u8, 25u8, 109u8, 213u8, 240u8, 186u8,
                77u8, 78u8, 249u8, 88u8, 3u8, 232u8, 227u8, 252u8, 37u8, 127u8,
            ],
            [
                93u8, 157u8, 80u8, 52u8, 101u8, 108u8, 179u8, 235u8, 251u8, 6u8, 85u8,
                5u8, 124u8, 215u8, 249u8, 180u8, 7u8, 122u8, 155u8, 66u8, 255u8, 66u8,
                206u8, 34u8, 60u8, 186u8, 197u8, 188u8, 88u8, 109u8, 33u8, 38u8,
            ],
            [
                140u8, 91u8, 225u8, 229u8, 235u8, 236u8, 125u8, 91u8, 209u8, 79u8, 113u8,
                66u8, 125u8, 30u8, 132u8, 243u8, 221u8, 3u8, 20u8, 192u8, 247u8, 178u8,
                41u8, 30u8, 91u8, 32u8, 10u8, 200u8, 199u8, 195u8, 185u8, 37u8,
            ],
            [
                156u8, 134u8, 104u8, 219u8, 50u8, 72u8, 69u8, 6u8, 93u8, 43u8, 154u8,
                42u8, 24u8, 59u8, 211u8, 20u8, 31u8, 99u8, 1u8, 143u8, 84u8, 130u8,
                130u8, 218u8, 241u8, 141u8, 164u8, 156u8, 203u8, 248u8, 140u8, 51u8,
            ],
            [
                156u8, 160u8, 61u8, 189u8, 81u8, 147u8, 251u8, 183u8, 151u8, 65u8, 115u8,
                206u8, 221u8, 11u8, 223u8, 104u8, 65u8, 221u8, 20u8, 195u8, 203u8, 250u8,
                115u8, 90u8, 171u8, 119u8, 255u8, 29u8, 209u8, 19u8, 159u8, 179u8,
            ],
            [
                170u8, 128u8, 125u8, 10u8, 191u8, 48u8, 217u8, 25u8, 104u8, 199u8, 71u8,
                140u8, 102u8, 182u8, 216u8, 37u8, 33u8, 161u8, 6u8, 175u8, 19u8, 237u8,
                160u8, 54u8, 226u8, 3u8, 109u8, 169u8, 175u8, 22u8, 137u8, 88u8,
            ],
            [
                185u8, 7u8, 149u8, 166u8, 102u8, 80u8, 21u8, 89u8, 131u8, 226u8, 66u8,
                202u8, 195u8, 225u8, 172u8, 26u8, 77u8, 194u8, 111u8, 142u8, 210u8,
                152u8, 127u8, 60u8, 228u8, 22u8, 163u8, 78u8, 0u8, 17u8, 31u8, 212u8,
            ],
            [
                188u8, 35u8, 236u8, 127u8, 19u8, 19u8, 21u8, 11u8, 4u8, 123u8, 255u8,
                131u8, 208u8, 132u8, 91u8, 5u8, 100u8, 186u8, 161u8, 52u8, 105u8, 141u8,
                209u8, 27u8, 176u8, 172u8, 208u8, 247u8, 212u8, 22u8, 222u8, 125u8,
            ],
            [
                189u8, 121u8, 184u8, 111u8, 254u8, 10u8, 184u8, 232u8, 119u8, 97u8, 81u8,
                81u8, 66u8, 23u8, 205u8, 124u8, 172u8, 213u8, 44u8, 144u8, 159u8, 102u8,
                71u8, 92u8, 58u8, 244u8, 78u8, 18u8, 159u8, 11u8, 0u8, 255u8,
            ],
            [
                190u8, 244u8, 248u8, 28u8, 24u8, 20u8, 198u8, 65u8, 237u8, 232u8, 94u8,
                186u8, 172u8, 241u8, 157u8, 4u8, 139u8, 44u8, 91u8, 85u8, 152u8, 10u8,
                223u8, 166u8, 239u8, 15u8, 149u8, 108u8, 101u8, 19u8, 53u8, 162u8,
            ],
            [
                219u8, 3u8, 249u8, 125u8, 197u8, 132u8, 10u8, 113u8, 230u8, 155u8, 231u8,
                71u8, 14u8, 71u8, 97u8, 175u8, 16u8, 161u8, 35u8, 121u8, 115u8, 232u8,
                28u8, 18u8, 208u8, 220u8, 40u8, 19u8, 137u8, 90u8, 101u8, 38u8,
            ],
            [
                221u8, 104u8, 150u8, 220u8, 241u8, 212u8, 179u8, 17u8, 204u8, 168u8,
                125u8, 209u8, 155u8, 187u8, 162u8, 234u8, 156u8, 226u8, 248u8, 103u8,
                193u8, 86u8, 136u8, 120u8, 160u8, 67u8, 138u8, 102u8, 161u8, 175u8,
                238u8, 236u8,
            ],
            [
                221u8, 242u8, 82u8, 173u8, 27u8, 226u8, 200u8, 155u8, 105u8, 194u8,
                176u8, 104u8, 252u8, 55u8, 141u8, 170u8, 149u8, 43u8, 167u8, 241u8, 99u8,
                196u8, 161u8, 22u8, 40u8, 245u8, 90u8, 77u8, 245u8, 35u8, 179u8, 239u8,
            ],
            [
                222u8, 34u8, 186u8, 255u8, 3u8, 142u8, 58u8, 62u8, 8u8, 64u8, 124u8,
                189u8, 246u8, 23u8, 222u8, 237u8, 116u8, 232u8, 105u8, 167u8, 186u8,
                81u8, 125u8, 246u8, 17u8, 227u8, 49u8, 49u8, 198u8, 230u8, 234u8, 4u8,
            ],
            [
                222u8, 194u8, 186u8, 205u8, 210u8, 240u8, 91u8, 89u8, 222u8, 52u8, 218u8,
                155u8, 82u8, 61u8, 255u8, 139u8, 228u8, 46u8, 94u8, 56u8, 232u8, 24u8,
                200u8, 47u8, 219u8, 11u8, 174u8, 119u8, 67u8, 135u8, 167u8, 36u8,
            ],
            [
                246u8, 57u8, 31u8, 92u8, 50u8, 217u8, 198u8, 157u8, 42u8, 71u8, 234u8,
                103u8, 11u8, 68u8, 41u8, 116u8, 181u8, 57u8, 53u8, 209u8, 237u8, 199u8,
                253u8, 100u8, 235u8, 33u8, 224u8, 71u8, 168u8, 57u8, 23u8, 27u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateTokenCrosschainEvents {
        const NAME: &'static str = "SyndicateTokenCrosschainEvents";
        const COUNT: usize = 18usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Approval)
                }
                Some(
                    <BridgeActiveStatusChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <BridgeActiveStatusChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::BridgeActiveStatusChanged)
                }
                Some(<BridgeAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::BridgeAdded)
                }
                Some(<BridgeLimitsSet as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeLimitsSet as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::BridgeLimitsSet)
                }
                Some(<BridgeRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BridgeRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::BridgeRemoved)
                }
                Some(<CrosschainBurn as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrosschainBurn as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CrosschainBurn)
                }
                Some(<CrosschainMint as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrosschainMint as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CrosschainMint)
                }
                Some(<DelegateChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DelegateChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DelegateChanged)
                }
                Some(
                    <DelegateVotesChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DelegateVotesChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::DelegateVotesChanged)
                }
                Some(
                    <EIP712DomainChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EIP712DomainChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EIP712DomainChanged)
                }
                Some(
                    <EmissionBudgetAllocated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EmissionBudgetAllocated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EmissionBudgetAllocated)
                }
                Some(
                    <EmissionBudgetConsumed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EmissionBudgetConsumed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::EmissionBudgetConsumed)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::RoleRevoked)
                }
                Some(
                    <TokensBurnedByManager as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <TokensBurnedByManager as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::TokensBurnedByManager)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(topics, data)
                        .map(Self::Transfer)
                }
                Some(
                    <UnlockTimestampUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <UnlockTimestampUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::UnlockTimestampUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateTokenCrosschainEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeActiveStatusChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeLimitsSet(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::BridgeRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrosschainBurn(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrosschainMint(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DelegateChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DelegateVotesChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EIP712DomainChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EmissionBudgetAllocated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::EmissionBudgetConsumed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TokensBurnedByManager(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UnlockTimestampUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeActiveStatusChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeLimitsSet(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::BridgeRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrosschainBurn(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrosschainMint(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DelegateChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DelegateVotesChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EIP712DomainChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EmissionBudgetAllocated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::EmissionBudgetConsumed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TokensBurnedByManager(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UnlockTimestampUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateTokenCrosschain`](self) contract instance.

See the [wrapper's documentation](`SyndicateTokenCrosschainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateTokenCrosschainInstance<P, N> {
        SyndicateTokenCrosschainInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        syndTreasuryAddress: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateTokenCrosschainInstance<P, N>>,
    > {
        SyndicateTokenCrosschainInstance::<
            P,
            N,
        >::deploy(provider, defaultAdmin, syndTreasuryAddress)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        defaultAdmin: alloy::sol_types::private::Address,
        syndTreasuryAddress: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        SyndicateTokenCrosschainInstance::<
            P,
            N,
        >::deploy_builder(provider, defaultAdmin, syndTreasuryAddress)
    }
    /**A [`SyndicateTokenCrosschain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateTokenCrosschain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateTokenCrosschainInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for SyndicateTokenCrosschainInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateTokenCrosschainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenCrosschainInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateTokenCrosschain`](self) contract instance.

See the [wrapper's documentation](`SyndicateTokenCrosschainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            syndTreasuryAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<SyndicateTokenCrosschainInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                defaultAdmin,
                syndTreasuryAddress,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            defaultAdmin: alloy::sol_types::private::Address,
            syndTreasuryAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            defaultAdmin,
                            syndTreasuryAddress,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> SyndicateTokenCrosschainInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateTokenCrosschainInstance<P, N> {
            SyndicateTokenCrosschainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenCrosschainInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`AIRDROP_MANAGER_ROLE`] function.
        pub fn AIRDROP_MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, AIRDROP_MANAGER_ROLECall, N> {
            self.call_builder(&AIRDROP_MANAGER_ROLECall)
        }
        ///Creates a new call builder for the [`BRIDGE_MANAGER_ROLE`] function.
        pub fn BRIDGE_MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, BRIDGE_MANAGER_ROLECall, N> {
            self.call_builder(&BRIDGE_MANAGER_ROLECall)
        }
        ///Creates a new call builder for the [`CLOCK_MODE`] function.
        pub fn CLOCK_MODE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, CLOCK_MODECall, N> {
            self.call_builder(&CLOCK_MODECall)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall)
        }
        ///Creates a new call builder for the [`DOMAIN_SEPARATOR`] function.
        pub fn DOMAIN_SEPARATOR(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, DOMAIN_SEPARATORCall, N> {
            self.call_builder(&DOMAIN_SEPARATORCall)
        }
        ///Creates a new call builder for the [`EMISSION_BUDGET_MANAGER_ROLE`] function.
        pub fn EMISSION_BUDGET_MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, EMISSION_BUDGET_MANAGER_ROLECall, N> {
            self.call_builder(&EMISSION_BUDGET_MANAGER_ROLECall)
        }
        ///Creates a new call builder for the [`EMISSION_MINTER_ROLE`] function.
        pub fn EMISSION_MINTER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, EMISSION_MINTER_ROLECall, N> {
            self.call_builder(&EMISSION_MINTER_ROLECall)
        }
        ///Creates a new call builder for the [`INITIAL_MINT_SUPPLY`] function.
        pub fn INITIAL_MINT_SUPPLY(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, INITIAL_MINT_SUPPLYCall, N> {
            self.call_builder(&INITIAL_MINT_SUPPLYCall)
        }
        ///Creates a new call builder for the [`MAX_LOCK_DURATION`] function.
        pub fn MAX_LOCK_DURATION(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, MAX_LOCK_DURATIONCall, N> {
            self.call_builder(&MAX_LOCK_DURATIONCall)
        }
        ///Creates a new call builder for the [`TOTAL_SUPPLY`] function.
        pub fn TOTAL_SUPPLY(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, TOTAL_SUPPLYCall, N> {
            self.call_builder(&TOTAL_SUPPLYCall)
        }
        ///Creates a new call builder for the [`allocateEmissionBudget`] function.
        pub fn allocateEmissionBudget(
            &self,
            bridge: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, allocateEmissionBudgetCall, N> {
            self.call_builder(
                &allocateEmissionBudgetCall {
                    bridge,
                    amount,
                },
            )
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, allowanceCall, N> {
            self.call_builder(&allowanceCall { owner, spender })
        }
        ///Creates a new call builder for the [`approve`] function.
        pub fn approve(
            &self,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, approveCall, N> {
            self.call_builder(&approveCall { spender, value })
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { account })
        }
        ///Creates a new call builder for the [`bridgeConfigs`] function.
        pub fn bridgeConfigs(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, bridgeConfigsCall, N> {
            self.call_builder(&bridgeConfigsCall(_0))
        }
        ///Creates a new call builder for the [`bridgeEmissionBudgets`] function.
        pub fn bridgeEmissionBudgets(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, bridgeEmissionBudgetsCall, N> {
            self.call_builder(&bridgeEmissionBudgetsCall(_0))
        }
        ///Creates a new call builder for the [`burn`] function.
        pub fn burn(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, burnCall, N> {
            self.call_builder(&burnCall { amount })
        }
        ///Creates a new call builder for the [`burnFrom`] function.
        pub fn burnFrom(
            &self,
            from: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, burnFromCall, N> {
            self.call_builder(&burnFromCall { from, amount })
        }
        ///Creates a new call builder for the [`checkpoints`] function.
        pub fn checkpoints(
            &self,
            account: alloy::sol_types::private::Address,
            pos: u32,
        ) -> alloy_contract::SolCallBuilder<&P, checkpointsCall, N> {
            self.call_builder(&checkpointsCall { account, pos })
        }
        ///Creates a new call builder for the [`clock`] function.
        pub fn clock(&self) -> alloy_contract::SolCallBuilder<&P, clockCall, N> {
            self.call_builder(&clockCall)
        }
        ///Creates a new call builder for the [`crosschainBurn`] function.
        pub fn crosschainBurn(
            &self,
            from: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, crosschainBurnCall, N> {
            self.call_builder(&crosschainBurnCall { from, amount })
        }
        ///Creates a new call builder for the [`crosschainMint`] function.
        pub fn crosschainMint(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, crosschainMintCall, N> {
            self.call_builder(&crosschainMintCall { to, amount })
        }
        ///Creates a new call builder for the [`decimals`] function.
        pub fn decimals(&self) -> alloy_contract::SolCallBuilder<&P, decimalsCall, N> {
            self.call_builder(&decimalsCall)
        }
        ///Creates a new call builder for the [`delegate`] function.
        pub fn delegate(
            &self,
            delegatee: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, delegateCall, N> {
            self.call_builder(&delegateCall { delegatee })
        }
        ///Creates a new call builder for the [`delegateBySig`] function.
        pub fn delegateBySig(
            &self,
            delegatee: alloy::sol_types::private::Address,
            nonce: alloy::sol_types::private::primitives::aliases::U256,
            expiry: alloy::sol_types::private::primitives::aliases::U256,
            v: u8,
            r: alloy::sol_types::private::FixedBytes<32>,
            s: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, delegateBySigCall, N> {
            self.call_builder(
                &delegateBySigCall {
                    delegatee,
                    nonce,
                    expiry,
                    v,
                    r,
                    s,
                },
            )
        }
        ///Creates a new call builder for the [`delegates`] function.
        pub fn delegates(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, delegatesCall, N> {
            self.call_builder(&delegatesCall { account })
        }
        ///Creates a new call builder for the [`eip712Domain`] function.
        pub fn eip712Domain(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, eip712DomainCall, N> {
            self.call_builder(&eip712DomainCall)
        }
        ///Creates a new call builder for the [`getAllBridges`] function.
        pub fn getAllBridges(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getAllBridgesCall, N> {
            self.call_builder(&getAllBridgesCall)
        }
        ///Creates a new call builder for the [`getAvailableBurnLimit`] function.
        pub fn getAvailableBurnLimit(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getAvailableBurnLimitCall, N> {
            self.call_builder(
                &getAvailableBurnLimitCall {
                    bridge,
                },
            )
        }
        ///Creates a new call builder for the [`getAvailableMintLimit`] function.
        pub fn getAvailableMintLimit(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getAvailableMintLimitCall, N> {
            self.call_builder(
                &getAvailableMintLimitCall {
                    bridge,
                },
            )
        }
        ///Creates a new call builder for the [`getBridgeAtIndex`] function.
        pub fn getBridgeAtIndex(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getBridgeAtIndexCall, N> {
            self.call_builder(&getBridgeAtIndexCall { index })
        }
        ///Creates a new call builder for the [`getBridgeConfig`] function.
        pub fn getBridgeConfig(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getBridgeConfigCall, N> {
            self.call_builder(&getBridgeConfigCall { bridge })
        }
        ///Creates a new call builder for the [`getBridgeCount`] function.
        pub fn getBridgeCount(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getBridgeCountCall, N> {
            self.call_builder(&getBridgeCountCall)
        }
        ///Creates a new call builder for the [`getCurrentTotalSupply`] function.
        pub fn getCurrentTotalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getCurrentTotalSupplyCall, N> {
            self.call_builder(&getCurrentTotalSupplyCall)
        }
        ///Creates a new call builder for the [`getEmissionBudget`] function.
        pub fn getEmissionBudget(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getEmissionBudgetCall, N> {
            self.call_builder(&getEmissionBudgetCall { bridge })
        }
        ///Creates a new call builder for the [`getPastTotalSupply`] function.
        pub fn getPastTotalSupply(
            &self,
            timepoint: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getPastTotalSupplyCall, N> {
            self.call_builder(
                &getPastTotalSupplyCall {
                    timepoint,
                },
            )
        }
        ///Creates a new call builder for the [`getPastVotes`] function.
        pub fn getPastVotes(
            &self,
            account: alloy::sol_types::private::Address,
            timepoint: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getPastVotesCall, N> {
            self.call_builder(
                &getPastVotesCall {
                    account,
                    timepoint,
                },
            )
        }
        ///Creates a new call builder for the [`getPastVotingPower`] function.
        pub fn getPastVotingPower(
            &self,
            account: alloy::sol_types::private::Address,
            blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, getPastVotingPowerCall, N> {
            self.call_builder(
                &getPastVotingPowerCall {
                    account,
                    blockNumber,
                },
            )
        }
        ///Creates a new call builder for the [`getRemainingLockTime`] function.
        pub fn getRemainingLockTime(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getRemainingLockTimeCall, N> {
            self.call_builder(&getRemainingLockTimeCall)
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`getVotes`] function.
        pub fn getVotes(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getVotesCall, N> {
            self.call_builder(&getVotesCall { account })
        }
        ///Creates a new call builder for the [`getVotingPower`] function.
        pub fn getVotingPower(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, getVotingPowerCall, N> {
            self.call_builder(&getVotingPowerCall { account })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hourlyBurnUsage`] function.
        pub fn hourlyBurnUsage(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, hourlyBurnUsageCall, N> {
            self.call_builder(&hourlyBurnUsageCall { _0, _1 })
        }
        ///Creates a new call builder for the [`hourlyMintUsage`] function.
        pub fn hourlyMintUsage(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, hourlyMintUsageCall, N> {
            self.call_builder(&hourlyMintUsageCall { _0, _1 })
        }
        ///Creates a new call builder for the [`isBridgeAuthorized`] function.
        pub fn isBridgeAuthorized(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, isBridgeAuthorizedCall, N> {
            self.call_builder(&isBridgeAuthorizedCall { bridge })
        }
        ///Creates a new call builder for the [`maxLockTimestamp`] function.
        pub fn maxLockTimestamp(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, maxLockTimestampCall, N> {
            self.call_builder(&maxLockTimestampCall)
        }
        ///Creates a new call builder for the [`mint`] function.
        pub fn mint(
            &self,
            to: alloy::sol_types::private::Address,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, mintCall, N> {
            self.call_builder(&mintCall { to, amount })
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<&P, nameCall, N> {
            self.call_builder(&nameCall)
        }
        ///Creates a new call builder for the [`nonces`] function.
        pub fn nonces(
            &self,
            owner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, noncesCall, N> {
            self.call_builder(&noncesCall { owner })
        }
        ///Creates a new call builder for the [`numCheckpoints`] function.
        pub fn numCheckpoints(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, numCheckpointsCall, N> {
            self.call_builder(&numCheckpointsCall { account })
        }
        ///Creates a new call builder for the [`permit`] function.
        pub fn permit(
            &self,
            owner: alloy::sol_types::private::Address,
            spender: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            v: u8,
            r: alloy::sol_types::private::FixedBytes<32>,
            s: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<&P, permitCall, N> {
            self.call_builder(
                &permitCall {
                    owner,
                    spender,
                    value,
                    deadline,
                    v,
                    r,
                    s,
                },
            )
        }
        ///Creates a new call builder for the [`removeBridge`] function.
        pub fn removeBridge(
            &self,
            bridge: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, removeBridgeCall, N> {
            self.call_builder(&removeBridgeCall { bridge })
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`setBridgeActive`] function.
        pub fn setBridgeActive(
            &self,
            bridge: alloy::sol_types::private::Address,
            isActive: bool,
        ) -> alloy_contract::SolCallBuilder<&P, setBridgeActiveCall, N> {
            self.call_builder(
                &setBridgeActiveCall {
                    bridge,
                    isActive,
                },
            )
        }
        ///Creates a new call builder for the [`setBridgeLimits`] function.
        pub fn setBridgeLimits(
            &self,
            bridge: alloy::sol_types::private::Address,
            dailyMintLimit: alloy::sol_types::private::primitives::aliases::U256,
            dailyBurnLimit: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setBridgeLimitsCall, N> {
            self.call_builder(
                &setBridgeLimitsCall {
                    bridge,
                    dailyMintLimit,
                    dailyBurnLimit,
                },
            )
        }
        ///Creates a new call builder for the [`setUnlockTimestamp`] function.
        pub fn setUnlockTimestamp(
            &self,
            newUnlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, setUnlockTimestampCall, N> {
            self.call_builder(
                &setUnlockTimestampCall {
                    newUnlockTimestamp,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<&P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<&P, symbolCall, N> {
            self.call_builder(&symbolCall)
        }
        ///Creates a new call builder for the [`totalSupply`] function.
        pub fn totalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, totalSupplyCall, N> {
            self.call_builder(&totalSupplyCall)
        }
        ///Creates a new call builder for the [`transfer`] function.
        pub fn transfer(
            &self,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, transferCall, N> {
            self.call_builder(&transferCall { to, value })
        }
        ///Creates a new call builder for the [`transferFrom`] function.
        pub fn transferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, transferFromCall, N> {
            self.call_builder(
                &transferFromCall {
                    from,
                    to,
                    value,
                },
            )
        }
        ///Creates a new call builder for the [`transfersLocked`] function.
        pub fn transfersLocked(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, transfersLockedCall, N> {
            self.call_builder(&transfersLockedCall)
        }
        ///Creates a new call builder for the [`unlockTimestamp`] function.
        pub fn unlockTimestamp(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, unlockTimestampCall, N> {
            self.call_builder(&unlockTimestampCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SyndicateTokenCrosschainInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<&P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`BridgeActiveStatusChanged`] event.
        pub fn BridgeActiveStatusChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, BridgeActiveStatusChanged, N> {
            self.event_filter::<BridgeActiveStatusChanged>()
        }
        ///Creates a new event filter for the [`BridgeAdded`] event.
        pub fn BridgeAdded_filter(&self) -> alloy_contract::Event<&P, BridgeAdded, N> {
            self.event_filter::<BridgeAdded>()
        }
        ///Creates a new event filter for the [`BridgeLimitsSet`] event.
        pub fn BridgeLimitsSet_filter(
            &self,
        ) -> alloy_contract::Event<&P, BridgeLimitsSet, N> {
            self.event_filter::<BridgeLimitsSet>()
        }
        ///Creates a new event filter for the [`BridgeRemoved`] event.
        pub fn BridgeRemoved_filter(
            &self,
        ) -> alloy_contract::Event<&P, BridgeRemoved, N> {
            self.event_filter::<BridgeRemoved>()
        }
        ///Creates a new event filter for the [`CrosschainBurn`] event.
        pub fn CrosschainBurn_filter(
            &self,
        ) -> alloy_contract::Event<&P, CrosschainBurn, N> {
            self.event_filter::<CrosschainBurn>()
        }
        ///Creates a new event filter for the [`CrosschainMint`] event.
        pub fn CrosschainMint_filter(
            &self,
        ) -> alloy_contract::Event<&P, CrosschainMint, N> {
            self.event_filter::<CrosschainMint>()
        }
        ///Creates a new event filter for the [`DelegateChanged`] event.
        pub fn DelegateChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, DelegateChanged, N> {
            self.event_filter::<DelegateChanged>()
        }
        ///Creates a new event filter for the [`DelegateVotesChanged`] event.
        pub fn DelegateVotesChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, DelegateVotesChanged, N> {
            self.event_filter::<DelegateVotesChanged>()
        }
        ///Creates a new event filter for the [`EIP712DomainChanged`] event.
        pub fn EIP712DomainChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, EIP712DomainChanged, N> {
            self.event_filter::<EIP712DomainChanged>()
        }
        ///Creates a new event filter for the [`EmissionBudgetAllocated`] event.
        pub fn EmissionBudgetAllocated_filter(
            &self,
        ) -> alloy_contract::Event<&P, EmissionBudgetAllocated, N> {
            self.event_filter::<EmissionBudgetAllocated>()
        }
        ///Creates a new event filter for the [`EmissionBudgetConsumed`] event.
        pub fn EmissionBudgetConsumed_filter(
            &self,
        ) -> alloy_contract::Event<&P, EmissionBudgetConsumed, N> {
            self.event_filter::<EmissionBudgetConsumed>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<&P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(&self) -> alloy_contract::Event<&P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(&self) -> alloy_contract::Event<&P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
        ///Creates a new event filter for the [`TokensBurnedByManager`] event.
        pub fn TokensBurnedByManager_filter(
            &self,
        ) -> alloy_contract::Event<&P, TokensBurnedByManager, N> {
            self.event_filter::<TokensBurnedByManager>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<&P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
        ///Creates a new event filter for the [`UnlockTimestampUpdated`] event.
        pub fn UnlockTimestampUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, UnlockTimestampUpdated, N> {
            self.event_filter::<UnlockTimestampUpdated>()
        }
    }
}
