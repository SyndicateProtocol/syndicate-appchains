/**

Generated by the following Solidity interface...
```solidity
interface SyndicateStorage {
    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);

    event EpochRangeProcessed(uint256 indexed startEpochNumber, uint256 indexed endEpochNumber);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    constructor(address admin, address manager, uint256 appChainId_);

    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function MANAGER_ROLE() external view returns (bytes32);
    function appChainId() external view returns (uint256);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function indexFromBlock() external view returns (uint256);
    function renounceRole(bytes32 role, address callerConfirmation) external;
    function revokeRole(bytes32 role, address account) external;
    function save(uint256 epochNumber, bytes32, bytes memory) external;
    function saveForMany(uint256[] memory epochNumbers, bytes32[] memory epochHashes, bytes[] memory batches) external;
    function setIndexFromBlock(uint256 blockNumber) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "manager",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "appChainId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "DEFAULT_ADMIN_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "MANAGER_ROLE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "appChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getRoleAdmin",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "grantRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "hasRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "indexFromBlock",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "callerConfirmation",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "revokeRole",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "save",
    "inputs": [
      {
        "name": "epochNumber",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "saveForMany",
    "inputs": [
      {
        "name": "epochNumbers",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "epochHashes",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "batches",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setIndexFromBlock",
    "inputs": [
      {
        "name": "blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "EpochRangeProcessed",
    "inputs": [
      {
        "name": "startEpochNumber",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "endEpochNumber",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleAdminChanged",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "previousAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "newAdminRole",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleGranted",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "RoleRevoked",
    "inputs": [
      {
        "name": "role",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AccessControlBadConfirmation",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AccessControlUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "neededRole",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SyndicateStorage {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a0604052346100395761001a610014610140565b91610390565b61002261003e565b6110326105f182396080518161052d015261103290f35b610044565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b9061007090610048565b810190811060018060401b0382111761008857604052565b610052565b906100a061009961003e565b9283610066565b565b5f80fd5b60018060a01b031690565b6100ba906100a6565b90565b6100c6816100b1565b036100cd57565b5f80fd5b905051906100de826100bd565b565b90565b6100ec816100e0565b036100f357565b5f80fd5b90505190610104826100e3565b565b909160608284031261013b57610138610121845f85016100d1565b9361012f81602086016100d1565b936040016100f7565b90565b6100a2565b61015e611623803803806101538161008d565b928339810190610106565b909192565b90565b90565b61017d61017861018292610163565b610166565b6100a6565b90565b61018e90610169565b90565b60209181520190565b5f7f41646d696e20616464726573732063616e6e6f74206265203000000000000000910152565b6101ce6019602092610191565b6101d78161019a565b0190565b6101f09060208101905f8183039101526101c1565b90565b156101fa57565b61020261003e565b62461bcd60e51b815280610218600482016101db565b0390fd5b5f7f4d616e6167657220616464726573732063616e6e6f7420626520300000000000910152565b610250601b602092610191565b6102598161021c565b0190565b6102729060208101905f818303910152610243565b90565b1561027c57565b61028461003e565b62461bcd60e51b81528061029a6004820161025d565b0390fd5b6102b26102ad6102b792610163565b610166565b6100e0565b90565b5f7f41707020636861696e2049442063616e6e6f7420626520300000000000000000910152565b6102ee6018602092610191565b6102f7816102ba565b0190565b6103109060208101905f8183039101526102e1565b90565b1561031a57565b61032261003e565b62461bcd60e51b815280610338600482016102fb565b0390fd5b90565b5f1b90565b61035861035361035d92610163565b61033f565b61033c565b90565b6103695f610344565b90565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b9061040c61041a926103bd816103b66103b06103ab5f610185565b6100b1565b916100b1565b14156101f3565b6103e2836103db6103d56103d05f610185565b6100b1565b916100b1565b1415610275565b6103ff856103f86103f25f61029e565b916100e0565b1415610313565b610407610360565b6104df565b5061041561036c565b6104df565b50608052565b5f90565b151590565b6104329061033c565b90565b9061043f90610429565b5f5260205260405f2090565b61045f61045a610464926100a6565b610166565b6100a6565b90565b6104709061044b565b90565b61047c90610467565b90565b9061048990610473565b5f5260205260405f2090565b906104a160ff9161033f565b9181191691161790565b6104b490610424565b90565b90565b906104cf6104ca6104d6926104ab565b6104b7565b8254610495565b9055565b5f0190565b6104e7610420565b506104fc6104f68284906105b6565b15610424565b5f1461058457610523600161051e5f610516818690610435565b01859061047f565b6104ba565b9061052c6105e3565b9061056961056361055d7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610429565b92610473565b92610473565b9261057261003e565b8061057c816104da565b0390a4600190565b50505f90565b5f1c90565b60ff1690565b6105a16105a69161058a565b61058f565b90565b6105b39054610595565b90565b6105dc915f6105d16105d7936105ca610420565b5082610435565b0161047f565b6105a9565b90565b5f90565b6105eb6105df565b50339056fe60806040526004361015610013575b61081d565b61001d5f356100ec565b806301ffc9a7146100e7578063048420a7146100e25780630ffd1380146100dd578063248a9ca3146100d85780632f2ff15d146100d357806336568abe146100ce57806383470923146100c957806391d14854146100c4578063a217fddf146100bf578063b1d06045146100ba578063cce5d2f6146100b5578063d547741f146100b05763ec87621c0361000e576107e8565b610785565b610750565b6106dd565b610617565b6105a6565b610571565b6104e8565b6104b4565b610418565b61037f565b610301565b610178565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61011981610104565b0361012057565b5f80fd5b9050359061013182610110565b565b9060208282031261014c57610149915f01610124565b90565b6100fc565b151590565b61015f90610151565b9052565b9190610176905f60208501940190610156565b565b346101a8576101a461019361018e366004610133565b610825565b61019b6100f2565b91829182610163565b0390f35b6100f8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101f35781359167ffffffffffffffff83116101ee5760200192602083028401116101e957565b6101b5565b6101b1565b6101ad565b909182601f830112156102325781359167ffffffffffffffff831161022d57602001926020830284011161022857565b6101b5565b6101b1565b6101ad565b909182601f830112156102715781359167ffffffffffffffff831161026c57602001926020830284011161026757565b6101b5565b6101b1565b6101ad565b906060828203126102f7575f82013567ffffffffffffffff81116102f257816102a09184016101b9565b929093602082013567ffffffffffffffff81116102ed57836102c39184016101f8565b929093604082013567ffffffffffffffff81116102e8576102e49201610237565b9091565b610100565b610100565b610100565b6100fc565b5f0190565b3461033657610320610314366004610276565b94939093929192610af1565b6103286100f2565b80610332816102fc565b0390f35b6100f8565b90565b6103478161033b565b0361034e57565b5f80fd5b9050359061035f8261033e565b565b9060208282031261037a57610377915f01610352565b90565b6100fc565b346103ad57610397610392366004610361565b610b62565b61039f6100f2565b806103a9816102fc565b0390f35b6100f8565b90565b6103be816103b2565b036103c557565b5f80fd5b905035906103d6826103b5565b565b906020828203126103f1576103ee915f016103c9565b90565b6100fc565b6103ff906103b2565b9052565b9190610416905f602085019401906103f6565b565b346104485761044461043361042e3660046103d8565b610bbc565b61043b6100f2565b91829182610403565b0390f35b6100f8565b60018060a01b031690565b6104619061044d565b90565b61046d81610458565b0361047457565b5f80fd5b9050359061048582610464565b565b91906040838203126104af57806104a36104ac925f86016103c9565b93602001610478565b90565b6100fc565b346104e3576104cd6104c7366004610487565b90610c07565b6104d56100f2565b806104df816102fc565b0390f35b6100f8565b34610517576105016104fb366004610487565b90610c13565b6105096100f2565b80610513816102fc565b0390f35b6100f8565b5f91031261052657565b6100fc565b7f000000000000000000000000000000000000000000000000000000000000000090565b6105589061033b565b9052565b919061056f905f6020850194019061054f565b565b346105a15761058136600461051c565b61059d61058c61052b565b6105946100f2565b9182918261055c565b0390f35b6100f8565b346105d7576105d36105c26105bc366004610487565b90610cd3565b6105ca6100f2565b91829182610163565b0390f35b6100f8565b90565b5f1b90565b6105f86105f36105fd926105dc565b6105df565b6103b2565b90565b6106095f6105e4565b90565b610614610600565b90565b346106475761062736600461051c565b61064361063261060c565b61063a6100f2565b91829182610403565b0390f35b6100f8565b909182601f830112156106865781359167ffffffffffffffff831161068157602001926001830284011161067c57565b6101b5565b6101b1565b6101ad565b916060838303126106d8576106a2825f8501610352565b926106b083602083016103c9565b92604082013567ffffffffffffffff81116106d3576106cf920161064c565b9091565b610100565b6100fc565b3461070f576106f96106f036600461068b565b92919091610d6a565b6107016100f2565b8061070b816102fc565b0390f35b6100f8565b1c90565b90565b61072b9060086107309302610714565b610718565b90565b9061073e915461071b565b90565b61074d60015f90610733565b90565b346107805761076036600461051c565b61077c61076b610741565b6107736100f2565b9182918261055c565b0390f35b6100f8565b346107b45761079e610798366004610487565b90610da2565b6107a66100f2565b806107b0816102fc565b0390f35b6100f8565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6107e56107b9565b90565b34610818576107f836600461051c565b6108146108036107dd565b61080b6100f2565b91829182610403565b0390f35b6100f8565b5f80fd5b5f90565b61082d610821565b5080610848610842637965db0b60e01b610104565b91610104565b14908115610855575b5090565b61085f9150610dae565b5f610851565b90610883959493929161087e6108796107b9565b610dd4565b6109e5565b565b5090565b5090565b5090565b60209181520190565b5f7f4172726179206c656e67746873206d75737420626520657175616c0000000000910152565b6108ce601b602092610891565b6108d78161089a565b0190565b6108f09060208101905f8183039101526108c1565b90565b156108fa57565b6109026100f2565b62461bcd60e51b815280610918600482016108db565b0390fd5b634e487b7160e01b5f52603260045260245ffd5b9190811015610940576020020190565b61091c565b90565b61095c610957610961926105dc565b610945565b61033b565b90565b3561096e8161033e565b90565b90565b61098861098361098d92610971565b610945565b61033b565b90565b634e487b7160e01b5f52601160045260245ffd5b6109b36109b99193929361033b565b9261033b565b82039182116109c457565b610990565b6109dd6109d86109e29261033b565b610945565b61033b565b90565b9491610a7494610a2c9293610a6f956109ff898790610885565b610a1b610a15610a10878590610889565b61033b565b9161033b565b149384610abf575b505050506108f3565b610a37848290610885565b610a69610a56610a518785610a4b5f610948565b91610930565b610964565b959291610a636001610974565b906109a4565b91610930565b610964565b610aa7610aa17ffb3f942c4d8771ac5a362f58bd3804e0759ebd52810723884a7cdb531d83b6f3936109c9565b916109c9565b91610ab06100f2565b80610aba816102fc565b0390a3565b610ae793945091610ad6610adc92610ae194610889565b9461088d565b61033b565b9161033b565b145f808080610a23565b90610aff9594939291610865565b565b610b1a90610b15610b106107b9565b610dd4565b610b55565b565b90610b285f19916105df565b9181191691161790565b90565b90610b4a610b45610b51926109c9565b610b32565b8254610b1c565b9055565b610b60906001610b35565b565b610b6b90610b01565b565b5f90565b610b7a906103b2565b90565b90610b8790610b71565b5f5260205260405f2090565b5f1c90565b90565b610ba7610bac91610b93565b610b98565b90565b610bb99054610b9b565b90565b6001610bd4610bda92610bcd610b6d565b505f610b7d565b01610baf565b90565b90610bf891610bf3610bee82610bbc565b610dd4565b610bfa565b565b90610c0491610e2d565b50565b90610c1191610bdd565b565b9080610c2e610c28610c23610edc565b610458565b91610458565b03610c3f57610c3c91610ee9565b50565b610c476100f2565b63334bd91960e11b815280610c5e600482016102fc565b0390fd5b610c76610c71610c7b9261044d565b610945565b61044d565b90565b610c8790610c62565b90565b610c9390610c7e565b90565b90610ca090610c8a565b5f5260205260405f2090565b60ff1690565b610cbe610cc391610b93565b610cac565b90565b610cd09054610cb2565b90565b610cf9915f610cee610cf493610ce7610821565b5082610b7d565b01610c96565b610cc6565b90565b90610d18939291610d13610d0e6107b9565b610dd4565b610d1a565b565b9250505080610d52610d4c7ffb3f942c4d8771ac5a362f58bd3804e0759ebd52810723884a7cdb531d83b6f3936109c9565b916109c9565b91610d5b6100f2565b80610d65816102fc565b0390a3565b90610d76939291610cfc565b565b90610d9391610d8e610d8982610bbc565b610dd4565b610d95565b565b90610d9f91610ee9565b50565b90610dac91610d78565b565b610db6610821565b50610dd0610dca6301ffc9a760e01b610104565b91610104565b1490565b610de690610de0610edc565b90610fba565b565b90610df460ff916105df565b9181191691161790565b610e0790610151565b90565b90565b90610e22610e1d610e2992610dfe565b610e0a565b8254610de8565b9055565b610e35610821565b50610e4a610e44828490610cd3565b15610151565b5f14610ed257610e716001610e6c5f610e64818690610b7d565b018590610c96565b610e0d565b90610e7a610edc565b90610eb7610eb1610eab7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610b71565b92610c8a565b92610c8a565b92610ec06100f2565b80610eca816102fc565b0390a4600190565b50505f90565b5f90565b610ee4610ed8565b503390565b610ef1610821565b50610efd818390610cd3565b5f14610f8457610f235f610f1e5f610f16818690610b7d565b018590610c96565b610e0d565b90610f2c610edc565b90610f69610f63610f5d7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610b71565b92610c8a565b92610c8a565b92610f726100f2565b80610f7c816102fc565b0390a4600190565b50505f90565b610f9390610458565b9052565b916020610fb8929493610fb160408201965f830190610f8a565b01906103f6565b565b90610fcf610fc9838390610cd3565b15610151565b610fd7575050565b610ff8610fe26100f2565b92839263e2517d3f60e01b845260048401610f97565b0390fdfea2646970667358221220309e75f035699a1572e07db6c0f6761ff46a6d9fb3b1db3eb71a2ecd7110d8ea64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R4a\09Wa\0\x1Aa\0\x14a\x01@V[\x91a\x03\x90V[a\0\"a\0>V[a\x102a\x05\xF1\x829`\x80Q\x81a\x05-\x01Ra\x102\x90\xF3[a\0DV[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0p\x90a\0HV[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0\x88W`@RV[a\0RV[\x90a\0\xA0a\0\x99a\0>V[\x92\x83a\0fV[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xBA\x90a\0\xA6V[\x90V[a\0\xC6\x81a\0\xB1V[\x03a\0\xCDWV[_\x80\xFD[\x90PQ\x90a\0\xDE\x82a\0\xBDV[V[\x90V[a\0\xEC\x81a\0\xE0V[\x03a\0\xF3WV[_\x80\xFD[\x90PQ\x90a\x01\x04\x82a\0\xE3V[V[\x90\x91``\x82\x84\x03\x12a\x01;Wa\x018a\x01!\x84_\x85\x01a\0\xD1V[\x93a\x01/\x81` \x86\x01a\0\xD1V[\x93`@\x01a\0\xF7V[\x90V[a\0\xA2V[a\x01^a\x16#\x808\x03\x80a\x01S\x81a\0\x8DV[\x92\x839\x81\x01\x90a\x01\x06V[\x90\x91\x92V[\x90V[\x90V[a\x01}a\x01xa\x01\x82\x92a\x01cV[a\x01fV[a\0\xA6V[\x90V[a\x01\x8E\x90a\x01iV[\x90V[` \x91\x81R\x01\x90V[_\x7FAdmin address cannot be 0\0\0\0\0\0\0\0\x91\x01RV[a\x01\xCE`\x19` \x92a\x01\x91V[a\x01\xD7\x81a\x01\x9AV[\x01\x90V[a\x01\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x01\xC1V[\x90V[\x15a\x01\xFAWV[a\x02\x02a\0>V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02\x18`\x04\x82\x01a\x01\xDBV[\x03\x90\xFD[_\x7FManager address cannot be 0\0\0\0\0\0\x91\x01RV[a\x02P`\x1B` \x92a\x01\x91V[a\x02Y\x81a\x02\x1CV[\x01\x90V[a\x02r\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02CV[\x90V[\x15a\x02|WV[a\x02\x84a\0>V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x02\x9A`\x04\x82\x01a\x02]V[\x03\x90\xFD[a\x02\xB2a\x02\xADa\x02\xB7\x92a\x01cV[a\x01fV[a\0\xE0V[\x90V[_\x7FApp chain ID cannot be 0\0\0\0\0\0\0\0\0\x91\x01RV[a\x02\xEE`\x18` \x92a\x01\x91V[a\x02\xF7\x81a\x02\xBAV[\x01\x90V[a\x03\x10\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x02\xE1V[\x90V[\x15a\x03\x1AWV[a\x03\"a\0>V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x038`\x04\x82\x01a\x02\xFBV[\x03\x90\xFD[\x90V[_\x1B\x90V[a\x03Xa\x03Sa\x03]\x92a\x01cV[a\x03?V[a\x03<V[\x90V[a\x03i_a\x03DV[\x90V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[\x90a\x04\x0Ca\x04\x1A\x92a\x03\xBD\x81a\x03\xB6a\x03\xB0a\x03\xAB_a\x01\x85V[a\0\xB1V[\x91a\0\xB1V[\x14\x15a\x01\xF3V[a\x03\xE2\x83a\x03\xDBa\x03\xD5a\x03\xD0_a\x01\x85V[a\0\xB1V[\x91a\0\xB1V[\x14\x15a\x02uV[a\x03\xFF\x85a\x03\xF8a\x03\xF2_a\x02\x9EV[\x91a\0\xE0V[\x14\x15a\x03\x13V[a\x04\x07a\x03`V[a\x04\xDFV[Pa\x04\x15a\x03lV[a\x04\xDFV[P`\x80RV[_\x90V[\x15\x15\x90V[a\x042\x90a\x03<V[\x90V[\x90a\x04?\x90a\x04)V[_R` R`@_ \x90V[a\x04_a\x04Za\x04d\x92a\0\xA6V[a\x01fV[a\0\xA6V[\x90V[a\x04p\x90a\x04KV[\x90V[a\x04|\x90a\x04gV[\x90V[\x90a\x04\x89\x90a\x04sV[_R` R`@_ \x90V[\x90a\x04\xA1`\xFF\x91a\x03?V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x04\xB4\x90a\x04$V[\x90V[\x90V[\x90a\x04\xCFa\x04\xCAa\x04\xD6\x92a\x04\xABV[a\x04\xB7V[\x82Ta\x04\x95V[\x90UV[_\x01\x90V[a\x04\xE7a\x04 V[Pa\x04\xFCa\x04\xF6\x82\x84\x90a\x05\xB6V[\x15a\x04$V[_\x14a\x05\x84Wa\x05#`\x01a\x05\x1E_a\x05\x16\x81\x86\x90a\x045V[\x01\x85\x90a\x04\x7FV[a\x04\xBAV[\x90a\x05,a\x05\xE3V[\x90a\x05ia\x05ca\x05]\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x04)V[\x92a\x04sV[\x92a\x04sV[\x92a\x05ra\0>V[\x80a\x05|\x81a\x04\xDAV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x1C\x90V[`\xFF\x16\x90V[a\x05\xA1a\x05\xA6\x91a\x05\x8AV[a\x05\x8FV[\x90V[a\x05\xB3\x90Ta\x05\x95V[\x90V[a\x05\xDC\x91_a\x05\xD1a\x05\xD7\x93a\x05\xCAa\x04 V[P\x82a\x045V[\x01a\x04\x7FV[a\x05\xA9V[\x90V[_\x90V[a\x05\xEBa\x05\xDFV[P3\x90V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x08\x1DV[a\0\x1D_5a\0\xECV[\x80c\x01\xFF\xC9\xA7\x14a\0\xE7W\x80c\x04\x84 \xA7\x14a\0\xE2W\x80c\x0F\xFD\x13\x80\x14a\0\xDDW\x80c$\x8A\x9C\xA3\x14a\0\xD8W\x80c//\xF1]\x14a\0\xD3W\x80c6V\x8A\xBE\x14a\0\xCEW\x80c\x83G\t#\x14a\0\xC9W\x80c\x91\xD1HT\x14a\0\xC4W\x80c\xA2\x17\xFD\xDF\x14a\0\xBFW\x80c\xB1\xD0`E\x14a\0\xBAW\x80c\xCC\xE5\xD2\xF6\x14a\0\xB5W\x80c\xD5Gt\x1F\x14a\0\xB0Wc\xEC\x87b\x1C\x03a\0\x0EWa\x07\xE8V[a\x07\x85V[a\x07PV[a\x06\xDDV[a\x06\x17V[a\x05\xA6V[a\x05qV[a\x04\xE8V[a\x04\xB4V[a\x04\x18V[a\x03\x7FV[a\x03\x01V[a\x01xV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x19\x81a\x01\x04V[\x03a\x01 WV[_\x80\xFD[\x90P5\x90a\x011\x82a\x01\x10V[V[\x90` \x82\x82\x03\x12a\x01LWa\x01I\x91_\x01a\x01$V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x01_\x90a\x01QV[\x90RV[\x91\x90a\x01v\x90_` \x85\x01\x94\x01\x90a\x01VV[V[4a\x01\xA8Wa\x01\xA4a\x01\x93a\x01\x8E6`\x04a\x013V[a\x08%V[a\x01\x9Ba\0\xF2V[\x91\x82\x91\x82a\x01cV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xF3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xEEW` \x01\x92` \x83\x02\x84\x01\x11a\x01\xE9WV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x022W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02-W` \x01\x92` \x83\x02\x84\x01\x11a\x02(WV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02qW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02lW` \x01\x92` \x83\x02\x84\x01\x11a\x02gWV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x90``\x82\x82\x03\x12a\x02\xF7W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xF2W\x81a\x02\xA0\x91\x84\x01a\x01\xB9V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xEDW\x83a\x02\xC3\x91\x84\x01a\x01\xF8V[\x92\x90\x93`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE8Wa\x02\xE4\x92\x01a\x027V[\x90\x91V[a\x01\0V[a\x01\0V[a\x01\0V[a\0\xFCV[_\x01\x90V[4a\x036Wa\x03 a\x03\x146`\x04a\x02vV[\x94\x93\x90\x93\x92\x91\x92a\n\xF1V[a\x03(a\0\xF2V[\x80a\x032\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x03G\x81a\x03;V[\x03a\x03NWV[_\x80\xFD[\x90P5\x90a\x03_\x82a\x03>V[V[\x90` \x82\x82\x03\x12a\x03zWa\x03w\x91_\x01a\x03RV[\x90V[a\0\xFCV[4a\x03\xADWa\x03\x97a\x03\x926`\x04a\x03aV[a\x0BbV[a\x03\x9Fa\0\xF2V[\x80a\x03\xA9\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x03\xBE\x81a\x03\xB2V[\x03a\x03\xC5WV[_\x80\xFD[\x90P5\x90a\x03\xD6\x82a\x03\xB5V[V[\x90` \x82\x82\x03\x12a\x03\xF1Wa\x03\xEE\x91_\x01a\x03\xC9V[\x90V[a\0\xFCV[a\x03\xFF\x90a\x03\xB2V[\x90RV[\x91\x90a\x04\x16\x90_` \x85\x01\x94\x01\x90a\x03\xF6V[V[4a\x04HWa\x04Da\x043a\x04.6`\x04a\x03\xD8V[a\x0B\xBCV[a\x04;a\0\xF2V[\x91\x82\x91\x82a\x04\x03V[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04a\x90a\x04MV[\x90V[a\x04m\x81a\x04XV[\x03a\x04tWV[_\x80\xFD[\x90P5\x90a\x04\x85\x82a\x04dV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xAFW\x80a\x04\xA3a\x04\xAC\x92_\x86\x01a\x03\xC9V[\x93` \x01a\x04xV[\x90V[a\0\xFCV[4a\x04\xE3Wa\x04\xCDa\x04\xC76`\x04a\x04\x87V[\x90a\x0C\x07V[a\x04\xD5a\0\xF2V[\x80a\x04\xDF\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[4a\x05\x17Wa\x05\x01a\x04\xFB6`\x04a\x04\x87V[\x90a\x0C\x13V[a\x05\ta\0\xF2V[\x80a\x05\x13\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x05&WV[a\0\xFCV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x05X\x90a\x03;V[\x90RV[\x91\x90a\x05o\x90_` \x85\x01\x94\x01\x90a\x05OV[V[4a\x05\xA1Wa\x05\x816`\x04a\x05\x1CV[a\x05\x9Da\x05\x8Ca\x05+V[a\x05\x94a\0\xF2V[\x91\x82\x91\x82a\x05\\V[\x03\x90\xF3[a\0\xF8V[4a\x05\xD7Wa\x05\xD3a\x05\xC2a\x05\xBC6`\x04a\x04\x87V[\x90a\x0C\xD3V[a\x05\xCAa\0\xF2V[\x91\x82\x91\x82a\x01cV[\x03\x90\xF3[a\0\xF8V[\x90V[_\x1B\x90V[a\x05\xF8a\x05\xF3a\x05\xFD\x92a\x05\xDCV[a\x05\xDFV[a\x03\xB2V[\x90V[a\x06\t_a\x05\xE4V[\x90V[a\x06\x14a\x06\0V[\x90V[4a\x06GWa\x06'6`\x04a\x05\x1CV[a\x06Ca\x062a\x06\x0CV[a\x06:a\0\xF2V[\x91\x82\x91\x82a\x04\x03V[\x03\x90\xF3[a\0\xF8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x86W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\x81W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x06|WV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x91``\x83\x83\x03\x12a\x06\xD8Wa\x06\xA2\x82_\x85\x01a\x03RV[\x92a\x06\xB0\x83` \x83\x01a\x03\xC9V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xD3Wa\x06\xCF\x92\x01a\x06LV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x07\x0FWa\x06\xF9a\x06\xF06`\x04a\x06\x8BV[\x92\x91\x90\x91a\rjV[a\x07\x01a\0\xF2V[\x80a\x07\x0B\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x1C\x90V[\x90V[a\x07+\x90`\x08a\x070\x93\x02a\x07\x14V[a\x07\x18V[\x90V[\x90a\x07>\x91Ta\x07\x1BV[\x90V[a\x07M`\x01_\x90a\x073V[\x90V[4a\x07\x80Wa\x07`6`\x04a\x05\x1CV[a\x07|a\x07ka\x07AV[a\x07sa\0\xF2V[\x91\x82\x91\x82a\x05\\V[\x03\x90\xF3[a\0\xF8V[4a\x07\xB4Wa\x07\x9Ea\x07\x986`\x04a\x04\x87V[\x90a\r\xA2V[a\x07\xA6a\0\xF2V[\x80a\x07\xB0\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x07\xE5a\x07\xB9V[\x90V[4a\x08\x18Wa\x07\xF86`\x04a\x05\x1CV[a\x08\x14a\x08\x03a\x07\xDDV[a\x08\x0Ba\0\xF2V[\x91\x82\x91\x82a\x04\x03V[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x90V[a\x08-a\x08!V[P\x80a\x08Ha\x08Bcye\xDB\x0B`\xE0\x1Ba\x01\x04V[\x91a\x01\x04V[\x14\x90\x81\x15a\x08UW[P\x90V[a\x08_\x91Pa\r\xAEV[_a\x08QV[\x90a\x08\x83\x95\x94\x93\x92\x91a\x08~a\x08ya\x07\xB9V[a\r\xD4V[a\t\xE5V[V[P\x90V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[_\x7FArray lengths must be equal\0\0\0\0\0\x91\x01RV[a\x08\xCE`\x1B` \x92a\x08\x91V[a\x08\xD7\x81a\x08\x9AV[\x01\x90V[a\x08\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xC1V[\x90V[\x15a\x08\xFAWV[a\t\x02a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\x18`\x04\x82\x01a\x08\xDBV[\x03\x90\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x91\x90\x81\x10\x15a\t@W` \x02\x01\x90V[a\t\x1CV[\x90V[a\t\\a\tWa\ta\x92a\x05\xDCV[a\tEV[a\x03;V[\x90V[5a\tn\x81a\x03>V[\x90V[\x90V[a\t\x88a\t\x83a\t\x8D\x92a\tqV[a\tEV[a\x03;V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\xB3a\t\xB9\x91\x93\x92\x93a\x03;V[\x92a\x03;V[\x82\x03\x91\x82\x11a\t\xC4WV[a\t\x90V[a\t\xDDa\t\xD8a\t\xE2\x92a\x03;V[a\tEV[a\x03;V[\x90V[\x94\x91a\nt\x94a\n,\x92\x93a\no\x95a\t\xFF\x89\x87\x90a\x08\x85V[a\n\x1Ba\n\x15a\n\x10\x87\x85\x90a\x08\x89V[a\x03;V[\x91a\x03;V[\x14\x93\x84a\n\xBFW[PPPPa\x08\xF3V[a\n7\x84\x82\x90a\x08\x85V[a\nia\nVa\nQ\x87\x85a\nK_a\tHV[\x91a\t0V[a\tdV[\x95\x92\x91a\nc`\x01a\ttV[\x90a\t\xA4V[\x91a\t0V[a\tdV[a\n\xA7a\n\xA1\x7F\xFB?\x94,M\x87q\xACZ6/X\xBD8\x04\xE0u\x9E\xBDR\x81\x07#\x88J|\xDBS\x1D\x83\xB6\xF3\x93a\t\xC9V[\x91a\t\xC9V[\x91a\n\xB0a\0\xF2V[\x80a\n\xBA\x81a\x02\xFCV[\x03\x90\xA3V[a\n\xE7\x93\x94P\x91a\n\xD6a\n\xDC\x92a\n\xE1\x94a\x08\x89V[\x94a\x08\x8DV[a\x03;V[\x91a\x03;V[\x14_\x80\x80\x80a\n#V[\x90a\n\xFF\x95\x94\x93\x92\x91a\x08eV[V[a\x0B\x1A\x90a\x0B\x15a\x0B\x10a\x07\xB9V[a\r\xD4V[a\x0BUV[V[\x90a\x0B(_\x19\x91a\x05\xDFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0BJa\x0BEa\x0BQ\x92a\t\xC9V[a\x0B2V[\x82Ta\x0B\x1CV[\x90UV[a\x0B`\x90`\x01a\x0B5V[V[a\x0Bk\x90a\x0B\x01V[V[_\x90V[a\x0Bz\x90a\x03\xB2V[\x90V[\x90a\x0B\x87\x90a\x0BqV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x0B\xA7a\x0B\xAC\x91a\x0B\x93V[a\x0B\x98V[\x90V[a\x0B\xB9\x90Ta\x0B\x9BV[\x90V[`\x01a\x0B\xD4a\x0B\xDA\x92a\x0B\xCDa\x0BmV[P_a\x0B}V[\x01a\x0B\xAFV[\x90V[\x90a\x0B\xF8\x91a\x0B\xF3a\x0B\xEE\x82a\x0B\xBCV[a\r\xD4V[a\x0B\xFAV[V[\x90a\x0C\x04\x91a\x0E-V[PV[\x90a\x0C\x11\x91a\x0B\xDDV[V[\x90\x80a\x0C.a\x0C(a\x0C#a\x0E\xDCV[a\x04XV[\x91a\x04XV[\x03a\x0C?Wa\x0C<\x91a\x0E\xE9V[PV[a\x0CGa\0\xF2V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0C^`\x04\x82\x01a\x02\xFCV[\x03\x90\xFD[a\x0Cva\x0Cqa\x0C{\x92a\x04MV[a\tEV[a\x04MV[\x90V[a\x0C\x87\x90a\x0CbV[\x90V[a\x0C\x93\x90a\x0C~V[\x90V[\x90a\x0C\xA0\x90a\x0C\x8AV[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x0C\xBEa\x0C\xC3\x91a\x0B\x93V[a\x0C\xACV[\x90V[a\x0C\xD0\x90Ta\x0C\xB2V[\x90V[a\x0C\xF9\x91_a\x0C\xEEa\x0C\xF4\x93a\x0C\xE7a\x08!V[P\x82a\x0B}V[\x01a\x0C\x96V[a\x0C\xC6V[\x90V[\x90a\r\x18\x93\x92\x91a\r\x13a\r\x0Ea\x07\xB9V[a\r\xD4V[a\r\x1AV[V[\x92PPP\x80a\rRa\rL\x7F\xFB?\x94,M\x87q\xACZ6/X\xBD8\x04\xE0u\x9E\xBDR\x81\x07#\x88J|\xDBS\x1D\x83\xB6\xF3\x93a\t\xC9V[\x91a\t\xC9V[\x91a\r[a\0\xF2V[\x80a\re\x81a\x02\xFCV[\x03\x90\xA3V[\x90a\rv\x93\x92\x91a\x0C\xFCV[V[\x90a\r\x93\x91a\r\x8Ea\r\x89\x82a\x0B\xBCV[a\r\xD4V[a\r\x95V[V[\x90a\r\x9F\x91a\x0E\xE9V[PV[\x90a\r\xAC\x91a\rxV[V[a\r\xB6a\x08!V[Pa\r\xD0a\r\xCAc\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x04V[\x91a\x01\x04V[\x14\x90V[a\r\xE6\x90a\r\xE0a\x0E\xDCV[\x90a\x0F\xBAV[V[\x90a\r\xF4`\xFF\x91a\x05\xDFV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x07\x90a\x01QV[\x90V[\x90V[\x90a\x0E\"a\x0E\x1Da\x0E)\x92a\r\xFEV[a\x0E\nV[\x82Ta\r\xE8V[\x90UV[a\x0E5a\x08!V[Pa\x0EJa\x0ED\x82\x84\x90a\x0C\xD3V[\x15a\x01QV[_\x14a\x0E\xD2Wa\x0Eq`\x01a\x0El_a\x0Ed\x81\x86\x90a\x0B}V[\x01\x85\x90a\x0C\x96V[a\x0E\rV[\x90a\x0Eza\x0E\xDCV[\x90a\x0E\xB7a\x0E\xB1a\x0E\xAB\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x0BqV[\x92a\x0C\x8AV[\x92a\x0C\x8AV[\x92a\x0E\xC0a\0\xF2V[\x80a\x0E\xCA\x81a\x02\xFCV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x90V[a\x0E\xE4a\x0E\xD8V[P3\x90V[a\x0E\xF1a\x08!V[Pa\x0E\xFD\x81\x83\x90a\x0C\xD3V[_\x14a\x0F\x84Wa\x0F#_a\x0F\x1E_a\x0F\x16\x81\x86\x90a\x0B}V[\x01\x85\x90a\x0C\x96V[a\x0E\rV[\x90a\x0F,a\x0E\xDCV[\x90a\x0Fia\x0Fca\x0F]\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x0BqV[\x92a\x0C\x8AV[\x92a\x0C\x8AV[\x92a\x0Fra\0\xF2V[\x80a\x0F|\x81a\x02\xFCV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0F\x93\x90a\x04XV[\x90RV[\x91` a\x0F\xB8\x92\x94\x93a\x0F\xB1`@\x82\x01\x96_\x83\x01\x90a\x0F\x8AV[\x01\x90a\x03\xF6V[V[\x90a\x0F\xCFa\x0F\xC9\x83\x83\x90a\x0C\xD3V[\x15a\x01QV[a\x0F\xD7WPPV[a\x0F\xF8a\x0F\xE2a\0\xF2V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0F\x97V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 0\x9Eu\xF05i\x9A\x15r\xE0}\xB6\xC0\xF6v\x1F\xF4jm\x9F\xB3\xB1\xDB>\xB7\x1A.\xCDq\x10\xD8\xEAdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b61081d565b61001d5f356100ec565b806301ffc9a7146100e7578063048420a7146100e25780630ffd1380146100dd578063248a9ca3146100d85780632f2ff15d146100d357806336568abe146100ce57806383470923146100c957806391d14854146100c4578063a217fddf146100bf578063b1d06045146100ba578063cce5d2f6146100b5578063d547741f146100b05763ec87621c0361000e576107e8565b610785565b610750565b6106dd565b610617565b6105a6565b610571565b6104e8565b6104b4565b610418565b61037f565b610301565b610178565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b63ffffffff60e01b1690565b61011981610104565b0361012057565b5f80fd5b9050359061013182610110565b565b9060208282031261014c57610149915f01610124565b90565b6100fc565b151590565b61015f90610151565b9052565b9190610176905f60208501940190610156565b565b346101a8576101a461019361018e366004610133565b610825565b61019b6100f2565b91829182610163565b0390f35b6100f8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156101f35781359167ffffffffffffffff83116101ee5760200192602083028401116101e957565b6101b5565b6101b1565b6101ad565b909182601f830112156102325781359167ffffffffffffffff831161022d57602001926020830284011161022857565b6101b5565b6101b1565b6101ad565b909182601f830112156102715781359167ffffffffffffffff831161026c57602001926020830284011161026757565b6101b5565b6101b1565b6101ad565b906060828203126102f7575f82013567ffffffffffffffff81116102f257816102a09184016101b9565b929093602082013567ffffffffffffffff81116102ed57836102c39184016101f8565b929093604082013567ffffffffffffffff81116102e8576102e49201610237565b9091565b610100565b610100565b610100565b6100fc565b5f0190565b3461033657610320610314366004610276565b94939093929192610af1565b6103286100f2565b80610332816102fc565b0390f35b6100f8565b90565b6103478161033b565b0361034e57565b5f80fd5b9050359061035f8261033e565b565b9060208282031261037a57610377915f01610352565b90565b6100fc565b346103ad57610397610392366004610361565b610b62565b61039f6100f2565b806103a9816102fc565b0390f35b6100f8565b90565b6103be816103b2565b036103c557565b5f80fd5b905035906103d6826103b5565b565b906020828203126103f1576103ee915f016103c9565b90565b6100fc565b6103ff906103b2565b9052565b9190610416905f602085019401906103f6565b565b346104485761044461043361042e3660046103d8565b610bbc565b61043b6100f2565b91829182610403565b0390f35b6100f8565b60018060a01b031690565b6104619061044d565b90565b61046d81610458565b0361047457565b5f80fd5b9050359061048582610464565b565b91906040838203126104af57806104a36104ac925f86016103c9565b93602001610478565b90565b6100fc565b346104e3576104cd6104c7366004610487565b90610c07565b6104d56100f2565b806104df816102fc565b0390f35b6100f8565b34610517576105016104fb366004610487565b90610c13565b6105096100f2565b80610513816102fc565b0390f35b6100f8565b5f91031261052657565b6100fc565b7f000000000000000000000000000000000000000000000000000000000000000090565b6105589061033b565b9052565b919061056f905f6020850194019061054f565b565b346105a15761058136600461051c565b61059d61058c61052b565b6105946100f2565b9182918261055c565b0390f35b6100f8565b346105d7576105d36105c26105bc366004610487565b90610cd3565b6105ca6100f2565b91829182610163565b0390f35b6100f8565b90565b5f1b90565b6105f86105f36105fd926105dc565b6105df565b6103b2565b90565b6106095f6105e4565b90565b610614610600565b90565b346106475761062736600461051c565b61064361063261060c565b61063a6100f2565b91829182610403565b0390f35b6100f8565b909182601f830112156106865781359167ffffffffffffffff831161068157602001926001830284011161067c57565b6101b5565b6101b1565b6101ad565b916060838303126106d8576106a2825f8501610352565b926106b083602083016103c9565b92604082013567ffffffffffffffff81116106d3576106cf920161064c565b9091565b610100565b6100fc565b3461070f576106f96106f036600461068b565b92919091610d6a565b6107016100f2565b8061070b816102fc565b0390f35b6100f8565b1c90565b90565b61072b9060086107309302610714565b610718565b90565b9061073e915461071b565b90565b61074d60015f90610733565b90565b346107805761076036600461051c565b61077c61076b610741565b6107736100f2565b9182918261055c565b0390f35b6100f8565b346107b45761079e610798366004610487565b90610da2565b6107a66100f2565b806107b0816102fc565b0390f35b6100f8565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0890565b6107e56107b9565b90565b34610818576107f836600461051c565b6108146108036107dd565b61080b6100f2565b91829182610403565b0390f35b6100f8565b5f80fd5b5f90565b61082d610821565b5080610848610842637965db0b60e01b610104565b91610104565b14908115610855575b5090565b61085f9150610dae565b5f610851565b90610883959493929161087e6108796107b9565b610dd4565b6109e5565b565b5090565b5090565b5090565b60209181520190565b5f7f4172726179206c656e67746873206d75737420626520657175616c0000000000910152565b6108ce601b602092610891565b6108d78161089a565b0190565b6108f09060208101905f8183039101526108c1565b90565b156108fa57565b6109026100f2565b62461bcd60e51b815280610918600482016108db565b0390fd5b634e487b7160e01b5f52603260045260245ffd5b9190811015610940576020020190565b61091c565b90565b61095c610957610961926105dc565b610945565b61033b565b90565b3561096e8161033e565b90565b90565b61098861098361098d92610971565b610945565b61033b565b90565b634e487b7160e01b5f52601160045260245ffd5b6109b36109b99193929361033b565b9261033b565b82039182116109c457565b610990565b6109dd6109d86109e29261033b565b610945565b61033b565b90565b9491610a7494610a2c9293610a6f956109ff898790610885565b610a1b610a15610a10878590610889565b61033b565b9161033b565b149384610abf575b505050506108f3565b610a37848290610885565b610a69610a56610a518785610a4b5f610948565b91610930565b610964565b959291610a636001610974565b906109a4565b91610930565b610964565b610aa7610aa17ffb3f942c4d8771ac5a362f58bd3804e0759ebd52810723884a7cdb531d83b6f3936109c9565b916109c9565b91610ab06100f2565b80610aba816102fc565b0390a3565b610ae793945091610ad6610adc92610ae194610889565b9461088d565b61033b565b9161033b565b145f808080610a23565b90610aff9594939291610865565b565b610b1a90610b15610b106107b9565b610dd4565b610b55565b565b90610b285f19916105df565b9181191691161790565b90565b90610b4a610b45610b51926109c9565b610b32565b8254610b1c565b9055565b610b60906001610b35565b565b610b6b90610b01565b565b5f90565b610b7a906103b2565b90565b90610b8790610b71565b5f5260205260405f2090565b5f1c90565b90565b610ba7610bac91610b93565b610b98565b90565b610bb99054610b9b565b90565b6001610bd4610bda92610bcd610b6d565b505f610b7d565b01610baf565b90565b90610bf891610bf3610bee82610bbc565b610dd4565b610bfa565b565b90610c0491610e2d565b50565b90610c1191610bdd565b565b9080610c2e610c28610c23610edc565b610458565b91610458565b03610c3f57610c3c91610ee9565b50565b610c476100f2565b63334bd91960e11b815280610c5e600482016102fc565b0390fd5b610c76610c71610c7b9261044d565b610945565b61044d565b90565b610c8790610c62565b90565b610c9390610c7e565b90565b90610ca090610c8a565b5f5260205260405f2090565b60ff1690565b610cbe610cc391610b93565b610cac565b90565b610cd09054610cb2565b90565b610cf9915f610cee610cf493610ce7610821565b5082610b7d565b01610c96565b610cc6565b90565b90610d18939291610d13610d0e6107b9565b610dd4565b610d1a565b565b9250505080610d52610d4c7ffb3f942c4d8771ac5a362f58bd3804e0759ebd52810723884a7cdb531d83b6f3936109c9565b916109c9565b91610d5b6100f2565b80610d65816102fc565b0390a3565b90610d76939291610cfc565b565b90610d9391610d8e610d8982610bbc565b610dd4565b610d95565b565b90610d9f91610ee9565b50565b90610dac91610d78565b565b610db6610821565b50610dd0610dca6301ffc9a760e01b610104565b91610104565b1490565b610de690610de0610edc565b90610fba565b565b90610df460ff916105df565b9181191691161790565b610e0790610151565b90565b90565b90610e22610e1d610e2992610dfe565b610e0a565b8254610de8565b9055565b610e35610821565b50610e4a610e44828490610cd3565b15610151565b5f14610ed257610e716001610e6c5f610e64818690610b7d565b018590610c96565b610e0d565b90610e7a610edc565b90610eb7610eb1610eab7f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610b71565b92610c8a565b92610c8a565b92610ec06100f2565b80610eca816102fc565b0390a4600190565b50505f90565b5f90565b610ee4610ed8565b503390565b610ef1610821565b50610efd818390610cd3565b5f14610f8457610f235f610f1e5f610f16818690610b7d565b018590610c96565b610e0d565b90610f2c610edc565b90610f69610f63610f5d7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610b71565b92610c8a565b92610c8a565b92610f726100f2565b80610f7c816102fc565b0390a4600190565b50505f90565b610f9390610458565b9052565b916020610fb8929493610fb160408201965f830190610f8a565b01906103f6565b565b90610fcf610fc9838390610cd3565b15610151565b610fd7575050565b610ff8610fe26100f2565b92839263e2517d3f60e01b845260048401610f97565b0390fdfea2646970667358221220309e75f035699a1572e07db6c0f6761ff46a6d9fb3b1db3eb71a2ecd7110d8ea64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x08\x1DV[a\0\x1D_5a\0\xECV[\x80c\x01\xFF\xC9\xA7\x14a\0\xE7W\x80c\x04\x84 \xA7\x14a\0\xE2W\x80c\x0F\xFD\x13\x80\x14a\0\xDDW\x80c$\x8A\x9C\xA3\x14a\0\xD8W\x80c//\xF1]\x14a\0\xD3W\x80c6V\x8A\xBE\x14a\0\xCEW\x80c\x83G\t#\x14a\0\xC9W\x80c\x91\xD1HT\x14a\0\xC4W\x80c\xA2\x17\xFD\xDF\x14a\0\xBFW\x80c\xB1\xD0`E\x14a\0\xBAW\x80c\xCC\xE5\xD2\xF6\x14a\0\xB5W\x80c\xD5Gt\x1F\x14a\0\xB0Wc\xEC\x87b\x1C\x03a\0\x0EWa\x07\xE8V[a\x07\x85V[a\x07PV[a\x06\xDDV[a\x06\x17V[a\x05\xA6V[a\x05qV[a\x04\xE8V[a\x04\xB4V[a\x04\x18V[a\x03\x7FV[a\x03\x01V[a\x01xV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[c\xFF\xFF\xFF\xFF`\xE0\x1B\x16\x90V[a\x01\x19\x81a\x01\x04V[\x03a\x01 WV[_\x80\xFD[\x90P5\x90a\x011\x82a\x01\x10V[V[\x90` \x82\x82\x03\x12a\x01LWa\x01I\x91_\x01a\x01$V[\x90V[a\0\xFCV[\x15\x15\x90V[a\x01_\x90a\x01QV[\x90RV[\x91\x90a\x01v\x90_` \x85\x01\x94\x01\x90a\x01VV[V[4a\x01\xA8Wa\x01\xA4a\x01\x93a\x01\x8E6`\x04a\x013V[a\x08%V[a\x01\x9Ba\0\xF2V[\x91\x82\x91\x82a\x01cV[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\xF3W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\xEEW` \x01\x92` \x83\x02\x84\x01\x11a\x01\xE9WV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x022W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02-W` \x01\x92` \x83\x02\x84\x01\x11a\x02(WV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x02qW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x02lW` \x01\x92` \x83\x02\x84\x01\x11a\x02gWV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x90``\x82\x82\x03\x12a\x02\xF7W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xF2W\x81a\x02\xA0\x91\x84\x01a\x01\xB9V[\x92\x90\x93` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xEDW\x83a\x02\xC3\x91\x84\x01a\x01\xF8V[\x92\x90\x93`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x02\xE8Wa\x02\xE4\x92\x01a\x027V[\x90\x91V[a\x01\0V[a\x01\0V[a\x01\0V[a\0\xFCV[_\x01\x90V[4a\x036Wa\x03 a\x03\x146`\x04a\x02vV[\x94\x93\x90\x93\x92\x91\x92a\n\xF1V[a\x03(a\0\xF2V[\x80a\x032\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x03G\x81a\x03;V[\x03a\x03NWV[_\x80\xFD[\x90P5\x90a\x03_\x82a\x03>V[V[\x90` \x82\x82\x03\x12a\x03zWa\x03w\x91_\x01a\x03RV[\x90V[a\0\xFCV[4a\x03\xADWa\x03\x97a\x03\x926`\x04a\x03aV[a\x0BbV[a\x03\x9Fa\0\xF2V[\x80a\x03\xA9\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x90V[a\x03\xBE\x81a\x03\xB2V[\x03a\x03\xC5WV[_\x80\xFD[\x90P5\x90a\x03\xD6\x82a\x03\xB5V[V[\x90` \x82\x82\x03\x12a\x03\xF1Wa\x03\xEE\x91_\x01a\x03\xC9V[\x90V[a\0\xFCV[a\x03\xFF\x90a\x03\xB2V[\x90RV[\x91\x90a\x04\x16\x90_` \x85\x01\x94\x01\x90a\x03\xF6V[V[4a\x04HWa\x04Da\x043a\x04.6`\x04a\x03\xD8V[a\x0B\xBCV[a\x04;a\0\xF2V[\x91\x82\x91\x82a\x04\x03V[\x03\x90\xF3[a\0\xF8V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x04a\x90a\x04MV[\x90V[a\x04m\x81a\x04XV[\x03a\x04tWV[_\x80\xFD[\x90P5\x90a\x04\x85\x82a\x04dV[V[\x91\x90`@\x83\x82\x03\x12a\x04\xAFW\x80a\x04\xA3a\x04\xAC\x92_\x86\x01a\x03\xC9V[\x93` \x01a\x04xV[\x90V[a\0\xFCV[4a\x04\xE3Wa\x04\xCDa\x04\xC76`\x04a\x04\x87V[\x90a\x0C\x07V[a\x04\xD5a\0\xF2V[\x80a\x04\xDF\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[4a\x05\x17Wa\x05\x01a\x04\xFB6`\x04a\x04\x87V[\x90a\x0C\x13V[a\x05\ta\0\xF2V[\x80a\x05\x13\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[_\x91\x03\x12a\x05&WV[a\0\xFCV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90V[a\x05X\x90a\x03;V[\x90RV[\x91\x90a\x05o\x90_` \x85\x01\x94\x01\x90a\x05OV[V[4a\x05\xA1Wa\x05\x816`\x04a\x05\x1CV[a\x05\x9Da\x05\x8Ca\x05+V[a\x05\x94a\0\xF2V[\x91\x82\x91\x82a\x05\\V[\x03\x90\xF3[a\0\xF8V[4a\x05\xD7Wa\x05\xD3a\x05\xC2a\x05\xBC6`\x04a\x04\x87V[\x90a\x0C\xD3V[a\x05\xCAa\0\xF2V[\x91\x82\x91\x82a\x01cV[\x03\x90\xF3[a\0\xF8V[\x90V[_\x1B\x90V[a\x05\xF8a\x05\xF3a\x05\xFD\x92a\x05\xDCV[a\x05\xDFV[a\x03\xB2V[\x90V[a\x06\t_a\x05\xE4V[\x90V[a\x06\x14a\x06\0V[\x90V[4a\x06GWa\x06'6`\x04a\x05\x1CV[a\x06Ca\x062a\x06\x0CV[a\x06:a\0\xF2V[\x91\x82\x91\x82a\x04\x03V[\x03\x90\xF3[a\0\xF8V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x06\x86W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x06\x81W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x06|WV[a\x01\xB5V[a\x01\xB1V[a\x01\xADV[\x91``\x83\x83\x03\x12a\x06\xD8Wa\x06\xA2\x82_\x85\x01a\x03RV[\x92a\x06\xB0\x83` \x83\x01a\x03\xC9V[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x06\xD3Wa\x06\xCF\x92\x01a\x06LV[\x90\x91V[a\x01\0V[a\0\xFCV[4a\x07\x0FWa\x06\xF9a\x06\xF06`\x04a\x06\x8BV[\x92\x91\x90\x91a\rjV[a\x07\x01a\0\xF2V[\x80a\x07\x0B\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x1C\x90V[\x90V[a\x07+\x90`\x08a\x070\x93\x02a\x07\x14V[a\x07\x18V[\x90V[\x90a\x07>\x91Ta\x07\x1BV[\x90V[a\x07M`\x01_\x90a\x073V[\x90V[4a\x07\x80Wa\x07`6`\x04a\x05\x1CV[a\x07|a\x07ka\x07AV[a\x07sa\0\xF2V[\x91\x82\x91\x82a\x05\\V[\x03\x90\xF3[a\0\xF8V[4a\x07\xB4Wa\x07\x9Ea\x07\x986`\x04a\x04\x87V[\x90a\r\xA2V[a\x07\xA6a\0\xF2V[\x80a\x07\xB0\x81a\x02\xFCV[\x03\x90\xF3[a\0\xF8V[\x7F$\x1E\xCF\x16\xD7\x9D\x0F\x8D\xBF\xB9,\xBC\x07\xFE\x17\x84\x04%\x97l\xF0f\x7F\x02/\xE9\x87|\xAA\x83\x1B\x08\x90V[a\x07\xE5a\x07\xB9V[\x90V[4a\x08\x18Wa\x07\xF86`\x04a\x05\x1CV[a\x08\x14a\x08\x03a\x07\xDDV[a\x08\x0Ba\0\xF2V[\x91\x82\x91\x82a\x04\x03V[\x03\x90\xF3[a\0\xF8V[_\x80\xFD[_\x90V[a\x08-a\x08!V[P\x80a\x08Ha\x08Bcye\xDB\x0B`\xE0\x1Ba\x01\x04V[\x91a\x01\x04V[\x14\x90\x81\x15a\x08UW[P\x90V[a\x08_\x91Pa\r\xAEV[_a\x08QV[\x90a\x08\x83\x95\x94\x93\x92\x91a\x08~a\x08ya\x07\xB9V[a\r\xD4V[a\t\xE5V[V[P\x90V[P\x90V[P\x90V[` \x91\x81R\x01\x90V[_\x7FArray lengths must be equal\0\0\0\0\0\x91\x01RV[a\x08\xCE`\x1B` \x92a\x08\x91V[a\x08\xD7\x81a\x08\x9AV[\x01\x90V[a\x08\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x08\xC1V[\x90V[\x15a\x08\xFAWV[a\t\x02a\0\xF2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\t\x18`\x04\x82\x01a\x08\xDBV[\x03\x90\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x91\x90\x81\x10\x15a\t@W` \x02\x01\x90V[a\t\x1CV[\x90V[a\t\\a\tWa\ta\x92a\x05\xDCV[a\tEV[a\x03;V[\x90V[5a\tn\x81a\x03>V[\x90V[\x90V[a\t\x88a\t\x83a\t\x8D\x92a\tqV[a\tEV[a\x03;V[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\t\xB3a\t\xB9\x91\x93\x92\x93a\x03;V[\x92a\x03;V[\x82\x03\x91\x82\x11a\t\xC4WV[a\t\x90V[a\t\xDDa\t\xD8a\t\xE2\x92a\x03;V[a\tEV[a\x03;V[\x90V[\x94\x91a\nt\x94a\n,\x92\x93a\no\x95a\t\xFF\x89\x87\x90a\x08\x85V[a\n\x1Ba\n\x15a\n\x10\x87\x85\x90a\x08\x89V[a\x03;V[\x91a\x03;V[\x14\x93\x84a\n\xBFW[PPPPa\x08\xF3V[a\n7\x84\x82\x90a\x08\x85V[a\nia\nVa\nQ\x87\x85a\nK_a\tHV[\x91a\t0V[a\tdV[\x95\x92\x91a\nc`\x01a\ttV[\x90a\t\xA4V[\x91a\t0V[a\tdV[a\n\xA7a\n\xA1\x7F\xFB?\x94,M\x87q\xACZ6/X\xBD8\x04\xE0u\x9E\xBDR\x81\x07#\x88J|\xDBS\x1D\x83\xB6\xF3\x93a\t\xC9V[\x91a\t\xC9V[\x91a\n\xB0a\0\xF2V[\x80a\n\xBA\x81a\x02\xFCV[\x03\x90\xA3V[a\n\xE7\x93\x94P\x91a\n\xD6a\n\xDC\x92a\n\xE1\x94a\x08\x89V[\x94a\x08\x8DV[a\x03;V[\x91a\x03;V[\x14_\x80\x80\x80a\n#V[\x90a\n\xFF\x95\x94\x93\x92\x91a\x08eV[V[a\x0B\x1A\x90a\x0B\x15a\x0B\x10a\x07\xB9V[a\r\xD4V[a\x0BUV[V[\x90a\x0B(_\x19\x91a\x05\xDFV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x0BJa\x0BEa\x0BQ\x92a\t\xC9V[a\x0B2V[\x82Ta\x0B\x1CV[\x90UV[a\x0B`\x90`\x01a\x0B5V[V[a\x0Bk\x90a\x0B\x01V[V[_\x90V[a\x0Bz\x90a\x03\xB2V[\x90V[\x90a\x0B\x87\x90a\x0BqV[_R` R`@_ \x90V[_\x1C\x90V[\x90V[a\x0B\xA7a\x0B\xAC\x91a\x0B\x93V[a\x0B\x98V[\x90V[a\x0B\xB9\x90Ta\x0B\x9BV[\x90V[`\x01a\x0B\xD4a\x0B\xDA\x92a\x0B\xCDa\x0BmV[P_a\x0B}V[\x01a\x0B\xAFV[\x90V[\x90a\x0B\xF8\x91a\x0B\xF3a\x0B\xEE\x82a\x0B\xBCV[a\r\xD4V[a\x0B\xFAV[V[\x90a\x0C\x04\x91a\x0E-V[PV[\x90a\x0C\x11\x91a\x0B\xDDV[V[\x90\x80a\x0C.a\x0C(a\x0C#a\x0E\xDCV[a\x04XV[\x91a\x04XV[\x03a\x0C?Wa\x0C<\x91a\x0E\xE9V[PV[a\x0CGa\0\xF2V[c3K\xD9\x19`\xE1\x1B\x81R\x80a\x0C^`\x04\x82\x01a\x02\xFCV[\x03\x90\xFD[a\x0Cva\x0Cqa\x0C{\x92a\x04MV[a\tEV[a\x04MV[\x90V[a\x0C\x87\x90a\x0CbV[\x90V[a\x0C\x93\x90a\x0C~V[\x90V[\x90a\x0C\xA0\x90a\x0C\x8AV[_R` R`@_ \x90V[`\xFF\x16\x90V[a\x0C\xBEa\x0C\xC3\x91a\x0B\x93V[a\x0C\xACV[\x90V[a\x0C\xD0\x90Ta\x0C\xB2V[\x90V[a\x0C\xF9\x91_a\x0C\xEEa\x0C\xF4\x93a\x0C\xE7a\x08!V[P\x82a\x0B}V[\x01a\x0C\x96V[a\x0C\xC6V[\x90V[\x90a\r\x18\x93\x92\x91a\r\x13a\r\x0Ea\x07\xB9V[a\r\xD4V[a\r\x1AV[V[\x92PPP\x80a\rRa\rL\x7F\xFB?\x94,M\x87q\xACZ6/X\xBD8\x04\xE0u\x9E\xBDR\x81\x07#\x88J|\xDBS\x1D\x83\xB6\xF3\x93a\t\xC9V[\x91a\t\xC9V[\x91a\r[a\0\xF2V[\x80a\re\x81a\x02\xFCV[\x03\x90\xA3V[\x90a\rv\x93\x92\x91a\x0C\xFCV[V[\x90a\r\x93\x91a\r\x8Ea\r\x89\x82a\x0B\xBCV[a\r\xD4V[a\r\x95V[V[\x90a\r\x9F\x91a\x0E\xE9V[PV[\x90a\r\xAC\x91a\rxV[V[a\r\xB6a\x08!V[Pa\r\xD0a\r\xCAc\x01\xFF\xC9\xA7`\xE0\x1Ba\x01\x04V[\x91a\x01\x04V[\x14\x90V[a\r\xE6\x90a\r\xE0a\x0E\xDCV[\x90a\x0F\xBAV[V[\x90a\r\xF4`\xFF\x91a\x05\xDFV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x0E\x07\x90a\x01QV[\x90V[\x90V[\x90a\x0E\"a\x0E\x1Da\x0E)\x92a\r\xFEV[a\x0E\nV[\x82Ta\r\xE8V[\x90UV[a\x0E5a\x08!V[Pa\x0EJa\x0ED\x82\x84\x90a\x0C\xD3V[\x15a\x01QV[_\x14a\x0E\xD2Wa\x0Eq`\x01a\x0El_a\x0Ed\x81\x86\x90a\x0B}V[\x01\x85\x90a\x0C\x96V[a\x0E\rV[\x90a\x0Eza\x0E\xDCV[\x90a\x0E\xB7a\x0E\xB1a\x0E\xAB\x7F/\x87\x88\x11~~\xFF\x1D\x82\xE9&\xECyI\x01\xD1|x\x02JP'\t@0E@\xA73eo\r\x95a\x0BqV[\x92a\x0C\x8AV[\x92a\x0C\x8AV[\x92a\x0E\xC0a\0\xF2V[\x80a\x0E\xCA\x81a\x02\xFCV[\x03\x90\xA4`\x01\x90V[PP_\x90V[_\x90V[a\x0E\xE4a\x0E\xD8V[P3\x90V[a\x0E\xF1a\x08!V[Pa\x0E\xFD\x81\x83\x90a\x0C\xD3V[_\x14a\x0F\x84Wa\x0F#_a\x0F\x1E_a\x0F\x16\x81\x86\x90a\x0B}V[\x01\x85\x90a\x0C\x96V[a\x0E\rV[\x90a\x0F,a\x0E\xDCV[\x90a\x0Fia\x0Fca\x0F]\x7F\xF69\x1F\\2\xD9\xC6\x9D*G\xEAg\x0BD)t\xB595\xD1\xED\xC7\xFDd\xEB!\xE0G\xA89\x17\x1B\x95a\x0BqV[\x92a\x0C\x8AV[\x92a\x0C\x8AV[\x92a\x0Fra\0\xF2V[\x80a\x0F|\x81a\x02\xFCV[\x03\x90\xA4`\x01\x90V[PP_\x90V[a\x0F\x93\x90a\x04XV[\x90RV[\x91` a\x0F\xB8\x92\x94\x93a\x0F\xB1`@\x82\x01\x96_\x83\x01\x90a\x0F\x8AV[\x01\x90a\x03\xF6V[V[\x90a\x0F\xCFa\x0F\xC9\x83\x83\x90a\x0C\xD3V[\x15a\x01QV[a\x0F\xD7WPPV[a\x0F\xF8a\x0F\xE2a\0\xF2V[\x92\x83\x92c\xE2Q}?`\xE0\x1B\x84R`\x04\x84\x01a\x0F\x97V[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 0\x9Eu\xF05i\x9A\x15r\xE0}\xB6\xC0\xF6v\x1F\xF4jm\x9F\xB3\xB1\xDB>\xB7\x1A.\xCDq\x10\xD8\xEAdsolcC\0\x08\x19\x003",
    );
    /**Custom error with signature `AccessControlBadConfirmation()` and selector `0x6697b232`.
```solidity
error AccessControlBadConfirmation();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlBadConfirmation {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlBadConfirmation>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlBadConfirmation) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlBadConfirmation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlBadConfirmation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlBadConfirmation()";
            const SELECTOR: [u8; 4] = [102u8, 151u8, 178u8, 50u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `AccessControlUnauthorizedAccount(address,bytes32)` and selector `0xe2517d3f`.
```solidity
error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AccessControlUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub neededRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AccessControlUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: AccessControlUnauthorizedAccount) -> Self {
                (value.account, value.neededRole)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AccessControlUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    account: tuple.0,
                    neededRole: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AccessControlUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AccessControlUnauthorizedAccount(address,bytes32)";
            const SELECTOR: [u8; 4] = [226u8, 81u8, 125u8, 63u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.neededRole),
                )
            }
        }
    };
    /**Event with signature `EpochRangeProcessed(uint256,uint256)` and selector `0xfb3f942c4d8771ac5a362f58bd3804e0759ebd52810723884a7cdb531d83b6f3`.
```solidity
event EpochRangeProcessed(uint256 indexed startEpochNumber, uint256 indexed endEpochNumber);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct EpochRangeProcessed {
        #[allow(missing_docs)]
        pub startEpochNumber: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub endEpochNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for EpochRangeProcessed {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "EpochRangeProcessed(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                251u8,
                63u8,
                148u8,
                44u8,
                77u8,
                135u8,
                113u8,
                172u8,
                90u8,
                54u8,
                47u8,
                88u8,
                189u8,
                56u8,
                4u8,
                224u8,
                117u8,
                158u8,
                189u8,
                82u8,
                129u8,
                7u8,
                35u8,
                136u8,
                74u8,
                124u8,
                219u8,
                83u8,
                29u8,
                131u8,
                182u8,
                243u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    startEpochNumber: topics.1,
                    endEpochNumber: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.startEpochNumber.clone(),
                    self.endEpochNumber.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.startEpochNumber);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.endEpochNumber);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for EpochRangeProcessed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&EpochRangeProcessed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &EpochRangeProcessed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleAdminChanged(bytes32,bytes32,bytes32)` and selector `0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff`.
```solidity
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleAdminChanged {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub previousAdminRole: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub newAdminRole: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleAdminChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RoleAdminChanged(bytes32,bytes32,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    previousAdminRole: topics.2,
                    newAdminRole: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.previousAdminRole.clone(),
                    self.newAdminRole.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.previousAdminRole);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.newAdminRole);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleAdminChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleAdminChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleAdminChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleGranted(bytes32,address,address)` and selector `0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d`.
```solidity
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleGranted {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleGranted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleGranted(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleGranted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleGranted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleGranted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `RoleRevoked(bytes32,address,address)` and selector `0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b`.
```solidity
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RoleRevoked {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RoleRevoked {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "RoleRevoked(bytes32,address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    role: topics.1,
                    account: topics.2,
                    sender: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.role.clone(),
                    self.account.clone(),
                    self.sender.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.role);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.sender,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RoleRevoked {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RoleRevoked> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RoleRevoked) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin, address manager, uint256 appChainId_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub manager: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub appChainId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin, value.manager, value.appChainId_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        admin: tuple.0,
                        manager: tuple.1,
                        appChainId_: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.manager,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.appChainId_),
                )
            }
        }
    };
    /**Function with signature `DEFAULT_ADMIN_ROLE()` and selector `0xa217fddf`.
```solidity
function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLECall {}
    ///Container type for the return parameters of the [`DEFAULT_ADMIN_ROLE()`](DEFAULT_ADMIN_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEFAULT_ADMIN_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLECall>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DEFAULT_ADMIN_ROLEReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: DEFAULT_ADMIN_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for DEFAULT_ADMIN_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DEFAULT_ADMIN_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DEFAULT_ADMIN_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DEFAULT_ADMIN_ROLE()";
            const SELECTOR: [u8; 4] = [162u8, 23u8, 253u8, 223u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `MANAGER_ROLE()` and selector `0xec87621c`.
```solidity
function MANAGER_ROLE() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLECall {}
    ///Container type for the return parameters of the [`MANAGER_ROLE()`](MANAGER_ROLECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MANAGER_ROLEReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLECall> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<MANAGER_ROLEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: MANAGER_ROLEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for MANAGER_ROLEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for MANAGER_ROLECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = MANAGER_ROLEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MANAGER_ROLE()";
            const SELECTOR: [u8; 4] = [236u8, 135u8, 98u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `appChainId()` and selector `0x83470923`.
```solidity
function appChainId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdCall {}
    ///Container type for the return parameters of the [`appChainId()`](appChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct appChainIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<appChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: appChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for appChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for appChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = appChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "appChainId()";
            const SELECTOR: [u8; 4] = [131u8, 71u8, 9u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getRoleAdmin(bytes32)` and selector `0x248a9ca3`.
```solidity
function getRoleAdmin(bytes32 role) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getRoleAdmin(bytes32)`](getRoleAdminCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getRoleAdminReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminCall> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminCall) -> Self {
                    (value.role,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { role: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getRoleAdminReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getRoleAdminReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getRoleAdminReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getRoleAdminCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getRoleAdminReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getRoleAdmin(bytes32)";
            const SELECTOR: [u8; 4] = [36u8, 138u8, 156u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `grantRole(bytes32,address)` and selector `0x2f2ff15d`.
```solidity
function grantRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`grantRole(bytes32,address)`](grantRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct grantRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<grantRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: grantRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for grantRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for grantRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = grantRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "grantRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [47u8, 47u8, 241u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `hasRole(bytes32,address)` and selector `0x91d14854`.
```solidity
function hasRole(bytes32 role, address account) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`hasRole(bytes32,address)`](hasRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hasRoleReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hasRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hasRoleReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hasRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hasRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hasRoleReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hasRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [145u8, 209u8, 72u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `indexFromBlock()` and selector `0xcce5d2f6`.
```solidity
function indexFromBlock() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct indexFromBlockCall {}
    ///Container type for the return parameters of the [`indexFromBlock()`](indexFromBlockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct indexFromBlockReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<indexFromBlockCall> for UnderlyingRustTuple<'_> {
                fn from(value: indexFromBlockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for indexFromBlockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<indexFromBlockReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: indexFromBlockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for indexFromBlockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for indexFromBlockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = indexFromBlockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "indexFromBlock()";
            const SELECTOR: [u8; 4] = [204u8, 229u8, 210u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceRole(bytes32,address)` and selector `0x36568abe`.
```solidity
function renounceRole(bytes32 role, address callerConfirmation) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub callerConfirmation: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`renounceRole(bytes32,address)`](renounceRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleCall) -> Self {
                    (value.role, value.callerConfirmation)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        callerConfirmation: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: renounceRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for renounceRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [54u8, 86u8, 138u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callerConfirmation,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `revokeRole(bytes32,address)` and selector `0xd547741f`.
```solidity
function revokeRole(bytes32 role, address account) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleCall {
        #[allow(missing_docs)]
        pub role: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`revokeRole(bytes32,address)`](revokeRoleCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct revokeRoleReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleCall> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleCall) -> Self {
                    (value.role, value.account)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        role: tuple.0,
                        account: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<revokeRoleReturn> for UnderlyingRustTuple<'_> {
                fn from(value: revokeRoleReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for revokeRoleReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for revokeRoleCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = revokeRoleReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "revokeRole(bytes32,address)";
            const SELECTOR: [u8; 4] = [213u8, 71u8, 116u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.role),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `save(uint256,bytes32,bytes)` and selector `0xb1d06045`.
```solidity
function save(uint256 epochNumber, bytes32, bytes memory) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct saveCall {
        #[allow(missing_docs)]
        pub epochNumber: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub _2: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`save(uint256,bytes32,bytes)`](saveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct saveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<saveCall> for UnderlyingRustTuple<'_> {
                fn from(value: saveCall) -> Self {
                    (value.epochNumber, value._1, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for saveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochNumber: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<saveReturn> for UnderlyingRustTuple<'_> {
                fn from(value: saveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for saveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for saveCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = saveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "save(uint256,bytes32,bytes)";
            const SELECTOR: [u8; 4] = [177u8, 208u8, 96u8, 69u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochNumber),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `saveForMany(uint256[],bytes32[],bytes[])` and selector `0x048420a7`.
```solidity
function saveForMany(uint256[] memory epochNumbers, bytes32[] memory epochHashes, bytes[] memory batches) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct saveForManyCall {
        #[allow(missing_docs)]
        pub epochNumbers: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub epochHashes: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub batches: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`saveForMany(uint256[],bytes32[],bytes[])`](saveForManyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct saveForManyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<saveForManyCall> for UnderlyingRustTuple<'_> {
                fn from(value: saveForManyCall) -> Self {
                    (value.epochNumbers, value.epochHashes, value.batches)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for saveForManyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        epochNumbers: tuple.0,
                        epochHashes: tuple.1,
                        batches: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<saveForManyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: saveForManyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for saveForManyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for saveForManyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = saveForManyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "saveForMany(uint256[],bytes32[],bytes[])";
            const SELECTOR: [u8; 4] = [4u8, 132u8, 32u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochNumbers),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.epochHashes),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.batches),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setIndexFromBlock(uint256)` and selector `0x0ffd1380`.
```solidity
function setIndexFromBlock(uint256 blockNumber) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setIndexFromBlockCall {
        #[allow(missing_docs)]
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setIndexFromBlock(uint256)`](setIndexFromBlockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setIndexFromBlockReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setIndexFromBlockCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setIndexFromBlockCall) -> Self {
                    (value.blockNumber,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setIndexFromBlockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blockNumber: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setIndexFromBlockReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setIndexFromBlockReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setIndexFromBlockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setIndexFromBlockCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setIndexFromBlockReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setIndexFromBlock(uint256)";
            const SELECTOR: [u8; 4] = [15u8, 253u8, 19u8, 128u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        #[allow(missing_docs)]
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SyndicateStorage`](self) function calls.
    pub enum SyndicateStorageCalls {
        #[allow(missing_docs)]
        DEFAULT_ADMIN_ROLE(DEFAULT_ADMIN_ROLECall),
        #[allow(missing_docs)]
        MANAGER_ROLE(MANAGER_ROLECall),
        #[allow(missing_docs)]
        appChainId(appChainIdCall),
        #[allow(missing_docs)]
        getRoleAdmin(getRoleAdminCall),
        #[allow(missing_docs)]
        grantRole(grantRoleCall),
        #[allow(missing_docs)]
        hasRole(hasRoleCall),
        #[allow(missing_docs)]
        indexFromBlock(indexFromBlockCall),
        #[allow(missing_docs)]
        renounceRole(renounceRoleCall),
        #[allow(missing_docs)]
        revokeRole(revokeRoleCall),
        #[allow(missing_docs)]
        save(saveCall),
        #[allow(missing_docs)]
        saveForMany(saveForManyCall),
        #[allow(missing_docs)]
        setIndexFromBlock(setIndexFromBlockCall),
        #[allow(missing_docs)]
        supportsInterface(supportsInterfaceCall),
    }
    #[automatically_derived]
    impl SyndicateStorageCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [4u8, 132u8, 32u8, 167u8],
            [15u8, 253u8, 19u8, 128u8],
            [36u8, 138u8, 156u8, 163u8],
            [47u8, 47u8, 241u8, 93u8],
            [54u8, 86u8, 138u8, 190u8],
            [131u8, 71u8, 9u8, 35u8],
            [145u8, 209u8, 72u8, 84u8],
            [162u8, 23u8, 253u8, 223u8],
            [177u8, 208u8, 96u8, 69u8],
            [204u8, 229u8, 210u8, 246u8],
            [213u8, 71u8, 116u8, 31u8],
            [236u8, 135u8, 98u8, 28u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateStorageCalls {
        const NAME: &'static str = "SyndicateStorageCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 13usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::DEFAULT_ADMIN_ROLE(_) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::MANAGER_ROLE(_) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::appChainId(_) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getRoleAdmin(_) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::grantRole(_) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::hasRole(_) => <hasRoleCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::indexFromBlock(_) => {
                    <indexFromBlockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceRole(_) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::revokeRole(_) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::save(_) => <saveCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::saveForMany(_) => {
                    <saveForManyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setIndexFromBlock(_) => {
                    <setIndexFromBlockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateStorageCalls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn saveForMany(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <saveForManyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::saveForMany)
                    }
                    saveForMany
                },
                {
                    fn setIndexFromBlock(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <setIndexFromBlockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::setIndexFromBlock)
                    }
                    setIndexFromBlock
                },
                {
                    fn getRoleAdmin(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <getRoleAdminCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::getRoleAdmin)
                    }
                    getRoleAdmin
                },
                {
                    fn grantRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <grantRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::grantRole)
                    }
                    grantRole
                },
                {
                    fn renounceRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <renounceRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::renounceRole)
                    }
                    renounceRole
                },
                {
                    fn appChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <appChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::appChainId)
                    }
                    appChainId
                },
                {
                    fn hasRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <hasRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::hasRole)
                    }
                    hasRole
                },
                {
                    fn DEFAULT_ADMIN_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::DEFAULT_ADMIN_ROLE)
                    }
                    DEFAULT_ADMIN_ROLE
                },
                {
                    fn save(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <saveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::save)
                    }
                    save
                },
                {
                    fn indexFromBlock(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <indexFromBlockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::indexFromBlock)
                    }
                    indexFromBlock
                },
                {
                    fn revokeRole(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <revokeRoleCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::revokeRole)
                    }
                    revokeRole
                },
                {
                    fn MANAGER_ROLE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageCalls> {
                        <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageCalls::MANAGER_ROLE)
                    }
                    MANAGER_ROLE
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::indexFromBlock(inner) => {
                    <indexFromBlockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::save(inner) => {
                    <saveCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::saveForMany(inner) => {
                    <saveForManyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setIndexFromBlock(inner) => {
                    <setIndexFromBlockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::DEFAULT_ADMIN_ROLE(inner) => {
                    <DEFAULT_ADMIN_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MANAGER_ROLE(inner) => {
                    <MANAGER_ROLECall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::appChainId(inner) => {
                    <appChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getRoleAdmin(inner) => {
                    <getRoleAdminCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::grantRole(inner) => {
                    <grantRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::hasRole(inner) => {
                    <hasRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::indexFromBlock(inner) => {
                    <indexFromBlockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceRole(inner) => {
                    <renounceRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::revokeRole(inner) => {
                    <revokeRoleCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::save(inner) => {
                    <saveCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::saveForMany(inner) => {
                    <saveForManyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setIndexFromBlock(inner) => {
                    <setIndexFromBlockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateStorage`](self) custom errors.
    pub enum SyndicateStorageErrors {
        #[allow(missing_docs)]
        AccessControlBadConfirmation(AccessControlBadConfirmation),
        #[allow(missing_docs)]
        AccessControlUnauthorizedAccount(AccessControlUnauthorizedAccount),
    }
    #[automatically_derived]
    impl SyndicateStorageErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [102u8, 151u8, 178u8, 50u8],
            [226u8, 81u8, 125u8, 63u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SyndicateStorageErrors {
        const NAME: &'static str = "SyndicateStorageErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AccessControlBadConfirmation(_) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AccessControlUnauthorizedAccount(_) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SyndicateStorageErrors>] = &[
                {
                    fn AccessControlBadConfirmation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageErrors> {
                        <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SyndicateStorageErrors::AccessControlBadConfirmation)
                    }
                    AccessControlBadConfirmation
                },
                {
                    fn AccessControlUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SyndicateStorageErrors> {
                        <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SyndicateStorageErrors::AccessControlUnauthorizedAccount,
                            )
                    }
                    AccessControlUnauthorizedAccount
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AccessControlBadConfirmation(inner) => {
                    <AccessControlBadConfirmation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AccessControlUnauthorizedAccount(inner) => {
                    <AccessControlUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SyndicateStorage`](self) events.
    pub enum SyndicateStorageEvents {
        #[allow(missing_docs)]
        EpochRangeProcessed(EpochRangeProcessed),
        #[allow(missing_docs)]
        RoleAdminChanged(RoleAdminChanged),
        #[allow(missing_docs)]
        RoleGranted(RoleGranted),
        #[allow(missing_docs)]
        RoleRevoked(RoleRevoked),
    }
    #[automatically_derived]
    impl SyndicateStorageEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                47u8,
                135u8,
                136u8,
                17u8,
                126u8,
                126u8,
                255u8,
                29u8,
                130u8,
                233u8,
                38u8,
                236u8,
                121u8,
                73u8,
                1u8,
                209u8,
                124u8,
                120u8,
                2u8,
                74u8,
                80u8,
                39u8,
                9u8,
                64u8,
                48u8,
                69u8,
                64u8,
                167u8,
                51u8,
                101u8,
                111u8,
                13u8,
            ],
            [
                189u8,
                121u8,
                184u8,
                111u8,
                254u8,
                10u8,
                184u8,
                232u8,
                119u8,
                97u8,
                81u8,
                81u8,
                66u8,
                23u8,
                205u8,
                124u8,
                172u8,
                213u8,
                44u8,
                144u8,
                159u8,
                102u8,
                71u8,
                92u8,
                58u8,
                244u8,
                78u8,
                18u8,
                159u8,
                11u8,
                0u8,
                255u8,
            ],
            [
                246u8,
                57u8,
                31u8,
                92u8,
                50u8,
                217u8,
                198u8,
                157u8,
                42u8,
                71u8,
                234u8,
                103u8,
                11u8,
                68u8,
                41u8,
                116u8,
                181u8,
                57u8,
                53u8,
                209u8,
                237u8,
                199u8,
                253u8,
                100u8,
                235u8,
                33u8,
                224u8,
                71u8,
                168u8,
                57u8,
                23u8,
                27u8,
            ],
            [
                251u8,
                63u8,
                148u8,
                44u8,
                77u8,
                135u8,
                113u8,
                172u8,
                90u8,
                54u8,
                47u8,
                88u8,
                189u8,
                56u8,
                4u8,
                224u8,
                117u8,
                158u8,
                189u8,
                82u8,
                129u8,
                7u8,
                35u8,
                136u8,
                74u8,
                124u8,
                219u8,
                83u8,
                29u8,
                131u8,
                182u8,
                243u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SyndicateStorageEvents {
        const NAME: &'static str = "SyndicateStorageEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <EpochRangeProcessed as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <EpochRangeProcessed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::EpochRangeProcessed)
                }
                Some(<RoleAdminChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleAdminChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleAdminChanged)
                }
                Some(<RoleGranted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleGranted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleGranted)
                }
                Some(<RoleRevoked as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RoleRevoked as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RoleRevoked)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SyndicateStorageEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochRangeProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::EpochRangeProcessed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleAdminChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleGranted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::RoleRevoked(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SyndicateStorage`](self) contract instance.

See the [wrapper's documentation](`SyndicateStorageInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SyndicateStorageInstance<T, P, N> {
        SyndicateStorageInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        manager: alloy::sol_types::private::Address,
        appChainId_: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SyndicateStorageInstance<T, P, N>>,
    > {
        SyndicateStorageInstance::<
            T,
            P,
            N,
        >::deploy(provider, admin, manager, appChainId_)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
        manager: alloy::sol_types::private::Address,
        appChainId_: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SyndicateStorageInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, admin, manager, appChainId_)
    }
    /**A [`SyndicateStorage`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SyndicateStorage`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SyndicateStorageInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SyndicateStorageInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SyndicateStorageInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateStorageInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SyndicateStorage`](self) contract instance.

See the [wrapper's documentation](`SyndicateStorageInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
            manager: alloy::sol_types::private::Address,
            appChainId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<SyndicateStorageInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                admin,
                manager,
                appChainId_,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
            manager: alloy::sol_types::private::Address,
            appChainId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            admin,
                            manager,
                            appChainId_,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SyndicateStorageInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SyndicateStorageInstance<T, P, N> {
            SyndicateStorageInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateStorageInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`DEFAULT_ADMIN_ROLE`] function.
        pub fn DEFAULT_ADMIN_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, DEFAULT_ADMIN_ROLECall, N> {
            self.call_builder(&DEFAULT_ADMIN_ROLECall {})
        }
        ///Creates a new call builder for the [`MANAGER_ROLE`] function.
        pub fn MANAGER_ROLE(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, MANAGER_ROLECall, N> {
            self.call_builder(&MANAGER_ROLECall {})
        }
        ///Creates a new call builder for the [`appChainId`] function.
        pub fn appChainId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, appChainIdCall, N> {
            self.call_builder(&appChainIdCall {})
        }
        ///Creates a new call builder for the [`getRoleAdmin`] function.
        pub fn getRoleAdmin(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getRoleAdminCall, N> {
            self.call_builder(&getRoleAdminCall { role })
        }
        ///Creates a new call builder for the [`grantRole`] function.
        pub fn grantRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, grantRoleCall, N> {
            self.call_builder(&grantRoleCall { role, account })
        }
        ///Creates a new call builder for the [`hasRole`] function.
        pub fn hasRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, hasRoleCall, N> {
            self.call_builder(&hasRoleCall { role, account })
        }
        ///Creates a new call builder for the [`indexFromBlock`] function.
        pub fn indexFromBlock(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, indexFromBlockCall, N> {
            self.call_builder(&indexFromBlockCall {})
        }
        ///Creates a new call builder for the [`renounceRole`] function.
        pub fn renounceRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            callerConfirmation: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceRoleCall, N> {
            self.call_builder(
                &renounceRoleCall {
                    role,
                    callerConfirmation,
                },
            )
        }
        ///Creates a new call builder for the [`revokeRole`] function.
        pub fn revokeRole(
            &self,
            role: alloy::sol_types::private::FixedBytes<32>,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, revokeRoleCall, N> {
            self.call_builder(&revokeRoleCall { role, account })
        }
        ///Creates a new call builder for the [`save`] function.
        pub fn save(
            &self,
            epochNumber: alloy::sol_types::private::primitives::aliases::U256,
            _1: alloy::sol_types::private::FixedBytes<32>,
            _2: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, saveCall, N> {
            self.call_builder(&saveCall { epochNumber, _1, _2 })
        }
        ///Creates a new call builder for the [`saveForMany`] function.
        pub fn saveForMany(
            &self,
            epochNumbers: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            epochHashes: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            batches: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, saveForManyCall, N> {
            self.call_builder(
                &saveForManyCall {
                    epochNumbers,
                    epochHashes,
                    batches,
                },
            )
        }
        ///Creates a new call builder for the [`setIndexFromBlock`] function.
        pub fn setIndexFromBlock(
            &self,
            blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setIndexFromBlockCall, N> {
            self.call_builder(
                &setIndexFromBlockCall {
                    blockNumber,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SyndicateStorageInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`EpochRangeProcessed`] event.
        pub fn EpochRangeProcessed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, EpochRangeProcessed, N> {
            self.event_filter::<EpochRangeProcessed>()
        }
        ///Creates a new event filter for the [`RoleAdminChanged`] event.
        pub fn RoleAdminChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleAdminChanged, N> {
            self.event_filter::<RoleAdminChanged>()
        }
        ///Creates a new event filter for the [`RoleGranted`] event.
        pub fn RoleGranted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleGranted, N> {
            self.event_filter::<RoleGranted>()
        }
        ///Creates a new event filter for the [`RoleRevoked`] event.
        pub fn RoleRevoked_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RoleRevoked, N> {
            self.event_filter::<RoleRevoked>()
        }
    }
}
