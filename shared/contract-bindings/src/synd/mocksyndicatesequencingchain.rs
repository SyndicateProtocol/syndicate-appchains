/**

Generated by the following Solidity interface...
```solidity
interface MockSyndicateSequencingChain {
    function lastProcessedBulkData(uint256) external view returns (bytes memory);
    function lastProcessedData() external view returns (bytes memory);
    function processBulkTransactions(bytes[] memory data) external;
    function processTransaction(bytes memory data) external;
    function processTransactionRaw(bytes memory data) external;
    function setRevertFlag(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "lastProcessedBulkData",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "lastProcessedData",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "processBulkTransactions",
    "inputs": [
      {
        "name": "data",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransaction",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "processTransactionRaw",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setRevertFlag",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockSyndicateSequencingChain {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234601c57600e6020565b610e3961002b8239610e3990f35b6026565b60405190565b5f80fdfe60806040526004361015610013575b610667565b61001d5f3561008c565b80630b83249d146100875780633514d37b14610082578063381ba1401461007d57806346e2cc09146100785780634a5b6b7e14610073578063d3072d821461006e5763f352cd720361000e57610632565b6105f0565b61054b565b610280565b61024d565b6101d3565b61012a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100ea5781359167ffffffffffffffff83116100e55760200192602083028401116100e057565b6100ac565b6100a8565b6100a4565b90602082820312610120575f82013567ffffffffffffffff811161011b5761011792016100b0565b9091565b6100a0565b61009c565b5f0190565b346101595761014361013d3660046100ef565b90610c88565b61014b610092565b8061015581610125565b0390f35b610098565b909182601f830112156101985781359167ffffffffffffffff831161019357602001926001830284011161018e57565b6100ac565b6100a8565b6100a4565b906020828203126101ce575f82013567ffffffffffffffff81116101c9576101c5920161015e565b9091565b6100a0565b61009c565b34610202576101ec6101e636600461019d565b90610d32565b6101f4610092565b806101fe81610125565b0390f35b610098565b151590565b61021581610207565b0361021c57565b5f80fd5b9050359061022d8261020c565b565b9060208282031261024857610245915f01610220565b90565b61009c565b3461027b5761026561026036600461022f565b610db9565b61026d610092565b8061027781610125565b0390f35b610098565b346102af5761029961029336600461019d565b90610dc6565b6102a1610092565b806102ab81610125565b0390f35b610098565b90565b6102c0816102b4565b036102c757565b5f80fd5b905035906102d8826102b7565b565b906020828203126102f3576102f0915f016102cb565b90565b61009c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6103228161030c565b82101561033c57610334600191610310565b910201905f90565b6102f8565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610388575b602083101461038357565b610354565b91607f1691610378565b60209181520190565b5f5260205f2090565b905f92918054906103be6103b783610368565b8094610392565b916001811690815f1461041557506001146103d9575b505050565b6103e6919293945061039b565b915f925b8184106103fd57505001905f80806103d4565b600181602092959395548486015201910192906103ea565b92949550505060ff19168252151560200201905f80806103d4565b9061043a916103a4565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104659061043d565b810190811067ffffffffffffffff82111761047f57604052565b610447565b906104a461049d92610494610092565b93848092610430565b038361045b565b565b905f106104b9576104b690610484565b90565b610341565b60016104c98161030c565b8210156104e6576104e3916104dd91610319565b906104a6565b90565b5f80fd5b5190565b60209181520190565b90825f9392825e0152565b61052161052a60209361052f93610518816104ea565b938480936104ee565b958691016104f7565b61043d565b0190565b6105489160208201915f818403910152610502565b90565b3461057b576105776105666105613660046102da565b6104be565b61056e610092565b91829182610533565b0390f35b610098565b5f91031261058a57565b61009c565b1c90565b60ff1690565b6105a99060086105ae930261058f565b610593565b90565b906105bc9154610599565b90565b6105cb60025f906105b1565b90565b6105d790610207565b9052565b91906105ee905f602085019401906105ce565b565b3461062057610600366004610580565b61061c61060b6105bf565b610613610092565b918291826105db565b0390f35b610098565b61062f5f806104a6565b90565b3461066257610642366004610580565b61065e61064d610625565b610655610092565b91829182610533565b0390f35b610098565b5f80fd5b5f1c90565b61067c6106819161066b565b610593565b90565b61068e9054610670565b90565b60209181520190565b5f7f53657175656e636572206572726f720000000000000000000000000000000000910152565b6106ce600f602092610691565b6106d78161069a565b0190565b6106f09060208101905f8183039101526106c1565b90565b600190818003010490565b90610711905f199060200360080261058f565b8154169055565b1b90565b919060086107379102916107315f1984610718565b92610718565b9181191691161790565b90565b61075861075361075d926102b4565b610741565b6102b4565b90565b90565b919061077961077461078193610744565b610760565b90835461071c565b9055565b5f90565b61079b91610795610785565b91610763565b565b5b8181106107a9575050565b806107b65f600193610789565b0161079e565b906107cc905f199060080261058f565b191690565b816107db916107bc565b906002021790565b905f916107fa6107f28261039b565b9283546107d1565b905555565b601f602091010490565b919290602082105f1461086257601f84116001146108325761082c9293506107d1565b90555b5b565b509061085861085d93600161084f6108498561039b565b926107ff565b8201910161079d565b6107e3565b61082f565b50610899829361087360019461039b565b61089261087f856107ff565b820192601f8616806108a4575b506107ff565b019061079d565b600202179055610830565b6108b0908886036106fe565b5f61088c565b929091680100000000000000008211610916576020115f1461090757602081105f146108eb576108e5916107d1565b90555b5b565b60019160ff19166108fb8461039b565b556002020190556108e8565b600191506002020190556108e9565b610447565b90815461092781610368565b90818311610950575b81831061093e575b50505050565b61094793610809565b5f808080610938565b61095c838383876108b6565b610930565b5f61096b9161091b565b565b905f0361097f5761097d90610961565b565b610341565b5b818110610990575050565b8061099d5f60019361096d565b01610985565b90918281106109b2575b505050565b6109d06109ca6109c46109db956106f3565b926106f3565b92610310565b918201910190610984565b5f80806109ad565b90680100000000000000008111610a0c5781610a01610a0a9361030c565b908281556109a3565b565b610447565b5f610a1b916109e3565b565b905f03610a2f57610a2d90610a11565b565b610341565b90565b610a4b610a46610a5092610a34565b610741565b6102b4565b90565b6001610a5f91016102b4565b90565b5090565b90565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610ab7570180359067ffffffffffffffff8211610ab257602001916001820236038313610aad57565b610a71565b610a6d565b610a69565b90821015610ad7576020610ad39202810190610a75565b9091565b6102f8565b5f5260205f2090565b5490565b610af281610ae5565b821015610b0c57610b04600191610adc565b910201905f90565b6102f8565b5090565b9190601f8111610b25575b505050565b610b31610b569361039b565b906020610b3d846107ff565b83019310610b5e575b610b4f906107ff565b019061079d565b5f8080610b20565b9150610b4f81929050610b46565b91610b779082610b11565b9067ffffffffffffffff8211610c3657610b9b82610b958554610368565b85610b15565b5f90601f8311600114610bce57918091610bbd935f92610bc2575b50506107d1565b90555b565b90915001355f80610bb6565b601f19831691610bdd8561039b565b925f5b818110610c1e57509160029391856001969410610c04575b50505002019055610bc0565b610c14910135601f8416906107bc565b90555f8080610bf8565b91936020600181928787013581550195019201610be0565b610447565b929190610c4d57610c4b92610b6c565b565b610341565b919082549268010000000000000000841015610c835783610c7b916001610c8196018155610ae9565b90610c3b565b565b610447565b9190610c946002610684565b610d0357610ca35f6001610a1d565b610cac5f610a37565b5b80610cca610cc4610cbf878690610a62565b6102b4565b916102b4565b1015610cfd57610cf890610cf3610ce16001610a66565b610ced87868591610abc565b91610c52565b610a53565b610cad565b50509050565b610d0b610092565b62461bcd60e51b815280610d21600482016106db565b0390fd5b90610d309291610b6c565b565b90610d3d6002610684565b610d4d57610d4b915f610d25565b565b610d55610092565b62461bcd60e51b815280610d6b600482016106db565b0390fd5b5f1b90565b90610d8060ff91610d6f565b9181191691161790565b610d9390610207565b90565b90565b90610dae610da9610db592610d8a565b610d96565b8254610d74565b9055565b610dc4906002610d99565b565b90610dd16002610684565b610de157610ddf915f610d25565b565b610de9610092565b62461bcd60e51b815280610dff600482016106db565b0390fdfea26469706673582212206480b0f8afbe61343e18fb1a7e3ed215b5f22777622a71effb513d338f57985564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4`\x1CW`\x0E` V[a\x0E9a\0+\x829a\x0E9\x90\xF3[`&V[`@Q\x90V[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x06gV[a\0\x1D_5a\0\x8CV[\x80c\x0B\x83$\x9D\x14a\0\x87W\x80c5\x14\xD3{\x14a\0\x82W\x80c8\x1B\xA1@\x14a\0}W\x80cF\xE2\xCC\t\x14a\0xW\x80cJ[k~\x14a\0sW\x80c\xD3\x07-\x82\x14a\0nWc\xF3R\xCDr\x03a\0\x0EWa\x062V[a\x05\xF0V[a\x05KV[a\x02\x80V[a\x02MV[a\x01\xD3V[a\x01*V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xEAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xE5W` \x01\x92` \x83\x02\x84\x01\x11a\0\xE0WV[a\0\xACV[a\0\xA8V[a\0\xA4V[\x90` \x82\x82\x03\x12a\x01 W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x1BWa\x01\x17\x92\x01a\0\xB0V[\x90\x91V[a\0\xA0V[a\0\x9CV[_\x01\x90V[4a\x01YWa\x01Ca\x01=6`\x04a\0\xEFV[\x90a\x0C\x88V[a\x01Ka\0\x92V[\x80a\x01U\x81a\x01%V[\x03\x90\xF3[a\0\x98V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x98W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x93W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x8EWV[a\0\xACV[a\0\xA8V[a\0\xA4V[\x90` \x82\x82\x03\x12a\x01\xCEW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xC9Wa\x01\xC5\x92\x01a\x01^V[\x90\x91V[a\0\xA0V[a\0\x9CV[4a\x02\x02Wa\x01\xECa\x01\xE66`\x04a\x01\x9DV[\x90a\r2V[a\x01\xF4a\0\x92V[\x80a\x01\xFE\x81a\x01%V[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x02\x15\x81a\x02\x07V[\x03a\x02\x1CWV[_\x80\xFD[\x90P5\x90a\x02-\x82a\x02\x0CV[V[\x90` \x82\x82\x03\x12a\x02HWa\x02E\x91_\x01a\x02 V[\x90V[a\0\x9CV[4a\x02{Wa\x02ea\x02`6`\x04a\x02/V[a\r\xB9V[a\x02ma\0\x92V[\x80a\x02w\x81a\x01%V[\x03\x90\xF3[a\0\x98V[4a\x02\xAFWa\x02\x99a\x02\x936`\x04a\x01\x9DV[\x90a\r\xC6V[a\x02\xA1a\0\x92V[\x80a\x02\xAB\x81a\x01%V[\x03\x90\xF3[a\0\x98V[\x90V[a\x02\xC0\x81a\x02\xB4V[\x03a\x02\xC7WV[_\x80\xFD[\x90P5\x90a\x02\xD8\x82a\x02\xB7V[V[\x90` \x82\x82\x03\x12a\x02\xF3Wa\x02\xF0\x91_\x01a\x02\xCBV[\x90V[a\0\x9CV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x03\"\x81a\x03\x0CV[\x82\x10\x15a\x03<Wa\x034`\x01\x91a\x03\x10V[\x91\x02\x01\x90_\x90V[a\x02\xF8V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x03\x88W[` \x83\x10\x14a\x03\x83WV[a\x03TV[\x91`\x7F\x16\x91a\x03xV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x03\xBEa\x03\xB7\x83a\x03hV[\x80\x94a\x03\x92V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\x15WP`\x01\x14a\x03\xD9W[PPPV[a\x03\xE6\x91\x92\x93\x94Pa\x03\x9BV[\x91_\x92[\x81\x84\x10a\x03\xFDWPP\x01\x90_\x80\x80a\x03\xD4V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x03\xEAV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x03\xD4V[\x90a\x04:\x91a\x03\xA4V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04e\x90a\x04=V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\x7FW`@RV[a\x04GV[\x90a\x04\xA4a\x04\x9D\x92a\x04\x94a\0\x92V[\x93\x84\x80\x92a\x040V[\x03\x83a\x04[V[V[\x90_\x10a\x04\xB9Wa\x04\xB6\x90a\x04\x84V[\x90V[a\x03AV[`\x01a\x04\xC9\x81a\x03\x0CV[\x82\x10\x15a\x04\xE6Wa\x04\xE3\x91a\x04\xDD\x91a\x03\x19V[\x90a\x04\xA6V[\x90V[_\x80\xFD[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05!a\x05*` \x93a\x05/\x93a\x05\x18\x81a\x04\xEAV[\x93\x84\x80\x93a\x04\xEEV[\x95\x86\x91\x01a\x04\xF7V[a\x04=V[\x01\x90V[a\x05H\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05\x02V[\x90V[4a\x05{Wa\x05wa\x05fa\x05a6`\x04a\x02\xDAV[a\x04\xBEV[a\x05na\0\x92V[\x91\x82\x91\x82a\x053V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x05\x8AWV[a\0\x9CV[\x1C\x90V[`\xFF\x16\x90V[a\x05\xA9\x90`\x08a\x05\xAE\x93\x02a\x05\x8FV[a\x05\x93V[\x90V[\x90a\x05\xBC\x91Ta\x05\x99V[\x90V[a\x05\xCB`\x02_\x90a\x05\xB1V[\x90V[a\x05\xD7\x90a\x02\x07V[\x90RV[\x91\x90a\x05\xEE\x90_` \x85\x01\x94\x01\x90a\x05\xCEV[V[4a\x06 Wa\x06\x006`\x04a\x05\x80V[a\x06\x1Ca\x06\x0Ba\x05\xBFV[a\x06\x13a\0\x92V[\x91\x82\x91\x82a\x05\xDBV[\x03\x90\xF3[a\0\x98V[a\x06/_\x80a\x04\xA6V[\x90V[4a\x06bWa\x06B6`\x04a\x05\x80V[a\x06^a\x06Ma\x06%V[a\x06Ua\0\x92V[\x91\x82\x91\x82a\x053V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x1C\x90V[a\x06|a\x06\x81\x91a\x06kV[a\x05\x93V[\x90V[a\x06\x8E\x90Ta\x06pV[\x90V[` \x91\x81R\x01\x90V[_\x7FSequencer error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xCE`\x0F` \x92a\x06\x91V[a\x06\xD7\x81a\x06\x9AV[\x01\x90V[a\x06\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\xC1V[\x90V[`\x01\x90\x81\x80\x03\x01\x04\x90V[\x90a\x07\x11\x90_\x19\x90` \x03`\x08\x02a\x05\x8FV[\x81T\x16\x90UV[\x1B\x90V[\x91\x90`\x08a\x077\x91\x02\x91a\x071_\x19\x84a\x07\x18V[\x92a\x07\x18V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x07Xa\x07Sa\x07]\x92a\x02\xB4V[a\x07AV[a\x02\xB4V[\x90V[\x90V[\x91\x90a\x07ya\x07ta\x07\x81\x93a\x07DV[a\x07`V[\x90\x83Ta\x07\x1CV[\x90UV[_\x90V[a\x07\x9B\x91a\x07\x95a\x07\x85V[\x91a\x07cV[V[[\x81\x81\x10a\x07\xA9WPPV[\x80a\x07\xB6_`\x01\x93a\x07\x89V[\x01a\x07\x9EV[\x90a\x07\xCC\x90_\x19\x90`\x08\x02a\x05\x8FV[\x19\x16\x90V[\x81a\x07\xDB\x91a\x07\xBCV[\x90`\x02\x02\x17\x90V[\x90_\x91a\x07\xFAa\x07\xF2\x82a\x03\x9BV[\x92\x83Ta\x07\xD1V[\x90UUV[`\x1F` \x91\x01\x04\x90V[\x91\x92\x90` \x82\x10_\x14a\x08bW`\x1F\x84\x11`\x01\x14a\x082Wa\x08,\x92\x93Pa\x07\xD1V[\x90U[[V[P\x90a\x08Xa\x08]\x93`\x01a\x08Oa\x08I\x85a\x03\x9BV[\x92a\x07\xFFV[\x82\x01\x91\x01a\x07\x9DV[a\x07\xE3V[a\x08/V[Pa\x08\x99\x82\x93a\x08s`\x01\x94a\x03\x9BV[a\x08\x92a\x08\x7F\x85a\x07\xFFV[\x82\x01\x92`\x1F\x86\x16\x80a\x08\xA4W[Pa\x07\xFFV[\x01\x90a\x07\x9DV[`\x02\x02\x17\x90Ua\x080V[a\x08\xB0\x90\x88\x86\x03a\x06\xFEV[_a\x08\x8CV[\x92\x90\x91h\x01\0\0\0\0\0\0\0\0\x82\x11a\t\x16W` \x11_\x14a\t\x07W` \x81\x10_\x14a\x08\xEBWa\x08\xE5\x91a\x07\xD1V[\x90U[[V[`\x01\x91`\xFF\x19\x16a\x08\xFB\x84a\x03\x9BV[U`\x02\x02\x01\x90Ua\x08\xE8V[`\x01\x91P`\x02\x02\x01\x90Ua\x08\xE9V[a\x04GV[\x90\x81Ta\t'\x81a\x03hV[\x90\x81\x83\x11a\tPW[\x81\x83\x10a\t>W[PPPPV[a\tG\x93a\x08\tV[_\x80\x80\x80a\t8V[a\t\\\x83\x83\x83\x87a\x08\xB6V[a\t0V[_a\tk\x91a\t\x1BV[V[\x90_\x03a\t\x7FWa\t}\x90a\taV[V[a\x03AV[[\x81\x81\x10a\t\x90WPPV[\x80a\t\x9D_`\x01\x93a\tmV[\x01a\t\x85V[\x90\x91\x82\x81\x10a\t\xB2W[PPPV[a\t\xD0a\t\xCAa\t\xC4a\t\xDB\x95a\x06\xF3V[\x92a\x06\xF3V[\x92a\x03\x10V[\x91\x82\x01\x91\x01\x90a\t\x84V[_\x80\x80a\t\xADV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\n\x0CW\x81a\n\x01a\n\n\x93a\x03\x0CV[\x90\x82\x81Ua\t\xA3V[V[a\x04GV[_a\n\x1B\x91a\t\xE3V[V[\x90_\x03a\n/Wa\n-\x90a\n\x11V[V[a\x03AV[\x90V[a\nKa\nFa\nP\x92a\n4V[a\x07AV[a\x02\xB4V[\x90V[`\x01a\n_\x91\x01a\x02\xB4V[\x90V[P\x90V[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\n\xB7W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\xB2W` \x01\x91`\x01\x82\x026\x03\x83\x13a\n\xADWV[a\nqV[a\nmV[a\niV[\x90\x82\x10\x15a\n\xD7W` a\n\xD3\x92\x02\x81\x01\x90a\nuV[\x90\x91V[a\x02\xF8V[_R` _ \x90V[T\x90V[a\n\xF2\x81a\n\xE5V[\x82\x10\x15a\x0B\x0CWa\x0B\x04`\x01\x91a\n\xDCV[\x91\x02\x01\x90_\x90V[a\x02\xF8V[P\x90V[\x91\x90`\x1F\x81\x11a\x0B%W[PPPV[a\x0B1a\x0BV\x93a\x03\x9BV[\x90` a\x0B=\x84a\x07\xFFV[\x83\x01\x93\x10a\x0B^W[a\x0BO\x90a\x07\xFFV[\x01\x90a\x07\x9DV[_\x80\x80a\x0B V[\x91Pa\x0BO\x81\x92\x90Pa\x0BFV[\x91a\x0Bw\x90\x82a\x0B\x11V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0C6Wa\x0B\x9B\x82a\x0B\x95\x85Ta\x03hV[\x85a\x0B\x15V[_\x90`\x1F\x83\x11`\x01\x14a\x0B\xCEW\x91\x80\x91a\x0B\xBD\x93_\x92a\x0B\xC2W[PPa\x07\xD1V[\x90U[V[\x90\x91P\x015_\x80a\x0B\xB6V[`\x1F\x19\x83\x16\x91a\x0B\xDD\x85a\x03\x9BV[\x92_[\x81\x81\x10a\x0C\x1EWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0C\x04W[PPP\x02\x01\x90Ua\x0B\xC0V[a\x0C\x14\x91\x015`\x1F\x84\x16\x90a\x07\xBCV[\x90U_\x80\x80a\x0B\xF8V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0B\xE0V[a\x04GV[\x92\x91\x90a\x0CMWa\x0CK\x92a\x0BlV[V[a\x03AV[\x91\x90\x82T\x92h\x01\0\0\0\0\0\0\0\0\x84\x10\x15a\x0C\x83W\x83a\x0C{\x91`\x01a\x0C\x81\x96\x01\x81Ua\n\xE9V[\x90a\x0C;V[V[a\x04GV[\x91\x90a\x0C\x94`\x02a\x06\x84V[a\r\x03Wa\x0C\xA3_`\x01a\n\x1DV[a\x0C\xAC_a\n7V[[\x80a\x0C\xCAa\x0C\xC4a\x0C\xBF\x87\x86\x90a\nbV[a\x02\xB4V[\x91a\x02\xB4V[\x10\x15a\x0C\xFDWa\x0C\xF8\x90a\x0C\xF3a\x0C\xE1`\x01a\nfV[a\x0C\xED\x87\x86\x85\x91a\n\xBCV[\x91a\x0CRV[a\nSV[a\x0C\xADV[PP\x90PV[a\r\x0Ba\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r!`\x04\x82\x01a\x06\xDBV[\x03\x90\xFD[\x90a\r0\x92\x91a\x0BlV[V[\x90a\r=`\x02a\x06\x84V[a\rMWa\rK\x91_a\r%V[V[a\rUa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\rk`\x04\x82\x01a\x06\xDBV[\x03\x90\xFD[_\x1B\x90V[\x90a\r\x80`\xFF\x91a\roV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\x93\x90a\x02\x07V[\x90V[\x90V[\x90a\r\xAEa\r\xA9a\r\xB5\x92a\r\x8AV[a\r\x96V[\x82Ta\rtV[\x90UV[a\r\xC4\x90`\x02a\r\x99V[V[\x90a\r\xD1`\x02a\x06\x84V[a\r\xE1Wa\r\xDF\x91_a\r%V[V[a\r\xE9a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xFF`\x04\x82\x01a\x06\xDBV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 d\x80\xB0\xF8\xAF\xBEa4>\x18\xFB\x1A~>\xD2\x15\xB5\xF2'wb*q\xEF\xFBQ=3\x8FW\x98UdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610667565b61001d5f3561008c565b80630b83249d146100875780633514d37b14610082578063381ba1401461007d57806346e2cc09146100785780634a5b6b7e14610073578063d3072d821461006e5763f352cd720361000e57610632565b6105f0565b61054b565b610280565b61024d565b6101d3565b61012a565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b909182601f830112156100ea5781359167ffffffffffffffff83116100e55760200192602083028401116100e057565b6100ac565b6100a8565b6100a4565b90602082820312610120575f82013567ffffffffffffffff811161011b5761011792016100b0565b9091565b6100a0565b61009c565b5f0190565b346101595761014361013d3660046100ef565b90610c88565b61014b610092565b8061015581610125565b0390f35b610098565b909182601f830112156101985781359167ffffffffffffffff831161019357602001926001830284011161018e57565b6100ac565b6100a8565b6100a4565b906020828203126101ce575f82013567ffffffffffffffff81116101c9576101c5920161015e565b9091565b6100a0565b61009c565b34610202576101ec6101e636600461019d565b90610d32565b6101f4610092565b806101fe81610125565b0390f35b610098565b151590565b61021581610207565b0361021c57565b5f80fd5b9050359061022d8261020c565b565b9060208282031261024857610245915f01610220565b90565b61009c565b3461027b5761026561026036600461022f565b610db9565b61026d610092565b8061027781610125565b0390f35b610098565b346102af5761029961029336600461019d565b90610dc6565b6102a1610092565b806102ab81610125565b0390f35b610098565b90565b6102c0816102b4565b036102c757565b5f80fd5b905035906102d8826102b7565b565b906020828203126102f3576102f0915f016102cb565b90565b61009c565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b6103228161030c565b82101561033c57610334600191610310565b910201905f90565b6102f8565b634e487b7160e01b5f525f60045260245ffd5b634e487b7160e01b5f52602260045260245ffd5b9060016002830492168015610388575b602083101461038357565b610354565b91607f1691610378565b60209181520190565b5f5260205f2090565b905f92918054906103be6103b783610368565b8094610392565b916001811690815f1461041557506001146103d9575b505050565b6103e6919293945061039b565b915f925b8184106103fd57505001905f80806103d4565b600181602092959395548486015201910192906103ea565b92949550505060ff19168252151560200201905f80806103d4565b9061043a916103a4565b90565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906104659061043d565b810190811067ffffffffffffffff82111761047f57604052565b610447565b906104a461049d92610494610092565b93848092610430565b038361045b565b565b905f106104b9576104b690610484565b90565b610341565b60016104c98161030c565b8210156104e6576104e3916104dd91610319565b906104a6565b90565b5f80fd5b5190565b60209181520190565b90825f9392825e0152565b61052161052a60209361052f93610518816104ea565b938480936104ee565b958691016104f7565b61043d565b0190565b6105489160208201915f818403910152610502565b90565b3461057b576105776105666105613660046102da565b6104be565b61056e610092565b91829182610533565b0390f35b610098565b5f91031261058a57565b61009c565b1c90565b60ff1690565b6105a99060086105ae930261058f565b610593565b90565b906105bc9154610599565b90565b6105cb60025f906105b1565b90565b6105d790610207565b9052565b91906105ee905f602085019401906105ce565b565b3461062057610600366004610580565b61061c61060b6105bf565b610613610092565b918291826105db565b0390f35b610098565b61062f5f806104a6565b90565b3461066257610642366004610580565b61065e61064d610625565b610655610092565b91829182610533565b0390f35b610098565b5f80fd5b5f1c90565b61067c6106819161066b565b610593565b90565b61068e9054610670565b90565b60209181520190565b5f7f53657175656e636572206572726f720000000000000000000000000000000000910152565b6106ce600f602092610691565b6106d78161069a565b0190565b6106f09060208101905f8183039101526106c1565b90565b600190818003010490565b90610711905f199060200360080261058f565b8154169055565b1b90565b919060086107379102916107315f1984610718565b92610718565b9181191691161790565b90565b61075861075361075d926102b4565b610741565b6102b4565b90565b90565b919061077961077461078193610744565b610760565b90835461071c565b9055565b5f90565b61079b91610795610785565b91610763565b565b5b8181106107a9575050565b806107b65f600193610789565b0161079e565b906107cc905f199060080261058f565b191690565b816107db916107bc565b906002021790565b905f916107fa6107f28261039b565b9283546107d1565b905555565b601f602091010490565b919290602082105f1461086257601f84116001146108325761082c9293506107d1565b90555b5b565b509061085861085d93600161084f6108498561039b565b926107ff565b8201910161079d565b6107e3565b61082f565b50610899829361087360019461039b565b61089261087f856107ff565b820192601f8616806108a4575b506107ff565b019061079d565b600202179055610830565b6108b0908886036106fe565b5f61088c565b929091680100000000000000008211610916576020115f1461090757602081105f146108eb576108e5916107d1565b90555b5b565b60019160ff19166108fb8461039b565b556002020190556108e8565b600191506002020190556108e9565b610447565b90815461092781610368565b90818311610950575b81831061093e575b50505050565b61094793610809565b5f808080610938565b61095c838383876108b6565b610930565b5f61096b9161091b565b565b905f0361097f5761097d90610961565b565b610341565b5b818110610990575050565b8061099d5f60019361096d565b01610985565b90918281106109b2575b505050565b6109d06109ca6109c46109db956106f3565b926106f3565b92610310565b918201910190610984565b5f80806109ad565b90680100000000000000008111610a0c5781610a01610a0a9361030c565b908281556109a3565b565b610447565b5f610a1b916109e3565b565b905f03610a2f57610a2d90610a11565b565b610341565b90565b610a4b610a46610a5092610a34565b610741565b6102b4565b90565b6001610a5f91016102b4565b90565b5090565b90565b5f80fd5b5f80fd5b5f80fd5b903590600160200381360303821215610ab7570180359067ffffffffffffffff8211610ab257602001916001820236038313610aad57565b610a71565b610a6d565b610a69565b90821015610ad7576020610ad39202810190610a75565b9091565b6102f8565b5f5260205f2090565b5490565b610af281610ae5565b821015610b0c57610b04600191610adc565b910201905f90565b6102f8565b5090565b9190601f8111610b25575b505050565b610b31610b569361039b565b906020610b3d846107ff565b83019310610b5e575b610b4f906107ff565b019061079d565b5f8080610b20565b9150610b4f81929050610b46565b91610b779082610b11565b9067ffffffffffffffff8211610c3657610b9b82610b958554610368565b85610b15565b5f90601f8311600114610bce57918091610bbd935f92610bc2575b50506107d1565b90555b565b90915001355f80610bb6565b601f19831691610bdd8561039b565b925f5b818110610c1e57509160029391856001969410610c04575b50505002019055610bc0565b610c14910135601f8416906107bc565b90555f8080610bf8565b91936020600181928787013581550195019201610be0565b610447565b929190610c4d57610c4b92610b6c565b565b610341565b919082549268010000000000000000841015610c835783610c7b916001610c8196018155610ae9565b90610c3b565b565b610447565b9190610c946002610684565b610d0357610ca35f6001610a1d565b610cac5f610a37565b5b80610cca610cc4610cbf878690610a62565b6102b4565b916102b4565b1015610cfd57610cf890610cf3610ce16001610a66565b610ced87868591610abc565b91610c52565b610a53565b610cad565b50509050565b610d0b610092565b62461bcd60e51b815280610d21600482016106db565b0390fd5b90610d309291610b6c565b565b90610d3d6002610684565b610d4d57610d4b915f610d25565b565b610d55610092565b62461bcd60e51b815280610d6b600482016106db565b0390fd5b5f1b90565b90610d8060ff91610d6f565b9181191691161790565b610d9390610207565b90565b90565b90610dae610da9610db592610d8a565b610d96565b8254610d74565b9055565b610dc4906002610d99565b565b90610dd16002610684565b610de157610ddf915f610d25565b565b610de9610092565b62461bcd60e51b815280610dff600482016106db565b0390fdfea26469706673582212206480b0f8afbe61343e18fb1a7e3ed215b5f22777622a71effb513d338f57985564736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x06gV[a\0\x1D_5a\0\x8CV[\x80c\x0B\x83$\x9D\x14a\0\x87W\x80c5\x14\xD3{\x14a\0\x82W\x80c8\x1B\xA1@\x14a\0}W\x80cF\xE2\xCC\t\x14a\0xW\x80cJ[k~\x14a\0sW\x80c\xD3\x07-\x82\x14a\0nWc\xF3R\xCDr\x03a\0\x0EWa\x062V[a\x05\xF0V[a\x05KV[a\x02\x80V[a\x02MV[a\x01\xD3V[a\x01*V[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\0\xEAW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\0\xE5W` \x01\x92` \x83\x02\x84\x01\x11a\0\xE0WV[a\0\xACV[a\0\xA8V[a\0\xA4V[\x90` \x82\x82\x03\x12a\x01 W_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\x1BWa\x01\x17\x92\x01a\0\xB0V[\x90\x91V[a\0\xA0V[a\0\x9CV[_\x01\x90V[4a\x01YWa\x01Ca\x01=6`\x04a\0\xEFV[\x90a\x0C\x88V[a\x01Ka\0\x92V[\x80a\x01U\x81a\x01%V[\x03\x90\xF3[a\0\x98V[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x01\x98W\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x01\x93W` \x01\x92`\x01\x83\x02\x84\x01\x11a\x01\x8EWV[a\0\xACV[a\0\xA8V[a\0\xA4V[\x90` \x82\x82\x03\x12a\x01\xCEW_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x01\xC9Wa\x01\xC5\x92\x01a\x01^V[\x90\x91V[a\0\xA0V[a\0\x9CV[4a\x02\x02Wa\x01\xECa\x01\xE66`\x04a\x01\x9DV[\x90a\r2V[a\x01\xF4a\0\x92V[\x80a\x01\xFE\x81a\x01%V[\x03\x90\xF3[a\0\x98V[\x15\x15\x90V[a\x02\x15\x81a\x02\x07V[\x03a\x02\x1CWV[_\x80\xFD[\x90P5\x90a\x02-\x82a\x02\x0CV[V[\x90` \x82\x82\x03\x12a\x02HWa\x02E\x91_\x01a\x02 V[\x90V[a\0\x9CV[4a\x02{Wa\x02ea\x02`6`\x04a\x02/V[a\r\xB9V[a\x02ma\0\x92V[\x80a\x02w\x81a\x01%V[\x03\x90\xF3[a\0\x98V[4a\x02\xAFWa\x02\x99a\x02\x936`\x04a\x01\x9DV[\x90a\r\xC6V[a\x02\xA1a\0\x92V[\x80a\x02\xAB\x81a\x01%V[\x03\x90\xF3[a\0\x98V[\x90V[a\x02\xC0\x81a\x02\xB4V[\x03a\x02\xC7WV[_\x80\xFD[\x90P5\x90a\x02\xD8\x82a\x02\xB7V[V[\x90` \x82\x82\x03\x12a\x02\xF3Wa\x02\xF0\x91_\x01a\x02\xCBV[\x90V[a\0\x9CV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[T\x90V[_R` _ \x90V[a\x03\"\x81a\x03\x0CV[\x82\x10\x15a\x03<Wa\x034`\x01\x91a\x03\x10V[\x91\x02\x01\x90_\x90V[a\x02\xF8V[cNH{q`\xE0\x1B_R_`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[\x90`\x01`\x02\x83\x04\x92\x16\x80\x15a\x03\x88W[` \x83\x10\x14a\x03\x83WV[a\x03TV[\x91`\x7F\x16\x91a\x03xV[` \x91\x81R\x01\x90V[_R` _ \x90V[\x90_\x92\x91\x80T\x90a\x03\xBEa\x03\xB7\x83a\x03hV[\x80\x94a\x03\x92V[\x91`\x01\x81\x16\x90\x81_\x14a\x04\x15WP`\x01\x14a\x03\xD9W[PPPV[a\x03\xE6\x91\x92\x93\x94Pa\x03\x9BV[\x91_\x92[\x81\x84\x10a\x03\xFDWPP\x01\x90_\x80\x80a\x03\xD4V[`\x01\x81` \x92\x95\x93\x95T\x84\x86\x01R\x01\x91\x01\x92\x90a\x03\xEAV[\x92\x94\x95PPP`\xFF\x19\x16\x82R\x15\x15` \x02\x01\x90_\x80\x80a\x03\xD4V[\x90a\x04:\x91a\x03\xA4V[\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\x04e\x90a\x04=V[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x04\x7FW`@RV[a\x04GV[\x90a\x04\xA4a\x04\x9D\x92a\x04\x94a\0\x92V[\x93\x84\x80\x92a\x040V[\x03\x83a\x04[V[V[\x90_\x10a\x04\xB9Wa\x04\xB6\x90a\x04\x84V[\x90V[a\x03AV[`\x01a\x04\xC9\x81a\x03\x0CV[\x82\x10\x15a\x04\xE6Wa\x04\xE3\x91a\x04\xDD\x91a\x03\x19V[\x90a\x04\xA6V[\x90V[_\x80\xFD[Q\x90V[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x82^\x01RV[a\x05!a\x05*` \x93a\x05/\x93a\x05\x18\x81a\x04\xEAV[\x93\x84\x80\x93a\x04\xEEV[\x95\x86\x91\x01a\x04\xF7V[a\x04=V[\x01\x90V[a\x05H\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x05\x02V[\x90V[4a\x05{Wa\x05wa\x05fa\x05a6`\x04a\x02\xDAV[a\x04\xBEV[a\x05na\0\x92V[\x91\x82\x91\x82a\x053V[\x03\x90\xF3[a\0\x98V[_\x91\x03\x12a\x05\x8AWV[a\0\x9CV[\x1C\x90V[`\xFF\x16\x90V[a\x05\xA9\x90`\x08a\x05\xAE\x93\x02a\x05\x8FV[a\x05\x93V[\x90V[\x90a\x05\xBC\x91Ta\x05\x99V[\x90V[a\x05\xCB`\x02_\x90a\x05\xB1V[\x90V[a\x05\xD7\x90a\x02\x07V[\x90RV[\x91\x90a\x05\xEE\x90_` \x85\x01\x94\x01\x90a\x05\xCEV[V[4a\x06 Wa\x06\x006`\x04a\x05\x80V[a\x06\x1Ca\x06\x0Ba\x05\xBFV[a\x06\x13a\0\x92V[\x91\x82\x91\x82a\x05\xDBV[\x03\x90\xF3[a\0\x98V[a\x06/_\x80a\x04\xA6V[\x90V[4a\x06bWa\x06B6`\x04a\x05\x80V[a\x06^a\x06Ma\x06%V[a\x06Ua\0\x92V[\x91\x82\x91\x82a\x053V[\x03\x90\xF3[a\0\x98V[_\x80\xFD[_\x1C\x90V[a\x06|a\x06\x81\x91a\x06kV[a\x05\x93V[\x90V[a\x06\x8E\x90Ta\x06pV[\x90V[` \x91\x81R\x01\x90V[_\x7FSequencer error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x06\xCE`\x0F` \x92a\x06\x91V[a\x06\xD7\x81a\x06\x9AV[\x01\x90V[a\x06\xF0\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x06\xC1V[\x90V[`\x01\x90\x81\x80\x03\x01\x04\x90V[\x90a\x07\x11\x90_\x19\x90` \x03`\x08\x02a\x05\x8FV[\x81T\x16\x90UV[\x1B\x90V[\x91\x90`\x08a\x077\x91\x02\x91a\x071_\x19\x84a\x07\x18V[\x92a\x07\x18V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x07Xa\x07Sa\x07]\x92a\x02\xB4V[a\x07AV[a\x02\xB4V[\x90V[\x90V[\x91\x90a\x07ya\x07ta\x07\x81\x93a\x07DV[a\x07`V[\x90\x83Ta\x07\x1CV[\x90UV[_\x90V[a\x07\x9B\x91a\x07\x95a\x07\x85V[\x91a\x07cV[V[[\x81\x81\x10a\x07\xA9WPPV[\x80a\x07\xB6_`\x01\x93a\x07\x89V[\x01a\x07\x9EV[\x90a\x07\xCC\x90_\x19\x90`\x08\x02a\x05\x8FV[\x19\x16\x90V[\x81a\x07\xDB\x91a\x07\xBCV[\x90`\x02\x02\x17\x90V[\x90_\x91a\x07\xFAa\x07\xF2\x82a\x03\x9BV[\x92\x83Ta\x07\xD1V[\x90UUV[`\x1F` \x91\x01\x04\x90V[\x91\x92\x90` \x82\x10_\x14a\x08bW`\x1F\x84\x11`\x01\x14a\x082Wa\x08,\x92\x93Pa\x07\xD1V[\x90U[[V[P\x90a\x08Xa\x08]\x93`\x01a\x08Oa\x08I\x85a\x03\x9BV[\x92a\x07\xFFV[\x82\x01\x91\x01a\x07\x9DV[a\x07\xE3V[a\x08/V[Pa\x08\x99\x82\x93a\x08s`\x01\x94a\x03\x9BV[a\x08\x92a\x08\x7F\x85a\x07\xFFV[\x82\x01\x92`\x1F\x86\x16\x80a\x08\xA4W[Pa\x07\xFFV[\x01\x90a\x07\x9DV[`\x02\x02\x17\x90Ua\x080V[a\x08\xB0\x90\x88\x86\x03a\x06\xFEV[_a\x08\x8CV[\x92\x90\x91h\x01\0\0\0\0\0\0\0\0\x82\x11a\t\x16W` \x11_\x14a\t\x07W` \x81\x10_\x14a\x08\xEBWa\x08\xE5\x91a\x07\xD1V[\x90U[[V[`\x01\x91`\xFF\x19\x16a\x08\xFB\x84a\x03\x9BV[U`\x02\x02\x01\x90Ua\x08\xE8V[`\x01\x91P`\x02\x02\x01\x90Ua\x08\xE9V[a\x04GV[\x90\x81Ta\t'\x81a\x03hV[\x90\x81\x83\x11a\tPW[\x81\x83\x10a\t>W[PPPPV[a\tG\x93a\x08\tV[_\x80\x80\x80a\t8V[a\t\\\x83\x83\x83\x87a\x08\xB6V[a\t0V[_a\tk\x91a\t\x1BV[V[\x90_\x03a\t\x7FWa\t}\x90a\taV[V[a\x03AV[[\x81\x81\x10a\t\x90WPPV[\x80a\t\x9D_`\x01\x93a\tmV[\x01a\t\x85V[\x90\x91\x82\x81\x10a\t\xB2W[PPPV[a\t\xD0a\t\xCAa\t\xC4a\t\xDB\x95a\x06\xF3V[\x92a\x06\xF3V[\x92a\x03\x10V[\x91\x82\x01\x91\x01\x90a\t\x84V[_\x80\x80a\t\xADV[\x90h\x01\0\0\0\0\0\0\0\0\x81\x11a\n\x0CW\x81a\n\x01a\n\n\x93a\x03\x0CV[\x90\x82\x81Ua\t\xA3V[V[a\x04GV[_a\n\x1B\x91a\t\xE3V[V[\x90_\x03a\n/Wa\n-\x90a\n\x11V[V[a\x03AV[\x90V[a\nKa\nFa\nP\x92a\n4V[a\x07AV[a\x02\xB4V[\x90V[`\x01a\n_\x91\x01a\x02\xB4V[\x90V[P\x90V[\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x905\x90`\x01` \x03\x816\x03\x03\x82\x12\x15a\n\xB7W\x01\x805\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\n\xB2W` \x01\x91`\x01\x82\x026\x03\x83\x13a\n\xADWV[a\nqV[a\nmV[a\niV[\x90\x82\x10\x15a\n\xD7W` a\n\xD3\x92\x02\x81\x01\x90a\nuV[\x90\x91V[a\x02\xF8V[_R` _ \x90V[T\x90V[a\n\xF2\x81a\n\xE5V[\x82\x10\x15a\x0B\x0CWa\x0B\x04`\x01\x91a\n\xDCV[\x91\x02\x01\x90_\x90V[a\x02\xF8V[P\x90V[\x91\x90`\x1F\x81\x11a\x0B%W[PPPV[a\x0B1a\x0BV\x93a\x03\x9BV[\x90` a\x0B=\x84a\x07\xFFV[\x83\x01\x93\x10a\x0B^W[a\x0BO\x90a\x07\xFFV[\x01\x90a\x07\x9DV[_\x80\x80a\x0B V[\x91Pa\x0BO\x81\x92\x90Pa\x0BFV[\x91a\x0Bw\x90\x82a\x0B\x11V[\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11a\x0C6Wa\x0B\x9B\x82a\x0B\x95\x85Ta\x03hV[\x85a\x0B\x15V[_\x90`\x1F\x83\x11`\x01\x14a\x0B\xCEW\x91\x80\x91a\x0B\xBD\x93_\x92a\x0B\xC2W[PPa\x07\xD1V[\x90U[V[\x90\x91P\x015_\x80a\x0B\xB6V[`\x1F\x19\x83\x16\x91a\x0B\xDD\x85a\x03\x9BV[\x92_[\x81\x81\x10a\x0C\x1EWP\x91`\x02\x93\x91\x85`\x01\x96\x94\x10a\x0C\x04W[PPP\x02\x01\x90Ua\x0B\xC0V[a\x0C\x14\x91\x015`\x1F\x84\x16\x90a\x07\xBCV[\x90U_\x80\x80a\x0B\xF8V[\x91\x93` `\x01\x81\x92\x87\x87\x015\x81U\x01\x95\x01\x92\x01a\x0B\xE0V[a\x04GV[\x92\x91\x90a\x0CMWa\x0CK\x92a\x0BlV[V[a\x03AV[\x91\x90\x82T\x92h\x01\0\0\0\0\0\0\0\0\x84\x10\x15a\x0C\x83W\x83a\x0C{\x91`\x01a\x0C\x81\x96\x01\x81Ua\n\xE9V[\x90a\x0C;V[V[a\x04GV[\x91\x90a\x0C\x94`\x02a\x06\x84V[a\r\x03Wa\x0C\xA3_`\x01a\n\x1DV[a\x0C\xAC_a\n7V[[\x80a\x0C\xCAa\x0C\xC4a\x0C\xBF\x87\x86\x90a\nbV[a\x02\xB4V[\x91a\x02\xB4V[\x10\x15a\x0C\xFDWa\x0C\xF8\x90a\x0C\xF3a\x0C\xE1`\x01a\nfV[a\x0C\xED\x87\x86\x85\x91a\n\xBCV[\x91a\x0CRV[a\nSV[a\x0C\xADV[PP\x90PV[a\r\x0Ba\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r!`\x04\x82\x01a\x06\xDBV[\x03\x90\xFD[\x90a\r0\x92\x91a\x0BlV[V[\x90a\r=`\x02a\x06\x84V[a\rMWa\rK\x91_a\r%V[V[a\rUa\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\rk`\x04\x82\x01a\x06\xDBV[\x03\x90\xFD[_\x1B\x90V[\x90a\r\x80`\xFF\x91a\roV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\r\x93\x90a\x02\x07V[\x90V[\x90V[\x90a\r\xAEa\r\xA9a\r\xB5\x92a\r\x8AV[a\r\x96V[\x82Ta\rtV[\x90UV[a\r\xC4\x90`\x02a\r\x99V[V[\x90a\r\xD1`\x02a\x06\x84V[a\r\xE1Wa\r\xDF\x91_a\r%V[V[a\r\xE9a\0\x92V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\r\xFF`\x04\x82\x01a\x06\xDBV[\x03\x90\xFD\xFE\xA2dipfsX\"\x12 d\x80\xB0\xF8\xAF\xBEa4>\x18\xFB\x1A~>\xD2\x15\xB5\xF2'wb*q\xEF\xFBQ=3\x8FW\x98UdsolcC\0\x08\x19\x003",
    );
    /**Function with signature `lastProcessedBulkData(uint256)` and selector `0x4a5b6b7e`.
```solidity
function lastProcessedBulkData(uint256) external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedBulkDataCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`lastProcessedBulkData(uint256)`](lastProcessedBulkDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedBulkDataReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedBulkDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedBulkDataCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedBulkDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedBulkDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedBulkDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedBulkDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastProcessedBulkDataCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastProcessedBulkDataReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastProcessedBulkData(uint256)";
            const SELECTOR: [u8; 4] = [74u8, 91u8, 107u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `lastProcessedData()` and selector `0xf352cd72`.
```solidity
function lastProcessedData() external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataCall {}
    ///Container type for the return parameters of the [`lastProcessedData()`](lastProcessedDataCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lastProcessedDataReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastProcessedDataReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastProcessedDataReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastProcessedDataReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastProcessedDataCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastProcessedDataReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastProcessedData()";
            const SELECTOR: [u8; 4] = [243u8, 82u8, 205u8, 114u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processBulkTransactions(bytes[])` and selector `0x0b83249d`.
```solidity
function processBulkTransactions(bytes[] memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    ///Container type for the return parameters of the [`processBulkTransactions(bytes[])`](processBulkTransactionsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processBulkTransactionsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processBulkTransactionsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processBulkTransactionsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processBulkTransactionsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processBulkTransactionsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processBulkTransactionsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processBulkTransactions(bytes[])";
            const SELECTOR: [u8; 4] = [11u8, 131u8, 36u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bytes,
                    > as alloy_sol_types::SolType>::tokenize(&self.data),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransaction(bytes)` and selector `0x46e2cc09`.
```solidity
function processTransaction(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransaction(bytes)`](processTransactionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransaction(bytes)";
            const SELECTOR: [u8; 4] = [70u8, 226u8, 204u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `processTransactionRaw(bytes)` and selector `0x3514d37b`.
```solidity
function processTransactionRaw(bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawCall {
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`processTransactionRaw(bytes)`](processTransactionRawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct processTransactionRawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<processTransactionRawReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: processTransactionRawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for processTransactionRawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for processTransactionRawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = processTransactionRawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "processTransactionRaw(bytes)";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 211u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setRevertFlag(bool)` and selector `0x381ba140`.
```solidity
function setRevertFlag(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setRevertFlag(bool)`](setRevertFlagCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setRevertFlagReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagCall> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setRevertFlagReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setRevertFlagReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setRevertFlagReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setRevertFlagCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setRevertFlagReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setRevertFlag(bool)";
            const SELECTOR: [u8; 4] = [56u8, 27u8, 161u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall {}
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = shouldRevertReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockSyndicateSequencingChain`](self) function calls.
    pub enum MockSyndicateSequencingChainCalls {
        #[allow(missing_docs)]
        lastProcessedBulkData(lastProcessedBulkDataCall),
        #[allow(missing_docs)]
        lastProcessedData(lastProcessedDataCall),
        #[allow(missing_docs)]
        processBulkTransactions(processBulkTransactionsCall),
        #[allow(missing_docs)]
        processTransaction(processTransactionCall),
        #[allow(missing_docs)]
        processTransactionRaw(processTransactionRawCall),
        #[allow(missing_docs)]
        setRevertFlag(setRevertFlagCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
    }
    #[automatically_derived]
    impl MockSyndicateSequencingChainCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [11u8, 131u8, 36u8, 157u8],
            [53u8, 20u8, 211u8, 123u8],
            [56u8, 27u8, 161u8, 64u8],
            [70u8, 226u8, 204u8, 9u8],
            [74u8, 91u8, 107u8, 126u8],
            [211u8, 7u8, 45u8, 130u8],
            [243u8, 82u8, 205u8, 114u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockSyndicateSequencingChainCalls {
        const NAME: &'static str = "MockSyndicateSequencingChainCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::lastProcessedBulkData(_) => {
                    <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastProcessedData(_) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processBulkTransactions(_) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransaction(_) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::processTransactionRaw(_) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setRevertFlag(_) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls>] = &[
                {
                    fn processBulkTransactions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::processBulkTransactions,
                            )
                    }
                    processBulkTransactions
                },
                {
                    fn processTransactionRaw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionRawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::processTransactionRaw,
                            )
                    }
                    processTransactionRaw
                },
                {
                    fn setRevertFlag(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <setRevertFlagCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockSyndicateSequencingChainCalls::setRevertFlag)
                    }
                    setRevertFlag
                },
                {
                    fn processTransaction(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <processTransactionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockSyndicateSequencingChainCalls::processTransaction)
                    }
                    processTransaction
                },
                {
                    fn lastProcessedBulkData(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MockSyndicateSequencingChainCalls::lastProcessedBulkData,
                            )
                    }
                    lastProcessedBulkData
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockSyndicateSequencingChainCalls::shouldRevert)
                    }
                    shouldRevert
                },
                {
                    fn lastProcessedData(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockSyndicateSequencingChainCalls> {
                        <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockSyndicateSequencingChainCalls::lastProcessedData)
                    }
                    lastProcessedData
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::lastProcessedBulkData(inner) => {
                    <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::lastProcessedBulkData(inner) => {
                    <lastProcessedBulkDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastProcessedData(inner) => {
                    <lastProcessedDataCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processBulkTransactions(inner) => {
                    <processBulkTransactionsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransaction(inner) => {
                    <processTransactionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::processTransactionRaw(inner) => {
                    <processTransactionRawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setRevertFlag(inner) => {
                    <setRevertFlagCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockSyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`MockSyndicateSequencingChainInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockSyndicateSequencingChainInstance<T, P, N> {
        MockSyndicateSequencingChainInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockSyndicateSequencingChainInstance<T, P, N>>,
    > {
        MockSyndicateSequencingChainInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockSyndicateSequencingChainInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockSyndicateSequencingChain`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockSyndicateSequencingChain`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockSyndicateSequencingChainInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockSyndicateSequencingChainInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockSyndicateSequencingChainInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockSyndicateSequencingChainInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockSyndicateSequencingChain`](self) contract instance.

See the [wrapper's documentation](`MockSyndicateSequencingChainInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockSyndicateSequencingChainInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockSyndicateSequencingChainInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> MockSyndicateSequencingChainInstance<T, P, N> {
            MockSyndicateSequencingChainInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockSyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`lastProcessedBulkData`] function.
        pub fn lastProcessedBulkData(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastProcessedBulkDataCall, N> {
            self.call_builder(&lastProcessedBulkDataCall { _0 })
        }
        ///Creates a new call builder for the [`lastProcessedData`] function.
        pub fn lastProcessedData(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastProcessedDataCall, N> {
            self.call_builder(&lastProcessedDataCall {})
        }
        ///Creates a new call builder for the [`processBulkTransactions`] function.
        pub fn processBulkTransactions(
            &self,
            data: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
        ) -> alloy_contract::SolCallBuilder<T, &P, processBulkTransactionsCall, N> {
            self.call_builder(
                &processBulkTransactionsCall {
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`processTransaction`] function.
        pub fn processTransaction(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionCall, N> {
            self.call_builder(&processTransactionCall { data })
        }
        ///Creates a new call builder for the [`processTransactionRaw`] function.
        pub fn processTransactionRaw(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, processTransactionRawCall, N> {
            self.call_builder(&processTransactionRawCall { data })
        }
        ///Creates a new call builder for the [`setRevertFlag`] function.
        pub fn setRevertFlag(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setRevertFlagCall, N> {
            self.call_builder(&setRevertFlagCall { _shouldRevert })
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockSyndicateSequencingChainInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
