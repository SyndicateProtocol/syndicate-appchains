/**

Generated by the following Solidity interface...
```solidity
interface MintSYNDToAddresses {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function synd() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "synd",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract TestnetSyndToken"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MintSYNDToAddresses {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c55610735908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908163a5220ded146105b557508063c0406226146100855763f8ccbf471461003f575f80fd5b3461008257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008257602060ff600c5460101c166040519015158152f35b80fd5b50346105b1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105b157737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105b1576040517f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156105a657610593575b5060405161012c60a082610606565b60048152608090813660208301377319aaf160da8985c54bb97adaf9304b5ac789042161015882610674565b527337d911cbd7bb03521a975ec2de03ce1dd0156883610177826106ae565b52739a0ef1333681b357047282144dc06d7daa1f76ba610196826106be565b527328fab3a5b69711cc64b09240d2694d9f0f07ebf66101b5826106ce565b52604051916101c560a084610606565b60048352366020840137680ad78ebc5ac62000006101e283610674565b52680ad78ebc5ac62000006101f6836106ae565b52680ad78ebc5ac620000061020a836106be565b52680ad78ebc5ac620000061021e836106ce565b527655f6e82a8bf5736d46837246dcbeaf7e61b3c27c0000007fffffffffffffffffff0000000000000000000000000000000000000000ffffff600c541617600c55825b81518110156105155773ffffffffffffffffffffffffffffffffffffffff61028a82846106de565b5116156104b7578373ffffffffffffffffffffffffffffffffffffffff600c5460181c1673ffffffffffffffffffffffffffffffffffffffff6102cd84866106de565b51166102d984876106de565b51823b156104a857604484928360405195869485937f40c10f19000000000000000000000000000000000000000000000000000000008552600485015260248401525af180156104ac57610493575b50908160019261033883876106de565b5173ffffffffffffffffffffffffffffffffffffffff61035885886106de565b51169061047c6040519261036d604085610606565b600684527f4d696e74656400000000000000000000000000000000000000000000000000006020850152604051906103a6604083610606565b600782527f53594e4420746f00000000000000000000000000000000000000000000000000602083015261044a60405194859361041560208601987f7c4632a4000000000000000000000000000000000000000000000000000000008a526080602488015260a48701906106f2565b9160448601527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8583030160648601526106f2565b906084830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610606565b51906a636f6e736f6c652e6c6f675afa5001610262565b8161049d91610606565b6104a857835f610328565b8380fd5b6040513d84823e3d90fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152fd5b83737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561008257806040517f76eadd36000000000000000000000000000000000000000000000000000000008152818160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156104ac576105825750f35b8161058c91610606565b6100825780f35b61059f91505f90610606565b5f5f61011d565b6040513d5f823e3d90fd5b5f80fd5b346105b1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105b15760209073ffffffffffffffffffffffffffffffffffffffff600c5460181c168152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761064757604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8051156106815760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156106815760400190565b8051600210156106815760600190565b8051600310156106815760800190565b80518210156106815760209160051b010190565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x075\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xA5\"\r\xED\x14a\x05\xB5WP\x80c\xC0@b&\x14a\0\x85Wc\xF8\xCC\xBFG\x14a\0?W_\x80\xFD[4a\0\x82W\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x82W` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[P4a\x05\xB1W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x05\xB1Wsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x05\xB1W`@Q\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x05\xA6Wa\x05\x93W[P`@Qa\x01,`\xA0\x82a\x06\x06V[`\x04\x81R`\x80\x90\x816` \x83\x017s\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!a\x01X\x82a\x06tV[Rs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x01w\x82a\x06\xAEV[Rs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBAa\x01\x96\x82a\x06\xBEV[Rs(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6a\x01\xB5\x82a\x06\xCEV[R`@Q\x91a\x01\xC5`\xA0\x84a\x06\x06V[`\x04\x83R6` \x84\x017h\n\xD7\x8E\xBCZ\xC6 \0\0a\x01\xE2\x83a\x06tV[Rh\n\xD7\x8E\xBCZ\xC6 \0\0a\x01\xF6\x83a\x06\xAEV[Rh\n\xD7\x8E\xBCZ\xC6 \0\0a\x02\n\x83a\x06\xBEV[Rh\n\xD7\x8E\xBCZ\xC6 \0\0a\x02\x1E\x83a\x06\xCEV[RvU\xF6\xE8*\x8B\xF5smF\x83rF\xDC\xBE\xAF~a\xB3\xC2|\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xFF\xFF\xFF`\x0CT\x16\x17`\x0CU\x82[\x81Q\x81\x10\x15a\x05\x15Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\x8A\x82\x84a\x06\xDEV[Q\x16\x15a\x04\xB7W\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x0CT`\x18\x1C\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\xCD\x84\x86a\x06\xDEV[Q\x16a\x02\xD9\x84\x87a\x06\xDEV[Q\x82;\x15a\x04\xA8W`D\x84\x92\x83`@Q\x95\x86\x94\x85\x93\x7F@\xC1\x0F\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x04\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x04\xACWa\x04\x93W[P\x90\x81`\x01\x92a\x038\x83\x87a\x06\xDEV[Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03X\x85\x88a\x06\xDEV[Q\x16\x90a\x04|`@Q\x92a\x03m`@\x85a\x06\x06V[`\x06\x84R\x7FMinted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@Q\x90a\x03\xA6`@\x83a\x06\x06V[`\x07\x82R\x7FSYND to\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01Ra\x04J`@Q\x94\x85\x93a\x04\x15` \x86\x01\x98\x7F|F2\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8AR`\x80`$\x88\x01R`\xA4\x87\x01\x90a\x06\xF2V[\x91`D\x86\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x85\x83\x03\x01`d\x86\x01Ra\x06\xF2V[\x90`\x84\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x06V[Q\x90jconsole.logZ\xFAP\x01a\x02bV[\x81a\x04\x9D\x91a\x06\x06V[a\x04\xA8W\x83_a\x03(V[\x83\x80\xFD[`@Q=\x84\x82>=\x90\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\0\x82W\x80`@Q\x7Fv\xEA\xDD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x04\xACWa\x05\x82WP\xF3[\x81a\x05\x8C\x91a\x06\x06V[a\0\x82W\x80\xF3[a\x05\x9F\x91P_\x90a\x06\x06V[__a\x01\x1DV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x05\xB1W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x05\xB1W` \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x0CT`\x18\x1C\x16\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06GW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x80Q\x15a\x06\x81W` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80Q`\x01\x10\x15a\x06\x81W`@\x01\x90V[\x80Q`\x02\x10\x15a\x06\x81W``\x01\x90V[\x80Q`\x03\x10\x15a\x06\x81W`\x80\x01\x90V[\x80Q\x82\x10\x15a\x06\x81W` \x91`\x05\x1B\x01\x01\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c908163a5220ded146105b557508063c0406226146100855763f8ccbf471461003f575f80fd5b3461008257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008257602060ff600c5460101c166040519015158152f35b80fd5b50346105b1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105b157737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105b1576040517f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156105a657610593575b5060405161012c60a082610606565b60048152608090813660208301377319aaf160da8985c54bb97adaf9304b5ac789042161015882610674565b527337d911cbd7bb03521a975ec2de03ce1dd0156883610177826106ae565b52739a0ef1333681b357047282144dc06d7daa1f76ba610196826106be565b527328fab3a5b69711cc64b09240d2694d9f0f07ebf66101b5826106ce565b52604051916101c560a084610606565b60048352366020840137680ad78ebc5ac62000006101e283610674565b52680ad78ebc5ac62000006101f6836106ae565b52680ad78ebc5ac620000061020a836106be565b52680ad78ebc5ac620000061021e836106ce565b527655f6e82a8bf5736d46837246dcbeaf7e61b3c27c0000007fffffffffffffffffff0000000000000000000000000000000000000000ffffff600c541617600c55825b81518110156105155773ffffffffffffffffffffffffffffffffffffffff61028a82846106de565b5116156104b7578373ffffffffffffffffffffffffffffffffffffffff600c5460181c1673ffffffffffffffffffffffffffffffffffffffff6102cd84866106de565b51166102d984876106de565b51823b156104a857604484928360405195869485937f40c10f19000000000000000000000000000000000000000000000000000000008552600485015260248401525af180156104ac57610493575b50908160019261033883876106de565b5173ffffffffffffffffffffffffffffffffffffffff61035885886106de565b51169061047c6040519261036d604085610606565b600684527f4d696e74656400000000000000000000000000000000000000000000000000006020850152604051906103a6604083610606565b600782527f53594e4420746f00000000000000000000000000000000000000000000000000602083015261044a60405194859361041560208601987f7c4632a4000000000000000000000000000000000000000000000000000000008a526080602488015260a48701906106f2565b9160448601527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc8583030160648601526106f2565b906084830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610606565b51906a636f6e736f6c652e6c6f675afa5001610262565b8161049d91610606565b6104a857835f610328565b8380fd5b6040513d84823e3d90fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c6964206164647265737300000000000000000000000000000000006044820152fd5b83737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561008257806040517f76eadd36000000000000000000000000000000000000000000000000000000008152818160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156104ac576105825750f35b8161058c91610606565b6100825780f35b61059f91505f90610606565b5f5f61011d565b6040513d5f823e3d90fd5b5f80fd5b346105b1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105b15760209073ffffffffffffffffffffffffffffffffffffffff600c5460181c168152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761064757604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8051156106815760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156106815760400190565b8051600210156106815760600190565b8051600310156106815760800190565b80518210156106815760209160051b010190565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f858286010152011601019056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xA5\"\r\xED\x14a\x05\xB5WP\x80c\xC0@b&\x14a\0\x85Wc\xF8\xCC\xBFG\x14a\0?W_\x80\xFD[4a\0\x82W\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x82W` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[P4a\x05\xB1W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x05\xB1Wsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x05\xB1W`@Q\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x05\xA6Wa\x05\x93W[P`@Qa\x01,`\xA0\x82a\x06\x06V[`\x04\x81R`\x80\x90\x816` \x83\x017s\x19\xAA\xF1`\xDA\x89\x85\xC5K\xB9z\xDA\xF90KZ\xC7\x89\x04!a\x01X\x82a\x06tV[Rs7\xD9\x11\xCB\xD7\xBB\x03R\x1A\x97^\xC2\xDE\x03\xCE\x1D\xD0\x15h\x83a\x01w\x82a\x06\xAEV[Rs\x9A\x0E\xF136\x81\xB3W\x04r\x82\x14M\xC0m}\xAA\x1Fv\xBAa\x01\x96\x82a\x06\xBEV[Rs(\xFA\xB3\xA5\xB6\x97\x11\xCCd\xB0\x92@\xD2iM\x9F\x0F\x07\xEB\xF6a\x01\xB5\x82a\x06\xCEV[R`@Q\x91a\x01\xC5`\xA0\x84a\x06\x06V[`\x04\x83R6` \x84\x017h\n\xD7\x8E\xBCZ\xC6 \0\0a\x01\xE2\x83a\x06tV[Rh\n\xD7\x8E\xBCZ\xC6 \0\0a\x01\xF6\x83a\x06\xAEV[Rh\n\xD7\x8E\xBCZ\xC6 \0\0a\x02\n\x83a\x06\xBEV[Rh\n\xD7\x8E\xBCZ\xC6 \0\0a\x02\x1E\x83a\x06\xCEV[RvU\xF6\xE8*\x8B\xF5smF\x83rF\xDC\xBE\xAF~a\xB3\xC2|\0\0\0\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xFF\xFF\xFF`\x0CT\x16\x17`\x0CU\x82[\x81Q\x81\x10\x15a\x05\x15Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\x8A\x82\x84a\x06\xDEV[Q\x16\x15a\x04\xB7W\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x0CT`\x18\x1C\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x02\xCD\x84\x86a\x06\xDEV[Q\x16a\x02\xD9\x84\x87a\x06\xDEV[Q\x82;\x15a\x04\xA8W`D\x84\x92\x83`@Q\x95\x86\x94\x85\x93\x7F@\xC1\x0F\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85R`\x04\x85\x01R`$\x84\x01RZ\xF1\x80\x15a\x04\xACWa\x04\x93W[P\x90\x81`\x01\x92a\x038\x83\x87a\x06\xDEV[Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFa\x03X\x85\x88a\x06\xDEV[Q\x16\x90a\x04|`@Q\x92a\x03m`@\x85a\x06\x06V[`\x06\x84R\x7FMinted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@Q\x90a\x03\xA6`@\x83a\x06\x06V[`\x07\x82R\x7FSYND to\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01Ra\x04J`@Q\x94\x85\x93a\x04\x15` \x86\x01\x98\x7F|F2\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8AR`\x80`$\x88\x01R`\xA4\x87\x01\x90a\x06\xF2V[\x91`D\x86\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x85\x83\x03\x01`d\x86\x01Ra\x06\xF2V[\x90`\x84\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x06\x06V[Q\x90jconsole.logZ\xFAP\x01a\x02bV[\x81a\x04\x9D\x91a\x06\x06V[a\x04\xA8W\x83_a\x03(V[\x83\x80\xFD[`@Q=\x84\x82>=\x90\xFD[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FInvalid address\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\0\x82W\x80`@Q\x7Fv\xEA\xDD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x04\xACWa\x05\x82WP\xF3[\x81a\x05\x8C\x91a\x06\x06V[a\0\x82W\x80\xF3[a\x05\x9F\x91P_\x90a\x06\x06V[__a\x01\x1DV[`@Q=_\x82>=\x90\xFD[_\x80\xFD[4a\x05\xB1W_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x05\xB1W` \x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x0CT`\x18\x1C\x16\x81R\xF3[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x06GW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x80Q\x15a\x06\x81W` \x01\x90V[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x80Q`\x01\x10\x15a\x06\x81W`@\x01\x90V[\x80Q`\x02\x10\x15a\x06\x81W``\x01\x90V[\x80Q`\x03\x10\x15a\x06\x81W`\x80\x01\x90V[\x80Q\x82\x10\x15a\x06\x81W` \x91`\x05\x1B\x01\x01\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `synd()` and selector `0xa5220ded`.
```solidity
function synd() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndCall {}
    ///Container type for the return parameters of the [`synd()`](syndCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct syndReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndCall> for UnderlyingRustTuple<'_> {
                fn from(value: syndCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<syndReturn> for UnderlyingRustTuple<'_> {
                fn from(value: syndReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for syndReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for syndCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = syndReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "synd()";
            const SELECTOR: [u8; 4] = [165u8, 34u8, 13u8, 237u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MintSYNDToAddresses`](self) function calls.
    pub enum MintSYNDToAddressesCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
        #[allow(missing_docs)]
        synd(syndCall),
    }
    #[automatically_derived]
    impl MintSYNDToAddressesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [165u8, 34u8, 13u8, 237u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MintSYNDToAddressesCalls {
        const NAME: &'static str = "MintSYNDToAddressesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::synd(_) => <syndCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls>] = &[
                {
                    fn synd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <syndCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::synd)
                    }
                    synd
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MintSYNDToAddressesCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MintSYNDToAddressesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::synd(inner) => {
                    <syndCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MintSYNDToAddressesInstance<T, P, N> {
        MintSYNDToAddressesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MintSYNDToAddressesInstance<T, P, N>>,
    > {
        MintSYNDToAddressesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MintSYNDToAddressesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MintSYNDToAddresses`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MintSYNDToAddresses`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MintSYNDToAddressesInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MintSYNDToAddressesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MintSYNDToAddressesInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MintSYNDToAddresses`](self) contract instance.

See the [wrapper's documentation](`MintSYNDToAddressesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MintSYNDToAddressesInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MintSYNDToAddressesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MintSYNDToAddressesInstance<T, P, N> {
            MintSYNDToAddressesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`synd`] function.
        pub fn synd(&self) -> alloy_contract::SolCallBuilder<T, &P, syndCall, N> {
            self.call_builder(&syndCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MintSYNDToAddressesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
