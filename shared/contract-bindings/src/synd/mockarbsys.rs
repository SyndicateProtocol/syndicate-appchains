/**

Generated by the following Solidity interface...
```solidity
interface MockArbSys {
    constructor(uint256 _blockNumber);

    function arbBlockNumber() external view returns (uint256);
    function blockNumber() external view returns (uint256);
    function setBlockNumber(uint256 _blockNumber) external;
    function setShouldRevert(bool _shouldRevert) external;
    function shouldRevert() external view returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "arbBlockNumber",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "blockNumber",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setBlockNumber",
    "inputs": [
      {
        "name": "_blockNumber",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setShouldRevert",
    "inputs": [
      {
        "name": "_shouldRevert",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "shouldRevert",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockArbSys {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100e0565b61015e565b610021610034565b61048e61016b823961048e90f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b90565b6100a88161009c565b036100af57565b5f80fd5b905051906100c08261009f565b565b906020828203126100db576100d8915f016100b3565b90565b610098565b6100fe6105f9803803806100f381610083565b9283398101906100c2565b90565b5f1b90565b906101125f1991610101565b9181191691161790565b90565b61013361012e6101389261009c565b61011c565b61009c565b90565b90565b9061015361014e61015a9261011f565b61013b565b8254610106565b9055565b610168905f61013e565b56fe60806040526004361015610013575b6102dd565b61001d5f3561006c565b806357e871e7146100675780636813d78714610062578063a3b1b31d1461005d578063a8c3c850146100585763d3072d820361000e576102a8565b610218565b6101a2565b61016f565b6100ef565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261008a57565b61007c565b1c90565b90565b6100a69060086100ab930261008f565b610093565b90565b906100b99154610096565b90565b6100c75f5f906100ae565b90565b90565b6100d6906100ca565b9052565b91906100ed905f602085019401906100cd565b565b3461011f576100ff366004610080565b61011b61010a6100bc565b610112610072565b918291826100da565b0390f35b610078565b151590565b61013281610124565b0361013957565b5f80fd5b9050359061014a82610129565b565b9060208282031261016557610162915f0161013d565b90565b61007c565b5f0190565b3461019d5761018761018236600461014c565b61032b565b61018f610072565b806101998161016a565b0390f35b610078565b346101d2576101b2366004610080565b6101ce6101bd6103e5565b6101c5610072565b918291826100da565b0390f35b610078565b6101e0816100ca565b036101e757565b5f80fd5b905035906101f8826101d7565b565b9060208282031261021357610210915f016101eb565b90565b61007c565b346102465761023061022b3660046101fa565b610482565b610238610072565b806102428161016a565b0390f35b610078565b60ff1690565b610261906008610266930261008f565b61024b565b90565b906102749154610251565b90565b61028360015f90610269565b90565b61028f90610124565b9052565b91906102a6905f60208501940190610286565b565b346102d8576102b8366004610080565b6102d46102c3610277565b6102cb610072565b91829182610293565b0390f35b610078565b5f80fd5b5f1b90565b906102f260ff916102e1565b9181191691161790565b61030590610124565b90565b90565b9061032061031b610327926102fc565b610308565b82546102e6565b9055565b61033690600161030b565b565b5f90565b5f1c90565b61034d6103529161033c565b61024b565b90565b61035f9054610341565b90565b60209181520190565b5f7f4d6f636b20417262537973206572726f72000000000000000000000000000000910152565b61039f6011602092610362565b6103a88161036b565b0190565b6103c19060208101905f818303910152610392565b90565b6103d06103d59161033c565b610093565b90565b6103e290546103c4565b90565b6103ed610338565b506103f86001610355565b610408576104055f6103d8565b90565b610410610072565b62461bcd60e51b815280610426600482016103ac565b0390fd5b906104365f19916102e1565b9181191691161790565b90565b61045761045261045c926100ca565b610440565b6100ca565b90565b90565b9061047761047261047e92610443565b61045f565b825461042a565b9055565b61048c905f610462565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xE0V[a\x01^V[a\0!a\x004V[a\x04\x8Ea\x01k\x829a\x04\x8E\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[\x90V[a\0\xA8\x81a\0\x9CV[\x03a\0\xAFWV[_\x80\xFD[\x90PQ\x90a\0\xC0\x82a\0\x9FV[V[\x90` \x82\x82\x03\x12a\0\xDBWa\0\xD8\x91_\x01a\0\xB3V[\x90V[a\0\x98V[a\0\xFEa\x05\xF9\x808\x03\x80a\0\xF3\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xC2V[\x90V[_\x1B\x90V[\x90a\x01\x12_\x19\x91a\x01\x01V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x013a\x01.a\x018\x92a\0\x9CV[a\x01\x1CV[a\0\x9CV[\x90V[\x90V[\x90a\x01Sa\x01Na\x01Z\x92a\x01\x1FV[a\x01;V[\x82Ta\x01\x06V[\x90UV[a\x01h\x90_a\x01>V[V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xDDV[a\0\x1D_5a\0lV[\x80cW\xE8q\xE7\x14a\0gW\x80ch\x13\xD7\x87\x14a\0bW\x80c\xA3\xB1\xB3\x1D\x14a\0]W\x80c\xA8\xC3\xC8P\x14a\0XWc\xD3\x07-\x82\x03a\0\x0EWa\x02\xA8V[a\x02\x18V[a\x01\xA2V[a\x01oV[a\0\xEFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\x8AWV[a\0|V[\x1C\x90V[\x90V[a\0\xA6\x90`\x08a\0\xAB\x93\x02a\0\x8FV[a\0\x93V[\x90V[\x90a\0\xB9\x91Ta\0\x96V[\x90V[a\0\xC7__\x90a\0\xAEV[\x90V[\x90V[a\0\xD6\x90a\0\xCAV[\x90RV[\x91\x90a\0\xED\x90_` \x85\x01\x94\x01\x90a\0\xCDV[V[4a\x01\x1FWa\0\xFF6`\x04a\0\x80V[a\x01\x1Ba\x01\na\0\xBCV[a\x01\x12a\0rV[\x91\x82\x91\x82a\0\xDAV[\x03\x90\xF3[a\0xV[\x15\x15\x90V[a\x012\x81a\x01$V[\x03a\x019WV[_\x80\xFD[\x90P5\x90a\x01J\x82a\x01)V[V[\x90` \x82\x82\x03\x12a\x01eWa\x01b\x91_\x01a\x01=V[\x90V[a\0|V[_\x01\x90V[4a\x01\x9DWa\x01\x87a\x01\x826`\x04a\x01LV[a\x03+V[a\x01\x8Fa\0rV[\x80a\x01\x99\x81a\x01jV[\x03\x90\xF3[a\0xV[4a\x01\xD2Wa\x01\xB26`\x04a\0\x80V[a\x01\xCEa\x01\xBDa\x03\xE5V[a\x01\xC5a\0rV[\x91\x82\x91\x82a\0\xDAV[\x03\x90\xF3[a\0xV[a\x01\xE0\x81a\0\xCAV[\x03a\x01\xE7WV[_\x80\xFD[\x90P5\x90a\x01\xF8\x82a\x01\xD7V[V[\x90` \x82\x82\x03\x12a\x02\x13Wa\x02\x10\x91_\x01a\x01\xEBV[\x90V[a\0|V[4a\x02FWa\x020a\x02+6`\x04a\x01\xFAV[a\x04\x82V[a\x028a\0rV[\x80a\x02B\x81a\x01jV[\x03\x90\xF3[a\0xV[`\xFF\x16\x90V[a\x02a\x90`\x08a\x02f\x93\x02a\0\x8FV[a\x02KV[\x90V[\x90a\x02t\x91Ta\x02QV[\x90V[a\x02\x83`\x01_\x90a\x02iV[\x90V[a\x02\x8F\x90a\x01$V[\x90RV[\x91\x90a\x02\xA6\x90_` \x85\x01\x94\x01\x90a\x02\x86V[V[4a\x02\xD8Wa\x02\xB86`\x04a\0\x80V[a\x02\xD4a\x02\xC3a\x02wV[a\x02\xCBa\0rV[\x91\x82\x91\x82a\x02\x93V[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x1B\x90V[\x90a\x02\xF2`\xFF\x91a\x02\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x05\x90a\x01$V[\x90V[\x90V[\x90a\x03 a\x03\x1Ba\x03'\x92a\x02\xFCV[a\x03\x08V[\x82Ta\x02\xE6V[\x90UV[a\x036\x90`\x01a\x03\x0BV[V[_\x90V[_\x1C\x90V[a\x03Ma\x03R\x91a\x03<V[a\x02KV[\x90V[a\x03_\x90Ta\x03AV[\x90V[` \x91\x81R\x01\x90V[_\x7FMock ArbSys error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x9F`\x11` \x92a\x03bV[a\x03\xA8\x81a\x03kV[\x01\x90V[a\x03\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\x92V[\x90V[a\x03\xD0a\x03\xD5\x91a\x03<V[a\0\x93V[\x90V[a\x03\xE2\x90Ta\x03\xC4V[\x90V[a\x03\xEDa\x038V[Pa\x03\xF8`\x01a\x03UV[a\x04\x08Wa\x04\x05_a\x03\xD8V[\x90V[a\x04\x10a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04&`\x04\x82\x01a\x03\xACV[\x03\x90\xFD[\x90a\x046_\x19\x91a\x02\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x04Wa\x04Ra\x04\\\x92a\0\xCAV[a\x04@V[a\0\xCAV[\x90V[\x90V[\x90a\x04wa\x04ra\x04~\x92a\x04CV[a\x04_V[\x82Ta\x04*V[\x90UV[a\x04\x8C\x90_a\x04bV[V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b6102dd565b61001d5f3561006c565b806357e871e7146100675780636813d78714610062578063a3b1b31d1461005d578063a8c3c850146100585763d3072d820361000e576102a8565b610218565b6101a2565b61016f565b6100ef565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f91031261008a57565b61007c565b1c90565b90565b6100a69060086100ab930261008f565b610093565b90565b906100b99154610096565b90565b6100c75f5f906100ae565b90565b90565b6100d6906100ca565b9052565b91906100ed905f602085019401906100cd565b565b3461011f576100ff366004610080565b61011b61010a6100bc565b610112610072565b918291826100da565b0390f35b610078565b151590565b61013281610124565b0361013957565b5f80fd5b9050359061014a82610129565b565b9060208282031261016557610162915f0161013d565b90565b61007c565b5f0190565b3461019d5761018761018236600461014c565b61032b565b61018f610072565b806101998161016a565b0390f35b610078565b346101d2576101b2366004610080565b6101ce6101bd6103e5565b6101c5610072565b918291826100da565b0390f35b610078565b6101e0816100ca565b036101e757565b5f80fd5b905035906101f8826101d7565b565b9060208282031261021357610210915f016101eb565b90565b61007c565b346102465761023061022b3660046101fa565b610482565b610238610072565b806102428161016a565b0390f35b610078565b60ff1690565b610261906008610266930261008f565b61024b565b90565b906102749154610251565b90565b61028360015f90610269565b90565b61028f90610124565b9052565b91906102a6905f60208501940190610286565b565b346102d8576102b8366004610080565b6102d46102c3610277565b6102cb610072565b91829182610293565b0390f35b610078565b5f80fd5b5f1b90565b906102f260ff916102e1565b9181191691161790565b61030590610124565b90565b90565b9061032061031b610327926102fc565b610308565b82546102e6565b9055565b61033690600161030b565b565b5f90565b5f1c90565b61034d6103529161033c565b61024b565b90565b61035f9054610341565b90565b60209181520190565b5f7f4d6f636b20417262537973206572726f72000000000000000000000000000000910152565b61039f6011602092610362565b6103a88161036b565b0190565b6103c19060208101905f818303910152610392565b90565b6103d06103d59161033c565b610093565b90565b6103e290546103c4565b90565b6103ed610338565b506103f86001610355565b610408576104055f6103d8565b90565b610410610072565b62461bcd60e51b815280610426600482016103ac565b0390fd5b906104365f19916102e1565b9181191691161790565b90565b61045761045261045c926100ca565b610440565b6100ca565b90565b90565b9061047761047261047e92610443565b61045f565b825461042a565b9055565b61048c905f610462565b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x02\xDDV[a\0\x1D_5a\0lV[\x80cW\xE8q\xE7\x14a\0gW\x80ch\x13\xD7\x87\x14a\0bW\x80c\xA3\xB1\xB3\x1D\x14a\0]W\x80c\xA8\xC3\xC8P\x14a\0XWc\xD3\x07-\x82\x03a\0\x0EWa\x02\xA8V[a\x02\x18V[a\x01\xA2V[a\x01oV[a\0\xEFV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x91\x03\x12a\0\x8AWV[a\0|V[\x1C\x90V[\x90V[a\0\xA6\x90`\x08a\0\xAB\x93\x02a\0\x8FV[a\0\x93V[\x90V[\x90a\0\xB9\x91Ta\0\x96V[\x90V[a\0\xC7__\x90a\0\xAEV[\x90V[\x90V[a\0\xD6\x90a\0\xCAV[\x90RV[\x91\x90a\0\xED\x90_` \x85\x01\x94\x01\x90a\0\xCDV[V[4a\x01\x1FWa\0\xFF6`\x04a\0\x80V[a\x01\x1Ba\x01\na\0\xBCV[a\x01\x12a\0rV[\x91\x82\x91\x82a\0\xDAV[\x03\x90\xF3[a\0xV[\x15\x15\x90V[a\x012\x81a\x01$V[\x03a\x019WV[_\x80\xFD[\x90P5\x90a\x01J\x82a\x01)V[V[\x90` \x82\x82\x03\x12a\x01eWa\x01b\x91_\x01a\x01=V[\x90V[a\0|V[_\x01\x90V[4a\x01\x9DWa\x01\x87a\x01\x826`\x04a\x01LV[a\x03+V[a\x01\x8Fa\0rV[\x80a\x01\x99\x81a\x01jV[\x03\x90\xF3[a\0xV[4a\x01\xD2Wa\x01\xB26`\x04a\0\x80V[a\x01\xCEa\x01\xBDa\x03\xE5V[a\x01\xC5a\0rV[\x91\x82\x91\x82a\0\xDAV[\x03\x90\xF3[a\0xV[a\x01\xE0\x81a\0\xCAV[\x03a\x01\xE7WV[_\x80\xFD[\x90P5\x90a\x01\xF8\x82a\x01\xD7V[V[\x90` \x82\x82\x03\x12a\x02\x13Wa\x02\x10\x91_\x01a\x01\xEBV[\x90V[a\0|V[4a\x02FWa\x020a\x02+6`\x04a\x01\xFAV[a\x04\x82V[a\x028a\0rV[\x80a\x02B\x81a\x01jV[\x03\x90\xF3[a\0xV[`\xFF\x16\x90V[a\x02a\x90`\x08a\x02f\x93\x02a\0\x8FV[a\x02KV[\x90V[\x90a\x02t\x91Ta\x02QV[\x90V[a\x02\x83`\x01_\x90a\x02iV[\x90V[a\x02\x8F\x90a\x01$V[\x90RV[\x91\x90a\x02\xA6\x90_` \x85\x01\x94\x01\x90a\x02\x86V[V[4a\x02\xD8Wa\x02\xB86`\x04a\0\x80V[a\x02\xD4a\x02\xC3a\x02wV[a\x02\xCBa\0rV[\x91\x82\x91\x82a\x02\x93V[\x03\x90\xF3[a\0xV[_\x80\xFD[_\x1B\x90V[\x90a\x02\xF2`\xFF\x91a\x02\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x03\x05\x90a\x01$V[\x90V[\x90V[\x90a\x03 a\x03\x1Ba\x03'\x92a\x02\xFCV[a\x03\x08V[\x82Ta\x02\xE6V[\x90UV[a\x036\x90`\x01a\x03\x0BV[V[_\x90V[_\x1C\x90V[a\x03Ma\x03R\x91a\x03<V[a\x02KV[\x90V[a\x03_\x90Ta\x03AV[\x90V[` \x91\x81R\x01\x90V[_\x7FMock ArbSys error\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x03\x9F`\x11` \x92a\x03bV[a\x03\xA8\x81a\x03kV[\x01\x90V[a\x03\xC1\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x03\x92V[\x90V[a\x03\xD0a\x03\xD5\x91a\x03<V[a\0\x93V[\x90V[a\x03\xE2\x90Ta\x03\xC4V[\x90V[a\x03\xEDa\x038V[Pa\x03\xF8`\x01a\x03UV[a\x04\x08Wa\x04\x05_a\x03\xD8V[\x90V[a\x04\x10a\0rV[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x04&`\x04\x82\x01a\x03\xACV[\x03\x90\xFD[\x90a\x046_\x19\x91a\x02\xE1V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[a\x04Wa\x04Ra\x04\\\x92a\0\xCAV[a\x04@V[a\0\xCAV[\x90V[\x90V[\x90a\x04wa\x04ra\x04~\x92a\x04CV[a\x04_V[\x82Ta\x04*V[\x90UV[a\x04\x8C\x90_a\x04bV[V",
    );
    /**Constructor`.
```solidity
constructor(uint256 _blockNumber);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._blockNumber,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _blockNumber: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._blockNumber),
                )
            }
        }
    };
    /**Function with signature `arbBlockNumber()` and selector `0xa3b1b31d`.
```solidity
function arbBlockNumber() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arbBlockNumberCall {}
    ///Container type for the return parameters of the [`arbBlockNumber()`](arbBlockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct arbBlockNumberReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arbBlockNumberCall> for UnderlyingRustTuple<'_> {
                fn from(value: arbBlockNumberCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for arbBlockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<arbBlockNumberReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: arbBlockNumberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for arbBlockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for arbBlockNumberCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = arbBlockNumberReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "arbBlockNumber()";
            const SELECTOR: [u8; 4] = [163u8, 177u8, 179u8, 29u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `blockNumber()` and selector `0x57e871e7`.
```solidity
function blockNumber() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockNumberCall {}
    ///Container type for the return parameters of the [`blockNumber()`](blockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct blockNumberReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockNumberCall> for UnderlyingRustTuple<'_> {
                fn from(value: blockNumberCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<blockNumberReturn> for UnderlyingRustTuple<'_> {
                fn from(value: blockNumberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for blockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for blockNumberCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = blockNumberReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "blockNumber()";
            const SELECTOR: [u8; 4] = [87u8, 232u8, 113u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setBlockNumber(uint256)` and selector `0xa8c3c850`.
```solidity
function setBlockNumber(uint256 _blockNumber) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockNumberCall {
        #[allow(missing_docs)]
        pub _blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setBlockNumber(uint256)`](setBlockNumberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setBlockNumberReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockNumberCall> for UnderlyingRustTuple<'_> {
                fn from(value: setBlockNumberCall) -> Self {
                    (value._blockNumber,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setBlockNumberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _blockNumber: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setBlockNumberReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setBlockNumberReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setBlockNumberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setBlockNumberCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setBlockNumberReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setBlockNumber(uint256)";
            const SELECTOR: [u8; 4] = [168u8, 195u8, 200u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._blockNumber),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setShouldRevert(bool)` and selector `0x6813d787`.
```solidity
function setShouldRevert(bool _shouldRevert) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertCall {
        #[allow(missing_docs)]
        pub _shouldRevert: bool,
    }
    ///Container type for the return parameters of the [`setShouldRevert(bool)`](setShouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setShouldRevertReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertCall) -> Self {
                    (value._shouldRevert,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setShouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _shouldRevert: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setShouldRevertReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setShouldRevertReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setShouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setShouldRevertCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bool,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setShouldRevertReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setShouldRevert(bool)";
            const SELECTOR: [u8; 4] = [104u8, 19u8, 215u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._shouldRevert,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `shouldRevert()` and selector `0xd3072d82`.
```solidity
function shouldRevert() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertCall {}
    ///Container type for the return parameters of the [`shouldRevert()`](shouldRevertCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct shouldRevertReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertCall> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<shouldRevertReturn> for UnderlyingRustTuple<'_> {
                fn from(value: shouldRevertReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for shouldRevertReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for shouldRevertCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = shouldRevertReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "shouldRevert()";
            const SELECTOR: [u8; 4] = [211u8, 7u8, 45u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockArbSys`](self) function calls.
    pub enum MockArbSysCalls {
        #[allow(missing_docs)]
        arbBlockNumber(arbBlockNumberCall),
        #[allow(missing_docs)]
        blockNumber(blockNumberCall),
        #[allow(missing_docs)]
        setBlockNumber(setBlockNumberCall),
        #[allow(missing_docs)]
        setShouldRevert(setShouldRevertCall),
        #[allow(missing_docs)]
        shouldRevert(shouldRevertCall),
    }
    #[automatically_derived]
    impl MockArbSysCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [87u8, 232u8, 113u8, 231u8],
            [104u8, 19u8, 215u8, 135u8],
            [163u8, 177u8, 179u8, 29u8],
            [168u8, 195u8, 200u8, 80u8],
            [211u8, 7u8, 45u8, 130u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockArbSysCalls {
        const NAME: &'static str = "MockArbSysCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::arbBlockNumber(_) => {
                    <arbBlockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::blockNumber(_) => {
                    <blockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setBlockNumber(_) => {
                    <setBlockNumberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setShouldRevert(_) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::shouldRevert(_) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockArbSysCalls>] = &[
                {
                    fn blockNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbSysCalls> {
                        <blockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbSysCalls::blockNumber)
                    }
                    blockNumber
                },
                {
                    fn setShouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbSysCalls> {
                        <setShouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbSysCalls::setShouldRevert)
                    }
                    setShouldRevert
                },
                {
                    fn arbBlockNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbSysCalls> {
                        <arbBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbSysCalls::arbBlockNumber)
                    }
                    arbBlockNumber
                },
                {
                    fn setBlockNumber(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbSysCalls> {
                        <setBlockNumberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbSysCalls::setBlockNumber)
                    }
                    setBlockNumber
                },
                {
                    fn shouldRevert(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockArbSysCalls> {
                        <shouldRevertCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockArbSysCalls::shouldRevert)
                    }
                    shouldRevert
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::arbBlockNumber(inner) => {
                    <arbBlockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::blockNumber(inner) => {
                    <blockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setBlockNumber(inner) => {
                    <setBlockNumberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::arbBlockNumber(inner) => {
                    <arbBlockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::blockNumber(inner) => {
                    <blockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setBlockNumber(inner) => {
                    <setBlockNumberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setShouldRevert(inner) => {
                    <setShouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::shouldRevert(inner) => {
                    <shouldRevertCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockArbSys`](self) contract instance.

See the [wrapper's documentation](`MockArbSysInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockArbSysInstance<T, P, N> {
        MockArbSysInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockArbSysInstance<T, P, N>>,
    > {
        MockArbSysInstance::<T, P, N>::deploy(provider, _blockNumber)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        _blockNumber: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockArbSysInstance::<T, P, N>::deploy_builder(provider, _blockNumber)
    }
    /**A [`MockArbSys`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockArbSys`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockArbSysInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockArbSysInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockArbSysInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbSysInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockArbSys`](self) contract instance.

See the [wrapper's documentation](`MockArbSysInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            _blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<MockArbSysInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, _blockNumber);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            _blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { _blockNumber },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockArbSysInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockArbSysInstance<T, P, N> {
            MockArbSysInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbSysInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`arbBlockNumber`] function.
        pub fn arbBlockNumber(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, arbBlockNumberCall, N> {
            self.call_builder(&arbBlockNumberCall {})
        }
        ///Creates a new call builder for the [`blockNumber`] function.
        pub fn blockNumber(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, blockNumberCall, N> {
            self.call_builder(&blockNumberCall {})
        }
        ///Creates a new call builder for the [`setBlockNumber`] function.
        pub fn setBlockNumber(
            &self,
            _blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setBlockNumberCall, N> {
            self.call_builder(&setBlockNumberCall { _blockNumber })
        }
        ///Creates a new call builder for the [`setShouldRevert`] function.
        pub fn setShouldRevert(
            &self,
            _shouldRevert: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setShouldRevertCall, N> {
            self.call_builder(
                &setShouldRevertCall {
                    _shouldRevert,
                },
            )
        }
        ///Creates a new call builder for the [`shouldRevert`] function.
        pub fn shouldRevert(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, shouldRevertCall, N> {
            self.call_builder(&shouldRevertCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockArbSysInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
