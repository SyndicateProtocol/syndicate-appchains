/**

Generated by the following Solidity interface...
```solidity
interface RequireCompositeModule {
    type CheckType is uint8;

    error AddressAlreadyExists();
    error AddressDoesNotExist();
    error CompositeAllOrPermissionChecksFailed(address msgSender, bytes data);
    error CompositeAndPermissionCheckFailed(address requireAddress, address msgSender, bytes data);
    error InvalidAddress();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);

    event CheckTypeUpdated(address indexed check, CheckType indexed oldType, CheckType indexed newType);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event PermissionCheckAdded(address indexed check);
    event PermissionCheckAddedWithType(address indexed check, CheckType indexed checkType);
    event PermissionCheckRemoved(address indexed check);

    constructor(address admin);

    function addPermissionCheck(address _address, bool addToHead) external;
    function addPermissionCheckWithType(address _address, CheckType checkType, bool addToHead) external;
    function checkTypes(address) external view returns (CheckType);
    function getAllPermissionChecks() external view returns (address[] memory);
    function getAllPermissionChecksWithTypes() external view returns (address[] memory addresses, CheckType[] memory types);
    function isAllowed(address msgSender, address txOrigin, bytes memory data) external view returns (bool);
    function owner() external view returns (address);
    function removePermissionCheck(address _address) external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateCheckType(address _address, CheckType newCheckType) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "admin",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addPermissionCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addPermissionCheckWithType",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "checkType",
        "type": "uint8",
        "internalType": "enum RequireCompositeModule.CheckType"
      },
      {
        "name": "addToHead",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "checkTypes",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "enum RequireCompositeModule.CheckType"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllPermissionChecks",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getAllPermissionChecksWithTypes",
    "inputs": [],
    "outputs": [
      {
        "name": "addresses",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "types",
        "type": "uint8[]",
        "internalType": "enum RequireCompositeModule.CheckType[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isAllowed",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "txOrigin",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "removePermissionCheck",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateCheckType",
    "inputs": [
      {
        "name": "_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "newCheckType",
        "type": "uint8",
        "internalType": "enum RequireCompositeModule.CheckType"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "CheckTypeUpdated",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "oldType",
        "type": "uint8",
        "indexed": true,
        "internalType": "enum RequireCompositeModule.CheckType"
      },
      {
        "name": "newType",
        "type": "uint8",
        "indexed": true,
        "internalType": "enum RequireCompositeModule.CheckType"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PermissionCheckAdded",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PermissionCheckAddedWithType",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "checkType",
        "type": "uint8",
        "indexed": true,
        "internalType": "enum RequireCompositeModule.CheckType"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PermissionCheckRemoved",
    "inputs": [
      {
        "name": "check",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressAlreadyExists",
    "inputs": []
  },
  {
    "type": "error",
    "name": "AddressDoesNotExist",
    "inputs": []
  },
  {
    "type": "error",
    "name": "CompositeAllOrPermissionChecksFailed",
    "inputs": [
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ]
  },
  {
    "type": "error",
    "name": "CompositeAndPermissionCheckFailed",
    "inputs": [
      {
        "name": "requireAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "msgSender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ]
  },
  {
    "type": "error",
    "name": "InvalidAddress",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod RequireCompositeModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040523461002f576100196100146100f4565b610115565b610021610034565b611dc36102da8239611dc390f35b61003a565b60405190565b5f80fd5b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906100669061003e565b810190811060018060401b0382111761007e57604052565b610048565b9061009661008f610034565b928361005c565b565b5f80fd5b60018060a01b031690565b6100b09061009c565b90565b6100bc816100a7565b036100c357565b5f80fd5b905051906100d4826100b3565b565b906020828203126100ef576100ec915f016100c7565b90565b610098565b61011261209d8038038061010781610083565b9283398101906100d6565b90565b61011e90610120565b565b6101299061017b565b565b90565b90565b61014561014061014a9261012b565b61012e565b61009c565b90565b61015690610131565b90565b610162906100a7565b9052565b9190610179905f60208501940190610159565b565b8061019661019061018b5f61014d565b6100a7565b916100a7565b146101a6576101a49061027a565b565b6101c96101b25f61014d565b5f918291631e4fbdf760e01b835260048301610166565b0390fd5b5f1c90565b60018060a01b031690565b6101e96101ee916101cd565b6101d2565b90565b6101fb90546101dd565b90565b5f1b90565b9061021460018060a01b03916101fe565b9181191691161790565b61023261022d6102379261009c565b61012e565b61009c565b90565b6102439061021e565b90565b61024f9061023a565b90565b90565b9061026a61026561027192610246565b610252565b8254610203565b9055565b5f0190565b6102835f6101f1565b61028d825f610255565b906102c16102bb7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610246565b91610246565b916102ca610034565b806102d481610275565b0390a356fe60806040526004361015610013575b610791565b61001d5f356100cc565b806304f386f4146100c7578063052eefd1146100c25780630838bbd4146100bd5780631b42c711146100b857806321284f7e146100b3578063715018a6146100ae5780637a3979dc146100a95780638da5cb5b146100a4578063a213fd221461009f578063b1c61e001461009a5763f2fde38b0361000e5761075e565b61072a565b6106ba565b6105d3565b610578565b610486565b610451565b610329565b610247565b6101c9565b610141565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100f8906100e4565b90565b610104816100ef565b0361010b57565b5f80fd5b9050359061011c826100fb565b565b9060208282031261013757610134915f0161010f565b90565b6100dc565b5f0190565b3461016f5761015961015436600461011e565b610839565b6101616100d2565b8061016b8161013c565b0390f35b6100d8565b151590565b61018281610174565b0361018957565b5f80fd5b9050359061019a82610179565b565b91906040838203126101c457806101b86101c1925f860161010f565b9360200161018d565b90565b6100dc565b346101f8576101e26101dc36600461019c565b906108ff565b6101ea6100d2565b806101f48161013c565b0390f35b6100d8565b6002111561020757565b5f80fd5b90503590610218826101fd565b565b9190604083820312610242578061023661023f925f860161010f565b9360200161020b565b90565b6100dc565b346102765761026061025a36600461021a565b90610a89565b6102686100d2565b806102728161013c565b0390f35b6100d8565b5f91031261028557565b6100dc565b5190565b60209181520190565b60200190565b6102a6906100ef565b9052565b906102b78160209361029d565b0190565b60200190565b906102de6102d86102d18461028a565b809361028e565b92610297565b905f5b8181106102ee5750505090565b90919261030761030160019286516102aa565b946102bb565b91019190916102e1565b6103269160208201915f8184039101526102c1565b90565b346103595761033936600461027b565b610355610344610be7565b61034c6100d2565b91829182610311565b0390f35b6100d8565b90565b61037561037061037a926100e4565b61035e565b6100e4565b90565b61038690610361565b90565b6103929061037d565b90565b9061039f90610389565b5f5260205260405f2090565b1c90565b60ff1690565b6103c59060086103ca93026103ab565b6103af565b90565b906103d891546103b5565b90565b6103f1906103ec6003915f92610395565b6103cd565b90565b634e487b7160e01b5f52602160045260245ffd5b6002111561041257565b6103f4565b9061042182610408565b565b61042c90610417565b90565b61043890610423565b9052565b919061044f905f6020850194019061042f565b565b346104815761047d61046c61046736600461011e565b6103db565b6104746100d2565b9182918261043c565b0390f35b6100d8565b346104b45761049636600461027b565b61049e610ce8565b6104a66100d2565b806104b08161013c565b0390f35b6100d8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104ff5781359167ffffffffffffffff83116104fa5760200192600183028401116104f557565b6104c1565b6104bd565b6104b9565b916060838303126105515761051b825f850161010f565b92610529836020830161010f565b92604082013567ffffffffffffffff811161054c5761054892016104c5565b9091565b6100e0565b6100dc565b61055f90610174565b9052565b9190610576905f60208501940190610556565b565b346105ac576105a861059761058e366004610504565b92919091610df2565b61059f6100d2565b91829182610563565b0390f35b6100d8565b6105ba906100ef565b9052565b91906105d1905f602085019401906105b1565b565b34610603576105e336600461027b565b6105ff6105ee6110be565b6105f66100d2565b918291826105be565b0390f35b6100d8565b5190565b60209181520190565b60200190565b61062490610423565b9052565b906106358160209361061b565b0190565b60200190565b9061065c61065661064f84610608565b809361060c565b92610615565b905f5b81811061066c5750505090565b90919261068561067f6001928651610628565b94610639565b910191909161065f565b90916106a96106b79360408401908482035f8601526102c1565b91602081840391015261063f565b90565b346106eb576106ca36600461027b565b6106d2611166565b906106e76106de6100d2565b9283928361068f565b0390f35b6100d8565b90916060828403126107255761072261070b845f850161010f565b93610719816020860161020b565b9360400161018d565b90565b6100dc565b346107595761074361073d3660046106f0565b91611305565b61074b6100d2565b806107558161013c565b0390f35b6100d8565b3461078c5761077661077136600461011e565b611377565b61077e6100d2565b806107888161013c565b0390f35b6100d8565b5f80fd5b6107a6906107a1611382565b61081a565b565b1b90565b919060086107c79102916107c160ff846107a8565b926107a8565b9181191691161790565b6107da90610417565b90565b90565b91906107f66107f16107fe936107d1565b6107dd565b9083546107ac565b9055565b5f90565b61081891610812610802565b916107e0565b565b5f6108326108379261082b81611558565b6003610395565b610806565b565b61084290610795565b565b9061085691610851611382565b610893565b565b5f1b90565b9061086960ff91610858565b9181191691161790565b9061088861088361088f926107d1565b6107dd565b825461085d565b9055565b9061089e90826116f4565b6108b35f6108ae60038490610395565b610873565b5f6108e76108e17fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916108f06100d2565b806108fa8161013c565b0390a3565b9061090991610844565b565b9061091d91610918611382565b610973565b565b90565b61093661093161093b9261091f565b61035e565b6100e4565b90565b61094790610922565b90565b90565b5f1c90565b61095e6109639161094d565b6103af565b90565b6109709054610952565b90565b908161098f6109896109845f61093e565b6100ef565b916100ef565b14610a6d576109b16109ab60016109a6859161094a565b61174d565b15610174565b610a51576109c96109c460038490610395565b610966565b91826109dd6109d784610417565b91610417565b14610a4c576109f7826109f260038490610395565b610873565b91610a34610a2e610a287fa09388b78c1a36296c3bc4cc7a25b5768b1d9e0e628ed553e26c26aaedf9462295610389565b926107d1565b926107d1565b92610a3d6100d2565b80610a478161013c565b0390a4565b505050565b5f633d0f293d60e01b815280610a696004820161013c565b0390fd5b5f63e6c4247b60e01b815280610a856004820161013c565b0390fd5b90610a939161090b565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610ac290610a9a565b810190811067ffffffffffffffff821117610adc57604052565b610aa4565b90610af4610aed6100d2565b9283610ab8565b565b67ffffffffffffffff8111610b0e5760208091020190565b610aa4565b90610b25610b2083610af6565b610ae1565b918252565b369037565b90610b54610b3c83610b13565b92602080610b4a8693610af6565b9201910390610b2a565b565b90565b610b6d610b68610b729261091f565b61035e565b610b56565b90565b634e487b7160e01b5f52601160045260245ffd5b610b9290610b56565b5f198114610ba05760010190565b610b75565b634e487b7160e01b5f52603260045260245ffd5b90610bc38261028a565b811015610bd4576020809102010190565b610ba5565b90610be3906100ef565b9052565b610bef610a95565b50610c02610bfd600161094a565b611869565b610c0b81610b2f565b610c1d610c18600161094a565b611880565b610c265f610b59565b905b81610c3b610c3586610b56565b91610b56565b1080610ca0575b15610c9757610c7381610c64610c7b93610c5f8791879092610bb9565b610bd9565b610c6e600161094a565b6118ba565b919015610174565b610c8f57610c899091610b89565b90610c28565b505090505b90565b50509050610c94565b5080610cbc610cb6610cb15f61093e565b6100ef565b916100ef565b1415610c42565b610ccb611382565b610cd3610cd5565b565b610ce6610ce15f61093e565b611924565b565b610cf0610cc3565b565b5f90565b610cff90610361565b90565b610d0b90610cf6565b90565b610d179061037d565b90565b60e01b90565b90505190610d2d82610179565b565b90602082820312610d4857610d45915f01610d20565b90565b6100dc565b60209181520190565b90825f939282370152565b9190610d7b81610d7481610d8095610d4d565b8095610d56565b610a9a565b0190565b610daa610db79593949294610da060608401965f8501906105b1565b60208301906105b1565b6040818503910152610d61565b90565b610dc26100d2565b3d5f823e3d90fd5b91610def939192610de260408201945f8301906105b1565b6020818503910152610d61565b90565b9392919093610dff610cf2565b50610e12610e0d600161094a565b611880565b9485610e2e610e28610e235f61093e565b6100ef565b916100ef565b1461108357945f5f915b80610e53610e4d610e485f61093e565b6100ef565b916100ef565b1461107657610e6c610e6760038390610395565b610966565b610e7e610e785f610417565b91610417565b145f14610fc257610e96610e9182610d02565b610d0e565b6020637a3979dc918690610ebf8c94610eca8b8d90610eb36100d2565b98899788968796610d1a565b865260048601610d84565b03915afa8015610fbd57610ee6915f91610f8f575b5015610174565b610f6457610f01610f09915b610efc600161094a565b6118ba565b919015610174565b15610e385750909192939495505b9081610f53575b50610f2b57505050600190565b610f4f909192610f396100d2565b938493633d66f95b60e21b855260048501610dca565b0390fd5b610f5e915015610174565b5f610f1e565b83610f8b8787939293610f756100d2565b948594630676557560e11b865260048601610d84565b0390fd5b610fb0915060203d8111610fb6575b610fa88183610ab8565b810190610d2f565b5f610edf565b503d610f9e565b610dba565b9050600190610fd8610fd382610d02565b610d0e565b6020637a3979dc9186906110018c9461100c8b8d90610ff56100d2565b98899788968796610d1a565b865260048601610d84565b03915afa908115611071575f91611043575b50611030575b610f01610f0991610ef2565b9150610f09610f01600193915050611024565b611064915060203d811161106a575b61105c8183610ab8565b810190610d2f565b5f61101e565b503d611052565b610dba565b5090919293949550610f17565b505050509050600190565b5f90565b60018060a01b031690565b6110a96110ae9161094d565b611092565b90565b6110bb905461109d565b90565b6110c661108e565b506110d05f6110b1565b90565b606090565b67ffffffffffffffff81116110f05760208091020190565b610aa4565b90611107611102836110d8565b610ae1565b918252565b369037565b9061113661111e836110f5565b9260208061112c86936110d8565b920191039061110c565b565b9061114282610608565b811015611153576020809102010190565b610ba5565b9061116290610417565b9052565b61116e610a95565b506111776110d3565b5061118a611185600161094a565b611869565b61119381610b2f565b9061119d81611111565b926111b06111ab600161094a565b611880565b926111ba5f610b59565b935b846111cf6111c986610b56565b91610b56565b1080611260575b1561125657611230816111f8611238936111f386918a9092610bb9565b610bd9565b61122161120f61120a60038490610395565b610966565b61121c8a918a9092611138565b611158565b61122b600161094a565b6118ba565b919015610174565b61124c576112469094610b89565b936111bc565b50915091505b9190565b5091509150611252565b508061127c6112766112715f61093e565b6100ef565b916100ef565b14156111d6565b906112969291611291611382565b611298565b565b90916112a490826116f4565b6112b9826112b460038490610395565b610873565b906112ed6112e77fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916112f66100d2565b806113008161013c565b0390a3565b906113109291611283565b565b6113239061131e611382565b611325565b565b8061134061133a6113355f61093e565b6100ef565b916100ef565b146113505761134e90611924565b565b61137361135c5f61093e565b5f918291631e4fbdf760e01b8352600483016105be565b0390fd5b61138090611312565b565b61138a6110be565b6113a361139d611398611983565b6100ef565b916100ef565b036113aa57565b6113cc6113b5611983565b5f91829163118cdaa760e01b8352600483016105be565b0390fd5b6113e1906113dc611382565b61146e565b565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61142060136020926113e3565b611429816113ec565b0190565b6114429060208101905f818303910152611413565b90565b1561144c57565b6114546100d2565b62461bcd60e51b81528061146a6004820161142d565b0390fd5b8061148961148361147e5f61093e565b6100ef565b916100ef565b1461153c576114ab6114a560016114a0849161094a565b61174d565b15610174565b611520576114de6114c660016114c1849161094a565b611a95565b6114d86114d2846100ef565b916100ef565b14611445565b6115087fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610389565b906115116100d2565b8061151b8161013c565b0390a2565b5f633d0f293d60e01b8152806115386004820161013c565b0390fd5b5f63e6c4247b60e01b8152806115546004820161013c565b0390fd5b611561906113d0565b565b9061157591611570611382565b6115f9565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b6115ab60116020926113e3565b6115b481611577565b0190565b6115cd9060208101905f81830391015261159e565b90565b156115d757565b6115df6100d2565b62461bcd60e51b8152806115f5600482016115b8565b0390fd5b908161161561160f61160a5f61093e565b6100ef565b916100ef565b146116d85761162e6001611629849161094a565b61174d565b6116bc5761163a610cf2565b505f146116a05761165e6116586001611653849161094a565b611be9565b5b6115d0565b6116887f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610389565b906116916100d2565b8061169b8161013c565b0390a2565b61165e6116b760016116b2849161094a565b611bc9565b611659565b5f63516c350f60e11b8152806116d46004820161013c565b0390fd5b5f63e6c4247b60e01b8152806116f06004820161013c565b0390fd5b906116fe91611563565b565b9061170a90610389565b5f5260205260405f2090565b5f90565b61172390610174565b90565b906117309061171a565b5f5260205260405f2090565b6117455f61093e565b90565b600190565b611755610cf2565b5061177d61177861176a600184018590611700565b611772611716565b90611726565b6110b1565b61179661179061178b61173c565b6100ef565b916100ef565b14806117fa575b5f146117f3576117dd6117d76117d26117c460016117e395016117be61173c565b90611700565b6117cc611748565b90611726565b6110b1565b926100ef565b916100ef565b145f146117ef57600190565b5f90565b5050600190565b5061182261181d61180f600184018590611700565b611817611748565b90611726565b6110b1565b61183b61183561183061173c565b6100ef565b916100ef565b1461179d565b5f90565b90565b6118546118599161094d565b611845565b90565b6118669054611848565b90565b5f61187d91611876611841565b500161185c565b90565b6118b26118a460016118b79361189461108e565b500161189e61173c565b90611700565b6118ac611748565b90611726565b6110b1565b90565b906118e0916118c7610cf2565b506118d061108e565b50906118da611748565b91611c09565b91909190565b906118f760018060a01b0391610858565b9181191691161790565b90565b9061191961191461192092610389565b611901565b82546118e6565b9055565b61192d5f6110b1565b611937825f611904565b9061196b6119657f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610389565b91610389565b916119746100d2565b8061197e8161013c565b0390a3565b61198b61108e565b503390565b6119995f61093e565b90565b919060086119bc9102916119b660018060a01b03846107a8565b926107a8565b9181191691161790565b91906119dc6119d76119e493610389565b611901565b90835461199c565b9055565b6119fa916119f461108e565b916119c6565b565b90565b611a13611a0e611a18926119fc565b61035e565b610b56565b90565b611a2a611a3091939293610b56565b92610b56565b8203918211611a3b57565b610b75565b90611a4c5f1991610858565b9181191691161790565b611a6a611a65611a6f92610b56565b61035e565b610b56565b90565b90565b90611a8a611a85611a9192611a56565b611a72565b8254611a40565b9055565b611a9d61108e565b5081611ab8611ab2611aad611990565b6100ef565b916100ef565b148015611baf575b611ba15780611b29611b9e92611af3611aee611ae0600186018890611700565b611ae8611716565b90611726565b6110b1565b611b1a611b15611b07600187018990611700565b611b0f611748565b90611726565b6110b1565b90611b23611748565b92611c85565b611b515f611b4c611b3e600185018790611700565b611b46611716565b90611726565b6119e8565b611b795f611b74611b66600185018790611700565b611b6e611748565b90611726565b6119e8565b611b985f611b8760016119ff565b920191611b938361185c565b611a1b565b90611a75565b90565b5050611bac5f61093e565b90565b50611bc4611bbe82849061174d565b15610174565b611ac0565b90611be691611bd6610cf2565b5090611be0611716565b91611cd0565b90565b90611c0691611bf6610cf2565b5090611c00611748565b91611cd0565b90565b91611c12610cf2565b50611c1b61108e565b50611c30611c2a84849061174d565b15610174565b5f14611c47575050505f90611c445f61093e565b90565b611c5a611c5f926001611c649501611700565b611726565b6110b1565b9081611c7f611c79611c7461173c565b6100ef565b916100ef565b14159190565b9192611cc4611cc9926001611cce96611cbd83611cb8611ca8858b018590611700565b611cb28915610174565b90611726565b611904565b9501611700565b611726565b611904565b565b91611cef92611cdd610cf2565b5091611ce761173c565b909192611d17565b90565b611d01611d0791939293610b56565b92610b56565b8201809211611d1257565b610b75565b91611d20610cf2565b50611d35611d2f84839061174d565b15610174565b80611db2575b611d4757505050505f90565b611dad93611d8892611d7e611d72611d6d611d66600189018590611700565b8590611726565b6110b1565b91869085908592611c85565b8492909192611c85565b611da75f611d9660016119ff565b920191611da28361185c565b611cf2565b90611a75565b600190565b50611dbe83839061174d565b611d3b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4a\0/Wa\0\x19a\0\x14a\0\xF4V[a\x01\x15V[a\0!a\x004V[a\x1D\xC3a\x02\xDA\x829a\x1D\xC3\x90\xF3[a\0:V[`@Q\x90V[_\x80\xFD[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\0f\x90a\0>V[\x81\x01\x90\x81\x10`\x01\x80`@\x1B\x03\x82\x11\x17a\0~W`@RV[a\0HV[\x90a\0\x96a\0\x8Fa\x004V[\x92\x83a\0\\V[V[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xB0\x90a\0\x9CV[\x90V[a\0\xBC\x81a\0\xA7V[\x03a\0\xC3WV[_\x80\xFD[\x90PQ\x90a\0\xD4\x82a\0\xB3V[V[\x90` \x82\x82\x03\x12a\0\xEFWa\0\xEC\x91_\x01a\0\xC7V[\x90V[a\0\x98V[a\x01\x12a \x9D\x808\x03\x80a\x01\x07\x81a\0\x83V[\x92\x839\x81\x01\x90a\0\xD6V[\x90V[a\x01\x1E\x90a\x01 V[V[a\x01)\x90a\x01{V[V[\x90V[\x90V[a\x01Ea\x01@a\x01J\x92a\x01+V[a\x01.V[a\0\x9CV[\x90V[a\x01V\x90a\x011V[\x90V[a\x01b\x90a\0\xA7V[\x90RV[\x91\x90a\x01y\x90_` \x85\x01\x94\x01\x90a\x01YV[V[\x80a\x01\x96a\x01\x90a\x01\x8B_a\x01MV[a\0\xA7V[\x91a\0\xA7V[\x14a\x01\xA6Wa\x01\xA4\x90a\x02zV[V[a\x01\xC9a\x01\xB2_a\x01MV[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x01fV[\x03\x90\xFD[_\x1C\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x01\xE9a\x01\xEE\x91a\x01\xCDV[a\x01\xD2V[\x90V[a\x01\xFB\x90Ta\x01\xDDV[\x90V[_\x1B\x90V[\x90a\x02\x14`\x01\x80`\xA0\x1B\x03\x91a\x01\xFEV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x022a\x02-a\x027\x92a\0\x9CV[a\x01.V[a\0\x9CV[\x90V[a\x02C\x90a\x02\x1EV[\x90V[a\x02O\x90a\x02:V[\x90V[\x90V[\x90a\x02ja\x02ea\x02q\x92a\x02FV[a\x02RV[\x82Ta\x02\x03V[\x90UV[_\x01\x90V[a\x02\x83_a\x01\xF1V[a\x02\x8D\x82_a\x02UV[\x90a\x02\xC1a\x02\xBB\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x02FV[\x91a\x02FV[\x91a\x02\xCAa\x004V[\x80a\x02\xD4\x81a\x02uV[\x03\x90\xA3V\xFE`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\x91V[a\0\x1D_5a\0\xCCV[\x80c\x04\xF3\x86\xF4\x14a\0\xC7W\x80c\x05.\xEF\xD1\x14a\0\xC2W\x80c\x088\xBB\xD4\x14a\0\xBDW\x80c\x1BB\xC7\x11\x14a\0\xB8W\x80c!(O~\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cz9y\xDC\x14a\0\xA9W\x80c\x8D\xA5\xCB[\x14a\0\xA4W\x80c\xA2\x13\xFD\"\x14a\0\x9FW\x80c\xB1\xC6\x1E\0\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07^V[a\x07*V[a\x06\xBAV[a\x05\xD3V[a\x05xV[a\x04\x86V[a\x04QV[a\x03)V[a\x02GV[a\x01\xC9V[a\x01AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF8\x90a\0\xE4V[\x90V[a\x01\x04\x81a\0\xEFV[\x03a\x01\x0BWV[_\x80\xFD[\x90P5\x90a\x01\x1C\x82a\0\xFBV[V[\x90` \x82\x82\x03\x12a\x017Wa\x014\x91_\x01a\x01\x0FV[\x90V[a\0\xDCV[_\x01\x90V[4a\x01oWa\x01Ya\x01T6`\x04a\x01\x1EV[a\x089V[a\x01aa\0\xD2V[\x80a\x01k\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[\x15\x15\x90V[a\x01\x82\x81a\x01tV[\x03a\x01\x89WV[_\x80\xFD[\x90P5\x90a\x01\x9A\x82a\x01yV[V[\x91\x90`@\x83\x82\x03\x12a\x01\xC4W\x80a\x01\xB8a\x01\xC1\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x01\xF8Wa\x01\xE2a\x01\xDC6`\x04a\x01\x9CV[\x90a\x08\xFFV[a\x01\xEAa\0\xD2V[\x80a\x01\xF4\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[`\x02\x11\x15a\x02\x07WV[_\x80\xFD[\x90P5\x90a\x02\x18\x82a\x01\xFDV[V[\x91\x90`@\x83\x82\x03\x12a\x02BW\x80a\x026a\x02?\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x02\x0BV[\x90V[a\0\xDCV[4a\x02vWa\x02`a\x02Z6`\x04a\x02\x1AV[\x90a\n\x89V[a\x02ha\0\xD2V[\x80a\x02r\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x02\x85WV[a\0\xDCV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xA6\x90a\0\xEFV[\x90RV[\x90a\x02\xB7\x81` \x93a\x02\x9DV[\x01\x90V[` \x01\x90V[\x90a\x02\xDEa\x02\xD8a\x02\xD1\x84a\x02\x8AV[\x80\x93a\x02\x8EV[\x92a\x02\x97V[\x90_[\x81\x81\x10a\x02\xEEWPPP\x90V[\x90\x91\x92a\x03\x07a\x03\x01`\x01\x92\x86Qa\x02\xAAV[\x94a\x02\xBBV[\x91\x01\x91\x90\x91a\x02\xE1V[a\x03&\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xC1V[\x90V[4a\x03YWa\x0396`\x04a\x02{V[a\x03Ua\x03Da\x0B\xE7V[a\x03La\0\xD2V[\x91\x82\x91\x82a\x03\x11V[\x03\x90\xF3[a\0\xD8V[\x90V[a\x03ua\x03pa\x03z\x92a\0\xE4V[a\x03^V[a\0\xE4V[\x90V[a\x03\x86\x90a\x03aV[\x90V[a\x03\x92\x90a\x03}V[\x90V[\x90a\x03\x9F\x90a\x03\x89V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\xC5\x90`\x08a\x03\xCA\x93\x02a\x03\xABV[a\x03\xAFV[\x90V[\x90a\x03\xD8\x91Ta\x03\xB5V[\x90V[a\x03\xF1\x90a\x03\xEC`\x03\x91_\x92a\x03\x95V[a\x03\xCDV[\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x11\x15a\x04\x12WV[a\x03\xF4V[\x90a\x04!\x82a\x04\x08V[V[a\x04,\x90a\x04\x17V[\x90V[a\x048\x90a\x04#V[\x90RV[\x91\x90a\x04O\x90_` \x85\x01\x94\x01\x90a\x04/V[V[4a\x04\x81Wa\x04}a\x04la\x04g6`\x04a\x01\x1EV[a\x03\xDBV[a\x04ta\0\xD2V[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\0\xD8V[4a\x04\xB4Wa\x04\x966`\x04a\x02{V[a\x04\x9Ea\x0C\xE8V[a\x04\xA6a\0\xD2V[\x80a\x04\xB0\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04\xFFW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xFAW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xF5WV[a\x04\xC1V[a\x04\xBDV[a\x04\xB9V[\x91``\x83\x83\x03\x12a\x05QWa\x05\x1B\x82_\x85\x01a\x01\x0FV[\x92a\x05)\x83` \x83\x01a\x01\x0FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05LWa\x05H\x92\x01a\x04\xC5V[\x90\x91V[a\0\xE0V[a\0\xDCV[a\x05_\x90a\x01tV[\x90RV[\x91\x90a\x05v\x90_` \x85\x01\x94\x01\x90a\x05VV[V[4a\x05\xACWa\x05\xA8a\x05\x97a\x05\x8E6`\x04a\x05\x04V[\x92\x91\x90\x91a\r\xF2V[a\x05\x9Fa\0\xD2V[\x91\x82\x91\x82a\x05cV[\x03\x90\xF3[a\0\xD8V[a\x05\xBA\x90a\0\xEFV[\x90RV[\x91\x90a\x05\xD1\x90_` \x85\x01\x94\x01\x90a\x05\xB1V[V[4a\x06\x03Wa\x05\xE36`\x04a\x02{V[a\x05\xFFa\x05\xEEa\x10\xBEV[a\x05\xF6a\0\xD2V[\x91\x82\x91\x82a\x05\xBEV[\x03\x90\xF3[a\0\xD8V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x06$\x90a\x04#V[\x90RV[\x90a\x065\x81` \x93a\x06\x1BV[\x01\x90V[` \x01\x90V[\x90a\x06\\a\x06Va\x06O\x84a\x06\x08V[\x80\x93a\x06\x0CV[\x92a\x06\x15V[\x90_[\x81\x81\x10a\x06lWPPP\x90V[\x90\x91\x92a\x06\x85a\x06\x7F`\x01\x92\x86Qa\x06(V[\x94a\x069V[\x91\x01\x91\x90\x91a\x06_V[\x90\x91a\x06\xA9a\x06\xB7\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x02\xC1V[\x91` \x81\x84\x03\x91\x01Ra\x06?V[\x90V[4a\x06\xEBWa\x06\xCA6`\x04a\x02{V[a\x06\xD2a\x11fV[\x90a\x06\xE7a\x06\xDEa\0\xD2V[\x92\x83\x92\x83a\x06\x8FV[\x03\x90\xF3[a\0\xD8V[\x90\x91``\x82\x84\x03\x12a\x07%Wa\x07\"a\x07\x0B\x84_\x85\x01a\x01\x0FV[\x93a\x07\x19\x81` \x86\x01a\x02\x0BV[\x93`@\x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x07YWa\x07Ca\x07=6`\x04a\x06\xF0V[\x91a\x13\x05V[a\x07Ka\0\xD2V[\x80a\x07U\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x07\x8CWa\x07va\x07q6`\x04a\x01\x1EV[a\x13wV[a\x07~a\0\xD2V[\x80a\x07\x88\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[a\x07\xA6\x90a\x07\xA1a\x13\x82V[a\x08\x1AV[V[\x1B\x90V[\x91\x90`\x08a\x07\xC7\x91\x02\x91a\x07\xC1`\xFF\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07\xDA\x90a\x04\x17V[\x90V[\x90V[\x91\x90a\x07\xF6a\x07\xF1a\x07\xFE\x93a\x07\xD1V[a\x07\xDDV[\x90\x83Ta\x07\xACV[\x90UV[_\x90V[a\x08\x18\x91a\x08\x12a\x08\x02V[\x91a\x07\xE0V[V[_a\x082a\x087\x92a\x08+\x81a\x15XV[`\x03a\x03\x95V[a\x08\x06V[V[a\x08B\x90a\x07\x95V[V[\x90a\x08V\x91a\x08Qa\x13\x82V[a\x08\x93V[V[_\x1B\x90V[\x90a\x08i`\xFF\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08\x88a\x08\x83a\x08\x8F\x92a\x07\xD1V[a\x07\xDDV[\x82Ta\x08]V[\x90UV[\x90a\x08\x9E\x90\x82a\x16\xF4V[a\x08\xB3_a\x08\xAE`\x03\x84\x90a\x03\x95V[a\x08sV[_a\x08\xE7a\x08\xE1\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x08\xF0a\0\xD2V[\x80a\x08\xFA\x81a\x01<V[\x03\x90\xA3V[\x90a\t\t\x91a\x08DV[V[\x90a\t\x1D\x91a\t\x18a\x13\x82V[a\tsV[V[\x90V[a\t6a\t1a\t;\x92a\t\x1FV[a\x03^V[a\0\xE4V[\x90V[a\tG\x90a\t\"V[\x90V[\x90V[_\x1C\x90V[a\t^a\tc\x91a\tMV[a\x03\xAFV[\x90V[a\tp\x90Ta\tRV[\x90V[\x90\x81a\t\x8Fa\t\x89a\t\x84_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\nmWa\t\xB1a\t\xAB`\x01a\t\xA6\x85\x91a\tJV[a\x17MV[\x15a\x01tV[a\nQWa\t\xC9a\t\xC4`\x03\x84\x90a\x03\x95V[a\tfV[\x91\x82a\t\xDDa\t\xD7\x84a\x04\x17V[\x91a\x04\x17V[\x14a\nLWa\t\xF7\x82a\t\xF2`\x03\x84\x90a\x03\x95V[a\x08sV[\x91a\n4a\n.a\n(\x7F\xA0\x93\x88\xB7\x8C\x1A6)l;\xC4\xCCz%\xB5v\x8B\x1D\x9E\x0Eb\x8E\xD5S\xE2l&\xAA\xED\xF9F\"\x95a\x03\x89V[\x92a\x07\xD1V[\x92a\x07\xD1V[\x92a\n=a\0\xD2V[\x80a\nG\x81a\x01<V[\x03\x90\xA4V[PPPV[_c=\x0F)=`\xE0\x1B\x81R\x80a\ni`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\n\x85`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\n\x93\x91a\t\x0BV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xC2\x90a\n\x9AV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\xDCW`@RV[a\n\xA4V[\x90a\n\xF4a\n\xEDa\0\xD2V[\x92\x83a\n\xB8V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x0EW` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x0B%a\x0B \x83a\n\xF6V[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x0BTa\x0B<\x83a\x0B\x13V[\x92` \x80a\x0BJ\x86\x93a\n\xF6V[\x92\x01\x91\x03\x90a\x0B*V[V[\x90V[a\x0Bma\x0Bha\x0Br\x92a\t\x1FV[a\x03^V[a\x0BVV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0B\x92\x90a\x0BVV[_\x19\x81\x14a\x0B\xA0W`\x01\x01\x90V[a\x0BuV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x0B\xC3\x82a\x02\x8AV[\x81\x10\x15a\x0B\xD4W` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x0B\xE3\x90a\0\xEFV[\x90RV[a\x0B\xEFa\n\x95V[Pa\x0C\x02a\x0B\xFD`\x01a\tJV[a\x18iV[a\x0C\x0B\x81a\x0B/V[a\x0C\x1Da\x0C\x18`\x01a\tJV[a\x18\x80V[a\x0C&_a\x0BYV[\x90[\x81a\x0C;a\x0C5\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x0C\xA0W[\x15a\x0C\x97Wa\x0Cs\x81a\x0Cda\x0C{\x93a\x0C_\x87\x91\x87\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x0Cn`\x01a\tJV[a\x18\xBAV[\x91\x90\x15a\x01tV[a\x0C\x8FWa\x0C\x89\x90\x91a\x0B\x89V[\x90a\x0C(V[PP\x90P[\x90V[PP\x90Pa\x0C\x94V[P\x80a\x0C\xBCa\x0C\xB6a\x0C\xB1_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x0CBV[a\x0C\xCBa\x13\x82V[a\x0C\xD3a\x0C\xD5V[V[a\x0C\xE6a\x0C\xE1_a\t>V[a\x19$V[V[a\x0C\xF0a\x0C\xC3V[V[_\x90V[a\x0C\xFF\x90a\x03aV[\x90V[a\r\x0B\x90a\x0C\xF6V[\x90V[a\r\x17\x90a\x03}V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\r-\x82a\x01yV[V[\x90` \x82\x82\x03\x12a\rHWa\rE\x91_\x01a\r V[\x90V[a\0\xDCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r{\x81a\rt\x81a\r\x80\x95a\rMV[\x80\x95a\rVV[a\n\x9AV[\x01\x90V[a\r\xAAa\r\xB7\x95\x93\x94\x92\x94a\r\xA0``\x84\x01\x96_\x85\x01\x90a\x05\xB1V[` \x83\x01\x90a\x05\xB1V[`@\x81\x85\x03\x91\x01Ra\raV[\x90V[a\r\xC2a\0\xD2V[=_\x82>=\x90\xFD[\x91a\r\xEF\x93\x91\x92a\r\xE2`@\x82\x01\x94_\x83\x01\x90a\x05\xB1V[` \x81\x85\x03\x91\x01Ra\raV[\x90V[\x93\x92\x91\x90\x93a\r\xFFa\x0C\xF2V[Pa\x0E\x12a\x0E\r`\x01a\tJV[a\x18\x80V[\x94\x85a\x0E.a\x0E(a\x0E#_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10\x83W\x94__\x91[\x80a\x0ESa\x0EMa\x0EH_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10vWa\x0Ela\x0Eg`\x03\x83\x90a\x03\x95V[a\tfV[a\x0E~a\x0Ex_a\x04\x17V[\x91a\x04\x17V[\x14_\x14a\x0F\xC2Wa\x0E\x96a\x0E\x91\x82a\r\x02V[a\r\x0EV[` cz9y\xDC\x91\x86\x90a\x0E\xBF\x8C\x94a\x0E\xCA\x8B\x8D\x90a\x0E\xB3a\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x80\x15a\x0F\xBDWa\x0E\xE6\x91_\x91a\x0F\x8FW[P\x15a\x01tV[a\x0FdWa\x0F\x01a\x0F\t\x91[a\x0E\xFC`\x01a\tJV[a\x18\xBAV[\x91\x90\x15a\x01tV[\x15a\x0E8WP\x90\x91\x92\x93\x94\x95P[\x90\x81a\x0FSW[Pa\x0F+WPPP`\x01\x90V[a\x0FO\x90\x91\x92a\x0F9a\0\xD2V[\x93\x84\x93c=f\xF9[`\xE2\x1B\x85R`\x04\x85\x01a\r\xCAV[\x03\x90\xFD[a\x0F^\x91P\x15a\x01tV[_a\x0F\x1EV[\x83a\x0F\x8B\x87\x87\x93\x92\x93a\x0Fua\0\xD2V[\x94\x85\x94c\x06vUu`\xE1\x1B\x86R`\x04\x86\x01a\r\x84V[\x03\x90\xFD[a\x0F\xB0\x91P` =\x81\x11a\x0F\xB6W[a\x0F\xA8\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x0E\xDFV[P=a\x0F\x9EV[a\r\xBAV[\x90P`\x01\x90a\x0F\xD8a\x0F\xD3\x82a\r\x02V[a\r\x0EV[` cz9y\xDC\x91\x86\x90a\x10\x01\x8C\x94a\x10\x0C\x8B\x8D\x90a\x0F\xF5a\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x90\x81\x15a\x10qW_\x91a\x10CW[Pa\x100W[a\x0F\x01a\x0F\t\x91a\x0E\xF2V[\x91Pa\x0F\ta\x0F\x01`\x01\x93\x91PPa\x10$V[a\x10d\x91P` =\x81\x11a\x10jW[a\x10\\\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x10\x1EV[P=a\x10RV[a\r\xBAV[P\x90\x91\x92\x93\x94\x95Pa\x0F\x17V[PPPP\x90P`\x01\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x10\xA9a\x10\xAE\x91a\tMV[a\x10\x92V[\x90V[a\x10\xBB\x90Ta\x10\x9DV[\x90V[a\x10\xC6a\x10\x8EV[Pa\x10\xD0_a\x10\xB1V[\x90V[``\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xF0W` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x11\x07a\x11\x02\x83a\x10\xD8V[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x116a\x11\x1E\x83a\x10\xF5V[\x92` \x80a\x11,\x86\x93a\x10\xD8V[\x92\x01\x91\x03\x90a\x11\x0CV[V[\x90a\x11B\x82a\x06\x08V[\x81\x10\x15a\x11SW` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x11b\x90a\x04\x17V[\x90RV[a\x11na\n\x95V[Pa\x11wa\x10\xD3V[Pa\x11\x8Aa\x11\x85`\x01a\tJV[a\x18iV[a\x11\x93\x81a\x0B/V[\x90a\x11\x9D\x81a\x11\x11V[\x92a\x11\xB0a\x11\xAB`\x01a\tJV[a\x18\x80V[\x92a\x11\xBA_a\x0BYV[\x93[\x84a\x11\xCFa\x11\xC9\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x12`W[\x15a\x12VWa\x120\x81a\x11\xF8a\x128\x93a\x11\xF3\x86\x91\x8A\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x12!a\x12\x0Fa\x12\n`\x03\x84\x90a\x03\x95V[a\tfV[a\x12\x1C\x8A\x91\x8A\x90\x92a\x118V[a\x11XV[a\x12+`\x01a\tJV[a\x18\xBAV[\x91\x90\x15a\x01tV[a\x12LWa\x12F\x90\x94a\x0B\x89V[\x93a\x11\xBCV[P\x91P\x91P[\x91\x90V[P\x91P\x91Pa\x12RV[P\x80a\x12|a\x12va\x12q_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x11\xD6V[\x90a\x12\x96\x92\x91a\x12\x91a\x13\x82V[a\x12\x98V[V[\x90\x91a\x12\xA4\x90\x82a\x16\xF4V[a\x12\xB9\x82a\x12\xB4`\x03\x84\x90a\x03\x95V[a\x08sV[\x90a\x12\xEDa\x12\xE7\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x12\xF6a\0\xD2V[\x80a\x13\0\x81a\x01<V[\x03\x90\xA3V[\x90a\x13\x10\x92\x91a\x12\x83V[V[a\x13#\x90a\x13\x1Ea\x13\x82V[a\x13%V[V[\x80a\x13@a\x13:a\x135_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x13PWa\x13N\x90a\x19$V[V[a\x13sa\x13\\_a\t>V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13\x80\x90a\x13\x12V[V[a\x13\x8Aa\x10\xBEV[a\x13\xA3a\x13\x9Da\x13\x98a\x19\x83V[a\0\xEFV[\x91a\0\xEFV[\x03a\x13\xAAWV[a\x13\xCCa\x13\xB5a\x19\x83V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13\xE1\x90a\x13\xDCa\x13\x82V[a\x14nV[V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x14 `\x13` \x92a\x13\xE3V[a\x14)\x81a\x13\xECV[\x01\x90V[a\x14B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14\x13V[\x90V[\x15a\x14LWV[a\x14Ta\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14j`\x04\x82\x01a\x14-V[\x03\x90\xFD[\x80a\x14\x89a\x14\x83a\x14~_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x15<Wa\x14\xABa\x14\xA5`\x01a\x14\xA0\x84\x91a\tJV[a\x17MV[\x15a\x01tV[a\x15 Wa\x14\xDEa\x14\xC6`\x01a\x14\xC1\x84\x91a\tJV[a\x1A\x95V[a\x14\xD8a\x14\xD2\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x14EV[a\x15\x08\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x03\x89V[\x90a\x15\x11a\0\xD2V[\x80a\x15\x1B\x81a\x01<V[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x158`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x15T`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x15a\x90a\x13\xD0V[V[\x90a\x15u\x91a\x15pa\x13\x82V[a\x15\xF9V[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x15\xAB`\x11` \x92a\x13\xE3V[a\x15\xB4\x81a\x15wV[\x01\x90V[a\x15\xCD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x9EV[\x90V[\x15a\x15\xD7WV[a\x15\xDFa\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xF5`\x04\x82\x01a\x15\xB8V[\x03\x90\xFD[\x90\x81a\x16\x15a\x16\x0Fa\x16\n_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x16\xD8Wa\x16.`\x01a\x16)\x84\x91a\tJV[a\x17MV[a\x16\xBCWa\x16:a\x0C\xF2V[P_\x14a\x16\xA0Wa\x16^a\x16X`\x01a\x16S\x84\x91a\tJV[a\x1B\xE9V[[a\x15\xD0V[a\x16\x88\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x03\x89V[\x90a\x16\x91a\0\xD2V[\x80a\x16\x9B\x81a\x01<V[\x03\x90\xA2V[a\x16^a\x16\xB7`\x01a\x16\xB2\x84\x91a\tJV[a\x1B\xC9V[a\x16YV[_cQl5\x0F`\xE1\x1B\x81R\x80a\x16\xD4`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x16\xF0`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x16\xFE\x91a\x15cV[V[\x90a\x17\n\x90a\x03\x89V[_R` R`@_ \x90V[_\x90V[a\x17#\x90a\x01tV[\x90V[\x90a\x170\x90a\x17\x1AV[_R` R`@_ \x90V[a\x17E_a\t>V[\x90V[`\x01\x90V[a\x17Ua\x0C\xF2V[Pa\x17}a\x17xa\x17j`\x01\x84\x01\x85\x90a\x17\0V[a\x17ra\x17\x16V[\x90a\x17&V[a\x10\xB1V[a\x17\x96a\x17\x90a\x17\x8Ba\x17<V[a\0\xEFV[\x91a\0\xEFV[\x14\x80a\x17\xFAW[_\x14a\x17\xF3Wa\x17\xDDa\x17\xD7a\x17\xD2a\x17\xC4`\x01a\x17\xE3\x95\x01a\x17\xBEa\x17<V[\x90a\x17\0V[a\x17\xCCa\x17HV[\x90a\x17&V[a\x10\xB1V[\x92a\0\xEFV[\x91a\0\xEFV[\x14_\x14a\x17\xEFW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x18\"a\x18\x1Da\x18\x0F`\x01\x84\x01\x85\x90a\x17\0V[a\x18\x17a\x17HV[\x90a\x17&V[a\x10\xB1V[a\x18;a\x185a\x180a\x17<V[a\0\xEFV[\x91a\0\xEFV[\x14a\x17\x9DV[_\x90V[\x90V[a\x18Ta\x18Y\x91a\tMV[a\x18EV[\x90V[a\x18f\x90Ta\x18HV[\x90V[_a\x18}\x91a\x18va\x18AV[P\x01a\x18\\V[\x90V[a\x18\xB2a\x18\xA4`\x01a\x18\xB7\x93a\x18\x94a\x10\x8EV[P\x01a\x18\x9Ea\x17<V[\x90a\x17\0V[a\x18\xACa\x17HV[\x90a\x17&V[a\x10\xB1V[\x90V[\x90a\x18\xE0\x91a\x18\xC7a\x0C\xF2V[Pa\x18\xD0a\x10\x8EV[P\x90a\x18\xDAa\x17HV[\x91a\x1C\tV[\x91\x90\x91\x90V[\x90a\x18\xF7`\x01\x80`\xA0\x1B\x03\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x19\x19a\x19\x14a\x19 \x92a\x03\x89V[a\x19\x01V[\x82Ta\x18\xE6V[\x90UV[a\x19-_a\x10\xB1V[a\x197\x82_a\x19\x04V[\x90a\x19ka\x19e\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x03\x89V[\x91a\x03\x89V[\x91a\x19ta\0\xD2V[\x80a\x19~\x81a\x01<V[\x03\x90\xA3V[a\x19\x8Ba\x10\x8EV[P3\x90V[a\x19\x99_a\t>V[\x90V[\x91\x90`\x08a\x19\xBC\x91\x02\x91a\x19\xB6`\x01\x80`\xA0\x1B\x03\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x19\xDCa\x19\xD7a\x19\xE4\x93a\x03\x89V[a\x19\x01V[\x90\x83Ta\x19\x9CV[\x90UV[a\x19\xFA\x91a\x19\xF4a\x10\x8EV[\x91a\x19\xC6V[V[\x90V[a\x1A\x13a\x1A\x0Ea\x1A\x18\x92a\x19\xFCV[a\x03^V[a\x0BVV[\x90V[a\x1A*a\x1A0\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x03\x91\x82\x11a\x1A;WV[a\x0BuV[\x90a\x1AL_\x19\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1Aja\x1Aea\x1Ao\x92a\x0BVV[a\x03^V[a\x0BVV[\x90V[\x90V[\x90a\x1A\x8Aa\x1A\x85a\x1A\x91\x92a\x1AVV[a\x1ArV[\x82Ta\x1A@V[\x90UV[a\x1A\x9Da\x10\x8EV[P\x81a\x1A\xB8a\x1A\xB2a\x1A\xADa\x19\x90V[a\0\xEFV[\x91a\0\xEFV[\x14\x80\x15a\x1B\xAFW[a\x1B\xA1W\x80a\x1B)a\x1B\x9E\x92a\x1A\xF3a\x1A\xEEa\x1A\xE0`\x01\x86\x01\x88\x90a\x17\0V[a\x1A\xE8a\x17\x16V[\x90a\x17&V[a\x10\xB1V[a\x1B\x1Aa\x1B\x15a\x1B\x07`\x01\x87\x01\x89\x90a\x17\0V[a\x1B\x0Fa\x17HV[\x90a\x17&V[a\x10\xB1V[\x90a\x1B#a\x17HV[\x92a\x1C\x85V[a\x1BQ_a\x1BLa\x1B>`\x01\x85\x01\x87\x90a\x17\0V[a\x1BFa\x17\x16V[\x90a\x17&V[a\x19\xE8V[a\x1By_a\x1Bta\x1Bf`\x01\x85\x01\x87\x90a\x17\0V[a\x1Bna\x17HV[\x90a\x17&V[a\x19\xE8V[a\x1B\x98_a\x1B\x87`\x01a\x19\xFFV[\x92\x01\x91a\x1B\x93\x83a\x18\\V[a\x1A\x1BV[\x90a\x1AuV[\x90V[PPa\x1B\xAC_a\t>V[\x90V[Pa\x1B\xC4a\x1B\xBE\x82\x84\x90a\x17MV[\x15a\x01tV[a\x1A\xC0V[\x90a\x1B\xE6\x91a\x1B\xD6a\x0C\xF2V[P\x90a\x1B\xE0a\x17\x16V[\x91a\x1C\xD0V[\x90V[\x90a\x1C\x06\x91a\x1B\xF6a\x0C\xF2V[P\x90a\x1C\0a\x17HV[\x91a\x1C\xD0V[\x90V[\x91a\x1C\x12a\x0C\xF2V[Pa\x1C\x1Ba\x10\x8EV[Pa\x1C0a\x1C*\x84\x84\x90a\x17MV[\x15a\x01tV[_\x14a\x1CGWPPP_\x90a\x1CD_a\t>V[\x90V[a\x1CZa\x1C_\x92`\x01a\x1Cd\x95\x01a\x17\0V[a\x17&V[a\x10\xB1V[\x90\x81a\x1C\x7Fa\x1Cya\x1Cta\x17<V[a\0\xEFV[\x91a\0\xEFV[\x14\x15\x91\x90V[\x91\x92a\x1C\xC4a\x1C\xC9\x92`\x01a\x1C\xCE\x96a\x1C\xBD\x83a\x1C\xB8a\x1C\xA8\x85\x8B\x01\x85\x90a\x17\0V[a\x1C\xB2\x89\x15a\x01tV[\x90a\x17&V[a\x19\x04V[\x95\x01a\x17\0V[a\x17&V[a\x19\x04V[V[\x91a\x1C\xEF\x92a\x1C\xDDa\x0C\xF2V[P\x91a\x1C\xE7a\x17<V[\x90\x91\x92a\x1D\x17V[\x90V[a\x1D\x01a\x1D\x07\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x01\x80\x92\x11a\x1D\x12WV[a\x0BuV[\x91a\x1D a\x0C\xF2V[Pa\x1D5a\x1D/\x84\x83\x90a\x17MV[\x15a\x01tV[\x80a\x1D\xB2W[a\x1DGWPPPP_\x90V[a\x1D\xAD\x93a\x1D\x88\x92a\x1D~a\x1Dra\x1Dma\x1Df`\x01\x89\x01\x85\x90a\x17\0V[\x85\x90a\x17&V[a\x10\xB1V[\x91\x86\x90\x85\x90\x85\x92a\x1C\x85V[\x84\x92\x90\x91\x92a\x1C\x85V[a\x1D\xA7_a\x1D\x96`\x01a\x19\xFFV[\x92\x01\x91a\x1D\xA2\x83a\x18\\V[a\x1C\xF2V[\x90a\x1AuV[`\x01\x90V[Pa\x1D\xBE\x83\x83\x90a\x17MV[a\x1D;V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610013575b610791565b61001d5f356100cc565b806304f386f4146100c7578063052eefd1146100c25780630838bbd4146100bd5780631b42c711146100b857806321284f7e146100b3578063715018a6146100ae5780637a3979dc146100a95780638da5cb5b146100a4578063a213fd221461009f578063b1c61e001461009a5763f2fde38b0361000e5761075e565b61072a565b6106ba565b6105d3565b610578565b610486565b610451565b610329565b610247565b6101c9565b610141565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b60018060a01b031690565b6100f8906100e4565b90565b610104816100ef565b0361010b57565b5f80fd5b9050359061011c826100fb565b565b9060208282031261013757610134915f0161010f565b90565b6100dc565b5f0190565b3461016f5761015961015436600461011e565b610839565b6101616100d2565b8061016b8161013c565b0390f35b6100d8565b151590565b61018281610174565b0361018957565b5f80fd5b9050359061019a82610179565b565b91906040838203126101c457806101b86101c1925f860161010f565b9360200161018d565b90565b6100dc565b346101f8576101e26101dc36600461019c565b906108ff565b6101ea6100d2565b806101f48161013c565b0390f35b6100d8565b6002111561020757565b5f80fd5b90503590610218826101fd565b565b9190604083820312610242578061023661023f925f860161010f565b9360200161020b565b90565b6100dc565b346102765761026061025a36600461021a565b90610a89565b6102686100d2565b806102728161013c565b0390f35b6100d8565b5f91031261028557565b6100dc565b5190565b60209181520190565b60200190565b6102a6906100ef565b9052565b906102b78160209361029d565b0190565b60200190565b906102de6102d86102d18461028a565b809361028e565b92610297565b905f5b8181106102ee5750505090565b90919261030761030160019286516102aa565b946102bb565b91019190916102e1565b6103269160208201915f8184039101526102c1565b90565b346103595761033936600461027b565b610355610344610be7565b61034c6100d2565b91829182610311565b0390f35b6100d8565b90565b61037561037061037a926100e4565b61035e565b6100e4565b90565b61038690610361565b90565b6103929061037d565b90565b9061039f90610389565b5f5260205260405f2090565b1c90565b60ff1690565b6103c59060086103ca93026103ab565b6103af565b90565b906103d891546103b5565b90565b6103f1906103ec6003915f92610395565b6103cd565b90565b634e487b7160e01b5f52602160045260245ffd5b6002111561041257565b6103f4565b9061042182610408565b565b61042c90610417565b90565b61043890610423565b9052565b919061044f905f6020850194019061042f565b565b346104815761047d61046c61046736600461011e565b6103db565b6104746100d2565b9182918261043c565b0390f35b6100d8565b346104b45761049636600461027b565b61049e610ce8565b6104a66100d2565b806104b08161013c565b0390f35b6100d8565b5f80fd5b5f80fd5b5f80fd5b909182601f830112156104ff5781359167ffffffffffffffff83116104fa5760200192600183028401116104f557565b6104c1565b6104bd565b6104b9565b916060838303126105515761051b825f850161010f565b92610529836020830161010f565b92604082013567ffffffffffffffff811161054c5761054892016104c5565b9091565b6100e0565b6100dc565b61055f90610174565b9052565b9190610576905f60208501940190610556565b565b346105ac576105a861059761058e366004610504565b92919091610df2565b61059f6100d2565b91829182610563565b0390f35b6100d8565b6105ba906100ef565b9052565b91906105d1905f602085019401906105b1565b565b34610603576105e336600461027b565b6105ff6105ee6110be565b6105f66100d2565b918291826105be565b0390f35b6100d8565b5190565b60209181520190565b60200190565b61062490610423565b9052565b906106358160209361061b565b0190565b60200190565b9061065c61065661064f84610608565b809361060c565b92610615565b905f5b81811061066c5750505090565b90919261068561067f6001928651610628565b94610639565b910191909161065f565b90916106a96106b79360408401908482035f8601526102c1565b91602081840391015261063f565b90565b346106eb576106ca36600461027b565b6106d2611166565b906106e76106de6100d2565b9283928361068f565b0390f35b6100d8565b90916060828403126107255761072261070b845f850161010f565b93610719816020860161020b565b9360400161018d565b90565b6100dc565b346107595761074361073d3660046106f0565b91611305565b61074b6100d2565b806107558161013c565b0390f35b6100d8565b3461078c5761077661077136600461011e565b611377565b61077e6100d2565b806107888161013c565b0390f35b6100d8565b5f80fd5b6107a6906107a1611382565b61081a565b565b1b90565b919060086107c79102916107c160ff846107a8565b926107a8565b9181191691161790565b6107da90610417565b90565b90565b91906107f66107f16107fe936107d1565b6107dd565b9083546107ac565b9055565b5f90565b61081891610812610802565b916107e0565b565b5f6108326108379261082b81611558565b6003610395565b610806565b565b61084290610795565b565b9061085691610851611382565b610893565b565b5f1b90565b9061086960ff91610858565b9181191691161790565b9061088861088361088f926107d1565b6107dd565b825461085d565b9055565b9061089e90826116f4565b6108b35f6108ae60038490610395565b610873565b5f6108e76108e17fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916108f06100d2565b806108fa8161013c565b0390a3565b9061090991610844565b565b9061091d91610918611382565b610973565b565b90565b61093661093161093b9261091f565b61035e565b6100e4565b90565b61094790610922565b90565b90565b5f1c90565b61095e6109639161094d565b6103af565b90565b6109709054610952565b90565b908161098f6109896109845f61093e565b6100ef565b916100ef565b14610a6d576109b16109ab60016109a6859161094a565b61174d565b15610174565b610a51576109c96109c460038490610395565b610966565b91826109dd6109d784610417565b91610417565b14610a4c576109f7826109f260038490610395565b610873565b91610a34610a2e610a287fa09388b78c1a36296c3bc4cc7a25b5768b1d9e0e628ed553e26c26aaedf9462295610389565b926107d1565b926107d1565b92610a3d6100d2565b80610a478161013c565b0390a4565b505050565b5f633d0f293d60e01b815280610a696004820161013c565b0390fd5b5f63e6c4247b60e01b815280610a856004820161013c565b0390fd5b90610a939161090b565b565b606090565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b90610ac290610a9a565b810190811067ffffffffffffffff821117610adc57604052565b610aa4565b90610af4610aed6100d2565b9283610ab8565b565b67ffffffffffffffff8111610b0e5760208091020190565b610aa4565b90610b25610b2083610af6565b610ae1565b918252565b369037565b90610b54610b3c83610b13565b92602080610b4a8693610af6565b9201910390610b2a565b565b90565b610b6d610b68610b729261091f565b61035e565b610b56565b90565b634e487b7160e01b5f52601160045260245ffd5b610b9290610b56565b5f198114610ba05760010190565b610b75565b634e487b7160e01b5f52603260045260245ffd5b90610bc38261028a565b811015610bd4576020809102010190565b610ba5565b90610be3906100ef565b9052565b610bef610a95565b50610c02610bfd600161094a565b611869565b610c0b81610b2f565b610c1d610c18600161094a565b611880565b610c265f610b59565b905b81610c3b610c3586610b56565b91610b56565b1080610ca0575b15610c9757610c7381610c64610c7b93610c5f8791879092610bb9565b610bd9565b610c6e600161094a565b6118ba565b919015610174565b610c8f57610c899091610b89565b90610c28565b505090505b90565b50509050610c94565b5080610cbc610cb6610cb15f61093e565b6100ef565b916100ef565b1415610c42565b610ccb611382565b610cd3610cd5565b565b610ce6610ce15f61093e565b611924565b565b610cf0610cc3565b565b5f90565b610cff90610361565b90565b610d0b90610cf6565b90565b610d179061037d565b90565b60e01b90565b90505190610d2d82610179565b565b90602082820312610d4857610d45915f01610d20565b90565b6100dc565b60209181520190565b90825f939282370152565b9190610d7b81610d7481610d8095610d4d565b8095610d56565b610a9a565b0190565b610daa610db79593949294610da060608401965f8501906105b1565b60208301906105b1565b6040818503910152610d61565b90565b610dc26100d2565b3d5f823e3d90fd5b91610def939192610de260408201945f8301906105b1565b6020818503910152610d61565b90565b9392919093610dff610cf2565b50610e12610e0d600161094a565b611880565b9485610e2e610e28610e235f61093e565b6100ef565b916100ef565b1461108357945f5f915b80610e53610e4d610e485f61093e565b6100ef565b916100ef565b1461107657610e6c610e6760038390610395565b610966565b610e7e610e785f610417565b91610417565b145f14610fc257610e96610e9182610d02565b610d0e565b6020637a3979dc918690610ebf8c94610eca8b8d90610eb36100d2565b98899788968796610d1a565b865260048601610d84565b03915afa8015610fbd57610ee6915f91610f8f575b5015610174565b610f6457610f01610f09915b610efc600161094a565b6118ba565b919015610174565b15610e385750909192939495505b9081610f53575b50610f2b57505050600190565b610f4f909192610f396100d2565b938493633d66f95b60e21b855260048501610dca565b0390fd5b610f5e915015610174565b5f610f1e565b83610f8b8787939293610f756100d2565b948594630676557560e11b865260048601610d84565b0390fd5b610fb0915060203d8111610fb6575b610fa88183610ab8565b810190610d2f565b5f610edf565b503d610f9e565b610dba565b9050600190610fd8610fd382610d02565b610d0e565b6020637a3979dc9186906110018c9461100c8b8d90610ff56100d2565b98899788968796610d1a565b865260048601610d84565b03915afa908115611071575f91611043575b50611030575b610f01610f0991610ef2565b9150610f09610f01600193915050611024565b611064915060203d811161106a575b61105c8183610ab8565b810190610d2f565b5f61101e565b503d611052565b610dba565b5090919293949550610f17565b505050509050600190565b5f90565b60018060a01b031690565b6110a96110ae9161094d565b611092565b90565b6110bb905461109d565b90565b6110c661108e565b506110d05f6110b1565b90565b606090565b67ffffffffffffffff81116110f05760208091020190565b610aa4565b90611107611102836110d8565b610ae1565b918252565b369037565b9061113661111e836110f5565b9260208061112c86936110d8565b920191039061110c565b565b9061114282610608565b811015611153576020809102010190565b610ba5565b9061116290610417565b9052565b61116e610a95565b506111776110d3565b5061118a611185600161094a565b611869565b61119381610b2f565b9061119d81611111565b926111b06111ab600161094a565b611880565b926111ba5f610b59565b935b846111cf6111c986610b56565b91610b56565b1080611260575b1561125657611230816111f8611238936111f386918a9092610bb9565b610bd9565b61122161120f61120a60038490610395565b610966565b61121c8a918a9092611138565b611158565b61122b600161094a565b6118ba565b919015610174565b61124c576112469094610b89565b936111bc565b50915091505b9190565b5091509150611252565b508061127c6112766112715f61093e565b6100ef565b916100ef565b14156111d6565b906112969291611291611382565b611298565b565b90916112a490826116f4565b6112b9826112b460038490610395565b610873565b906112ed6112e77fab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da93610389565b916107d1565b916112f66100d2565b806113008161013c565b0390a3565b906113109291611283565b565b6113239061131e611382565b611325565b565b8061134061133a6113355f61093e565b6100ef565b916100ef565b146113505761134e90611924565b565b61137361135c5f61093e565b5f918291631e4fbdf760e01b8352600483016105be565b0390fd5b61138090611312565b565b61138a6110be565b6113a361139d611398611983565b6100ef565b916100ef565b036113aa57565b6113cc6113b5611983565b5f91829163118cdaa760e01b8352600483016105be565b0390fd5b6113e1906113dc611382565b61146e565b565b60209181520190565b5f7f41646472657373206e6f742072656d6f76656400000000000000000000000000910152565b61142060136020926113e3565b611429816113ec565b0190565b6114429060208101905f818303910152611413565b90565b1561144c57565b6114546100d2565b62461bcd60e51b81528061146a6004820161142d565b0390fd5b8061148961148361147e5f61093e565b6100ef565b916100ef565b1461153c576114ab6114a560016114a0849161094a565b61174d565b15610174565b611520576114de6114c660016114c1849161094a565b611a95565b6114d86114d2846100ef565b916100ef565b14611445565b6115087fb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be91610389565b906115116100d2565b8061151b8161013c565b0390a2565b5f633d0f293d60e01b8152806115386004820161013c565b0390fd5b5f63e6c4247b60e01b8152806115546004820161013c565b0390fd5b611561906113d0565b565b9061157591611570611382565b6115f9565b565b5f7f41646472657373206e6f74206164646564000000000000000000000000000000910152565b6115ab60116020926113e3565b6115b481611577565b0190565b6115cd9060208101905f81830391015261159e565b90565b156115d757565b6115df6100d2565b62461bcd60e51b8152806115f5600482016115b8565b0390fd5b908161161561160f61160a5f61093e565b6100ef565b916100ef565b146116d85761162e6001611629849161094a565b61174d565b6116bc5761163a610cf2565b505f146116a05761165e6116586001611653849161094a565b611be9565b5b6115d0565b6116887f62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e791610389565b906116916100d2565b8061169b8161013c565b0390a2565b61165e6116b760016116b2849161094a565b611bc9565b611659565b5f63516c350f60e11b8152806116d46004820161013c565b0390fd5b5f63e6c4247b60e01b8152806116f06004820161013c565b0390fd5b906116fe91611563565b565b9061170a90610389565b5f5260205260405f2090565b5f90565b61172390610174565b90565b906117309061171a565b5f5260205260405f2090565b6117455f61093e565b90565b600190565b611755610cf2565b5061177d61177861176a600184018590611700565b611772611716565b90611726565b6110b1565b61179661179061178b61173c565b6100ef565b916100ef565b14806117fa575b5f146117f3576117dd6117d76117d26117c460016117e395016117be61173c565b90611700565b6117cc611748565b90611726565b6110b1565b926100ef565b916100ef565b145f146117ef57600190565b5f90565b5050600190565b5061182261181d61180f600184018590611700565b611817611748565b90611726565b6110b1565b61183b61183561183061173c565b6100ef565b916100ef565b1461179d565b5f90565b90565b6118546118599161094d565b611845565b90565b6118669054611848565b90565b5f61187d91611876611841565b500161185c565b90565b6118b26118a460016118b79361189461108e565b500161189e61173c565b90611700565b6118ac611748565b90611726565b6110b1565b90565b906118e0916118c7610cf2565b506118d061108e565b50906118da611748565b91611c09565b91909190565b906118f760018060a01b0391610858565b9181191691161790565b90565b9061191961191461192092610389565b611901565b82546118e6565b9055565b61192d5f6110b1565b611937825f611904565b9061196b6119657f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610389565b91610389565b916119746100d2565b8061197e8161013c565b0390a3565b61198b61108e565b503390565b6119995f61093e565b90565b919060086119bc9102916119b660018060a01b03846107a8565b926107a8565b9181191691161790565b91906119dc6119d76119e493610389565b611901565b90835461199c565b9055565b6119fa916119f461108e565b916119c6565b565b90565b611a13611a0e611a18926119fc565b61035e565b610b56565b90565b611a2a611a3091939293610b56565b92610b56565b8203918211611a3b57565b610b75565b90611a4c5f1991610858565b9181191691161790565b611a6a611a65611a6f92610b56565b61035e565b610b56565b90565b90565b90611a8a611a85611a9192611a56565b611a72565b8254611a40565b9055565b611a9d61108e565b5081611ab8611ab2611aad611990565b6100ef565b916100ef565b148015611baf575b611ba15780611b29611b9e92611af3611aee611ae0600186018890611700565b611ae8611716565b90611726565b6110b1565b611b1a611b15611b07600187018990611700565b611b0f611748565b90611726565b6110b1565b90611b23611748565b92611c85565b611b515f611b4c611b3e600185018790611700565b611b46611716565b90611726565b6119e8565b611b795f611b74611b66600185018790611700565b611b6e611748565b90611726565b6119e8565b611b985f611b8760016119ff565b920191611b938361185c565b611a1b565b90611a75565b90565b5050611bac5f61093e565b90565b50611bc4611bbe82849061174d565b15610174565b611ac0565b90611be691611bd6610cf2565b5090611be0611716565b91611cd0565b90565b90611c0691611bf6610cf2565b5090611c00611748565b91611cd0565b90565b91611c12610cf2565b50611c1b61108e565b50611c30611c2a84849061174d565b15610174565b5f14611c47575050505f90611c445f61093e565b90565b611c5a611c5f926001611c649501611700565b611726565b6110b1565b9081611c7f611c79611c7461173c565b6100ef565b916100ef565b14159190565b9192611cc4611cc9926001611cce96611cbd83611cb8611ca8858b018590611700565b611cb28915610174565b90611726565b611904565b9501611700565b611726565b611904565b565b91611cef92611cdd610cf2565b5091611ce761173c565b909192611d17565b90565b611d01611d0791939293610b56565b92610b56565b8201809211611d1257565b610b75565b91611d20610cf2565b50611d35611d2f84839061174d565b15610174565b80611db2575b611d4757505050505f90565b611dad93611d8892611d7e611d72611d6d611d66600189018590611700565b8590611726565b6110b1565b91869085908592611c85565b8492909192611c85565b611da75f611d9660016119ff565b920191611da28361185c565b611cf2565b90611a75565b600190565b50611dbe83839061174d565b611d3b56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x13W[a\x07\x91V[a\0\x1D_5a\0\xCCV[\x80c\x04\xF3\x86\xF4\x14a\0\xC7W\x80c\x05.\xEF\xD1\x14a\0\xC2W\x80c\x088\xBB\xD4\x14a\0\xBDW\x80c\x1BB\xC7\x11\x14a\0\xB8W\x80c!(O~\x14a\0\xB3W\x80cqP\x18\xA6\x14a\0\xAEW\x80cz9y\xDC\x14a\0\xA9W\x80c\x8D\xA5\xCB[\x14a\0\xA4W\x80c\xA2\x13\xFD\"\x14a\0\x9FW\x80c\xB1\xC6\x1E\0\x14a\0\x9AWc\xF2\xFD\xE3\x8B\x03a\0\x0EWa\x07^V[a\x07*V[a\x06\xBAV[a\x05\xD3V[a\x05xV[a\x04\x86V[a\x04QV[a\x03)V[a\x02GV[a\x01\xC9V[a\x01AV[`\xE0\x1C\x90V[`@Q\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\0\xF8\x90a\0\xE4V[\x90V[a\x01\x04\x81a\0\xEFV[\x03a\x01\x0BWV[_\x80\xFD[\x90P5\x90a\x01\x1C\x82a\0\xFBV[V[\x90` \x82\x82\x03\x12a\x017Wa\x014\x91_\x01a\x01\x0FV[\x90V[a\0\xDCV[_\x01\x90V[4a\x01oWa\x01Ya\x01T6`\x04a\x01\x1EV[a\x089V[a\x01aa\0\xD2V[\x80a\x01k\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[\x15\x15\x90V[a\x01\x82\x81a\x01tV[\x03a\x01\x89WV[_\x80\xFD[\x90P5\x90a\x01\x9A\x82a\x01yV[V[\x91\x90`@\x83\x82\x03\x12a\x01\xC4W\x80a\x01\xB8a\x01\xC1\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x01\xF8Wa\x01\xE2a\x01\xDC6`\x04a\x01\x9CV[\x90a\x08\xFFV[a\x01\xEAa\0\xD2V[\x80a\x01\xF4\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[`\x02\x11\x15a\x02\x07WV[_\x80\xFD[\x90P5\x90a\x02\x18\x82a\x01\xFDV[V[\x91\x90`@\x83\x82\x03\x12a\x02BW\x80a\x026a\x02?\x92_\x86\x01a\x01\x0FV[\x93` \x01a\x02\x0BV[\x90V[a\0\xDCV[4a\x02vWa\x02`a\x02Z6`\x04a\x02\x1AV[\x90a\n\x89V[a\x02ha\0\xD2V[\x80a\x02r\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x91\x03\x12a\x02\x85WV[a\0\xDCV[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x02\xA6\x90a\0\xEFV[\x90RV[\x90a\x02\xB7\x81` \x93a\x02\x9DV[\x01\x90V[` \x01\x90V[\x90a\x02\xDEa\x02\xD8a\x02\xD1\x84a\x02\x8AV[\x80\x93a\x02\x8EV[\x92a\x02\x97V[\x90_[\x81\x81\x10a\x02\xEEWPPP\x90V[\x90\x91\x92a\x03\x07a\x03\x01`\x01\x92\x86Qa\x02\xAAV[\x94a\x02\xBBV[\x91\x01\x91\x90\x91a\x02\xE1V[a\x03&\x91` \x82\x01\x91_\x81\x84\x03\x91\x01Ra\x02\xC1V[\x90V[4a\x03YWa\x0396`\x04a\x02{V[a\x03Ua\x03Da\x0B\xE7V[a\x03La\0\xD2V[\x91\x82\x91\x82a\x03\x11V[\x03\x90\xF3[a\0\xD8V[\x90V[a\x03ua\x03pa\x03z\x92a\0\xE4V[a\x03^V[a\0\xE4V[\x90V[a\x03\x86\x90a\x03aV[\x90V[a\x03\x92\x90a\x03}V[\x90V[\x90a\x03\x9F\x90a\x03\x89V[_R` R`@_ \x90V[\x1C\x90V[`\xFF\x16\x90V[a\x03\xC5\x90`\x08a\x03\xCA\x93\x02a\x03\xABV[a\x03\xAFV[\x90V[\x90a\x03\xD8\x91Ta\x03\xB5V[\x90V[a\x03\xF1\x90a\x03\xEC`\x03\x91_\x92a\x03\x95V[a\x03\xCDV[\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x11\x15a\x04\x12WV[a\x03\xF4V[\x90a\x04!\x82a\x04\x08V[V[a\x04,\x90a\x04\x17V[\x90V[a\x048\x90a\x04#V[\x90RV[\x91\x90a\x04O\x90_` \x85\x01\x94\x01\x90a\x04/V[V[4a\x04\x81Wa\x04}a\x04la\x04g6`\x04a\x01\x1EV[a\x03\xDBV[a\x04ta\0\xD2V[\x91\x82\x91\x82a\x04<V[\x03\x90\xF3[a\0\xD8V[4a\x04\xB4Wa\x04\x966`\x04a\x02{V[a\x04\x9Ea\x0C\xE8V[a\x04\xA6a\0\xD2V[\x80a\x04\xB0\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[_\x80\xFD[_\x80\xFD[\x90\x91\x82`\x1F\x83\x01\x12\x15a\x04\xFFW\x815\x91g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11a\x04\xFAW` \x01\x92`\x01\x83\x02\x84\x01\x11a\x04\xF5WV[a\x04\xC1V[a\x04\xBDV[a\x04\xB9V[\x91``\x83\x83\x03\x12a\x05QWa\x05\x1B\x82_\x85\x01a\x01\x0FV[\x92a\x05)\x83` \x83\x01a\x01\x0FV[\x92`@\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x05LWa\x05H\x92\x01a\x04\xC5V[\x90\x91V[a\0\xE0V[a\0\xDCV[a\x05_\x90a\x01tV[\x90RV[\x91\x90a\x05v\x90_` \x85\x01\x94\x01\x90a\x05VV[V[4a\x05\xACWa\x05\xA8a\x05\x97a\x05\x8E6`\x04a\x05\x04V[\x92\x91\x90\x91a\r\xF2V[a\x05\x9Fa\0\xD2V[\x91\x82\x91\x82a\x05cV[\x03\x90\xF3[a\0\xD8V[a\x05\xBA\x90a\0\xEFV[\x90RV[\x91\x90a\x05\xD1\x90_` \x85\x01\x94\x01\x90a\x05\xB1V[V[4a\x06\x03Wa\x05\xE36`\x04a\x02{V[a\x05\xFFa\x05\xEEa\x10\xBEV[a\x05\xF6a\0\xD2V[\x91\x82\x91\x82a\x05\xBEV[\x03\x90\xF3[a\0\xD8V[Q\x90V[` \x91\x81R\x01\x90V[` \x01\x90V[a\x06$\x90a\x04#V[\x90RV[\x90a\x065\x81` \x93a\x06\x1BV[\x01\x90V[` \x01\x90V[\x90a\x06\\a\x06Va\x06O\x84a\x06\x08V[\x80\x93a\x06\x0CV[\x92a\x06\x15V[\x90_[\x81\x81\x10a\x06lWPPP\x90V[\x90\x91\x92a\x06\x85a\x06\x7F`\x01\x92\x86Qa\x06(V[\x94a\x069V[\x91\x01\x91\x90\x91a\x06_V[\x90\x91a\x06\xA9a\x06\xB7\x93`@\x84\x01\x90\x84\x82\x03_\x86\x01Ra\x02\xC1V[\x91` \x81\x84\x03\x91\x01Ra\x06?V[\x90V[4a\x06\xEBWa\x06\xCA6`\x04a\x02{V[a\x06\xD2a\x11fV[\x90a\x06\xE7a\x06\xDEa\0\xD2V[\x92\x83\x92\x83a\x06\x8FV[\x03\x90\xF3[a\0\xD8V[\x90\x91``\x82\x84\x03\x12a\x07%Wa\x07\"a\x07\x0B\x84_\x85\x01a\x01\x0FV[\x93a\x07\x19\x81` \x86\x01a\x02\x0BV[\x93`@\x01a\x01\x8DV[\x90V[a\0\xDCV[4a\x07YWa\x07Ca\x07=6`\x04a\x06\xF0V[\x91a\x13\x05V[a\x07Ka\0\xD2V[\x80a\x07U\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[4a\x07\x8CWa\x07va\x07q6`\x04a\x01\x1EV[a\x13wV[a\x07~a\0\xD2V[\x80a\x07\x88\x81a\x01<V[\x03\x90\xF3[a\0\xD8V[_\x80\xFD[a\x07\xA6\x90a\x07\xA1a\x13\x82V[a\x08\x1AV[V[\x1B\x90V[\x91\x90`\x08a\x07\xC7\x91\x02\x91a\x07\xC1`\xFF\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x07\xDA\x90a\x04\x17V[\x90V[\x90V[\x91\x90a\x07\xF6a\x07\xF1a\x07\xFE\x93a\x07\xD1V[a\x07\xDDV[\x90\x83Ta\x07\xACV[\x90UV[_\x90V[a\x08\x18\x91a\x08\x12a\x08\x02V[\x91a\x07\xE0V[V[_a\x082a\x087\x92a\x08+\x81a\x15XV[`\x03a\x03\x95V[a\x08\x06V[V[a\x08B\x90a\x07\x95V[V[\x90a\x08V\x91a\x08Qa\x13\x82V[a\x08\x93V[V[_\x1B\x90V[\x90a\x08i`\xFF\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90a\x08\x88a\x08\x83a\x08\x8F\x92a\x07\xD1V[a\x07\xDDV[\x82Ta\x08]V[\x90UV[\x90a\x08\x9E\x90\x82a\x16\xF4V[a\x08\xB3_a\x08\xAE`\x03\x84\x90a\x03\x95V[a\x08sV[_a\x08\xE7a\x08\xE1\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x08\xF0a\0\xD2V[\x80a\x08\xFA\x81a\x01<V[\x03\x90\xA3V[\x90a\t\t\x91a\x08DV[V[\x90a\t\x1D\x91a\t\x18a\x13\x82V[a\tsV[V[\x90V[a\t6a\t1a\t;\x92a\t\x1FV[a\x03^V[a\0\xE4V[\x90V[a\tG\x90a\t\"V[\x90V[\x90V[_\x1C\x90V[a\t^a\tc\x91a\tMV[a\x03\xAFV[\x90V[a\tp\x90Ta\tRV[\x90V[\x90\x81a\t\x8Fa\t\x89a\t\x84_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\nmWa\t\xB1a\t\xAB`\x01a\t\xA6\x85\x91a\tJV[a\x17MV[\x15a\x01tV[a\nQWa\t\xC9a\t\xC4`\x03\x84\x90a\x03\x95V[a\tfV[\x91\x82a\t\xDDa\t\xD7\x84a\x04\x17V[\x91a\x04\x17V[\x14a\nLWa\t\xF7\x82a\t\xF2`\x03\x84\x90a\x03\x95V[a\x08sV[\x91a\n4a\n.a\n(\x7F\xA0\x93\x88\xB7\x8C\x1A6)l;\xC4\xCCz%\xB5v\x8B\x1D\x9E\x0Eb\x8E\xD5S\xE2l&\xAA\xED\xF9F\"\x95a\x03\x89V[\x92a\x07\xD1V[\x92a\x07\xD1V[\x92a\n=a\0\xD2V[\x80a\nG\x81a\x01<V[\x03\x90\xA4V[PPPV[_c=\x0F)=`\xE0\x1B\x81R\x80a\ni`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\n\x85`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\n\x93\x91a\t\x0BV[V[``\x90V[`\x1F\x80\x19\x91\x01\x16\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x90a\n\xC2\x90a\n\x9AV[\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\n\xDCW`@RV[a\n\xA4V[\x90a\n\xF4a\n\xEDa\0\xD2V[\x92\x83a\n\xB8V[V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x0B\x0EW` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x0B%a\x0B \x83a\n\xF6V[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x0BTa\x0B<\x83a\x0B\x13V[\x92` \x80a\x0BJ\x86\x93a\n\xF6V[\x92\x01\x91\x03\x90a\x0B*V[V[\x90V[a\x0Bma\x0Bha\x0Br\x92a\t\x1FV[a\x03^V[a\x0BVV[\x90V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[a\x0B\x92\x90a\x0BVV[_\x19\x81\x14a\x0B\xA0W`\x01\x01\x90V[a\x0BuV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x90a\x0B\xC3\x82a\x02\x8AV[\x81\x10\x15a\x0B\xD4W` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x0B\xE3\x90a\0\xEFV[\x90RV[a\x0B\xEFa\n\x95V[Pa\x0C\x02a\x0B\xFD`\x01a\tJV[a\x18iV[a\x0C\x0B\x81a\x0B/V[a\x0C\x1Da\x0C\x18`\x01a\tJV[a\x18\x80V[a\x0C&_a\x0BYV[\x90[\x81a\x0C;a\x0C5\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x0C\xA0W[\x15a\x0C\x97Wa\x0Cs\x81a\x0Cda\x0C{\x93a\x0C_\x87\x91\x87\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x0Cn`\x01a\tJV[a\x18\xBAV[\x91\x90\x15a\x01tV[a\x0C\x8FWa\x0C\x89\x90\x91a\x0B\x89V[\x90a\x0C(V[PP\x90P[\x90V[PP\x90Pa\x0C\x94V[P\x80a\x0C\xBCa\x0C\xB6a\x0C\xB1_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x0CBV[a\x0C\xCBa\x13\x82V[a\x0C\xD3a\x0C\xD5V[V[a\x0C\xE6a\x0C\xE1_a\t>V[a\x19$V[V[a\x0C\xF0a\x0C\xC3V[V[_\x90V[a\x0C\xFF\x90a\x03aV[\x90V[a\r\x0B\x90a\x0C\xF6V[\x90V[a\r\x17\x90a\x03}V[\x90V[`\xE0\x1B\x90V[\x90PQ\x90a\r-\x82a\x01yV[V[\x90` \x82\x82\x03\x12a\rHWa\rE\x91_\x01a\r V[\x90V[a\0\xDCV[` \x91\x81R\x01\x90V[\x90\x82_\x93\x92\x827\x01RV[\x91\x90a\r{\x81a\rt\x81a\r\x80\x95a\rMV[\x80\x95a\rVV[a\n\x9AV[\x01\x90V[a\r\xAAa\r\xB7\x95\x93\x94\x92\x94a\r\xA0``\x84\x01\x96_\x85\x01\x90a\x05\xB1V[` \x83\x01\x90a\x05\xB1V[`@\x81\x85\x03\x91\x01Ra\raV[\x90V[a\r\xC2a\0\xD2V[=_\x82>=\x90\xFD[\x91a\r\xEF\x93\x91\x92a\r\xE2`@\x82\x01\x94_\x83\x01\x90a\x05\xB1V[` \x81\x85\x03\x91\x01Ra\raV[\x90V[\x93\x92\x91\x90\x93a\r\xFFa\x0C\xF2V[Pa\x0E\x12a\x0E\r`\x01a\tJV[a\x18\x80V[\x94\x85a\x0E.a\x0E(a\x0E#_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10\x83W\x94__\x91[\x80a\x0ESa\x0EMa\x0EH_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x10vWa\x0Ela\x0Eg`\x03\x83\x90a\x03\x95V[a\tfV[a\x0E~a\x0Ex_a\x04\x17V[\x91a\x04\x17V[\x14_\x14a\x0F\xC2Wa\x0E\x96a\x0E\x91\x82a\r\x02V[a\r\x0EV[` cz9y\xDC\x91\x86\x90a\x0E\xBF\x8C\x94a\x0E\xCA\x8B\x8D\x90a\x0E\xB3a\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x80\x15a\x0F\xBDWa\x0E\xE6\x91_\x91a\x0F\x8FW[P\x15a\x01tV[a\x0FdWa\x0F\x01a\x0F\t\x91[a\x0E\xFC`\x01a\tJV[a\x18\xBAV[\x91\x90\x15a\x01tV[\x15a\x0E8WP\x90\x91\x92\x93\x94\x95P[\x90\x81a\x0FSW[Pa\x0F+WPPP`\x01\x90V[a\x0FO\x90\x91\x92a\x0F9a\0\xD2V[\x93\x84\x93c=f\xF9[`\xE2\x1B\x85R`\x04\x85\x01a\r\xCAV[\x03\x90\xFD[a\x0F^\x91P\x15a\x01tV[_a\x0F\x1EV[\x83a\x0F\x8B\x87\x87\x93\x92\x93a\x0Fua\0\xD2V[\x94\x85\x94c\x06vUu`\xE1\x1B\x86R`\x04\x86\x01a\r\x84V[\x03\x90\xFD[a\x0F\xB0\x91P` =\x81\x11a\x0F\xB6W[a\x0F\xA8\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x0E\xDFV[P=a\x0F\x9EV[a\r\xBAV[\x90P`\x01\x90a\x0F\xD8a\x0F\xD3\x82a\r\x02V[a\r\x0EV[` cz9y\xDC\x91\x86\x90a\x10\x01\x8C\x94a\x10\x0C\x8B\x8D\x90a\x0F\xF5a\0\xD2V[\x98\x89\x97\x88\x96\x87\x96a\r\x1AV[\x86R`\x04\x86\x01a\r\x84V[\x03\x91Z\xFA\x90\x81\x15a\x10qW_\x91a\x10CW[Pa\x100W[a\x0F\x01a\x0F\t\x91a\x0E\xF2V[\x91Pa\x0F\ta\x0F\x01`\x01\x93\x91PPa\x10$V[a\x10d\x91P` =\x81\x11a\x10jW[a\x10\\\x81\x83a\n\xB8V[\x81\x01\x90a\r/V[_a\x10\x1EV[P=a\x10RV[a\r\xBAV[P\x90\x91\x92\x93\x94\x95Pa\x0F\x17V[PPPP\x90P`\x01\x90V[_\x90V[`\x01\x80`\xA0\x1B\x03\x16\x90V[a\x10\xA9a\x10\xAE\x91a\tMV[a\x10\x92V[\x90V[a\x10\xBB\x90Ta\x10\x9DV[\x90V[a\x10\xC6a\x10\x8EV[Pa\x10\xD0_a\x10\xB1V[\x90V[``\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\x10\xF0W` \x80\x91\x02\x01\x90V[a\n\xA4V[\x90a\x11\x07a\x11\x02\x83a\x10\xD8V[a\n\xE1V[\x91\x82RV[6\x907V[\x90a\x116a\x11\x1E\x83a\x10\xF5V[\x92` \x80a\x11,\x86\x93a\x10\xD8V[\x92\x01\x91\x03\x90a\x11\x0CV[V[\x90a\x11B\x82a\x06\x08V[\x81\x10\x15a\x11SW` \x80\x91\x02\x01\x01\x90V[a\x0B\xA5V[\x90a\x11b\x90a\x04\x17V[\x90RV[a\x11na\n\x95V[Pa\x11wa\x10\xD3V[Pa\x11\x8Aa\x11\x85`\x01a\tJV[a\x18iV[a\x11\x93\x81a\x0B/V[\x90a\x11\x9D\x81a\x11\x11V[\x92a\x11\xB0a\x11\xAB`\x01a\tJV[a\x18\x80V[\x92a\x11\xBA_a\x0BYV[\x93[\x84a\x11\xCFa\x11\xC9\x86a\x0BVV[\x91a\x0BVV[\x10\x80a\x12`W[\x15a\x12VWa\x120\x81a\x11\xF8a\x128\x93a\x11\xF3\x86\x91\x8A\x90\x92a\x0B\xB9V[a\x0B\xD9V[a\x12!a\x12\x0Fa\x12\n`\x03\x84\x90a\x03\x95V[a\tfV[a\x12\x1C\x8A\x91\x8A\x90\x92a\x118V[a\x11XV[a\x12+`\x01a\tJV[a\x18\xBAV[\x91\x90\x15a\x01tV[a\x12LWa\x12F\x90\x94a\x0B\x89V[\x93a\x11\xBCV[P\x91P\x91P[\x91\x90V[P\x91P\x91Pa\x12RV[P\x80a\x12|a\x12va\x12q_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14\x15a\x11\xD6V[\x90a\x12\x96\x92\x91a\x12\x91a\x13\x82V[a\x12\x98V[V[\x90\x91a\x12\xA4\x90\x82a\x16\xF4V[a\x12\xB9\x82a\x12\xB4`\x03\x84\x90a\x03\x95V[a\x08sV[\x90a\x12\xEDa\x12\xE7\x7F\xAB\x1B\xFC\x94fC\xFE\xF3\xADND\xE40'\xBCZ\xCF\x93\xBA\xAF\xA5E\xC3\xED\x03pv\x1DK\xB4%\xDA\x93a\x03\x89V[\x91a\x07\xD1V[\x91a\x12\xF6a\0\xD2V[\x80a\x13\0\x81a\x01<V[\x03\x90\xA3V[\x90a\x13\x10\x92\x91a\x12\x83V[V[a\x13#\x90a\x13\x1Ea\x13\x82V[a\x13%V[V[\x80a\x13@a\x13:a\x135_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x13PWa\x13N\x90a\x19$V[V[a\x13sa\x13\\_a\t>V[_\x91\x82\x91c\x1EO\xBD\xF7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13\x80\x90a\x13\x12V[V[a\x13\x8Aa\x10\xBEV[a\x13\xA3a\x13\x9Da\x13\x98a\x19\x83V[a\0\xEFV[\x91a\0\xEFV[\x03a\x13\xAAWV[a\x13\xCCa\x13\xB5a\x19\x83V[_\x91\x82\x91c\x11\x8C\xDA\xA7`\xE0\x1B\x83R`\x04\x83\x01a\x05\xBEV[\x03\x90\xFD[a\x13\xE1\x90a\x13\xDCa\x13\x82V[a\x14nV[V[` \x91\x81R\x01\x90V[_\x7FAddress not removed\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x14 `\x13` \x92a\x13\xE3V[a\x14)\x81a\x13\xECV[\x01\x90V[a\x14B\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x14\x13V[\x90V[\x15a\x14LWV[a\x14Ta\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x14j`\x04\x82\x01a\x14-V[\x03\x90\xFD[\x80a\x14\x89a\x14\x83a\x14~_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x15<Wa\x14\xABa\x14\xA5`\x01a\x14\xA0\x84\x91a\tJV[a\x17MV[\x15a\x01tV[a\x15 Wa\x14\xDEa\x14\xC6`\x01a\x14\xC1\x84\x91a\tJV[a\x1A\x95V[a\x14\xD8a\x14\xD2\x84a\0\xEFV[\x91a\0\xEFV[\x14a\x14EV[a\x15\x08\x7F\xB5\xD6\x8C\xA4cr\xBB\xE6\xEC\x13\x8D=\x04#`\x82i\xB3\x11t\x96\xA4bh\xF8`\x80\xCD\xBC\xBE\xA9\xBE\x91a\x03\x89V[\x90a\x15\x11a\0\xD2V[\x80a\x15\x1B\x81a\x01<V[\x03\x90\xA2V[_c=\x0F)=`\xE0\x1B\x81R\x80a\x158`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x15T`\x04\x82\x01a\x01<V[\x03\x90\xFD[a\x15a\x90a\x13\xD0V[V[\x90a\x15u\x91a\x15pa\x13\x82V[a\x15\xF9V[V[_\x7FAddress not added\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x01RV[a\x15\xAB`\x11` \x92a\x13\xE3V[a\x15\xB4\x81a\x15wV[\x01\x90V[a\x15\xCD\x90` \x81\x01\x90_\x81\x83\x03\x91\x01Ra\x15\x9EV[\x90V[\x15a\x15\xD7WV[a\x15\xDFa\0\xD2V[bF\x1B\xCD`\xE5\x1B\x81R\x80a\x15\xF5`\x04\x82\x01a\x15\xB8V[\x03\x90\xFD[\x90\x81a\x16\x15a\x16\x0Fa\x16\n_a\t>V[a\0\xEFV[\x91a\0\xEFV[\x14a\x16\xD8Wa\x16.`\x01a\x16)\x84\x91a\tJV[a\x17MV[a\x16\xBCWa\x16:a\x0C\xF2V[P_\x14a\x16\xA0Wa\x16^a\x16X`\x01a\x16S\x84\x91a\tJV[a\x1B\xE9V[[a\x15\xD0V[a\x16\x88\x7Fb\x10\x1C\xCC\xC1\x86M4\x92)\0p\xF4\xDB\xF1hy\xDExa\xAC\xB5\xDC\xB8\x18\x0BU\xD2\xED|\xD7\xE7\x91a\x03\x89V[\x90a\x16\x91a\0\xD2V[\x80a\x16\x9B\x81a\x01<V[\x03\x90\xA2V[a\x16^a\x16\xB7`\x01a\x16\xB2\x84\x91a\tJV[a\x1B\xC9V[a\x16YV[_cQl5\x0F`\xE1\x1B\x81R\x80a\x16\xD4`\x04\x82\x01a\x01<V[\x03\x90\xFD[_c\xE6\xC4${`\xE0\x1B\x81R\x80a\x16\xF0`\x04\x82\x01a\x01<V[\x03\x90\xFD[\x90a\x16\xFE\x91a\x15cV[V[\x90a\x17\n\x90a\x03\x89V[_R` R`@_ \x90V[_\x90V[a\x17#\x90a\x01tV[\x90V[\x90a\x170\x90a\x17\x1AV[_R` R`@_ \x90V[a\x17E_a\t>V[\x90V[`\x01\x90V[a\x17Ua\x0C\xF2V[Pa\x17}a\x17xa\x17j`\x01\x84\x01\x85\x90a\x17\0V[a\x17ra\x17\x16V[\x90a\x17&V[a\x10\xB1V[a\x17\x96a\x17\x90a\x17\x8Ba\x17<V[a\0\xEFV[\x91a\0\xEFV[\x14\x80a\x17\xFAW[_\x14a\x17\xF3Wa\x17\xDDa\x17\xD7a\x17\xD2a\x17\xC4`\x01a\x17\xE3\x95\x01a\x17\xBEa\x17<V[\x90a\x17\0V[a\x17\xCCa\x17HV[\x90a\x17&V[a\x10\xB1V[\x92a\0\xEFV[\x91a\0\xEFV[\x14_\x14a\x17\xEFW`\x01\x90V[_\x90V[PP`\x01\x90V[Pa\x18\"a\x18\x1Da\x18\x0F`\x01\x84\x01\x85\x90a\x17\0V[a\x18\x17a\x17HV[\x90a\x17&V[a\x10\xB1V[a\x18;a\x185a\x180a\x17<V[a\0\xEFV[\x91a\0\xEFV[\x14a\x17\x9DV[_\x90V[\x90V[a\x18Ta\x18Y\x91a\tMV[a\x18EV[\x90V[a\x18f\x90Ta\x18HV[\x90V[_a\x18}\x91a\x18va\x18AV[P\x01a\x18\\V[\x90V[a\x18\xB2a\x18\xA4`\x01a\x18\xB7\x93a\x18\x94a\x10\x8EV[P\x01a\x18\x9Ea\x17<V[\x90a\x17\0V[a\x18\xACa\x17HV[\x90a\x17&V[a\x10\xB1V[\x90V[\x90a\x18\xE0\x91a\x18\xC7a\x0C\xF2V[Pa\x18\xD0a\x10\x8EV[P\x90a\x18\xDAa\x17HV[\x91a\x1C\tV[\x91\x90\x91\x90V[\x90a\x18\xF7`\x01\x80`\xA0\x1B\x03\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[\x90V[\x90a\x19\x19a\x19\x14a\x19 \x92a\x03\x89V[a\x19\x01V[\x82Ta\x18\xE6V[\x90UV[a\x19-_a\x10\xB1V[a\x197\x82_a\x19\x04V[\x90a\x19ka\x19e\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x93a\x03\x89V[\x91a\x03\x89V[\x91a\x19ta\0\xD2V[\x80a\x19~\x81a\x01<V[\x03\x90\xA3V[a\x19\x8Ba\x10\x8EV[P3\x90V[a\x19\x99_a\t>V[\x90V[\x91\x90`\x08a\x19\xBC\x91\x02\x91a\x19\xB6`\x01\x80`\xA0\x1B\x03\x84a\x07\xA8V[\x92a\x07\xA8V[\x91\x81\x19\x16\x91\x16\x17\x90V[\x91\x90a\x19\xDCa\x19\xD7a\x19\xE4\x93a\x03\x89V[a\x19\x01V[\x90\x83Ta\x19\x9CV[\x90UV[a\x19\xFA\x91a\x19\xF4a\x10\x8EV[\x91a\x19\xC6V[V[\x90V[a\x1A\x13a\x1A\x0Ea\x1A\x18\x92a\x19\xFCV[a\x03^V[a\x0BVV[\x90V[a\x1A*a\x1A0\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x03\x91\x82\x11a\x1A;WV[a\x0BuV[\x90a\x1AL_\x19\x91a\x08XV[\x91\x81\x19\x16\x91\x16\x17\x90V[a\x1Aja\x1Aea\x1Ao\x92a\x0BVV[a\x03^V[a\x0BVV[\x90V[\x90V[\x90a\x1A\x8Aa\x1A\x85a\x1A\x91\x92a\x1AVV[a\x1ArV[\x82Ta\x1A@V[\x90UV[a\x1A\x9Da\x10\x8EV[P\x81a\x1A\xB8a\x1A\xB2a\x1A\xADa\x19\x90V[a\0\xEFV[\x91a\0\xEFV[\x14\x80\x15a\x1B\xAFW[a\x1B\xA1W\x80a\x1B)a\x1B\x9E\x92a\x1A\xF3a\x1A\xEEa\x1A\xE0`\x01\x86\x01\x88\x90a\x17\0V[a\x1A\xE8a\x17\x16V[\x90a\x17&V[a\x10\xB1V[a\x1B\x1Aa\x1B\x15a\x1B\x07`\x01\x87\x01\x89\x90a\x17\0V[a\x1B\x0Fa\x17HV[\x90a\x17&V[a\x10\xB1V[\x90a\x1B#a\x17HV[\x92a\x1C\x85V[a\x1BQ_a\x1BLa\x1B>`\x01\x85\x01\x87\x90a\x17\0V[a\x1BFa\x17\x16V[\x90a\x17&V[a\x19\xE8V[a\x1By_a\x1Bta\x1Bf`\x01\x85\x01\x87\x90a\x17\0V[a\x1Bna\x17HV[\x90a\x17&V[a\x19\xE8V[a\x1B\x98_a\x1B\x87`\x01a\x19\xFFV[\x92\x01\x91a\x1B\x93\x83a\x18\\V[a\x1A\x1BV[\x90a\x1AuV[\x90V[PPa\x1B\xAC_a\t>V[\x90V[Pa\x1B\xC4a\x1B\xBE\x82\x84\x90a\x17MV[\x15a\x01tV[a\x1A\xC0V[\x90a\x1B\xE6\x91a\x1B\xD6a\x0C\xF2V[P\x90a\x1B\xE0a\x17\x16V[\x91a\x1C\xD0V[\x90V[\x90a\x1C\x06\x91a\x1B\xF6a\x0C\xF2V[P\x90a\x1C\0a\x17HV[\x91a\x1C\xD0V[\x90V[\x91a\x1C\x12a\x0C\xF2V[Pa\x1C\x1Ba\x10\x8EV[Pa\x1C0a\x1C*\x84\x84\x90a\x17MV[\x15a\x01tV[_\x14a\x1CGWPPP_\x90a\x1CD_a\t>V[\x90V[a\x1CZa\x1C_\x92`\x01a\x1Cd\x95\x01a\x17\0V[a\x17&V[a\x10\xB1V[\x90\x81a\x1C\x7Fa\x1Cya\x1Cta\x17<V[a\0\xEFV[\x91a\0\xEFV[\x14\x15\x91\x90V[\x91\x92a\x1C\xC4a\x1C\xC9\x92`\x01a\x1C\xCE\x96a\x1C\xBD\x83a\x1C\xB8a\x1C\xA8\x85\x8B\x01\x85\x90a\x17\0V[a\x1C\xB2\x89\x15a\x01tV[\x90a\x17&V[a\x19\x04V[\x95\x01a\x17\0V[a\x17&V[a\x19\x04V[V[\x91a\x1C\xEF\x92a\x1C\xDDa\x0C\xF2V[P\x91a\x1C\xE7a\x17<V[\x90\x91\x92a\x1D\x17V[\x90V[a\x1D\x01a\x1D\x07\x91\x93\x92\x93a\x0BVV[\x92a\x0BVV[\x82\x01\x80\x92\x11a\x1D\x12WV[a\x0BuV[\x91a\x1D a\x0C\xF2V[Pa\x1D5a\x1D/\x84\x83\x90a\x17MV[\x15a\x01tV[\x80a\x1D\xB2W[a\x1DGWPPPP_\x90V[a\x1D\xAD\x93a\x1D\x88\x92a\x1D~a\x1Dra\x1Dma\x1Df`\x01\x89\x01\x85\x90a\x17\0V[\x85\x90a\x17&V[a\x10\xB1V[\x91\x86\x90\x85\x90\x85\x92a\x1C\x85V[\x84\x92\x90\x91\x92a\x1C\x85V[a\x1D\xA7_a\x1D\x96`\x01a\x19\xFFV[\x92\x01\x91a\x1D\xA2\x83a\x18\\V[a\x1C\xF2V[\x90a\x1AuV[`\x01\x90V[Pa\x1D\xBE\x83\x83\x90a\x17MV[a\x1D;V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CheckType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<CheckType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl CheckType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from_underlying(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into_underlying(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl From<u8> for CheckType {
            fn from(value: u8) -> Self {
                Self::from_underlying(value)
            }
        }
        #[automatically_derived]
        impl From<CheckType> for u8 {
            fn from(value: CheckType) -> Self {
                value.into_underlying()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CheckType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CheckType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressAlreadyExists()` and selector `0xa2d86a1e`.
```solidity
error AddressAlreadyExists();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressAlreadyExists;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: AddressAlreadyExists) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressAlreadyExists()";
            const SELECTOR: [u8; 4] = [162u8, 216u8, 106u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressDoesNotExist()` and selector `0x3d0f293d`.
```solidity
error AddressDoesNotExist();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressDoesNotExist;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: AddressDoesNotExist) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressDoesNotExist()";
            const SELECTOR: [u8; 4] = [61u8, 15u8, 41u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CompositeAllOrPermissionChecksFailed(address,bytes)` and selector `0xf59be56c`.
```solidity
error CompositeAllOrPermissionChecksFailed(address msgSender, bytes data);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CompositeAllOrPermissionChecksFailed {
        #[allow(missing_docs)]
        pub msgSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CompositeAllOrPermissionChecksFailed>
        for UnderlyingRustTuple<'_> {
            fn from(value: CompositeAllOrPermissionChecksFailed) -> Self {
                (value.msgSender, value.data)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CompositeAllOrPermissionChecksFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    msgSender: tuple.0,
                    data: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CompositeAllOrPermissionChecksFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CompositeAllOrPermissionChecksFailed(address,bytes)";
            const SELECTOR: [u8; 4] = [245u8, 155u8, 229u8, 108u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CompositeAndPermissionCheckFailed(address,address,bytes)` and selector `0x0cecaaea`.
```solidity
error CompositeAndPermissionCheckFailed(address requireAddress, address msgSender, bytes data);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CompositeAndPermissionCheckFailed {
        #[allow(missing_docs)]
        pub requireAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub msgSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CompositeAndPermissionCheckFailed>
        for UnderlyingRustTuple<'_> {
            fn from(value: CompositeAndPermissionCheckFailed) -> Self {
                (value.requireAddress, value.msgSender, value.data)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CompositeAndPermissionCheckFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    requireAddress: tuple.0,
                    msgSender: tuple.1,
                    data: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CompositeAndPermissionCheckFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CompositeAndPermissionCheckFailed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [12u8, 236u8, 170u8, 234u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.requireAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidAddress()` and selector `0xe6c4247b`.
```solidity
error InvalidAddress();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidAddress;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidAddress> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidAddress) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidAddress()";
            const SELECTOR: [u8; 4] = [230u8, 196u8, 36u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CheckTypeUpdated(address,uint8,uint8)` and selector `0xa09388b78c1a36296c3bc4cc7a25b5768b1d9e0e628ed553e26c26aaedf94622`.
```solidity
event CheckTypeUpdated(address indexed check, CheckType indexed oldType, CheckType indexed newType);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CheckTypeUpdated {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub oldType: <CheckType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub newType: <CheckType as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CheckTypeUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                CheckType,
                CheckType,
            );
            const SIGNATURE: &'static str = "CheckTypeUpdated(address,uint8,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                160u8, 147u8, 136u8, 183u8, 140u8, 26u8, 54u8, 41u8, 108u8, 59u8, 196u8,
                204u8, 122u8, 37u8, 181u8, 118u8, 139u8, 29u8, 158u8, 14u8, 98u8, 142u8,
                213u8, 83u8, 226u8, 108u8, 38u8, 170u8, 237u8, 249u8, 70u8, 34u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    check: topics.1,
                    oldType: topics.2,
                    newType: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.check.clone(),
                    self.oldType.clone(),
                    self.newType.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                out[2usize] = <CheckType as alloy_sol_types::EventTopic>::encode_topic(
                    &self.oldType,
                );
                out[3usize] = <CheckType as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newType,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CheckTypeUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CheckTypeUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CheckTypeUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PermissionCheckAdded(address)` and selector `0x62101cccc1864d3492290070f4dbf16879de7861acb5dcb8180b55d2ed7cd7e7`.
```solidity
event PermissionCheckAdded(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PermissionCheckAdded {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PermissionCheckAdded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PermissionCheckAdded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8, 16u8, 28u8, 204u8, 193u8, 134u8, 77u8, 52u8, 146u8, 41u8, 0u8,
                112u8, 244u8, 219u8, 241u8, 104u8, 121u8, 222u8, 120u8, 97u8, 172u8,
                181u8, 220u8, 184u8, 24u8, 11u8, 85u8, 210u8, 237u8, 124u8, 215u8, 231u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PermissionCheckAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PermissionCheckAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PermissionCheckAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PermissionCheckAddedWithType(address,uint8)` and selector `0xab1bfc946643fef3ad4e44e43027bc5acf93baafa545c3ed0370761d4bb425da`.
```solidity
event PermissionCheckAddedWithType(address indexed check, CheckType indexed checkType);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PermissionCheckAddedWithType {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub checkType: <CheckType as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PermissionCheckAddedWithType {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                CheckType,
            );
            const SIGNATURE: &'static str = "PermissionCheckAddedWithType(address,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                171u8, 27u8, 252u8, 148u8, 102u8, 67u8, 254u8, 243u8, 173u8, 78u8, 68u8,
                228u8, 48u8, 39u8, 188u8, 90u8, 207u8, 147u8, 186u8, 175u8, 165u8, 69u8,
                195u8, 237u8, 3u8, 112u8, 118u8, 29u8, 75u8, 180u8, 37u8, 218u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    check: topics.1,
                    checkType: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone(), self.checkType.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                out[2usize] = <CheckType as alloy_sol_types::EventTopic>::encode_topic(
                    &self.checkType,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PermissionCheckAddedWithType {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PermissionCheckAddedWithType> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PermissionCheckAddedWithType,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PermissionCheckRemoved(address)` and selector `0xb5d68ca46372bbe6ec138d3d0423608269b3117496a46268f86080cdbcbea9be`.
```solidity
event PermissionCheckRemoved(address indexed check);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PermissionCheckRemoved {
        #[allow(missing_docs)]
        pub check: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PermissionCheckRemoved {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "PermissionCheckRemoved(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                181u8, 214u8, 140u8, 164u8, 99u8, 114u8, 187u8, 230u8, 236u8, 19u8,
                141u8, 61u8, 4u8, 35u8, 96u8, 130u8, 105u8, 179u8, 17u8, 116u8, 150u8,
                164u8, 98u8, 104u8, 248u8, 96u8, 128u8, 205u8, 188u8, 190u8, 169u8, 190u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { check: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.check.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.check,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PermissionCheckRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PermissionCheckRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PermissionCheckRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address admin);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub admin: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.admin,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { admin: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.admin,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addPermissionCheck(address,bool)` and selector `0x052eefd1`.
```solidity
function addPermissionCheck(address _address, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addPermissionCheck(address,bool)`](addPermissionCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckCall) -> Self {
                    (value._address, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        addToHead: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addPermissionCheckReturn {
            fn _tokenize(
                &self,
            ) -> <addPermissionCheckCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addPermissionCheckCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addPermissionCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addPermissionCheck(address,bool)";
            const SELECTOR: [u8; 4] = [5u8, 46u8, 239u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addPermissionCheckReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addPermissionCheckWithType(address,uint8,bool)` and selector `0xb1c61e00`.
```solidity
function addPermissionCheckWithType(address _address, CheckType checkType, bool addToHead) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckWithTypeCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub checkType: <CheckType as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub addToHead: bool,
    }
    ///Container type for the return parameters of the [`addPermissionCheckWithType(address,uint8,bool)`](addPermissionCheckWithTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addPermissionCheckWithTypeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                CheckType,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <CheckType as alloy::sol_types::SolType>::RustType,
                bool,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckWithTypeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckWithTypeCall) -> Self {
                    (value._address, value.checkType, value.addToHead)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckWithTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        checkType: tuple.1,
                        addToHead: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addPermissionCheckWithTypeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addPermissionCheckWithTypeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addPermissionCheckWithTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl addPermissionCheckWithTypeReturn {
            fn _tokenize(
                &self,
            ) -> <addPermissionCheckWithTypeCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addPermissionCheckWithTypeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                CheckType,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addPermissionCheckWithTypeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addPermissionCheckWithType(address,uint8,bool)";
            const SELECTOR: [u8; 4] = [177u8, 198u8, 30u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <CheckType as alloy_sol_types::SolType>::tokenize(&self.checkType),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.addToHead,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                addPermissionCheckWithTypeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkTypes(address)` and selector `0x21284f7e`.
```solidity
function checkTypes(address) external view returns (CheckType);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkTypesCall(pub alloy::sol_types::private::Address);
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`checkTypes(address)`](checkTypesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkTypesReturn {
        #[allow(missing_docs)]
        pub _0: <CheckType as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkTypesCall> for UnderlyingRustTuple<'_> {
                fn from(value: checkTypesCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for checkTypesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CheckType,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CheckType as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkTypesReturn> for UnderlyingRustTuple<'_> {
                fn from(value: checkTypesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for checkTypesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkTypesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = <CheckType as alloy::sol_types::SolType>::RustType;
            type ReturnTuple<'a> = (CheckType,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkTypes(address)";
            const SELECTOR: [u8; 4] = [33u8, 40u8, 79u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.0,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (<CheckType as alloy_sol_types::SolType>::tokenize(ret),)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: checkTypesReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: checkTypesReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAllPermissionChecks()` and selector `0x1b42c711`.
```solidity
function getAllPermissionChecks() external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAllPermissionChecks()`](getAllPermissionChecksCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllPermissionChecksCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Vec<
                alloy::sol_types::private::Address,
            >;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllPermissionChecks()";
            const SELECTOR: [u8; 4] = [27u8, 66u8, 199u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: getAllPermissionChecksReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: getAllPermissionChecksReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getAllPermissionChecksWithTypes()` and selector `0xa213fd22`.
```solidity
function getAllPermissionChecksWithTypes() external view returns (address[] memory addresses, CheckType[] memory types);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksWithTypesCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getAllPermissionChecksWithTypes()`](getAllPermissionChecksWithTypesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getAllPermissionChecksWithTypesReturn {
        #[allow(missing_docs)]
        pub addresses: alloy::sol_types::private::Vec<
            alloy::sol_types::private::Address,
        >,
        #[allow(missing_docs)]
        pub types: alloy::sol_types::private::Vec<
            <CheckType as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksWithTypesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksWithTypesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksWithTypesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<CheckType>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<
                    <CheckType as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getAllPermissionChecksWithTypesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getAllPermissionChecksWithTypesReturn) -> Self {
                    (value.addresses, value.types)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getAllPermissionChecksWithTypesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        addresses: tuple.0,
                        types: tuple.1,
                    }
                }
            }
        }
        impl getAllPermissionChecksWithTypesReturn {
            fn _tokenize(
                &self,
            ) -> <getAllPermissionChecksWithTypesCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.addresses),
                    <alloy::sol_types::sol_data::Array<
                        CheckType,
                    > as alloy_sol_types::SolType>::tokenize(&self.types),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getAllPermissionChecksWithTypesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getAllPermissionChecksWithTypesReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<CheckType>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getAllPermissionChecksWithTypes()";
            const SELECTOR: [u8; 4] = [162u8, 19u8, 253u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                getAllPermissionChecksWithTypesReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isAllowed(address,address,bytes)` and selector `0x7a3979dc`.
```solidity
function isAllowed(address msgSender, address txOrigin, bytes memory data) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedCall {
        #[allow(missing_docs)]
        pub msgSender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub txOrigin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isAllowed(address,address,bytes)`](isAllowedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isAllowedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedCall> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedCall) -> Self {
                    (value.msgSender, value.txOrigin, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        msgSender: tuple.0,
                        txOrigin: tuple.1,
                        data: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isAllowedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: isAllowedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isAllowedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isAllowedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isAllowed(address,address,bytes)";
            const SELECTOR: [u8; 4] = [122u8, 57u8, 121u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.msgSender,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txOrigin,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: isAllowedReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: isAllowedReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `removePermissionCheck(address)` and selector `0x04f386f4`.
```solidity
function removePermissionCheck(address _address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePermissionCheckCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`removePermissionCheck(address)`](removePermissionCheckCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct removePermissionCheckReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePermissionCheckCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: removePermissionCheckCall) -> Self {
                    (value._address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removePermissionCheckCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<removePermissionCheckReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: removePermissionCheckReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for removePermissionCheckReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl removePermissionCheckReturn {
            fn _tokenize(
                &self,
            ) -> <removePermissionCheckCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for removePermissionCheckCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = removePermissionCheckReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "removePermissionCheck(address)";
            const SELECTOR: [u8; 4] = [4u8, 243u8, 134u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                removePermissionCheckReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall;
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <renounceOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl transferOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <transferOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                transferOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateCheckType(address,uint8)` and selector `0x0838bbd4`.
```solidity
function updateCheckType(address _address, CheckType newCheckType) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateCheckTypeCall {
        #[allow(missing_docs)]
        pub _address: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newCheckType: <CheckType as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`updateCheckType(address,uint8)`](updateCheckTypeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateCheckTypeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                CheckType,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <CheckType as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateCheckTypeCall> for UnderlyingRustTuple<'_> {
                fn from(value: updateCheckTypeCall) -> Self {
                    (value._address, value.newCheckType)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for updateCheckTypeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _address: tuple.0,
                        newCheckType: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateCheckTypeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateCheckTypeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateCheckTypeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl updateCheckTypeReturn {
            fn _tokenize(
                &self,
            ) -> <updateCheckTypeCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateCheckTypeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address, CheckType);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateCheckTypeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateCheckType(address,uint8)";
            const SELECTOR: [u8; 4] = [8u8, 56u8, 187u8, 212u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._address,
                    ),
                    <CheckType as alloy_sol_types::SolType>::tokenize(&self.newCheckType),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                updateCheckTypeReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RequireCompositeModule`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum RequireCompositeModuleCalls {
        #[allow(missing_docs)]
        addPermissionCheck(addPermissionCheckCall),
        #[allow(missing_docs)]
        addPermissionCheckWithType(addPermissionCheckWithTypeCall),
        #[allow(missing_docs)]
        checkTypes(checkTypesCall),
        #[allow(missing_docs)]
        getAllPermissionChecks(getAllPermissionChecksCall),
        #[allow(missing_docs)]
        getAllPermissionChecksWithTypes(getAllPermissionChecksWithTypesCall),
        #[allow(missing_docs)]
        isAllowed(isAllowedCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        removePermissionCheck(removePermissionCheckCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateCheckType(updateCheckTypeCall),
    }
    #[automatically_derived]
    impl RequireCompositeModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 243u8, 134u8, 244u8],
            [5u8, 46u8, 239u8, 209u8],
            [8u8, 56u8, 187u8, 212u8],
            [27u8, 66u8, 199u8, 17u8],
            [33u8, 40u8, 79u8, 126u8],
            [113u8, 80u8, 24u8, 166u8],
            [122u8, 57u8, 121u8, 220u8],
            [141u8, 165u8, 203u8, 91u8],
            [162u8, 19u8, 253u8, 34u8],
            [177u8, 198u8, 30u8, 0u8],
            [242u8, 253u8, 227u8, 139u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireCompositeModuleCalls {
        const NAME: &'static str = "RequireCompositeModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::addPermissionCheck(_) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addPermissionCheckWithType(_) => {
                    <addPermissionCheckWithTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::checkTypes(_) => {
                    <checkTypesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllPermissionChecks(_) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getAllPermissionChecksWithTypes(_) => {
                    <getAllPermissionChecksWithTypesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isAllowed(_) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::removePermissionCheck(_) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateCheckType(_) => {
                    <updateCheckTypeCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleCalls>] = &[
                {
                    fn removePermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::removePermissionCheck)
                    }
                    removePermissionCheck
                },
                {
                    fn addPermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::addPermissionCheck)
                    }
                    addPermissionCheck
                },
                {
                    fn updateCheckType(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <updateCheckTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::updateCheckType)
                    }
                    updateCheckType
                },
                {
                    fn getAllPermissionChecks(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::getAllPermissionChecks)
                    }
                    getAllPermissionChecks
                },
                {
                    fn checkTypes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <checkTypesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::checkTypes)
                    }
                    checkTypes
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireCompositeModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(RequireCompositeModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn getAllPermissionChecksWithTypes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <getAllPermissionChecksWithTypesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleCalls::getAllPermissionChecksWithTypes,
                            )
                    }
                    getAllPermissionChecksWithTypes
                },
                {
                    fn addPermissionCheckWithType(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <addPermissionCheckWithTypeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::addPermissionCheckWithType)
                    }
                    addPermissionCheckWithType
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleCalls>] = &[
                {
                    fn removePermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::removePermissionCheck)
                    }
                    removePermissionCheck
                },
                {
                    fn addPermissionCheck(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::addPermissionCheck)
                    }
                    addPermissionCheck
                },
                {
                    fn updateCheckType(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <updateCheckTypeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::updateCheckType)
                    }
                    updateCheckType
                },
                {
                    fn getAllPermissionChecks(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::getAllPermissionChecks)
                    }
                    getAllPermissionChecks
                },
                {
                    fn checkTypes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <checkTypesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::checkTypes)
                    }
                    checkTypes
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn isAllowed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <isAllowedCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::isAllowed)
                    }
                    isAllowed
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::owner)
                    }
                    owner
                },
                {
                    fn getAllPermissionChecksWithTypes(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <getAllPermissionChecksWithTypesCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleCalls::getAllPermissionChecksWithTypes,
                            )
                    }
                    getAllPermissionChecksWithTypes
                },
                {
                    fn addPermissionCheckWithType(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <addPermissionCheckWithTypeCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::addPermissionCheckWithType)
                    }
                    addPermissionCheckWithType
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleCalls::transferOwnership)
                    }
                    transferOwnership
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::addPermissionCheck(inner) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addPermissionCheckWithType(inner) => {
                    <addPermissionCheckWithTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::checkTypes(inner) => {
                    <checkTypesCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getAllPermissionChecks(inner) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getAllPermissionChecksWithTypes(inner) => {
                    <getAllPermissionChecksWithTypesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::removePermissionCheck(inner) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateCheckType(inner) => {
                    <updateCheckTypeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::addPermissionCheck(inner) => {
                    <addPermissionCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addPermissionCheckWithType(inner) => {
                    <addPermissionCheckWithTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkTypes(inner) => {
                    <checkTypesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllPermissionChecks(inner) => {
                    <getAllPermissionChecksCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getAllPermissionChecksWithTypes(inner) => {
                    <getAllPermissionChecksWithTypesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isAllowed(inner) => {
                    <isAllowedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::removePermissionCheck(inner) => {
                    <removePermissionCheckCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateCheckType(inner) => {
                    <updateCheckTypeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireCompositeModule`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RequireCompositeModuleErrors {
        #[allow(missing_docs)]
        AddressAlreadyExists(AddressAlreadyExists),
        #[allow(missing_docs)]
        AddressDoesNotExist(AddressDoesNotExist),
        #[allow(missing_docs)]
        CompositeAllOrPermissionChecksFailed(CompositeAllOrPermissionChecksFailed),
        #[allow(missing_docs)]
        CompositeAndPermissionCheckFailed(CompositeAndPermissionCheckFailed),
        #[allow(missing_docs)]
        InvalidAddress(InvalidAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
    }
    #[automatically_derived]
    impl RequireCompositeModuleErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [12u8, 236u8, 170u8, 234u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [61u8, 15u8, 41u8, 61u8],
            [162u8, 216u8, 106u8, 30u8],
            [230u8, 196u8, 36u8, 123u8],
            [245u8, 155u8, 229u8, 108u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RequireCompositeModuleErrors {
        const NAME: &'static str = "RequireCompositeModuleErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressAlreadyExists(_) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressDoesNotExist(_) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CompositeAllOrPermissionChecksFailed(_) => {
                    <CompositeAllOrPermissionChecksFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CompositeAndPermissionCheckFailed(_) => {
                    <CompositeAndPermissionCheckFailed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidAddress(_) => {
                    <InvalidAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleErrors>] = &[
                {
                    fn CompositeAndPermissionCheckFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <CompositeAndPermissionCheckFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleErrors::CompositeAndPermissionCheckFailed,
                            )
                    }
                    CompositeAndPermissionCheckFailed
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
                {
                    fn CompositeAllOrPermissionChecksFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <CompositeAllOrPermissionChecksFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                RequireCompositeModuleErrors::CompositeAllOrPermissionChecksFailed,
                            )
                    }
                    CompositeAllOrPermissionChecksFailed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<RequireCompositeModuleErrors>] = &[
                {
                    fn CompositeAndPermissionCheckFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <CompositeAndPermissionCheckFailed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleErrors::CompositeAndPermissionCheckFailed,
                            )
                    }
                    CompositeAndPermissionCheckFailed
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn AddressDoesNotExist(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <AddressDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::AddressDoesNotExist)
                    }
                    AddressDoesNotExist
                },
                {
                    fn AddressAlreadyExists(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <AddressAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::AddressAlreadyExists)
                    }
                    AddressAlreadyExists
                },
                {
                    fn InvalidAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <InvalidAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(RequireCompositeModuleErrors::InvalidAddress)
                    }
                    InvalidAddress
                },
                {
                    fn CompositeAllOrPermissionChecksFailed(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<RequireCompositeModuleErrors> {
                        <CompositeAllOrPermissionChecksFailed as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                RequireCompositeModuleErrors::CompositeAllOrPermissionChecksFailed,
                            )
                    }
                    CompositeAllOrPermissionChecksFailed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CompositeAllOrPermissionChecksFailed(inner) => {
                    <CompositeAllOrPermissionChecksFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CompositeAndPermissionCheckFailed(inner) => {
                    <CompositeAndPermissionCheckFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressAlreadyExists(inner) => {
                    <AddressAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressDoesNotExist(inner) => {
                    <AddressDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CompositeAllOrPermissionChecksFailed(inner) => {
                    <CompositeAllOrPermissionChecksFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CompositeAndPermissionCheckFailed(inner) => {
                    <CompositeAndPermissionCheckFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidAddress(inner) => {
                    <InvalidAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RequireCompositeModule`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum RequireCompositeModuleEvents {
        #[allow(missing_docs)]
        CheckTypeUpdated(CheckTypeUpdated),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        PermissionCheckAdded(PermissionCheckAdded),
        #[allow(missing_docs)]
        PermissionCheckAddedWithType(PermissionCheckAddedWithType),
        #[allow(missing_docs)]
        PermissionCheckRemoved(PermissionCheckRemoved),
    }
    #[automatically_derived]
    impl RequireCompositeModuleEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                98u8, 16u8, 28u8, 204u8, 193u8, 134u8, 77u8, 52u8, 146u8, 41u8, 0u8,
                112u8, 244u8, 219u8, 241u8, 104u8, 121u8, 222u8, 120u8, 97u8, 172u8,
                181u8, 220u8, 184u8, 24u8, 11u8, 85u8, 210u8, 237u8, 124u8, 215u8, 231u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                160u8, 147u8, 136u8, 183u8, 140u8, 26u8, 54u8, 41u8, 108u8, 59u8, 196u8,
                204u8, 122u8, 37u8, 181u8, 118u8, 139u8, 29u8, 158u8, 14u8, 98u8, 142u8,
                213u8, 83u8, 226u8, 108u8, 38u8, 170u8, 237u8, 249u8, 70u8, 34u8,
            ],
            [
                171u8, 27u8, 252u8, 148u8, 102u8, 67u8, 254u8, 243u8, 173u8, 78u8, 68u8,
                228u8, 48u8, 39u8, 188u8, 90u8, 207u8, 147u8, 186u8, 175u8, 165u8, 69u8,
                195u8, 237u8, 3u8, 112u8, 118u8, 29u8, 75u8, 180u8, 37u8, 218u8,
            ],
            [
                181u8, 214u8, 140u8, 164u8, 99u8, 114u8, 187u8, 230u8, 236u8, 19u8,
                141u8, 61u8, 4u8, 35u8, 96u8, 130u8, 105u8, 179u8, 17u8, 116u8, 150u8,
                164u8, 98u8, 104u8, 248u8, 96u8, 128u8, 205u8, 188u8, 190u8, 169u8, 190u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RequireCompositeModuleEvents {
        const NAME: &'static str = "RequireCompositeModuleEvents";
        const COUNT: usize = 5usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<CheckTypeUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CheckTypeUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::CheckTypeUpdated)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <PermissionCheckAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PermissionCheckAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PermissionCheckAdded)
                }
                Some(
                    <PermissionCheckAddedWithType as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PermissionCheckAddedWithType as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PermissionCheckAddedWithType)
                }
                Some(
                    <PermissionCheckRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PermissionCheckRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::PermissionCheckRemoved)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RequireCompositeModuleEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CheckTypeUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PermissionCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PermissionCheckAddedWithType(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PermissionCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::CheckTypeUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PermissionCheckAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PermissionCheckAddedWithType(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PermissionCheckRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RequireCompositeModule`](self) contract instance.

See the [wrapper's documentation](`RequireCompositeModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RequireCompositeModuleInstance<P, N> {
        RequireCompositeModuleInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RequireCompositeModuleInstance<P, N>>,
    > {
        RequireCompositeModuleInstance::<P, N>::deploy(provider, admin)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        admin: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        RequireCompositeModuleInstance::<P, N>::deploy_builder(provider, admin)
    }
    /**A [`RequireCompositeModule`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RequireCompositeModule`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RequireCompositeModuleInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for RequireCompositeModuleInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RequireCompositeModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireCompositeModuleInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`RequireCompositeModule`](self) contract instance.

See the [wrapper's documentation](`RequireCompositeModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<RequireCompositeModuleInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider, admin);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            admin: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { admin },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> RequireCompositeModuleInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RequireCompositeModuleInstance<P, N> {
            RequireCompositeModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireCompositeModuleInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`addPermissionCheck`] function.
        pub fn addPermissionCheck(
            &self,
            _address: alloy::sol_types::private::Address,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<&P, addPermissionCheckCall, N> {
            self.call_builder(
                &addPermissionCheckCall {
                    _address,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`addPermissionCheckWithType`] function.
        pub fn addPermissionCheckWithType(
            &self,
            _address: alloy::sol_types::private::Address,
            checkType: <CheckType as alloy::sol_types::SolType>::RustType,
            addToHead: bool,
        ) -> alloy_contract::SolCallBuilder<&P, addPermissionCheckWithTypeCall, N> {
            self.call_builder(
                &addPermissionCheckWithTypeCall {
                    _address,
                    checkType,
                    addToHead,
                },
            )
        }
        ///Creates a new call builder for the [`checkTypes`] function.
        pub fn checkTypes(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, checkTypesCall, N> {
            self.call_builder(&checkTypesCall(_0))
        }
        ///Creates a new call builder for the [`getAllPermissionChecks`] function.
        pub fn getAllPermissionChecks(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getAllPermissionChecksCall, N> {
            self.call_builder(&getAllPermissionChecksCall)
        }
        ///Creates a new call builder for the [`getAllPermissionChecksWithTypes`] function.
        pub fn getAllPermissionChecksWithTypes(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, getAllPermissionChecksWithTypesCall, N> {
            self.call_builder(&getAllPermissionChecksWithTypesCall)
        }
        ///Creates a new call builder for the [`isAllowed`] function.
        pub fn isAllowed(
            &self,
            msgSender: alloy::sol_types::private::Address,
            txOrigin: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<&P, isAllowedCall, N> {
            self.call_builder(
                &isAllowedCall {
                    msgSender,
                    txOrigin,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<&P, ownerCall, N> {
            self.call_builder(&ownerCall)
        }
        ///Creates a new call builder for the [`removePermissionCheck`] function.
        pub fn removePermissionCheck(
            &self,
            _address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, removePermissionCheckCall, N> {
            self.call_builder(
                &removePermissionCheckCall {
                    _address,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall)
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateCheckType`] function.
        pub fn updateCheckType(
            &self,
            _address: alloy::sol_types::private::Address,
            newCheckType: <CheckType as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<&P, updateCheckTypeCall, N> {
            self.call_builder(
                &updateCheckTypeCall {
                    _address,
                    newCheckType,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > RequireCompositeModuleInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`CheckTypeUpdated`] event.
        pub fn CheckTypeUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, CheckTypeUpdated, N> {
            self.event_filter::<CheckTypeUpdated>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`PermissionCheckAdded`] event.
        pub fn PermissionCheckAdded_filter(
            &self,
        ) -> alloy_contract::Event<&P, PermissionCheckAdded, N> {
            self.event_filter::<PermissionCheckAdded>()
        }
        ///Creates a new event filter for the [`PermissionCheckAddedWithType`] event.
        pub fn PermissionCheckAddedWithType_filter(
            &self,
        ) -> alloy_contract::Event<&P, PermissionCheckAddedWithType, N> {
            self.event_filter::<PermissionCheckAddedWithType>()
        }
        ///Creates a new event filter for the [`PermissionCheckRemoved`] event.
        pub fn PermissionCheckRemoved_filter(
            &self,
        ) -> alloy_contract::Event<&P, PermissionCheckRemoved, N> {
            self.event_filter::<PermissionCheckRemoved>()
        }
    }
}
