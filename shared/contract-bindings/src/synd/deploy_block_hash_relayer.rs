/**

Generated by the following Solidity interface...
```solidity
interface DeployBlockHashRelayer {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod DeployBlockHashRelayer {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c5561145d908161002b8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c908163c04062261461007a575063f8ccbf4714610034575f80fd5b3461007757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007757602060ff600c5460101c166040519015158152f35b80fd5b90503461071f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261071f57737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561071f577f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1801561071457610701575b506040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4152425f494e424f585f414444524553530000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa9081156105b85782916106e2575b50604051907f350d56bf00000000000000000000000000000000000000000000000000000000825260206004830152601260248301527f53594e445f544f4b454e5f4144445245535300000000000000000000000000006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa91821561066c5783926106b1575b5061025e60405161022f604082610723565b601d81527f4465706c6f79696e6720426c6f636b4861736852656c617965722e2e2e0000006020820152610800565b61029f81604051610270604082610723565b600f81527f417262697472756d20496e626f783a00000000000000000000000000000000006020820152610889565b6102e0826040516102b1604082610723565b600b81527f53594e4420546f6b656e3a0000000000000000000000000000000000000000006020820152610889565b60405191610b43918284019284841067ffffffffffffffff85111761068457849273ffffffffffffffffffffffffffffffffffffffff60409593819361091a873916835216602082015203019082f080156106775773ffffffffffffffffffffffffffffffffffffffff1661038c8160405161035d604082610723565b601f81527f426c6f636b486173684d657373656e676572206465706c6f79656420746f3a006020820152610889565b6103cc60405161039d604082610723565b601a81527f3d3d3d204465706c6f796d656e742053756d6d617279203d3d3d0000000000006020820152610800565b61040d816040516103de604082610723565b601181527f426c6f636b4861736852656c617965723a0000000000000000000000000000006020820152610889565b6040517f557819a4000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561066c578391610618575b506004916104a860209273ffffffffffffffffffffffffffffffffffffffff60405191610478604084610723565b600f83527f417262697472756d20496e626f783a0000000000000000000000000000000000868401521690610889565b604051928380927f6213821d0000000000000000000000000000000000000000000000000000000082525afa80156105b85782906105c3575b61053b915073ffffffffffffffffffffffffffffffffffffffff6040519161050a604084610723565b600b83527f53594e4420546f6b656e3a00000000000000000000000000000000000000000060208401521690610889565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561007757806040517f76eadd36000000000000000000000000000000000000000000000000000000008152818160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156105b8576105a75750f35b816105b191610723565b6100775780f35b6040513d84823e3d90fd5b506020813d602011610610575b816105dd60209383610723565b8101031261060c575173ffffffffffffffffffffffffffffffffffffffff8116810361060c5761053b906104e1565b5080fd5b3d91506105d0565b90506020813d602011610664575b8161063360209383610723565b81010312610660575173ffffffffffffffffffffffffffffffffffffffff8116810361066057600461044a565b8280fd5b3d9150610626565b6040513d85823e3d90fd5b50604051903d90823e3d90fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6106d491925060203d6020116106db575b6106cc8183610723565b810190610791565b905f61021d565b503d6106c2565b6106fb915060203d6020116106db576106cc8183610723565b5f610196565b61070d91505f90610723565b5f5f610110565b6040513d5f823e3d90fd5b5f80fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761076457604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261071f575173ffffffffffffffffffffffffffffffffffffffff8116810361071f5790565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b5f61084661087282936040519283917f41304fac0000000000000000000000000000000000000000000000000000000060208401526020602484015260448301906107bd565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610723565b6020815191016a636f6e736f6c652e6c6f675afa50565b6108e66108725f9392849373ffffffffffffffffffffffffffffffffffffffff6040519485937f319af3330000000000000000000000000000000000000000000000000000000060208601526040602486015260648501906107bd565b91166044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261072356fe60c080604052346100fa57604081610b43803803809161001f8285610111565b8339810103126100fa5780516001600160a01b038116918282036100fa5760200151906001600160a01b038216908183036100fa575f9360209360449260805260a052604051948593849263095ea7b360e01b84526004840152811960248401525af18015610106576100ca575b6040516109fa9081610149823960805181818161036101528181610576015261085c015260a0518181816101060152818161050801526105e80152f35b6020813d6020116100fe575b816100e360209383610111565b810103126100fa5751801515036100fa575f61008d565b5f80fd5b3d91506100d6565b6040513d5f823e3d90fd5b601f909101601f19168101906001600160401b0382119082101761013457604052565b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c80633b8f26a41461059a578063557819a41461052c5780636213821d146104be578063861f862c146100a05763f350c0d614610050575f80fd5b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c5760206040517342000000000000000000000000000000000000158152f35b5f80fd5b3461009c5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576100d761095a565b60243590604435908183028381048314841517156103c45773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f9161048c575b5082811061045c575060205f916064604051809481937f23b872dd0000000000000000000000000000000000000000000000000000000083523360048401523060248401528760448401525af180156103b957610425575b50604051917f09bd5a600000000000000000000000000000000000000000000000000000000083526020836004817342000000000000000000000000000000000000155afa9283156103b9575f936103f1575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c457601f73ffffffffffffffffffffffffffffffffffffffff94610144947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093602098604051928a8401947f84211ca90000000000000000000000000000000000000000000000000000000086526024850152406044840152604483526102cc60648461097d565b6040519a8b998a987f549e8426000000000000000000000000000000000000000000000000000000008a521660048901525f60248901525f604489015233606489015233608489015260a488015260c487015260e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b6103b09060203d6020116103b2575b6103a8818361097d565b8101906109eb565b005b503d61039e565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9092506020813d60201161041d575b8161040d6020938361097d565b8101031261009c5751918561021a565b3d9150610400565b6020813d602011610454575b8161043e6020938361097d565b8101031261009c575180151581146101c7575f80fd5b3d9150610431565b90507f2a1b2dd8000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b90506020813d6020116104b6575b816104a76020938361097d565b8101031261009c57518661016f565b3d915061049a565b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576105d161095a565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f91610928575b50651319718a500081106108f3575060205f916064604051809481937f23b872dd000000000000000000000000000000000000000000000000000000008352336004840152306024840152651319718a500060448401525af180156103b9576108bc575b506040517f09bd5a600000000000000000000000000000000000000000000000000000000081526020816004817342000000000000000000000000000000000000155afa9081156103b9575f9161088a575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c45761014473ffffffffffffffffffffffffffffffffffffffff917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209560405197878901917f84211ca900000000000000000000000000000000000000000000000000000000835260248a0152406044890152604488526107b760648961097d565b60405197889687957f549e84260000000000000000000000000000000000000000000000000000000087521660048601525f60248601525f60448601523360648601523360848601526203345060a48601526305f5e10060c4860152651319718a500060e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b90506020813d6020116108b4575b816108a56020938361097d565b8101031261009c575182610707565b3d9150610898565b6020813d6020116108eb575b816108d56020938361097d565b8101031261009c575180151581146106b5575f80fd5b3d91506108c8565b7f2a1b2dd8000000000000000000000000000000000000000000000000000000005f52600452651319718a500060245260445ffd5b90506020813d602011610952575b816109436020938361097d565b8101031261009c575183610651565b3d9150610936565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361009c57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109be57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261009c57519056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x14]\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0zWPc\xF8\xCC\xBFG\x14a\x004W_\x80\xFD[4a\0wW\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0wW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[\x90P4a\x07\x1FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x07\x1FWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x07\x1FW\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x07\x14Wa\x07\x01W[P`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FARB_INBOX_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x05\xB8W\x82\x91a\x06\xE2W[P`@Q\x90\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x12`$\x83\x01R\x7FSYND_TOKEN_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x06lW\x83\x92a\x06\xB1W[Pa\x02^`@Qa\x02/`@\x82a\x07#V[`\x1D\x81R\x7FDeploying BlockHashRelayer...\0\0\0` \x82\x01Ra\x08\0V[a\x02\x9F\x81`@Qa\x02p`@\x82a\x07#V[`\x0F\x81R\x7FArbitrum Inbox:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x08\x89V[a\x02\xE0\x82`@Qa\x02\xB1`@\x82a\x07#V[`\x0B\x81R\x7FSYND Token:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x08\x89V[`@Q\x91a\x0BC\x91\x82\x84\x01\x92\x84\x84\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11\x17a\x06\x84W\x84\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x95\x93\x81\x93a\t\x1A\x879\x16\x83R\x16` \x82\x01R\x03\x01\x90\x82\xF0\x80\x15a\x06wWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x03\x8C\x81`@Qa\x03]`@\x82a\x07#V[`\x1F\x81R\x7FBlockHashMessenger deployed to:\0` \x82\x01Ra\x08\x89V[a\x03\xCC`@Qa\x03\x9D`@\x82a\x07#V[`\x1A\x81R\x7F=== Deployment Summary ===\0\0\0\0\0\0` \x82\x01Ra\x08\0V[a\x04\r\x81`@Qa\x03\xDE`@\x82a\x07#V[`\x11\x81R\x7FBlockHashRelayer:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x08\x89V[`@Q\x7FUx\x19\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x06lW\x83\x91a\x06\x18W[P`\x04\x91a\x04\xA8` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\x04x`@\x84a\x07#V[`\x0F\x83R\x7FArbitrum Inbox:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x84\x01R\x16\x90a\x08\x89V[`@Q\x92\x83\x80\x92\x7Fb\x13\x82\x1D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x80\x15a\x05\xB8W\x82\x90a\x05\xC3W[a\x05;\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\x05\n`@\x84a\x07#V[`\x0B\x83R\x7FSYND Token:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x16\x90a\x08\x89V[sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\0wW\x80`@Q\x7Fv\xEA\xDD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x05\xB8Wa\x05\xA7WP\xF3[\x81a\x05\xB1\x91a\x07#V[a\0wW\x80\xF3[`@Q=\x84\x82>=\x90\xFD[P` \x81=` \x11a\x06\x10W[\x81a\x05\xDD` \x93\x83a\x07#V[\x81\x01\x03\x12a\x06\x0CWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x06\x0CWa\x05;\x90a\x04\xE1V[P\x80\xFD[=\x91Pa\x05\xD0V[\x90P` \x81=` \x11a\x06dW[\x81a\x063` \x93\x83a\x07#V[\x81\x01\x03\x12a\x06`WQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x06`W`\x04a\x04JV[\x82\x80\xFD[=\x91Pa\x06&V[`@Q=\x85\x82>=\x90\xFD[P`@Q\x90=\x90\x82>=\x90\xFD[`$\x86\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[a\x06\xD4\x91\x92P` =` \x11a\x06\xDBW[a\x06\xCC\x81\x83a\x07#V[\x81\x01\x90a\x07\x91V[\x90_a\x02\x1DV[P=a\x06\xC2V[a\x06\xFB\x91P` =` \x11a\x06\xDBWa\x06\xCC\x81\x83a\x07#V[_a\x01\x96V[a\x07\r\x91P_\x90a\x07#V[__a\x01\x10V[`@Q=_\x82>=\x90\xFD[_\x80\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07dW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x07\x1FWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x07\x1FW\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[_a\x08Fa\x08r\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x07\xBDV[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x07#V[` \x81Q\x91\x01jconsole.logZ\xFAPV[a\x08\xE6a\x08r_\x93\x92\x84\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x94\x85\x93\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\x07\xBDV[\x91\x16`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x07#V\xFE`\xC0\x80`@R4a\0\xFAW`@\x81a\x0BC\x808\x03\x80\x91a\0\x1F\x82\x85a\x01\x11V[\x839\x81\x01\x03\x12a\0\xFAW\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x91\x82\x82\x03a\0\xFAW` \x01Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x81\x83\x03a\0\xFAW_\x93` \x93`D\x92`\x80R`\xA0R`@Q\x94\x85\x93\x84\x92c\t^\xA7\xB3`\xE0\x1B\x84R`\x04\x84\x01R\x81\x19`$\x84\x01RZ\xF1\x80\x15a\x01\x06Wa\0\xCAW[`@Qa\t\xFA\x90\x81a\x01I\x829`\x80Q\x81\x81\x81a\x03a\x01R\x81\x81a\x05v\x01Ra\x08\\\x01R`\xA0Q\x81\x81\x81a\x01\x06\x01R\x81\x81a\x05\x08\x01Ra\x05\xE8\x01R\xF3[` \x81=` \x11a\0\xFEW[\x81a\0\xE3` \x93\x83a\x01\x11V[\x81\x01\x03\x12a\0\xFAWQ\x80\x15\x15\x03a\0\xFAW_a\0\x8DV[_\x80\xFD[=\x91Pa\0\xD6V[`@Q=_\x82>=\x90\xFD[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x014W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c;\x8F&\xA4\x14a\x05\x9AW\x80cUx\x19\xA4\x14a\x05,W\x80cb\x13\x82\x1D\x14a\x04\xBEW\x80c\x86\x1F\x86,\x14a\0\xA0Wc\xF3P\xC0\xD6\x14a\0PW_\x80\xFD[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@QsB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x81R\xF3[_\x80\xFD[4a\0\x9CW``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\0\xD7a\tZV[`$5\x90`D5\x90\x81\x83\x02\x83\x81\x04\x83\x14\x84\x15\x17\x15a\x03\xC4Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x04\x8CW[P\x82\x81\x10a\x04\\WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01R\x87`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x04%W[P`@Q\x91\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` \x83`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x92\x83\x15a\x03\xB9W_\x93a\x03\xF1W[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4W`\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94a\x01D\x94\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93` \x98`@Q\x92\x8A\x84\x01\x94\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86R`$\x85\x01R@`D\x84\x01R`D\x83Ra\x02\xCC`d\x84a\t}V[`@Q\x9A\x8B\x99\x8A\x98\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8AR\x16`\x04\x89\x01R_`$\x89\x01R_`D\x89\x01R3`d\x89\x01R3`\x84\x89\x01R`\xA4\x88\x01R`\xC4\x87\x01R`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[a\x03\xB0\x90` =` \x11a\x03\xB2W[a\x03\xA8\x81\x83a\t}V[\x81\x01\x90a\t\xEBV[\0[P=a\x03\x9EV[`@Q=_\x82>=\x90\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x92P` \x81=` \x11a\x04\x1DW[\x81a\x04\r` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x91\x85a\x02\x1AV[=\x91Pa\x04\0V[` \x81=` \x11a\x04TW[\x81a\x04>` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x01\xC7W_\x80\xFD[=\x91Pa\x041V[\x90P\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R`$R`D_\xFD[\x90P` \x81=` \x11a\x04\xB6W[\x81a\x04\xA7` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x86a\x01oV[=\x91Pa\x04\x9AV[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\x05\xD1a\tZV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\t(W[Pe\x13\x19q\x8AP\0\x81\x10a\x08\xF3WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01Re\x13\x19q\x8AP\0`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x08\xBCW[P`@Q\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x08\x8AW[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4Wa\x01Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x95`@Q\x97\x87\x89\x01\x91\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`$\x8A\x01R@`D\x89\x01R`D\x88Ra\x07\xB7`d\x89a\t}V[`@Q\x97\x88\x96\x87\x95\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x16`\x04\x86\x01R_`$\x86\x01R_`D\x86\x01R3`d\x86\x01R3`\x84\x86\x01Rb\x034P`\xA4\x86\x01Rc\x05\xF5\xE1\0`\xC4\x86\x01Re\x13\x19q\x8AP\0`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[\x90P` \x81=` \x11a\x08\xB4W[\x81a\x08\xA5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x82a\x07\x07V[=\x91Pa\x08\x98V[` \x81=` \x11a\x08\xEBW[\x81a\x08\xD5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x06\xB5W_\x80\xFD[=\x91Pa\x08\xC8V[\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04Re\x13\x19q\x8AP\0`$R`D_\xFD[\x90P` \x81=` \x11a\tRW[\x81a\tC` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x83a\x06QV[=\x91Pa\t6V[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\0\x9CWV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xBEW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0\x9CWQ\x90V",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080806040526004361015610012575f80fd5b5f905f3560e01c908163c04062261461007a575063f8ccbf4714610034575f80fd5b3461007757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007757602060ff600c5460101c166040519015158152f35b80fd5b90503461071f575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261071f57737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561071f577f7fb5297f0000000000000000000000000000000000000000000000000000000081525f8160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af1801561071457610701575b506040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4152425f494e424f585f414444524553530000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa9081156105b85782916106e2575b50604051907f350d56bf00000000000000000000000000000000000000000000000000000000825260206004830152601260248301527f53594e445f544f4b454e5f4144445245535300000000000000000000000000006044830152602082606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa91821561066c5783926106b1575b5061025e60405161022f604082610723565b601d81527f4465706c6f79696e6720426c6f636b4861736852656c617965722e2e2e0000006020820152610800565b61029f81604051610270604082610723565b600f81527f417262697472756d20496e626f783a00000000000000000000000000000000006020820152610889565b6102e0826040516102b1604082610723565b600b81527f53594e4420546f6b656e3a0000000000000000000000000000000000000000006020820152610889565b60405191610b43918284019284841067ffffffffffffffff85111761068457849273ffffffffffffffffffffffffffffffffffffffff60409593819361091a873916835216602082015203019082f080156106775773ffffffffffffffffffffffffffffffffffffffff1661038c8160405161035d604082610723565b601f81527f426c6f636b486173684d657373656e676572206465706c6f79656420746f3a006020820152610889565b6103cc60405161039d604082610723565b601a81527f3d3d3d204465706c6f796d656e742053756d6d617279203d3d3d0000000000006020820152610800565b61040d816040516103de604082610723565b601181527f426c6f636b4861736852656c617965723a0000000000000000000000000000006020820152610889565b6040517f557819a4000000000000000000000000000000000000000000000000000000008152602081600481855afa90811561066c578391610618575b506004916104a860209273ffffffffffffffffffffffffffffffffffffffff60405191610478604084610723565b600f83527f417262697472756d20496e626f783a0000000000000000000000000000000000868401521690610889565b604051928380927f6213821d0000000000000000000000000000000000000000000000000000000082525afa80156105b85782906105c3575b61053b915073ffffffffffffffffffffffffffffffffffffffff6040519161050a604084610723565b600b83527f53594e4420546f6b656e3a00000000000000000000000000000000000000000060208401521690610889565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561007757806040517f76eadd36000000000000000000000000000000000000000000000000000000008152818160048183737109709ecfa91a80626ff3989d68f67f5b1dd12d5af180156105b8576105a75750f35b816105b191610723565b6100775780f35b6040513d84823e3d90fd5b506020813d602011610610575b816105dd60209383610723565b8101031261060c575173ffffffffffffffffffffffffffffffffffffffff8116810361060c5761053b906104e1565b5080fd5b3d91506105d0565b90506020813d602011610664575b8161063360209383610723565b81010312610660575173ffffffffffffffffffffffffffffffffffffffff8116810361066057600461044a565b8280fd5b3d9150610626565b6040513d85823e3d90fd5b50604051903d90823e3d90fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6106d491925060203d6020116106db575b6106cc8183610723565b810190610791565b905f61021d565b503d6106c2565b6106fb915060203d6020116106db576106cc8183610723565b5f610196565b61070d91505f90610723565b5f5f610110565b6040513d5f823e3d90fd5b5f80fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761076457604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261071f575173ffffffffffffffffffffffffffffffffffffffff8116810361071f5790565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b5f61084661087282936040519283917f41304fac0000000000000000000000000000000000000000000000000000000060208401526020602484015260448301906107bd565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610723565b6020815191016a636f6e736f6c652e6c6f675afa50565b6108e66108725f9392849373ffffffffffffffffffffffffffffffffffffffff6040519485937f319af3330000000000000000000000000000000000000000000000000000000060208601526040602486015260648501906107bd565b91166044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261072356fe60c080604052346100fa57604081610b43803803809161001f8285610111565b8339810103126100fa5780516001600160a01b038116918282036100fa5760200151906001600160a01b038216908183036100fa575f9360209360449260805260a052604051948593849263095ea7b360e01b84526004840152811960248401525af18015610106576100ca575b6040516109fa9081610149823960805181818161036101528181610576015261085c015260a0518181816101060152818161050801526105e80152f35b6020813d6020116100fe575b816100e360209383610111565b810103126100fa5751801515036100fa575f61008d565b5f80fd5b3d91506100d6565b6040513d5f823e3d90fd5b601f909101601f19168101906001600160401b0382119082101761013457604052565b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c80633b8f26a41461059a578063557819a41461052c5780636213821d146104be578063861f862c146100a05763f350c0d614610050575f80fd5b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c5760206040517342000000000000000000000000000000000000158152f35b5f80fd5b3461009c5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576100d761095a565b60243590604435908183028381048314841517156103c45773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f9161048c575b5082811061045c575060205f916064604051809481937f23b872dd0000000000000000000000000000000000000000000000000000000083523360048401523060248401528760448401525af180156103b957610425575b50604051917f09bd5a600000000000000000000000000000000000000000000000000000000083526020836004817342000000000000000000000000000000000000155afa9283156103b9575f936103f1575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c457601f73ffffffffffffffffffffffffffffffffffffffff94610144947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093602098604051928a8401947f84211ca90000000000000000000000000000000000000000000000000000000086526024850152406044840152604483526102cc60648461097d565b6040519a8b998a987f549e8426000000000000000000000000000000000000000000000000000000008a521660048901525f60248901525f604489015233606489015233608489015260a488015260c487015260e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b6103b09060203d6020116103b2575b6103a8818361097d565b8101906109eb565b005b503d61039e565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9092506020813d60201161041d575b8161040d6020938361097d565b8101031261009c5751918561021a565b3d9150610400565b6020813d602011610454575b8161043e6020938361097d565b8101031261009c575180151581146101c7575f80fd5b3d9150610431565b90507f2a1b2dd8000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b90506020813d6020116104b6575b816104a76020938361097d565b8101031261009c57518661016f565b3d915061049a565b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461009c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009c576105d161095a565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152602081604481855afa9081156103b9575f91610928575b50651319718a500081106108f3575060205f916064604051809481937f23b872dd000000000000000000000000000000000000000000000000000000008352336004840152306024840152651319718a500060448401525af180156103b9576108bc575b506040517f09bd5a600000000000000000000000000000000000000000000000000000000081526020816004817342000000000000000000000000000000000000155afa9081156103b9575f9161088a575b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301914383116103c45761014473ffffffffffffffffffffffffffffffffffffffff917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209560405197878901917f84211ca900000000000000000000000000000000000000000000000000000000835260248a0152406044890152604488526107b760648961097d565b60405197889687957f549e84260000000000000000000000000000000000000000000000000000000087521660048601525f60248601525f60448601523360648601523360848601526203345060a48601526305f5e10060c4860152651319718a500060e4860152610120610104860152518091816101248701528686015e5f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103b95761038f57005b90506020813d6020116108b4575b816108a56020938361097d565b8101031261009c575182610707565b3d9150610898565b6020813d6020116108eb575b816108d56020938361097d565b8101031261009c575180151581146106b5575f80fd5b3d91506108c8565b7f2a1b2dd8000000000000000000000000000000000000000000000000000000005f52600452651319718a500060245260445ffd5b90506020813d602011610952575b816109436020938361097d565b8101031261009c575183610651565b3d9150610936565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361009c57565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176109be57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9081602091031261009c57519056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R`\x046\x10\x15a\0\x12W_\x80\xFD[_\x90_5`\xE0\x1C\x90\x81c\xC0@b&\x14a\0zWPc\xF8\xCC\xBFG\x14a\x004W_\x80\xFD[4a\0wW\x80\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0wW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[\x80\xFD[\x90P4a\x07\x1FW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\x07\x1FWsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\x07\x1FW\x7F\x7F\xB5)\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x07\x14Wa\x07\x01W[P`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x11`$\x82\x01R\x7FARB_INBOX_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x90\x81\x15a\x05\xB8W\x82\x91a\x06\xE2W[P`@Q\x90\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R` `\x04\x83\x01R`\x12`$\x83\x01R\x7FSYND_TOKEN_ADDRESS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x83\x01R` \x82`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x91\x82\x15a\x06lW\x83\x92a\x06\xB1W[Pa\x02^`@Qa\x02/`@\x82a\x07#V[`\x1D\x81R\x7FDeploying BlockHashRelayer...\0\0\0` \x82\x01Ra\x08\0V[a\x02\x9F\x81`@Qa\x02p`@\x82a\x07#V[`\x0F\x81R\x7FArbitrum Inbox:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x08\x89V[a\x02\xE0\x82`@Qa\x02\xB1`@\x82a\x07#V[`\x0B\x81R\x7FSYND Token:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x08\x89V[`@Q\x91a\x0BC\x91\x82\x84\x01\x92\x84\x84\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11\x17a\x06\x84W\x84\x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@\x95\x93\x81\x93a\t\x1A\x879\x16\x83R\x16` \x82\x01R\x03\x01\x90\x82\xF0\x80\x15a\x06wWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x03\x8C\x81`@Qa\x03]`@\x82a\x07#V[`\x1F\x81R\x7FBlockHashMessenger deployed to:\0` \x82\x01Ra\x08\x89V[a\x03\xCC`@Qa\x03\x9D`@\x82a\x07#V[`\x1A\x81R\x7F=== Deployment Summary ===\0\0\0\0\0\0` \x82\x01Ra\x08\0V[a\x04\r\x81`@Qa\x03\xDE`@\x82a\x07#V[`\x11\x81R\x7FBlockHashRelayer:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x08\x89V[`@Q\x7FUx\x19\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x06lW\x83\x91a\x06\x18W[P`\x04\x91a\x04\xA8` \x92s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\x04x`@\x84a\x07#V[`\x0F\x83R\x7FArbitrum Inbox:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x84\x01R\x16\x90a\x08\x89V[`@Q\x92\x83\x80\x92\x7Fb\x13\x82\x1D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x80\x15a\x05\xB8W\x82\x90a\x05\xC3W[a\x05;\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x91a\x05\n`@\x84a\x07#V[`\x0B\x83R\x7FSYND Token:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R\x16\x90a\x08\x89V[sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-;\x15a\0wW\x80`@Q\x7Fv\xEA\xDD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81\x81`\x04\x81\x83sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xF1\x80\x15a\x05\xB8Wa\x05\xA7WP\xF3[\x81a\x05\xB1\x91a\x07#V[a\0wW\x80\xF3[`@Q=\x84\x82>=\x90\xFD[P` \x81=` \x11a\x06\x10W[\x81a\x05\xDD` \x93\x83a\x07#V[\x81\x01\x03\x12a\x06\x0CWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x06\x0CWa\x05;\x90a\x04\xE1V[P\x80\xFD[=\x91Pa\x05\xD0V[\x90P` \x81=` \x11a\x06dW[\x81a\x063` \x93\x83a\x07#V[\x81\x01\x03\x12a\x06`WQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x06`W`\x04a\x04JV[\x82\x80\xFD[=\x91Pa\x06&V[`@Q=\x85\x82>=\x90\xFD[P`@Q\x90=\x90\x82>=\x90\xFD[`$\x86\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`A`\x04R\xFD[a\x06\xD4\x91\x92P` =` \x11a\x06\xDBW[a\x06\xCC\x81\x83a\x07#V[\x81\x01\x90a\x07\x91V[\x90_a\x02\x1DV[P=a\x06\xC2V[a\x06\xFB\x91P` =` \x11a\x06\xDBWa\x06\xCC\x81\x83a\x07#V[_a\x01\x96V[a\x07\r\x91P_\x90a\x07#V[__a\x01\x10V[`@Q=_\x82>=\x90\xFD[_\x80\xFD[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\x07dW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\x07\x1FWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\x07\x1FW\x90V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[_a\x08Fa\x08r\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\x07\xBDV[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x07#V[` \x81Q\x91\x01jconsole.logZ\xFAPV[a\x08\xE6a\x08r_\x93\x92\x84\x93s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Q\x94\x85\x93\x7F1\x9A\xF33\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`@`$\x86\x01R`d\x85\x01\x90a\x07\xBDV[\x91\x16`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\x07#V\xFE`\xC0\x80`@R4a\0\xFAW`@\x81a\x0BC\x808\x03\x80\x91a\0\x1F\x82\x85a\x01\x11V[\x839\x81\x01\x03\x12a\0\xFAW\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x91\x82\x82\x03a\0\xFAW` \x01Q\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x81\x83\x03a\0\xFAW_\x93` \x93`D\x92`\x80R`\xA0R`@Q\x94\x85\x93\x84\x92c\t^\xA7\xB3`\xE0\x1B\x84R`\x04\x84\x01R\x81\x19`$\x84\x01RZ\xF1\x80\x15a\x01\x06Wa\0\xCAW[`@Qa\t\xFA\x90\x81a\x01I\x829`\x80Q\x81\x81\x81a\x03a\x01R\x81\x81a\x05v\x01Ra\x08\\\x01R`\xA0Q\x81\x81\x81a\x01\x06\x01R\x81\x81a\x05\x08\x01Ra\x05\xE8\x01R\xF3[` \x81=` \x11a\0\xFEW[\x81a\0\xE3` \x93\x83a\x01\x11V[\x81\x01\x03\x12a\0\xFAWQ\x80\x15\x15\x03a\0\xFAW_a\0\x8DV[_\x80\xFD[=\x91Pa\0\xD6V[`@Q=_\x82>=\x90\xFD[`\x1F\x90\x91\x01`\x1F\x19\x16\x81\x01\x90`\x01`\x01`@\x1B\x03\x82\x11\x90\x82\x10\x17a\x014W`@RV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c;\x8F&\xA4\x14a\x05\x9AW\x80cUx\x19\xA4\x14a\x05,W\x80cb\x13\x82\x1D\x14a\x04\xBEW\x80c\x86\x1F\x86,\x14a\0\xA0Wc\xF3P\xC0\xD6\x14a\0PW_\x80\xFD[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@QsB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\x81R\xF3[_\x80\xFD[4a\0\x9CW``\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\0\xD7a\tZV[`$5\x90`D5\x90\x81\x83\x02\x83\x81\x04\x83\x14\x84\x15\x17\x15a\x03\xC4Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x04\x8CW[P\x82\x81\x10a\x04\\WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01R\x87`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x04%W[P`@Q\x91\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` \x83`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x92\x83\x15a\x03\xB9W_\x93a\x03\xF1W[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4W`\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x94a\x01D\x94\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x93` \x98`@Q\x92\x8A\x84\x01\x94\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86R`$\x85\x01R@`D\x84\x01R`D\x83Ra\x02\xCC`d\x84a\t}V[`@Q\x9A\x8B\x99\x8A\x98\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8AR\x16`\x04\x89\x01R_`$\x89\x01R_`D\x89\x01R3`d\x89\x01R3`\x84\x89\x01R`\xA4\x88\x01R`\xC4\x87\x01R`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[a\x03\xB0\x90` =` \x11a\x03\xB2W[a\x03\xA8\x81\x83a\t}V[\x81\x01\x90a\t\xEBV[\0[P=a\x03\x9EV[`@Q=_\x82>=\x90\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[\x90\x92P` \x81=` \x11a\x04\x1DW[\x81a\x04\r` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x91\x85a\x02\x1AV[=\x91Pa\x04\0V[` \x81=` \x11a\x04TW[\x81a\x04>` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x01\xC7W_\x80\xFD[=\x91Pa\x041V[\x90P\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04R`$R`D_\xFD[\x90P` \x81=` \x11a\x04\xB6W[\x81a\x04\xA7` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x86a\x01oV[=\x91Pa\x04\x9AV[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CW` `@Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x81R\xF3[4a\0\x9CW` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0\x9CWa\x05\xD1a\tZV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`@Q\x7F\xDDb\xED>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3`\x04\x82\x01R0`$\x82\x01R` \x81`D\x81\x85Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\t(W[Pe\x13\x19q\x8AP\0\x81\x10a\x08\xF3WP` _\x91`d`@Q\x80\x94\x81\x93\x7F#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R3`\x04\x84\x01R0`$\x84\x01Re\x13\x19q\x8AP\0`D\x84\x01RZ\xF1\x80\x15a\x03\xB9Wa\x08\xBCW[P`@Q\x7F\t\xBDZ`\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81sB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15Z\xFA\x90\x81\x15a\x03\xB9W_\x91a\x08\x8AW[P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x01\x91C\x83\x11a\x03\xC4Wa\x01Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x95`@Q\x97\x87\x89\x01\x91\x7F\x84!\x1C\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R`$\x8A\x01R@`D\x89\x01R`D\x88Ra\x07\xB7`d\x89a\t}V[`@Q\x97\x88\x96\x87\x95\x7FT\x9E\x84&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87R\x16`\x04\x86\x01R_`$\x86\x01R_`D\x86\x01R3`d\x86\x01R3`\x84\x86\x01Rb\x034P`\xA4\x86\x01Rc\x05\xF5\xE1\0`\xC4\x86\x01Re\x13\x19q\x8AP\0`\xE4\x86\x01Ra\x01 a\x01\x04\x86\x01RQ\x80\x91\x81a\x01$\x87\x01R\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x81\x01\x03\x01\x81_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16Z\xF1\x80\x15a\x03\xB9Wa\x03\x8FW\0[\x90P` \x81=` \x11a\x08\xB4W[\x81a\x08\xA5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x82a\x07\x07V[=\x91Pa\x08\x98V[` \x81=` \x11a\x08\xEBW[\x81a\x08\xD5` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x80\x15\x15\x81\x14a\x06\xB5W_\x80\xFD[=\x91Pa\x08\xC8V[\x7F*\x1B-\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x04Re\x13\x19q\x8AP\0`$R`D_\xFD[\x90P` \x81=` \x11a\tRW[\x81a\tC` \x93\x83a\t}V[\x81\x01\x03\x12a\0\x9CWQ\x83a\x06QV[=\x91Pa\t6V[`\x045\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x82\x03a\0\x9CWV[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\t\xBEW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x90\x81` \x91\x03\x12a\0\x9CWQ\x90V",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DeployBlockHashRelayer`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum DeployBlockHashRelayerCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl DeployBlockHashRelayerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DeployBlockHashRelayerCalls {
        const NAME: &'static str = "DeployBlockHashRelayerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DeployBlockHashRelayerCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DeployBlockHashRelayerCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(DeployBlockHashRelayerCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DeployBlockHashRelayerCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(DeployBlockHashRelayerCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<DeployBlockHashRelayerCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DeployBlockHashRelayerCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DeployBlockHashRelayerCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<DeployBlockHashRelayerCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(DeployBlockHashRelayerCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DeployBlockHashRelayer`](self) contract instance.

See the [wrapper's documentation](`DeployBlockHashRelayerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DeployBlockHashRelayerInstance<P, N> {
        DeployBlockHashRelayerInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DeployBlockHashRelayerInstance<P, N>>,
    > {
        DeployBlockHashRelayerInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        DeployBlockHashRelayerInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`DeployBlockHashRelayer`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DeployBlockHashRelayer`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DeployBlockHashRelayerInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for DeployBlockHashRelayerInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DeployBlockHashRelayerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DeployBlockHashRelayerInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`DeployBlockHashRelayer`](self) contract instance.

See the [wrapper's documentation](`DeployBlockHashRelayerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DeployBlockHashRelayerInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> DeployBlockHashRelayerInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DeployBlockHashRelayerInstance<P, N> {
            DeployBlockHashRelayerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DeployBlockHashRelayerInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > DeployBlockHashRelayerInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
