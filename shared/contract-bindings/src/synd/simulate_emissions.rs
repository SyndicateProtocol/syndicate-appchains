/**

Generated by the following Solidity interface...
```solidity
interface SimulateEmissions {
    function IS_SCRIPT() external view returns (bool);
    function run() external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SimulateEmissions {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608080604052346026576201000162ff00ff19600c541617600c55610b4c908161002b8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063c0406226146100765763f8ccbf471461002f575f80fd5b34610072575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007257602060ff600c5460101c166040519015158152f35b5f80fd5b34610072575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610072576100ac610156565b005b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176100ef57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9190820180921161012957565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43414c43554c41544f525f4144445200000000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa8015610691575f906109a3575b73ffffffffffffffffffffffffffffffffffffffff9150168015610945576040517f158ef93e000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610691575f9161090a575b50156108c95761027b60405161024c6040826100ae565b601b81527f3d3d3d20456d697373696f6e2053696d756c6174696f6e203d3d3d00000000006020820152610a49565b6102bb60405161028c6040826100ae565b601d81527f53696d756c6174696e672066697273742031302065706f6368732e2e2e0000006020820152610a49565b6040517f76671808000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610691575f91610897575b50905f91805b600a81018082116101295782108061088d575b1561088057604051917fe4b7fb73000000000000000000000000000000000000000000000000000000008352602083600481875afa928315610691575f9361084d575b50821561083f576040517fe0f51474000000000000000000000000000000000000000000000000000000008152816004820152602081602481885afa908115610691575f9161080e575b505f806104576104bf6040516103b56040826100ae565b600581527f45706f6368000000000000000000000000000000000000000000000000000000602082015261048d6040516103f06040826100ae565b600f81527f2d20446563617920666163746f723a000000000000000000000000000000000060208201526040519485937fc67ea9d10000000000000000000000000000000000000000000000000000000060208601526080602486015260a4850190610a06565b908960448501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152610a06565b866084830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826100ae565b6020815191016a636f6e736f6c652e6c6f675afa50610515846040516104e66040826100ae565b601381527f202052656d61696e696e6720737570706c793a000000000000000000000000006020820152610ad2565b602f820361069c5750505061056e6020916004946105698260405161053b6040826100ae565b601c81527f202046696e616c2065706f6368202d20776f756c642073776565703a0000000087820152610ad2565b61011c565b915b6105d6836040516105826060826100ae565b602381527f546f74616c2073696d756c6174656420666f72206e6578742031302065706f63858201527f68733a00000000000000000000000000000000000000000000000000000000006040820152610ad2565b604051938480927fe4b7fb730000000000000000000000000000000000000000000000000000000082525afa918215610691575f9261065d575b5081039081116101295761065b9060405161062c6040826100ae565b601681527f576f756c64206c656176652072656d61696e696e673a000000000000000000006020820152610ad2565b565b9091506020813d602011610689575b81610679602093836100ae565b810103126100725751905f610610565b3d915061066c565b6040513d5f823e3d90fd5b604095919392949551907f236640b90000000000000000000000000000000000000000000000000000000082528460048301526020826024818a5afa918215610691575f926107db575b50670de0b6b3a764000003670de0b6b3a7640000811161012957808402938404036101295780670de0b6b3a76400000390670de0b6b3a7640000821161012957670de0b6b3a7640000146107ae5761077b9204906105698260405161074c6040826100ae565b601581527f2020457374696d6174656420656d697373696f6e3a00000000000000000000006020820152610ad2565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610129576001019092916102fe565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b9091506020813d8211610806575b816107f6602093836100ae565b810103126100725751905f6106e6565b3d91506107e9565b90506020813d8211610837575b81610828602093836100ae565b8101031261007257515f61039e565b3d915061081b565b505050906020600492610570565b9092506020813d8211610878575b81610868602093836100ae565b810103126100725751915f610354565b3d915061085b565b5050906020600492610570565b5060308210610311565b90506020813d6020116108c1575b816108b2602093836100ae565b8101031261007257515f6102f8565b3d91506108a5565b5061065b6040516108db6040826100ae565b601e81527f43616c63756c61746f72206e6f7420696e697469616c697a65642079657400006020820152610a49565b90506020813d60201161093d575b81610925602093836100ae565b8101031261007257518015158103610072575f610235565b3d9150610918565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43414c43554c41544f525f41444452206e6f74207365740000000000000000006044820152fd5b506020813d6020116109fe575b816109bd602093836100ae565b81010312610072575173ffffffffffffffffffffffffffffffffffffffff811681036100725773ffffffffffffffffffffffffffffffffffffffff906101da565b3d91506109b0565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b5f610a8f610abb82936040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610a06565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826100ae565b6020815191016a636f6e736f6c652e6c6f675afa50565b610b1a610abb5f939284936040519384927fb60e72cc000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610a06565b906044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826100ae56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80\x80`@R4`&Wb\x01\0\x01b\xFF\0\xFF\x19`\x0CT\x16\x17`\x0CUa\x0BL\x90\x81a\0+\x829\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\xC0@b&\x14a\0vWc\xF8\xCC\xBFG\x14a\0/W_\x80\xFD[4a\0rW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0rW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0rW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0rWa\0\xACa\x01VV[\0[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xEFW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x91\x90\x82\x01\x80\x92\x11a\x01)WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x06\x91W_\x90a\t\xA3W[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91P\x16\x80\x15a\tEW`@Q\x7F\x15\x8E\xF9>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x06\x91W_\x91a\t\nW[P\x15a\x08\xC9Wa\x02{`@Qa\x02L`@\x82a\0\xAEV[`\x1B\x81R\x7F=== Emission Simulation ===\0\0\0\0\0` \x82\x01Ra\nIV[a\x02\xBB`@Qa\x02\x8C`@\x82a\0\xAEV[`\x1D\x81R\x7FSimulating first 10 epochs...\0\0\0` \x82\x01Ra\nIV[`@Q\x7Fvg\x18\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x06\x91W_\x91a\x08\x97W[P\x90_\x91\x80[`\n\x81\x01\x80\x82\x11a\x01)W\x82\x10\x80a\x08\x8DW[\x15a\x08\x80W`@Q\x91\x7F\xE4\xB7\xFBs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` \x83`\x04\x81\x87Z\xFA\x92\x83\x15a\x06\x91W_\x93a\x08MW[P\x82\x15a\x08?W`@Q\x7F\xE0\xF5\x14t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81`\x04\x82\x01R` \x81`$\x81\x88Z\xFA\x90\x81\x15a\x06\x91W_\x91a\x08\x0EW[P_\x80a\x04Wa\x04\xBF`@Qa\x03\xB5`@\x82a\0\xAEV[`\x05\x81R\x7FEpoch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x04\x8D`@Qa\x03\xF0`@\x82a\0\xAEV[`\x0F\x81R\x7F- Decay factor:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x94\x85\x93\x7F\xC6~\xA9\xD1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`\x80`$\x86\x01R`\xA4\x85\x01\x90a\n\x06V[\x90\x89`D\x85\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`d\x85\x01Ra\n\x06V[\x86`\x84\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\0\xAEV[` \x81Q\x91\x01jconsole.logZ\xFAPa\x05\x15\x84`@Qa\x04\xE6`@\x82a\0\xAEV[`\x13\x81R\x7F  Remaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\n\xD2V[`/\x82\x03a\x06\x9CWPPPa\x05n` \x91`\x04\x94a\x05i\x82`@Qa\x05;`@\x82a\0\xAEV[`\x1C\x81R\x7F  Final epoch - would sweep:\0\0\0\0\x87\x82\x01Ra\n\xD2V[a\x01\x1CV[\x91[a\x05\xD6\x83`@Qa\x05\x82``\x82a\0\xAEV[`#\x81R\x7FTotal simulated for next 10 epoc\x85\x82\x01R\x7Fhs:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\xD2V[`@Q\x93\x84\x80\x92\x7F\xE4\xB7\xFBs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x91\x82\x15a\x06\x91W_\x92a\x06]W[P\x81\x03\x90\x81\x11a\x01)Wa\x06[\x90`@Qa\x06,`@\x82a\0\xAEV[`\x16\x81R\x7FWould leave remaining:\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\n\xD2V[V[\x90\x91P` \x81=` \x11a\x06\x89W[\x81a\x06y` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x90_a\x06\x10V[=\x91Pa\x06lV[`@Q=_\x82>=\x90\xFD[`@\x95\x91\x93\x92\x94\x95Q\x90\x7F#f@\xB9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R\x84`\x04\x83\x01R` \x82`$\x81\x8AZ\xFA\x91\x82\x15a\x06\x91W_\x92a\x07\xDBW[Pg\r\xE0\xB6\xB3\xA7d\0\0\x03g\r\xE0\xB6\xB3\xA7d\0\0\x81\x11a\x01)W\x80\x84\x02\x93\x84\x04\x03a\x01)W\x80g\r\xE0\xB6\xB3\xA7d\0\0\x03\x90g\r\xE0\xB6\xB3\xA7d\0\0\x82\x11a\x01)Wg\r\xE0\xB6\xB3\xA7d\0\0\x14a\x07\xAEWa\x07{\x92\x04\x90a\x05i\x82`@Qa\x07L`@\x82a\0\xAEV[`\x15\x81R\x7F  Estimated emission:\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\n\xD2V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x14a\x01)W`\x01\x01\x90\x92\x91a\x02\xFEV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[\x90\x91P` \x81=\x82\x11a\x08\x06W[\x81a\x07\xF6` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x90_a\x06\xE6V[=\x91Pa\x07\xE9V[\x90P` \x81=\x82\x11a\x087W[\x81a\x08(` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ_a\x03\x9EV[=\x91Pa\x08\x1BV[PPP\x90` `\x04\x92a\x05pV[\x90\x92P` \x81=\x82\x11a\x08xW[\x81a\x08h` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x91_a\x03TV[=\x91Pa\x08[V[PP\x90` `\x04\x92a\x05pV[P`0\x82\x10a\x03\x11V[\x90P` \x81=` \x11a\x08\xC1W[\x81a\x08\xB2` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ_a\x02\xF8V[=\x91Pa\x08\xA5V[Pa\x06[`@Qa\x08\xDB`@\x82a\0\xAEV[`\x1E\x81R\x7FCalculator not initialized yet\0\0` \x82\x01Ra\nIV[\x90P` \x81=` \x11a\t=W[\x81a\t%` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x80\x15\x15\x81\x03a\0rW_a\x025V[=\x91Pa\t\x18V[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P` \x81=` \x11a\t\xFEW[\x81a\t\xBD` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\0rWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90a\x01\xDAV[=\x91Pa\t\xB0V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[_a\n\x8Fa\n\xBB\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\n\x06V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\0\xAEV[` \x81Q\x91\x01jconsole.logZ\xFAPV[a\x0B\x1Aa\n\xBB_\x93\x92\x84\x93`@Q\x93\x84\x92\x7F\xB6\x0Er\xCC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\n\x06V[\x90`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\0\xAEV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c8063c0406226146100765763f8ccbf471461002f575f80fd5b34610072575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261007257602060ff600c5460101c166040519015158152f35b5f80fd5b34610072575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610072576100ac610156565b005b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176100ef57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b9190820180921161012957565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6040517f350d56bf00000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43414c43554c41544f525f4144445200000000000000000000000000000000006044820152602081606481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa8015610691575f906109a3575b73ffffffffffffffffffffffffffffffffffffffff9150168015610945576040517f158ef93e000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610691575f9161090a575b50156108c95761027b60405161024c6040826100ae565b601b81527f3d3d3d20456d697373696f6e2053696d756c6174696f6e203d3d3d00000000006020820152610a49565b6102bb60405161028c6040826100ae565b601d81527f53696d756c6174696e672066697273742031302065706f6368732e2e2e0000006020820152610a49565b6040517f76671808000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610691575f91610897575b50905f91805b600a81018082116101295782108061088d575b1561088057604051917fe4b7fb73000000000000000000000000000000000000000000000000000000008352602083600481875afa928315610691575f9361084d575b50821561083f576040517fe0f51474000000000000000000000000000000000000000000000000000000008152816004820152602081602481885afa908115610691575f9161080e575b505f806104576104bf6040516103b56040826100ae565b600581527f45706f6368000000000000000000000000000000000000000000000000000000602082015261048d6040516103f06040826100ae565b600f81527f2d20446563617920666163746f723a000000000000000000000000000000000060208201526040519485937fc67ea9d10000000000000000000000000000000000000000000000000000000060208601526080602486015260a4850190610a06565b908960448501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc848303016064850152610a06565b866084830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826100ae565b6020815191016a636f6e736f6c652e6c6f675afa50610515846040516104e66040826100ae565b601381527f202052656d61696e696e6720737570706c793a000000000000000000000000006020820152610ad2565b602f820361069c5750505061056e6020916004946105698260405161053b6040826100ae565b601c81527f202046696e616c2065706f6368202d20776f756c642073776565703a0000000087820152610ad2565b61011c565b915b6105d6836040516105826060826100ae565b602381527f546f74616c2073696d756c6174656420666f72206e6578742031302065706f63858201527f68733a00000000000000000000000000000000000000000000000000000000006040820152610ad2565b604051938480927fe4b7fb730000000000000000000000000000000000000000000000000000000082525afa918215610691575f9261065d575b5081039081116101295761065b9060405161062c6040826100ae565b601681527f576f756c64206c656176652072656d61696e696e673a000000000000000000006020820152610ad2565b565b9091506020813d602011610689575b81610679602093836100ae565b810103126100725751905f610610565b3d915061066c565b6040513d5f823e3d90fd5b604095919392949551907f236640b90000000000000000000000000000000000000000000000000000000082528460048301526020826024818a5afa918215610691575f926107db575b50670de0b6b3a764000003670de0b6b3a7640000811161012957808402938404036101295780670de0b6b3a76400000390670de0b6b3a7640000821161012957670de0b6b3a7640000146107ae5761077b9204906105698260405161074c6040826100ae565b601581527f2020457374696d6174656420656d697373696f6e3a00000000000000000000006020820152610ad2565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610129576001019092916102fe565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b9091506020813d8211610806575b816107f6602093836100ae565b810103126100725751905f6106e6565b3d91506107e9565b90506020813d8211610837575b81610828602093836100ae565b8101031261007257515f61039e565b3d915061081b565b505050906020600492610570565b9092506020813d8211610878575b81610868602093836100ae565b810103126100725751915f610354565b3d915061085b565b5050906020600492610570565b5060308210610311565b90506020813d6020116108c1575b816108b2602093836100ae565b8101031261007257515f6102f8565b3d91506108a5565b5061065b6040516108db6040826100ae565b601e81527f43616c63756c61746f72206e6f7420696e697469616c697a65642079657400006020820152610a49565b90506020813d60201161093d575b81610925602093836100ae565b8101031261007257518015158103610072575f610235565b3d9150610918565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43414c43554c41544f525f41444452206e6f74207365740000000000000000006044820152fd5b506020813d6020116109fe575b816109bd602093836100ae565b81010312610072575173ffffffffffffffffffffffffffffffffffffffff811681036100725773ffffffffffffffffffffffffffffffffffffffff906101da565b3d91506109b0565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b5f610a8f610abb82936040519283917f41304fac000000000000000000000000000000000000000000000000000000006020840152602060248401526044830190610a06565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826100ae565b6020815191016a636f6e736f6c652e6c6f675afa50565b610b1a610abb5f939284936040519384927fb60e72cc000000000000000000000000000000000000000000000000000000006020850152604060248501526064840190610a06565b906044830152037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826100ae56
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80c\xC0@b&\x14a\0vWc\xF8\xCC\xBFG\x14a\0/W_\x80\xFD[4a\0rW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0rW` `\xFF`\x0CT`\x10\x1C\x16`@Q\x90\x15\x15\x81R\xF3[_\x80\xFD[4a\0rW_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFC6\x01\x12a\0rWa\0\xACa\x01VV[\0[\x90`\x1F\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a\0\xEFW`@RV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[\x91\x90\x82\x01\x80\x92\x11a\x01)WV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[`@Q\x7F5\rV\xBF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FCALCULATOR_ADDR\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R` \x81`d\x81sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-Z\xFA\x80\x15a\x06\x91W_\x90a\t\xA3W[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91P\x16\x80\x15a\tEW`@Q\x7F\x15\x8E\xF9>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x06\x91W_\x91a\t\nW[P\x15a\x08\xC9Wa\x02{`@Qa\x02L`@\x82a\0\xAEV[`\x1B\x81R\x7F=== Emission Simulation ===\0\0\0\0\0` \x82\x01Ra\nIV[a\x02\xBB`@Qa\x02\x8C`@\x82a\0\xAEV[`\x1D\x81R\x7FSimulating first 10 epochs...\0\0\0` \x82\x01Ra\nIV[`@Q\x7Fvg\x18\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` \x81`\x04\x81\x85Z\xFA\x90\x81\x15a\x06\x91W_\x91a\x08\x97W[P\x90_\x91\x80[`\n\x81\x01\x80\x82\x11a\x01)W\x82\x10\x80a\x08\x8DW[\x15a\x08\x80W`@Q\x91\x7F\xE4\xB7\xFBs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83R` \x83`\x04\x81\x87Z\xFA\x92\x83\x15a\x06\x91W_\x93a\x08MW[P\x82\x15a\x08?W`@Q\x7F\xE0\xF5\x14t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R\x81`\x04\x82\x01R` \x81`$\x81\x88Z\xFA\x90\x81\x15a\x06\x91W_\x91a\x08\x0EW[P_\x80a\x04Wa\x04\xBF`@Qa\x03\xB5`@\x82a\0\xAEV[`\x05\x81R\x7FEpoch\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x04\x8D`@Qa\x03\xF0`@\x82a\0\xAEV[`\x0F\x81R\x7F- Decay factor:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`@Q\x94\x85\x93\x7F\xC6~\xA9\xD1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x86\x01R`\x80`$\x86\x01R`\xA4\x85\x01\x90a\n\x06V[\x90\x89`D\x85\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xDC\x84\x83\x03\x01`d\x85\x01Ra\n\x06V[\x86`\x84\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\0\xAEV[` \x81Q\x91\x01jconsole.logZ\xFAPa\x05\x15\x84`@Qa\x04\xE6`@\x82a\0\xAEV[`\x13\x81R\x7F  Remaining supply:\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\n\xD2V[`/\x82\x03a\x06\x9CWPPPa\x05n` \x91`\x04\x94a\x05i\x82`@Qa\x05;`@\x82a\0\xAEV[`\x1C\x81R\x7F  Final epoch - would sweep:\0\0\0\0\x87\x82\x01Ra\n\xD2V[a\x01\x1CV[\x91[a\x05\xD6\x83`@Qa\x05\x82``\x82a\0\xAEV[`#\x81R\x7FTotal simulated for next 10 epoc\x85\x82\x01R\x7Fhs:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`@\x82\x01Ra\n\xD2V[`@Q\x93\x84\x80\x92\x7F\xE4\xB7\xFBs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82RZ\xFA\x91\x82\x15a\x06\x91W_\x92a\x06]W[P\x81\x03\x90\x81\x11a\x01)Wa\x06[\x90`@Qa\x06,`@\x82a\0\xAEV[`\x16\x81R\x7FWould leave remaining:\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\n\xD2V[V[\x90\x91P` \x81=` \x11a\x06\x89W[\x81a\x06y` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x90_a\x06\x10V[=\x91Pa\x06lV[`@Q=_\x82>=\x90\xFD[`@\x95\x91\x93\x92\x94\x95Q\x90\x7F#f@\xB9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R\x84`\x04\x83\x01R` \x82`$\x81\x8AZ\xFA\x91\x82\x15a\x06\x91W_\x92a\x07\xDBW[Pg\r\xE0\xB6\xB3\xA7d\0\0\x03g\r\xE0\xB6\xB3\xA7d\0\0\x81\x11a\x01)W\x80\x84\x02\x93\x84\x04\x03a\x01)W\x80g\r\xE0\xB6\xB3\xA7d\0\0\x03\x90g\r\xE0\xB6\xB3\xA7d\0\0\x82\x11a\x01)Wg\r\xE0\xB6\xB3\xA7d\0\0\x14a\x07\xAEWa\x07{\x92\x04\x90a\x05i\x82`@Qa\x07L`@\x82a\0\xAEV[`\x15\x81R\x7F  Estimated emission:\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\n\xD2V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x14a\x01)W`\x01\x01\x90\x92\x91a\x02\xFEV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[\x90\x91P` \x81=\x82\x11a\x08\x06W[\x81a\x07\xF6` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x90_a\x06\xE6V[=\x91Pa\x07\xE9V[\x90P` \x81=\x82\x11a\x087W[\x81a\x08(` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ_a\x03\x9EV[=\x91Pa\x08\x1BV[PPP\x90` `\x04\x92a\x05pV[\x90\x92P` \x81=\x82\x11a\x08xW[\x81a\x08h` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x91_a\x03TV[=\x91Pa\x08[V[PP\x90` `\x04\x92a\x05pV[P`0\x82\x10a\x03\x11V[\x90P` \x81=` \x11a\x08\xC1W[\x81a\x08\xB2` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ_a\x02\xF8V[=\x91Pa\x08\xA5V[Pa\x06[`@Qa\x08\xDB`@\x82a\0\xAEV[`\x1E\x81R\x7FCalculator not initialized yet\0\0` \x82\x01Ra\nIV[\x90P` \x81=` \x11a\t=W[\x81a\t%` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQ\x80\x15\x15\x81\x03a\0rW_a\x025V[=\x91Pa\t\x18V[`d`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FCALCULATOR_ADDR not set\0\0\0\0\0\0\0\0\0`D\x82\x01R\xFD[P` \x81=` \x11a\t\xFEW[\x81a\t\xBD` \x93\x83a\0\xAEV[\x81\x01\x03\x12a\0rWQs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x03a\0rWs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90a\x01\xDAV[=\x91Pa\t\xB0V[\x90\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F` \x80\x94\x80Q\x91\x82\x91\x82\x87R\x01\x86\x86\x01^_\x85\x82\x86\x01\x01R\x01\x16\x01\x01\x90V[_a\n\x8Fa\n\xBB\x82\x93`@Q\x92\x83\x91\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x84\x01R` `$\x84\x01R`D\x83\x01\x90a\n\x06V[\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\0\xAEV[` \x81Q\x91\x01jconsole.logZ\xFAPV[a\x0B\x1Aa\n\xBB_\x93\x92\x84\x93`@Q\x93\x84\x92\x7F\xB6\x0Er\xCC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x85\x01R`@`$\x85\x01R`d\x84\x01\x90a\n\x06V[\x90`D\x83\x01R\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x01\x83R\x82a\0\xAEV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: IS_SCRIPTReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall;
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl runReturn {
            fn _tokenize(
                &self,
            ) -> <runCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                runReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SimulateEmissions`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum SimulateEmissionsCalls {
        #[allow(missing_docs)]
        IS_SCRIPT(IS_SCRIPTCall),
        #[allow(missing_docs)]
        run(runCall),
    }
    #[automatically_derived]
    impl SimulateEmissionsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SimulateEmissionsCalls {
        const NAME: &'static str = "SimulateEmissionsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SimulateEmissionsCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SimulateEmissionsCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SimulateEmissionsCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SimulateEmissionsCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(SimulateEmissionsCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<SimulateEmissionsCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SimulateEmissionsCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SimulateEmissionsCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<SimulateEmissionsCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(SimulateEmissionsCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SimulateEmissions`](self) contract instance.

See the [wrapper's documentation](`SimulateEmissionsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SimulateEmissionsInstance<P, N> {
        SimulateEmissionsInstance::<P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SimulateEmissionsInstance<P, N>>,
    > {
        SimulateEmissionsInstance::<P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
        SimulateEmissionsInstance::<P, N>::deploy_builder(provider)
    }
    /**A [`SimulateEmissions`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SimulateEmissions`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SimulateEmissionsInstance<P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for SimulateEmissionsInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SimulateEmissionsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SimulateEmissionsInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`SimulateEmissions`](self) contract instance.

See the [wrapper's documentation](`SimulateEmissionsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SimulateEmissionsInstance<P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> SimulateEmissionsInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SimulateEmissionsInstance<P, N> {
            SimulateEmissionsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SimulateEmissionsInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<&P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall)
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<&P, runCall, N> {
            self.call_builder(&runCall)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > SimulateEmissionsInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
