# Define the PATH variable to include Foundry's bin directory
foundry_path := env_var('PATH') + ":" + env_var('HOME') + "/.foundry/bin"

# Define fully qualified path to forge binary
forge := env_var('HOME') + "/.foundry/bin/forge"

# Define minimum forge version (annoted by build date since we're using nightly build)
forge_min_build_date := "2024-10-22"

# Define a non-zero number to identify the layer-3 chain. The Chain ID does not
# matter as long as it's not attached to a live chain. This chain ID is for the
# Syndicate testnet, which is not live at this point on this chain ID.
l3_chain_id := "5100"

# Define a private key authorized to deploy contracts on Optimism devnet
# This private key is common knowledge, you should not use it on any network other than this dev network.
# Using this private key on mainnet, or even a testnet, will most likely result in a loss of funds.
# https://docs.optimism.io/chain/testing/dev-node#additional-info
op_devnet_private_key := "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

# Define layer-2 devnet RPC URL launched by the Optimism devnet
op_devnet_l2_rpc_url := "http://127.0.0.1:9545"

# Define layer-2 rollup chain ID in decimal
op_devnet_l2_chain_id := "901"

# Default localnet chainID
arb_orbit_l2_chain_id := "412346"

# Default localnet port
arb_orbit_port := "8547"

arb_orbit_l2_rpc_url := "http://127.0.0.1:" + arb_orbit_port

metabased_sequencer_port := "8456"

metabased_sequencer_url := "http://127.0.0.1:" + metabased_sequencer_port

op_translator_port := "9999"

op_translator_url := "http://127.0.0.1:" + op_translator_port

# Dev account private key - https://docs.arbitrum.io/run-arbitrum-node/run-nitro-dev-node#development-account-used-by-default
arb_orbit_private_key := "0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659"

# Define root directory of the git repository
repository_root := justfile_directory() + "/.."

# Define root directory of the metabased contracts project
contracts_root := repository_root + "/metabased-contracts"

# Define root directory of the metabased sequencer project
sequencer_root := repository_root + "/metabased-sequencer"

# Define root directory of the op-translator project
op_translator_root := repository_root + "/op-translator"

# Define file for localnet environment variables
envrc_file := repository_root + "/.envrc"

# Define deploy file created on latest run of the deploy script for metabased sequencer chain contract
op_contract_deploy_file := contracts_root + "/broadcast/DeployContractsForSequencerChain_.s.sol/" + op_devnet_l2_chain_id + "/run-latest.json"

# Define deploy file created on latest run of the deploy script for metabased sequencer chain contract
arb_contract_deploy_file := contracts_root + "/broadcast/DeployContractsForSequencerChain_.s.sol/" + arb_orbit_l2_chain_id + "/run-latest.json"

# Add Foundry's bin directory to the PATH for all recipes
export PATH := foundry_path

# Helper functions for consistent command logging

# Clone the Optimism repository
op-clone:
    # The op-devnet sometimes breaks with the error `t=2024-10-22T23:38:03+0000 lvl=crit msg="Application failed" message="failed to fetch startBlock from SystemConfig: failed to call startBlock: failed to unpack result: failed to unpack data: abi: attempting to unmarshal an empty string while arguments are expected"`
    # This is true across 1.9.3, 1.9.4, and develop, but it appears to happen
    # less frequently on develop. We'll change this to use the latest release
    # once it's fixed
    # If you encounter this error, you can try running `op-reclone` to clean up
    # and re-clone the repository
    git clone --branch develop --single-branch --depth 1 https://github.com/ethereum-optimism/optimism.git ~/optimism || echo "[JUST] Skipping optimism clone - repository may already exist"
    git clone --branch optimism --single-branch --depth 1 https://github.com/ethereum-optimism/op-geth.git ~/op-geth || echo "[JUST] Skipping op-geth clone - repository may already exist"

# Starts arbitrum node listening at 8547
arb-up:
    chmod +x ./run-arb-nitro-dev-node.sh && ARB_ORBIT_PORT={{ arb_orbit_port }} ARB_ORBIT_L2_RPC_URL={{ arb_orbit_l2_rpc_url }} ./run-arb-nitro-dev-node.sh

# Stops Arbitrum docker container created by script above
arb-down:
    docker stop nitro-dev
    @echo "[JUST] Arbitrum node stopped."

# Removes all Docker infra assocaited with the Arbitrum, returning to a blank slate
arb-teardown: arb-down
    @docker rm nitro-dev 2>/dev/null || true
    @echo "[JUST] Arbitrum container removed"
    @docker volume rm $(docker volume ls -q -f name=nitro-dev) 2>/dev/null || true
    @echo "[JUST] Associated volumes removed"
    @docker network rm $(docker network ls -q -f name=nitro-dev) 2>/dev/null || true
    @echo "[JUST] Associated networks removed"
    @echo "[JUST] Arbitrum node infrastructure cleanup complete"

op-clean:
    rm -rf ~/optimism
    @echo "[JUST] Optimism directory removed"

op-reclone: op-down op-clean op-clone
    @echo "[JUST] Starting fresh clone of Optimism repositories"

# Deploy MetabasedSequencerChain smart contract to Optimism devnet
op-deploy-chain:
    @echo "[JUST] Preparing deployment script..."
    cat {{ contracts_root }}/script/DeployContractsForSequencerChain.s.sol | sed -E 's/(l3ChainId = )0;/\1{{ l3_chain_id }};/' > {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol
    @echo "[JUST] Running Forge deployment script..."
    [ -f {{ op_contract_deploy_file }} ] || forge script --root {{ contracts_root }} {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol:DeployMetabasedSequencerChainPlusSetupWithAlwaysAllowModule --rpc-url {{ op_devnet_l2_rpc_url }} --private-key {{ op_devnet_private_key }} --broadcast -vvvv
    @echo "[JUST] Cleaning up temporary files..."
    rm {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol
    @echo "[JUST] Deployment process complete"

# Deploy MetabasedSequencerChain smart contract to Arbitrum Orbit devnet
arb-deploy-chain:
    @echo "[JUST] Preparing deployment script..."
    cat {{ contracts_root }}/script/DeployContractsForSequencerChain.s.sol | sed -E 's/(l3ChainId = )0;/\1{{ l3_chain_id }};/' > {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol
    @echo "[JUST] Running Forge deployment script (with simulation skipped)..."
    [ -f {{ arb_contract_deploy_file }} ] || forge script --root {{ contracts_root }} {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol:DeployMetabasedSequencerChainPlusSetupWithAlwaysAllowModule --rpc-url {{ arb_orbit_l2_rpc_url }} --private-key {{ arb_orbit_private_key }} --broadcast --skip-simulation -vvvv
    @echo "[JUST] Cleaning up temporary files..."
    rm {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol
    @echo "[JUST] Deployment process complete"

# Runs sequencer using .env file
run-metabased-sequencer:
    . {{ envrc_file }} && cd {{ sequencer_root }} && cargo run -p interceptor

# Runs op-translator
run-op-translator: create-envrc update-chain-address
    . {{ envrc_file }} && cd {{ op_translator_root }} && go run main.go

# Removes files generated by deploying metabased sequencer chain contract to Optimism devnet
op-clean-chain:
    rm -rf {{ op_contract_deploy_file }}

# Removes files generated by deploying metabased sequencer chain contract to Arbitrum devnet
arb-clean-chain:
    rm -rf {{ arb_contract_deploy_file }}

# Puts contract address into localnet .envrc file
# Works by finding the value corresponding to the key in the .envrc, and replacing it with the address found in the `deploy_file`
op-update-chain-address: op-deploy-chain create-envrc
    cat {{ envrc_file }} | grep -v METABASED_SEQUENCER_CHAIN_CONTRACT_ADDRESS= > {{ envrc_file }}.tmp
    echo METABASED_SEQUENCER_CHAIN_CONTRACT_ADDRESS=0x$(cat {{ op_contract_deploy_file }} | grep MetabasedSequencerChain -A1 | grep contractAddress | sed 's/[^x]*0x//' | cut -c 1-40 | uniq) >> {{ envrc_file }}.tmp
    mv {{ envrc_file }}.tmp {{ envrc_file }}

# TODO(SEQ-312): Merge METABASED_SEQUENCER_CHAIN_RPC_ADDRESS -> SEQUENCING_CHAIN_RPC_URL
# Copy of `.envrc.example` using vars set earlier in the file
create-envrc:
    #!/usr/bin/env bash
    cat > {{ envrc_file }} << EOL
    # Common
    export SETTLEMENT_CHAIN_RPC_URL={{ op_devnet_l2_rpc_url }}
    export SETTLEMENT_CHAIN_RPC_URL_WS=wss://base-rpc.publicnode.com # Optional if using WS
    export SEQUENCING_CHAIN_RPC_URL={{ arb_orbit_l2_rpc_url }}
    export META_BASED_CHAIN_RPC_URL=http://localhost:8555
    export METAFILLER_URL=https://staging-metafiller.metabased.org/batch/5101
    export SEQUENCING_CONTRACT_ADDRESS=0xD77Aa8b1743326Baeb548357f8334df911A4E58f
    export BATCH_INBOX_ADDRESS=0x97395dd253e2d096a0caa62a574895c3c2f2b2e0
    export BATCHER_PRIVATE_KEY=fcd8aa9464a41a850d5bbc36cd6c4b6377e308a37869add1c2cf466b8d65826d
    export SETTLEMENT_CHAIN_ID={{ op_devnet_l2_chain_id }}
    export CUTOVER_EPOCH_BLOCK=0
    export SETTLEMENT_CHAIN_BLOCK_TIME=2s
    export SETTLEMENT_START_BLOCK=10289263
    export ALT_DA_URL=http://localhost:3100

    # Op Translator
    export OP_TRANSLATOR_PORT={{ op_translator_port }}
    export OP_TRANSLATOR_RPC_URL={{ op_translator_url }}
    export OP_TRANSLATOR_LOG_LEVEL=debug
    export OP_TRANSLATOR_PRETTY=true

    # metabased-publisher
    export MB_PUBLISHER_POLL_INTERVAL=1m
    export MB_PUBLISHER_NETWORK_TIMEOUT=30s
    export MB_PUBLISHER_BLOB_UPLOAD_TIMEOUT=10m

    # metabased-sequencer
    export METABASED_SEQUENCER_CHAIN_RPC_ADDRESS={{ arb_orbit_l2_rpc_url }}
    export METABASED_SEQUENCER_PRIVATE_KEY={{ arb_orbit_private_key }}
    export METABASED_SEQUENCER_PORT={{ metabased_sequencer_port }}
    export METABASED_SEQUENCER_CHAIN_CONTRACT_ADDRESS=[GETS_REPLACED_BY_SCRIPT]
    EOL

# Puts arb contract address into localnet ENV file
# Works by finding the value corresponding to the key in the .envrc, and replacing it with the address found in the `deploy_file`
arb-update-chain-address: arb-deploy-chain create-envrc
    @echo "[JUST] Reading current environment configuration..."
    cat {{ envrc_file }} | grep -v METABASED_SEQUENCER_CHAIN_CONTRACT_ADDRESS= > {{ envrc_file }}.tmp
    @echo "[JUST] Setting new contract address from deployment..."
    echo export METABASED_SEQUENCER_CHAIN_CONTRACT_ADDRESS=0x$(cat {{ arb_contract_deploy_file }} | grep MetabasedSequencerChain -A1 | grep contractAddress | sed 's/[^x]*0x//' | cut -c 1-40 | uniq) >> {{ envrc_file }}.tmp
    @echo "[JUST] Saving updated environment configuration..."
    mv {{ envrc_file }}.tmp {{ envrc_file }}
    @echo "[JUST] Environment configuration updated successfully"

# TODO(SEQ-312): refactor duplicate
# Puts Arb contract address into localnet ENV file
update-chain-address: arb-deploy-chain create-envrc
    @echo "[JUST] Reading contract address from deployment..."
    #!/usr/bin/env bash
    # Get the contract address from arb deployment file
    contract_address=$(cat {{ arb_contract_deploy_file }} | grep MetabasedSequencerChain -A1 | grep contractAddress | sed 's/[^x]*0x//' | cut -c 1-40 | uniq)
    @echo "[JUST] Updating environment configuration..."
    # Remove both old addresses and create temp file
    cat {{ envrc_file }} | grep -v METABASED_SEQUENCER_CHAIN_CONTRACT_ADDRESS= | grep -v SEQUENCING_CONTRACT_ADDRESS= > {{ envrc_file }}.tmp
    @echo "[JUST] Setting new contract addresses..."
    # Add both new addresses
    echo "METABASED_SEQUENCER_CHAIN_CONTRACT_ADDRESS=0x${contract_address}" >> {{ envrc_file }}.tmp
    echo "SEQUENCING_CONTRACT_ADDRESS=0x${contract_address}" >> {{ envrc_file }}.tmp
    @echo "[JUST] Saving updated environment configuration..."
    mv {{ envrc_file }}.tmp {{ envrc_file }}
    @echo "[JUST] Environment configuration updated successfully"

go-install:
    go install {{ repository_root }}/op-translator
    # go install {{ repository_root }}/metabased-publisher/cmd

# Install Foundry
# Based on https://book.getfoundry.sh/getting-started/installation
foundry-install:
    if [ "$(date -d $({{ forge }} -V | cut -c 22-40) +%s)" -ge "$(date -d {{ forge_min_build_date }} +%s)" ]; then
    else
        curl -L https://foundry.paradigm.xyz | bash
    fi

# Update Foundry
# Based on https://book.getfoundry.sh/getting-started/installation
foundry-update:
    if [ "$(date -d $({{ forge }} -V | cut -c 22-40) +%s)" -ge "$(date -d {{ forge_min_build_date }} +%s)" ]; then
    else
        foundryup
    fi

# Initialize op-devnet
op-up:
    PATH={{foundry_path}} make --directory ~/optimism devnet-up
    @echo "[JUST] OP Devnet initialized"

# Shut down devnet
op-down:
    PATH={{foundry_path}} make --directory ~/optimism devnet-down
    @echo "[JUST] OP Devnet shut down"

# Create aliases for devnet commands in both Bash and Zsh
    #!/bin/bash
    echo "[JUST] Creating shell aliases..."
    for rc_file in ~/.bashrc ~/.zshrc; do
        if [[ -f "$rc_file" ]]; then
            echo "[JUST] Processing $rc_file..."
            # Remove any existing aliases first
            sed -i '/# BEGIN Metabased Rollup Dev Container aliases/,/# END Metabased Rollup Dev Container aliases/d' "$rc_file"

            # Add new aliases
            echo "[JUST] Adding Foundry configuration..."
            echo "# BEGIN Metabased Rollup Dev Container aliases" >> "$rc_file"
            echo "# Foundry PATH" >> "$rc_file"
            echo "export PATH=\"\$PATH:\$HOME/.foundry/bin\"" >> "$rc_file"
            echo "# Foundry aliases" >> "$rc_file"
            echo "alias foundry-install='just -f {{justfile()}} foundry-install'" >> "$rc_file"
            echo "alias foundry-update='just -f {{justfile()}} foundry-update'" >> "$rc_file"

            echo "[JUST] Adding Local Devnet aliases..."
            echo "# Local Devnet aliases" >> "$rc_file"
            echo "alias op-up='just -f {{justfile()}} op-up'" >> "$rc_file"
            echo "alias op-down='just -f {{justfile()}} op-down'" >> "$rc_file"
            echo "alias op-clean='just -f {{justfile()}} op-clean'" >> "$rc_file"
            echo "alias op-reclone='just -f {{justfile()}} op-reclone'" >> "$rc_file"
            echo "alias go-install='just -f {{justfile()}} go-install'" >> "$rc_file"
            echo "alias op-deploy-chain='just -f {{justfile()}} op-deploy-chain'" >> "$rc_file"
            echo "alias arb-up='just -f {{justfile()}} arb-up'" >> "$rc_file"
            echo "alias arb-down='just -f {{justfile()}} arb-down'" >> "$rc_file"
            echo "alias arb-teardown='just -f {{justfile()}} arb-teardown'" >> "$rc_file"
            echo "alias arb-deploy-chain='just -f {{justfile()}} arb-deploy-chain'" >> "$rc_file"
            echo "alias arb-update-chain-address='just -f {{justfile()}} arb-update-chain-address'" >> "$rc_file"
            echo "alias arb-health-check='just -f {{justfile()}} arb-health-check'" >> "$rc_file"
            echo "alias run-metabased-sequencer='just -f {{justfile()}} run-metabased-sequencer'" >> "$rc_file"
            echo "# END Metabased Rollup Dev Container aliases" >> "$rc_file"

            # Source the rc file immediately
            echo "source \"\$rc_file\"" >> "$rc_file"
            echo "[JUST] [✓] Aliases created successfully in $rc_file"
        else
            echo "[JUST] [✗] Warning: $rc_file does not exist. Skipping."
        fi
    done

# Run all OP steps in sequence
# OP Devnet setup based on https://docs.optimism.io/chain/testing/dev-node
# We initialize and then spin down the devnet to get the initialization time out
# of the way upfront
op-all: op-clone foundry-install foundry-update create-aliases
    # PLACEHOLDER: Dependencies are handled by the prerequisites listed above

# Run all Arbitrum setup steps in sequence necessary for `arb-up`
arb-network-setup: foundry-install foundry-update create-aliases
    @echo "[JUST] Post-setup Arbitrum script completed successfully. Ready to bring up the Arbitrum Orbit devnet with arb-up."

arb-sequencer-plus-setup: arb-deploy-chain arb-update-chain-address run-metabased-sequencer
    # PLACEHOLDER: Dependencies are handled by the prerequisites listed above

arb-health-check:
    curl -s -X POST -H "Content-Type: application/json" \
    --data '{"jsonrpc":"2.0","method":"net_version","id":1}' \
    {{ arb_orbit_l2_rpc_url }} || echo "[JUST] RPC endpoint not responding"

sequencer-health-check:
    curl --location {{ metabased_sequencer_url }} \
    --header 'Content-Type: application/json' \
    --data '{"jsonrpc":"2.0","method":"health","id":1}' || \
    echo "[JUST] Sequencer endpoint not responding"

op-translator-health-check:
    curl --location {{ op_translator_url }} \
    --header 'Content-Type: application/json' \
    --data '{"jsonrpc":"2.0","method":"health","id":1}' || \
    echo "[JUST] OP Translator endpoint not responding"

arb-test-sendRawTransaction: arb-health-check sequencer-health-check
    RESPONSE=$(curl --location {{ metabased_sequencer_url }} \
    --header 'Content-Type: application/json' \
    --data '{"jsonrpc":"2.0","method":"eth_sendRawTransaction","params":["0xb85902f85682038501808088ffffffffffffffff808080c001a0d555dc3a308d5bde3d5bc665796f9e7d7125c1554667325533fe237c1aa120b5a07d97dae06082d3eb7fa8966b33f6ce51d7127dcddd5da3d8be9c448a72150a90"],"id":1}')
    if echo "$RESPONSE" | grep -q "result"; then
    else
        exit 1
    fi

# Setup and verify Arbitrum network configuration
arb-network-verify:
    #!/usr/bin/env bash
    set -e

    # Create .envrc file
    just create-envrc
    [ -f {{ envrc_file }} ] || { echo "[JUST] .envrc file not created successfully"; exit 1; }

    # Set up network
    RESPONSE=$(just arb-network-setup)
    echo "[JUST] Network setup: $RESPONSE"

    # Wait for network setup to complete
    if echo "$RESPONSE" || ! grep -q "Ready to bring up the Arbitrum Orbit devnet"; then
        echo "[JUST] [✓] Network setup succeeded"
    else
        echo "[JUST] [✗] Network setup failed"
        exit 1
    fi

# Health check for Arbitrum node
arb-health-verify:
    #!/usr/bin/env bash
    set -e

    # Start Arbitrum node in background if not running
    if ! nc -z localhost {{ arb_orbit_port }}; then
        just arb-up &
    fi

    # Wait for Arbitrum node to be ready via health check
    until just arb-health-check | grep -q "result"; do
        sleep 10
    done

# Setup and verify sequencer
sequencer-verify:
    #!/usr/bin/env bash
    set -e

    # Run sequencer setup and capture logs
    just arb-sequencer-plus-setup 2>&1 | tee /tmp/sequencer-setup.log &

    # Wait for Rust build to complete
    while ! grep -q "Finished \`dev\` profile" /tmp/sequencer-setup.log; do
        sleep 20
    done

# Run transaction test
transaction-verify:
    #!/usr/bin/env bash
    set -e

    RESPONSE=$(just arb-test-sendRawTransaction)

    # Check if response contains an error
    if echo "$RESPONSE" | grep -q '"error"'; then
        exit 1
    fi

    # Check if response contains expected result
    if ! echo "$RESPONSE" | grep -q '"result"'; then
        exit 1
    fi

# Aggregated command for CI pipeline to run all verifications
verify-all:
    #!/usr/bin/env bash
    set -e

    # Run all verification steps in sequence
    just arb-network-verify
    just arb-health-verify
    just sequencer-verify
    just transaction-verify

