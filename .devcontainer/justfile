# Define the PATH variable to include Foundry's bin directory and Gopath
foundry_path := env_var('PATH') + ":" + env_var('HOME') + "/.foundry/bin" + ":" + `go env GOPATH` + "/bin"

# Define fully qualified path to forge binary
forge := env_var('HOME') + "/.foundry/bin/forge"

# Define minimum forge version (annoted by build date since we're using nightly build)
forge_min_build_date := "2024-10-22"

# Define a non-zero number to identify the layer-3 chain
l3_chain_id := "5100"

# Define a private key authorized to deploy contracts on Optimism devnet
# This private key is common knowledge, you should not use it on any network other than this dev network.
# Using this private key on mainnet, or even a testnet, will most likely result in a loss of funds.
# https://docs.optimism.io/chain/testing/dev-node#additional-info
op_devnet_private_key := "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

# Define layer-2 devnet RPC URL launched by the Optimism devnet
op_devnet_l2_rpc_url := "http://127.0.0.1:9545"

# Define layer-2 rollup chain ID in decimal
op_devnet_l2_chain_id := "901"

# Default localnet chainID
arb_orbit_l2_chain_id := "412346"

# Default localnet port
arb_orbit_port := "8547"

arb_orbit_l2_rpc_url := "http://127.0.0.1:" + arb_orbit_port

metabased_sequencer_url := "http://127.0.0.1:8456"

# Dev account private key - https://docs.arbitrum.io/run-arbitrum-node/run-nitro-dev-node#development-account-used-by-default
arb_orbit_private_key := "0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659"

# Define root directory of the git repository
repository_root := justfile_directory() + "/.."

# Define root directory of the metabased contracts project
contracts_root := repository_root + "/metabased-contracts"

# Define root directory of the metabased sequencer project
sequencer_root := repository_root + "/metabased-sequencer"

# Define file for localnet environment variables
localenv_file := repository_root + "/localnet.env"

# Define deploy file created on latest run of the deploy script for metabased sequencer chain contract
op_contract_deploy_file := contracts_root + "/broadcast/DeployContractsForSequencerChain_.s.sol/" + op_devnet_l2_chain_id + "/run-latest.json"

# Define deploy file created on latest run of the deploy script for metabased sequencer chain contract
arb_contract_deploy_file := contracts_root + "/broadcast/DeployContractsForSequencerChain_.s.sol/" + arb_orbit_l2_chain_id + "/run-latest.json"

# Add Foundry's bin directory to the PATH for all recipes
export PATH := foundry_path

# Clone the Optimism repository
op-clone:
    # The op-devnet sometimes breaks with the error `t=2024-10-22T23:38:03+0000 lvl=crit msg="Application failed" message="failed to fetch startBlock from SystemConfig: failed to call startBlock: failed to unpack result: failed to unpack data: abi: attempting to unmarshal an empty string while arguments are expected"`
    # This is true across 1.9.3, 1.9.4, and develop, but it appears to happen
    # less frequently on develop. We'll change this to use the latest release
    # once it's fixed
    # If you encounter this error, you can try running `op-reclone` to clean up
    # and re-clone the repository
    git clone --branch develop --single-branch --depth 1 https://github.com/ethereum-optimism/optimism.git ~/optimism || echo skipping clone

# Starts arbitrum node listening at 8547
arb-up:
    chmod +x ./run-arb-nitro-dev-node.sh && ARB_ORBIT_PORT={{ arb_orbit_port }} ARB_ORBIT_L2_RPC_URL={{ arb_orbit_l2_rpc_url }} ./run-arb-nitro-dev-node.sh

# Stops Arbitrum docker container created by script above
arb-down:
    @echo "Stopping Arbitrum node..."
    docker stop nitro-dev
    @echo "Arbitrum node stopped."

# Removes all Docker infra assocaited with the Arbitrum, returning to a blank slate
arb-teardown: arb-down
    @echo "Removing Arbitrum container..."
    @docker rm nitro-dev 2>/dev/null || true
    @echo "Removing associated volumes..."
    @docker volume rm $(docker volume ls -q -f name=nitro-dev) 2>/dev/null || true
    @echo "Removing associated networks..."
    @docker network rm $(docker network ls -q -f name=nitro-dev) 2>/dev/null || true
    @echo "Arbitrum node infrastructure removed."

op-clean:
    rm -rf ~/optimism

op-reclone: op-down op-clean op-clone

# Deploy MetabasedSequencerChain smart contract to Optimism devnet
op-deploy-chain:
    cat {{ contracts_root }}/script/DeployContractsForSequencerChain.s.sol | sed -E 's/(l3ChainId = )0;/\1{{ l3_chain_id }};/' > {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol
    [ -f {{ op_contract_deploy_file }} ] || forge script --root {{ contracts_root }} {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol:DeployMetabasedSequencerChainPlusSetupWithAlwaysAllowModule --rpc-url {{ op_devnet_l2_rpc_url }} --private-key {{ op_devnet_private_key }} --broadcast -vvvv
    rm {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol

# Deploy MetabasedSequencerChain smart contract to Arbitrum Orbit devnet
arb-deploy-chain:
    cat {{ contracts_root }}/script/DeployContractsForSequencerChain.s.sol | sed -E 's/(l3ChainId = )0;/\1{{ l3_chain_id }};/' > {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol
    [ -f {{ arb_contract_deploy_file }} ] || forge script --root {{ contracts_root }} {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol:DeployMetabasedSequencerChainPlusSetupWithAlwaysAllowModule --rpc-url {{ arb_orbit_l2_rpc_url }} --private-key {{ arb_orbit_private_key }} --broadcast --skip-simulation -vvvv
    rm {{ contracts_root }}/script/DeployContractsForSequencerChain_.s.sol

# Runs sequencer using localnet.env file
## TODO remove debug
run-metabased-sequencer:
    @echo "Contents of {{ localenv_file }}:"
    @cat {{ localenv_file }}
    @echo "Running sequencer..."
    cd {{ sequencer_root }} && RUST_BACKTRACE=1 cargo run -p interceptor -- --profile localnet

# Removes files generated by deploying metabased sequencer chain contract to Optimism devnet
op-clean-chain:
    rm -rf {{ op_contract_deploy_file }}

# Removes files generated by deploying metabased sequencer chain contract to Arbitrum devnet
arb-clean-chain:
    rm -rf {{ arb_contract_deploy_file }}

# Puts contract address into localnet ENV file
op-update-chain-address: op-deploy-chain op-create-localenv
    cat {{ localenv_file }} | grep -v METABASED_CHAIN_CONTRACT_ADDRESS= > {{ localenv_file }}.tmp
    echo METABASED_CHAIN_CONTRACT_ADDRESS=0x$(cat {{ op_contract_deploy_file }} | grep MetabasedSequencerChain -A1 | grep contractAddress | sed 's/[^x]*0x//' | cut -c 1-40 | uniq) >> {{ localenv_file }}.tmp
    mv {{ localenv_file }}.tmp {{ localenv_file }}

# Creates localnet ENV file with values fit for Optimism devnet
op-create-localenv:
    [ -f {{ localenv_file }} ] || printf "METABASED_CHAIN_RPC_ADDRESS={{ op_devnet_l2_rpc_url }}\nMETABASED_PRIVATE_KEY={{ op_devnet_private_key }}" > {{ localenv_file }}

# Creates localnet ENV file with values fit for Arbitrum devnet
arb-create-localenv:
    [ -f {{ localenv_file }} ] || printf "METABASED_CHAIN_RPC_ADDRESS={{ arb_orbit_l2_rpc_url }}\nMETABASED_PRIVATE_KEY={{ arb_orbit_private_key }}" > {{ localenv_file }}

# Puts arb contract address into localnet ENV file
arb-update-chain-address: arb-deploy-chain arb-create-localenv
    cat {{ localenv_file }} | grep -v METABASED_CHAIN_CONTRACT_ADDRESS= > {{ localenv_file }}.tmp
    echo METABASED_CHAIN_CONTRACT_ADDRESS=0x$(cat {{ arb_contract_deploy_file }} | grep MetabasedSequencerChain -A1 | grep contractAddress | sed 's/[^x]*0x//' | cut -c 1-40 | uniq) >> {{ localenv_file }}.tmp
    mv {{ localenv_file }}.tmp {{ localenv_file }}

go-install:
    go install /workspaces/metabased-rollup/op-translator
    # go install /workspaces/metabased-rollup/metabased-publisher/cmd

# Install Foundry
# Based on https://book.getfoundry.sh/getting-started/installation
foundry-install:
    [ "$(date -d $({{ forge }} -V | cut -c 22-40) +%s)" -ge "$(date -d {{ forge_min_build_date }} +%s)" ] || curl -L https://foundry.paradigm.xyz | bash

# Update Foundry
# Based on https://book.getfoundry.sh/getting-started/installation
foundry-update:
    [ "$(date -d $({{ forge }} -V | cut -c 22-40) +%s)" -ge "$(date -d {{ forge_min_build_date }} +%s)" ] || foundryup

# TODO remove me if unnecessary
clean-genesis:
    rm -rf ~/optimism/.devnet/genesis-l1.ssz
    mkdir -p ~/optimism/.devnet

# Initialize op-devnet
op-up: clean-genesis
    PATH={{foundry_path}} make --directory ~/optimism devnet-up
    @echo "OP Devnet initialized"

# Shut down devnet
op-down:
    PATH={{foundry_path}} make --directory ~/optimism devnet-down
    @echo "OP Devnet shut down"

# Helps restart after error
# `fetching start block by number: operation failed permanently after 24 attempts: not found`
op-devnet-clean:
    PATH={{foundry_path}} make --directory ~/optimism devnet-clean
    @echo "OP Devnet cleaned"

## TODO replace the URL
does-block-one-exists:
    curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' http://localhost:8545


## TODO remove
verify-env:
    #!/usr/bin/env bash
    set -euo pipefail
    if [ -f {{ localenv_file }} ]; then
        while IFS='=' read -r key value; do
            [[ $key =~ ^[A-Z_]+$ ]] || (echo "Invalid key format: $key" >&2 && exit 1)
            [[ $value =~ ^[0-9a-zA-Z:/._-]+$ ]] || (echo "Invalid value format: $value" >&2 && exit 1)
        done < {{ localenv_file }}
    fi


# Create aliases for devnet commands in both Bash and Zsh
create-aliases:
    #!/bin/bash
    for rc_file in ~/.bashrc ~/.zshrc; do
        if [[ -f "$rc_file" ]]; then
            echo "# BEGIN Metabased Rollup Dev Container aliases" >> "$rc_file"
            echo "# Foundry PATH" >> "$rc_file"
            echo "export PATH=\"\$PATH:\$HOME/.foundry/bin\"" >> "$rc_file"
            echo "# Foundry aliases" >> "$rc_file"
            echo "alias foundry-install='just -f {{justfile()}} foundry-install'" >> "$rc_file"
            echo "alias foundry-update='just -f {{justfile()}} foundry-update'" >> "$rc_file"
            echo "# Local Devnet aliases" >> "$rc_file"
            echo "alias op-up='just -f {{justfile()}} op-up'" >> "$rc_file"
            echo "alias op-down='just -f {{justfile()}} op-down'" >> "$rc_file"
            echo "alias op-clean='just -f {{justfile()}} op-clean'" >> "$rc_file"
            echo "alias op-reclone='just -f {{justfile()}} op-reclone'" >> "$rc_file"
            echo "alias go-install='just -f {{justfile()}} go-install'" >> "$rc_file"
            echo "alias op-deploy-chain='just -f {{justfile()}} op-deploy-chain'" >> "$rc_file"
            echo "alias arb-up='just -f {{justfile()}} arb-up'" >> "$rc_file"
            echo "alias arb-down='just -f {{justfile()}} arb-down'" >> "$rc_file"
            echo "alias arb-teardown='just -f {{justfile()}} arb-teardown'" >> "$rc_file"
            echo "alias arb-deploy-chain='just -f {{justfile()}} arb-deploy-chain'" >> "$rc_file"
            echo "alias arb-update-chain-address='just -f {{justfile()}} arb-update-chain-address'" >> "$rc_file"
            echo "alias arb-health-check='just -f {{justfile()}} arb-health-check'" >> "$rc_file"
            echo "alias run-metabased-sequencer='just -f {{justfile()}} run-metabased-sequencer'" >> "$rc_file"
            echo "# END Metabased Rollup Dev Container aliases" >> "$rc_file"
            echo "Aliases created in $rc_file"
        else
            echo "Warning: $rc_file does not exist. Skipping."
        fi
    done

# Run all OP steps in sequence
# OP Devnet setup based on https://docs.optimism.io/chain/testing/dev-node
# We initialize and then spin down the devnet to get the initialization time out
# of the way upfront
op-all: op-clone foundry-install foundry-update create-aliases
    @echo "Post-setup OP script completed successfully. Ready to bring up the OP Stack devnet with op-up."

is-block-one-mined:
    curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' http://localhost:8545

## Run all Arbitrum setup steps in sequence necessary for `arb-up`
#arb-network-setup: foundry-install foundry-update create-aliases
#    @echo "Post-setup Arbitrum script completed successfully. Ready to bring up the Arbitrum Orbit devnet with arb-up."

# Run all network setup steps in sequence necessary for to bring up Optimism or Arbitrum devnets with `arb-up` or `op-up`
network-setup: foundry-install foundry-update create-aliases
    @echo "Post-setup localnet script completed successfully. Ready to bring up the Arbitrum or Optimism devnet with arb-up or op-up."

arb-sequencer-plus-setup: arb-deploy-chain arb-update-chain-address run-metabased-sequencer
    @echo "Arbitrum Sequencer setup completed successfully. Running sequencer."

update-foundry-deps:
    cd {{ contracts_root }} && \
    git submodule update --init --recursive && \
    forge install

op-sequencer-plus-setup: clean-forge update-foundry-deps op-deploy-chain op-update-chain-address run-metabased-sequencer
    @echo "Optimism Sequencer setup completed successfully. Running sequencer."

check-imports:
    @echo "Checking MetabasedSequencerChain.sol imports..."
    cat {{ contracts_root }}/src/MetabasedSequencerChain.sol
    @echo "\nChecking AlwaysAllowedModule.sol imports..."
    cat {{ contracts_root }}/src/sequencing-modules/AlwaysAllowedModule.sol
    @echo "\nChecking MetabasedFactory.sol imports..."
    cat {{ contracts_root }}/src/MetabasedFactory.sol

## optional
clean-forge:
    cd {{ contracts_root }} && forge clean

arb-health-check:
    curl -s -X POST -H "Content-Type: application/json" \
    --data '{"jsonrpc":"2.0","method":"net_version","id":1}' \
    {{ arb_orbit_l2_rpc_url }} || echo "RPC endpoint not responding"

sequencer-health-check:
    curl --location {{ metabased_sequencer_url }} \
    --header 'Content-Type: application/json' \
    --data '{"jsonrpc":"2.0","method":"health","id":1}'

arb-test-sendRawTransaction: arb-health-check sequencer-health-check
    curl --location {{ metabased_sequencer_url }} \
    --header 'Content-Type: application/json' \
    --data '{"jsonrpc":"2.0","method":"eth_sendRawTransaction","params":["0xb85902f85682038501808088ffffffffffffffff808080c001a0d555dc3a308d5bde3d5bc665796f9e7d7125c1554667325533fe237c1aa120b5a07d97dae06082d3eb7fa8966b33f6ce51d7127dcddd5da3d8be9c448a72150a90"],"id":1}'