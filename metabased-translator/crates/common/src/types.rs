//! Common types for the metabased-translator

use serde::Deserialize;

#[derive(Clone, Debug)]
/// **`BlockAndReceipts`**: Contains both a `Block` and the associated list of `Receipt` objects.
pub struct BlockAndReceipts {
    /// The block data.
    pub block: Block,
    /// The transaction receipts for the block.
    pub receipts: Vec<Receipt>,
}

#[derive(Deserialize, Debug, Clone)]
/// **`Block`**: Represents an Ethereum block, including details like its hash, number, timestamp, and the transactions it contains.
pub struct Block {
    /// The hash of the block.
    pub hash: String,
    /// The block number.
    pub number: String,
    /// The hash of the parent block.
    #[serde(rename = "parentHash")]
    pub parent_hash: String,
    /// The logs bloom filter for the block.
    #[serde(rename = "logsBloom")]
    pub logs_bloom: String,
    /// The root hash of the transactions trie.
    #[serde(rename = "transactionsRoot")]
    pub transactions_root: String,
    /// The root hash of the final state trie.
    #[serde(rename = "stateRoot")]
    pub state_root: String,
    /// The root hash of the receipts trie.
    #[serde(rename = "receiptsRoot")]
    pub receipts_root: String,
    /// The timestamp when the block was mined, in Unix time.
    pub timestamp: String,
    /// The transactions included in the block.
    pub transactions: Vec<Transaction>,
}

#[derive(Deserialize, Debug, Clone)]
/// **`Transaction`**: Represents a single transaction within a block, including fields such as the transaction hash, sender/recipient addresses, value, and input data.
pub struct Transaction {
    /// The hash of the block containing this transaction, or `null` if pending.
    #[serde(rename = "blockHash")]
    pub block_hash: String,
    /// The number of the block containing this transaction, or `null` if pending.
    #[serde(rename = "blockNumber")]
    pub block_number: String,
    /// The sender's address.
    pub from: String,
    /// The transaction hash.
    pub hash: String,
    /// The data payload of the transaction.
    pub input: String,
    /// The number of transactions sent by the sender.
    pub nonce: String,
    /// The recipient's address, or `null` if the transaction creates a contract.
    pub to: Option<String>,
    /// The index of this transaction in the block, or `null` if pending.
    #[serde(rename = "transactionIndex")]
    pub transaction_index: String,
    /// The amount of Wei transferred.
    pub value: String,
}

#[derive(Deserialize, Debug, Clone)]
/// **`Receipt`**: Contains the result of a transaction, including fields like status, logs, and potentially a contract address if one was created.
pub struct Receipt {
    /// The hash of the block containing the transaction.
    #[serde(rename = "blockHash")]
    pub block_hash: String,
    /// The number of the block containing the transaction.
    #[serde(rename = "blockNumber")]
    pub block_number: String,
    /// The sender's address.
    pub from: String,
    /// The recipient's address.
    pub to: Option<String>,
    /// The address of the contract created by the transaction, if applicable.
    #[serde(rename = "contractAddress")]
    pub contract_address: Option<String>,
    /// The logs generated by the transaction.
    pub logs: Vec<Log>,
    /// The logs bloom filter for the transaction.
    #[serde(rename = "logsBloom")]
    pub logs_bloom: String,
    /// The transaction's execution status.
    pub status: String,
    /// The receipt type, if available.
    #[serde(rename = "type")]
    pub receipt_type: Option<String>,
}

#[derive(Deserialize, Debug, Clone)]
/// *`Log`**: Represents an individual log entry emitted by a smart contract during a transaction, containing information such as topics, data, and whether it was removed due to a reorganization.
pub struct Log {
    /// The hash of the block containing the log, or `null` if pending.
    #[serde(rename = "blockHash")]
    pub block_hash: String,
    /// The number of the block containing the log, or `null` if pending.
    #[serde(rename = "blockNumber")]
    pub block_number: String,
    /// The index of the transaction that generated the log, or `null` if pending.
    pub transaction_index: Option<String>,
    /// The address from which the log originated.
    pub address: String,
    /// The index of the log entry, or `null` if pending.
    #[serde(rename = "logIndex")]
    pub log_index: Option<String>,
    /// The data associated with the log.
    pub data: String,
    /// A flag indicating if the log was removed due to a chain reorganization.
    pub removed: bool,
    /// The topics associated with the log.
    pub topics: Vec<String>,
    /// The hash of the transaction that generated the log, or `null` if pending.
    #[serde(rename = "transactionHash")]
    pub transaction_hash: Option<String>,
}
