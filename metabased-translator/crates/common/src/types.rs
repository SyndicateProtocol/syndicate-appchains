//! Types module for metabased-translator

use alloy::{
    hex,
    primitives::{Address, Bytes, B256},
};
use serde::{
    de::{self, Deserializer},
    Deserialize, Serialize,
};
use std::fmt;
use strum_macros::Display;

#[derive(Clone, Debug, Serialize, Deserialize)]
/// **`BlockAndReceipts`**: Contains both a `Block` and the associated list of `Receipt` objects.
pub struct BlockAndReceipts {
    /// The block data.
    pub block: Block,
    /// The transaction receipts for the block.
    pub receipts: Vec<Receipt>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
/// **`Block`**: Represents an Ethereum block, including details like its hash, number, timestamp,
/// and the transactions it contains.
pub struct Block {
    /// The hash of the block.
    #[serde(deserialize_with = "deserialize_b256")]
    pub hash: B256,
    /// The block number.
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub number: u64,
    /// The hash of the parent block.
    #[serde(deserialize_with = "deserialize_b256")]
    pub parent_hash: B256,
    /// The logs bloom filter for the block.
    pub logs_bloom: String,
    /// The root hash of the transactions trie.
    pub transactions_root: String,
    /// The root hash of the final state trie.
    pub state_root: String,
    /// The root hash of the receipts trie.
    pub receipts_root: String,
    /// The timestamp when the block was mined, in Unix time.
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub timestamp: u64,
    /// The transactions included in the block.
    pub transactions: Vec<Transaction>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
/// **`Transaction`**: Represents a single transaction within a block, including fields such as the
/// transaction hash, sender/recipient addresses, value, and input data.
pub struct Transaction {
    /// The hash of the block containing this transaction, or `null` if pending.
    #[serde(deserialize_with = "deserialize_b256")]
    pub block_hash: B256,
    /// The number of the block containing this transaction, or `null` if pending.
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub block_number: u64,
    /// The sender's address.
    #[serde(deserialize_with = "deserialize_address")]
    pub from: Address,
    /// The transaction hash.
    #[serde(deserialize_with = "deserialize_b256")]
    pub hash: B256,
    /// The data payload of the transaction.
    pub input: String,
    /// The number of transactions sent by the sender.
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub nonce: u64,
    /// The recipient's address, or `null` if the transaction creates a contract.
    #[serde(deserialize_with = "deserialize_optional_address")]
    pub to: Option<Address>,
    /// The index of this transaction in the block.
    pub transaction_index: String,
    /// The amount of Wei transferred.
    pub value: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
/// **`Receipt`**: Contains the result of a transaction, including fields like status, logs, and
/// potentially a contract address if one was created.
pub struct Receipt {
    /// The hash of the block containing the transaction.
    #[serde(deserialize_with = "deserialize_b256")]
    pub block_hash: B256,
    /// The number of the block containing the transaction.
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub block_number: u64,
    /// The sender's address.
    #[serde(deserialize_with = "deserialize_address")]
    pub from: Address,
    /// The recipient's address.
    #[serde(deserialize_with = "deserialize_optional_address")]
    pub to: Option<Address>,
    /// The address of the contract created by the transaction, if applicable.
    #[serde(deserialize_with = "deserialize_optional_address")]
    pub contract_address: Option<Address>,
    /// The logs generated by the transaction.
    pub logs: Vec<Log>,
    /// The logs bloom filter for the transaction.
    pub logs_bloom: String,
    /// The transaction's execution status.
    pub status: String,
    /// The receipt type, if available.
    #[serde(rename = "type")]
    pub receipt_type: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
/// *`Log`**: Represents an individual log entry emitted by a smart contract during a transaction,
/// containing information such as topics, data, and whether it was removed due to a reorganization.
pub struct Log {
    /// The hash of the block containing the log, or `null` if pending.
    #[serde(deserialize_with = "deserialize_b256")]
    pub block_hash: B256,
    /// The number of the block containing the log, or `null` if pending.
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub block_number: u64,
    /// The index of the transaction that generated the log
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub transaction_index: u64,
    /// The address from which the log originated.
    #[serde(deserialize_with = "deserialize_address")]
    pub address: Address,
    /// The index of the log entry
    #[serde(deserialize_with = "deserialize_hex_to_u64")]
    pub log_index: u64,
    /// The data associated with the log.
    pub data: Bytes,
    /// A flag indicating if the log was removed due to a chain reorganization.
    pub removed: bool,
    /// The topics associated with the log.
    #[serde(deserialize_with = "deserialize_b256_vec")]
    pub topics: Vec<B256>,
    /// The hash of the transaction that generated the log
    #[serde(deserialize_with = "deserialize_b256")]
    pub transaction_hash: B256,
}

#[allow(missing_docs)] // self-explanatory
#[derive(Debug, Clone, Copy, PartialEq, Eq, Display)]
#[strum(serialize_all = "lowercase")]
pub enum Chain {
    Sequencing,
    Settlement,
}

/// The state of a slot describing its finality
#[derive(Debug, Clone, Copy, PartialEq, Eq, Display, Serialize, Deserialize)]
#[strum(serialize_all = "lowercase")]
pub enum SlotState {
    /// A slot that is considered final and cannot rollback (we don't expect any underlying chains
    /// to reorg this far)
    Finalized,
    /// A slot that is considered final according to the source L2s finality guarantees (it can
    /// only be rolled back if a L1 reorg happens)
    Safe,
    /// A slot that we don't expect to fit more blocks into. It should be considered cannonical
    /// unless a reorg happens
    Unsafe,
    /// A slot to which incoming blocks might still be added
    Open,
}

/// A `Slot` is a collection of source chain blocks  to be sent to the block builder
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Slot {
    /// the number of the slot - `slot_number` == `MetaChain`'s block number
    pub slot_number: u64,
    /// the timestamp of the slot
    pub timestamp: u64,
    /// the blocks from the sequencing chain to be included in the slot
    pub sequencing_chain_blocks: Vec<BlockAndReceipts>,
    /// the blocks from the settlement chain to be included in the slot
    pub settlement_chain_blocks: Vec<BlockAndReceipts>,
    /// the finality state of the slot
    pub state: SlotState,
}

impl Slot {
    /// Creates a new slot
    pub const fn new(number: u64, timestamp: u64) -> Self {
        Self {
            slot_number: number,
            timestamp,
            sequencing_chain_blocks: Vec::new(),
            settlement_chain_blocks: Vec::new(),
            state: SlotState::Open,
        }
    }

    /// Checks if the slot is empty (does not include any blocks)
    pub fn is_empty(&self) -> bool {
        self.sequencing_chain_blocks.is_empty() && self.settlement_chain_blocks.is_empty()
    }

    /// Adds a block to the slot's chain-specific block list
    pub fn push_block(&mut self, block: BlockAndReceipts, chain: Chain) {
        match chain {
            Chain::Sequencing => self.sequencing_chain_blocks.push(block),
            Chain::Settlement => self.settlement_chain_blocks.push(block),
        }
    }
}

impl fmt::Display for Slot {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "Slot #{} [ts: {}, state: {}, blocks: {} seq + {} settle]\n  Sequencing blocks: {}\n  Settlement blocks: {}",
            self.slot_number,
            self.timestamp,
            self.state,
            self.sequencing_chain_blocks.len(),
            self.settlement_chain_blocks.len(),
            format_blocks(&self.sequencing_chain_blocks),
            format_blocks(&self.settlement_chain_blocks),
        )
    }
}

fn format_blocks(blocks: &[BlockAndReceipts]) -> String {
    if blocks.is_empty() {
        return "none".to_string();
    }
    blocks
        .iter()
        .map(|b| format!("#{} ({})", b.block.number, b.block.hash))
        .collect::<Vec<_>>()
        .join(", ")
}

fn deserialize_address<'de, D>(deserializer: D) -> Result<Address, D::Error>
where
    D: Deserializer<'de>,
{
    let address_str: String = Deserialize::deserialize(deserializer)?;
    let address: Address = address_str
        .parse()
        .map_err(|err| de::Error::custom(format!("Failed to parse address: {err}")))?;
    Ok(address)
}

fn deserialize_optional_address<'de, D>(deserializer: D) -> Result<Option<Address>, D::Error>
where
    D: Deserializer<'de>,
{
    let opt: Option<String> = Option::deserialize(deserializer)?;
    if let Some(address_str) = opt {
        let address: Address = address_str
            .parse()
            .map_err(|err| de::Error::custom(format!("Failed to parse address: {err}")))?;
        Ok(Some(address))
    } else {
        Ok(None)
    }
}

fn deserialize_hex_to_u64<'de, D>(deserializer: D) -> Result<u64, D::Error>
where
    D: Deserializer<'de>,
{
    let hex_str: String = Deserialize::deserialize(deserializer)?;

    // Remove "0x" prefix if present, then parse as hexadecimal.
    u64::from_str_radix(hex_str.trim_start_matches("0x"), 16)
        .map_err(|err| de::Error::custom(format!("Failed to parse hex to u64: {}", err)))
}

fn deserialize_b256<'de, D>(deserializer: D) -> Result<B256, D::Error>
where
    D: Deserializer<'de>,
{
    let hex_str: String = Deserialize::deserialize(deserializer)?;

    let decoded = hex::decode(hex_str.trim_start_matches("0x"))
        .map_err(|err| de::Error::custom(format!("Failed to decode hex string: {err}")))?;

    let array: [u8; 32] = decoded
        .try_into()
        .map_err(|_| de::Error::custom("Failed to convert to a 32-byte array"))?;

    Ok(B256::from(array))
}

fn deserialize_b256_vec<'de, D>(deserializer: D) -> Result<Vec<B256>, D::Error>
where
    D: Deserializer<'de>,
{
    let vec: Vec<String> = Deserialize::deserialize(deserializer)?;
    vec.into_iter()
        .map(|s| {
            let decoded = hex::decode(s.trim_start_matches("0x"))
                .map_err(|err| de::Error::custom(format!("Failed to decode hex string: {err}")))?;

            let array: [u8; 32] = decoded
                .try_into()
                .map_err(|_| de::Error::custom("Failed to convert to a 32-byte array"))?;

            Ok(B256::from(array))
        })
        .collect()
}
