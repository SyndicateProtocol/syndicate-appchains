/**

Generated by the following Solidity interface...
```solidity
interface AllowlistMetafillerStorageAddresses {
    function IS_SCRIPT() external view returns (bool);
    function metafillerStorage() external view returns (address);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "metafillerStorage",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract MetafillerStorage"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod AllowlistMetafillerStorageAddresses {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f80fd5b506104f48061002d5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063847a31fb14610043578063c04062261461007a578063f8ccbf4714610084575b5f80fd5b600c5461005d90630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100826100a7565b005b600c546100979062010000900460ff1681565b6040519015158152602001610071565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610101575f80fd5b505af1158015610113573d5f803e3d5ffd5b505060405163350d56bf60e01b815260206004820152601a60248201527f4d45544146494c4c45525f53544f524147455f4144445245535300000000000060448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa158015610194573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101b89190610466565b600c80546301000000600160b81b03191663010000006001600160a01b038416021790556040805161014081018252735f008726c9584810fb4c6e7b794e7ea5ac79c1c68152736a5462609febcd374cb72385c2543e9cb833da1c602082015273c68dfaa38e19f4fec8356c9ea9a0362256fdc37c918101919091527386662598a5477cec9c0bb110b75a1c0589f8cf7b606082015273dc2305cce62d17c777c4752134a68b65f2a41f1d608082015273046217776ce34afbb59859eba0f5957e39c3ddf060a0820152732909c162338500ec4d6c02944a0eda66569a42bd60c0820152733ce840dea371b4849e250f0637994bad3393979d60e082015273fa9dcec1c6103dd9206ea251ebb8a9f0a7e698bf61010082015273560bdee5c0392e9061e48b014222a3a12e4871426101208201529091505f5b600a8110156103f157600c5460408051633b21d88760e21b8152905163010000009092046001600160a01b031691632f2ff15d91839163ec87621c916004808201926020929091908290030181865afa158015610350573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103749190610493565b8484600a8110610386576103866104aa565b60200201516040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044015f604051808303815f87803b1580156103cf575f80fd5b505af11580156103e1573d5f803e3d5ffd5b5050600190920191506102f19050565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561044c575f80fd5b505af115801561045e573d5f803e3d5ffd5b505050505050565b5f60208284031215610476575f80fd5b81516001600160a01b038116811461048c575f80fd5b9392505050565b5f602082840312156104a3575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffdfea264697066735822122060a7cc951b978b793b81757700a0e36b86e126b2c1bfbc4066bc065a1f0b91ff64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW_\x80\xFD[Pa\x04\xF4\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x84z1\xFB\x14a\0CW\x80c\xC0@b&\x14a\0zW\x80c\xF8\xCC\xBFG\x14a\0\x84W[_\x80\xFD[`\x0CTa\0]\x90c\x01\0\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x82a\0\xA7V[\0[`\x0CTa\0\x97\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0qV[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x01W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x13W=_\x80>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FMETAFILLER_STORAGE_ADDRESS\0\0\0\0\0\0`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x94W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xB8\x91\x90a\x04fV[`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16c\x01\0\0\0`\x01`\x01`\xA0\x1B\x03\x84\x16\x02\x17\x90U`@\x80Qa\x01@\x81\x01\x82Rs_\0\x87&\xC9XH\x10\xFBLn{yN~\xA5\xACy\xC1\xC6\x81RsjTb`\x9F\xEB\xCD7L\xB7#\x85\xC2T>\x9C\xB83\xDA\x1C` \x82\x01Rs\xC6\x8D\xFA\xA3\x8E\x19\xF4\xFE\xC85l\x9E\xA9\xA06\"V\xFD\xC3|\x91\x81\x01\x91\x90\x91Rs\x86f%\x98\xA5G|\xEC\x9C\x0B\xB1\x10\xB7Z\x1C\x05\x89\xF8\xCF{``\x82\x01Rs\xDC#\x05\xCC\xE6-\x17\xC7w\xC4u!4\xA6\x8Be\xF2\xA4\x1F\x1D`\x80\x82\x01Rs\x04b\x17wl\xE3J\xFB\xB5\x98Y\xEB\xA0\xF5\x95~9\xC3\xDD\xF0`\xA0\x82\x01Rs)\t\xC1b3\x85\0\xECMl\x02\x94J\x0E\xDAfV\x9AB\xBD`\xC0\x82\x01Rs<\xE8@\xDE\xA3q\xB4\x84\x9E%\x0F\x067\x99K\xAD3\x93\x97\x9D`\xE0\x82\x01Rs\xFA\x9D\xCE\xC1\xC6\x10=\xD9 n\xA2Q\xEB\xB8\xA9\xF0\xA7\xE6\x98\xBFa\x01\0\x82\x01RsV\x0B\xDE\xE5\xC09.\x90a\xE4\x8B\x01B\"\xA3\xA1.HqBa\x01 \x82\x01R\x90\x91P_[`\n\x81\x10\x15a\x03\xF1W`\x0CT`@\x80Qc;!\xD8\x87`\xE2\x1B\x81R\x90Qc\x01\0\0\0\x90\x92\x04`\x01`\x01`\xA0\x1B\x03\x16\x91c//\xF1]\x91\x83\x91c\xEC\x87b\x1C\x91`\x04\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x03PW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03t\x91\x90a\x04\x93V[\x84\x84`\n\x81\x10a\x03\x86Wa\x03\x86a\x04\xAAV[` \x02\x01Q`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x04\x81\x01\x92\x90\x92R`\x01`\x01`\xA0\x1B\x03\x16`$\x82\x01R`D\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xCFW_\x80\xFD[PZ\xF1\x15\x80\x15a\x03\xE1W=_\x80>=_\xFD[PP`\x01\x90\x92\x01\x91Pa\x02\xF1\x90PV[P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04LW_\x80\xFD[PZ\xF1\x15\x80\x15a\x04^W=_\x80>=_\xFD[PPPPPPV[_` \x82\x84\x03\x12\x15a\x04vW_\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x04\x8CW_\x80\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x04\xA3W_\x80\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 `\xA7\xCC\x95\x1B\x97\x8By;\x81uw\0\xA0\xE3k\x86\xE1&\xB2\xC1\xBF\xBC@f\xBC\x06Z\x1F\x0B\x91\xFFdsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063847a31fb14610043578063c04062261461007a578063f8ccbf4714610084575b5f80fd5b600c5461005d90630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100826100a7565b005b600c546100979062010000900460ff1681565b6040519015158152602001610071565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b0316637fb5297f6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610101575f80fd5b505af1158015610113573d5f803e3d5ffd5b505060405163350d56bf60e01b815260206004820152601a60248201527f4d45544146494c4c45525f53544f524147455f4144445245535300000000000060448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa158015610194573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101b89190610466565b600c80546301000000600160b81b03191663010000006001600160a01b038416021790556040805161014081018252735f008726c9584810fb4c6e7b794e7ea5ac79c1c68152736a5462609febcd374cb72385c2543e9cb833da1c602082015273c68dfaa38e19f4fec8356c9ea9a0362256fdc37c918101919091527386662598a5477cec9c0bb110b75a1c0589f8cf7b606082015273dc2305cce62d17c777c4752134a68b65f2a41f1d608082015273046217776ce34afbb59859eba0f5957e39c3ddf060a0820152732909c162338500ec4d6c02944a0eda66569a42bd60c0820152733ce840dea371b4849e250f0637994bad3393979d60e082015273fa9dcec1c6103dd9206ea251ebb8a9f0a7e698bf61010082015273560bdee5c0392e9061e48b014222a3a12e4871426101208201529091505f5b600a8110156103f157600c5460408051633b21d88760e21b8152905163010000009092046001600160a01b031691632f2ff15d91839163ec87621c916004808201926020929091908290030181865afa158015610350573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103749190610493565b8484600a8110610386576103866104aa565b60200201516040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044015f604051808303815f87803b1580156103cf575f80fd5b505af11580156103e1573d5f803e3d5ffd5b5050600190920191506102f19050565b507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561044c575f80fd5b505af115801561045e573d5f803e3d5ffd5b505050505050565b5f60208284031215610476575f80fd5b81516001600160a01b038116811461048c575f80fd5b9392505050565b5f602082840312156104a3575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffdfea264697066735822122060a7cc951b978b793b81757700a0e36b86e126b2c1bfbc4066bc065a1f0b91ff64736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x84z1\xFB\x14a\0CW\x80c\xC0@b&\x14a\0zW\x80c\xF8\xCC\xBFG\x14a\0\x84W[_\x80\xFD[`\x0CTa\0]\x90c\x01\0\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\x82a\0\xA7V[\0[`\x0CTa\0\x97\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0qV[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\x7F\xB5)\x7F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x01W_\x80\xFD[PZ\xF1\x15\x80\x15a\x01\x13W=_\x80>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FMETAFILLER_STORAGE_ADDRESS\0\0\0\0\0\0`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x94W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xB8\x91\x90a\x04fV[`\x0C\x80Tc\x01\0\0\0`\x01`\xB8\x1B\x03\x19\x16c\x01\0\0\0`\x01`\x01`\xA0\x1B\x03\x84\x16\x02\x17\x90U`@\x80Qa\x01@\x81\x01\x82Rs_\0\x87&\xC9XH\x10\xFBLn{yN~\xA5\xACy\xC1\xC6\x81RsjTb`\x9F\xEB\xCD7L\xB7#\x85\xC2T>\x9C\xB83\xDA\x1C` \x82\x01Rs\xC6\x8D\xFA\xA3\x8E\x19\xF4\xFE\xC85l\x9E\xA9\xA06\"V\xFD\xC3|\x91\x81\x01\x91\x90\x91Rs\x86f%\x98\xA5G|\xEC\x9C\x0B\xB1\x10\xB7Z\x1C\x05\x89\xF8\xCF{``\x82\x01Rs\xDC#\x05\xCC\xE6-\x17\xC7w\xC4u!4\xA6\x8Be\xF2\xA4\x1F\x1D`\x80\x82\x01Rs\x04b\x17wl\xE3J\xFB\xB5\x98Y\xEB\xA0\xF5\x95~9\xC3\xDD\xF0`\xA0\x82\x01Rs)\t\xC1b3\x85\0\xECMl\x02\x94J\x0E\xDAfV\x9AB\xBD`\xC0\x82\x01Rs<\xE8@\xDE\xA3q\xB4\x84\x9E%\x0F\x067\x99K\xAD3\x93\x97\x9D`\xE0\x82\x01Rs\xFA\x9D\xCE\xC1\xC6\x10=\xD9 n\xA2Q\xEB\xB8\xA9\xF0\xA7\xE6\x98\xBFa\x01\0\x82\x01RsV\x0B\xDE\xE5\xC09.\x90a\xE4\x8B\x01B\"\xA3\xA1.HqBa\x01 \x82\x01R\x90\x91P_[`\n\x81\x10\x15a\x03\xF1W`\x0CT`@\x80Qc;!\xD8\x87`\xE2\x1B\x81R\x90Qc\x01\0\0\0\x90\x92\x04`\x01`\x01`\xA0\x1B\x03\x16\x91c//\xF1]\x91\x83\x91c\xEC\x87b\x1C\x91`\x04\x80\x82\x01\x92` \x92\x90\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x03PW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03t\x91\x90a\x04\x93V[\x84\x84`\n\x81\x10a\x03\x86Wa\x03\x86a\x04\xAAV[` \x02\x01Q`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x04\x81\x01\x92\x90\x92R`\x01`\x01`\xA0\x1B\x03\x16`$\x82\x01R`D\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xCFW_\x80\xFD[PZ\xF1\x15\x80\x15a\x03\xE1W=_\x80>=_\xFD[PP`\x01\x90\x92\x01\x91Pa\x02\xF1\x90PV[P\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04LW_\x80\xFD[PZ\xF1\x15\x80\x15a\x04^W=_\x80>=_\xFD[PPPPPPV[_` \x82\x84\x03\x12\x15a\x04vW_\x80\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x04\x8CW_\x80\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x04\xA3W_\x80\xFD[PQ\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 `\xA7\xCC\x95\x1B\x97\x8By;\x81uw\0\xA0\xE3k\x86\xE1&\xB2\xC1\xBF\xBC@f\xBC\x06Z\x1F\x0B\x91\xFFdsolcC\0\x08\x19\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `metafillerStorage()` and selector `0x847a31fb`.
```solidity
function metafillerStorage() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metafillerStorageCall {}
    ///Container type for the return parameters of the [`metafillerStorage()`](metafillerStorageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metafillerStorageReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metafillerStorageCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: metafillerStorageCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metafillerStorageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metafillerStorageReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: metafillerStorageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metafillerStorageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for metafillerStorageCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = metafillerStorageReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "metafillerStorage()";
            const SELECTOR: [u8; 4] = [132u8, 122u8, 49u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`AllowlistMetafillerStorageAddresses`](self) function calls.
    pub enum AllowlistMetafillerStorageAddressesCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        metafillerStorage(metafillerStorageCall),
        run(runCall),
    }
    #[automatically_derived]
    impl AllowlistMetafillerStorageAddressesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [132u8, 122u8, 49u8, 251u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AllowlistMetafillerStorageAddressesCalls {
        const NAME: &'static str = "AllowlistMetafillerStorageAddressesCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::metafillerStorage(_) => {
                    <metafillerStorageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AllowlistMetafillerStorageAddressesCalls>] = &[
                {
                    fn metafillerStorage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistMetafillerStorageAddressesCalls,
                    > {
                        <metafillerStorageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                AllowlistMetafillerStorageAddressesCalls::metafillerStorage,
                            )
                    }
                    metafillerStorage
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistMetafillerStorageAddressesCalls,
                    > {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistMetafillerStorageAddressesCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<
                        AllowlistMetafillerStorageAddressesCalls,
                    > {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AllowlistMetafillerStorageAddressesCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::metafillerStorage(inner) => {
                    <metafillerStorageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::metafillerStorage(inner) => {
                    <metafillerStorageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`AllowlistMetafillerStorageAddresses`](self) contract instance.

See the [wrapper's documentation](`AllowlistMetafillerStorageAddressesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        AllowlistMetafillerStorageAddressesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            AllowlistMetafillerStorageAddressesInstance<T, P, N>,
        >,
    > {
        AllowlistMetafillerStorageAddressesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AllowlistMetafillerStorageAddressesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`AllowlistMetafillerStorageAddresses`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`AllowlistMetafillerStorageAddresses`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AllowlistMetafillerStorageAddressesInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AllowlistMetafillerStorageAddressesInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`AllowlistMetafillerStorageAddresses`](self) contract instance.

See the [wrapper's documentation](`AllowlistMetafillerStorageAddressesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<
            AllowlistMetafillerStorageAddressesInstance<T, P, N>,
        > {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > AllowlistMetafillerStorageAddressesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> AllowlistMetafillerStorageAddressesInstance<T, P, N> {
            AllowlistMetafillerStorageAddressesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`metafillerStorage`] function.
        pub fn metafillerStorage(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, metafillerStorageCall, N> {
            self.call_builder(&metafillerStorageCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AllowlistMetafillerStorageAddressesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
