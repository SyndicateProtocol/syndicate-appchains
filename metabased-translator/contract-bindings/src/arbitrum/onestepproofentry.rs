/**

Generated by the following Solidity interface...
```solidity
interface OneStepProofEntry {
    type MachineStatus is uint8;
    struct ExecutionContext {
        uint256 maxInboxMessagesRead;
        address bridge;
        bytes32 initialWasmModuleRoot;
    }
    struct ExecutionState {
        GlobalState globalState;
        MachineStatus machineStatus;
    }
    struct GlobalState {
        bytes32[2] bytes32Vals;
        uint64[2] u64Vals;
    }

    constructor(address prover0_, address proverMem_, address proverMath_, address proverHostIo_);

    function getMachineHash(ExecutionState memory execState) external pure returns (bytes32);
    function getStartMachineHash(bytes32 globalStateHash, bytes32 wasmModuleRoot) external pure returns (bytes32);
    function proveOneStep(ExecutionContext memory execCtx, uint256 machineStep, bytes32 beforeHash, bytes memory proof) external view returns (bytes32 afterHash);
    function prover0() external view returns (address);
    function proverHostIo() external view returns (address);
    function proverMath() external view returns (address);
    function proverMem() external view returns (address);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "prover0_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      },
      {
        "name": "proverMem_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      },
      {
        "name": "proverMath_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      },
      {
        "name": "proverHostIo_",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getMachineHash",
    "inputs": [
      {
        "name": "execState",
        "type": "tuple",
        "internalType": "struct ExecutionState",
        "components": [
          {
            "name": "globalState",
            "type": "tuple",
            "internalType": "struct GlobalState",
            "components": [
              {
                "name": "bytes32Vals",
                "type": "bytes32[2]",
                "internalType": "bytes32[2]"
              },
              {
                "name": "u64Vals",
                "type": "uint64[2]",
                "internalType": "uint64[2]"
              }
            ]
          },
          {
            "name": "machineStatus",
            "type": "uint8",
            "internalType": "enum MachineStatus"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "getStartMachineHash",
    "inputs": [
      {
        "name": "globalStateHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "wasmModuleRoot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "proveOneStep",
    "inputs": [
      {
        "name": "execCtx",
        "type": "tuple",
        "internalType": "struct ExecutionContext",
        "components": [
          {
            "name": "maxInboxMessagesRead",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "bridge",
            "type": "address",
            "internalType": "contract IBridge"
          },
          {
            "name": "initialWasmModuleRoot",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "machineStep",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "beforeHash",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "proof",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "afterHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "prover0",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proverHostIo",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proverMath",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proverMem",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IOneStepProver"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod OneStepProofEntry {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060405161341b38038061341b83398101604081905261002e9161009b565b5f80546001600160a01b039586166001600160a01b03199182161790915560018054948616948216949094179093556002805492851692841692909217909155600380549190931691161790556100ec565b80516001600160a01b0381168114610096575f80fd5b919050565b5f805f80608085870312156100ae575f80fd5b6100b785610080565b93506100c560208601610080565b92506100d360408601610080565b91506100e160608601610080565b905092959194509250565b613322806100f95f395ff3fe608060405234801561000f575f80fd5b506004361061007a575f3560e01c80635f52fd7c116100585780635f52fd7c146100e157806366e5d9c3146100f4578063b5112fd214610107578063c39619c41461011a575f80fd5b806304997be41461007e5780631f128bc0146100a457806330a5509f146100cf575b5f80fd5b61009161008c366004612692565b61012d565b6040519081526020015b60405180910390f35b6001546100b7906001600160a01b031681565b6040516001600160a01b03909116815260200161009b565b5f546100b7906001600160a01b031681565b6003546100b7906001600160a01b031681565b6002546100b7906001600160a01b031681565b6100916101153660046126b2565b610339565b610091610128366004612745565b610aeb565b604080516003808252608082019092525f91829190816020015b604080518082019091525f80825260208201528152602001906001900390816101475750506040805180820182525f808252602091820181905282518084019093526004835290820152909150815f815181106101a6576101a6612769565b60200260200101819052506101e65f604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b816001815181106101f9576101f9612769565b60200260200101819052506102395f604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b8160028151811061024c5761024c612769565b60209081029190910181019190915260408051808301825283815281518083019092528082525f9282019290925261029a60408051606080820183529181019182529081525f602082015290565b604080518082018252606081525f602080830182905283518085019094528301525f1982529060408051610180810182525f80825260208201879052918101839052606081018590526080810184905260a0810183905260c081018b905260e0810182905261010081018290526101208101919091525f19610140820152610160810189905261032981610c3d565b9750505050505050505b92915050565b5f610342612574565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516020810190915260608152604080518082019091525f80825260208201525f6103b9888883610e87565b9095509050886103c886610c3d565b1461041a5760405162461bcd60e51b815260206004820152601360248201527f4d414348494e455f4245464f52455f484153480000000000000000000000000060448201526064015b60405180910390fd5b5f8551600281111561042e5761042e61277d565b146105155761043b61264f565b6104468989846110f6565b60c088015190935090915061045a826111d0565b146104a75760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f5354415445000000000000000000000000000000006044820152606401610411565b6001865160028111156104bc576104bc61277d565b1480156104c757508a155b80156104e857508b356104dc82602001515190565b67ffffffffffffffff16105b1561050c576104ff8660c001518d6040013561012d565b9650505050505050610ae2565b6104ff86610c3d565b650800000000006105278b60016127a5565b03610545576002855261053985610c3d565b95505050505050610ae2565b61055088888361125f565b9094509050610560888883611361565b809250819450505084610160015161058d8660e0015163ffffffff16868661142e9092919063ffffffff16565b146105da5760405162461bcd60e51b815260206004820152600c60248201527f4d4f44554c45535f524f4f5400000000000000000000000000000000000000006044820152606401610411565b60606105f26040518060200160405280606081525090565b60408051602081019091526060815261060c8b8b86611482565b9450925061061b8b8b86611361565b9450915061062a8b8b86611361565b80955081925050505f61065f60408a610120015161064891906127cc565b63ffffffff1685856115739092919063ffffffff16565b90505f6106828a610100015163ffffffff1683856115bd9092919063ffffffff16565b9050886060015181146106d75760405162461bcd60e51b815260206004820152601260248201527f4241445f46554e4354494f4e535f524f4f5400000000000000000000000000006044820152606401610411565b8460408b61012001516106ea91906127ee565b63ffffffff168151811061070057610700612769565b60200260200101519650505050505087878290809261072193929190612810565b97509750505f8460e0015163ffffffff169050600185610120018181516107489190612837565b63ffffffff1690525081515f602861ffff83161080159061076e5750603561ffff831611155b8061078e5750603661ffff83161080159061078e5750603e61ffff831611155b8061079d575061ffff8216603f145b806107ac575061ffff82166040145b156107c357506001546001600160a01b03166109d9565b61ffff8216604514806107da575061ffff82166050145b806108085750604661ffff83161080159061080857506107fc6009604661285b565b61ffff168261ffff1611155b806108365750606761ffff831610801590610836575061082a6002606761285b565b61ffff168261ffff1611155b806108565750606a61ffff8316108015906108565750607861ffff831611155b806108845750605161ffff83161080159061088457506108786009605161285b565b61ffff168261ffff1611155b806108b25750607961ffff8316108015906108b257506108a66002607961285b565b61ffff168261ffff1611155b806108d25750607c61ffff8316108015906108d25750608a61ffff831611155b806108e1575061ffff821660a7145b806108fe575061ffff821660ac14806108fe575061ffff821660ad145b8061091e575060c061ffff83161080159061091e575060c461ffff831611155b8061093e575060bc61ffff83161080159061093e575060bf61ffff831611155b1561095557506002546001600160a01b03166109d9565b61801061ffff831610801590610971575061801361ffff831611155b80610993575061802061ffff831610801590610993575061802461ffff831611155b806109b5575061803061ffff8316108015906109b5575061803261ffff831611155b156109cc57506003546001600160a01b03166109d9565b505f546001600160a01b03165b806001600160a01b031663a92cb5018e8989888f8f6040518763ffffffff1660e01b8152600401610a0f969594939291906129be565b5f60405180830381865afa158015610a29573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a50919081019061300a565b90975095505f61ffff83166180231480610a6f575061ffff8316618024145b1590508015610a8a57610a8386858961142e565b6101608901525b600288516002811115610a9f57610a9f61277d565b148015610ab257506101408801515f1914155b15610ace57610ac08861164d565b610ac9886116cf565b505f88525b610ad788610c3d565b985050505050505050505b95945050505050565b5f6001610afe60a084016080850161315e565b6002811115610b0f57610b0f61277d565b03610b7d57610b2b610b2636849003840184613179565b6111d0565b6040517f4d616368696e652066696e69736865643a000000000000000000000000000000602082015260318101919091526051015b604051602081830303815290604052805190602001209050919050565b6002610b8f60a084016080850161315e565b6002811115610ba057610ba061277d565b03610bf057610bb7610b2636849003840184613179565b6040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610b60565b60405162461bcd60e51b815260206004820152601260248201527f4241445f4d414348494e455f53544154555300000000000000000000000000006044820152606401610411565b919050565b5f8082516002811115610c5257610c5261277d565b03610d8f575f610c7e610c6884602001516116fb565b610140850151604086015191905f191415611787565b90505f610ca7610c9185608001516118f0565b61014086015160a087015191905f191415611787565b90505f82610cb886606001516116fb565b60c087015160e0808901516101008a01516101208b01516101408c01516101608d01516040517f4d616368696e652072756e6e696e673a00000000000000000000000000000000602082015260308101999099526050890197909752607088018a905260908801959095527fffffffff0000000000000000000000000000000000000000000000000000000092841b831660b088015290831b821660b487015290911b1660b884015260bc83015260dc82015260fc0160408051601f19818403018152919052805160209091012095945050505050565b600182516002811115610da457610da461277d565b03610de75760c08201516040517f4d616368696e652066696e69736865643a00000000000000000000000000000060208201526031810191909152605101610b60565b600282516002811115610dfc57610dfc61277d565b03610e3f5760c08201516040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610b60565b60405162461bcd60e51b815260206004820152600f60248201527f4241445f4d4143485f53544154555300000000000000000000000000000000006044820152606401610411565b610e8f612574565b815f80610e9d878785611989565b9350905060ff81165f03610eb3575f9150610f23565b8060ff16600103610ec75760019150610f23565b8060ff16600203610edb5760029150610f23565b60405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f4d4143485f535441545553000000000000000000000000006044820152606401610411565b5060408051606080820183529181019182529081525f602082015260408051606080820183529181019182529081525f6020820152604080518082019091525f808252602082015260408051808201909152606081525f6020820152604080518082019091525f8082526020820152610f9d8b8b896119be565b97509450610fac8b8b89611ac1565b97509250610fbb8b8b896119be565b97509350610fca8b8b89611b14565b97509150610fd98b8b89611ac1565b8098508192505050604051806101800160405280876002811115610fff57610fff61277d565b8152602081019690965260408601939093526060850193909352608084015260a08301919091525f60c0830181905260e083018190526101008301819052610120830181905261014083018190526101609092019190915292506110669050858583611c98565b60c0840191909152905061107b858583611cb3565b63ffffffff90911660e08401529050611095858583611cb3565b63ffffffff90911661010084015290506110b0858583611cb3565b63ffffffff90911661012084015290506110cb858583611c98565b61014084019190915290506110e1858583611c98565b61016084019190915291959194509092505050565b6110fe61264f565b81611107612674565b61110f612674565b5f5b600260ff8216101561115957611128888886611c98565b848360ff166002811061113d5761113d612769565b602002019190915293508061115181613235565b915050611111565b505f5b600260ff821610156111b357611173888886611d0b565b838360ff166002811061118857611188612769565b67ffffffffffffffff90931660209390930201919091529350806111ab81613235565b91505061115c565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d01610b60565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516060810182525f808252602082018190529181018290528391905f805f806112d58b8b89611c98565b975095506112e48b8b89611d5e565b975094506112f38b8b89611c98565b975093506113028b8b89611c98565b975092506113118b8b89611c98565b975091506113208b8b89611cb3565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b604080516020810190915260608152815f61137d868684611989565b925090505f60ff821667ffffffffffffffff81111561139e5761139e612755565b6040519080825280602002602001820160405280156113c7578160200160208202803683370190505b5090505f5b8260ff168160ff161015611412576113e5888886611c98565b838360ff16815181106113fa576113fa612769565b602090810291909101019190915293506001016113cc565b5060405180602001604052808281525093505050935093915050565b5f611478848461143d85611dd8565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a00000000000000000000000000815250611e80565b90505b9392505050565b6060815f611491868684611989565b9250905060ff811667ffffffffffffffff8111156114b1576114b1612755565b6040519080825280602002602001820160405280156114f557816020015b604080518082019091525f80825260208201528152602001906001900390816114cf5790505b5092505f5b8160ff16811015611569575f80611512898987611f92565b95509150611521898987611fdf565b809650819250505060405180604001604052808361ffff1681526020018281525086848151811061155457611554612769565b602090810291909101015250506001016114fa565b5050935093915050565b5f611478848461158285612028565b6040518060400160405280601881526020017f496e737472756374696f6e206d65726b6c6520747265653a0000000000000000815250611e80565b6040517f46756e6374696f6e3a00000000000000000000000000000000000000000000006020820152602981018290525f908190604901604051602081830303815290604052805190602001209050610ae28585836040518060400160405280601581526020017f46756e6374696f6e206d65726b6c6520747265653a0000000000000000000000815250611e80565b60408101515160a0820151515f1981148061166857505f1982145b1561167557505060029052565b61168283608001516118f0565b60a0840151526020830151611696906116fb565b60408401515260808301516116b19082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f6116e1828361014001515f1c61220d565b6116ec57505f919050565b505f1961014090910152600190565b6020810151815151515f5b818110156117805783516117239061171e908361224d565b612284565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f1981840301815291905280516020909101209250600101611706565b5050919050565b5f600183016117d85760405162461bcd60e51b815260206004820152601960248201527f4d554c5449535441434b5f4e4f535441434b5f414354495645000000000000006044820152606401610411565b811561189e57835160010161182f5760405162461bcd60e51b815260206004820152601760248201527f4d554c5449535441434b5f4e4f535441434b5f4d41494e0000000000000000006044820152606401610411565b83516020808601516040516118819392879291017f6d756c7469737461636b3a0000000000000000000000000000000000000000008152600b810193909352602b830191909152604b820152606b0190565b60405160208183030381529060405280519060200120905061147b565b83516020808601516040517f6d756c7469737461636b3a00000000000000000000000000000000000000000092810192909252602b8201869052604b820192909252606b810191909152608b01611881565b60208101515f5b82515181101561198357611926835f0151828151811061191957611919612769565b602002602001015161229f565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f19818403018152919052805160209091012091506001016118f7565b50919050565b5f8184848281811061199d5761199d612769565b919091013560f81c92508190506119b381613253565b915050935093915050565b60408051606080820183529181019182529081525f6020820152815f6119e5868684611c98565b925090505f6119f5878785611fdf565b935090505f8167ffffffffffffffff811115611a1357611a13612755565b604051908082528060200260200182016040528015611a5757816020015b604080518082019091525f8082526020820152815260200190600190039081611a315790505b5090505f5b8151811015611a9a57611a70898987612336565b838381518110611a8257611a82612769565b60209081029190910101919091529450600101611a5c565b50604080516060810182529081019182529081526020810192909252509590945092505050565b604080518082019091525f8082526020820152815f611ae1868684611c98565b925090505f611af1878785611c98565b604080518082019091529384526020840191909152919791965090945050505050565b60408051808201909152606081525f6020820152815f611b35868684611c98565b925090506060868684818110611b4d57611b4d612769565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050611c105782611b8481613253565b604080516001808252818301909252919550909150816020015b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f19909201910181611b9e579050509050611bea87878561243e565b825f81518110611bfc57611bfc612769565b602002602001018195508290525050611c77565b82611c1a81613253565b604080515f80825260208201909252919550909150611c73565b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f19909201910181611c345790505b5090505b60405180604001604052808281526020018381525093505050935093915050565b5f8181611ca6868684611fdf565b9097909650945050505050565b5f81815b6004811015611d025760088363ffffffff16901b9250858583818110611cdf57611cdf612769565b919091013560f81c93909317925081611cf781613253565b925050600101611cb7565b50935093915050565b5f81815b6008811015611d025760088367ffffffffffffffff16901b9250858583818110611d3b57611d3b612769565b919091013560f81c93909317925081611d5381613253565b925050600101611d0f565b604080516060810182525f8082526020820181905291810191909152815f8080611d89888886611d0b565b94509250611d98888886611d0b565b94509150611da7888886611c98565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f0151611dea83602001516124f3565b6040808501516060860151608087015160a08801519351610b60969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b815f5b855151811015611f3b57846001165f03611ee5578282875f01518381518110611eae57611eae612769565b6020026020010151604051602001611ec89392919061326b565b604051602081830303815290604052805190602001209150611f2f565b82865f01518281518110611efb57611efb612769565b602002602001015183604051602001611f169392919061326b565b6040516020818303038152906040528051906020012091505b600194851c9401611e83565b508315611f8a5760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f525400000000000000000000000000000000006044820152606401610411565b949350505050565b5f81815b6002811015611d025760088361ffff16901b9250858583818110611fbc57611fbc612769565b919091013560f81c93909317925081611fd481613253565b925050600101611f96565b5f81815b6020811015611d0257600883901b925085858381811061200557612005612769565b919091013560f81c9390931792508161201d81613253565b925050600101611fe3565b5f8082516022612038919061328a565b61204390600e6127a5565b67ffffffffffffffff81111561205b5761205b612755565b6040519080825280601f01601f191660200182016040528015612085576020820181803683370190505b5090507f496e737472756374696f6e733a0000000000000000000000000000000000000060208201525f600d9050835160f81b8282815181106120ca576120ca612769565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053508061210281613253565b9150505f5b84518110156121fd575f85828151811061212357612123612769565b602002602001015190506008815f015161ffff16901c60f81b84848151811061214e5761214e612769565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805160f81b8461218d8560016127a5565b8151811061219d5761219d612769565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053506121d66002846127a5565b60208083015186830182018190529194506121f190856127a5565b93505050600101612107565b5050805160209091012092915050565b5f606082901c1561221f57505f610333565b5063ffffffff818116610120840152602082901c811661010084015260409190911c1660e090910152600190565b604080518082019091525f8082526020820152825180518390811061227457612274612769565b6020026020010151905092915050565b5f815f01518260200151604051602001610b609291906132a1565b5f6122ac825f0151612284565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b9091166070820152607401610b60565b604080518082019091525f8082526020820152815f85858381811061235d5761235d612769565b919091013560f81c915082905061237381613253565b92505061237e600690565b600681111561238f5761238f61277d565b60ff168160ff1611156123e45760405162461bcd60e51b815260206004820152600e60248201527f4241445f56414c55455f545950450000000000000000000000000000000000006044820152606401610411565b5f6123f0878785611fdf565b809450819250505060405180604001604052808360ff1660068111156124185761241861277d565b60068111156124295761242961277d565b81526020018281525093505050935093915050565b6040805160c0810182525f6080820181815260a08301829052825260208083018290528284018290526060830182905283518085019094528184528301529082905f805f61248d898987612336565b9550935061249c898987611c98565b955092506124ab898987611cb3565b955091506124ba898987611cb3565b60408051608081018252968752602087019590955263ffffffff9384169486019490945290911660608401525090969095509350505050565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f90605701610b60565b604080516101808101909152805f81526020016125a760408051606080820183529181019182529081525f602082015290565b81526040805180820182525f808252602080830191909152830152016125e360408051606080820183529181019182529081525f602082015290565b81526020016126076040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b6040518060400160405280612662612674565b815260200161266f612674565b905290565b60405180604001604052806002906020820280368337509192915050565b5f80604083850312156126a3575f80fd5b50508035926020909101359150565b5f805f805f85870360c08112156126c7575f80fd5b60608112156126d4575f80fd5b50859450606086013593506080860135925060a086013567ffffffffffffffff80821115612700575f80fd5b818801915088601f830112612713575f80fd5b813581811115612721575f80fd5b896020828501011115612732575f80fd5b9699959850939650602001949392505050565b5f60a08284031215611983575f80fd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561033357610333612791565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff808416806127e2576127e26127b8565b92169190910492915050565b5f63ffffffff80841680612804576128046127b8565b92169190910692915050565b5f808585111561281e575f80fd5b8386111561282a575f80fd5b5050820193919092039150565b63ffffffff81811683821601908082111561285457612854612791565b5092915050565b61ffff81811683821601908082111561285457612854612791565b600381106128865761288661277d565b9052565b80516007811061289c5761289c61277d565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b808410156128f8576128e482865161288a565b9382019360019390930192908501906128d1565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b8281101561297b57845161294785825161288a565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a090930192600101612932565b505050602086015160208801528094505050505092915050565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b5f6101e08835835260208901356001600160a01b0381168082146129e0575f80fd5b806020860152505060408901356040840152806060840152612a058184018951612876565b5060208701516101c080610200850152612a236103a08501836128a9565b60408a0151805161022087015260208101516102408701529092505060608901517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe208086850301610260870152612a7a84836128a9565b935060808b01519150808685030161028087015250612a998382612911565b92505060a0890151612ab96102a086018280518252602090810151910152565b5060c08901516102e085015260e089015163ffffffff81166103008601525061010089015163ffffffff81166103208601525061012089015163ffffffff811661034086015250610140890151610360850152610160890151610380850152612b85608085018980518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b865161ffff1661018085015260208701516101a085015283820390840152612bae818587612995565b9998505050505050505050565b6040805190810167ffffffffffffffff81118282101715612bde57612bde612755565b60405290565b6040516020810167ffffffffffffffff81118282101715612bde57612bde612755565b6040516080810167ffffffffffffffff81118282101715612bde57612bde612755565b60405160c0810167ffffffffffffffff81118282101715612bde57612bde612755565b6040516060810167ffffffffffffffff81118282101715612bde57612bde612755565b604051610180810167ffffffffffffffff81118282101715612bde57612bde612755565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cbd57612cbd612755565b604052919050565b60038110612cd1575f80fd5b50565b8051610c3881612cc5565b5f67ffffffffffffffff821115612cf857612cf8612755565b5060051b60200190565b5f60408284031215612d12575f80fd5b612d1a612bbb565b9050815160078110612d2a575f80fd5b808252506020820151602082015292915050565b5f6040808385031215612d4f575f80fd5b612d57612bbb565b9150825167ffffffffffffffff80821115612d70575f80fd5b81850191506020808388031215612d85575f80fd5b612d8d612be4565b835183811115612d9b575f80fd5b80850194505087601f850112612daf575f80fd5b83519250612dc4612dbf84612cdf565b612c94565b83815260069390931b84018201928281019089851115612de2575f80fd5b948301945b84861015612e0857612df98a87612d02565b82529486019490830190612de7565b8252508552948501519484019490945250909392505050565b5f60408284031215612e31575f80fd5b612e39612bbb565b9050815181526020820151602082015292915050565b805163ffffffff81168114610c38575f80fd5b5f6040808385031215612e73575f80fd5b612e7b612bbb565b9150825167ffffffffffffffff811115612e93575f80fd5b8301601f81018513612ea3575f80fd5b80516020612eb3612dbf83612cdf565b82815260a09283028401820192828201919089851115612ed1575f80fd5b948301945b84861015612f385780868b031215612eec575f80fd5b612ef4612c07565b612efe8b88612d02565b815287870151858201526060612f15818901612e4f565b89830152612f2560808901612e4f565b9082015283529485019491830191612ed6565b50808752505080860151818601525050505092915050565b67ffffffffffffffff81168114612cd1575f80fd5b5f818303610100811215612f77575f80fd5b612f7f612c2a565b9150825182526060601f1982011215612f96575f80fd5b50612f9f612c4d565b6020830151612fad81612f50565b81526040830151612fbd81612f50565b8060208301525060608301516040820152806020830152506080820151604082015260a0820151606082015260c08201516080820152612fff60e08301612e4f565b60a082015292915050565b5f8061012080848603121561301d575f80fd5b835167ffffffffffffffff80821115613034575f80fd5b908501906101c08288031215613048575f80fd5b613050612c70565b61305983612cd4565b815260208301518281111561306c575f80fd5b61307889828601612d3e565b60208301525061308b8860408501612e21565b60408201526080830151828111156130a1575f80fd5b6130ad89828601612d3e565b60608301525060a0830151828111156130c4575f80fd5b6130d089828601612e62565b6080830152506130e38860c08501612e21565b60a082015261010091508183015160c0820152613101848401612e4f565b60e0820152610140613114818501612e4f565b838301526101609250613128838501612e4f565b8583015261018084015181830152506101a083015182820152809550505050506131558460208501612f65565b90509250929050565b5f6020828403121561316e575f80fd5b813561147b81612cc5565b5f60808284031215613189575f80fd5b613191612bbb565b83601f84011261319f575f80fd5b6131a7612bbb565b8060408501868111156131b8575f80fd5b855b818110156131d25780358452602093840193016131ba565b5081845286605f8701126131e4575f80fd5b6131ec612bbb565b92508291506080860187811115613201575f80fd5b8082101561322657813561321481612f50565b84526020938401939190910190613201565b50506020830152509392505050565b5f60ff821660ff810361324a5761324a612791565b60010192915050565b5f5f19820361326457613264612791565b5060010190565b5f84518060208701845e91909101928352506020820152604001919050565b808202811582820484141761033357610333612791565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f600784106132d5576132d561277d565b5060f89290921b600683015260078201526027019056fea2646970667358221220869b18e3da24d924c38028bec576181bd63239a83640330cd31cdb7986268e3364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa4\x1B8\x03\x80a4\x1B\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\x9BV[_\x80T`\x01`\x01`\xA0\x1B\x03\x95\x86\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x01\x80T\x94\x86\x16\x94\x82\x16\x94\x90\x94\x17\x90\x93U`\x02\x80T\x92\x85\x16\x92\x84\x16\x92\x90\x92\x17\x90\x91U`\x03\x80T\x91\x90\x93\x16\x91\x16\x17\x90Ua\0\xECV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\x96W_\x80\xFD[\x91\x90PV[_\x80_\x80`\x80\x85\x87\x03\x12\x15a\0\xAEW_\x80\xFD[a\0\xB7\x85a\0\x80V[\x93Pa\0\xC5` \x86\x01a\0\x80V[\x92Pa\0\xD3`@\x86\x01a\0\x80V[\x91Pa\0\xE1``\x86\x01a\0\x80V[\x90P\x92\x95\x91\x94P\x92PV[a3\"\x80a\0\xF9_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c_R\xFD|\x11a\0XW\x80c_R\xFD|\x14a\0\xE1W\x80cf\xE5\xD9\xC3\x14a\0\xF4W\x80c\xB5\x11/\xD2\x14a\x01\x07W\x80c\xC3\x96\x19\xC4\x14a\x01\x1AW_\x80\xFD[\x80c\x04\x99{\xE4\x14a\0~W\x80c\x1F\x12\x8B\xC0\x14a\0\xA4W\x80c0\xA5P\x9F\x14a\0\xCFW[_\x80\xFD[a\0\x91a\0\x8C6`\x04a&\x92V[a\x01-V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x9BV[_Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x03Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x02Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\x91a\x01\x156`\x04a&\xB2V[a\x039V[a\0\x91a\x01(6`\x04a'EV[a\n\xEBV[`@\x80Q`\x03\x80\x82R`\x80\x82\x01\x90\x92R_\x91\x82\x91\x90\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01GWPP`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R`\x04\x83R\x90\x82\x01R\x90\x91P\x81_\x81Q\x81\x10a\x01\xA6Wa\x01\xA6a'iV[` \x02` \x01\x01\x81\x90RPa\x01\xE6_`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81`\x01\x81Q\x81\x10a\x01\xF9Wa\x01\xF9a'iV[` \x02` \x01\x01\x81\x90RPa\x029_`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81`\x02\x81Q\x81\x10a\x02LWa\x02La'iV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01\x91\x90\x91R`@\x80Q\x80\x83\x01\x82R\x83\x81R\x81Q\x80\x83\x01\x90\x92R\x80\x82R_\x92\x82\x01\x92\x90\x92Ra\x02\x9A`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[`@\x80Q\x80\x82\x01\x82R``\x81R_` \x80\x83\x01\x82\x90R\x83Q\x80\x85\x01\x90\x94R\x83\x01R_\x19\x82R\x90`@\x80Qa\x01\x80\x81\x01\x82R_\x80\x82R` \x82\x01\x87\x90R\x91\x81\x01\x83\x90R``\x81\x01\x85\x90R`\x80\x81\x01\x84\x90R`\xA0\x81\x01\x83\x90R`\xC0\x81\x01\x8B\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x91\x90\x91R_\x19a\x01@\x82\x01Ra\x01`\x81\x01\x89\x90Ra\x03)\x81a\x0C=V[\x97PPPPPPPP[\x92\x91PPV[_a\x03Ba%tV[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x03\xB9\x88\x88\x83a\x0E\x87V[\x90\x95P\x90P\x88a\x03\xC8\x86a\x0C=V[\x14a\x04\x1AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMACHINE_BEFORE_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x85Q`\x02\x81\x11\x15a\x04.Wa\x04.a'}V[\x14a\x05\x15Wa\x04;a&OV[a\x04F\x89\x89\x84a\x10\xF6V[`\xC0\x88\x01Q\x90\x93P\x90\x91Pa\x04Z\x82a\x11\xD0V[\x14a\x04\xA7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[`\x01\x86Q`\x02\x81\x11\x15a\x04\xBCWa\x04\xBCa'}V[\x14\x80\x15a\x04\xC7WP\x8A\x15[\x80\x15a\x04\xE8WP\x8B5a\x04\xDC\x82` \x01QQ\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10[\x15a\x05\x0CWa\x04\xFF\x86`\xC0\x01Q\x8D`@\x015a\x01-V[\x96PPPPPPPa\n\xE2V[a\x04\xFF\x86a\x0C=V[e\x08\0\0\0\0\0a\x05'\x8B`\x01a'\xA5V[\x03a\x05EW`\x02\x85Ra\x059\x85a\x0C=V[\x95PPPPPPa\n\xE2V[a\x05P\x88\x88\x83a\x12_V[\x90\x94P\x90Pa\x05`\x88\x88\x83a\x13aV[\x80\x92P\x81\x94PPP\x84a\x01`\x01Qa\x05\x8D\x86`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x86\x86a\x14.\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\xDAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FMODULES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[``a\x05\xF2`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x06\x0C\x8B\x8B\x86a\x14\x82V[\x94P\x92Pa\x06\x1B\x8B\x8B\x86a\x13aV[\x94P\x91Pa\x06*\x8B\x8B\x86a\x13aV[\x80\x95P\x81\x92PPP_a\x06_`@\x8Aa\x01 \x01Qa\x06H\x91\x90a'\xCCV[c\xFF\xFF\xFF\xFF\x16\x85\x85a\x15s\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x06\x82\x8Aa\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x83\x85a\x15\xBD\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x88``\x01Q\x81\x14a\x06\xD7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_FUNCTIONS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x84`@\x8Ba\x01 \x01Qa\x06\xEA\x91\x90a'\xEEV[c\xFF\xFF\xFF\xFF\x16\x81Q\x81\x10a\x07\0Wa\x07\0a'iV[` \x02` \x01\x01Q\x96PPPPPP\x87\x87\x82\x90\x80\x92a\x07!\x93\x92\x91\x90a(\x10V[\x97P\x97PP_\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90P`\x01\x85a\x01 \x01\x81\x81Qa\x07H\x91\x90a(7V[c\xFF\xFF\xFF\xFF\x16\x90RP\x81Q_`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07nWP`5a\xFF\xFF\x83\x16\x11\x15[\x80a\x07\x8EWP`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\x8EWP`>a\xFF\xFF\x83\x16\x11\x15[\x80a\x07\x9DWPa\xFF\xFF\x82\x16`?\x14[\x80a\x07\xACWPa\xFF\xFF\x82\x16`@\x14[\x15a\x07\xC3WP`\x01T`\x01`\x01`\xA0\x1B\x03\x16a\t\xD9V[a\xFF\xFF\x82\x16`E\x14\x80a\x07\xDAWPa\xFF\xFF\x82\x16`P\x14[\x80a\x08\x08WP`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\x08WPa\x07\xFC`\t`Fa([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x086WP`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x086WPa\x08*`\x02`ga([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x08VWP`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08VWP`xa\xFF\xFF\x83\x16\x11\x15[\x80a\x08\x84WP`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\x84WPa\x08x`\t`Qa([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x08\xB2WP`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xB2WPa\x08\xA6`\x02`ya([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x08\xD2WP`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xD2WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x80a\x08\xE1WPa\xFF\xFF\x82\x16`\xA7\x14[\x80a\x08\xFEWPa\xFF\xFF\x82\x16`\xAC\x14\x80a\x08\xFEWPa\xFF\xFF\x82\x16`\xAD\x14[\x80a\t\x1EWP`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\t\x1EWP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x80a\t>WP`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\t>WP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\tUWP`\x02T`\x01`\x01`\xA0\x1B\x03\x16a\t\xD9V[a\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\tqWPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x80a\t\x93WPa\x80 a\xFF\xFF\x83\x16\x10\x80\x15\x90a\t\x93WPa\x80$a\xFF\xFF\x83\x16\x11\x15[\x80a\t\xB5WPa\x800a\xFF\xFF\x83\x16\x10\x80\x15\x90a\t\xB5WPa\x802a\xFF\xFF\x83\x16\x11\x15[\x15a\t\xCCWP`\x03T`\x01`\x01`\xA0\x1B\x03\x16a\t\xD9V[P_T`\x01`\x01`\xA0\x1B\x03\x16[\x80`\x01`\x01`\xA0\x1B\x03\x16c\xA9,\xB5\x01\x8E\x89\x89\x88\x8F\x8F`@Q\x87c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x0F\x96\x95\x94\x93\x92\x91\x90a)\xBEV[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n)W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\nP\x91\x90\x81\x01\x90a0\nV[\x90\x97P\x95P_a\xFF\xFF\x83\x16a\x80#\x14\x80a\noWPa\xFF\xFF\x83\x16a\x80$\x14[\x15\x90P\x80\x15a\n\x8AWa\n\x83\x86\x85\x89a\x14.V[a\x01`\x89\x01R[`\x02\x88Q`\x02\x81\x11\x15a\n\x9FWa\n\x9Fa'}V[\x14\x80\x15a\n\xB2WPa\x01@\x88\x01Q_\x19\x14\x15[\x15a\n\xCEWa\n\xC0\x88a\x16MV[a\n\xC9\x88a\x16\xCFV[P_\x88R[a\n\xD7\x88a\x0C=V[\x98PPPPPPPPP[\x95\x94PPPPPV[_`\x01a\n\xFE`\xA0\x84\x01`\x80\x85\x01a1^V[`\x02\x81\x11\x15a\x0B\x0FWa\x0B\x0Fa'}V[\x03a\x0B}Wa\x0B+a\x0B&6\x84\x90\x03\x84\x01\x84a1yV[a\x11\xD0V[`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\x02a\x0B\x8F`\xA0\x84\x01`\x80\x85\x01a1^V[`\x02\x81\x11\x15a\x0B\xA0Wa\x0B\xA0a'}V[\x03a\x0B\xF0Wa\x0B\xB7a\x0B&6\x84\x90\x03\x84\x01\x84a1yV[`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\x0B`V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_MACHINE_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x91\x90PV[_\x80\x82Q`\x02\x81\x11\x15a\x0CRWa\x0CRa'}V[\x03a\r\x8FW_a\x0C~a\x0Ch\x84` \x01Qa\x16\xFBV[a\x01@\x85\x01Q`@\x86\x01Q\x91\x90_\x19\x14\x15a\x17\x87V[\x90P_a\x0C\xA7a\x0C\x91\x85`\x80\x01Qa\x18\xF0V[a\x01@\x86\x01Q`\xA0\x87\x01Q\x91\x90_\x19\x14\x15a\x17\x87V[\x90P_\x82a\x0C\xB8\x86``\x01Qa\x16\xFBV[`\xC0\x87\x01Q`\xE0\x80\x89\x01Qa\x01\0\x8A\x01Qa\x01 \x8B\x01Qa\x01@\x8C\x01Qa\x01`\x8D\x01Q`@Q\x7FMachine running:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x99\x90\x99R`P\x89\x01\x97\x90\x97R`p\x88\x01\x8A\x90R`\x90\x88\x01\x95\x90\x95R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x84\x1B\x83\x16`\xB0\x88\x01R\x90\x83\x1B\x82\x16`\xB4\x87\x01R\x90\x91\x1B\x16`\xB8\x84\x01R`\xBC\x83\x01R`\xDC\x82\x01R`\xFC\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x95\x94PPPPPV[`\x01\x82Q`\x02\x81\x11\x15a\r\xA4Wa\r\xA4a'}V[\x03a\r\xE7W`\xC0\x82\x01Q`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01a\x0B`V[`\x02\x82Q`\x02\x81\x11\x15a\r\xFCWa\r\xFCa'}V[\x03a\x0E?W`\xC0\x82\x01Q`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\x0B`V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[a\x0E\x8Fa%tV[\x81_\x80a\x0E\x9D\x87\x87\x85a\x19\x89V[\x93P\x90P`\xFF\x81\x16_\x03a\x0E\xB3W_\x91Pa\x0F#V[\x80`\xFF\x16`\x01\x03a\x0E\xC7W`\x01\x91Pa\x0F#V[\x80`\xFF\x16`\x02\x03a\x0E\xDBW`\x02\x91Pa\x0F#V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[P`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x0F\x9D\x8B\x8B\x89a\x19\xBEV[\x97P\x94Pa\x0F\xAC\x8B\x8B\x89a\x1A\xC1V[\x97P\x92Pa\x0F\xBB\x8B\x8B\x89a\x19\xBEV[\x97P\x93Pa\x0F\xCA\x8B\x8B\x89a\x1B\x14V[\x97P\x91Pa\x0F\xD9\x8B\x8B\x89a\x1A\xC1V[\x80\x98P\x81\x92PPP`@Q\x80a\x01\x80\x01`@R\x80\x87`\x02\x81\x11\x15a\x0F\xFFWa\x0F\xFFa'}V[\x81R` \x81\x01\x96\x90\x96R`@\x86\x01\x93\x90\x93R``\x85\x01\x93\x90\x93R`\x80\x84\x01R`\xA0\x83\x01\x91\x90\x91R_`\xC0\x83\x01\x81\x90R`\xE0\x83\x01\x81\x90Ra\x01\0\x83\x01\x81\x90Ra\x01 \x83\x01\x81\x90Ra\x01@\x83\x01\x81\x90Ra\x01`\x90\x92\x01\x91\x90\x91R\x92Pa\x10f\x90P\x85\x85\x83a\x1C\x98V[`\xC0\x84\x01\x91\x90\x91R\x90Pa\x10{\x85\x85\x83a\x1C\xB3V[c\xFF\xFF\xFF\xFF\x90\x91\x16`\xE0\x84\x01R\x90Pa\x10\x95\x85\x85\x83a\x1C\xB3V[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01\0\x84\x01R\x90Pa\x10\xB0\x85\x85\x83a\x1C\xB3V[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01 \x84\x01R\x90Pa\x10\xCB\x85\x85\x83a\x1C\x98V[a\x01@\x84\x01\x91\x90\x91R\x90Pa\x10\xE1\x85\x85\x83a\x1C\x98V[a\x01`\x84\x01\x91\x90\x91R\x91\x95\x91\x94P\x90\x92PPPV[a\x10\xFEa&OV[\x81a\x11\x07a&tV[a\x11\x0Fa&tV[_[`\x02`\xFF\x82\x16\x10\x15a\x11YWa\x11(\x88\x88\x86a\x1C\x98V[\x84\x83`\xFF\x16`\x02\x81\x10a\x11=Wa\x11=a'iV[` \x02\x01\x91\x90\x91R\x93P\x80a\x11Q\x81a25V[\x91PPa\x11\x11V[P_[`\x02`\xFF\x82\x16\x10\x15a\x11\xB3Wa\x11s\x88\x88\x86a\x1D\x0BV[\x83\x83`\xFF\x16`\x02\x81\x10a\x11\x88Wa\x11\x88a'iV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x11\xAB\x81a25V[\x91PPa\x11\\V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01a\x0B`V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90_\x80_\x80a\x12\xD5\x8B\x8B\x89a\x1C\x98V[\x97P\x95Pa\x12\xE4\x8B\x8B\x89a\x1D^V[\x97P\x94Pa\x12\xF3\x8B\x8B\x89a\x1C\x98V[\x97P\x93Pa\x13\x02\x8B\x8B\x89a\x1C\x98V[\x97P\x92Pa\x13\x11\x8B\x8B\x89a\x1C\x98V[\x97P\x91Pa\x13 \x8B\x8B\x89a\x1C\xB3V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x13}\x86\x86\x84a\x19\x89V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x9EWa\x13\x9Ea'UV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x13\xC7W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x14\x12Wa\x13\xE5\x88\x88\x86a\x1C\x98V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x13\xFAWa\x13\xFAa'iV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x13\xCCV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x14x\x84\x84a\x14=\x85a\x1D\xD8V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1E\x80V[\x90P[\x93\x92PPPV[``\x81_a\x14\x91\x86\x86\x84a\x19\x89V[\x92P\x90P`\xFF\x81\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xB1Wa\x14\xB1a'UV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x14\xF5W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x14\xCFW\x90P[P\x92P_[\x81`\xFF\x16\x81\x10\x15a\x15iW_\x80a\x15\x12\x89\x89\x87a\x1F\x92V[\x95P\x91Pa\x15!\x89\x89\x87a\x1F\xDFV[\x80\x96P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83a\xFF\xFF\x16\x81R` \x01\x82\x81RP\x86\x84\x81Q\x81\x10a\x15TWa\x15Ta'iV[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x14\xFAV[PP\x93P\x93\x91PPV[_a\x14x\x84\x84a\x15\x82\x85a (V[`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FInstruction merkle tree:\0\0\0\0\0\0\0\0\x81RPa\x1E\x80V[`@Q\x7FFunction:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`)\x81\x01\x82\x90R_\x90\x81\x90`I\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\n\xE2\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01\x7FFunction merkle tree:\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1E\x80V[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a\x16hWP_\x19\x82\x14[\x15a\x16uWPP`\x02\x90RV[a\x16\x82\x83`\x80\x01Qa\x18\xF0V[`\xA0\x84\x01QR` \x83\x01Qa\x16\x96\x90a\x16\xFBV[`@\x84\x01QR`\x80\x83\x01Qa\x16\xB1\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_a\x16\xE1\x82\x83a\x01@\x01Q_\x1Ca\"\rV[a\x16\xECWP_\x91\x90PV[P_\x19a\x01@\x90\x91\x01R`\x01\x90V[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a\x17\x80W\x83Qa\x17#\x90a\x17\x1E\x90\x83a\"MV[a\"\x84V[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a\x17\x06V[PP\x91\x90PV[_`\x01\x83\x01a\x17\xD8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FMULTISTACK_NOSTACK_ACTIVE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x81\x15a\x18\x9EW\x83Q`\x01\x01a\x18/W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FMULTISTACK_NOSTACK_MAIN\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x83Q` \x80\x86\x01Q`@Qa\x18\x81\x93\x92\x87\x92\x91\x01\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x0B\x81\x01\x93\x90\x93R`+\x83\x01\x91\x90\x91R`K\x82\x01R`k\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x14{V[\x83Q` \x80\x86\x01Q`@Q\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x81\x01\x92\x90\x92R`+\x82\x01\x86\x90R`K\x82\x01\x92\x90\x92R`k\x81\x01\x91\x90\x91R`\x8B\x01a\x18\x81V[` \x81\x01Q_[\x82QQ\x81\x10\x15a\x19\x83Wa\x19&\x83_\x01Q\x82\x81Q\x81\x10a\x19\x19Wa\x19\x19a'iV[` \x02` \x01\x01Qa\"\x9FV[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a\x18\xF7V[P\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a\x19\x9DWa\x19\x9Da'iV[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x19\xB3\x81a2SV[\x91PP\x93P\x93\x91PPV[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x81_a\x19\xE5\x86\x86\x84a\x1C\x98V[\x92P\x90P_a\x19\xF5\x87\x87\x85a\x1F\xDFV[\x93P\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x13Wa\x1A\x13a'UV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1AWW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1A1W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x1A\x9AWa\x1Ap\x89\x89\x87a#6V[\x83\x83\x81Q\x81\x10a\x1A\x82Wa\x1A\x82a'iV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x94P`\x01\x01a\x1A\\V[P`@\x80Q``\x81\x01\x82R\x90\x81\x01\x91\x82R\x90\x81R` \x81\x01\x92\x90\x92RP\x95\x90\x94P\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_a\x1A\xE1\x86\x86\x84a\x1C\x98V[\x92P\x90P_a\x1A\xF1\x87\x87\x85a\x1C\x98V[`@\x80Q\x80\x82\x01\x90\x91R\x93\x84R` \x84\x01\x91\x90\x91R\x91\x97\x91\x96P\x90\x94PPPPPV[`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R\x81_a\x1B5\x86\x86\x84a\x1C\x98V[\x92P\x90P``\x86\x86\x84\x81\x81\x10a\x1BMWa\x1BMa'iV[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\x1C\x10W\x82a\x1B\x84\x81a2SV[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R\x91\x95P\x90\x91P\x81` \x01[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x1B\x9EW\x90PP\x90Pa\x1B\xEA\x87\x87\x85a$>V[\x82_\x81Q\x81\x10a\x1B\xFCWa\x1B\xFCa'iV[` \x02` \x01\x01\x81\x95P\x82\x90RPPa\x1CwV[\x82a\x1C\x1A\x81a2SV[`@\x80Q_\x80\x82R` \x82\x01\x90\x92R\x91\x95P\x90\x91Pa\x1CsV[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x1C4W\x90P[P\x90P[`@Q\x80`@\x01`@R\x80\x82\x81R` \x01\x83\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81a\x1C\xA6\x86\x86\x84a\x1F\xDFV[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x04\x81\x10\x15a\x1D\x02W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1C\xDFWa\x1C\xDFa'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1C\xF7\x81a2SV[\x92PP`\x01\x01a\x1C\xB7V[P\x93P\x93\x91PPV[_\x81\x81[`\x08\x81\x10\x15a\x1D\x02W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1D;Wa\x1D;a'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1DS\x81a2SV[\x92PP`\x01\x01a\x1D\x0FV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a\x1D\x89\x88\x88\x86a\x1D\x0BV[\x94P\x92Pa\x1D\x98\x88\x88\x86a\x1D\x0BV[\x94P\x91Pa\x1D\xA7\x88\x88\x86a\x1C\x98V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa\x1D\xEA\x83` \x01Qa$\xF3V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\x0B`\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[\x81_[\x85QQ\x81\x10\x15a\x1F;W\x84`\x01\x16_\x03a\x1E\xE5W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x1E\xAEWa\x1E\xAEa'iV[` \x02` \x01\x01Q`@Q` \x01a\x1E\xC8\x93\x92\x91\x90a2kV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x1F/V[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x1E\xFBWa\x1E\xFBa'iV[` \x02` \x01\x01Q\x83`@Q` \x01a\x1F\x16\x93\x92\x91\x90a2kV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x1E\x83V[P\x83\x15a\x1F\x8AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x94\x93PPPPV[_\x81\x81[`\x02\x81\x10\x15a\x1D\x02W`\x08\x83a\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1F\xBCWa\x1F\xBCa'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1F\xD4\x81a2SV[\x92PP`\x01\x01a\x1F\x96V[_\x81\x81[` \x81\x10\x15a\x1D\x02W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a \x05Wa \x05a'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a \x1D\x81a2SV[\x92PP`\x01\x01a\x1F\xE3V[_\x80\x82Q`\"a 8\x91\x90a2\x8AV[a C\x90`\x0Ea'\xA5V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a [Wa [a'UV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a \x85W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x7FInstructions:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_`\r\x90P\x83Q`\xF8\x1B\x82\x82\x81Q\x81\x10a \xCAWa \xCAa'iV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80a!\x02\x81a2SV[\x91PP_[\x84Q\x81\x10\x15a!\xFDW_\x85\x82\x81Q\x81\x10a!#Wa!#a'iV[` \x02` \x01\x01Q\x90P`\x08\x81_\x01Qa\xFF\xFF\x16\x90\x1C`\xF8\x1B\x84\x84\x81Q\x81\x10a!NWa!Na'iV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80Q`\xF8\x1B\x84a!\x8D\x85`\x01a'\xA5V[\x81Q\x81\x10a!\x9DWa!\x9Da'iV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SPa!\xD6`\x02\x84a'\xA5V[` \x80\x83\x01Q\x86\x83\x01\x82\x01\x81\x90R\x91\x94Pa!\xF1\x90\x85a'\xA5V[\x93PPP`\x01\x01a!\x07V[PP\x80Q` \x90\x91\x01 \x92\x91PPV[_``\x82\x90\x1C\x15a\"\x1FWP_a\x033V[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x82Q\x80Q\x83\x90\x81\x10a\"tWa\"ta'iV[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\x0B`\x92\x91\x90a2\xA1V[_a\"\xAC\x82_\x01Qa\"\x84V[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\x0B`V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_\x85\x85\x83\x81\x81\x10a#]Wa#]a'iV[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa#s\x81a2SV[\x92PPa#~`\x06\x90V[`\x06\x81\x11\x15a#\x8FWa#\x8Fa'}V[`\xFF\x16\x81`\xFF\x16\x11\x15a#\xE4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[_a#\xF0\x87\x87\x85a\x1F\xDFV[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a$\x18Wa$\x18a'}V[`\x06\x81\x11\x15a$)Wa$)a'}V[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x82\x84\x01\x82\x90R``\x83\x01\x82\x90R\x83Q\x80\x85\x01\x90\x94R\x81\x84R\x83\x01R\x90\x82\x90_\x80_a$\x8D\x89\x89\x87a#6V[\x95P\x93Pa$\x9C\x89\x89\x87a\x1C\x98V[\x95P\x92Pa$\xAB\x89\x89\x87a\x1C\xB3V[\x95P\x91Pa$\xBA\x89\x89\x87a\x1C\xB3V[`@\x80Q`\x80\x81\x01\x82R\x96\x87R` \x87\x01\x95\x90\x95Rc\xFF\xFF\xFF\xFF\x93\x84\x16\x94\x86\x01\x94\x90\x94R\x90\x91\x16``\x84\x01RP\x90\x96\x90\x95P\x93PPPPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\x0B`V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a%\xA7`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a%\xE3`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a&\x07`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[`@Q\x80`@\x01`@R\x80a&ba&tV[\x81R` \x01a&oa&tV[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a&\xA3W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_\x80_\x80_\x85\x87\x03`\xC0\x81\x12\x15a&\xC7W_\x80\xFD[``\x81\x12\x15a&\xD4W_\x80\xFD[P\x85\x94P``\x86\x015\x93P`\x80\x86\x015\x92P`\xA0\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a'\0W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a'\x13W_\x80\xFD[\x815\x81\x81\x11\x15a'!W_\x80\xFD[\x89` \x82\x85\x01\x01\x11\x15a'2W_\x80\xFD[\x96\x99\x95\x98P\x93\x96P` \x01\x94\x93\x92PPPV[_`\xA0\x82\x84\x03\x12\x15a\x19\x83W_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x033Wa\x033a'\x91V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_c\xFF\xFF\xFF\xFF\x80\x84\x16\x80a'\xE2Wa'\xE2a'\xB8V[\x92\x16\x91\x90\x91\x04\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x80\x84\x16\x80a(\x04Wa(\x04a'\xB8V[\x92\x16\x91\x90\x91\x06\x92\x91PPV[_\x80\x85\x85\x11\x15a(\x1EW_\x80\xFD[\x83\x86\x11\x15a(*W_\x80\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a(TWa(Ta'\x91V[P\x92\x91PPV[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a(TWa(Ta'\x91V[`\x03\x81\x10a(\x86Wa(\x86a'}V[\x90RV[\x80Q`\x07\x81\x10a(\x9CWa(\x9Ca'}V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a(\xF8Wa(\xE4\x82\x86Qa(\x8AV[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a(\xD1V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a){W\x84Qa)G\x85\x82Qa(\x8AV[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a)2V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[\x81\x83R\x81\x81` \x85\x017P_` \x82\x84\x01\x01R_` `\x1F\x19`\x1F\x84\x01\x16\x84\x01\x01\x90P\x92\x91PPV[_a\x01\xE0\x885\x83R` \x89\x015`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x14a)\xE0W_\x80\xFD[\x80` \x86\x01RPP`@\x89\x015`@\x84\x01R\x80``\x84\x01Ra*\x05\x81\x84\x01\x89Qa(vV[P` \x87\x01Qa\x01\xC0\x80a\x02\0\x85\x01Ra*#a\x03\xA0\x85\x01\x83a(\xA9V[`@\x8A\x01Q\x80Qa\x02 \x87\x01R` \x81\x01Qa\x02@\x87\x01R\x90\x92PP``\x89\x01Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE \x80\x86\x85\x03\x01a\x02`\x87\x01Ra*z\x84\x83a(\xA9V[\x93P`\x80\x8B\x01Q\x91P\x80\x86\x85\x03\x01a\x02\x80\x87\x01RPa*\x99\x83\x82a)\x11V[\x92PP`\xA0\x89\x01Qa*\xB9a\x02\xA0\x86\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x89\x01Qa\x02\xE0\x85\x01R`\xE0\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03\0\x86\x01RPa\x01\0\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03 \x86\x01RPa\x01 \x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03@\x86\x01RPa\x01@\x89\x01Qa\x03`\x85\x01Ra\x01`\x89\x01Qa\x03\x80\x85\x01Ra+\x85`\x80\x85\x01\x89\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[\x86Qa\xFF\xFF\x16a\x01\x80\x85\x01R` \x87\x01Qa\x01\xA0\x85\x01R\x83\x82\x03\x90\x84\x01Ra+\xAE\x81\x85\x87a)\x95V[\x99\x98PPPPPPPPPV[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,\xBDWa,\xBDa'UV[`@R\x91\x90PV[`\x03\x81\x10a,\xD1W_\x80\xFD[PV[\x80Qa\x0C8\x81a,\xC5V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a,\xF8Wa,\xF8a'UV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a-\x12W_\x80\xFD[a-\x1Aa+\xBBV[\x90P\x81Q`\x07\x81\x10a-*W_\x80\xFD[\x80\x82RP` \x82\x01Q` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a-OW_\x80\xFD[a-Wa+\xBBV[\x91P\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a-pW_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a-\x85W_\x80\xFD[a-\x8Da+\xE4V[\x83Q\x83\x81\x11\x15a-\x9BW_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a-\xAFW_\x80\xFD[\x83Q\x92Pa-\xC4a-\xBF\x84a,\xDFV[a,\x94V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a-\xE2W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a.\x08Wa-\xF9\x8A\x87a-\x02V[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a-\xE7V[\x82RP\x85R\x94\x85\x01Q\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a.1W_\x80\xFD[a.9a+\xBBV[\x90P\x81Q\x81R` \x82\x01Q` \x82\x01R\x92\x91PPV[\x80Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0C8W_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a.sW_\x80\xFD[a.{a+\xBBV[\x91P\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a.\x93W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a.\xA3W_\x80\xFD[\x80Q` a.\xB3a-\xBF\x83a,\xDFV[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a.\xD1W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a/8W\x80\x86\x8B\x03\x12\x15a.\xECW_\x80\xFD[a.\xF4a,\x07V[a.\xFE\x8B\x88a-\x02V[\x81R\x87\x87\x01Q\x85\x82\x01R``a/\x15\x81\x89\x01a.OV[\x89\x83\x01Ra/%`\x80\x89\x01a.OV[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a.\xD6V[P\x80\x87RPP\x80\x86\x01Q\x81\x86\x01RPPPP\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a,\xD1W_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a/wW_\x80\xFD[a/\x7Fa,*V[\x91P\x82Q\x82R```\x1F\x19\x82\x01\x12\x15a/\x96W_\x80\xFD[Pa/\x9Fa,MV[` \x83\x01Qa/\xAD\x81a/PV[\x81R`@\x83\x01Qa/\xBD\x81a/PV[\x80` \x83\x01RP``\x83\x01Q`@\x82\x01R\x80` \x83\x01RP`\x80\x82\x01Q`@\x82\x01R`\xA0\x82\x01Q``\x82\x01R`\xC0\x82\x01Q`\x80\x82\x01Ra/\xFF`\xE0\x83\x01a.OV[`\xA0\x82\x01R\x92\x91PPV[_\x80a\x01 \x80\x84\x86\x03\x12\x15a0\x1DW_\x80\xFD[\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a04W_\x80\xFD[\x90\x85\x01\x90a\x01\xC0\x82\x88\x03\x12\x15a0HW_\x80\xFD[a0Pa,pV[a0Y\x83a,\xD4V[\x81R` \x83\x01Q\x82\x81\x11\x15a0lW_\x80\xFD[a0x\x89\x82\x86\x01a->V[` \x83\x01RPa0\x8B\x88`@\x85\x01a.!V[`@\x82\x01R`\x80\x83\x01Q\x82\x81\x11\x15a0\xA1W_\x80\xFD[a0\xAD\x89\x82\x86\x01a->V[``\x83\x01RP`\xA0\x83\x01Q\x82\x81\x11\x15a0\xC4W_\x80\xFD[a0\xD0\x89\x82\x86\x01a.bV[`\x80\x83\x01RPa0\xE3\x88`\xC0\x85\x01a.!V[`\xA0\x82\x01Ra\x01\0\x91P\x81\x83\x01Q`\xC0\x82\x01Ra1\x01\x84\x84\x01a.OV[`\xE0\x82\x01Ra\x01@a1\x14\x81\x85\x01a.OV[\x83\x83\x01Ra\x01`\x92Pa1(\x83\x85\x01a.OV[\x85\x83\x01Ra\x01\x80\x84\x01Q\x81\x83\x01RPa\x01\xA0\x83\x01Q\x82\x82\x01R\x80\x95PPPPPa1U\x84` \x85\x01a/eV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a1nW_\x80\xFD[\x815a\x14{\x81a,\xC5V[_`\x80\x82\x84\x03\x12\x15a1\x89W_\x80\xFD[a1\x91a+\xBBV[\x83`\x1F\x84\x01\x12a1\x9FW_\x80\xFD[a1\xA7a+\xBBV[\x80`@\x85\x01\x86\x81\x11\x15a1\xB8W_\x80\xFD[\x85[\x81\x81\x10\x15a1\xD2W\x805\x84R` \x93\x84\x01\x93\x01a1\xBAV[P\x81\x84R\x86`_\x87\x01\x12a1\xE4W_\x80\xFD[a1\xECa+\xBBV[\x92P\x82\x91P`\x80\x86\x01\x87\x81\x11\x15a2\x01W_\x80\xFD[\x80\x82\x10\x15a2&W\x815a2\x14\x81a/PV[\x84R` \x93\x84\x01\x93\x91\x90\x91\x01\x90a2\x01V[PP` \x83\x01RP\x93\x92PPPV[_`\xFF\x82\x16`\xFF\x81\x03a2JWa2Ja'\x91V[`\x01\x01\x92\x91PPV[__\x19\x82\x03a2dWa2da'\x91V[P`\x01\x01\x90V[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x033Wa\x033a'\x91V[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a2\xD5Wa2\xD5a'}V[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V\xFE\xA2dipfsX\"\x12 \x86\x9B\x18\xE3\xDA$\xD9$\xC3\x80(\xBE\xC5v\x18\x1B\xD629\xA86@3\x0C\xD3\x1C\xDBy\x86&\x8E3dsolcC\0\x08\x19\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506004361061007a575f3560e01c80635f52fd7c116100585780635f52fd7c146100e157806366e5d9c3146100f4578063b5112fd214610107578063c39619c41461011a575f80fd5b806304997be41461007e5780631f128bc0146100a457806330a5509f146100cf575b5f80fd5b61009161008c366004612692565b61012d565b6040519081526020015b60405180910390f35b6001546100b7906001600160a01b031681565b6040516001600160a01b03909116815260200161009b565b5f546100b7906001600160a01b031681565b6003546100b7906001600160a01b031681565b6002546100b7906001600160a01b031681565b6100916101153660046126b2565b610339565b610091610128366004612745565b610aeb565b604080516003808252608082019092525f91829190816020015b604080518082019091525f80825260208201528152602001906001900390816101475750506040805180820182525f808252602091820181905282518084019093526004835290820152909150815f815181106101a6576101a6612769565b60200260200101819052506101e65f604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b816001815181106101f9576101f9612769565b60200260200101819052506102395f604080518082019091525f808252602082015250604080518082019091525f815263ffffffff909116602082015290565b8160028151811061024c5761024c612769565b60209081029190910181019190915260408051808301825283815281518083019092528082525f9282019290925261029a60408051606080820183529181019182529081525f602082015290565b604080518082018252606081525f602080830182905283518085019094528301525f1982529060408051610180810182525f80825260208201879052918101839052606081018590526080810184905260a0810183905260c081018b905260e0810182905261010081018290526101208101919091525f19610140820152610160810189905261032981610c3d565b9750505050505050505b92915050565b5f610342612574565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516020810190915260608152604080518082019091525f80825260208201525f6103b9888883610e87565b9095509050886103c886610c3d565b1461041a5760405162461bcd60e51b815260206004820152601360248201527f4d414348494e455f4245464f52455f484153480000000000000000000000000060448201526064015b60405180910390fd5b5f8551600281111561042e5761042e61277d565b146105155761043b61264f565b6104468989846110f6565b60c088015190935090915061045a826111d0565b146104a75760405162461bcd60e51b815260206004820152601060248201527f4241445f474c4f42414c5f5354415445000000000000000000000000000000006044820152606401610411565b6001865160028111156104bc576104bc61277d565b1480156104c757508a155b80156104e857508b356104dc82602001515190565b67ffffffffffffffff16105b1561050c576104ff8660c001518d6040013561012d565b9650505050505050610ae2565b6104ff86610c3d565b650800000000006105278b60016127a5565b03610545576002855261053985610c3d565b95505050505050610ae2565b61055088888361125f565b9094509050610560888883611361565b809250819450505084610160015161058d8660e0015163ffffffff16868661142e9092919063ffffffff16565b146105da5760405162461bcd60e51b815260206004820152600c60248201527f4d4f44554c45535f524f4f5400000000000000000000000000000000000000006044820152606401610411565b60606105f26040518060200160405280606081525090565b60408051602081019091526060815261060c8b8b86611482565b9450925061061b8b8b86611361565b9450915061062a8b8b86611361565b80955081925050505f61065f60408a610120015161064891906127cc565b63ffffffff1685856115739092919063ffffffff16565b90505f6106828a610100015163ffffffff1683856115bd9092919063ffffffff16565b9050886060015181146106d75760405162461bcd60e51b815260206004820152601260248201527f4241445f46554e4354494f4e535f524f4f5400000000000000000000000000006044820152606401610411565b8460408b61012001516106ea91906127ee565b63ffffffff168151811061070057610700612769565b60200260200101519650505050505087878290809261072193929190612810565b97509750505f8460e0015163ffffffff169050600185610120018181516107489190612837565b63ffffffff1690525081515f602861ffff83161080159061076e5750603561ffff831611155b8061078e5750603661ffff83161080159061078e5750603e61ffff831611155b8061079d575061ffff8216603f145b806107ac575061ffff82166040145b156107c357506001546001600160a01b03166109d9565b61ffff8216604514806107da575061ffff82166050145b806108085750604661ffff83161080159061080857506107fc6009604661285b565b61ffff168261ffff1611155b806108365750606761ffff831610801590610836575061082a6002606761285b565b61ffff168261ffff1611155b806108565750606a61ffff8316108015906108565750607861ffff831611155b806108845750605161ffff83161080159061088457506108786009605161285b565b61ffff168261ffff1611155b806108b25750607961ffff8316108015906108b257506108a66002607961285b565b61ffff168261ffff1611155b806108d25750607c61ffff8316108015906108d25750608a61ffff831611155b806108e1575061ffff821660a7145b806108fe575061ffff821660ac14806108fe575061ffff821660ad145b8061091e575060c061ffff83161080159061091e575060c461ffff831611155b8061093e575060bc61ffff83161080159061093e575060bf61ffff831611155b1561095557506002546001600160a01b03166109d9565b61801061ffff831610801590610971575061801361ffff831611155b80610993575061802061ffff831610801590610993575061802461ffff831611155b806109b5575061803061ffff8316108015906109b5575061803261ffff831611155b156109cc57506003546001600160a01b03166109d9565b505f546001600160a01b03165b806001600160a01b031663a92cb5018e8989888f8f6040518763ffffffff1660e01b8152600401610a0f969594939291906129be565b5f60405180830381865afa158015610a29573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a50919081019061300a565b90975095505f61ffff83166180231480610a6f575061ffff8316618024145b1590508015610a8a57610a8386858961142e565b6101608901525b600288516002811115610a9f57610a9f61277d565b148015610ab257506101408801515f1914155b15610ace57610ac08861164d565b610ac9886116cf565b505f88525b610ad788610c3d565b985050505050505050505b95945050505050565b5f6001610afe60a084016080850161315e565b6002811115610b0f57610b0f61277d565b03610b7d57610b2b610b2636849003840184613179565b6111d0565b6040517f4d616368696e652066696e69736865643a000000000000000000000000000000602082015260318101919091526051015b604051602081830303815290604052805190602001209050919050565b6002610b8f60a084016080850161315e565b6002811115610ba057610ba061277d565b03610bf057610bb7610b2636849003840184613179565b6040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610b60565b60405162461bcd60e51b815260206004820152601260248201527f4241445f4d414348494e455f53544154555300000000000000000000000000006044820152606401610411565b919050565b5f8082516002811115610c5257610c5261277d565b03610d8f575f610c7e610c6884602001516116fb565b610140850151604086015191905f191415611787565b90505f610ca7610c9185608001516118f0565b61014086015160a087015191905f191415611787565b90505f82610cb886606001516116fb565b60c087015160e0808901516101008a01516101208b01516101408c01516101608d01516040517f4d616368696e652072756e6e696e673a00000000000000000000000000000000602082015260308101999099526050890197909752607088018a905260908801959095527fffffffff0000000000000000000000000000000000000000000000000000000092841b831660b088015290831b821660b487015290911b1660b884015260bc83015260dc82015260fc0160408051601f19818403018152919052805160209091012095945050505050565b600182516002811115610da457610da461277d565b03610de75760c08201516040517f4d616368696e652066696e69736865643a00000000000000000000000000000060208201526031810191909152605101610b60565b600282516002811115610dfc57610dfc61277d565b03610e3f5760c08201516040517f4d616368696e65206572726f7265643a0000000000000000000000000000000060208201526030810191909152605001610b60565b60405162461bcd60e51b815260206004820152600f60248201527f4241445f4d4143485f53544154555300000000000000000000000000000000006044820152606401610411565b610e8f612574565b815f80610e9d878785611989565b9350905060ff81165f03610eb3575f9150610f23565b8060ff16600103610ec75760019150610f23565b8060ff16600203610edb5760029150610f23565b60405162461bcd60e51b815260206004820152601360248201527f554e4b4e4f574e5f4d4143485f535441545553000000000000000000000000006044820152606401610411565b5060408051606080820183529181019182529081525f602082015260408051606080820183529181019182529081525f6020820152604080518082019091525f808252602082015260408051808201909152606081525f6020820152604080518082019091525f8082526020820152610f9d8b8b896119be565b97509450610fac8b8b89611ac1565b97509250610fbb8b8b896119be565b97509350610fca8b8b89611b14565b97509150610fd98b8b89611ac1565b8098508192505050604051806101800160405280876002811115610fff57610fff61277d565b8152602081019690965260408601939093526060850193909352608084015260a08301919091525f60c0830181905260e083018190526101008301819052610120830181905261014083018190526101609092019190915292506110669050858583611c98565b60c0840191909152905061107b858583611cb3565b63ffffffff90911660e08401529050611095858583611cb3565b63ffffffff90911661010084015290506110b0858583611cb3565b63ffffffff90911661012084015290506110cb858583611c98565b61014084019190915290506110e1858583611c98565b61016084019190915291959194509092505050565b6110fe61264f565b81611107612674565b61110f612674565b5f5b600260ff8216101561115957611128888886611c98565b848360ff166002811061113d5761113d612769565b602002019190915293508061115181613235565b915050611111565b505f5b600260ff821610156111b357611173888886611d0b565b838360ff166002811061118857611188612769565b67ffffffffffffffff90931660209390930201919091529350806111ab81613235565b91505061115c565b506040805180820190915291825260208201529590945092505050565b80518051602091820151828401518051908401516040517f476c6f62616c2073746174653a0000000000000000000000000000000000000095810195909552602d850193909352604d8401919091527fffffffffffffffff00000000000000000000000000000000000000000000000060c091821b8116606d85015291901b1660758201525f90607d01610b60565b6040805160c0810182525f80825282516060808201855282825260208083018490528286018490528401919091529282018190529181018290526080810182905260a0810191909152604080516060810182525f808252602082018190529181018290528391905f805f806112d58b8b89611c98565b975095506112e48b8b89611d5e565b975094506112f38b8b89611c98565b975093506113028b8b89611c98565b975092506113118b8b89611c98565b975091506113208b8b89611cb3565b6040805160c081018252988952602089019790975295870194909452506060850191909152608084015263ffffffff1660a083015290969095509350505050565b604080516020810190915260608152815f61137d868684611989565b925090505f60ff821667ffffffffffffffff81111561139e5761139e612755565b6040519080825280602002602001820160405280156113c7578160200160208202803683370190505b5090505f5b8260ff168160ff161015611412576113e5888886611c98565b838360ff16815181106113fa576113fa612769565b602090810291909101019190915293506001016113cc565b5060405180602001604052808281525093505050935093915050565b5f611478848461143d85611dd8565b6040518060400160405280601381526020017f4d6f64756c65206d65726b6c6520747265653a00000000000000000000000000815250611e80565b90505b9392505050565b6060815f611491868684611989565b9250905060ff811667ffffffffffffffff8111156114b1576114b1612755565b6040519080825280602002602001820160405280156114f557816020015b604080518082019091525f80825260208201528152602001906001900390816114cf5790505b5092505f5b8160ff16811015611569575f80611512898987611f92565b95509150611521898987611fdf565b809650819250505060405180604001604052808361ffff1681526020018281525086848151811061155457611554612769565b602090810291909101015250506001016114fa565b5050935093915050565b5f611478848461158285612028565b6040518060400160405280601881526020017f496e737472756374696f6e206d65726b6c6520747265653a0000000000000000815250611e80565b6040517f46756e6374696f6e3a00000000000000000000000000000000000000000000006020820152602981018290525f908190604901604051602081830303815290604052805190602001209050610ae28585836040518060400160405280601581526020017f46756e6374696f6e206d65726b6c6520747265653a0000000000000000000000815250611e80565b60408101515160a0820151515f1981148061166857505f1982145b1561167557505060029052565b61168283608001516118f0565b60a0840151526020830151611696906116fb565b60408401515260808301516116b19082602082015260609052565b50602091820151808301919091526040805192830190526060825252565b5f6116e1828361014001515f1c61220d565b6116ec57505f919050565b505f1961014090910152600190565b6020810151815151515f5b818110156117805783516117239061171e908361224d565b612284565b6040517f56616c756520737461636b3a00000000000000000000000000000000000000006020820152602c810191909152604c8101849052606c0160408051601f1981840301815291905280516020909101209250600101611706565b5050919050565b5f600183016117d85760405162461bcd60e51b815260206004820152601960248201527f4d554c5449535441434b5f4e4f535441434b5f414354495645000000000000006044820152606401610411565b811561189e57835160010161182f5760405162461bcd60e51b815260206004820152601760248201527f4d554c5449535441434b5f4e4f535441434b5f4d41494e0000000000000000006044820152606401610411565b83516020808601516040516118819392879291017f6d756c7469737461636b3a0000000000000000000000000000000000000000008152600b810193909352602b830191909152604b820152606b0190565b60405160208183030381529060405280519060200120905061147b565b83516020808601516040517f6d756c7469737461636b3a00000000000000000000000000000000000000000092810192909252602b8201869052604b820192909252606b810191909152608b01611881565b60208101515f5b82515181101561198357611926835f0151828151811061191957611919612769565b602002602001015161229f565b6040517f537461636b206672616d6520737461636b3a0000000000000000000000000000602082015260328101919091526052810183905260720160408051601f19818403018152919052805160209091012091506001016118f7565b50919050565b5f8184848281811061199d5761199d612769565b919091013560f81c92508190506119b381613253565b915050935093915050565b60408051606080820183529181019182529081525f6020820152815f6119e5868684611c98565b925090505f6119f5878785611fdf565b935090505f8167ffffffffffffffff811115611a1357611a13612755565b604051908082528060200260200182016040528015611a5757816020015b604080518082019091525f8082526020820152815260200190600190039081611a315790505b5090505f5b8151811015611a9a57611a70898987612336565b838381518110611a8257611a82612769565b60209081029190910101919091529450600101611a5c565b50604080516060810182529081019182529081526020810192909252509590945092505050565b604080518082019091525f8082526020820152815f611ae1868684611c98565b925090505f611af1878785611c98565b604080518082019091529384526020840191909152919791965090945050505050565b60408051808201909152606081525f6020820152815f611b35868684611c98565b925090506060868684818110611b4d57611b4d612769565b909101357fff0000000000000000000000000000000000000000000000000000000000000016159050611c105782611b8481613253565b604080516001808252818301909252919550909150816020015b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f19909201910181611b9e579050509050611bea87878561243e565b825f81518110611bfc57611bfc612769565b602002602001018195508290525050611c77565b82611c1a81613253565b604080515f80825260208201909252919550909150611c73565b6040805160c0810182525f6080820181815260a0830182905282526020808301829052928201819052606082015282525f19909201910181611c345790505b5090505b60405180604001604052808281526020018381525093505050935093915050565b5f8181611ca6868684611fdf565b9097909650945050505050565b5f81815b6004811015611d025760088363ffffffff16901b9250858583818110611cdf57611cdf612769565b919091013560f81c93909317925081611cf781613253565b925050600101611cb7565b50935093915050565b5f81815b6008811015611d025760088367ffffffffffffffff16901b9250858583818110611d3b57611d3b612769565b919091013560f81c93909317925081611d5381613253565b925050600101611d0f565b604080516060810182525f8082526020820181905291810191909152815f8080611d89888886611d0b565b94509250611d98888886611d0b565b94509150611da7888886611c98565b6040805160608101825267ffffffffffffffff96871681529490951660208501529383015250969095509350505050565b5f815f0151611dea83602001516124f3565b6040808501516060860151608087015160a08801519351610b60969594906020017f4d6f64756c653a0000000000000000000000000000000000000000000000000081526007810196909652602786019490945260478501929092526067840152608783015260e01b7fffffffff000000000000000000000000000000000000000000000000000000001660a782015260ab0190565b815f5b855151811015611f3b57846001165f03611ee5578282875f01518381518110611eae57611eae612769565b6020026020010151604051602001611ec89392919061326b565b604051602081830303815290604052805190602001209150611f2f565b82865f01518281518110611efb57611efb612769565b602002602001015183604051602001611f169392919061326b565b6040516020818303038152906040528051906020012091505b600194851c9401611e83565b508315611f8a5760405162461bcd60e51b815260206004820152600f60248201527f50524f4f465f544f4f5f53484f525400000000000000000000000000000000006044820152606401610411565b949350505050565b5f81815b6002811015611d025760088361ffff16901b9250858583818110611fbc57611fbc612769565b919091013560f81c93909317925081611fd481613253565b925050600101611f96565b5f81815b6020811015611d0257600883901b925085858381811061200557612005612769565b919091013560f81c9390931792508161201d81613253565b925050600101611fe3565b5f8082516022612038919061328a565b61204390600e6127a5565b67ffffffffffffffff81111561205b5761205b612755565b6040519080825280601f01601f191660200182016040528015612085576020820181803683370190505b5090507f496e737472756374696f6e733a0000000000000000000000000000000000000060208201525f600d9050835160f81b8282815181106120ca576120ca612769565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053508061210281613253565b9150505f5b84518110156121fd575f85828151811061212357612123612769565b602002602001015190506008815f015161ffff16901c60f81b84848151811061214e5761214e612769565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805160f81b8461218d8560016127a5565b8151811061219d5761219d612769565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053506121d66002846127a5565b60208083015186830182018190529194506121f190856127a5565b93505050600101612107565b5050805160209091012092915050565b5f606082901c1561221f57505f610333565b5063ffffffff818116610120840152602082901c811661010084015260409190911c1660e090910152600190565b604080518082019091525f8082526020820152825180518390811061227457612274612769565b6020026020010151905092915050565b5f815f01518260200151604051602001610b609291906132a1565b5f6122ac825f0151612284565b602080840151604080860151606087015191517f537461636b206672616d653a000000000000000000000000000000000000000094810194909452602c840194909452604c8301919091527fffffffff0000000000000000000000000000000000000000000000000000000060e093841b8116606c840152921b9091166070820152607401610b60565b604080518082019091525f8082526020820152815f85858381811061235d5761235d612769565b919091013560f81c915082905061237381613253565b92505061237e600690565b600681111561238f5761238f61277d565b60ff168160ff1611156123e45760405162461bcd60e51b815260206004820152600e60248201527f4241445f56414c55455f545950450000000000000000000000000000000000006044820152606401610411565b5f6123f0878785611fdf565b809450819250505060405180604001604052808360ff1660068111156124185761241861277d565b60068111156124295761242961277d565b81526020018281525093505050935093915050565b6040805160c0810182525f6080820181815260a08301829052825260208083018290528284018290526060830182905283518085019094528184528301529082905f805f61248d898987612336565b9550935061249c898987611c98565b955092506124ab898987611cb3565b955091506124ba898987611cb3565b60408051608081018252968752602087019590955263ffffffff9384169486019490945290911660608401525090969095509350505050565b805160208083015160408085015190517f4d656d6f72793a00000000000000000000000000000000000000000000000000938101939093527fffffffffffffffff00000000000000000000000000000000000000000000000060c094851b811660278501529190931b16602f82015260378101919091525f90605701610b60565b604080516101808101909152805f81526020016125a760408051606080820183529181019182529081525f602082015290565b81526040805180820182525f808252602080830191909152830152016125e360408051606080820183529181019182529081525f602082015290565b81526020016126076040518060400160405280606081526020015f80191681525090565b81526040805180820182525f8082526020808301829052840191909152908201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b6040518060400160405280612662612674565b815260200161266f612674565b905290565b60405180604001604052806002906020820280368337509192915050565b5f80604083850312156126a3575f80fd5b50508035926020909101359150565b5f805f805f85870360c08112156126c7575f80fd5b60608112156126d4575f80fd5b50859450606086013593506080860135925060a086013567ffffffffffffffff80821115612700575f80fd5b818801915088601f830112612713575f80fd5b813581811115612721575f80fd5b896020828501011115612732575f80fd5b9699959850939650602001949392505050565b5f60a08284031215611983575f80fd5b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561033357610333612791565b634e487b7160e01b5f52601260045260245ffd5b5f63ffffffff808416806127e2576127e26127b8565b92169190910492915050565b5f63ffffffff80841680612804576128046127b8565b92169190910692915050565b5f808585111561281e575f80fd5b8386111561282a575f80fd5b5050820193919092039150565b63ffffffff81811683821601908082111561285457612854612791565b5092915050565b61ffff81811683821601908082111561285457612854612791565b600381106128865761288661277d565b9052565b80516007811061289c5761289c61277d565b8252602090810151910152565b80516040808452905160208483018190528151606086018190525f9392820191849160808801905b808410156128f8576128e482865161288a565b9382019360019390930192908501906128d1565b5060208701516020890152809550505050505092915050565b8051604080845281518482018190525f926060916020918201918388019190865b8281101561297b57845161294785825161288a565b80830151858901528781015163ffffffff90811688870152908701511660808501529381019360a090930192600101612932565b505050602086015160208801528094505050505092915050565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b5f6101e08835835260208901356001600160a01b0381168082146129e0575f80fd5b806020860152505060408901356040840152806060840152612a058184018951612876565b5060208701516101c080610200850152612a236103a08501836128a9565b60408a0151805161022087015260208101516102408701529092505060608901517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe208086850301610260870152612a7a84836128a9565b935060808b01519150808685030161028087015250612a998382612911565b92505060a0890151612ab96102a086018280518252602090810151910152565b5060c08901516102e085015260e089015163ffffffff81166103008601525061010089015163ffffffff81166103208601525061012089015163ffffffff811661034086015250610140890151610360850152610160890151610380850152612b85608085018980518252602081015167ffffffffffffffff80825116602085015280602083015116604085015250604081015160608401525060408101516080830152606081015160a0830152608081015160c083015263ffffffff60a08201511660e08301525050565b865161ffff1661018085015260208701516101a085015283820390840152612bae818587612995565b9998505050505050505050565b6040805190810167ffffffffffffffff81118282101715612bde57612bde612755565b60405290565b6040516020810167ffffffffffffffff81118282101715612bde57612bde612755565b6040516080810167ffffffffffffffff81118282101715612bde57612bde612755565b60405160c0810167ffffffffffffffff81118282101715612bde57612bde612755565b6040516060810167ffffffffffffffff81118282101715612bde57612bde612755565b604051610180810167ffffffffffffffff81118282101715612bde57612bde612755565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cbd57612cbd612755565b604052919050565b60038110612cd1575f80fd5b50565b8051610c3881612cc5565b5f67ffffffffffffffff821115612cf857612cf8612755565b5060051b60200190565b5f60408284031215612d12575f80fd5b612d1a612bbb565b9050815160078110612d2a575f80fd5b808252506020820151602082015292915050565b5f6040808385031215612d4f575f80fd5b612d57612bbb565b9150825167ffffffffffffffff80821115612d70575f80fd5b81850191506020808388031215612d85575f80fd5b612d8d612be4565b835183811115612d9b575f80fd5b80850194505087601f850112612daf575f80fd5b83519250612dc4612dbf84612cdf565b612c94565b83815260069390931b84018201928281019089851115612de2575f80fd5b948301945b84861015612e0857612df98a87612d02565b82529486019490830190612de7565b8252508552948501519484019490945250909392505050565b5f60408284031215612e31575f80fd5b612e39612bbb565b9050815181526020820151602082015292915050565b805163ffffffff81168114610c38575f80fd5b5f6040808385031215612e73575f80fd5b612e7b612bbb565b9150825167ffffffffffffffff811115612e93575f80fd5b8301601f81018513612ea3575f80fd5b80516020612eb3612dbf83612cdf565b82815260a09283028401820192828201919089851115612ed1575f80fd5b948301945b84861015612f385780868b031215612eec575f80fd5b612ef4612c07565b612efe8b88612d02565b815287870151858201526060612f15818901612e4f565b89830152612f2560808901612e4f565b9082015283529485019491830191612ed6565b50808752505080860151818601525050505092915050565b67ffffffffffffffff81168114612cd1575f80fd5b5f818303610100811215612f77575f80fd5b612f7f612c2a565b9150825182526060601f1982011215612f96575f80fd5b50612f9f612c4d565b6020830151612fad81612f50565b81526040830151612fbd81612f50565b8060208301525060608301516040820152806020830152506080820151604082015260a0820151606082015260c08201516080820152612fff60e08301612e4f565b60a082015292915050565b5f8061012080848603121561301d575f80fd5b835167ffffffffffffffff80821115613034575f80fd5b908501906101c08288031215613048575f80fd5b613050612c70565b61305983612cd4565b815260208301518281111561306c575f80fd5b61307889828601612d3e565b60208301525061308b8860408501612e21565b60408201526080830151828111156130a1575f80fd5b6130ad89828601612d3e565b60608301525060a0830151828111156130c4575f80fd5b6130d089828601612e62565b6080830152506130e38860c08501612e21565b60a082015261010091508183015160c0820152613101848401612e4f565b60e0820152610140613114818501612e4f565b838301526101609250613128838501612e4f565b8583015261018084015181830152506101a083015182820152809550505050506131558460208501612f65565b90509250929050565b5f6020828403121561316e575f80fd5b813561147b81612cc5565b5f60808284031215613189575f80fd5b613191612bbb565b83601f84011261319f575f80fd5b6131a7612bbb565b8060408501868111156131b8575f80fd5b855b818110156131d25780358452602093840193016131ba565b5081845286605f8701126131e4575f80fd5b6131ec612bbb565b92508291506080860187811115613201575f80fd5b8082101561322657813561321481612f50565b84526020938401939190910190613201565b50506020830152509392505050565b5f60ff821660ff810361324a5761324a612791565b60010192915050565b5f5f19820361326457613264612791565b5060010190565b5f84518060208701845e91909101928352506020820152604001919050565b808202811582820484141761033357610333612791565b7f56616c75653a000000000000000000000000000000000000000000000000000081525f600784106132d5576132d561277d565b5060f89290921b600683015260078201526027019056fea2646970667358221220869b18e3da24d924c38028bec576181bd63239a83640330cd31cdb7986268e3364736f6c63430008190033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80c_R\xFD|\x11a\0XW\x80c_R\xFD|\x14a\0\xE1W\x80cf\xE5\xD9\xC3\x14a\0\xF4W\x80c\xB5\x11/\xD2\x14a\x01\x07W\x80c\xC3\x96\x19\xC4\x14a\x01\x1AW_\x80\xFD[\x80c\x04\x99{\xE4\x14a\0~W\x80c\x1F\x12\x8B\xC0\x14a\0\xA4W\x80c0\xA5P\x9F\x14a\0\xCFW[_\x80\xFD[a\0\x91a\0\x8C6`\x04a&\x92V[a\x01-V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`\x01Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\0\x9BV[_Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x03Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x02Ta\0\xB7\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\x91a\x01\x156`\x04a&\xB2V[a\x039V[a\0\x91a\x01(6`\x04a'EV[a\n\xEBV[`@\x80Q`\x03\x80\x82R`\x80\x82\x01\x90\x92R_\x91\x82\x91\x90\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01GWPP`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x91\x82\x01\x81\x90R\x82Q\x80\x84\x01\x90\x93R`\x04\x83R\x90\x82\x01R\x90\x91P\x81_\x81Q\x81\x10a\x01\xA6Wa\x01\xA6a'iV[` \x02` \x01\x01\x81\x90RPa\x01\xE6_`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81`\x01\x81Q\x81\x10a\x01\xF9Wa\x01\xF9a'iV[` \x02` \x01\x01\x81\x90RPa\x029_`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01RP`@\x80Q\x80\x82\x01\x90\x91R_\x81Rc\xFF\xFF\xFF\xFF\x90\x91\x16` \x82\x01R\x90V[\x81`\x02\x81Q\x81\x10a\x02LWa\x02La'iV[` \x90\x81\x02\x91\x90\x91\x01\x81\x01\x91\x90\x91R`@\x80Q\x80\x83\x01\x82R\x83\x81R\x81Q\x80\x83\x01\x90\x92R\x80\x82R_\x92\x82\x01\x92\x90\x92Ra\x02\x9A`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[`@\x80Q\x80\x82\x01\x82R``\x81R_` \x80\x83\x01\x82\x90R\x83Q\x80\x85\x01\x90\x94R\x83\x01R_\x19\x82R\x90`@\x80Qa\x01\x80\x81\x01\x82R_\x80\x82R` \x82\x01\x87\x90R\x91\x81\x01\x83\x90R``\x81\x01\x85\x90R`\x80\x81\x01\x84\x90R`\xA0\x81\x01\x83\x90R`\xC0\x81\x01\x8B\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x91\x90\x91R_\x19a\x01@\x82\x01Ra\x01`\x81\x01\x89\x90Ra\x03)\x81a\x0C=V[\x97PPPPPPPP[\x92\x91PPV[_a\x03Ba%tV[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q` \x81\x01\x90\x91R``\x81R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_a\x03\xB9\x88\x88\x83a\x0E\x87V[\x90\x95P\x90P\x88a\x03\xC8\x86a\x0C=V[\x14a\x04\x1AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FMACHINE_BEFORE_HASH\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x85Q`\x02\x81\x11\x15a\x04.Wa\x04.a'}V[\x14a\x05\x15Wa\x04;a&OV[a\x04F\x89\x89\x84a\x10\xF6V[`\xC0\x88\x01Q\x90\x93P\x90\x91Pa\x04Z\x82a\x11\xD0V[\x14a\x04\xA7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01R\x7FBAD_GLOBAL_STATE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[`\x01\x86Q`\x02\x81\x11\x15a\x04\xBCWa\x04\xBCa'}V[\x14\x80\x15a\x04\xC7WP\x8A\x15[\x80\x15a\x04\xE8WP\x8B5a\x04\xDC\x82` \x01QQ\x90V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10[\x15a\x05\x0CWa\x04\xFF\x86`\xC0\x01Q\x8D`@\x015a\x01-V[\x96PPPPPPPa\n\xE2V[a\x04\xFF\x86a\x0C=V[e\x08\0\0\0\0\0a\x05'\x8B`\x01a'\xA5V[\x03a\x05EW`\x02\x85Ra\x059\x85a\x0C=V[\x95PPPPPPa\n\xE2V[a\x05P\x88\x88\x83a\x12_V[\x90\x94P\x90Pa\x05`\x88\x88\x83a\x13aV[\x80\x92P\x81\x94PPP\x84a\x01`\x01Qa\x05\x8D\x86`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x86\x86a\x14.\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\xDAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01R\x7FMODULES_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[``a\x05\xF2`@Q\x80` \x01`@R\x80``\x81RP\x90V[`@\x80Q` \x81\x01\x90\x91R``\x81Ra\x06\x0C\x8B\x8B\x86a\x14\x82V[\x94P\x92Pa\x06\x1B\x8B\x8B\x86a\x13aV[\x94P\x91Pa\x06*\x8B\x8B\x86a\x13aV[\x80\x95P\x81\x92PPP_a\x06_`@\x8Aa\x01 \x01Qa\x06H\x91\x90a'\xCCV[c\xFF\xFF\xFF\xFF\x16\x85\x85a\x15s\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x06\x82\x8Aa\x01\0\x01Qc\xFF\xFF\xFF\xFF\x16\x83\x85a\x15\xBD\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x88``\x01Q\x81\x14a\x06\xD7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_FUNCTIONS_ROOT\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x84`@\x8Ba\x01 \x01Qa\x06\xEA\x91\x90a'\xEEV[c\xFF\xFF\xFF\xFF\x16\x81Q\x81\x10a\x07\0Wa\x07\0a'iV[` \x02` \x01\x01Q\x96PPPPPP\x87\x87\x82\x90\x80\x92a\x07!\x93\x92\x91\x90a(\x10V[\x97P\x97PP_\x84`\xE0\x01Qc\xFF\xFF\xFF\xFF\x16\x90P`\x01\x85a\x01 \x01\x81\x81Qa\x07H\x91\x90a(7V[c\xFF\xFF\xFF\xFF\x16\x90RP\x81Q_`(a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07nWP`5a\xFF\xFF\x83\x16\x11\x15[\x80a\x07\x8EWP`6a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x07\x8EWP`>a\xFF\xFF\x83\x16\x11\x15[\x80a\x07\x9DWPa\xFF\xFF\x82\x16`?\x14[\x80a\x07\xACWPa\xFF\xFF\x82\x16`@\x14[\x15a\x07\xC3WP`\x01T`\x01`\x01`\xA0\x1B\x03\x16a\t\xD9V[a\xFF\xFF\x82\x16`E\x14\x80a\x07\xDAWPa\xFF\xFF\x82\x16`P\x14[\x80a\x08\x08WP`Fa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\x08WPa\x07\xFC`\t`Fa([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x086WP`ga\xFF\xFF\x83\x16\x10\x80\x15\x90a\x086WPa\x08*`\x02`ga([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x08VWP`ja\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08VWP`xa\xFF\xFF\x83\x16\x11\x15[\x80a\x08\x84WP`Qa\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\x84WPa\x08x`\t`Qa([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x08\xB2WP`ya\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xB2WPa\x08\xA6`\x02`ya([V[a\xFF\xFF\x16\x82a\xFF\xFF\x16\x11\x15[\x80a\x08\xD2WP`|a\xFF\xFF\x83\x16\x10\x80\x15\x90a\x08\xD2WP`\x8Aa\xFF\xFF\x83\x16\x11\x15[\x80a\x08\xE1WPa\xFF\xFF\x82\x16`\xA7\x14[\x80a\x08\xFEWPa\xFF\xFF\x82\x16`\xAC\x14\x80a\x08\xFEWPa\xFF\xFF\x82\x16`\xAD\x14[\x80a\t\x1EWP`\xC0a\xFF\xFF\x83\x16\x10\x80\x15\x90a\t\x1EWP`\xC4a\xFF\xFF\x83\x16\x11\x15[\x80a\t>WP`\xBCa\xFF\xFF\x83\x16\x10\x80\x15\x90a\t>WP`\xBFa\xFF\xFF\x83\x16\x11\x15[\x15a\tUWP`\x02T`\x01`\x01`\xA0\x1B\x03\x16a\t\xD9V[a\x80\x10a\xFF\xFF\x83\x16\x10\x80\x15\x90a\tqWPa\x80\x13a\xFF\xFF\x83\x16\x11\x15[\x80a\t\x93WPa\x80 a\xFF\xFF\x83\x16\x10\x80\x15\x90a\t\x93WPa\x80$a\xFF\xFF\x83\x16\x11\x15[\x80a\t\xB5WPa\x800a\xFF\xFF\x83\x16\x10\x80\x15\x90a\t\xB5WPa\x802a\xFF\xFF\x83\x16\x11\x15[\x15a\t\xCCWP`\x03T`\x01`\x01`\xA0\x1B\x03\x16a\t\xD9V[P_T`\x01`\x01`\xA0\x1B\x03\x16[\x80`\x01`\x01`\xA0\x1B\x03\x16c\xA9,\xB5\x01\x8E\x89\x89\x88\x8F\x8F`@Q\x87c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x0F\x96\x95\x94\x93\x92\x91\x90a)\xBEV[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n)W=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\nP\x91\x90\x81\x01\x90a0\nV[\x90\x97P\x95P_a\xFF\xFF\x83\x16a\x80#\x14\x80a\noWPa\xFF\xFF\x83\x16a\x80$\x14[\x15\x90P\x80\x15a\n\x8AWa\n\x83\x86\x85\x89a\x14.V[a\x01`\x89\x01R[`\x02\x88Q`\x02\x81\x11\x15a\n\x9FWa\n\x9Fa'}V[\x14\x80\x15a\n\xB2WPa\x01@\x88\x01Q_\x19\x14\x15[\x15a\n\xCEWa\n\xC0\x88a\x16MV[a\n\xC9\x88a\x16\xCFV[P_\x88R[a\n\xD7\x88a\x0C=V[\x98PPPPPPPPP[\x95\x94PPPPPV[_`\x01a\n\xFE`\xA0\x84\x01`\x80\x85\x01a1^V[`\x02\x81\x11\x15a\x0B\x0FWa\x0B\x0Fa'}V[\x03a\x0B}Wa\x0B+a\x0B&6\x84\x90\x03\x84\x01\x84a1yV[a\x11\xD0V[`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[`\x02a\x0B\x8F`\xA0\x84\x01`\x80\x85\x01a1^V[`\x02\x81\x11\x15a\x0B\xA0Wa\x0B\xA0a'}V[\x03a\x0B\xF0Wa\x0B\xB7a\x0B&6\x84\x90\x03\x84\x01\x84a1yV[`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\x0B`V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01R\x7FBAD_MACHINE_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x91\x90PV[_\x80\x82Q`\x02\x81\x11\x15a\x0CRWa\x0CRa'}V[\x03a\r\x8FW_a\x0C~a\x0Ch\x84` \x01Qa\x16\xFBV[a\x01@\x85\x01Q`@\x86\x01Q\x91\x90_\x19\x14\x15a\x17\x87V[\x90P_a\x0C\xA7a\x0C\x91\x85`\x80\x01Qa\x18\xF0V[a\x01@\x86\x01Q`\xA0\x87\x01Q\x91\x90_\x19\x14\x15a\x17\x87V[\x90P_\x82a\x0C\xB8\x86``\x01Qa\x16\xFBV[`\xC0\x87\x01Q`\xE0\x80\x89\x01Qa\x01\0\x8A\x01Qa\x01 \x8B\x01Qa\x01@\x8C\x01Qa\x01`\x8D\x01Q`@Q\x7FMachine running:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x99\x90\x99R`P\x89\x01\x97\x90\x97R`p\x88\x01\x8A\x90R`\x90\x88\x01\x95\x90\x95R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x84\x1B\x83\x16`\xB0\x88\x01R\x90\x83\x1B\x82\x16`\xB4\x87\x01R\x90\x91\x1B\x16`\xB8\x84\x01R`\xBC\x83\x01R`\xDC\x82\x01R`\xFC\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x95\x94PPPPPV[`\x01\x82Q`\x02\x81\x11\x15a\r\xA4Wa\r\xA4a'}V[\x03a\r\xE7W`\xC0\x82\x01Q`@Q\x7FMachine finished:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`1\x81\x01\x91\x90\x91R`Q\x01a\x0B`V[`\x02\x82Q`\x02\x81\x11\x15a\r\xFCWa\r\xFCa'}V[\x03a\x0E?W`\xC0\x82\x01Q`@Q\x7FMachine errored:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`0\x81\x01\x91\x90\x91R`P\x01a\x0B`V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FBAD_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[a\x0E\x8Fa%tV[\x81_\x80a\x0E\x9D\x87\x87\x85a\x19\x89V[\x93P\x90P`\xFF\x81\x16_\x03a\x0E\xB3W_\x91Pa\x0F#V[\x80`\xFF\x16`\x01\x03a\x0E\xC7W`\x01\x91Pa\x0F#V[\x80`\xFF\x16`\x02\x03a\x0E\xDBW`\x02\x91Pa\x0F#V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01R\x7FUNKNOWN_MACH_STATUS\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[P`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01Ra\x0F\x9D\x8B\x8B\x89a\x19\xBEV[\x97P\x94Pa\x0F\xAC\x8B\x8B\x89a\x1A\xC1V[\x97P\x92Pa\x0F\xBB\x8B\x8B\x89a\x19\xBEV[\x97P\x93Pa\x0F\xCA\x8B\x8B\x89a\x1B\x14V[\x97P\x91Pa\x0F\xD9\x8B\x8B\x89a\x1A\xC1V[\x80\x98P\x81\x92PPP`@Q\x80a\x01\x80\x01`@R\x80\x87`\x02\x81\x11\x15a\x0F\xFFWa\x0F\xFFa'}V[\x81R` \x81\x01\x96\x90\x96R`@\x86\x01\x93\x90\x93R``\x85\x01\x93\x90\x93R`\x80\x84\x01R`\xA0\x83\x01\x91\x90\x91R_`\xC0\x83\x01\x81\x90R`\xE0\x83\x01\x81\x90Ra\x01\0\x83\x01\x81\x90Ra\x01 \x83\x01\x81\x90Ra\x01@\x83\x01\x81\x90Ra\x01`\x90\x92\x01\x91\x90\x91R\x92Pa\x10f\x90P\x85\x85\x83a\x1C\x98V[`\xC0\x84\x01\x91\x90\x91R\x90Pa\x10{\x85\x85\x83a\x1C\xB3V[c\xFF\xFF\xFF\xFF\x90\x91\x16`\xE0\x84\x01R\x90Pa\x10\x95\x85\x85\x83a\x1C\xB3V[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01\0\x84\x01R\x90Pa\x10\xB0\x85\x85\x83a\x1C\xB3V[c\xFF\xFF\xFF\xFF\x90\x91\x16a\x01 \x84\x01R\x90Pa\x10\xCB\x85\x85\x83a\x1C\x98V[a\x01@\x84\x01\x91\x90\x91R\x90Pa\x10\xE1\x85\x85\x83a\x1C\x98V[a\x01`\x84\x01\x91\x90\x91R\x91\x95\x91\x94P\x90\x92PPPV[a\x10\xFEa&OV[\x81a\x11\x07a&tV[a\x11\x0Fa&tV[_[`\x02`\xFF\x82\x16\x10\x15a\x11YWa\x11(\x88\x88\x86a\x1C\x98V[\x84\x83`\xFF\x16`\x02\x81\x10a\x11=Wa\x11=a'iV[` \x02\x01\x91\x90\x91R\x93P\x80a\x11Q\x81a25V[\x91PPa\x11\x11V[P_[`\x02`\xFF\x82\x16\x10\x15a\x11\xB3Wa\x11s\x88\x88\x86a\x1D\x0BV[\x83\x83`\xFF\x16`\x02\x81\x10a\x11\x88Wa\x11\x88a'iV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x93\x16` \x93\x90\x93\x02\x01\x91\x90\x91R\x93P\x80a\x11\xAB\x81a25V[\x91PPa\x11\\V[P`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x95\x90\x94P\x92PPPV[\x80Q\x80Q` \x91\x82\x01Q\x82\x84\x01Q\x80Q\x90\x84\x01Q`@Q\x7FGlobal state:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x81\x01\x95\x90\x95R`-\x85\x01\x93\x90\x93R`M\x84\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x91\x82\x1B\x81\x16`m\x85\x01R\x91\x90\x1B\x16`u\x82\x01R_\x90`}\x01a\x0B`V[`@\x80Q`\xC0\x81\x01\x82R_\x80\x82R\x82Q``\x80\x82\x01\x85R\x82\x82R` \x80\x83\x01\x84\x90R\x82\x86\x01\x84\x90R\x84\x01\x91\x90\x91R\x92\x82\x01\x81\x90R\x91\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x91\x90\x91R`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R\x83\x91\x90_\x80_\x80a\x12\xD5\x8B\x8B\x89a\x1C\x98V[\x97P\x95Pa\x12\xE4\x8B\x8B\x89a\x1D^V[\x97P\x94Pa\x12\xF3\x8B\x8B\x89a\x1C\x98V[\x97P\x93Pa\x13\x02\x8B\x8B\x89a\x1C\x98V[\x97P\x92Pa\x13\x11\x8B\x8B\x89a\x1C\x98V[\x97P\x91Pa\x13 \x8B\x8B\x89a\x1C\xB3V[`@\x80Q`\xC0\x81\x01\x82R\x98\x89R` \x89\x01\x97\x90\x97R\x95\x87\x01\x94\x90\x94RP``\x85\x01\x91\x90\x91R`\x80\x84\x01Rc\xFF\xFF\xFF\xFF\x16`\xA0\x83\x01R\x90\x96\x90\x95P\x93PPPPV[`@\x80Q` \x81\x01\x90\x91R``\x81R\x81_a\x13}\x86\x86\x84a\x19\x89V[\x92P\x90P_`\xFF\x82\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x9EWa\x13\x9Ea'UV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x13\xC7W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82`\xFF\x16\x81`\xFF\x16\x10\x15a\x14\x12Wa\x13\xE5\x88\x88\x86a\x1C\x98V[\x83\x83`\xFF\x16\x81Q\x81\x10a\x13\xFAWa\x13\xFAa'iV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x93P`\x01\x01a\x13\xCCV[P`@Q\x80` \x01`@R\x80\x82\x81RP\x93PPP\x93P\x93\x91PPV[_a\x14x\x84\x84a\x14=\x85a\x1D\xD8V[`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FModule merkle tree:\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1E\x80V[\x90P[\x93\x92PPPV[``\x81_a\x14\x91\x86\x86\x84a\x19\x89V[\x92P\x90P`\xFF\x81\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xB1Wa\x14\xB1a'UV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x14\xF5W\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x14\xCFW\x90P[P\x92P_[\x81`\xFF\x16\x81\x10\x15a\x15iW_\x80a\x15\x12\x89\x89\x87a\x1F\x92V[\x95P\x91Pa\x15!\x89\x89\x87a\x1F\xDFV[\x80\x96P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83a\xFF\xFF\x16\x81R` \x01\x82\x81RP\x86\x84\x81Q\x81\x10a\x15TWa\x15Ta'iV[` \x90\x81\x02\x91\x90\x91\x01\x01RPP`\x01\x01a\x14\xFAV[PP\x93P\x93\x91PPV[_a\x14x\x84\x84a\x15\x82\x85a (V[`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FInstruction merkle tree:\0\0\0\0\0\0\0\0\x81RPa\x1E\x80V[`@Q\x7FFunction:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`)\x81\x01\x82\x90R_\x90\x81\x90`I\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\n\xE2\x85\x85\x83`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01\x7FFunction merkle tree:\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x1E\x80V[`@\x81\x01QQ`\xA0\x82\x01QQ_\x19\x81\x14\x80a\x16hWP_\x19\x82\x14[\x15a\x16uWPP`\x02\x90RV[a\x16\x82\x83`\x80\x01Qa\x18\xF0V[`\xA0\x84\x01QR` \x83\x01Qa\x16\x96\x90a\x16\xFBV[`@\x84\x01QR`\x80\x83\x01Qa\x16\xB1\x90\x82` \x82\x01R``\x90RV[P` \x91\x82\x01Q\x80\x83\x01\x91\x90\x91R`@\x80Q\x92\x83\x01\x90R``\x82RRV[_a\x16\xE1\x82\x83a\x01@\x01Q_\x1Ca\"\rV[a\x16\xECWP_\x91\x90PV[P_\x19a\x01@\x90\x91\x01R`\x01\x90V[` \x81\x01Q\x81QQQ_[\x81\x81\x10\x15a\x17\x80W\x83Qa\x17#\x90a\x17\x1E\x90\x83a\"MV[a\"\x84V[`@Q\x7FValue stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`,\x81\x01\x91\x90\x91R`L\x81\x01\x84\x90R`l\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x92P`\x01\x01a\x17\x06V[PP\x91\x90PV[_`\x01\x83\x01a\x17\xD8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FMULTISTACK_NOSTACK_ACTIVE\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x81\x15a\x18\x9EW\x83Q`\x01\x01a\x18/W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FMULTISTACK_NOSTACK_MAIN\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x83Q` \x80\x86\x01Q`@Qa\x18\x81\x93\x92\x87\x92\x91\x01\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x0B\x81\x01\x93\x90\x93R`+\x83\x01\x91\x90\x91R`K\x82\x01R`k\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x14{V[\x83Q` \x80\x86\x01Q`@Q\x7Fmultistack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x81\x01\x92\x90\x92R`+\x82\x01\x86\x90R`K\x82\x01\x92\x90\x92R`k\x81\x01\x91\x90\x91R`\x8B\x01a\x18\x81V[` \x81\x01Q_[\x82QQ\x81\x10\x15a\x19\x83Wa\x19&\x83_\x01Q\x82\x81Q\x81\x10a\x19\x19Wa\x19\x19a'iV[` \x02` \x01\x01Qa\"\x9FV[`@Q\x7FStack frame stack:\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R`2\x81\x01\x91\x90\x91R`R\x81\x01\x83\x90R`r\x01`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R\x80Q` \x90\x91\x01 \x91P`\x01\x01a\x18\xF7V[P\x91\x90PV[_\x81\x84\x84\x82\x81\x81\x10a\x19\x9DWa\x19\x9Da'iV[\x91\x90\x91\x015`\xF8\x1C\x92P\x81\x90Pa\x19\xB3\x81a2SV[\x91PP\x93P\x93\x91PPV[`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x81_a\x19\xE5\x86\x86\x84a\x1C\x98V[\x92P\x90P_a\x19\xF5\x87\x87\x85a\x1F\xDFV[\x93P\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x13Wa\x1A\x13a'UV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x1AWW\x81` \x01[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x1A1W\x90P[P\x90P_[\x81Q\x81\x10\x15a\x1A\x9AWa\x1Ap\x89\x89\x87a#6V[\x83\x83\x81Q\x81\x10a\x1A\x82Wa\x1A\x82a'iV[` \x90\x81\x02\x91\x90\x91\x01\x01\x91\x90\x91R\x94P`\x01\x01a\x1A\\V[P`@\x80Q``\x81\x01\x82R\x90\x81\x01\x91\x82R\x90\x81R` \x81\x01\x92\x90\x92RP\x95\x90\x94P\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_a\x1A\xE1\x86\x86\x84a\x1C\x98V[\x92P\x90P_a\x1A\xF1\x87\x87\x85a\x1C\x98V[`@\x80Q\x80\x82\x01\x90\x91R\x93\x84R` \x84\x01\x91\x90\x91R\x91\x97\x91\x96P\x90\x94PPPPPV[`@\x80Q\x80\x82\x01\x90\x91R``\x81R_` \x82\x01R\x81_a\x1B5\x86\x86\x84a\x1C\x98V[\x92P\x90P``\x86\x86\x84\x81\x81\x10a\x1BMWa\x1BMa'iV[\x90\x91\x015\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x15\x90Pa\x1C\x10W\x82a\x1B\x84\x81a2SV[`@\x80Q`\x01\x80\x82R\x81\x83\x01\x90\x92R\x91\x95P\x90\x91P\x81` \x01[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x1B\x9EW\x90PP\x90Pa\x1B\xEA\x87\x87\x85a$>V[\x82_\x81Q\x81\x10a\x1B\xFCWa\x1B\xFCa'iV[` \x02` \x01\x01\x81\x95P\x82\x90RPPa\x1CwV[\x82a\x1C\x1A\x81a2SV[`@\x80Q_\x80\x82R` \x82\x01\x90\x92R\x91\x95P\x90\x91Pa\x1CsV[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x92\x82\x01\x81\x90R``\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x1C4W\x90P[P\x90P[`@Q\x80`@\x01`@R\x80\x82\x81R` \x01\x83\x81RP\x93PPP\x93P\x93\x91PPV[_\x81\x81a\x1C\xA6\x86\x86\x84a\x1F\xDFV[\x90\x97\x90\x96P\x94PPPPPV[_\x81\x81[`\x04\x81\x10\x15a\x1D\x02W`\x08\x83c\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1C\xDFWa\x1C\xDFa'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1C\xF7\x81a2SV[\x92PP`\x01\x01a\x1C\xB7V[P\x93P\x93\x91PPV[_\x81\x81[`\x08\x81\x10\x15a\x1D\x02W`\x08\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1D;Wa\x1D;a'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1DS\x81a2SV[\x92PP`\x01\x01a\x1D\x0FV[`@\x80Q``\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x91\x90\x91R\x81_\x80\x80a\x1D\x89\x88\x88\x86a\x1D\x0BV[\x94P\x92Pa\x1D\x98\x88\x88\x86a\x1D\x0BV[\x94P\x91Pa\x1D\xA7\x88\x88\x86a\x1C\x98V[`@\x80Q``\x81\x01\x82Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x96\x87\x16\x81R\x94\x90\x95\x16` \x85\x01R\x93\x83\x01RP\x96\x90\x95P\x93PPPPV[_\x81_\x01Qa\x1D\xEA\x83` \x01Qa$\xF3V[`@\x80\x85\x01Q``\x86\x01Q`\x80\x87\x01Q`\xA0\x88\x01Q\x93Qa\x0B`\x96\x95\x94\x90` \x01\x7FModule:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x07\x81\x01\x96\x90\x96R`'\x86\x01\x94\x90\x94R`G\x85\x01\x92\x90\x92R`g\x84\x01R`\x87\x83\x01R`\xE0\x1B\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16`\xA7\x82\x01R`\xAB\x01\x90V[\x81_[\x85QQ\x81\x10\x15a\x1F;W\x84`\x01\x16_\x03a\x1E\xE5W\x82\x82\x87_\x01Q\x83\x81Q\x81\x10a\x1E\xAEWa\x1E\xAEa'iV[` \x02` \x01\x01Q`@Q` \x01a\x1E\xC8\x93\x92\x91\x90a2kV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91Pa\x1F/V[\x82\x86_\x01Q\x82\x81Q\x81\x10a\x1E\xFBWa\x1E\xFBa'iV[` \x02` \x01\x01Q\x83`@Q` \x01a\x1F\x16\x93\x92\x91\x90a2kV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x91P[`\x01\x94\x85\x1C\x94\x01a\x1E\x83V[P\x83\x15a\x1F\x8AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01R\x7FPROOF_TOO_SHORT\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[\x94\x93PPPPV[_\x81\x81[`\x02\x81\x10\x15a\x1D\x02W`\x08\x83a\xFF\xFF\x16\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a\x1F\xBCWa\x1F\xBCa'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a\x1F\xD4\x81a2SV[\x92PP`\x01\x01a\x1F\x96V[_\x81\x81[` \x81\x10\x15a\x1D\x02W`\x08\x83\x90\x1B\x92P\x85\x85\x83\x81\x81\x10a \x05Wa \x05a'iV[\x91\x90\x91\x015`\xF8\x1C\x93\x90\x93\x17\x92P\x81a \x1D\x81a2SV[\x92PP`\x01\x01a\x1F\xE3V[_\x80\x82Q`\"a 8\x91\x90a2\x8AV[a C\x90`\x0Ea'\xA5V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a [Wa [a'UV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a \x85W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x7FInstructions:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R_`\r\x90P\x83Q`\xF8\x1B\x82\x82\x81Q\x81\x10a \xCAWa \xCAa'iV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80a!\x02\x81a2SV[\x91PP_[\x84Q\x81\x10\x15a!\xFDW_\x85\x82\x81Q\x81\x10a!#Wa!#a'iV[` \x02` \x01\x01Q\x90P`\x08\x81_\x01Qa\xFF\xFF\x16\x90\x1C`\xF8\x1B\x84\x84\x81Q\x81\x10a!NWa!Na'iV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SP\x80Q`\xF8\x1B\x84a!\x8D\x85`\x01a'\xA5V[\x81Q\x81\x10a!\x9DWa!\x9Da'iV[` \x01\x01\x90~\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16\x90\x81_\x1A\x90SPa!\xD6`\x02\x84a'\xA5V[` \x80\x83\x01Q\x86\x83\x01\x82\x01\x81\x90R\x91\x94Pa!\xF1\x90\x85a'\xA5V[\x93PPP`\x01\x01a!\x07V[PP\x80Q` \x90\x91\x01 \x92\x91PPV[_``\x82\x90\x1C\x15a\"\x1FWP_a\x033V[Pc\xFF\xFF\xFF\xFF\x81\x81\x16a\x01 \x84\x01R` \x82\x90\x1C\x81\x16a\x01\0\x84\x01R`@\x91\x90\x91\x1C\x16`\xE0\x90\x91\x01R`\x01\x90V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x82Q\x80Q\x83\x90\x81\x10a\"tWa\"ta'iV[` \x02` \x01\x01Q\x90P\x92\x91PPV[_\x81_\x01Q\x82` \x01Q`@Q` \x01a\x0B`\x92\x91\x90a2\xA1V[_a\"\xAC\x82_\x01Qa\"\x84V[` \x80\x84\x01Q`@\x80\x86\x01Q``\x87\x01Q\x91Q\x7FStack frame:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\x81\x01\x94\x90\x94R`,\x84\x01\x94\x90\x94R`L\x83\x01\x91\x90\x91R\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x93\x84\x1B\x81\x16`l\x84\x01R\x92\x1B\x90\x91\x16`p\x82\x01R`t\x01a\x0B`V[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x81_\x85\x85\x83\x81\x81\x10a#]Wa#]a'iV[\x91\x90\x91\x015`\xF8\x1C\x91P\x82\x90Pa#s\x81a2SV[\x92PPa#~`\x06\x90V[`\x06\x81\x11\x15a#\x8FWa#\x8Fa'}V[`\xFF\x16\x81`\xFF\x16\x11\x15a#\xE4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01R\x7FBAD_VALUE_TYPE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04\x11V[_a#\xF0\x87\x87\x85a\x1F\xDFV[\x80\x94P\x81\x92PPP`@Q\x80`@\x01`@R\x80\x83`\xFF\x16`\x06\x81\x11\x15a$\x18Wa$\x18a'}V[`\x06\x81\x11\x15a$)Wa$)a'}V[\x81R` \x01\x82\x81RP\x93PPP\x93P\x93\x91PPV[`@\x80Q`\xC0\x81\x01\x82R_`\x80\x82\x01\x81\x81R`\xA0\x83\x01\x82\x90R\x82R` \x80\x83\x01\x82\x90R\x82\x84\x01\x82\x90R``\x83\x01\x82\x90R\x83Q\x80\x85\x01\x90\x94R\x81\x84R\x83\x01R\x90\x82\x90_\x80_a$\x8D\x89\x89\x87a#6V[\x95P\x93Pa$\x9C\x89\x89\x87a\x1C\x98V[\x95P\x92Pa$\xAB\x89\x89\x87a\x1C\xB3V[\x95P\x91Pa$\xBA\x89\x89\x87a\x1C\xB3V[`@\x80Q`\x80\x81\x01\x82R\x96\x87R` \x87\x01\x95\x90\x95Rc\xFF\xFF\xFF\xFF\x93\x84\x16\x94\x86\x01\x94\x90\x94R\x90\x91\x16``\x84\x01RP\x90\x96\x90\x95P\x93PPPPV[\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q\x90Q\x7FMemory:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x81\x01\x93\x90\x93R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xC0\x94\x85\x1B\x81\x16`'\x85\x01R\x91\x90\x93\x1B\x16`/\x82\x01R`7\x81\x01\x91\x90\x91R_\x90`W\x01a\x0B`V[`@\x80Qa\x01\x80\x81\x01\x90\x91R\x80_\x81R` \x01a%\xA7`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x91\x90\x91R\x83\x01R\x01a%\xE3`@\x80Q``\x80\x82\x01\x83R\x91\x81\x01\x91\x82R\x90\x81R_` \x82\x01R\x90V[\x81R` \x01a&\x07`@Q\x80`@\x01`@R\x80``\x81R` \x01_\x80\x19\x16\x81RP\x90V[\x81R`@\x80Q\x80\x82\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R\x84\x01\x91\x90\x91R\x90\x82\x01\x81\x90R``\x82\x01\x81\x90R`\x80\x82\x01\x81\x90R`\xA0\x82\x01\x81\x90R`\xC0\x82\x01\x81\x90R`\xE0\x90\x91\x01R\x90V[`@Q\x80`@\x01`@R\x80a&ba&tV[\x81R` \x01a&oa&tV[\x90R\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15a&\xA3W_\x80\xFD[PP\x805\x92` \x90\x91\x015\x91PV[_\x80_\x80_\x85\x87\x03`\xC0\x81\x12\x15a&\xC7W_\x80\xFD[``\x81\x12\x15a&\xD4W_\x80\xFD[P\x85\x94P``\x86\x015\x93P`\x80\x86\x015\x92P`\xA0\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a'\0W_\x80\xFD[\x81\x88\x01\x91P\x88`\x1F\x83\x01\x12a'\x13W_\x80\xFD[\x815\x81\x81\x11\x15a'!W_\x80\xFD[\x89` \x82\x85\x01\x01\x11\x15a'2W_\x80\xFD[\x96\x99\x95\x98P\x93\x96P` \x01\x94\x93\x92PPPV[_`\xA0\x82\x84\x03\x12\x15a\x19\x83W_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x033Wa\x033a'\x91V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_c\xFF\xFF\xFF\xFF\x80\x84\x16\x80a'\xE2Wa'\xE2a'\xB8V[\x92\x16\x91\x90\x91\x04\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x80\x84\x16\x80a(\x04Wa(\x04a'\xB8V[\x92\x16\x91\x90\x91\x06\x92\x91PPV[_\x80\x85\x85\x11\x15a(\x1EW_\x80\xFD[\x83\x86\x11\x15a(*W_\x80\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[c\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a(TWa(Ta'\x91V[P\x92\x91PPV[a\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a(TWa(Ta'\x91V[`\x03\x81\x10a(\x86Wa(\x86a'}V[\x90RV[\x80Q`\x07\x81\x10a(\x9CWa(\x9Ca'}V[\x82R` \x90\x81\x01Q\x91\x01RV[\x80Q`@\x80\x84R\x90Q` \x84\x83\x01\x81\x90R\x81Q``\x86\x01\x81\x90R_\x93\x92\x82\x01\x91\x84\x91`\x80\x88\x01\x90[\x80\x84\x10\x15a(\xF8Wa(\xE4\x82\x86Qa(\x8AV[\x93\x82\x01\x93`\x01\x93\x90\x93\x01\x92\x90\x85\x01\x90a(\xD1V[P` \x87\x01Q` \x89\x01R\x80\x95PPPPPP\x92\x91PPV[\x80Q`@\x80\x84R\x81Q\x84\x82\x01\x81\x90R_\x92``\x91` \x91\x82\x01\x91\x83\x88\x01\x91\x90\x86[\x82\x81\x10\x15a){W\x84Qa)G\x85\x82Qa(\x8AV[\x80\x83\x01Q\x85\x89\x01R\x87\x81\x01Qc\xFF\xFF\xFF\xFF\x90\x81\x16\x88\x87\x01R\x90\x87\x01Q\x16`\x80\x85\x01R\x93\x81\x01\x93`\xA0\x90\x93\x01\x92`\x01\x01a)2V[PPP` \x86\x01Q` \x88\x01R\x80\x94PPPPP\x92\x91PPV[\x81\x83R\x81\x81` \x85\x017P_` \x82\x84\x01\x01R_` `\x1F\x19`\x1F\x84\x01\x16\x84\x01\x01\x90P\x92\x91PPV[_a\x01\xE0\x885\x83R` \x89\x015`\x01`\x01`\xA0\x1B\x03\x81\x16\x80\x82\x14a)\xE0W_\x80\xFD[\x80` \x86\x01RPP`@\x89\x015`@\x84\x01R\x80``\x84\x01Ra*\x05\x81\x84\x01\x89Qa(vV[P` \x87\x01Qa\x01\xC0\x80a\x02\0\x85\x01Ra*#a\x03\xA0\x85\x01\x83a(\xA9V[`@\x8A\x01Q\x80Qa\x02 \x87\x01R` \x81\x01Qa\x02@\x87\x01R\x90\x92PP``\x89\x01Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE \x80\x86\x85\x03\x01a\x02`\x87\x01Ra*z\x84\x83a(\xA9V[\x93P`\x80\x8B\x01Q\x91P\x80\x86\x85\x03\x01a\x02\x80\x87\x01RPa*\x99\x83\x82a)\x11V[\x92PP`\xA0\x89\x01Qa*\xB9a\x02\xA0\x86\x01\x82\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[P`\xC0\x89\x01Qa\x02\xE0\x85\x01R`\xE0\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03\0\x86\x01RPa\x01\0\x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03 \x86\x01RPa\x01 \x89\x01Qc\xFF\xFF\xFF\xFF\x81\x16a\x03@\x86\x01RPa\x01@\x89\x01Qa\x03`\x85\x01Ra\x01`\x89\x01Qa\x03\x80\x85\x01Ra+\x85`\x80\x85\x01\x89\x80Q\x82R` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82Q\x16` \x85\x01R\x80` \x83\x01Q\x16`@\x85\x01RP`@\x81\x01Q``\x84\x01RP`@\x81\x01Q`\x80\x83\x01R``\x81\x01Q`\xA0\x83\x01R`\x80\x81\x01Q`\xC0\x83\x01Rc\xFF\xFF\xFF\xFF`\xA0\x82\x01Q\x16`\xE0\x83\x01RPPV[\x86Qa\xFF\xFF\x16a\x01\x80\x85\x01R` \x87\x01Qa\x01\xA0\x85\x01R\x83\x82\x03\x90\x84\x01Ra+\xAE\x81\x85\x87a)\x95V[\x99\x98PPPPPPPPPV[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@R\x90V[`@Q` \x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q`\xC0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Qa\x01\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a+\xDEWa+\xDEa'UV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a,\xBDWa,\xBDa'UV[`@R\x91\x90PV[`\x03\x81\x10a,\xD1W_\x80\xFD[PV[\x80Qa\x0C8\x81a,\xC5V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a,\xF8Wa,\xF8a'UV[P`\x05\x1B` \x01\x90V[_`@\x82\x84\x03\x12\x15a-\x12W_\x80\xFD[a-\x1Aa+\xBBV[\x90P\x81Q`\x07\x81\x10a-*W_\x80\xFD[\x80\x82RP` \x82\x01Q` \x82\x01R\x92\x91PPV[_`@\x80\x83\x85\x03\x12\x15a-OW_\x80\xFD[a-Wa+\xBBV[\x91P\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a-pW_\x80\xFD[\x81\x85\x01\x91P` \x80\x83\x88\x03\x12\x15a-\x85W_\x80\xFD[a-\x8Da+\xE4V[\x83Q\x83\x81\x11\x15a-\x9BW_\x80\xFD[\x80\x85\x01\x94PP\x87`\x1F\x85\x01\x12a-\xAFW_\x80\xFD[\x83Q\x92Pa-\xC4a-\xBF\x84a,\xDFV[a,\x94V[\x83\x81R`\x06\x93\x90\x93\x1B\x84\x01\x82\x01\x92\x82\x81\x01\x90\x89\x85\x11\x15a-\xE2W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a.\x08Wa-\xF9\x8A\x87a-\x02V[\x82R\x94\x86\x01\x94\x90\x83\x01\x90a-\xE7V[\x82RP\x85R\x94\x85\x01Q\x94\x84\x01\x94\x90\x94RP\x90\x93\x92PPPV[_`@\x82\x84\x03\x12\x15a.1W_\x80\xFD[a.9a+\xBBV[\x90P\x81Q\x81R` \x82\x01Q` \x82\x01R\x92\x91PPV[\x80Qc\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0C8W_\x80\xFD[_`@\x80\x83\x85\x03\x12\x15a.sW_\x80\xFD[a.{a+\xBBV[\x91P\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a.\x93W_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13a.\xA3W_\x80\xFD[\x80Q` a.\xB3a-\xBF\x83a,\xDFV[\x82\x81R`\xA0\x92\x83\x02\x84\x01\x82\x01\x92\x82\x82\x01\x91\x90\x89\x85\x11\x15a.\xD1W_\x80\xFD[\x94\x83\x01\x94[\x84\x86\x10\x15a/8W\x80\x86\x8B\x03\x12\x15a.\xECW_\x80\xFD[a.\xF4a,\x07V[a.\xFE\x8B\x88a-\x02V[\x81R\x87\x87\x01Q\x85\x82\x01R``a/\x15\x81\x89\x01a.OV[\x89\x83\x01Ra/%`\x80\x89\x01a.OV[\x90\x82\x01R\x83R\x94\x85\x01\x94\x91\x83\x01\x91a.\xD6V[P\x80\x87RPP\x80\x86\x01Q\x81\x86\x01RPPPP\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a,\xD1W_\x80\xFD[_\x81\x83\x03a\x01\0\x81\x12\x15a/wW_\x80\xFD[a/\x7Fa,*V[\x91P\x82Q\x82R```\x1F\x19\x82\x01\x12\x15a/\x96W_\x80\xFD[Pa/\x9Fa,MV[` \x83\x01Qa/\xAD\x81a/PV[\x81R`@\x83\x01Qa/\xBD\x81a/PV[\x80` \x83\x01RP``\x83\x01Q`@\x82\x01R\x80` \x83\x01RP`\x80\x82\x01Q`@\x82\x01R`\xA0\x82\x01Q``\x82\x01R`\xC0\x82\x01Q`\x80\x82\x01Ra/\xFF`\xE0\x83\x01a.OV[`\xA0\x82\x01R\x92\x91PPV[_\x80a\x01 \x80\x84\x86\x03\x12\x15a0\x1DW_\x80\xFD[\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a04W_\x80\xFD[\x90\x85\x01\x90a\x01\xC0\x82\x88\x03\x12\x15a0HW_\x80\xFD[a0Pa,pV[a0Y\x83a,\xD4V[\x81R` \x83\x01Q\x82\x81\x11\x15a0lW_\x80\xFD[a0x\x89\x82\x86\x01a->V[` \x83\x01RPa0\x8B\x88`@\x85\x01a.!V[`@\x82\x01R`\x80\x83\x01Q\x82\x81\x11\x15a0\xA1W_\x80\xFD[a0\xAD\x89\x82\x86\x01a->V[``\x83\x01RP`\xA0\x83\x01Q\x82\x81\x11\x15a0\xC4W_\x80\xFD[a0\xD0\x89\x82\x86\x01a.bV[`\x80\x83\x01RPa0\xE3\x88`\xC0\x85\x01a.!V[`\xA0\x82\x01Ra\x01\0\x91P\x81\x83\x01Q`\xC0\x82\x01Ra1\x01\x84\x84\x01a.OV[`\xE0\x82\x01Ra\x01@a1\x14\x81\x85\x01a.OV[\x83\x83\x01Ra\x01`\x92Pa1(\x83\x85\x01a.OV[\x85\x83\x01Ra\x01\x80\x84\x01Q\x81\x83\x01RPa\x01\xA0\x83\x01Q\x82\x82\x01R\x80\x95PPPPPa1U\x84` \x85\x01a/eV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a1nW_\x80\xFD[\x815a\x14{\x81a,\xC5V[_`\x80\x82\x84\x03\x12\x15a1\x89W_\x80\xFD[a1\x91a+\xBBV[\x83`\x1F\x84\x01\x12a1\x9FW_\x80\xFD[a1\xA7a+\xBBV[\x80`@\x85\x01\x86\x81\x11\x15a1\xB8W_\x80\xFD[\x85[\x81\x81\x10\x15a1\xD2W\x805\x84R` \x93\x84\x01\x93\x01a1\xBAV[P\x81\x84R\x86`_\x87\x01\x12a1\xE4W_\x80\xFD[a1\xECa+\xBBV[\x92P\x82\x91P`\x80\x86\x01\x87\x81\x11\x15a2\x01W_\x80\xFD[\x80\x82\x10\x15a2&W\x815a2\x14\x81a/PV[\x84R` \x93\x84\x01\x93\x91\x90\x91\x01\x90a2\x01V[PP` \x83\x01RP\x93\x92PPPV[_`\xFF\x82\x16`\xFF\x81\x03a2JWa2Ja'\x91V[`\x01\x01\x92\x91PPV[__\x19\x82\x03a2dWa2da'\x91V[P`\x01\x01\x90V[_\x84Q\x80` \x87\x01\x84^\x91\x90\x91\x01\x92\x83RP` \x82\x01R`@\x01\x91\x90PV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x033Wa\x033a'\x91V[\x7FValue:\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R_`\x07\x84\x10a2\xD5Wa2\xD5a'}V[P`\xF8\x92\x90\x92\x1B`\x06\x83\x01R`\x07\x82\x01R`'\x01\x90V\xFE\xA2dipfsX\"\x12 \x86\x9B\x18\xE3\xDA$\xD9$\xC3\x80(\xBE\xC5v\x18\x1B\xD629\xA86@3\x0C\xD3\x1C\xDBy\x86&\x8E3dsolcC\0\x08\x19\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MachineStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<MachineStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl MachineStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MachineStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MachineStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct ExecutionContext { uint256 maxInboxMessagesRead; address bridge; bytes32 initialWasmModuleRoot; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionContext {
        pub maxInboxMessagesRead: alloy::sol_types::private::primitives::aliases::U256,
        pub bridge: alloy::sol_types::private::Address,
        pub initialWasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionContext> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionContext) -> Self {
                (value.maxInboxMessagesRead, value.bridge, value.initialWasmModuleRoot)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    maxInboxMessagesRead: tuple.0,
                    bridge: tuple.1,
                    initialWasmModuleRoot: tuple.2,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxInboxMessagesRead),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.bridge,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialWasmModuleRoot),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionContext {
            const NAME: &'static str = "ExecutionContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionContext(uint256 maxInboxMessagesRead,address bridge,bytes32 initialWasmModuleRoot)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.maxInboxMessagesRead,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.bridge,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.initialWasmModuleRoot,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.maxInboxMessagesRead,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bridge,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.initialWasmModuleRoot,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.maxInboxMessagesRead,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bridge,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.initialWasmModuleRoot,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct ExecutionState { GlobalState globalState; MachineStatus machineStatus; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExecutionState {
        pub globalState: <GlobalState as alloy::sol_types::SolType>::RustType,
        pub machineStatus: <MachineStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (GlobalState, MachineStatus);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <GlobalState as alloy::sol_types::SolType>::RustType,
            <MachineStatus as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExecutionState> for UnderlyingRustTuple<'_> {
            fn from(value: ExecutionState) -> Self {
                (value.globalState, value.machineStatus)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExecutionState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    globalState: tuple.0,
                    machineStatus: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ExecutionState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ExecutionState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <GlobalState as alloy_sol_types::SolType>::tokenize(
                        &self.globalState,
                    ),
                    <MachineStatus as alloy_sol_types::SolType>::tokenize(
                        &self.machineStatus,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ExecutionState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ExecutionState {
            const NAME: &'static str = "ExecutionState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ExecutionState(GlobalState globalState,uint8 machineStatus)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <GlobalState as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <GlobalState as alloy_sol_types::SolType>::eip712_data_word(
                            &self.globalState,
                        )
                        .0,
                    <MachineStatus as alloy_sol_types::SolType>::eip712_data_word(
                            &self.machineStatus,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ExecutionState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <GlobalState as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.globalState,
                    )
                    + <MachineStatus as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.machineStatus,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <GlobalState as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.globalState,
                    out,
                );
                <MachineStatus as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.machineStatus,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct GlobalState { bytes32[2] bytes32Vals; uint64[2] u64Vals; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct GlobalState {
        pub bytes32Vals: [alloy::sol_types::private::FixedBytes<32>; 2usize],
        pub u64Vals: [u64; 2usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::FixedBytes<32>,
                2usize,
            >,
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::Uint<64>,
                2usize,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            [alloy::sol_types::private::FixedBytes<32>; 2usize],
            [u64; 2usize],
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<GlobalState> for UnderlyingRustTuple<'_> {
            fn from(value: GlobalState) -> Self {
                (value.bytes32Vals, value.u64Vals)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for GlobalState {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    bytes32Vals: tuple.0,
                    u64Vals: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for GlobalState {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for GlobalState {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.bytes32Vals),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.u64Vals),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for GlobalState {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for GlobalState {
            const NAME: &'static str = "GlobalState";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "GlobalState(bytes32[2] bytes32Vals,uint64[2] u64Vals)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.bytes32Vals)
                        .0,
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.u64Vals)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for GlobalState {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.bytes32Vals,
                    )
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<64>,
                        2usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.u64Vals,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.bytes32Vals,
                    out,
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<64>,
                    2usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.u64Vals,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address prover0_, address proverMem_, address proverMath_, address proverHostIo_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub prover0_: alloy::sol_types::private::Address,
        pub proverMem_: alloy::sol_types::private::Address,
        pub proverMath_: alloy::sol_types::private::Address,
        pub proverHostIo_: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.prover0_,
                        value.proverMem_,
                        value.proverMath_,
                        value.proverHostIo_,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        prover0_: tuple.0,
                        proverMem_: tuple.1,
                        proverMath_: tuple.2,
                        proverHostIo_: tuple.3,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.prover0_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proverMem_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proverMath_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proverHostIo_,
                    ),
                )
            }
        }
    };
    /**Function with signature `getMachineHash(((bytes32[2],uint64[2]),uint8))` and selector `0xc39619c4`.
```solidity
function getMachineHash(ExecutionState memory execState) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMachineHashCall {
        pub execState: <ExecutionState as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`getMachineHash(((bytes32[2],uint64[2]),uint8))`](getMachineHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getMachineHashReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ExecutionState,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionState as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMachineHashCall> for UnderlyingRustTuple<'_> {
                fn from(value: getMachineHashCall) -> Self {
                    (value.execState,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getMachineHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { execState: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getMachineHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getMachineHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getMachineHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getMachineHashCall {
            type Parameters<'a> = (ExecutionState,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getMachineHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getMachineHash(((bytes32[2],uint64[2]),uint8))";
            const SELECTOR: [u8; 4] = [195u8, 150u8, 25u8, 196u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionState as alloy_sol_types::SolType>::tokenize(
                        &self.execState,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getStartMachineHash(bytes32,bytes32)` and selector `0x04997be4`.
```solidity
function getStartMachineHash(bytes32 globalStateHash, bytes32 wasmModuleRoot) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getStartMachineHashCall {
        pub globalStateHash: alloy::sol_types::private::FixedBytes<32>,
        pub wasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`getStartMachineHash(bytes32,bytes32)`](getStartMachineHashCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getStartMachineHashReturn {
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getStartMachineHashCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getStartMachineHashCall) -> Self {
                    (value.globalStateHash, value.wasmModuleRoot)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getStartMachineHashCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        globalStateHash: tuple.0,
                        wasmModuleRoot: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getStartMachineHashReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getStartMachineHashReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getStartMachineHashReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getStartMachineHashCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getStartMachineHashReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getStartMachineHash(bytes32,bytes32)";
            const SELECTOR: [u8; 4] = [4u8, 153u8, 123u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.globalStateHash),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.wasmModuleRoot),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proveOneStep((uint256,address,bytes32),uint256,bytes32,bytes)` and selector `0xb5112fd2`.
```solidity
function proveOneStep(ExecutionContext memory execCtx, uint256 machineStep, bytes32 beforeHash, bytes memory proof) external view returns (bytes32 afterHash);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proveOneStepCall {
        pub execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
        pub machineStep: alloy::sol_types::private::primitives::aliases::U256,
        pub beforeHash: alloy::sol_types::private::FixedBytes<32>,
        pub proof: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`proveOneStep((uint256,address,bytes32),uint256,bytes32,bytes)`](proveOneStepCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proveOneStepReturn {
        pub afterHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                ExecutionContext,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ExecutionContext as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proveOneStepCall> for UnderlyingRustTuple<'_> {
                fn from(value: proveOneStepCall) -> Self {
                    (value.execCtx, value.machineStep, value.beforeHash, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proveOneStepCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        execCtx: tuple.0,
                        machineStep: tuple.1,
                        beforeHash: tuple.2,
                        proof: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proveOneStepReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proveOneStepReturn) -> Self {
                    (value.afterHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proveOneStepReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { afterHash: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proveOneStepCall {
            type Parameters<'a> = (
                ExecutionContext,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proveOneStepReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proveOneStep((uint256,address,bytes32),uint256,bytes32,bytes)";
            const SELECTOR: [u8; 4] = [181u8, 17u8, 47u8, 210u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <ExecutionContext as alloy_sol_types::SolType>::tokenize(
                        &self.execCtx,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.machineStep),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.beforeHash),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.proof,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `prover0()` and selector `0x30a5509f`.
```solidity
function prover0() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prover0Call {}
    ///Container type for the return parameters of the [`prover0()`](prover0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct prover0Return {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prover0Call> for UnderlyingRustTuple<'_> {
                fn from(value: prover0Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prover0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<prover0Return> for UnderlyingRustTuple<'_> {
                fn from(value: prover0Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for prover0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for prover0Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = prover0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "prover0()";
            const SELECTOR: [u8; 4] = [48u8, 165u8, 80u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proverHostIo()` and selector `0x5f52fd7c`.
```solidity
function proverHostIo() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverHostIoCall {}
    ///Container type for the return parameters of the [`proverHostIo()`](proverHostIoCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverHostIoReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverHostIoCall> for UnderlyingRustTuple<'_> {
                fn from(value: proverHostIoCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverHostIoCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverHostIoReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proverHostIoReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverHostIoReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proverHostIoCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proverHostIoReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proverHostIo()";
            const SELECTOR: [u8; 4] = [95u8, 82u8, 253u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proverMath()` and selector `0x66e5d9c3`.
```solidity
function proverMath() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMathCall {}
    ///Container type for the return parameters of the [`proverMath()`](proverMathCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMathReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMathCall> for UnderlyingRustTuple<'_> {
                fn from(value: proverMathCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMathCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMathReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proverMathReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMathReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proverMathCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proverMathReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proverMath()";
            const SELECTOR: [u8; 4] = [102u8, 229u8, 217u8, 195u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proverMem()` and selector `0x1f128bc0`.
```solidity
function proverMem() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMemCall {}
    ///Container type for the return parameters of the [`proverMem()`](proverMemCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proverMemReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMemCall> for UnderlyingRustTuple<'_> {
                fn from(value: proverMemCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMemCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proverMemReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proverMemReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proverMemReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proverMemCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proverMemReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proverMem()";
            const SELECTOR: [u8; 4] = [31u8, 18u8, 139u8, 192u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`OneStepProofEntry`](self) function calls.
    pub enum OneStepProofEntryCalls {
        getMachineHash(getMachineHashCall),
        getStartMachineHash(getStartMachineHashCall),
        proveOneStep(proveOneStepCall),
        prover0(prover0Call),
        proverHostIo(proverHostIoCall),
        proverMath(proverMathCall),
        proverMem(proverMemCall),
    }
    #[automatically_derived]
    impl OneStepProofEntryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 153u8, 123u8, 228u8],
            [31u8, 18u8, 139u8, 192u8],
            [48u8, 165u8, 80u8, 159u8],
            [95u8, 82u8, 253u8, 124u8],
            [102u8, 229u8, 217u8, 195u8],
            [181u8, 17u8, 47u8, 210u8],
            [195u8, 150u8, 25u8, 196u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for OneStepProofEntryCalls {
        const NAME: &'static str = "OneStepProofEntryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getMachineHash(_) => {
                    <getMachineHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getStartMachineHash(_) => {
                    <getStartMachineHashCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proveOneStep(_) => {
                    <proveOneStepCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::prover0(_) => <prover0Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::proverHostIo(_) => {
                    <proverHostIoCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proverMath(_) => {
                    <proverMathCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proverMem(_) => {
                    <proverMemCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<OneStepProofEntryCalls>] = &[
                {
                    fn getStartMachineHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <getStartMachineHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::getStartMachineHash)
                    }
                    getStartMachineHash
                },
                {
                    fn proverMem(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proverMemCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proverMem)
                    }
                    proverMem
                },
                {
                    fn prover0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <prover0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::prover0)
                    }
                    prover0
                },
                {
                    fn proverHostIo(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proverHostIoCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proverHostIo)
                    }
                    proverHostIo
                },
                {
                    fn proverMath(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proverMathCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proverMath)
                    }
                    proverMath
                },
                {
                    fn proveOneStep(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <proveOneStepCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::proveOneStep)
                    }
                    proveOneStep
                },
                {
                    fn getMachineHash(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<OneStepProofEntryCalls> {
                        <getMachineHashCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(OneStepProofEntryCalls::getMachineHash)
                    }
                    getMachineHash
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getMachineHash(inner) => {
                    <getMachineHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getStartMachineHash(inner) => {
                    <getStartMachineHashCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proveOneStep(inner) => {
                    <proveOneStepCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::prover0(inner) => {
                    <prover0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::proverHostIo(inner) => {
                    <proverHostIoCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proverMath(inner) => {
                    <proverMathCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::proverMem(inner) => {
                    <proverMemCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getMachineHash(inner) => {
                    <getMachineHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getStartMachineHash(inner) => {
                    <getStartMachineHashCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proveOneStep(inner) => {
                    <proveOneStepCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::prover0(inner) => {
                    <prover0Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::proverHostIo(inner) => {
                    <proverHostIoCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proverMath(inner) => {
                    <proverMathCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proverMem(inner) => {
                    <proverMemCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`OneStepProofEntry`](self) contract instance.

See the [wrapper's documentation](`OneStepProofEntryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> OneStepProofEntryInstance<T, P, N> {
        OneStepProofEntryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        prover0_: alloy::sol_types::private::Address,
        proverMem_: alloy::sol_types::private::Address,
        proverMath_: alloy::sol_types::private::Address,
        proverHostIo_: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<OneStepProofEntryInstance<T, P, N>>,
    > {
        OneStepProofEntryInstance::<
            T,
            P,
            N,
        >::deploy(provider, prover0_, proverMem_, proverMath_, proverHostIo_)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        prover0_: alloy::sol_types::private::Address,
        proverMem_: alloy::sol_types::private::Address,
        proverMath_: alloy::sol_types::private::Address,
        proverHostIo_: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        OneStepProofEntryInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, prover0_, proverMem_, proverMath_, proverHostIo_)
    }
    /**A [`OneStepProofEntry`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`OneStepProofEntry`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct OneStepProofEntryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for OneStepProofEntryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("OneStepProofEntryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProofEntryInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`OneStepProofEntry`](self) contract instance.

See the [wrapper's documentation](`OneStepProofEntryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            prover0_: alloy::sol_types::private::Address,
            proverMem_: alloy::sol_types::private::Address,
            proverMath_: alloy::sol_types::private::Address,
            proverHostIo_: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<OneStepProofEntryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                prover0_,
                proverMem_,
                proverMath_,
                proverHostIo_,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            prover0_: alloy::sol_types::private::Address,
            proverMem_: alloy::sol_types::private::Address,
            proverMath_: alloy::sol_types::private::Address,
            proverHostIo_: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            prover0_,
                            proverMem_,
                            proverMath_,
                            proverHostIo_,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> OneStepProofEntryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> OneStepProofEntryInstance<T, P, N> {
            OneStepProofEntryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProofEntryInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getMachineHash`] function.
        pub fn getMachineHash(
            &self,
            execState: <ExecutionState as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, getMachineHashCall, N> {
            self.call_builder(&getMachineHashCall { execState })
        }
        ///Creates a new call builder for the [`getStartMachineHash`] function.
        pub fn getStartMachineHash(
            &self,
            globalStateHash: alloy::sol_types::private::FixedBytes<32>,
            wasmModuleRoot: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getStartMachineHashCall, N> {
            self.call_builder(
                &getStartMachineHashCall {
                    globalStateHash,
                    wasmModuleRoot,
                },
            )
        }
        ///Creates a new call builder for the [`proveOneStep`] function.
        pub fn proveOneStep(
            &self,
            execCtx: <ExecutionContext as alloy::sol_types::SolType>::RustType,
            machineStep: alloy::sol_types::private::primitives::aliases::U256,
            beforeHash: alloy::sol_types::private::FixedBytes<32>,
            proof: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, proveOneStepCall, N> {
            self.call_builder(
                &proveOneStepCall {
                    execCtx,
                    machineStep,
                    beforeHash,
                    proof,
                },
            )
        }
        ///Creates a new call builder for the [`prover0`] function.
        pub fn prover0(&self) -> alloy_contract::SolCallBuilder<T, &P, prover0Call, N> {
            self.call_builder(&prover0Call {})
        }
        ///Creates a new call builder for the [`proverHostIo`] function.
        pub fn proverHostIo(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proverHostIoCall, N> {
            self.call_builder(&proverHostIoCall {})
        }
        ///Creates a new call builder for the [`proverMath`] function.
        pub fn proverMath(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proverMathCall, N> {
            self.call_builder(&proverMathCall {})
        }
        ///Creates a new call builder for the [`proverMem`] function.
        pub fn proverMem(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proverMemCall, N> {
            self.call_builder(&proverMemCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > OneStepProofEntryInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
